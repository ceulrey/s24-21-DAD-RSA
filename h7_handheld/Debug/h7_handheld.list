
h7_handheld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f150  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800f2e0  0800f2e0  0001f2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7e4  0800f7e4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7e4  0800f7e4  0001f7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7ec  0800f7ec  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7ec  0800f7ec  0001f7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7f0  0800f7f0  0001f7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800f7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000cf4  200001f8  200001f8  000201f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000eec  20000eec  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001afb0  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004314  00000000  00000000  0003b217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001560  00000000  00000000  0003f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000106e  00000000  00000000  00040a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025694  00000000  00000000  00041afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d7e3  00000000  00000000  00067192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d03bd  00000000  00000000  00084975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b68  00000000  00000000  00154d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0015b89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f2c8 	.word	0x0800f2c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800f2c8 	.word	0x0800f2c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <NextionAddComp>:
 */

#include "Nextion.h"

uint8_t NextionAddComp(Nextion* nex, NexComp* _nexcomp, char* objectname, uint8_t __page, uint8_t __id, void (*callbackFuncOnPress)(), void (*callbackFuncOnRelease)())
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_nexcomp->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff f9dc 	bl	8000270 <strlen>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f00b fb39 	bl	800c534 <malloc>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
	//Pass the object name to the struct
	strcpy(_nexcomp->objname, objectname);
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00c fa3a 	bl	800d34a <strcpy>

	//Pass the corresponding data from component to component struct
	_nexcomp->_id = __id;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	7e3a      	ldrb	r2, [r7, #24]
 8000eda:	705a      	strb	r2, [r3, #1]
	_nexcomp->_page = __page;
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	701a      	strb	r2, [r3, #0]

	//Add the component struct to the list on the Nextion Struct
	nex->_NexCompArr[nex->_NexCompCount] = _nexcomp;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000ee8:	461a      	mov	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	321a      	adds	r2, #26
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nex->_NexCompCount++;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000efa:	3301      	adds	r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8

	//Bind the correct callback functions together
	_nexcomp->callbackOnPress = callbackFuncOnPress;
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	605a      	str	r2, [r3, #4]
	_nexcomp->callbackOnRelease = callbackFuncOnRelease;
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	6a3a      	ldr	r2, [r7, #32]
 8000f0e:	609a      	str	r2, [r3, #8]

	//Return OK
	return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <NextionInit>:

uint8_t NextionInit(Nextion *nex, UART_HandleTypeDef *nextionUARTHandle)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
	//Pass the used UART handle to the struct
	nex->nextionUARTHandle = nextionUARTHandle;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	601a      	str	r2, [r3, #0]

	//Start the parsing counters from zero
	nex->_arrCount = 0;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	nex->_pkgCount = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

	//Start UART transaction using DMA
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3364      	adds	r3, #100	; 0x64
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	f006 fe72 	bl	8007c2e <HAL_UART_Receive_IT>

	//Start the component count variable from zero
	nex->_NexCompCount  = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8

	//Return OK
	return 0;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <NextionUpdate>:

uint8_t NextionUpdate(UART_HandleTypeDef *huart, Nextion *nex)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	if(huart->Instance == (nex->nextionUARTHandle->Instance))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 80d9 	bne.w	8001128 <NextionUpdate+0x1cc>
	{
		//Add the received byte to the array and increment the counter afterwards
		nex->_RxDataArr[nex->_arrCount] = nex->_RxData;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	440b      	add	r3, r1
 8000f88:	711a      	strb	r2, [r3, #4]
		nex->_arrCount++;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000f90:	3301      	adds	r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

		//Count 0xFF
		if(nex->_RxData == 0xFF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000fa0:	2bff      	cmp	r3, #255	; 0xff
 8000fa2:	d108      	bne.n	8000fb6 <NextionUpdate+0x5a>
			nex->_pkgCount++;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8000fb4:	e003      	b.n	8000fbe <NextionUpdate+0x62>
		else
			nex->_pkgCount = 0;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

		//Assume a package is received after three 0xFF commands,
		//and start processing the data
		if(nex->_pkgCount == 3)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	f040 80a7 	bne.w	8001118 <NextionUpdate+0x1bc>
		{
			//Determine the length (count) of the data
			uint8_t count = 0, FFCount = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; FFCount < 3; i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	737b      	strb	r3, [r7, #13]
 8000fd6:	e00e      	b.n	8000ff6 <NextionUpdate+0x9a>
			{
				count++;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
				if(nex->_RxDataArr[i] == 0xFF) FFCount++;
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	791b      	ldrb	r3, [r3, #4]
 8000fe6:	2bff      	cmp	r3, #255	; 0xff
 8000fe8:	d102      	bne.n	8000ff0 <NextionUpdate+0x94>
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; FFCount < 3; i++)
 8000ff0:	7b7b      	ldrb	r3, [r7, #13]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	737b      	strb	r3, [r7, #13]
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d9ed      	bls.n	8000fd8 <NextionUpdate+0x7c>
			}

			//In case of a touch event call the callback function accordingly,
			if(nex->_RxDataArr[0] == NEX_RET_EVENT_TOUCH_HEAD)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	2b65      	cmp	r3, #101	; 0x65
 8001002:	d145      	bne.n	8001090 <NextionUpdate+0x134>
			{
				//Loop through the component struct array,
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	733b      	strb	r3, [r7, #12]
 8001008:	e03c      	b.n	8001084 <NextionUpdate+0x128>
				{
					//Detect the affected component by its Page and ID
					if( (nex->_RxDataArr[2] == (nex->_NexCompArr[i]->_id)) && (nex->_RxDataArr[1] == (nex->_NexCompArr[i]->_page)) )
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	799a      	ldrb	r2, [r3, #6]
 800100e:	7b39      	ldrb	r1, [r7, #12]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	311a      	adds	r1, #26
 8001014:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	429a      	cmp	r2, r3
 800101c:	d12f      	bne.n	800107e <NextionUpdate+0x122>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	795a      	ldrb	r2, [r3, #5]
 8001022:	7b39      	ldrb	r1, [r7, #12]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	311a      	adds	r1, #26
 8001028:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d125      	bne.n	800107e <NextionUpdate+0x122>
					{
						//Call the desired On Press or On Release callback function,
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_PRESS) && (nex->_NexCompArr[i]->callbackOnPress != NULL))
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	79db      	ldrb	r3, [r3, #7]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d10e      	bne.n	8001058 <NextionUpdate+0xfc>
 800103a:	7b3a      	ldrb	r2, [r7, #12]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	321a      	adds	r2, #26
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <NextionUpdate+0xfc>
							nex->_NexCompArr[i]->callbackOnPress();
 800104a:	7b3a      	ldrb	r2, [r7, #12]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	321a      	adds	r2, #26
 8001050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4798      	blx	r3
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_RELEASE) && (nex->_NexCompArr[i]->callbackOnRelease != NULL))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	79db      	ldrb	r3, [r3, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10e      	bne.n	800107e <NextionUpdate+0x122>
 8001060:	7b3a      	ldrb	r2, [r7, #12]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	321a      	adds	r2, #26
 8001066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <NextionUpdate+0x122>
							nex->_NexCompArr[i]->callbackOnRelease();
 8001070:	7b3a      	ldrb	r2, [r7, #12]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	321a      	adds	r2, #26
 8001076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4798      	blx	r3
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 800107e:	7b3b      	ldrb	r3, [r7, #12]
 8001080:	3301      	adds	r3, #1
 8001082:	733b      	strb	r3, [r7, #12]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800108a:	7b3a      	ldrb	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d3bc      	bcc.n	800100a <NextionUpdate+0xae>
					}
				}
			}

			//If the received package contains string data
			if(nex->_RxDataArr[0] == NEX_RET_STRING_HEAD)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	791b      	ldrb	r3, [r3, #4]
 8001094:	2b70      	cmp	r3, #112	; 0x70
 8001096:	d121      	bne.n	80010dc <NextionUpdate+0x180>
			{
				nex->NextTextLen = 0;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
				for(int i = 0; i < (count - 4); i++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	e015      	b.n	80010d2 <NextionUpdate+0x176>
				{
					nex->NexTextBuff[i] = nex->_RxDataArr[i+1];
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	7919      	ldrb	r1, [r3, #4]
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	4413      	add	r3, r2
 80010b6:	33e9      	adds	r3, #233	; 0xe9
 80010b8:	460a      	mov	r2, r1
 80010ba:	701a      	strb	r2, [r3, #0]
					nex->NextTextLen++;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 80010c2:	3301      	adds	r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
				for(int i = 0; i < (count - 4); i++)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3301      	adds	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	3b04      	subs	r3, #4
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbe4      	blt.n	80010a6 <NextionUpdate+0x14a>
				}
			}

			//If the received package contains integer data
			if(nex->_RxDataArr[0] == NEX_RET_NUMBER_HEAD)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	791b      	ldrb	r3, [r3, #4]
 80010e0:	2b71      	cmp	r3, #113	; 0x71
 80010e2:	d111      	bne.n	8001108 <NextionUpdate+0x1ac>
			{
				nex->NextNumBuff = ((uint32_t)nex->_RxDataArr[4]<<24)|((uint32_t)nex->_RxDataArr[3]<<16)|(nex->_RxDataArr[2]<<8)|(nex->_RxDataArr[1]);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	7a1b      	ldrb	r3, [r3, #8]
 80010e8:	061a      	lsls	r2, r3, #24
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	79db      	ldrb	r3, [r3, #7]
 80010ee:	041b      	lsls	r3, r3, #16
 80010f0:	4313      	orrs	r3, r2
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	7992      	ldrb	r2, [r2, #6]
 80010f6:	0212      	lsls	r2, r2, #8
 80010f8:	4313      	orrs	r3, r2
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	7952      	ldrb	r2, [r2, #5]
 80010fe:	4313      	orrs	r3, r2
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			}

			//Reset the buffer counters
			nex->_pkgCount = 0;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
			nex->_arrCount = 0;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		}

		HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3364      	adds	r3, #100	; 0x64
 8001120:	2201      	movs	r2, #1
 8001122:	4619      	mov	r1, r3
 8001124:	f006 fd83 	bl	8007c2e <HAL_UART_Receive_IT>
	}

	//Return OK
	return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <NextionSetText>:
	//Return OK
	return 0;
}

uint8_t NextionSetText(Nextion *nex, NexComp *comp, char *usertext)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	; 0x50
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	//Allocate a static buffer for combining the transfer command string
	char transmitBuff[NEXTION_TEXT_BUFF_LEN] = {0};
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	223c      	movs	r2, #60	; 0x3c
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f00c f86c 	bl	800d22a <memset>

	//Combine required commands in a single string
	sprintf(transmitBuff, "%s.txt=\"%s\"", comp->objname, usertext);
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	f107 0010 	add.w	r0, r7, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4906      	ldr	r1, [pc, #24]	; (8001178 <NextionSetText+0x44>)
 800115e:	f00c f801 	bl	800d164 <siprintf>

	//Send the combined command to Nextion and wait for the received answer
	NextionSendCommand(nex, transmitBuff);
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	4619      	mov	r1, r3
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f000 f807 	bl	800117c <NextionSendCommand>

	//Return OK
	return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3750      	adds	r7, #80	; 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	0800f2ec 	.word	0x0800f2ec

0800117c <NextionSendCommand>:
	return 0;
}

char ENDTERMS[]={255,255,255};
uint8_t NextionSendCommand(Nextion *nex, char *_command)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, (uint8_t *)_command, strlen((const char*)_command), NEXTION_TIMEOUT);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681c      	ldr	r4, [r3, #0]
 800118a:	6838      	ldr	r0, [r7, #0]
 800118c:	f7ff f870 	bl	8000270 <strlen>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	23fa      	movs	r3, #250	; 0xfa
 8001196:	6839      	ldr	r1, [r7, #0]
 8001198:	4620      	mov	r0, r4
 800119a:	f006 fcbd 	bl	8007b18 <HAL_UART_Transmit>
	NextionEndCommand(nex);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f806 	bl	80011b0 <NextionEndCommand>

	//Return OK
	return 0;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
	...

080011b0 <NextionEndCommand>:

uint8_t NextionEndCommand(Nextion *nex)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	uint8_t EndCommand[3] = {255, 255, 255};
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <NextionEndCommand+0x3c>)
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	4611      	mov	r1, r2
 80011c2:	8019      	strh	r1, [r3, #0]
 80011c4:	3302      	adds	r3, #2
 80011c6:	0c12      	lsrs	r2, r2, #16
 80011c8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, EndCommand, 3, NEXTION_TIMEOUT);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	f107 010c 	add.w	r1, r7, #12
 80011d2:	23fa      	movs	r3, #250	; 0xfa
 80011d4:	2203      	movs	r2, #3
 80011d6:	f006 fc9f 	bl	8007b18 <HAL_UART_Transmit>
	NextionRestartIT(nex);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f808 	bl	80011f0 <NextionRestartIT>

	//Return OK
	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800f310 	.word	0x0800f310

080011f0 <NextionRestartIT>:

//Following two functions are not needed anymore and will be removed in the future,
uint8_t NextionRestartIT(Nextion *nex)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3364      	adds	r3, #100	; 0x64
 8001200:	2201      	movs	r2, #1
 8001202:	4619      	mov	r1, r3
 8001204:	f006 fd13 	bl	8007c2e <HAL_UART_Receive_IT>

	//Return OK
	return 0;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_SPI_RxCpltCallback>:
//        HAL_SPI_Receive_IT(&hspi1, rx_data1, 1);
//    }
//}

// This function is called when the SPI receives data
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b09c      	sub	sp, #112	; 0x70
 8001218:	af04      	add	r7, sp, #16
 800121a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_SPI_RxCpltCallback+0xb0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d14a      	bne.n	80012bc <HAL_SPI_RxCpltCallback+0xa8>
        // String to store the output for debugging
        char debugOutput[PACKET_SIZE * 3 + 1]; // Each byte could use up to 3 characters in text (2 hex digits and a space) + null terminator
        int offset = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	65fb      	str	r3, [r7, #92]	; 0x5c

        // Convert the received data to hexadecimal string for UART transmission
        for (int i = 0; i < PACKET_SIZE; i++) {
 800122a:	2300      	movs	r3, #0
 800122c:	65bb      	str	r3, [r7, #88]	; 0x58
 800122e:	e017      	b.n	8001260 <HAL_SPI_RxCpltCallback+0x4c>
            offset += snprintf(debugOutput + offset, sizeof(debugOutput) - offset, "%02X ", rx_data1[i]);
 8001230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001232:	f107 0208 	add.w	r2, r7, #8
 8001236:	18d0      	adds	r0, r2, r3
 8001238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800123a:	f1c3 0149 	rsb	r1, r3, #73	; 0x49
 800123e:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <HAL_SPI_RxCpltCallback+0xb4>)
 8001240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4a21      	ldr	r2, [pc, #132]	; (80012cc <HAL_SPI_RxCpltCallback+0xb8>)
 8001248:	f00b ff58 	bl	800d0fc <sniprintf>
 800124c:	4602      	mov	r2, r0
 800124e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001250:	4413      	add	r3, r2
 8001252:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (offset >= sizeof(debugOutput)) break; // Safety check to prevent buffer overflow
 8001254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001256:	2b48      	cmp	r3, #72	; 0x48
 8001258:	d806      	bhi.n	8001268 <HAL_SPI_RxCpltCallback+0x54>
        for (int i = 0; i < PACKET_SIZE; i++) {
 800125a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800125c:	3301      	adds	r3, #1
 800125e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001262:	2b17      	cmp	r3, #23
 8001264:	d9e4      	bls.n	8001230 <HAL_SPI_RxCpltCallback+0x1c>
 8001266:	e000      	b.n	800126a <HAL_SPI_RxCpltCallback+0x56>
            if (offset >= sizeof(debugOutput)) break; // Safety check to prevent buffer overflow
 8001268:	bf00      	nop
        }

        // Transmit the formatted string over UART3
        HAL_UART_Transmit(&huart3, (uint8_t*)debugOutput, strlen(debugOutput), 100);
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	4618      	mov	r0, r3
 8001270:	f7fe fffe 	bl	8000270 <strlen>
 8001274:	4603      	mov	r3, r0
 8001276:	b29a      	uxth	r2, r3
 8001278:	f107 0108 	add.w	r1, r7, #8
 800127c:	2364      	movs	r3, #100	; 0x64
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <HAL_SPI_RxCpltCallback+0xbc>)
 8001280:	f006 fc4a 	bl	8007b18 <HAL_UART_Transmit>

        // Now, process each byte of the received packet through the FSM
        for (int i = 0; i < PACKET_SIZE; i++) {
 8001284:	2300      	movs	r3, #0
 8001286:	657b      	str	r3, [r7, #84]	; 0x54
 8001288:	e010      	b.n	80012ac <HAL_SPI_RxCpltCallback+0x98>
            // Pass each byte of the packet to the FSM
        	processSPIData(hspi, &sensorData1, &rx_data1[i], &uartState1, &timestampBuffer1, &dataBuffer1, &dataIndex1);
 800128a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800128c:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <HAL_SPI_RxCpltCallback+0xb4>)
 800128e:	441a      	add	r2, r3
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_SPI_RxCpltCallback+0xc0>)
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_SPI_RxCpltCallback+0xc4>)
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_SPI_RxCpltCallback+0xc8>)
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_SPI_RxCpltCallback+0xcc>)
 800129e:	4911      	ldr	r1, [pc, #68]	; (80012e4 <HAL_SPI_RxCpltCallback+0xd0>)
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f83f 	bl	8001324 <processSPIData>
        for (int i = 0; i < PACKET_SIZE; i++) {
 80012a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a8:	3301      	adds	r3, #1
 80012aa:	657b      	str	r3, [r7, #84]	; 0x54
 80012ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ae:	2b17      	cmp	r3, #23
 80012b0:	d9eb      	bls.n	800128a <HAL_SPI_RxCpltCallback+0x76>
        }

        // Ready to receive the next packet
        HAL_SPI_Receive_DMA(hspi, rx_data1, PACKET_SIZE);
 80012b2:	2218      	movs	r2, #24
 80012b4:	4904      	ldr	r1, [pc, #16]	; (80012c8 <HAL_SPI_RxCpltCallback+0xb4>)
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f005 fee0 	bl	800707c <HAL_SPI_Receive_DMA>
    }
}
 80012bc:	bf00      	nop
 80012be:	3760      	adds	r7, #96	; 0x60
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40013000 	.word	0x40013000
 80012c8:	200003f8 	.word	0x200003f8
 80012cc:	0800f314 	.word	0x0800f314
 80012d0:	200003b0 	.word	0x200003b0
 80012d4:	20000438 	.word	0x20000438
 80012d8:	20000430 	.word	0x20000430
 80012dc:	2000042c 	.word	0x2000042c
 80012e0:	20000428 	.word	0x20000428
 80012e4:	20000410 	.word	0x20000410

080012e8 <HAL_SPI_ErrorCallback>:

// This function is called in case of an error on SPI
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    // Handle your error here
    // After handling the error, re-arm the SPI receive interrupt
	HAL_SPI_Receive_DMA(hspi, rx_data1, PACKET_SIZE);
 80012f0:	2218      	movs	r2, #24
 80012f2:	4904      	ldr	r1, [pc, #16]	; (8001304 <HAL_SPI_ErrorCallback+0x1c>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f005 fec1 	bl	800707c <HAL_SPI_Receive_DMA>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200003f8 	.word	0x200003f8

08001308 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	NextionUpdate(huart, &nextion);
 8001310:	4903      	ldr	r1, [pc, #12]	; (8001320 <HAL_UART_RxCpltCallback+0x18>)
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fe22 	bl	8000f5c <NextionUpdate>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000043c 	.word	0x2000043c

08001324 <processSPIData>:


void processSPIData(SPI_HandleTypeDef *SPI, SensorDataPacket *sensorData, uint8_t *rxData,
                     UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer, uint32_t *dataIndex) {    // Your existing switch case logic here, adapted for the specific sensorData and rx_data
 8001324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001328:	b089      	sub	sp, #36	; 0x24
 800132a:	af02      	add	r7, sp, #8
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	603b      	str	r3, [r7, #0]
    // This function needs to be adapted from your existing HAL_UART_RxCpltCallback logic
	uint8_t rxByte = *rxData; // The received byte
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	75fb      	strb	r3, [r7, #23]
//    sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
    switch (*uartState) {
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b07      	cmp	r3, #7
 8001340:	f200 80c7 	bhi.w	80014d2 <processSPIData+0x1ae>
 8001344:	a201      	add	r2, pc, #4	; (adr r2, 800134c <processSPIData+0x28>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	0800136d 	.word	0x0800136d
 8001350:	08001383 	.word	0x08001383
 8001354:	08001391 	.word	0x08001391
 8001358:	080013a5 	.word	0x080013a5
 800135c:	080013eb 	.word	0x080013eb
 8001360:	08001465 	.word	0x08001465
 8001364:	08001479 	.word	0x08001479
 8001368:	080014a9 	.word	0x080014a9
        case UART_WAIT_FOR_SOP: // SOP Case
            if (rxByte == 0x53) { // SOP byte = 0x53 ('S')
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	2b53      	cmp	r3, #83	; 0x53
 8001370:	f040 80a6 	bne.w	80014c0 <processSPIData+0x19c>
            	sensorData->sop = rxByte; // Set the sop
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	7dfa      	ldrb	r2, [r7, #23]
 8001378:	701a      	strb	r2, [r3, #0]
            	*uartState = UART_DATATYPE;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
//            	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            }
            break;
 8001380:	e09e      	b.n	80014c0 <processSPIData+0x19c>
        case UART_DATATYPE: // Data type Case
        	sensorData->datatype = rxByte; // Set th		e data type (Temp = 00, Humidity = 01, Sound = 10, Vibration = 11)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	7dfa      	ldrb	r2, [r7, #23]
 8001386:	705a      	strb	r2, [r3, #1]
            *uartState = UART_SENSOR_ID; // Next parameter
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	2202      	movs	r2, #2
 800138c:	701a      	strb	r2, [r3, #0]
            break;
 800138e:	e0a0      	b.n	80014d2 <processSPIData+0x1ae>

        case UART_SENSOR_ID: // Sensor ID Case
        	sensorData->sensorId = rxByte; // Set the sensor ID (000, 001, 010, 011, 100, 101, 110, 111 (i.e. Sensor 1-8)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	7dfa      	ldrb	r2, [r7, #23]
 8001394:	709a      	strb	r2, [r3, #2]
        	*dataIndex = 0; // Reset dataIndex for the next field
 8001396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
            *uartState = UART_TIMESTAMP; // Next parameter
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2203      	movs	r2, #3
 80013a0:	701a      	strb	r2, [r3, #0]
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 80013a2:	e096      	b.n	80014d2 <processSPIData+0x1ae>

        case UART_TIMESTAMP: // Timestamp Case
            // Combine byte into timestamp assuming little endian - least significant byte first
//            	timestampBuffer |= ((uint32_t)rxByte << (24 - (dataIndex * 8)));
        	*timestampBuffer |= ((uint32_t)rxByte << ((*dataIndex-1) * 8));
 80013a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	7df9      	ldrb	r1, [r7, #23]
 80013aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	431a      	orrs	r2, r3
 80013b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013ba:	601a      	str	r2, [r3, #0]
//            	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
//            	sprintf(buffer, "Timestamp partial: 0x%08lX\r\n", timestampBuffer);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 80013bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013c4:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->timestamp)) {
 80013c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d97a      	bls.n	80014c4 <processSPIData+0x1a0>
                sensorData->timestamp = *timestampBuffer; // Assign the complete timestamp
 80013ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	605a      	str	r2, [r3, #4]
                *dataIndex = 0; // Reset dataIndex for the data field
 80013d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
                *timestampBuffer = 0; // Clear the buffer for the next use
 80013dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
                *uartState = UART_DATA; // Move to the next state
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2204      	movs	r2, #4
 80013e6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80013e8:	e06c      	b.n	80014c4 <processSPIData+0x1a0>

        case UART_DATA: // Data Case
            // Combine byte into data assuming little endian - least significant byte first
        	*dataBuffer |= ((uint64_t)rxByte << ((*dataIndex-1) * 8));//            	sprintf(buffer, "Data partial: 0x%016llx\r\n", dataBuffer);
 80013ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2200      	movs	r2, #0
 80013f4:	4698      	mov	r8, r3
 80013f6:	4691      	mov	r9, r2
 80013f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	f1a3 0620 	sub.w	r6, r3, #32
 8001404:	f1c3 0220 	rsb	r2, r3, #32
 8001408:	fa09 f503 	lsl.w	r5, r9, r3
 800140c:	fa08 f606 	lsl.w	r6, r8, r6
 8001410:	4335      	orrs	r5, r6
 8001412:	fa28 f202 	lsr.w	r2, r8, r2
 8001416:	4315      	orrs	r5, r2
 8001418:	fa08 f403 	lsl.w	r4, r8, r3
 800141c:	ea40 0a04 	orr.w	sl, r0, r4
 8001420:	ea41 0b05 	orr.w	fp, r1, r5
 8001424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001426:	e9c3 ab00 	strd	sl, fp, [r3]
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 800142a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001432:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->data)) {
 8001434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b07      	cmp	r3, #7
 800143a:	d945      	bls.n	80014c8 <processSPIData+0x1a4>
                sensorData->data = *dataBuffer; // Assign the complete data
 800143c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	e9c1 2302 	strd	r2, r3, [r1, #8]
                *dataIndex = 0; // Reset dataIndex for the CRC field
 8001448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
                *dataBuffer = 0; // Clear the buffer for the next use
 800144e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9c1 2300 	strd	r2, r3, [r1]
                *uartState = UART_CRC; // Move to the next state
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2205      	movs	r2, #5
 8001460:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001462:	e031      	b.n	80014c8 <processSPIData+0x1a4>

        case UART_CRC: // CRC Case
        	if(rxByte != 0){
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d030      	beq.n	80014cc <processSPIData+0x1a8>
                sensorData->crc = rxByte; // Set the CRC value based on algorithm
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	7dfa      	ldrb	r2, [r7, #23]
 800146e:	741a      	strb	r2, [r3, #16]
                *uartState = UART_EOP; // Next parameter
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2206      	movs	r2, #6
 8001474:	701a      	strb	r2, [r3, #0]
        	}
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 8001476:	e029      	b.n	80014cc <processSPIData+0x1a8>

        case UART_EOP:
            if (rxByte == 0x45) { // EOP byte = 0x45 ('E')
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b45      	cmp	r3, #69	; 0x45
 800147c:	d111      	bne.n	80014a2 <processSPIData+0x17e>
                *uartState = UART_DONE; // Packet reception is complete
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	2207      	movs	r2, #7
 8001482:	701a      	strb	r2, [r3, #0]
                sensorData->eop = rxByte; // Set the eop
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	7dfa      	ldrb	r2, [r7, #23]
 8001488:	745a      	strb	r2, [r3, #17]
                if(SPI->Instance == SPI1){
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <processSPIData+0x1c4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d11d      	bne.n	80014d0 <processSPIData+0x1ac>
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Red LED set when packet is complete
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149a:	4814      	ldr	r0, [pc, #80]	; (80014ec <processSPIData+0x1c8>)
 800149c:	f002 f872 	bl	8003584 <HAL_GPIO_WritePin>
//                    uartState = UART_DONE; // Packet reception is complete
//                    sensorData.eop = rxByte; // Set the eop
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
            }
            break;
 80014a0:	e016      	b.n	80014d0 <processSPIData+0x1ac>
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
            break;
 80014a6:	e013      	b.n	80014d0 <processSPIData+0x1ac>
//        	if(test_five == 5){
//        		printData(sensorData); // Process the data
//        		test_five = 0;
//        	}
//        	printRawData(sensorData);
    		printData(sensorData); // Process the data
 80014a8:	68b8      	ldr	r0, [r7, #8]
 80014aa:	f000 f859 	bl	8001560 <printData>
//        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
        	resetUartState(uartState, timestampBuffer, dataBuffer, dataIndex, rxData);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80014b8:	6838      	ldr	r0, [r7, #0]
 80014ba:	f000 f819 	bl	80014f0 <resetUartState>
            break;
 80014be:	e008      	b.n	80014d2 <processSPIData+0x1ae>
            break;
 80014c0:	bf00      	nop
 80014c2:	e006      	b.n	80014d2 <processSPIData+0x1ae>
            break;
 80014c4:	bf00      	nop
 80014c6:	e004      	b.n	80014d2 <processSPIData+0x1ae>
            break;
 80014c8:	bf00      	nop
 80014ca:	e002      	b.n	80014d2 <processSPIData+0x1ae>
            break;
 80014cc:	bf00      	nop
 80014ce:	e000      	b.n	80014d2 <processSPIData+0x1ae>
            break;
 80014d0:	bf00      	nop
    }
    // Ready to receive the next byte
    HAL_SPI_Receive_DMA(SPI, rxData, 1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f005 fdd0 	bl	800707c <HAL_SPI_Receive_DMA>
}
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014e6:	bf00      	nop
 80014e8:	40013000 	.word	0x40013000
 80014ec:	40020c00 	.word	0x40020c00

080014f0 <resetUartState>:

void resetUartState(UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer, uint32_t *dataIndex, uint8_t *rxData) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
    *uartState = UART_WAIT_FOR_SOP; // Reset UART state
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    *timestampBuffer = 0; // Clear the timestamp buffer
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
    *dataBuffer = 0; // Clear the data buffer
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9c1 2300 	strd	r2, r3, [r1]
    *dataIndex = 0;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
    *rxData = 0;
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800152a:	480c      	ldr	r0, [pc, #48]	; (800155c <resetUartState+0x6c>)
 800152c:	f002 f82a 	bl	8003584 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001536:	4809      	ldr	r0, [pc, #36]	; (800155c <resetUartState+0x6c>)
 8001538:	f002 f824 	bl	8003584 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <resetUartState+0x6c>)
 8001544:	f002 f81e 	bl	8003584 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <resetUartState+0x6c>)
 8001550:	f002 f818 	bl	8003584 <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40020c00 	.word	0x40020c00

08001560 <printData>:
//int validateCRC(const SensorDataPacket *packet) {
////     Placeholder function to validate CRC - replace with actual CRC calculation
//    return packet->crc == crc_calculated;
//}

void printData(const SensorDataPacket *packet) {
 8001560:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001564:	b0e8      	sub	sp, #416	; 0x1a0
 8001566:	af04      	add	r7, sp, #16
 8001568:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800156c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001570:	6018      	str	r0, [r3, #0]
    char x_buf[50];
    char y_buf[50];
    char z_buf[50];
    double data;
    // Assuming the data field is treated as fixed-point and needs to be converted back to float
    if(packet->datatype != VIBRATION || packet->datatype != SOUND){
 8001572:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001576:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d107      	bne.n	8001592 <printData+0x32>
 8001582:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001586:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	785b      	ldrb	r3, [r3, #1]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d013      	beq.n	80015ba <printData+0x5a>
        data = packet->data / 100.0;  // Convert fixed-point back to double
 8001592:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001596:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7fe fffa 	bl	800059c <__aeabi_l2d>
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	4bb8      	ldr	r3, [pc, #736]	; (8001890 <printData+0x330>)
 80015ae:	f7ff f94d 	bl	800084c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
    }

    // Start of Packet (SOP) - Hexadecimal
    sprintf(buffer, "SOP: 0x%02X\r\n", packet->sop);
 80015ba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015cc:	49b1      	ldr	r1, [pc, #708]	; (8001894 <printData+0x334>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00b fdc8 	bl	800d164 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80015d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe fe49 	bl	8000270 <strlen>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80015e6:	2364      	movs	r3, #100	; 0x64
 80015e8:	48ab      	ldr	r0, [pc, #684]	; (8001898 <printData+0x338>)
 80015ea:	f006 fa95 	bl	8007b18 <HAL_UART_Transmit>

    // Data Type - Binary
    sprintf(buffer, "Data Type: %u\r\n", packet->datatype);
 80015ee:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	461a      	mov	r2, r3
 80015fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001600:	49a6      	ldr	r1, [pc, #664]	; (800189c <printData+0x33c>)
 8001602:	4618      	mov	r0, r3
 8001604:	f00b fdae 	bl	800d164 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8001608:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe fe2f 	bl	8000270 <strlen>
 8001612:	4603      	mov	r3, r0
 8001614:	b29a      	uxth	r2, r3
 8001616:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	489e      	ldr	r0, [pc, #632]	; (8001898 <printData+0x338>)
 800161e:	f006 fa7b 	bl	8007b18 <HAL_UART_Transmit>

    // Sensor ID - Binary
    sprintf(buffer, "Sensor ID: %u\r\n", packet->sensorId);
 8001622:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001626:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	461a      	mov	r2, r3
 8001630:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001634:	499a      	ldr	r1, [pc, #616]	; (80018a0 <printData+0x340>)
 8001636:	4618      	mov	r0, r3
 8001638:	f00b fd94 	bl	800d164 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 800163c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fe15 	bl	8000270 <strlen>
 8001646:	4603      	mov	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	4891      	ldr	r0, [pc, #580]	; (8001898 <printData+0x338>)
 8001652:	f006 fa61 	bl	8007b18 <HAL_UART_Transmit>

    // Timestamp - Decimal
    sprintf(buffer, "Timestamp: %lu\r\n", packet->timestamp);
 8001656:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800165a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001666:	498f      	ldr	r1, [pc, #572]	; (80018a4 <printData+0x344>)
 8001668:	4618      	mov	r0, r3
 800166a:	f00b fd7b 	bl	800d164 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 800166e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fdfc 	bl	8000270 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	4885      	ldr	r0, [pc, #532]	; (8001898 <printData+0x338>)
 8001684:	f006 fa48 	bl	8007b18 <HAL_UART_Transmit>
//    // Data - Decimal
//    sprintf(buffer, "Data: %lu\r\n", packet->data);
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);

    // Data - Signed Integer
    if(packet->datatype == TEMPERATURE) {
 8001688:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800168c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d115      	bne.n	80016c4 <printData+0x164>
        // For non-vibration data, print as before
    	sprintf(buffer, "Temp: %.2f C\r\n", data);
 8001698:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800169c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80016a0:	4981      	ldr	r1, [pc, #516]	; (80018a8 <printData+0x348>)
 80016a2:	f00b fd5f 	bl	800d164 <siprintf>
    	sprintf(buffer2, "%.2f C", data);
 80016a6:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 80016aa:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80016ae:	497f      	ldr	r1, [pc, #508]	; (80018ac <printData+0x34c>)
 80016b0:	f00b fd58 	bl	800d164 <siprintf>
    	NextionSetText(&nextion, &temp_C, buffer2);
 80016b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016b8:	461a      	mov	r2, r3
 80016ba:	497d      	ldr	r1, [pc, #500]	; (80018b0 <printData+0x350>)
 80016bc:	487d      	ldr	r0, [pc, #500]	; (80018b4 <printData+0x354>)
 80016be:	f7ff fd39 	bl	8001134 <NextionSetText>
 80016c2:	e11c      	b.n	80018fe <printData+0x39e>
    }
    else if(packet->datatype == HUMIDITY){
 80016c4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80016c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d115      	bne.n	8001700 <printData+0x1a0>
    	sprintf(buffer, "Hum: %.2f %%\r\n", data);
 80016d4:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80016d8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80016dc:	4976      	ldr	r1, [pc, #472]	; (80018b8 <printData+0x358>)
 80016de:	f00b fd41 	bl	800d164 <siprintf>
    	sprintf(humBuf, "%.2f %%", data);
 80016e2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80016e6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80016ea:	4974      	ldr	r1, [pc, #464]	; (80018bc <printData+0x35c>)
 80016ec:	f00b fd3a 	bl	800d164 <siprintf>
    	NextionSetText(&nextion, &hum_RH, humBuf);
 80016f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4972      	ldr	r1, [pc, #456]	; (80018c0 <printData+0x360>)
 80016f8:	486e      	ldr	r0, [pc, #440]	; (80018b4 <printData+0x354>)
 80016fa:	f7ff fd1b 	bl	8001134 <NextionSetText>
 80016fe:	e0fe      	b.n	80018fe <printData+0x39e>
    }
    else if(packet->datatype == SOUND){
 8001700:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001704:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	785b      	ldrb	r3, [r3, #1]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d11f      	bne.n	8001750 <printData+0x1f0>
    	sprintf(buffer, "Sound: %lu dB\r\n", packet->data);
 8001710:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001714:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800171e:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001722:	4968      	ldr	r1, [pc, #416]	; (80018c4 <printData+0x364>)
 8001724:	f00b fd1e 	bl	800d164 <siprintf>
    	sprintf(buffer2, "%lu dB", packet->data);
 8001728:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800172c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001736:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 800173a:	4963      	ldr	r1, [pc, #396]	; (80018c8 <printData+0x368>)
 800173c:	f00b fd12 	bl	800d164 <siprintf>
    	NextionSetText(&nextion, &sound_dB, buffer2);
 8001740:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001744:	461a      	mov	r2, r3
 8001746:	4961      	ldr	r1, [pc, #388]	; (80018cc <printData+0x36c>)
 8001748:	485a      	ldr	r0, [pc, #360]	; (80018b4 <printData+0x354>)
 800174a:	f7ff fcf3 	bl	8001134 <NextionSetText>
 800174e:	e0d6      	b.n	80018fe <printData+0x39e>
    }
    else if (packet->datatype == VIBRATION) {
 8001750:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001754:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	785b      	ldrb	r3, [r3, #1]
 800175c:	2b03      	cmp	r3, #3
 800175e:	f040 80c7 	bne.w	80018f0 <printData+0x390>
        int16_t x, y, z;
        unpackData(packet->data, &x, &y, &z);
 8001762:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001766:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f107 0410 	add.w	r4, r7, #16
 8001778:	f107 0212 	add.w	r2, r7, #18
 800177c:	f107 030e 	add.w	r3, r7, #14
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4623      	mov	r3, r4
 8001784:	f000 f912 	bl	80019ac <unpackData>
        // Display the scaled values with two decimal places as floating points
        float x_float = x / 100.0f;
 8001788:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800178c:	f5a3 73bf 	sub.w	r3, r3, #382	; 0x17e
 8001790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800179c:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80018d0 <printData+0x370>
 80017a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a4:	edc7 7a61 	vstr	s15, [r7, #388]	; 0x184
        float y_float = y / 100.0f;
 80017a8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017bc:	eddf 6a44 	vldr	s13, [pc, #272]	; 80018d0 <printData+0x370>
 80017c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c4:	edc7 7a60 	vstr	s15, [r7, #384]	; 0x180
        float z_float = z / 100.0f;
 80017c8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017cc:	f5a3 73c1 	sub.w	r3, r3, #386	; 0x182
 80017d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017dc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80018d0 <printData+0x370>
 80017e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e4:	edc7 7a5f 	vstr	s15, [r7, #380]	; 0x17c
//        sprintf(buffer2, "Data: %lu\r\n", packet->data);
        sprintf(buffer, "X: %.2f G\tY: %.2f G\tZ: %.2f G\r\n", x_float, y_float, z_float);
 80017e8:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 80017ec:	f7fe feac 	bl	8000548 <__aeabi_f2d>
 80017f0:	4680      	mov	r8, r0
 80017f2:	4689      	mov	r9, r1
 80017f4:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80017f8:	f7fe fea6 	bl	8000548 <__aeabi_f2d>
 80017fc:	4604      	mov	r4, r0
 80017fe:	460d      	mov	r5, r1
 8001800:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8001804:	f7fe fea0 	bl	8000548 <__aeabi_f2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001810:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001814:	e9cd 4500 	strd	r4, r5, [sp]
 8001818:	4642      	mov	r2, r8
 800181a:	464b      	mov	r3, r9
 800181c:	492d      	ldr	r1, [pc, #180]	; (80018d4 <printData+0x374>)
 800181e:	f00b fca1 	bl	800d164 <siprintf>
    	sprintf(x_buf, "X: %.2f G", x_float);
 8001822:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8001826:	f7fe fe8f 	bl	8000548 <__aeabi_f2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001832:	4929      	ldr	r1, [pc, #164]	; (80018d8 <printData+0x378>)
 8001834:	f00b fc96 	bl	800d164 <siprintf>
    	sprintf(y_buf, "Y: %.2f G", y_float);
 8001838:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800183c:	f7fe fe84 	bl	8000548 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001848:	4924      	ldr	r1, [pc, #144]	; (80018dc <printData+0x37c>)
 800184a:	f00b fc8b 	bl	800d164 <siprintf>
    	sprintf(z_buf, "Z: %.2f G", z_float);
 800184e:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8001852:	f7fe fe79 	bl	8000548 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	f107 0014 	add.w	r0, r7, #20
 800185e:	4920      	ldr	r1, [pc, #128]	; (80018e0 <printData+0x380>)
 8001860:	f00b fc80 	bl	800d164 <siprintf>
    	NextionSetText(&nextion, &vib_X, x_buf);
 8001864:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001868:	461a      	mov	r2, r3
 800186a:	491e      	ldr	r1, [pc, #120]	; (80018e4 <printData+0x384>)
 800186c:	4811      	ldr	r0, [pc, #68]	; (80018b4 <printData+0x354>)
 800186e:	f7ff fc61 	bl	8001134 <NextionSetText>
    	NextionSetText(&nextion, &vib_Y, y_buf);
 8001872:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001876:	461a      	mov	r2, r3
 8001878:	491b      	ldr	r1, [pc, #108]	; (80018e8 <printData+0x388>)
 800187a:	480e      	ldr	r0, [pc, #56]	; (80018b4 <printData+0x354>)
 800187c:	f7ff fc5a 	bl	8001134 <NextionSetText>
    	NextionSetText(&nextion, &vib_Z, z_buf);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	461a      	mov	r2, r3
 8001886:	4919      	ldr	r1, [pc, #100]	; (80018ec <printData+0x38c>)
 8001888:	480a      	ldr	r0, [pc, #40]	; (80018b4 <printData+0x354>)
 800188a:	f7ff fc53 	bl	8001134 <NextionSetText>
 800188e:	e036      	b.n	80018fe <printData+0x39e>
 8001890:	40590000 	.word	0x40590000
 8001894:	0800f31c 	.word	0x0800f31c
 8001898:	200003b0 	.word	0x200003b0
 800189c:	0800f32c 	.word	0x0800f32c
 80018a0:	0800f33c 	.word	0x0800f33c
 80018a4:	0800f34c 	.word	0x0800f34c
 80018a8:	0800f360 	.word	0x0800f360
 80018ac:	0800f370 	.word	0x0800f370
 80018b0:	2000056c 	.word	0x2000056c
 80018b4:	2000043c 	.word	0x2000043c
 80018b8:	0800f378 	.word	0x0800f378
 80018bc:	0800f388 	.word	0x0800f388
 80018c0:	2000058c 	.word	0x2000058c
 80018c4:	0800f390 	.word	0x0800f390
 80018c8:	0800f3a0 	.word	0x0800f3a0
 80018cc:	200005cc 	.word	0x200005cc
 80018d0:	42c80000 	.word	0x42c80000
 80018d4:	0800f3a8 	.word	0x0800f3a8
 80018d8:	0800f3c8 	.word	0x0800f3c8
 80018dc:	0800f3d4 	.word	0x0800f3d4
 80018e0:	0800f3e0 	.word	0x0800f3e0
 80018e4:	2000059c 	.word	0x2000059c
 80018e8:	200005ac 	.word	0x200005ac
 80018ec:	200005bc 	.word	0x200005bc
    }
    else{
    	sprintf(buffer, "Bad Data Type", data);
 80018f0:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80018f4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80018f8:	4927      	ldr	r1, [pc, #156]	; (8001998 <printData+0x438>)
 80018fa:	f00b fc33 	bl	800d164 <siprintf>
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80018fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fcb4 	bl	8000270 <strlen>
 8001908:	4603      	mov	r3, r0
 800190a:	b29a      	uxth	r2, r3
 800190c:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001910:	2364      	movs	r3, #100	; 0x64
 8001912:	4822      	ldr	r0, [pc, #136]	; (800199c <printData+0x43c>)
 8001914:	f006 f900 	bl	8007b18 <HAL_UART_Transmit>

    // CRC - Hexadecimal
    sprintf(buffer, "CRC: 0x%02X\r\n", packet->crc);
 8001918:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800191c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	7c1b      	ldrb	r3, [r3, #16]
 8001924:	461a      	mov	r2, r3
 8001926:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800192a:	491d      	ldr	r1, [pc, #116]	; (80019a0 <printData+0x440>)
 800192c:	4618      	mov	r0, r3
 800192e:	f00b fc19 	bl	800d164 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8001932:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fc9a 	bl	8000270 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	b29a      	uxth	r2, r3
 8001940:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001944:	2364      	movs	r3, #100	; 0x64
 8001946:	4815      	ldr	r0, [pc, #84]	; (800199c <printData+0x43c>)
 8001948:	f006 f8e6 	bl	8007b18 <HAL_UART_Transmit>

    // End of Packet (EOP) - Hexadecimal
    sprintf(buffer, "EOP: 0x%02X\r\n", packet->eop);
 800194c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001950:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	7c5b      	ldrb	r3, [r3, #17]
 8001958:	461a      	mov	r2, r3
 800195a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800195e:	4911      	ldr	r1, [pc, #68]	; (80019a4 <printData+0x444>)
 8001960:	4618      	mov	r0, r3
 8001962:	f00b fbff 	bl	800d164 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8001966:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fc80 	bl	8000270 <strlen>
 8001970:	4603      	mov	r3, r0
 8001972:	b29a      	uxth	r2, r3
 8001974:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001978:	2364      	movs	r3, #100	; 0x64
 800197a:	4808      	ldr	r0, [pc, #32]	; (800199c <printData+0x43c>)
 800197c:	f006 f8cc 	bl	8007b18 <HAL_UART_Transmit>

    // Separator
    HAL_UART_Transmit(&huart3, (uint8_t*)"--------\r\n", 10, 100);
 8001980:	2364      	movs	r3, #100	; 0x64
 8001982:	220a      	movs	r2, #10
 8001984:	4908      	ldr	r1, [pc, #32]	; (80019a8 <printData+0x448>)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <printData+0x43c>)
 8001988:	f006 f8c6 	bl	8007b18 <HAL_UART_Transmit>
}
 800198c:	bf00      	nop
 800198e:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001992:	46bd      	mov	sp, r7
 8001994:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001998:	0800f3ec 	.word	0x0800f3ec
 800199c:	200003b0 	.word	0x200003b0
 80019a0:	0800f3fc 	.word	0x0800f3fc
 80019a4:	0800f40c 	.word	0x0800f40c
 80019a8:	0800f41c 	.word	0x0800f41c

080019ac <unpackData>:
    sprintf(buffer, "%lu\r\n", packet->data);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
}


void unpackData(uint64_t packedData, int16_t* x, int16_t* y, int16_t* z) {
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
    *x = (int16_t)((packedData >> 32) & 0xFFFF);
 80019ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	000a      	movs	r2, r1
 80019c8:	2300      	movs	r3, #0
 80019ca:	b212      	sxth	r2, r2
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((packedData >> 16) & 0xFFFF);
 80019d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	0c02      	lsrs	r2, r0, #16
 80019de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80019e2:	0c0b      	lsrs	r3, r1, #16
 80019e4:	b212      	sxth	r2, r2
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(packedData & 0xFFFF);
 80019ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	801a      	strh	r2, [r3, #0]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a06:	f000 fe77 	bl	80026f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0a:	f000 f895 	bl	8001b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a0e:	f000 fa01 	bl	8001e14 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a12:	f000 f9df 	bl	8001dd4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a16:	f000 f8f9 	bl	8001c0c <MX_I2C1_Init>
  MX_I2S3_Init();
 8001a1a:	f000 f925 	bl	8001c68 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001a1e:	f000 f953 	bl	8001cc8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001a22:	f00a fa7d 	bl	800bf20 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 8001a26:	f000 f9ab 	bl	8001d80 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001a2a:	f000 f97f 	bl	8001d2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NextionInit(&nextion, &huart2);
 8001a2e:	4930      	ldr	r1, [pc, #192]	; (8001af0 <main+0xf0>)
 8001a30:	4830      	ldr	r0, [pc, #192]	; (8001af4 <main+0xf4>)
 8001a32:	f7ff fa72 	bl	8000f1a <NextionInit>
  NextionAddComp(&nextion, &temp_C, "t4", 0, 6, NULL, NULL);
 8001a36:	2300      	movs	r3, #0
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	2306      	movs	r3, #6
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	4a2c      	ldr	r2, [pc, #176]	; (8001af8 <main+0xf8>)
 8001a46:	492d      	ldr	r1, [pc, #180]	; (8001afc <main+0xfc>)
 8001a48:	482a      	ldr	r0, [pc, #168]	; (8001af4 <main+0xf4>)
 8001a4a:	f7ff fa2b 	bl	8000ea4 <NextionAddComp>
  NextionAddComp(&nextion, &temp_F, "t5", 0, 7, NULL, NULL);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	2300      	movs	r3, #0
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	2307      	movs	r3, #7
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <main+0x100>)
 8001a5e:	4929      	ldr	r1, [pc, #164]	; (8001b04 <main+0x104>)
 8001a60:	4824      	ldr	r0, [pc, #144]	; (8001af4 <main+0xf4>)
 8001a62:	f7ff fa1f 	bl	8000ea4 <NextionAddComp>
  NextionAddComp(&nextion, &hum_RH, "t6", 0, 8, NULL, NULL);
 8001a66:	2300      	movs	r3, #0
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	2308      	movs	r3, #8
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2300      	movs	r3, #0
 8001a74:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <main+0x108>)
 8001a76:	4925      	ldr	r1, [pc, #148]	; (8001b0c <main+0x10c>)
 8001a78:	481e      	ldr	r0, [pc, #120]	; (8001af4 <main+0xf4>)
 8001a7a:	f7ff fa13 	bl	8000ea4 <NextionAddComp>
  NextionAddComp(&nextion, &vib_X, "t7", 0, 9, NULL, NULL);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9302      	str	r3, [sp, #8]
 8001a82:	2300      	movs	r3, #0
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	2309      	movs	r3, #9
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <main+0x110>)
 8001a8e:	4921      	ldr	r1, [pc, #132]	; (8001b14 <main+0x114>)
 8001a90:	4818      	ldr	r0, [pc, #96]	; (8001af4 <main+0xf4>)
 8001a92:	f7ff fa07 	bl	8000ea4 <NextionAddComp>
  NextionAddComp(&nextion, &vib_Y, "t8", 0, 10, NULL, NULL);
 8001a96:	2300      	movs	r3, #0
 8001a98:	9302      	str	r3, [sp, #8]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <main+0x118>)
 8001aa6:	491d      	ldr	r1, [pc, #116]	; (8001b1c <main+0x11c>)
 8001aa8:	4812      	ldr	r0, [pc, #72]	; (8001af4 <main+0xf4>)
 8001aaa:	f7ff f9fb 	bl	8000ea4 <NextionAddComp>
  NextionAddComp(&nextion, &vib_Z, "t9", 0, 11, NULL, NULL);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	230b      	movs	r3, #11
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2300      	movs	r3, #0
 8001abc:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <main+0x120>)
 8001abe:	4919      	ldr	r1, [pc, #100]	; (8001b24 <main+0x124>)
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <main+0xf4>)
 8001ac2:	f7ff f9ef 	bl	8000ea4 <NextionAddComp>
  NextionAddComp(&nextion, &sound_dB, "t10", 0, 12, NULL, NULL);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	2300      	movs	r3, #0
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	230c      	movs	r3, #12
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <main+0x128>)
 8001ad6:	4915      	ldr	r1, [pc, #84]	; (8001b2c <main+0x12c>)
 8001ad8:	4806      	ldr	r0, [pc, #24]	; (8001af4 <main+0xf4>)
 8001ada:	f7ff f9e3 	bl	8000ea4 <NextionAddComp>

  HAL_SPI_Receive_DMA(&hspi1, rx_data1, PACKET_SIZE);
 8001ade:	2218      	movs	r2, #24
 8001ae0:	4913      	ldr	r1, [pc, #76]	; (8001b30 <main+0x130>)
 8001ae2:	4814      	ldr	r0, [pc, #80]	; (8001b34 <main+0x134>)
 8001ae4:	f005 faca 	bl	800707c <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001ae8:	f00a fa40 	bl	800bf6c <MX_USB_HOST_Process>
 8001aec:	e7fc      	b.n	8001ae8 <main+0xe8>
 8001aee:	bf00      	nop
 8001af0:	20000368 	.word	0x20000368
 8001af4:	2000043c 	.word	0x2000043c
 8001af8:	0800f430 	.word	0x0800f430
 8001afc:	2000056c 	.word	0x2000056c
 8001b00:	0800f434 	.word	0x0800f434
 8001b04:	2000057c 	.word	0x2000057c
 8001b08:	0800f438 	.word	0x0800f438
 8001b0c:	2000058c 	.word	0x2000058c
 8001b10:	0800f43c 	.word	0x0800f43c
 8001b14:	2000059c 	.word	0x2000059c
 8001b18:	0800f440 	.word	0x0800f440
 8001b1c:	200005ac 	.word	0x200005ac
 8001b20:	0800f444 	.word	0x0800f444
 8001b24:	200005bc 	.word	0x200005bc
 8001b28:	0800f448 	.word	0x0800f448
 8001b2c:	200005cc 	.word	0x200005cc
 8001b30:	200003f8 	.word	0x200003f8
 8001b34:	200002b0 	.word	0x200002b0

08001b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b094      	sub	sp, #80	; 0x50
 8001b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3e:	f107 0320 	add.w	r3, r7, #32
 8001b42:	2230      	movs	r2, #48	; 0x30
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f00b fb6f 	bl	800d22a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <SystemClock_Config+0xd0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <SystemClock_Config+0xd0>)
 8001b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <SystemClock_Config+0xd0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bba:	f107 0320 	add.w	r3, r7, #32
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 fbf8 	bl	80063b4 <HAL_RCC_OscConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bca:	f000 fa21 	bl	8002010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bce:	230f      	movs	r3, #15
 8001bd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	2105      	movs	r1, #5
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 fe59 	bl	80068a4 <HAL_RCC_ClockConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001bf8:	f000 fa0a 	bl	8002010 <Error_Handler>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3750      	adds	r7, #80	; 0x50
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000

08001c0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <MX_I2C1_Init+0x54>)
 8001c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c18:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_I2C1_Init+0x58>)
 8001c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c4a:	f003 fdcf 	bl	80057ec <HAL_I2C_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c54:	f000 f9dc 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000214 	.word	0x20000214
 8001c60:	40005400 	.word	0x40005400
 8001c64:	000186a0 	.word	0x000186a0

08001c68 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c6e:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <MX_I2S3_Init+0x58>)
 8001c70:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c90:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <MX_I2S3_Init+0x5c>)
 8001c92:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001ca8:	f003 fee4 	bl	8005a74 <HAL_I2S_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001cb2:	f000 f9ad 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000268 	.word	0x20000268
 8001cc0:	40003c00 	.word	0x40003c00
 8001cc4:	00017700 	.word	0x00017700

08001cc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001cce:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <MX_SPI1_Init+0x60>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001d0c:	220a      	movs	r2, #10
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <MX_SPI1_Init+0x5c>)
 8001d12:	f005 f929 	bl	8006f68 <HAL_SPI_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8001d1c:	f000 f978 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200002b0 	.word	0x200002b0
 8001d28:	40013000 	.word	0x40013000

08001d2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_USART2_UART_Init+0x4c>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <MX_USART2_UART_Init+0x50>)
 8001d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <MX_USART2_UART_Init+0x4c>)
 8001d38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <MX_USART2_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <MX_USART2_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <MX_USART2_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <MX_USART2_UART_Init+0x4c>)
 8001d52:	220c      	movs	r2, #12
 8001d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <MX_USART2_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <MX_USART2_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_USART2_UART_Init+0x4c>)
 8001d64:	f005 fe88 	bl	8007a78 <HAL_UART_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d6e:	f000 f94f 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000368 	.word	0x20000368
 8001d7c:	40004400 	.word	0x40004400

08001d80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_USART3_UART_Init+0x4c>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <MX_USART3_UART_Init+0x50>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <MX_USART3_UART_Init+0x4c>)
 8001d8c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001d90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_USART3_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_USART3_UART_Init+0x4c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MX_USART3_UART_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_USART3_UART_Init+0x4c>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <MX_USART3_UART_Init+0x4c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_USART3_UART_Init+0x4c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_USART3_UART_Init+0x4c>)
 8001db8:	f005 fe5e 	bl	8007a78 <HAL_UART_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dc2:	f000 f925 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003b0 	.word	0x200003b0
 8001dd0:	40004800 	.word	0x40004800

08001dd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_DMA_Init+0x3c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <MX_DMA_Init+0x3c>)
 8001de4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_DMA_Init+0x3c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2038      	movs	r0, #56	; 0x38
 8001dfc:	f000 fded 	bl	80029da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e00:	2038      	movs	r0, #56	; 0x38
 8001e02:	f000 fe06 	bl	8002a12 <HAL_NVIC_EnableIRQ>

}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	4b72      	ldr	r3, [pc, #456]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a71      	ldr	r2, [pc, #452]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e34:	f043 0310 	orr.w	r3, r3, #16
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a6a      	ldr	r2, [pc, #424]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a63      	ldr	r2, [pc, #396]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a5c      	ldr	r2, [pc, #368]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b5a      	ldr	r3, [pc, #360]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a55      	ldr	r2, [pc, #340]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b4f      	ldr	r3, [pc, #316]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a4e      	ldr	r2, [pc, #312]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2108      	movs	r1, #8
 8001ed6:	4849      	ldr	r0, [pc, #292]	; (8001ffc <MX_GPIO_Init+0x1e8>)
 8001ed8:	f001 fb54 	bl	8003584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4847      	ldr	r0, [pc, #284]	; (8002000 <MX_GPIO_Init+0x1ec>)
 8001ee2:	f001 fb4f 	bl	8003584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001eec:	4845      	ldr	r0, [pc, #276]	; (8002004 <MX_GPIO_Init+0x1f0>)
 8001eee:	f001 fb49 	bl	8003584 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	483c      	ldr	r0, [pc, #240]	; (8001ffc <MX_GPIO_Init+0x1e8>)
 8001f0a:	f001 f99f 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	4836      	ldr	r0, [pc, #216]	; (8002000 <MX_GPIO_Init+0x1ec>)
 8001f26:	f001 f991 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	482e      	ldr	r0, [pc, #184]	; (8002000 <MX_GPIO_Init+0x1ec>)
 8001f46:	f001 f981 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f4e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	482a      	ldr	r0, [pc, #168]	; (8002008 <MX_GPIO_Init+0x1f4>)
 8001f60:	f001 f974 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001f64:	2304      	movs	r3, #4
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	4825      	ldr	r0, [pc, #148]	; (800200c <MX_GPIO_Init+0x1f8>)
 8001f78:	f001 f968 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f8e:	2305      	movs	r3, #5
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	4619      	mov	r1, r3
 8001f98:	481c      	ldr	r0, [pc, #112]	; (800200c <MX_GPIO_Init+0x1f8>)
 8001f9a:	f001 f957 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f9e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001fa2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4813      	ldr	r0, [pc, #76]	; (8002004 <MX_GPIO_Init+0x1f0>)
 8001fb8:	f001 f948 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480d      	ldr	r0, [pc, #52]	; (8002004 <MX_GPIO_Init+0x1f0>)
 8001fd0:	f001 f93c 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fd8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <MX_GPIO_Init+0x1e8>)
 8001fea:	f001 f92f 	bl	800324c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fee:	bf00      	nop
 8001ff0:	3730      	adds	r7, #48	; 0x30
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40020800 	.word	0x40020800
 8002004:	40020c00 	.word	0x40020c00
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400

08002010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002014:	b672      	cpsid	i
}
 8002016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002018:	e7fe      	b.n	8002018 <Error_Handler+0x8>
	...

0800201c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_MspInit+0x4c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_MspInit+0x4c>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_MspInit+0x4c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_MspInit+0x4c>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_MspInit+0x4c>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_MspInit+0x4c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800205a:	2007      	movs	r0, #7
 800205c:	f000 fcb2 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800

0800206c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <HAL_I2C_MspInit+0x84>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12c      	bne.n	80020e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_I2C_MspInit+0x88>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_I2C_MspInit+0x88>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_I2C_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80020aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b0:	2312      	movs	r3, #18
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020bc:	2304      	movs	r3, #4
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	480c      	ldr	r0, [pc, #48]	; (80020f8 <HAL_I2C_MspInit+0x8c>)
 80020c8:	f001 f8c0 	bl	800324c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_I2C_MspInit+0x88>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_I2C_MspInit+0x88>)
 80020d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020da:	6413      	str	r3, [r2, #64]	; 0x40
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_I2C_MspInit+0x88>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020e8:	bf00      	nop
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40005400 	.word	0x40005400
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020400 	.word	0x40020400

080020fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08e      	sub	sp, #56	; 0x38
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a31      	ldr	r2, [pc, #196]	; (80021ec <HAL_I2S_MspInit+0xf0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d15a      	bne.n	80021e2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800212c:	2301      	movs	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002130:	23c0      	movs	r3, #192	; 0xc0
 8002132:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002134:	2302      	movs	r3, #2
 8002136:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4618      	mov	r0, r3
 800213e:	f004 fdd1 	bl	8006ce4 <HAL_RCCEx_PeriphCLKConfig>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002148:	f7ff ff62 	bl	8002010 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_I2S_MspInit+0xf4>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <HAL_I2S_MspInit+0xf4>)
 8002156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_I2S_MspInit+0xf4>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_I2S_MspInit+0xf4>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_I2S_MspInit+0xf4>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_I2S_MspInit+0xf4>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_I2S_MspInit+0xf4>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_I2S_MspInit+0xf4>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_I2S_MspInit+0xf4>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80021a0:	2310      	movs	r3, #16
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021b0:	2306      	movs	r3, #6
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	4619      	mov	r1, r3
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <HAL_I2S_MspInit+0xf8>)
 80021bc:	f001 f846 	bl	800324c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80021c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021d2:	2306      	movs	r3, #6
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4619      	mov	r1, r3
 80021dc:	4806      	ldr	r0, [pc, #24]	; (80021f8 <HAL_I2S_MspInit+0xfc>)
 80021de:	f001 f835 	bl	800324c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3738      	adds	r7, #56	; 0x38
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40003c00 	.word	0x40003c00
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020800 	.word	0x40020800

080021fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a34      	ldr	r2, [pc, #208]	; (80022ec <HAL_SPI_MspInit+0xf0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d161      	bne.n	80022e2 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_SPI_MspInit+0xf4>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_SPI_MspInit+0xf4>)
 8002228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_SPI_MspInit+0xf4>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_SPI_MspInit+0xf4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <HAL_SPI_MspInit+0xf4>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_SPI_MspInit+0xf4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002256:	23e0      	movs	r3, #224	; 0xe0
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002266:	2305      	movs	r3, #5
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	4820      	ldr	r0, [pc, #128]	; (80022f4 <HAL_SPI_MspInit+0xf8>)
 8002272:	f000 ffeb 	bl	800324c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 8002278:	4a20      	ldr	r2, [pc, #128]	; (80022fc <HAL_SPI_MspInit+0x100>)
 800227a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 800227e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002282:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 800228c:	2200      	movs	r2, #0
 800228e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 8002292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002296:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80022b6:	4810      	ldr	r0, [pc, #64]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 80022b8:	f000 fbc6 	bl	8002a48 <HAL_DMA_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80022c2:	f7ff fea5 	bl	8002010 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 80022ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_SPI_MspInit+0xfc>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	2023      	movs	r0, #35	; 0x23
 80022d8:	f000 fb7f 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80022dc:	2023      	movs	r0, #35	; 0x23
 80022de:	f000 fb98 	bl	8002a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	; 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40013000 	.word	0x40013000
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020000 	.word	0x40020000
 80022f8:	20000308 	.word	0x20000308
 80022fc:	40026410 	.word	0x40026410

08002300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a46      	ldr	r2, [pc, #280]	; (8002438 <HAL_UART_MspInit+0x138>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d12c      	bne.n	800237c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	4b45      	ldr	r3, [pc, #276]	; (800243c <HAL_UART_MspInit+0x13c>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a44      	ldr	r2, [pc, #272]	; (800243c <HAL_UART_MspInit+0x13c>)
 800232c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b42      	ldr	r3, [pc, #264]	; (800243c <HAL_UART_MspInit+0x13c>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_UART_MspInit+0x13c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a3d      	ldr	r2, [pc, #244]	; (800243c <HAL_UART_MspInit+0x13c>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_UART_MspInit+0x13c>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800235a:	230c      	movs	r3, #12
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800236a:	2307      	movs	r3, #7
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4619      	mov	r1, r3
 8002374:	4832      	ldr	r0, [pc, #200]	; (8002440 <HAL_UART_MspInit+0x140>)
 8002376:	f000 ff69 	bl	800324c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800237a:	e058      	b.n	800242e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a30      	ldr	r2, [pc, #192]	; (8002444 <HAL_UART_MspInit+0x144>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d153      	bne.n	800242e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	4b2c      	ldr	r3, [pc, #176]	; (800243c <HAL_UART_MspInit+0x13c>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a2b      	ldr	r2, [pc, #172]	; (800243c <HAL_UART_MspInit+0x13c>)
 8002390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <HAL_UART_MspInit+0x13c>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b25      	ldr	r3, [pc, #148]	; (800243c <HAL_UART_MspInit+0x13c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a24      	ldr	r2, [pc, #144]	; (800243c <HAL_UART_MspInit+0x13c>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <HAL_UART_MspInit+0x13c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_UART_MspInit+0x13c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_UART_MspInit+0x13c>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_UART_MspInit+0x13c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023ec:	2307      	movs	r3, #7
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	4814      	ldr	r0, [pc, #80]	; (8002448 <HAL_UART_MspInit+0x148>)
 80023f8:	f000 ff28 	bl	800324c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800240e:	2307      	movs	r3, #7
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <HAL_UART_MspInit+0x14c>)
 800241a:	f000 ff17 	bl	800324c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	2027      	movs	r0, #39	; 0x27
 8002424:	f000 fad9 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002428:	2027      	movs	r0, #39	; 0x27
 800242a:	f000 faf2 	bl	8002a12 <HAL_NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3730      	adds	r7, #48	; 0x30
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40004400 	.word	0x40004400
 800243c:	40023800 	.word	0x40023800
 8002440:	40020000 	.word	0x40020000
 8002444:	40004800 	.word	0x40004800
 8002448:	40020400 	.word	0x40020400
 800244c:	40020c00 	.word	0x40020c00

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002454:	e7fe      	b.n	8002454 <NMI_Handler+0x4>

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler+0x4>

08002462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <UsageFault_Handler+0x4>

0800246e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249c:	f000 f97e 	bl	800279c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <SPI1_IRQHandler+0x10>)
 80024aa:	f004 ffa5 	bl	80073f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200002b0 	.word	0x200002b0

080024b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <USART3_IRQHandler+0x10>)
 80024be:	f005 fbdb 	bl	8007c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200003b0 	.word	0x200003b0

080024cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <DMA2_Stream0_IRQHandler+0x10>)
 80024d2:	f000 fc51 	bl	8002d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000308 	.word	0x20000308

080024e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <OTG_FS_IRQHandler+0x10>)
 80024e6:	f001 fb47 	bl	8003b78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200009c0 	.word	0x200009c0

080024f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return 1;
 80024f8:	2301      	movs	r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_kill>:

int _kill(int pid, int sig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800250e:	f00a feef 	bl	800d2f0 <__errno>
 8002512:	4603      	mov	r3, r0
 8002514:	2216      	movs	r2, #22
 8002516:	601a      	str	r2, [r3, #0]
  return -1;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_exit>:

void _exit (int status)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffe7 	bl	8002504 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002536:	e7fe      	b.n	8002536 <_exit+0x12>

08002538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e00a      	b.n	8002560 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800254a:	f3af 8000 	nop.w
 800254e:	4601      	mov	r1, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	60ba      	str	r2, [r7, #8]
 8002556:	b2ca      	uxtb	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	dbf0      	blt.n	800254a <_read+0x12>
  }

  return len;
 8002568:	687b      	ldr	r3, [r7, #4]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e009      	b.n	8002598 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	60ba      	str	r2, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	429a      	cmp	r2, r3
 800259e:	dbf1      	blt.n	8002584 <_write+0x12>
  }
  return len;
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_close>:

int _close(int file)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025d2:	605a      	str	r2, [r3, #4]
  return 0;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <_isatty>:

int _isatty(int file)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <_sbrk+0x5c>)
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <_sbrk+0x60>)
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <_sbrk+0x64>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <_sbrk+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002644:	f00a fe54 	bl	800d2f0 <__errno>
 8002648:	4603      	mov	r3, r0
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e009      	b.n	8002668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <_sbrk+0x64>)
 8002664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20020000 	.word	0x20020000
 8002674:	00000400 	.word	0x00000400
 8002678:	200005dc 	.word	0x200005dc
 800267c:	20000ef0 	.word	0x20000ef0

08002680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <SystemInit+0x20>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <SystemInit+0x20>)
 800268c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026a8:	f7ff ffea 	bl	8002680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026ac:	480c      	ldr	r0, [pc, #48]	; (80026e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ae:	490d      	ldr	r1, [pc, #52]	; (80026e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b4:	e002      	b.n	80026bc <LoopCopyDataInit>

080026b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ba:	3304      	adds	r3, #4

080026bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c0:	d3f9      	bcc.n	80026b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c4:	4c0a      	ldr	r4, [pc, #40]	; (80026f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c8:	e001      	b.n	80026ce <LoopFillZerobss>

080026ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026cc:	3204      	adds	r2, #4

080026ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d0:	d3fb      	bcc.n	80026ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026d2:	f00a fe13 	bl	800d2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7ff f993 	bl	8001a00 <main>
  bx  lr    
 80026da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80026e8:	0800f7f4 	.word	0x0800f7f4
  ldr r2, =_sbss
 80026ec:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80026f0:	20000eec 	.word	0x20000eec

080026f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC_IRQHandler>
	...

080026f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <HAL_Init+0x40>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <HAL_Init+0x40>)
 8002702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_Init+0x40>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <HAL_Init+0x40>)
 800270e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_Init+0x40>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a07      	ldr	r2, [pc, #28]	; (8002738 <HAL_Init+0x40>)
 800271a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002720:	2003      	movs	r0, #3
 8002722:	f000 f94f 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002726:	2000      	movs	r0, #0
 8002728:	f000 f808 	bl	800273c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800272c:	f7ff fc76 	bl	800201c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023c00 	.word	0x40023c00

0800273c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_InitTick+0x54>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_InitTick+0x58>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002752:	fbb3 f3f1 	udiv	r3, r3, r1
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f967 	bl	8002a2e <HAL_SYSTICK_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e00e      	b.n	8002788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b0f      	cmp	r3, #15
 800276e:	d80a      	bhi.n	8002786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002770:	2200      	movs	r2, #0
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f000 f92f 	bl	80029da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800277c:	4a06      	ldr	r2, [pc, #24]	; (8002798 <HAL_InitTick+0x5c>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000000 	.word	0x20000000
 8002794:	20000008 	.word	0x20000008
 8002798:	20000004 	.word	0x20000004

0800279c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_IncTick+0x20>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_IncTick+0x24>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_IncTick+0x24>)
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000008 	.word	0x20000008
 80027c0:	200005e0 	.word	0x200005e0

080027c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_GetTick+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	200005e0 	.word	0x200005e0

080027dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff ffee 	bl	80027c4 <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d005      	beq.n	8002802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_Delay+0x44>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002802:	bf00      	nop
 8002804:	f7ff ffde 	bl	80027c4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	429a      	cmp	r2, r3
 8002812:	d8f7      	bhi.n	8002804 <HAL_Delay+0x28>
  {
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000008 	.word	0x20000008

08002824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800284c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	60d3      	str	r3, [r2, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <__NVIC_GetPriorityGrouping+0x18>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f003 0307 	and.w	r3, r3, #7
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	2b00      	cmp	r3, #0
 8002898:	db0b      	blt.n	80028b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	f003 021f 	and.w	r2, r3, #31
 80028a0:	4907      	ldr	r1, [pc, #28]	; (80028c0 <__NVIC_EnableIRQ+0x38>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2001      	movs	r0, #1
 80028aa:	fa00 f202 	lsl.w	r2, r0, r2
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	; (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	4313      	orrs	r3, r2
         );
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002990:	d301      	bcc.n	8002996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002992:	2301      	movs	r3, #1
 8002994:	e00f      	b.n	80029b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <SysTick_Config+0x40>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299e:	210f      	movs	r1, #15
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f7ff ff8e 	bl	80028c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <SysTick_Config+0x40>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <SysTick_Config+0x40>)
 80029b0:	2207      	movs	r2, #7
 80029b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	e000e010 	.word	0xe000e010

080029c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff29 	bl	8002824 <__NVIC_SetPriorityGrouping>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ec:	f7ff ff3e 	bl	800286c <__NVIC_GetPriorityGrouping>
 80029f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7ff ff8e 	bl	8002918 <NVIC_EncodePriority>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff5d 	bl	80028c4 <__NVIC_SetPriority>
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff31 	bl	8002888 <__NVIC_EnableIRQ>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ffa2 	bl	8002980 <SysTick_Config>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a54:	f7ff feb6 	bl	80027c4 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e099      	b.n	8002b98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a84:	e00f      	b.n	8002aa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a86:	f7ff fe9d 	bl	80027c4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	d908      	bls.n	8002aa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e078      	b.n	8002b98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e8      	bne.n	8002a86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <HAL_DMA_Init+0x158>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d107      	bne.n	8002b10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f023 0307 	bic.w	r3, r3, #7
 8002b26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d117      	bne.n	8002b6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fb01 	bl	8003154 <DMA_CheckFifoParam>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2240      	movs	r2, #64	; 0x40
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b66:	2301      	movs	r3, #1
 8002b68:	e016      	b.n	8002b98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fab8 	bl	80030e8 <DMA_CalcBaseAndBitshift>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	223f      	movs	r2, #63	; 0x3f
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	f010803f 	.word	0xf010803f

08002ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_DMA_Start_IT+0x26>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e040      	b.n	8002c4c <HAL_DMA_Start_IT+0xa8>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d12f      	bne.n	8002c3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fa4a 	bl	800308c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfc:	223f      	movs	r2, #63	; 0x3f
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0216 	orr.w	r2, r2, #22
 8002c12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0208 	orr.w	r2, r2, #8
 8002c2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e005      	b.n	8002c4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c46:	2302      	movs	r3, #2
 8002c48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c62:	f7ff fdaf 	bl	80027c4 <HAL_GetTick>
 8002c66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d008      	beq.n	8002c86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e052      	b.n	8002d2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0216 	bic.w	r2, r2, #22
 8002c94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ca4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d103      	bne.n	8002cb6 <HAL_DMA_Abort+0x62>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0208 	bic.w	r2, r2, #8
 8002cc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd6:	e013      	b.n	8002d00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd8:	f7ff fd74 	bl	80027c4 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d90c      	bls.n	8002d00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e015      	b.n	8002d2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e4      	bne.n	8002cd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	223f      	movs	r2, #63	; 0x3f
 8002d14:	409a      	lsls	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d004      	beq.n	8002d52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00c      	b.n	8002d6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2205      	movs	r2, #5
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d84:	4b8e      	ldr	r3, [pc, #568]	; (8002fc0 <HAL_DMA_IRQHandler+0x248>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a8e      	ldr	r2, [pc, #568]	; (8002fc4 <HAL_DMA_IRQHandler+0x24c>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0a9b      	lsrs	r3, r3, #10
 8002d90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	2208      	movs	r2, #8
 8002da4:	409a      	lsls	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01a      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0204 	bic.w	r2, r2, #4
 8002dca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	2201      	movs	r2, #1
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d012      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	2201      	movs	r2, #1
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e12:	f043 0202 	orr.w	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2204      	movs	r2, #4
 8002e20:	409a      	lsls	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d012      	beq.n	8002e50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	2210      	movs	r2, #16
 8002e56:	409a      	lsls	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d043      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d03c      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	2210      	movs	r2, #16
 8002e74:	409a      	lsls	r2, r3
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d018      	beq.n	8002eba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d024      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
 8002ea6:	e01f      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01b      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
 8002eb8:	e016      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d107      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0208 	bic.w	r2, r2, #8
 8002ed6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eec:	2220      	movs	r2, #32
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 808f 	beq.w	8003018 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8087 	beq.w	8003018 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	2220      	movs	r2, #32
 8002f10:	409a      	lsls	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d136      	bne.n	8002f90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0216 	bic.w	r2, r2, #22
 8002f30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d103      	bne.n	8002f52 <HAL_DMA_IRQHandler+0x1da>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0208 	bic.w	r2, r2, #8
 8002f60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	223f      	movs	r2, #63	; 0x3f
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d07e      	beq.n	8003084 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
        }
        return;
 8002f8e:	e079      	b.n	8003084 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01d      	beq.n	8002fda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10d      	bne.n	8002fc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d031      	beq.n	8003018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	4798      	blx	r3
 8002fbc:	e02c      	b.n	8003018 <HAL_DMA_IRQHandler+0x2a0>
 8002fbe:	bf00      	nop
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d023      	beq.n	8003018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
 8002fd8:	e01e      	b.n	8003018 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10f      	bne.n	8003008 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0210 	bic.w	r2, r2, #16
 8002ff6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	2b00      	cmp	r3, #0
 800301e:	d032      	beq.n	8003086 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d022      	beq.n	8003072 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2205      	movs	r2, #5
 8003030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3301      	adds	r3, #1
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	429a      	cmp	r2, r3
 800304e:	d307      	bcc.n	8003060 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f2      	bne.n	8003044 <HAL_DMA_IRQHandler+0x2cc>
 800305e:	e000      	b.n	8003062 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003060:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4798      	blx	r3
 8003082:	e000      	b.n	8003086 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003084:	bf00      	nop
    }
  }
}
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d108      	bne.n	80030cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030ca:	e007      	b.n	80030dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	3b10      	subs	r3, #16
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <DMA_CalcBaseAndBitshift+0x64>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <DMA_CalcBaseAndBitshift+0x68>)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d909      	bls.n	800312a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	1d1a      	adds	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	659a      	str	r2, [r3, #88]	; 0x58
 8003128:	e007      	b.n	800313a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	aaaaaaab 	.word	0xaaaaaaab
 8003150:	0800f468 	.word	0x0800f468

08003154 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d11f      	bne.n	80031ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d856      	bhi.n	8003222 <DMA_CheckFifoParam+0xce>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <DMA_CheckFifoParam+0x28>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	0800318d 	.word	0x0800318d
 8003180:	0800319f 	.word	0x0800319f
 8003184:	0800318d 	.word	0x0800318d
 8003188:	08003223 	.word	0x08003223
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d046      	beq.n	8003226 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319c:	e043      	b.n	8003226 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031a6:	d140      	bne.n	800322a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ac:	e03d      	b.n	800322a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b6:	d121      	bne.n	80031fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d837      	bhi.n	800322e <DMA_CheckFifoParam+0xda>
 80031be:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <DMA_CheckFifoParam+0x70>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031db 	.word	0x080031db
 80031cc:	080031d5 	.word	0x080031d5
 80031d0:	080031ed 	.word	0x080031ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
      break;
 80031d8:	e030      	b.n	800323c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d025      	beq.n	8003232 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ea:	e022      	b.n	8003232 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031f4:	d11f      	bne.n	8003236 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031fa:	e01c      	b.n	8003236 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d903      	bls.n	800320a <DMA_CheckFifoParam+0xb6>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d003      	beq.n	8003210 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003208:	e018      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
      break;
 800320e:	e015      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e00b      	b.n	800323a <DMA_CheckFifoParam+0xe6>
      break;
 8003222:	bf00      	nop
 8003224:	e00a      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;
 8003226:	bf00      	nop
 8003228:	e008      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
 800322c:	e006      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;
 800322e:	bf00      	nop
 8003230:	e004      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;   
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;
 800323a:	bf00      	nop
    }
  } 
  
  return status; 
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop

0800324c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	; 0x24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	e16b      	b.n	8003540 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003268:	2201      	movs	r2, #1
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	429a      	cmp	r2, r3
 8003282:	f040 815a 	bne.w	800353a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d005      	beq.n	800329e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329a:	2b02      	cmp	r3, #2
 800329c:	d130      	bne.n	8003300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d4:	2201      	movs	r2, #1
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 0201 	and.w	r2, r3, #1
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b03      	cmp	r3, #3
 800330a:	d017      	beq.n	800333c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	2203      	movs	r2, #3
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d123      	bne.n	8003390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	08da      	lsrs	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3208      	adds	r2, #8
 8003350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	220f      	movs	r2, #15
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	08da      	lsrs	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3208      	adds	r2, #8
 800338a:	69b9      	ldr	r1, [r7, #24]
 800338c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0203 	and.w	r2, r3, #3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80b4 	beq.w	800353a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	4b60      	ldr	r3, [pc, #384]	; (8003558 <HAL_GPIO_Init+0x30c>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	4a5f      	ldr	r2, [pc, #380]	; (8003558 <HAL_GPIO_Init+0x30c>)
 80033dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e0:	6453      	str	r3, [r2, #68]	; 0x44
 80033e2:	4b5d      	ldr	r3, [pc, #372]	; (8003558 <HAL_GPIO_Init+0x30c>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ee:	4a5b      	ldr	r2, [pc, #364]	; (800355c <HAL_GPIO_Init+0x310>)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	3302      	adds	r3, #2
 80033f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	220f      	movs	r2, #15
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_GPIO_Init+0x314>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02b      	beq.n	8003472 <HAL_GPIO_Init+0x226>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a51      	ldr	r2, [pc, #324]	; (8003564 <HAL_GPIO_Init+0x318>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d025      	beq.n	800346e <HAL_GPIO_Init+0x222>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a50      	ldr	r2, [pc, #320]	; (8003568 <HAL_GPIO_Init+0x31c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <HAL_GPIO_Init+0x21e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a4f      	ldr	r2, [pc, #316]	; (800356c <HAL_GPIO_Init+0x320>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d019      	beq.n	8003466 <HAL_GPIO_Init+0x21a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4e      	ldr	r2, [pc, #312]	; (8003570 <HAL_GPIO_Init+0x324>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_GPIO_Init+0x216>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4d      	ldr	r2, [pc, #308]	; (8003574 <HAL_GPIO_Init+0x328>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00d      	beq.n	800345e <HAL_GPIO_Init+0x212>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4c      	ldr	r2, [pc, #304]	; (8003578 <HAL_GPIO_Init+0x32c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <HAL_GPIO_Init+0x20e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4b      	ldr	r2, [pc, #300]	; (800357c <HAL_GPIO_Init+0x330>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_GPIO_Init+0x20a>
 8003452:	2307      	movs	r3, #7
 8003454:	e00e      	b.n	8003474 <HAL_GPIO_Init+0x228>
 8003456:	2308      	movs	r3, #8
 8003458:	e00c      	b.n	8003474 <HAL_GPIO_Init+0x228>
 800345a:	2306      	movs	r3, #6
 800345c:	e00a      	b.n	8003474 <HAL_GPIO_Init+0x228>
 800345e:	2305      	movs	r3, #5
 8003460:	e008      	b.n	8003474 <HAL_GPIO_Init+0x228>
 8003462:	2304      	movs	r3, #4
 8003464:	e006      	b.n	8003474 <HAL_GPIO_Init+0x228>
 8003466:	2303      	movs	r3, #3
 8003468:	e004      	b.n	8003474 <HAL_GPIO_Init+0x228>
 800346a:	2302      	movs	r3, #2
 800346c:	e002      	b.n	8003474 <HAL_GPIO_Init+0x228>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_GPIO_Init+0x228>
 8003472:	2300      	movs	r3, #0
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f002 0203 	and.w	r2, r2, #3
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	4093      	lsls	r3, r2
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003484:	4935      	ldr	r1, [pc, #212]	; (800355c <HAL_GPIO_Init+0x310>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003492:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <HAL_GPIO_Init+0x334>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b6:	4a32      	ldr	r2, [pc, #200]	; (8003580 <HAL_GPIO_Init+0x334>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034bc:	4b30      	ldr	r3, [pc, #192]	; (8003580 <HAL_GPIO_Init+0x334>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e0:	4a27      	ldr	r2, [pc, #156]	; (8003580 <HAL_GPIO_Init+0x334>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <HAL_GPIO_Init+0x334>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800350a:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <HAL_GPIO_Init+0x334>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_GPIO_Init+0x334>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003534:	4a12      	ldr	r2, [pc, #72]	; (8003580 <HAL_GPIO_Init+0x334>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3301      	adds	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	f67f ae90 	bls.w	8003268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40013800 	.word	0x40013800
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40020800 	.word	0x40020800
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40021000 	.word	0x40021000
 8003574:	40021400 	.word	0x40021400
 8003578:	40021800 	.word	0x40021800
 800357c:	40021c00 	.word	0x40021c00
 8003580:	40013c00 	.word	0x40013c00

08003584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	807b      	strh	r3, [r7, #2]
 8003590:	4613      	mov	r3, r2
 8003592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003594:	787b      	ldrb	r3, [r7, #1]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035a0:	e003      	b.n	80035aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035a2:	887b      	ldrh	r3, [r7, #2]
 80035a4:	041a      	lsls	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	619a      	str	r2, [r3, #24]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af02      	add	r7, sp, #8
 80035bc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e059      	b.n	800367c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f008 fcfa 	bl	800bfdc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2203      	movs	r2, #3
 80035ec:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f6:	d102      	bne.n	80035fe <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f005 fb03 	bl	8008c0e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7c1a      	ldrb	r2, [r3, #16]
 8003610:	f88d 2000 	strb.w	r2, [sp]
 8003614:	3304      	adds	r3, #4
 8003616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003618:	f005 fa84 	bl	8008b24 <USB_CoreInit>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2202      	movs	r2, #2
 8003626:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e026      	b.n	800367c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f005 fafb 	bl	8008c30 <USB_SetCurrentMode>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e017      	b.n	800367c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7c1a      	ldrb	r2, [r3, #16]
 8003654:	f88d 2000 	strb.w	r2, [sp]
 8003658:	3304      	adds	r3, #4
 800365a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800365c:	f005 fc9e 	bl	8008f9c <USB_HostInit>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e004      	b.n	800367c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b08b      	sub	sp, #44	; 0x2c
 8003688:	af04      	add	r7, sp, #16
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	461a      	mov	r2, r3
 8003692:	4603      	mov	r3, r0
 8003694:	70fb      	strb	r3, [r7, #3]
 8003696:	460b      	mov	r3, r1
 8003698:	70bb      	strb	r3, [r7, #2]
 800369a:	4613      	mov	r3, r2
 800369c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800369e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80036a0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_HCD_HC_Init+0x2c>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e09d      	b.n	80037ec <HAL_HCD_HC_Init+0x168>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3319      	adds	r3, #25
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3314      	adds	r3, #20
 80036dc:	787a      	ldrb	r2, [r7, #1]
 80036de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	3315      	adds	r3, #21
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	3326      	adds	r3, #38	; 0x26
 8003704:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003708:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	78bb      	ldrb	r3, [r7, #2]
 800370e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003712:	b2d8      	uxtb	r0, r3
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3316      	adds	r3, #22
 8003722:	4602      	mov	r2, r0
 8003724:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fbc8 	bl	8003ec0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003730:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003734:	2b00      	cmp	r3, #0
 8003736:	da0a      	bge.n	800374e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3317      	adds	r3, #23
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	e009      	b.n	8003762 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3317      	adds	r3, #23
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f005 fd7c 	bl	8009264 <USB_GetHostSpeed>
 800376c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800376e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d10b      	bne.n	800378e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003776:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800377a:	2b01      	cmp	r3, #1
 800377c:	d107      	bne.n	800378e <HAL_HCD_HC_Init+0x10a>
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2bbc      	cmp	r3, #188	; 0xbc
 8003788:	d901      	bls.n	800378e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800378a:	23bc      	movs	r3, #188	; 0xbc
 800378c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3318      	adds	r3, #24
 800379e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80037a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	b298      	uxth	r0, r3
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3328      	adds	r3, #40	; 0x28
 80037b8:	4602      	mov	r2, r0
 80037ba:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	787c      	ldrb	r4, [r7, #1]
 80037c6:	78ba      	ldrb	r2, [r7, #2]
 80037c8:	78f9      	ldrb	r1, [r7, #3]
 80037ca:	9302      	str	r3, [sp, #8]
 80037cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	4623      	mov	r3, r4
 80037da:	f005 fd6b 	bl	80092b4 <USB_HC_Init>
 80037de:	4603      	mov	r3, r0
 80037e0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd90      	pop	{r4, r7, pc}

080037f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_HCD_HC_Halt+0x1e>
 800380e:	2302      	movs	r3, #2
 8003810:	e00f      	b.n	8003832 <HAL_HCD_HC_Halt+0x3e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f006 f8fd 	bl	8009a22 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4603      	mov	r3, r0
 800384c:	70fb      	strb	r3, [r7, #3]
 800384e:	460b      	mov	r3, r1
 8003850:	70bb      	strb	r3, [r7, #2]
 8003852:	4613      	mov	r3, r2
 8003854:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3317      	adds	r3, #23
 8003866:	78ba      	ldrb	r2, [r7, #2]
 8003868:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3326      	adds	r3, #38	; 0x26
 800387a:	787a      	ldrb	r2, [r7, #1]
 800387c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800387e:	7c3b      	ldrb	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d114      	bne.n	80038ae <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	332a      	adds	r3, #42	; 0x2a
 8003894:	2203      	movs	r2, #3
 8003896:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3319      	adds	r3, #25
 80038a8:	7f3a      	ldrb	r2, [r7, #28]
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e009      	b.n	80038c2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	332a      	adds	r3, #42	; 0x2a
 80038be:	2202      	movs	r2, #2
 80038c0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80038c2:	787b      	ldrb	r3, [r7, #1]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	f200 8102 	bhi.w	8003ace <HAL_HCD_HC_SubmitRequest+0x292>
 80038ca:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	08003ab9 	.word	0x08003ab9
 80038d8:	080039a5 	.word	0x080039a5
 80038dc:	08003a2f 	.word	0x08003a2f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80038e0:	7c3b      	ldrb	r3, [r7, #16]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f040 80f5 	bne.w	8003ad2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80038e8:	78bb      	ldrb	r3, [r7, #2]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d12d      	bne.n	800394a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80038ee:	8b3b      	ldrh	r3, [r7, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	333d      	adds	r3, #61	; 0x3d
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	333d      	adds	r3, #61	; 0x3d
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	332a      	adds	r3, #42	; 0x2a
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003932:	e0ce      	b.n	8003ad2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	332a      	adds	r3, #42	; 0x2a
 8003944:	2202      	movs	r2, #2
 8003946:	701a      	strb	r2, [r3, #0]
      break;
 8003948:	e0c3      	b.n	8003ad2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	331a      	adds	r3, #26
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	f040 80b8 	bne.w	8003ad2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	333c      	adds	r3, #60	; 0x3c
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	332a      	adds	r3, #42	; 0x2a
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
      break;
 800398c:	e0a1      	b.n	8003ad2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	332a      	adds	r3, #42	; 0x2a
 800399e:	2202      	movs	r2, #2
 80039a0:	701a      	strb	r2, [r3, #0]
      break;
 80039a2:	e096      	b.n	8003ad2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80039a4:	78bb      	ldrb	r3, [r7, #2]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d120      	bne.n	80039ec <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	333d      	adds	r3, #61	; 0x3d
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	332a      	adds	r3, #42	; 0x2a
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80039d4:	e07e      	b.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	332a      	adds	r3, #42	; 0x2a
 80039e6:	2202      	movs	r2, #2
 80039e8:	701a      	strb	r2, [r3, #0]
      break;
 80039ea:	e073      	b.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	333c      	adds	r3, #60	; 0x3c
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	332a      	adds	r3, #42	; 0x2a
 8003a12:	2200      	movs	r2, #0
 8003a14:	701a      	strb	r2, [r3, #0]
      break;
 8003a16:	e05d      	b.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	332a      	adds	r3, #42	; 0x2a
 8003a28:	2202      	movs	r2, #2
 8003a2a:	701a      	strb	r2, [r3, #0]
      break;
 8003a2c:	e052      	b.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003a2e:	78bb      	ldrb	r3, [r7, #2]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d120      	bne.n	8003a76 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	333d      	adds	r3, #61	; 0x3d
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	332a      	adds	r3, #42	; 0x2a
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003a5e:	e039      	b.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	332a      	adds	r3, #42	; 0x2a
 8003a70:	2202      	movs	r2, #2
 8003a72:	701a      	strb	r2, [r3, #0]
      break;
 8003a74:	e02e      	b.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	333c      	adds	r3, #60	; 0x3c
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	332a      	adds	r3, #42	; 0x2a
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
      break;
 8003aa0:	e018      	b.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	332a      	adds	r3, #42	; 0x2a
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	701a      	strb	r2, [r3, #0]
      break;
 8003ab6:	e00d      	b.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	332a      	adds	r3, #42	; 0x2a
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
      break;
 8003acc:	e002      	b.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003ad2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	332c      	adds	r3, #44	; 0x2c
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	8b39      	ldrh	r1, [r7, #24]
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4403      	add	r3, r0
 8003af8:	3334      	adds	r3, #52	; 0x34
 8003afa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	334c      	adds	r3, #76	; 0x4c
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3338      	adds	r3, #56	; 0x38
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	3315      	adds	r3, #21
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	334d      	adds	r3, #77	; 0x4d
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	3310      	adds	r3, #16
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	1d19      	adds	r1, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	799b      	ldrb	r3, [r3, #6]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f005 fcd0 	bl	800950c <USB_HC_StartXfer>
 8003b6c:	4603      	mov	r3, r0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop

08003b78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f005 f9c4 	bl	8008f1c <USB_GetMode>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	f040 80fb 	bne.w	8003d92 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f005 f987 	bl	8008eb4 <USB_ReadInterrupts>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80f1 	beq.w	8003d90 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f005 f97e 	bl	8008eb4 <USB_ReadInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bc2:	d104      	bne.n	8003bce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003bcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f005 f96e 	bl	8008eb4 <USB_ReadInterrupts>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be2:	d104      	bne.n	8003bee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f005 f95e 	bl	8008eb4 <USB_ReadInterrupts>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c02:	d104      	bne.n	8003c0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f005 f94e 	bl	8008eb4 <USB_ReadInterrupts>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d103      	bne.n	8003c2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2202      	movs	r2, #2
 8003c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f005 f940 	bl	8008eb4 <USB_ReadInterrupts>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c3e:	d120      	bne.n	8003c82 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d113      	bne.n	8003c82 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003c5a:	2110      	movs	r1, #16
 8003c5c:	6938      	ldr	r0, [r7, #16]
 8003c5e:	f005 f833 	bl	8008cc8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003c62:	6938      	ldr	r0, [r7, #16]
 8003c64:	f005 f862 	bl	8008d2c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	7a5b      	ldrb	r3, [r3, #9]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d105      	bne.n	8003c7c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f005 fa54 	bl	8009124 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f008 fa2b 	bl	800c0d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f005 f914 	bl	8008eb4 <USB_ReadInterrupts>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c96:	d102      	bne.n	8003c9e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f001 fd33 	bl	8005704 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f005 f906 	bl	8008eb4 <USB_ReadInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d106      	bne.n	8003cc0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f008 f9f4 	bl	800c0a0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f005 f8f5 	bl	8008eb4 <USB_ReadInterrupts>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cd4:	d139      	bne.n	8003d4a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f005 fe90 	bl	8009a00 <USB_HC_ReadInterrupt>
 8003ce0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e025      	b.n	8003d34 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d018      	beq.n	8003d2e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d12:	d106      	bne.n	8003d22 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f905 	bl	8003f2a <HCD_HC_IN_IRQHandler>
 8003d20:	e005      	b.n	8003d2e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 ff67 	bl	8004bfc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3301      	adds	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	795b      	ldrb	r3, [r3, #5]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d3d3      	bcc.n	8003ce8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f005 f8b0 	bl	8008eb4 <USB_ReadInterrupts>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d101      	bne.n	8003d62 <HAL_HCD_IRQHandler+0x1ea>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_HCD_IRQHandler+0x1ec>
 8003d62:	2300      	movs	r3, #0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d014      	beq.n	8003d92 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0210 	bic.w	r2, r2, #16
 8003d76:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f001 fbe4 	bl	8005546 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0210 	orr.w	r2, r2, #16
 8003d8c:	619a      	str	r2, [r3, #24]
 8003d8e:	e000      	b.n	8003d92 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003d90:	bf00      	nop
    }
  }
}
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_HCD_Start+0x16>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e013      	b.n	8003dd6 <HAL_HCD_Start+0x3e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f005 fa18 	bl	80091f2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 ff10 	bl	8008bec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_HCD_Stop+0x16>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e00d      	b.n	8003e10 <HAL_HCD_Stop+0x32>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f005 ff6b 	bl	8009cdc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f005 f9ba 	bl	800919e <USB_ResetPort>
 8003e2a:	4603      	mov	r3, r0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334c      	adds	r3, #76	; 0x4c
 8003e50:	781b      	ldrb	r3, [r3, #0]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	3338      	adds	r3, #56	; 0x38
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f005 f9fc 	bl	8009292 <USB_GetCurrentFrame>
 8003e9a:	4603      	mov	r3, r0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f005 f9d7 	bl	8009264 <USB_GetHostSpeed>
 8003eb6:	4603      	mov	r3, r0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	331a      	adds	r3, #26
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	331b      	adds	r3, #27
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3325      	adds	r3, #37	; 0x25
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	3324      	adds	r3, #36	; 0x24
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	460b      	mov	r3, r1
 8003f34:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f004 ffc6 	bl	8008eda <USB_ReadChInterrupts>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d11a      	bne.n	8003f8e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f64:	461a      	mov	r2, r3
 8003f66:	2304      	movs	r3, #4
 8003f68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	334d      	adds	r3, #77	; 0x4d
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f005 fd4b 	bl	8009a22 <USB_HC_Halt>
 8003f8c:	e09e      	b.n	80040cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f004 ff9f 	bl	8008eda <USB_ReadChInterrupts>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa6:	d11b      	bne.n	8003fe0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	334d      	adds	r3, #77	; 0x4d
 8003fcc:	2208      	movs	r2, #8
 8003fce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f005 fd22 	bl	8009a22 <USB_HC_Halt>
 8003fde:	e075      	b.n	80040cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f004 ff76 	bl	8008eda <USB_ReadChInterrupts>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d11a      	bne.n	800402e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004004:	461a      	mov	r2, r3
 8004006:	2308      	movs	r3, #8
 8004008:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	334d      	adds	r3, #77	; 0x4d
 800401a:	2206      	movs	r2, #6
 800401c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f005 fcfb 	bl	8009a22 <USB_HC_Halt>
 800402c:	e04e      	b.n	80040cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f004 ff4f 	bl	8008eda <USB_ReadChInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d11b      	bne.n	8004080 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004054:	461a      	mov	r2, r3
 8004056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	334d      	adds	r3, #77	; 0x4d
 800406c:	2209      	movs	r2, #9
 800406e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f005 fcd2 	bl	8009a22 <USB_HC_Halt>
 800407e:	e025      	b.n	80040cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f004 ff26 	bl	8008eda <USB_ReadChInterrupts>
 800408e:	4603      	mov	r3, r0
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d119      	bne.n	80040cc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	461a      	mov	r2, r3
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	334d      	adds	r3, #77	; 0x4d
 80040ba:	2207      	movs	r2, #7
 80040bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f005 fcab 	bl	8009a22 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f004 ff00 	bl	8008eda <USB_ReadChInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e4:	d112      	bne.n	800410c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f005 fc97 	bl	8009a22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	461a      	mov	r2, r3
 8004102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004106:	6093      	str	r3, [r2, #8]
 8004108:	f000 bd75 	b.w	8004bf6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f004 fee0 	bl	8008eda <USB_ReadChInterrupts>
 800411a:	4603      	mov	r3, r0
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	f040 8128 	bne.w	8004376 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4413      	add	r3, r2
 800412e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004132:	461a      	mov	r2, r3
 8004134:	2320      	movs	r3, #32
 8004136:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	331b      	adds	r3, #27
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d119      	bne.n	8004182 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	331b      	adds	r3, #27
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	440a      	add	r2, r1
 8004178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004180:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	799b      	ldrb	r3, [r3, #6]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01b      	beq.n	80041c2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	3330      	adds	r3, #48	; 0x30
 800419a:	6819      	ldr	r1, [r3, #0]
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	1ac9      	subs	r1, r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4403      	add	r3, r0
 80041be:	3338      	adds	r3, #56	; 0x38
 80041c0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	334d      	adds	r3, #77	; 0x4d
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3344      	adds	r3, #68	; 0x44
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f6:	461a      	mov	r2, r3
 80041f8:	2301      	movs	r3, #1
 80041fa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	3326      	adds	r3, #38	; 0x26
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	3326      	adds	r3, #38	; 0x26
 8004222:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004224:	2b02      	cmp	r3, #2
 8004226:	d110      	bne.n	800424a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f005 fbf6 	bl	8009a22 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4413      	add	r3, r2
 800423e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004242:	461a      	mov	r2, r3
 8004244:	2310      	movs	r3, #16
 8004246:	6093      	str	r3, [r2, #8]
 8004248:	e03d      	b.n	80042c6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	3326      	adds	r3, #38	; 0x26
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d00a      	beq.n	8004276 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	3326      	adds	r3, #38	; 0x26
 8004270:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004272:	2b01      	cmp	r3, #1
 8004274:	d127      	bne.n	80042c6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	440a      	add	r2, r1
 800428c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004290:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004294:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	334c      	adds	r3, #76	; 0x4c
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	334c      	adds	r3, #76	; 0x4c
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	4619      	mov	r1, r3
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f007 ff17 	bl	800c0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	799b      	ldrb	r3, [r3, #6]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d13b      	bne.n	8004346 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	3338      	adds	r3, #56	; 0x38
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4403      	add	r3, r0
 80042ee:	3328      	adds	r3, #40	; 0x28
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	440b      	add	r3, r1
 80042f4:	1e59      	subs	r1, r3, #1
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4403      	add	r3, r0
 8004304:	3328      	adds	r3, #40	; 0x28
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	fbb1 f3f3 	udiv	r3, r1, r3
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8470 	beq.w	8004bf6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	333c      	adds	r3, #60	; 0x3c
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	f083 0301 	eor.w	r3, r3, #1
 800432e:	b2d8      	uxtb	r0, r3
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	333c      	adds	r3, #60	; 0x3c
 800433e:	4602      	mov	r2, r0
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	f000 bc58 	b.w	8004bf6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	333c      	adds	r3, #60	; 0x3c
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	f083 0301 	eor.w	r3, r3, #1
 800435e:	b2d8      	uxtb	r0, r3
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	333c      	adds	r3, #60	; 0x3c
 800436e:	4602      	mov	r2, r0
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	f000 bc40 	b.w	8004bf6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f004 fdab 	bl	8008eda <USB_ReadChInterrupts>
 8004384:	4603      	mov	r3, r0
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b20      	cmp	r3, #32
 800438c:	d131      	bne.n	80043f2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439a:	461a      	mov	r2, r3
 800439c:	2320      	movs	r3, #32
 800439e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	331a      	adds	r3, #26
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	f040 841f 	bne.w	8004bf6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	331b      	adds	r3, #27
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	334d      	adds	r3, #77	; 0x4d
 80043dc:	2203      	movs	r2, #3
 80043de:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f005 fb1a 	bl	8009a22 <USB_HC_Halt>
 80043ee:	f000 bc02 	b.w	8004bf6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f004 fd6d 	bl	8008eda <USB_ReadChInterrupts>
 8004400:	4603      	mov	r3, r0
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	f040 8305 	bne.w	8004a16 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	461a      	mov	r2, r3
 800441a:	2302      	movs	r3, #2
 800441c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	334d      	adds	r3, #77	; 0x4d
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d114      	bne.n	800445e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	334d      	adds	r3, #77	; 0x4d
 8004444:	2202      	movs	r2, #2
 8004446:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	334c      	adds	r3, #76	; 0x4c
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e2cc      	b.n	80049f8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	334d      	adds	r3, #77	; 0x4d
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b06      	cmp	r3, #6
 8004472:	d114      	bne.n	800449e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	334d      	adds	r3, #77	; 0x4d
 8004484:	2202      	movs	r2, #2
 8004486:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	334c      	adds	r3, #76	; 0x4c
 8004498:	2205      	movs	r2, #5
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e2ac      	b.n	80049f8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	334d      	adds	r3, #77	; 0x4d
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b07      	cmp	r3, #7
 80044b2:	d00b      	beq.n	80044cc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	334d      	adds	r3, #77	; 0x4d
 80044c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80044c6:	2b09      	cmp	r3, #9
 80044c8:	f040 80a6 	bne.w	8004618 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	334d      	adds	r3, #77	; 0x4d
 80044dc:	2202      	movs	r2, #2
 80044de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	3344      	adds	r3, #68	; 0x44
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	1c59      	adds	r1, r3, #1
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4403      	add	r3, r0
 8004500:	3344      	adds	r3, #68	; 0x44
 8004502:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3344      	adds	r3, #68	; 0x44
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d943      	bls.n	80045a2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3344      	adds	r3, #68	; 0x44
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	331a      	adds	r3, #26
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d123      	bne.n	800458c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	331b      	adds	r3, #27
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	331c      	adds	r3, #28
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4413      	add	r3, r2
 8004574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	0151      	lsls	r1, r2, #5
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	440a      	add	r2, r1
 8004582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	334c      	adds	r3, #76	; 0x4c
 800459c:	2204      	movs	r2, #4
 800459e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045a0:	e229      	b.n	80049f6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	334c      	adds	r3, #76	; 0x4c
 80045b2:	2202      	movs	r2, #2
 80045b4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	3326      	adds	r3, #38	; 0x26
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	3326      	adds	r3, #38	; 0x26
 80045dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045de:	2b02      	cmp	r3, #2
 80045e0:	f040 8209 	bne.w	80049f6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004602:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004610:	461a      	mov	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004616:	e1ee      	b.n	80049f6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	334d      	adds	r3, #77	; 0x4d
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b05      	cmp	r3, #5
 800462c:	f040 80c8 	bne.w	80047c0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	334d      	adds	r3, #77	; 0x4d
 8004640:	2202      	movs	r2, #2
 8004642:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	331b      	adds	r3, #27
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	f040 81ce 	bne.w	80049f8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	3326      	adds	r3, #38	; 0x26
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d16b      	bne.n	800474a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	3348      	adds	r3, #72	; 0x48
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	1c59      	adds	r1, r3, #1
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4403      	add	r3, r0
 8004692:	3348      	adds	r3, #72	; 0x48
 8004694:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	3348      	adds	r3, #72	; 0x48
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d943      	bls.n	8004734 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3348      	adds	r3, #72	; 0x48
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	331b      	adds	r3, #27
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	3344      	adds	r3, #68	; 0x44
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d809      	bhi.n	80046fe <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	331c      	adds	r3, #28
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	440a      	add	r2, r1
 8004714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	334c      	adds	r3, #76	; 0x4c
 800472e:	2204      	movs	r2, #4
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e014      	b.n	800475e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	334c      	adds	r3, #76	; 0x4c
 8004744:	2202      	movs	r2, #2
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e009      	b.n	800475e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	334c      	adds	r3, #76	; 0x4c
 800475a:	2202      	movs	r2, #2
 800475c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	3326      	adds	r3, #38	; 0x26
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	3326      	adds	r3, #38	; 0x26
 8004784:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004786:	2b02      	cmp	r3, #2
 8004788:	f040 8136 	bne.w	80049f8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047a2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047aa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b8:	461a      	mov	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e11b      	b.n	80049f8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	334d      	adds	r3, #77	; 0x4d
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	f040 8081 	bne.w	80048da <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	334d      	adds	r3, #77	; 0x4d
 80047e8:	2202      	movs	r2, #2
 80047ea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	331b      	adds	r3, #27
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	f040 80fa 	bne.w	80049f8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	334c      	adds	r3, #76	; 0x4c
 8004814:	2202      	movs	r2, #2
 8004816:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	440a      	add	r2, r1
 800482e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004836:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	0151      	lsls	r1, r2, #5
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	440a      	add	r2, r1
 800484e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004856:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	440a      	add	r2, r1
 800486e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004872:	f023 0320 	bic.w	r3, r3, #32
 8004876:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	3326      	adds	r3, #38	; 0x26
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	3326      	adds	r3, #38	; 0x26
 800489e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	f040 80a9 	bne.w	80049f8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048bc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048c4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e08e      	b.n	80049f8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	334d      	adds	r3, #77	; 0x4d
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d143      	bne.n	8004978 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	334d      	adds	r3, #77	; 0x4d
 8004900:	2202      	movs	r2, #2
 8004902:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	334c      	adds	r3, #76	; 0x4c
 8004914:	2202      	movs	r2, #2
 8004916:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	3326      	adds	r3, #38	; 0x26
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	3326      	adds	r3, #38	; 0x26
 800493e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004940:	2b02      	cmp	r3, #2
 8004942:	d159      	bne.n	80049f8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800495a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004962:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004970:	461a      	mov	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	e03f      	b.n	80049f8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	334d      	adds	r3, #77	; 0x4d
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b08      	cmp	r3, #8
 800498c:	d126      	bne.n	80049dc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	334d      	adds	r3, #77	; 0x4d
 800499e:	2202      	movs	r2, #2
 80049a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	3344      	adds	r3, #68	; 0x44
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	1c59      	adds	r1, r3, #1
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	4613      	mov	r3, r2
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4403      	add	r3, r0
 80049c2:	3344      	adds	r3, #68	; 0x44
 80049c4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	334c      	adds	r3, #76	; 0x4c
 80049d6:	2204      	movs	r2, #4
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e00d      	b.n	80049f8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	334d      	adds	r3, #77	; 0x4d
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	f000 8100 	beq.w	8004bf4 <HCD_HC_IN_IRQHandler+0xcca>
 80049f4:	e000      	b.n	80049f8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049f6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80049f8:	78fa      	ldrb	r2, [r7, #3]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	334c      	adds	r3, #76	; 0x4c
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f007 fb70 	bl	800c0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a14:	e0ef      	b.n	8004bf6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f004 fa5b 	bl	8008eda <USB_ReadChInterrupts>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d12f      	bne.n	8004a8e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2340      	movs	r3, #64	; 0x40
 8004a3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004a40:	78fa      	ldrb	r2, [r7, #3]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	334d      	adds	r3, #77	; 0x4d
 8004a50:	2205      	movs	r2, #5
 8004a52:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	331a      	adds	r3, #26
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	3344      	adds	r3, #68	; 0x44
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	4611      	mov	r1, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f004 ffcb 	bl	8009a22 <USB_HC_Halt>
 8004a8c:	e0b3      	b.n	8004bf6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f004 fa1f 	bl	8008eda <USB_ReadChInterrupts>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	f040 80a7 	bne.w	8004bf6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3326      	adds	r3, #38	; 0x26
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d11b      	bne.n	8004af6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	3344      	adds	r3, #68	; 0x44
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	334d      	adds	r3, #77	; 0x4d
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f004 ff97 	bl	8009a22 <USB_HC_Halt>
 8004af4:	e03f      	b.n	8004b76 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004af6:	78fa      	ldrb	r2, [r7, #3]
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	3326      	adds	r3, #38	; 0x26
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	3326      	adds	r3, #38	; 0x26
 8004b1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d129      	bne.n	8004b76 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	3344      	adds	r3, #68	; 0x44
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	799b      	ldrb	r3, [r3, #6]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HCD_HC_IN_IRQHandler+0xc2a>
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	331b      	adds	r3, #27
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d110      	bne.n	8004b76 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	334d      	adds	r3, #77	; 0x4d
 8004b64:	2204      	movs	r2, #4
 8004b66:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f004 ff56 	bl	8009a22 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	331b      	adds	r3, #27
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d129      	bne.n	8004be0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	331b      	adds	r3, #27
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	0151      	lsls	r1, r2, #5
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	0151      	lsls	r1, r2, #5
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	440a      	add	r2, r1
 8004bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bda:	f043 0320 	orr.w	r3, r3, #32
 8004bde:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bec:	461a      	mov	r2, r3
 8004bee:	2310      	movs	r3, #16
 8004bf0:	6093      	str	r3, [r2, #8]
 8004bf2:	e000      	b.n	8004bf6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004bf4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f004 f95d 	bl	8008eda <USB_ReadChInterrupts>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d11b      	bne.n	8004c62 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c36:	461a      	mov	r2, r3
 8004c38:	2304      	movs	r3, #4
 8004c3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004c3c:	78fa      	ldrb	r2, [r7, #3]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	1a9b      	subs	r3, r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	334d      	adds	r3, #77	; 0x4d
 8004c4c:	2207      	movs	r2, #7
 8004c4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f004 fee2 	bl	8009a22 <USB_HC_Halt>
 8004c5e:	f000 bc6f 	b.w	8005540 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f004 f935 	bl	8008eda <USB_ReadChInterrupts>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	f040 8082 	bne.w	8004d80 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004c8e:	78fa      	ldrb	r2, [r7, #3]
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	3319      	adds	r3, #25
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d124      	bne.n	8004cee <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004ca4:	78fa      	ldrb	r2, [r7, #3]
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	1a9b      	subs	r3, r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	3319      	adds	r3, #25
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	334c      	adds	r3, #76	; 0x4c
 8004cc8:	2202      	movs	r2, #2
 8004cca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	334d      	adds	r3, #77	; 0x4d
 8004cdc:	2203      	movs	r2, #3
 8004cde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f004 fe9a 	bl	8009a22 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	331a      	adds	r3, #26
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	f040 841d 	bne.w	8005540 <HCD_HC_OUT_IRQHandler+0x944>
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	331b      	adds	r3, #27
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f040 8411 	bne.w	8005540 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3326      	adds	r3, #38	; 0x26
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d009      	beq.n	8004d48 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	331b      	adds	r3, #27
 8004d44:	2201      	movs	r2, #1
 8004d46:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	334d      	adds	r3, #77	; 0x4d
 8004d58:	2203      	movs	r2, #3
 8004d5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	78fa      	ldrb	r2, [r7, #3]
 8004d62:	4611      	mov	r1, r2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f004 fe5c 	bl	8009a22 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	3344      	adds	r3, #68	; 0x44
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e3df      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	4611      	mov	r1, r2
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f004 f8a6 	bl	8008eda <USB_ReadChInterrupts>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d98:	d111      	bne.n	8004dbe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da6:	461a      	mov	r2, r3
 8004da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	4611      	mov	r1, r2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f004 fe33 	bl	8009a22 <USB_HC_Halt>
 8004dbc:	e3c0      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f004 f887 	bl	8008eda <USB_ReadChInterrupts>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d168      	bne.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	3344      	adds	r3, #68	; 0x44
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f004 f871 	bl	8008eda <USB_ReadChInterrupts>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d112      	bne.n	8004e28 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3319      	adds	r3, #25
 8004e12:	2201      	movs	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	461a      	mov	r2, r3
 8004e24:	2340      	movs	r3, #64	; 0x40
 8004e26:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	331b      	adds	r3, #27
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d019      	beq.n	8004e72 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	331b      	adds	r3, #27
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e52:	78fb      	ldrb	r3, [r7, #3]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e70:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004e72:	78fb      	ldrb	r3, [r7, #3]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7e:	461a      	mov	r2, r3
 8004e80:	2301      	movs	r3, #1
 8004e82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	334d      	adds	r3, #77	; 0x4d
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f004 fdbe 	bl	8009a22 <USB_HC_Halt>
 8004ea6:	e34b      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	78fa      	ldrb	r2, [r7, #3]
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f004 f812 	bl	8008eda <USB_ReadChInterrupts>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d139      	bne.n	8004f34 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	334d      	adds	r3, #77	; 0x4d
 8004ed0:	2205      	movs	r2, #5
 8004ed2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	331a      	adds	r3, #26
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3319      	adds	r3, #25
 8004efa:	2201      	movs	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3344      	adds	r3, #68	; 0x44
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f004 fd81 	bl	8009a22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2340      	movs	r3, #64	; 0x40
 8004f30:	6093      	str	r3, [r2, #8]
 8004f32:	e305      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f003 ffcc 	bl	8008eda <USB_ReadChInterrupts>
 8004f42:	4603      	mov	r3, r0
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d11a      	bne.n	8004f82 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f58:	461a      	mov	r2, r3
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	334d      	adds	r3, #77	; 0x4d
 8004f6e:	2206      	movs	r2, #6
 8004f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	78fa      	ldrb	r2, [r7, #3]
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f004 fd51 	bl	8009a22 <USB_HC_Halt>
 8004f80:	e2de      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	78fa      	ldrb	r2, [r7, #3]
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f003 ffa5 	bl	8008eda <USB_ReadChInterrupts>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d144      	bne.n	8005024 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f9a:	78fa      	ldrb	r2, [r7, #3]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3344      	adds	r3, #68	; 0x44
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	334d      	adds	r3, #77	; 0x4d
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3319      	adds	r3, #25
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d114      	bne.n	8005002 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004fd8:	78fa      	ldrb	r2, [r7, #3]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3319      	adds	r3, #25
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f004 fd09 	bl	8009a22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501c:	461a      	mov	r2, r3
 800501e:	2310      	movs	r3, #16
 8005020:	6093      	str	r3, [r2, #8]
 8005022:	e28d      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	4611      	mov	r1, r2
 800502c:	4618      	mov	r0, r3
 800502e:	f003 ff54 	bl	8008eda <USB_ReadChInterrupts>
 8005032:	4603      	mov	r3, r0
 8005034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d169      	bne.n	8005110 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	799b      	ldrb	r3, [r3, #6]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d111      	bne.n	8005068 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	334d      	adds	r3, #77	; 0x4d
 8005054:	2207      	movs	r2, #7
 8005056:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f004 fcde 	bl	8009a22 <USB_HC_Halt>
 8005066:	e049      	b.n	80050fc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	3344      	adds	r3, #68	; 0x44
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1c59      	adds	r1, r3, #1
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4403      	add	r3, r0
 8005088:	3344      	adds	r3, #68	; 0x44
 800508a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	3344      	adds	r3, #68	; 0x44
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d922      	bls.n	80050e8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80050a2:	78fa      	ldrb	r2, [r7, #3]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	3344      	adds	r3, #68	; 0x44
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80050b6:	78fa      	ldrb	r2, [r7, #3]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	334c      	adds	r3, #76	; 0x4c
 80050c6:	2204      	movs	r2, #4
 80050c8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	334c      	adds	r3, #76	; 0x4c
 80050da:	781a      	ldrb	r2, [r3, #0]
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f007 f807 	bl	800c0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050e6:	e009      	b.n	80050fc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050e8:	78fa      	ldrb	r2, [r7, #3]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	334c      	adds	r3, #76	; 0x4c
 80050f8:	2202      	movs	r2, #2
 80050fa:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4413      	add	r3, r2
 8005104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005108:	461a      	mov	r2, r3
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	6093      	str	r3, [r2, #8]
 800510e:	e217      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	78fa      	ldrb	r2, [r7, #3]
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f003 fede 	bl	8008eda <USB_ReadChInterrupts>
 800511e:	4603      	mov	r3, r0
 8005120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005128:	d11b      	bne.n	8005162 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	334d      	adds	r3, #77	; 0x4d
 800513a:	2209      	movs	r2, #9
 800513c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f004 fc6b 	bl	8009a22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005158:	461a      	mov	r2, r3
 800515a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800515e:	6093      	str	r3, [r2, #8]
 8005160:	e1ee      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f003 feb5 	bl	8008eda <USB_ReadChInterrupts>
 8005170:	4603      	mov	r3, r0
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	f040 81df 	bne.w	800553a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005188:	461a      	mov	r2, r3
 800518a:	2302      	movs	r3, #2
 800518c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	334d      	adds	r3, #77	; 0x4d
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f040 8093 	bne.w	80052cc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	334d      	adds	r3, #77	; 0x4d
 80051b6:	2202      	movs	r2, #2
 80051b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	334c      	adds	r3, #76	; 0x4c
 80051ca:	2201      	movs	r2, #1
 80051cc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	3326      	adds	r3, #38	; 0x26
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d00b      	beq.n	80051fc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80051e4:	78fa      	ldrb	r2, [r7, #3]
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	3326      	adds	r3, #38	; 0x26
 80051f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	f040 8190 	bne.w	800551c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	799b      	ldrb	r3, [r3, #6]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d115      	bne.n	8005230 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	333d      	adds	r3, #61	; 0x3d
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	78fa      	ldrb	r2, [r7, #3]
 8005218:	f083 0301 	eor.w	r3, r3, #1
 800521c:	b2d8      	uxtb	r0, r3
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	333d      	adds	r3, #61	; 0x3d
 800522c:	4602      	mov	r2, r0
 800522e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	799b      	ldrb	r3, [r3, #6]
 8005234:	2b01      	cmp	r3, #1
 8005236:	f040 8171 	bne.w	800551c <HCD_HC_OUT_IRQHandler+0x920>
 800523a:	78fa      	ldrb	r2, [r7, #3]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	3334      	adds	r3, #52	; 0x34
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8165 	beq.w	800551c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005252:	78fa      	ldrb	r2, [r7, #3]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	3334      	adds	r3, #52	; 0x34
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4403      	add	r3, r0
 8005272:	3328      	adds	r3, #40	; 0x28
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	440b      	add	r3, r1
 8005278:	1e59      	subs	r1, r3, #1
 800527a:	78fa      	ldrb	r2, [r7, #3]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4403      	add	r3, r0
 8005288:	3328      	adds	r3, #40	; 0x28
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005290:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 813f 	beq.w	800551c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	333d      	adds	r3, #61	; 0x3d
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	f083 0301 	eor.w	r3, r3, #1
 80052b6:	b2d8      	uxtb	r0, r3
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	333d      	adds	r3, #61	; 0x3d
 80052c6:	4602      	mov	r2, r0
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e127      	b.n	800551c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80052cc:	78fa      	ldrb	r2, [r7, #3]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	334d      	adds	r3, #77	; 0x4d
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d120      	bne.n	8005324 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052e2:	78fa      	ldrb	r2, [r7, #3]
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	334d      	adds	r3, #77	; 0x4d
 80052f2:	2202      	movs	r2, #2
 80052f4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	331b      	adds	r3, #27
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	f040 8107 	bne.w	800551c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	334c      	adds	r3, #76	; 0x4c
 800531e:	2202      	movs	r2, #2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e0fb      	b.n	800551c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	334d      	adds	r3, #77	; 0x4d
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b04      	cmp	r3, #4
 8005338:	d13a      	bne.n	80053b0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	334d      	adds	r3, #77	; 0x4d
 800534a:	2202      	movs	r2, #2
 800534c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800534e:	78fa      	ldrb	r2, [r7, #3]
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	1a9b      	subs	r3, r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	334c      	adds	r3, #76	; 0x4c
 800535e:	2202      	movs	r2, #2
 8005360:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	331b      	adds	r3, #27
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	f040 80d1 	bne.w	800551c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	4613      	mov	r3, r2
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	440b      	add	r3, r1
 8005388:	331b      	adds	r3, #27
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	78fa      	ldrb	r2, [r7, #3]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ac:	6053      	str	r3, [r2, #4]
 80053ae:	e0b5      	b.n	800551c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	334d      	adds	r3, #77	; 0x4d
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d114      	bne.n	80053f0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	334d      	adds	r3, #77	; 0x4d
 80053d6:	2202      	movs	r2, #2
 80053d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	334c      	adds	r3, #76	; 0x4c
 80053ea:	2202      	movs	r2, #2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e095      	b.n	800551c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	334d      	adds	r3, #77	; 0x4d
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b06      	cmp	r3, #6
 8005404:	d114      	bne.n	8005430 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	334d      	adds	r3, #77	; 0x4d
 8005416:	2202      	movs	r2, #2
 8005418:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800541a:	78fa      	ldrb	r2, [r7, #3]
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	440b      	add	r3, r1
 8005428:	334c      	adds	r3, #76	; 0x4c
 800542a:	2205      	movs	r2, #5
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e075      	b.n	800551c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	334d      	adds	r3, #77	; 0x4d
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b07      	cmp	r3, #7
 8005444:	d00a      	beq.n	800545c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	334d      	adds	r3, #77	; 0x4d
 8005456:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005458:	2b09      	cmp	r3, #9
 800545a:	d170      	bne.n	800553e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	334d      	adds	r3, #77	; 0x4d
 800546c:	2202      	movs	r2, #2
 800546e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	3344      	adds	r3, #68	; 0x44
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	1c59      	adds	r1, r3, #1
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4403      	add	r3, r0
 8005490:	3344      	adds	r3, #68	; 0x44
 8005492:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	3344      	adds	r3, #68	; 0x44
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d914      	bls.n	80054d4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	3344      	adds	r3, #68	; 0x44
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	334c      	adds	r3, #76	; 0x4c
 80054ce:	2204      	movs	r2, #4
 80054d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80054d2:	e022      	b.n	800551a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	334c      	adds	r3, #76	; 0x4c
 80054e4:	2202      	movs	r2, #2
 80054e6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005506:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005514:	461a      	mov	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800551a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	334c      	adds	r3, #76	; 0x4c
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f006 fdde 	bl	800c0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005538:	e002      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800553a:	bf00      	nop
 800553c:	e000      	b.n	8005540 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800553e:	bf00      	nop
  }
}
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b08a      	sub	sp, #40	; 0x28
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	0c5b      	lsrs	r3, r3, #17
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	091b      	lsrs	r3, r3, #4
 8005576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800557a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d004      	beq.n	800558c <HCD_RXQLVL_IRQHandler+0x46>
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b05      	cmp	r3, #5
 8005586:	f000 80b6 	beq.w	80056f6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800558a:	e0b7      	b.n	80056fc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80b3 	beq.w	80056fa <HCD_RXQLVL_IRQHandler+0x1b4>
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4613      	mov	r3, r2
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	332c      	adds	r3, #44	; 0x2c
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80a7 	beq.w	80056fa <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4613      	mov	r3, r2
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	3338      	adds	r3, #56	; 0x38
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	18d1      	adds	r1, r2, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4613      	mov	r3, r2
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4403      	add	r3, r0
 80055d0:	3334      	adds	r3, #52	; 0x34
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4299      	cmp	r1, r3
 80055d6:	f200 8083 	bhi.w	80056e0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4613      	mov	r3, r2
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	332c      	adds	r3, #44	; 0x2c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	b292      	uxth	r2, r2
 80055f4:	4619      	mov	r1, r3
 80055f6:	f003 fc05 	bl	8008e04 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4613      	mov	r3, r2
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	332c      	adds	r3, #44	; 0x2c
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	18d1      	adds	r1, r2, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4613      	mov	r3, r2
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4403      	add	r3, r0
 800561e:	332c      	adds	r3, #44	; 0x2c
 8005620:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4613      	mov	r3, r2
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	3338      	adds	r3, #56	; 0x38
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	18d1      	adds	r1, r2, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4403      	add	r3, r0
 8005646:	3338      	adds	r3, #56	; 0x38
 8005648:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	4413      	add	r3, r2
 8005652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	0cdb      	lsrs	r3, r3, #19
 800565a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800565e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4613      	mov	r3, r2
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	3328      	adds	r3, #40	; 0x28
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4293      	cmp	r3, r2
 8005678:	d13f      	bne.n	80056fa <HCD_RXQLVL_IRQHandler+0x1b4>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d03c      	beq.n	80056fa <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005696:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800569e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ac:	461a      	mov	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4613      	mov	r3, r2
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	440b      	add	r3, r1
 80056c0:	333c      	adds	r3, #60	; 0x3c
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f083 0301 	eor.w	r3, r3, #1
 80056c8:	b2d8      	uxtb	r0, r3
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4613      	mov	r3, r2
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	333c      	adds	r3, #60	; 0x3c
 80056da:	4602      	mov	r2, r0
 80056dc:	701a      	strb	r2, [r3, #0]
      break;
 80056de:	e00c      	b.n	80056fa <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4613      	mov	r3, r2
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	334c      	adds	r3, #76	; 0x4c
 80056f0:	2204      	movs	r2, #4
 80056f2:	701a      	strb	r2, [r3, #0]
      break;
 80056f4:	e001      	b.n	80056fa <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80056f6:	bf00      	nop
 80056f8:	e000      	b.n	80056fc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80056fa:	bf00      	nop
  }
}
 80056fc:	bf00      	nop
 80056fe:	3728      	adds	r7, #40	; 0x28
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005730:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d10b      	bne.n	8005754 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d102      	bne.n	800574c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f006 fcb8 	bl	800c0bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f043 0302 	orr.w	r3, r3, #2
 8005752:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b08      	cmp	r3, #8
 800575c:	d132      	bne.n	80057c4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f043 0308 	orr.w	r3, r3, #8
 8005764:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b04      	cmp	r3, #4
 800576e:	d126      	bne.n	80057be <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7a5b      	ldrb	r3, [r3, #9]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d113      	bne.n	80057a0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800577e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005782:	d106      	bne.n	8005792 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2102      	movs	r1, #2
 800578a:	4618      	mov	r0, r3
 800578c:	f003 fcca 	bl	8009124 <USB_InitFSLSPClkSel>
 8005790:	e011      	b.n	80057b6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2101      	movs	r1, #1
 8005798:	4618      	mov	r0, r3
 800579a:	f003 fcc3 	bl	8009124 <USB_InitFSLSPClkSel>
 800579e:	e00a      	b.n	80057b6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	79db      	ldrb	r3, [r3, #7]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d106      	bne.n	80057b6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ae:	461a      	mov	r2, r3
 80057b0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80057b4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f006 fcaa 	bl	800c110 <HAL_HCD_PortEnabled_Callback>
 80057bc:	e002      	b.n	80057c4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f006 fcb4 	bl	800c12c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d103      	bne.n	80057d6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f043 0320 	orr.w	r3, r3, #32
 80057d4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057dc:	461a      	mov	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6013      	str	r3, [r2, #0]
}
 80057e2:	bf00      	nop
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e12b      	b.n	8005a56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fc fc2a 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2224      	movs	r2, #36	; 0x24
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800583e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800584e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005850:	f001 fa20 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 8005854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4a81      	ldr	r2, [pc, #516]	; (8005a60 <HAL_I2C_Init+0x274>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d807      	bhi.n	8005870 <HAL_I2C_Init+0x84>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a80      	ldr	r2, [pc, #512]	; (8005a64 <HAL_I2C_Init+0x278>)
 8005864:	4293      	cmp	r3, r2
 8005866:	bf94      	ite	ls
 8005868:	2301      	movls	r3, #1
 800586a:	2300      	movhi	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e006      	b.n	800587e <HAL_I2C_Init+0x92>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a7d      	ldr	r2, [pc, #500]	; (8005a68 <HAL_I2C_Init+0x27c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	bf94      	ite	ls
 8005878:	2301      	movls	r3, #1
 800587a:	2300      	movhi	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e0e7      	b.n	8005a56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a78      	ldr	r2, [pc, #480]	; (8005a6c <HAL_I2C_Init+0x280>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	0c9b      	lsrs	r3, r3, #18
 8005890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a6a      	ldr	r2, [pc, #424]	; (8005a60 <HAL_I2C_Init+0x274>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d802      	bhi.n	80058c0 <HAL_I2C_Init+0xd4>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	3301      	adds	r3, #1
 80058be:	e009      	b.n	80058d4 <HAL_I2C_Init+0xe8>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	4a69      	ldr	r2, [pc, #420]	; (8005a70 <HAL_I2C_Init+0x284>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	3301      	adds	r3, #1
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	430b      	orrs	r3, r1
 80058da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	495c      	ldr	r1, [pc, #368]	; (8005a60 <HAL_I2C_Init+0x274>)
 80058f0:	428b      	cmp	r3, r1
 80058f2:	d819      	bhi.n	8005928 <HAL_I2C_Init+0x13c>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1e59      	subs	r1, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005902:	1c59      	adds	r1, r3, #1
 8005904:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005908:	400b      	ands	r3, r1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_I2C_Init+0x138>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1e59      	subs	r1, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	fbb1 f3f3 	udiv	r3, r1, r3
 800591c:	3301      	adds	r3, #1
 800591e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005922:	e051      	b.n	80059c8 <HAL_I2C_Init+0x1dc>
 8005924:	2304      	movs	r3, #4
 8005926:	e04f      	b.n	80059c8 <HAL_I2C_Init+0x1dc>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d111      	bne.n	8005954 <HAL_I2C_Init+0x168>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	1e58      	subs	r0, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	440b      	add	r3, r1
 800593e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005942:	3301      	adds	r3, #1
 8005944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005948:	2b00      	cmp	r3, #0
 800594a:	bf0c      	ite	eq
 800594c:	2301      	moveq	r3, #1
 800594e:	2300      	movne	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e012      	b.n	800597a <HAL_I2C_Init+0x18e>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	1e58      	subs	r0, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6859      	ldr	r1, [r3, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	0099      	lsls	r1, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	fbb0 f3f3 	udiv	r3, r0, r3
 800596a:	3301      	adds	r3, #1
 800596c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf0c      	ite	eq
 8005974:	2301      	moveq	r3, #1
 8005976:	2300      	movne	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <HAL_I2C_Init+0x196>
 800597e:	2301      	movs	r3, #1
 8005980:	e022      	b.n	80059c8 <HAL_I2C_Init+0x1dc>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10e      	bne.n	80059a8 <HAL_I2C_Init+0x1bc>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1e58      	subs	r0, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6859      	ldr	r1, [r3, #4]
 8005992:	460b      	mov	r3, r1
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	440b      	add	r3, r1
 8005998:	fbb0 f3f3 	udiv	r3, r0, r3
 800599c:	3301      	adds	r3, #1
 800599e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a6:	e00f      	b.n	80059c8 <HAL_I2C_Init+0x1dc>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1e58      	subs	r0, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	0099      	lsls	r1, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80059be:	3301      	adds	r3, #1
 80059c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	6809      	ldr	r1, [r1, #0]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69da      	ldr	r2, [r3, #28]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6911      	ldr	r1, [r2, #16]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68d2      	ldr	r2, [r2, #12]
 8005a02:	4311      	orrs	r1, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	000186a0 	.word	0x000186a0
 8005a64:	001e847f 	.word	0x001e847f
 8005a68:	003d08ff 	.word	0x003d08ff
 8005a6c:	431bde83 	.word	0x431bde83
 8005a70:	10624dd3 	.word	0x10624dd3

08005a74 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e128      	b.n	8005cd8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a90      	ldr	r2, [pc, #576]	; (8005ce0 <HAL_I2S_Init+0x26c>)
 8005a9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7fc fb2b 	bl	80020fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6812      	ldr	r2, [r2, #0]
 8005ab8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005abc:	f023 030f 	bic.w	r3, r3, #15
 8005ac0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d060      	beq.n	8005b94 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005ada:	2310      	movs	r3, #16
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	e001      	b.n	8005ae4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d802      	bhi.n	8005af2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005af2:	2001      	movs	r0, #1
 8005af4:	f001 f9d8 	bl	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005af8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b02:	d125      	bne.n	8005b50 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d010      	beq.n	8005b2e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	461a      	mov	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	3305      	adds	r3, #5
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	e01f      	b.n	8005b6e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	461a      	mov	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	3305      	adds	r3, #5
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	e00e      	b.n	8005b6e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	461a      	mov	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	3305      	adds	r3, #5
 8005b6c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	4a5c      	ldr	r2, [pc, #368]	; (8005ce4 <HAL_I2S_Init+0x270>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	08db      	lsrs	r3, r3, #3
 8005b78:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	e003      	b.n	8005b9c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005b94:	2302      	movs	r3, #2
 8005b96:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d902      	bls.n	8005ba8 <HAL_I2S_Init+0x134>
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	2bff      	cmp	r3, #255	; 0xff
 8005ba6:	d907      	bls.n	8005bb8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bac:	f043 0210 	orr.w	r2, r3, #16
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e08f      	b.n	8005cd8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	ea42 0103 	orr.w	r1, r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005bd6:	f023 030f 	bic.w	r3, r3, #15
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6851      	ldr	r1, [r2, #4]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6892      	ldr	r2, [r2, #8]
 8005be2:	4311      	orrs	r1, r2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	68d2      	ldr	r2, [r2, #12]
 8005be8:	4311      	orrs	r1, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6992      	ldr	r2, [r2, #24]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bfa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d161      	bne.n	8005cc8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a38      	ldr	r2, [pc, #224]	; (8005ce8 <HAL_I2S_Init+0x274>)
 8005c08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a37      	ldr	r2, [pc, #220]	; (8005cec <HAL_I2S_Init+0x278>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d101      	bne.n	8005c18 <HAL_I2S_Init+0x1a4>
 8005c14:	4b36      	ldr	r3, [pc, #216]	; (8005cf0 <HAL_I2S_Init+0x27c>)
 8005c16:	e001      	b.n	8005c1c <HAL_I2S_Init+0x1a8>
 8005c18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	4932      	ldr	r1, [pc, #200]	; (8005cec <HAL_I2S_Init+0x278>)
 8005c24:	428a      	cmp	r2, r1
 8005c26:	d101      	bne.n	8005c2c <HAL_I2S_Init+0x1b8>
 8005c28:	4a31      	ldr	r2, [pc, #196]	; (8005cf0 <HAL_I2S_Init+0x27c>)
 8005c2a:	e001      	b.n	8005c30 <HAL_I2S_Init+0x1bc>
 8005c2c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005c30:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c34:	f023 030f 	bic.w	r3, r3, #15
 8005c38:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a2b      	ldr	r2, [pc, #172]	; (8005cec <HAL_I2S_Init+0x278>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d101      	bne.n	8005c48 <HAL_I2S_Init+0x1d4>
 8005c44:	4b2a      	ldr	r3, [pc, #168]	; (8005cf0 <HAL_I2S_Init+0x27c>)
 8005c46:	e001      	b.n	8005c4c <HAL_I2S_Init+0x1d8>
 8005c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a25      	ldr	r2, [pc, #148]	; (8005cec <HAL_I2S_Init+0x278>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d101      	bne.n	8005c5e <HAL_I2S_Init+0x1ea>
 8005c5a:	4b25      	ldr	r3, [pc, #148]	; (8005cf0 <HAL_I2S_Init+0x27c>)
 8005c5c:	e001      	b.n	8005c62 <HAL_I2S_Init+0x1ee>
 8005c5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6e:	d003      	beq.n	8005c78 <HAL_I2S_Init+0x204>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e001      	b.n	8005c84 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	897b      	ldrh	r3, [r7, #10]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cb0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a0d      	ldr	r2, [pc, #52]	; (8005cec <HAL_I2S_Init+0x278>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d101      	bne.n	8005cc0 <HAL_I2S_Init+0x24c>
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <HAL_I2S_Init+0x27c>)
 8005cbe:	e001      	b.n	8005cc4 <HAL_I2S_Init+0x250>
 8005cc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cc4:	897a      	ldrh	r2, [r7, #10]
 8005cc6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	08005deb 	.word	0x08005deb
 8005ce4:	cccccccd 	.word	0xcccccccd
 8005ce8:	08005f01 	.word	0x08005f01
 8005cec:	40003800 	.word	0x40003800
 8005cf0:	40003400 	.word	0x40003400

08005cf4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	881a      	ldrh	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	1c9a      	adds	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10e      	bne.n	8005d84 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d74:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7ff ffb8 	bl	8005cf4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	b292      	uxth	r2, r2
 8005da0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	1c9a      	adds	r2, r3, #2
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10e      	bne.n	8005de2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dd2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ff93 	bl	8005d08 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b086      	sub	sp, #24
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d13a      	bne.n	8005e7c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d109      	bne.n	8005e24 <I2S_IRQHandler+0x3a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b40      	cmp	r3, #64	; 0x40
 8005e1c:	d102      	bne.n	8005e24 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ffb4 	bl	8005d8c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d126      	bne.n	8005e7c <I2S_IRQHandler+0x92>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d11f      	bne.n	8005e7c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	f043 0202 	orr.w	r2, r3, #2
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff ff50 	bl	8005d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d136      	bne.n	8005ef6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d109      	bne.n	8005ea6 <I2S_IRQHandler+0xbc>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9c:	2b80      	cmp	r3, #128	; 0x80
 8005e9e:	d102      	bne.n	8005ea6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff45 	bl	8005d30 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d122      	bne.n	8005ef6 <I2S_IRQHandler+0x10c>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d11b      	bne.n	8005ef6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ecc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee8:	f043 0204 	orr.w	r2, r3, #4
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff ff13 	bl	8005d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a92      	ldr	r2, [pc, #584]	; (8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d101      	bne.n	8005f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005f1a:	4b92      	ldr	r3, [pc, #584]	; (8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f1c:	e001      	b.n	8005f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005f1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a8b      	ldr	r2, [pc, #556]	; (8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d101      	bne.n	8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005f38:	4b8a      	ldr	r3, [pc, #552]	; (8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f3a:	e001      	b.n	8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4c:	d004      	beq.n	8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 8099 	bne.w	800608a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d107      	bne.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f925 	bl	80061bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d107      	bne.n	8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f9c8 	bl	800631c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f92:	2b40      	cmp	r3, #64	; 0x40
 8005f94:	d13a      	bne.n	800600c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d035      	beq.n	800600c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a6e      	ldr	r2, [pc, #440]	; (8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d101      	bne.n	8005fae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005faa:	4b6e      	ldr	r3, [pc, #440]	; (8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fac:	e001      	b.n	8005fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4969      	ldr	r1, [pc, #420]	; (8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fba:	428b      	cmp	r3, r1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005fbe:	4b69      	ldr	r3, [pc, #420]	; (8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fc0:	e001      	b.n	8005fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fda:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	f043 0202 	orr.w	r2, r3, #2
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff fe88 	bl	8005d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b08      	cmp	r3, #8
 8006014:	f040 80c3 	bne.w	800619e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80bd 	beq.w	800619e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006032:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a49      	ldr	r2, [pc, #292]	; (8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d101      	bne.n	8006042 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800603e:	4b49      	ldr	r3, [pc, #292]	; (8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006040:	e001      	b.n	8006046 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006042:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4944      	ldr	r1, [pc, #272]	; (8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800604e:	428b      	cmp	r3, r1
 8006050:	d101      	bne.n	8006056 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006052:	4b44      	ldr	r3, [pc, #272]	; (8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006054:	e001      	b.n	800605a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800605a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800605e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006060:	2300      	movs	r3, #0
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607a:	f043 0204 	orr.w	r2, r3, #4
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fe4a 	bl	8005d1c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006088:	e089      	b.n	800619e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d107      	bne.n	80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f8be 	bl	8006220 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d107      	bne.n	80060be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f8fd 	bl	80062b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d12f      	bne.n	8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d02a      	beq.n	8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d101      	bne.n	80060f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80060ec:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060ee:	e001      	b.n	80060f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80060f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4919      	ldr	r1, [pc, #100]	; (8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060fc:	428b      	cmp	r3, r1
 80060fe:	d101      	bne.n	8006104 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006100:	4b18      	ldr	r3, [pc, #96]	; (8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006102:	e001      	b.n	8006108 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006108:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800610c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	f043 0202 	orr.w	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fdfa 	bl	8005d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f003 0308 	and.w	r3, r3, #8
 800612e:	2b08      	cmp	r3, #8
 8006130:	d136      	bne.n	80061a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d031      	beq.n	80061a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a07      	ldr	r2, [pc, #28]	; (8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d101      	bne.n	800614a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006146:	4b07      	ldr	r3, [pc, #28]	; (8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006148:	e001      	b.n	800614e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800614a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4902      	ldr	r1, [pc, #8]	; (8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006156:	428b      	cmp	r3, r1
 8006158:	d106      	bne.n	8006168 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800615a:	4b02      	ldr	r3, [pc, #8]	; (8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800615c:	e006      	b.n	800616c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800615e:	bf00      	nop
 8006160:	40003800 	.word	0x40003800
 8006164:	40003400 	.word	0x40003400
 8006168:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800616c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006170:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006180:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618e:	f043 0204 	orr.w	r2, r3, #4
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fdc0 	bl	8005d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800619c:	e000      	b.n	80061a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800619e:	bf00      	nop
}
 80061a0:	bf00      	nop
 80061a2:	3720      	adds	r7, #32
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	1c99      	adds	r1, r3, #2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6251      	str	r1, [r2, #36]	; 0x24
 80061ce:	881a      	ldrh	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d113      	bne.n	8006216 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff ffc9 	bl	80061a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	1c99      	adds	r1, r3, #2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6251      	str	r1, [r2, #36]	; 0x24
 8006232:	8819      	ldrh	r1, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <I2SEx_TxISR_I2SExt+0x90>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d101      	bne.n	8006242 <I2SEx_TxISR_I2SExt+0x22>
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <I2SEx_TxISR_I2SExt+0x94>)
 8006240:	e001      	b.n	8006246 <I2SEx_TxISR_I2SExt+0x26>
 8006242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006246:	460a      	mov	r2, r1
 8006248:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d121      	bne.n	80062a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a12      	ldr	r2, [pc, #72]	; (80062b0 <I2SEx_TxISR_I2SExt+0x90>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d101      	bne.n	8006270 <I2SEx_TxISR_I2SExt+0x50>
 800626c:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <I2SEx_TxISR_I2SExt+0x94>)
 800626e:	e001      	b.n	8006274 <I2SEx_TxISR_I2SExt+0x54>
 8006270:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	490d      	ldr	r1, [pc, #52]	; (80062b0 <I2SEx_TxISR_I2SExt+0x90>)
 800627c:	428b      	cmp	r3, r1
 800627e:	d101      	bne.n	8006284 <I2SEx_TxISR_I2SExt+0x64>
 8006280:	4b0c      	ldr	r3, [pc, #48]	; (80062b4 <I2SEx_TxISR_I2SExt+0x94>)
 8006282:	e001      	b.n	8006288 <I2SEx_TxISR_I2SExt+0x68>
 8006284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006288:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800628c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ff81 	bl	80061a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	40003800 	.word	0x40003800
 80062b4:	40003400 	.word	0x40003400

080062b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68d8      	ldr	r0, [r3, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	1c99      	adds	r1, r3, #2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	62d1      	str	r1, [r2, #44]	; 0x2c
 80062d0:	b282      	uxth	r2, r0
 80062d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d113      	bne.n	8006314 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff ff4a 	bl	80061a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006314:	bf00      	nop
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a20      	ldr	r2, [pc, #128]	; (80063ac <I2SEx_RxISR_I2SExt+0x90>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d101      	bne.n	8006332 <I2SEx_RxISR_I2SExt+0x16>
 800632e:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <I2SEx_RxISR_I2SExt+0x94>)
 8006330:	e001      	b.n	8006336 <I2SEx_RxISR_I2SExt+0x1a>
 8006332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006336:	68d8      	ldr	r0, [r3, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	1c99      	adds	r1, r3, #2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006342:	b282      	uxth	r2, r0
 8006344:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d121      	bne.n	80063a2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a12      	ldr	r2, [pc, #72]	; (80063ac <I2SEx_RxISR_I2SExt+0x90>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d101      	bne.n	800636c <I2SEx_RxISR_I2SExt+0x50>
 8006368:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <I2SEx_RxISR_I2SExt+0x94>)
 800636a:	e001      	b.n	8006370 <I2SEx_RxISR_I2SExt+0x54>
 800636c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	490d      	ldr	r1, [pc, #52]	; (80063ac <I2SEx_RxISR_I2SExt+0x90>)
 8006378:	428b      	cmp	r3, r1
 800637a:	d101      	bne.n	8006380 <I2SEx_RxISR_I2SExt+0x64>
 800637c:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <I2SEx_RxISR_I2SExt+0x94>)
 800637e:	e001      	b.n	8006384 <I2SEx_RxISR_I2SExt+0x68>
 8006380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006384:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006388:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d106      	bne.n	80063a2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff ff03 	bl	80061a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40003800 	.word	0x40003800
 80063b0:	40003400 	.word	0x40003400

080063b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e267      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d075      	beq.n	80064be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063d2:	4b88      	ldr	r3, [pc, #544]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 030c 	and.w	r3, r3, #12
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d00c      	beq.n	80063f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063de:	4b85      	ldr	r3, [pc, #532]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d112      	bne.n	8006410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ea:	4b82      	ldr	r3, [pc, #520]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063f6:	d10b      	bne.n	8006410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f8:	4b7e      	ldr	r3, [pc, #504]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d05b      	beq.n	80064bc <HAL_RCC_OscConfig+0x108>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d157      	bne.n	80064bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e242      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006418:	d106      	bne.n	8006428 <HAL_RCC_OscConfig+0x74>
 800641a:	4b76      	ldr	r3, [pc, #472]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a75      	ldr	r2, [pc, #468]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	e01d      	b.n	8006464 <HAL_RCC_OscConfig+0xb0>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006430:	d10c      	bne.n	800644c <HAL_RCC_OscConfig+0x98>
 8006432:	4b70      	ldr	r3, [pc, #448]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a6f      	ldr	r2, [pc, #444]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	4b6d      	ldr	r3, [pc, #436]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a6c      	ldr	r2, [pc, #432]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e00b      	b.n	8006464 <HAL_RCC_OscConfig+0xb0>
 800644c:	4b69      	ldr	r3, [pc, #420]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a68      	ldr	r2, [pc, #416]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	4b66      	ldr	r3, [pc, #408]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a65      	ldr	r2, [pc, #404]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 800645e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d013      	beq.n	8006494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646c:	f7fc f9aa 	bl	80027c4 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006474:	f7fc f9a6 	bl	80027c4 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b64      	cmp	r3, #100	; 0x64
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e207      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006486:	4b5b      	ldr	r3, [pc, #364]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0xc0>
 8006492:	e014      	b.n	80064be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fc f996 	bl	80027c4 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800649c:	f7fc f992 	bl	80027c4 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	; 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e1f3      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ae:	4b51      	ldr	r3, [pc, #324]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0xe8>
 80064ba:	e000      	b.n	80064be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d063      	beq.n	8006592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064ca:	4b4a      	ldr	r3, [pc, #296]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 030c 	and.w	r3, r3, #12
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00b      	beq.n	80064ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064d6:	4b47      	ldr	r3, [pc, #284]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d11c      	bne.n	800651c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064e2:	4b44      	ldr	r3, [pc, #272]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d116      	bne.n	800651c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ee:	4b41      	ldr	r3, [pc, #260]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_RCC_OscConfig+0x152>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d001      	beq.n	8006506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e1c7      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006506:	4b3b      	ldr	r3, [pc, #236]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4937      	ldr	r1, [pc, #220]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006516:	4313      	orrs	r3, r2
 8006518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800651a:	e03a      	b.n	8006592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d020      	beq.n	8006566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006524:	4b34      	ldr	r3, [pc, #208]	; (80065f8 <HAL_RCC_OscConfig+0x244>)
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652a:	f7fc f94b 	bl	80027c4 <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006532:	f7fc f947 	bl	80027c4 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e1a8      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006544:	4b2b      	ldr	r3, [pc, #172]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0f0      	beq.n	8006532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006550:	4b28      	ldr	r3, [pc, #160]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4925      	ldr	r1, [pc, #148]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006560:	4313      	orrs	r3, r2
 8006562:	600b      	str	r3, [r1, #0]
 8006564:	e015      	b.n	8006592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006566:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <HAL_RCC_OscConfig+0x244>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656c:	f7fc f92a 	bl	80027c4 <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006574:	f7fc f926 	bl	80027c4 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e187      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006586:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0308 	and.w	r3, r3, #8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d036      	beq.n	800660c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d016      	beq.n	80065d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <HAL_RCC_OscConfig+0x248>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fc f90a 	bl	80027c4 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b4:	f7fc f906 	bl	80027c4 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e167      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065c6:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80065c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0x200>
 80065d2:	e01b      	b.n	800660c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d4:	4b09      	ldr	r3, [pc, #36]	; (80065fc <HAL_RCC_OscConfig+0x248>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065da:	f7fc f8f3 	bl	80027c4 <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e0:	e00e      	b.n	8006600 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e2:	f7fc f8ef 	bl	80027c4 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d907      	bls.n	8006600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e150      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
 80065f4:	40023800 	.word	0x40023800
 80065f8:	42470000 	.word	0x42470000
 80065fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006600:	4b88      	ldr	r3, [pc, #544]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1ea      	bne.n	80065e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8097 	beq.w	8006748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800661a:	2300      	movs	r3, #0
 800661c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800661e:	4b81      	ldr	r3, [pc, #516]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10f      	bne.n	800664a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	4b7d      	ldr	r3, [pc, #500]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	4a7c      	ldr	r2, [pc, #496]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006638:	6413      	str	r3, [r2, #64]	; 0x40
 800663a:	4b7a      	ldr	r3, [pc, #488]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006646:	2301      	movs	r3, #1
 8006648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664a:	4b77      	ldr	r3, [pc, #476]	; (8006828 <HAL_RCC_OscConfig+0x474>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	2b00      	cmp	r3, #0
 8006654:	d118      	bne.n	8006688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006656:	4b74      	ldr	r3, [pc, #464]	; (8006828 <HAL_RCC_OscConfig+0x474>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a73      	ldr	r2, [pc, #460]	; (8006828 <HAL_RCC_OscConfig+0x474>)
 800665c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006662:	f7fc f8af 	bl	80027c4 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800666a:	f7fc f8ab 	bl	80027c4 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e10c      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800667c:	4b6a      	ldr	r3, [pc, #424]	; (8006828 <HAL_RCC_OscConfig+0x474>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0f0      	beq.n	800666a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d106      	bne.n	800669e <HAL_RCC_OscConfig+0x2ea>
 8006690:	4b64      	ldr	r3, [pc, #400]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006694:	4a63      	ldr	r2, [pc, #396]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	6713      	str	r3, [r2, #112]	; 0x70
 800669c:	e01c      	b.n	80066d8 <HAL_RCC_OscConfig+0x324>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b05      	cmp	r3, #5
 80066a4:	d10c      	bne.n	80066c0 <HAL_RCC_OscConfig+0x30c>
 80066a6:	4b5f      	ldr	r3, [pc, #380]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	4a5e      	ldr	r2, [pc, #376]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066ac:	f043 0304 	orr.w	r3, r3, #4
 80066b0:	6713      	str	r3, [r2, #112]	; 0x70
 80066b2:	4b5c      	ldr	r3, [pc, #368]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	4a5b      	ldr	r2, [pc, #364]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066b8:	f043 0301 	orr.w	r3, r3, #1
 80066bc:	6713      	str	r3, [r2, #112]	; 0x70
 80066be:	e00b      	b.n	80066d8 <HAL_RCC_OscConfig+0x324>
 80066c0:	4b58      	ldr	r3, [pc, #352]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c4:	4a57      	ldr	r2, [pc, #348]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	6713      	str	r3, [r2, #112]	; 0x70
 80066cc:	4b55      	ldr	r3, [pc, #340]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d0:	4a54      	ldr	r2, [pc, #336]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066d2:	f023 0304 	bic.w	r3, r3, #4
 80066d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d015      	beq.n	800670c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e0:	f7fc f870 	bl	80027c4 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e6:	e00a      	b.n	80066fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e8:	f7fc f86c 	bl	80027c4 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e0cb      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066fe:	4b49      	ldr	r3, [pc, #292]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0ee      	beq.n	80066e8 <HAL_RCC_OscConfig+0x334>
 800670a:	e014      	b.n	8006736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800670c:	f7fc f85a 	bl	80027c4 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006712:	e00a      	b.n	800672a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006714:	f7fc f856 	bl	80027c4 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006722:	4293      	cmp	r3, r2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e0b5      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800672a:	4b3e      	ldr	r3, [pc, #248]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1ee      	bne.n	8006714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d105      	bne.n	8006748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800673c:	4b39      	ldr	r3, [pc, #228]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 800673e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006740:	4a38      	ldr	r2, [pc, #224]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006746:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80a1 	beq.w	8006894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006752:	4b34      	ldr	r3, [pc, #208]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 030c 	and.w	r3, r3, #12
 800675a:	2b08      	cmp	r3, #8
 800675c:	d05c      	beq.n	8006818 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d141      	bne.n	80067ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006766:	4b31      	ldr	r3, [pc, #196]	; (800682c <HAL_RCC_OscConfig+0x478>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800676c:	f7fc f82a 	bl	80027c4 <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006774:	f7fc f826 	bl	80027c4 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e087      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006786:	4b27      	ldr	r3, [pc, #156]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f0      	bne.n	8006774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69da      	ldr	r2, [r3, #28]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	019b      	lsls	r3, r3, #6
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	3b01      	subs	r3, #1
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	061b      	lsls	r3, r3, #24
 80067b6:	491b      	ldr	r1, [pc, #108]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <HAL_RCC_OscConfig+0x478>)
 80067be:	2201      	movs	r2, #1
 80067c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c2:	f7fb ffff 	bl	80027c4 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c8:	e008      	b.n	80067dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ca:	f7fb fffb 	bl	80027c4 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e05c      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067dc:	4b11      	ldr	r3, [pc, #68]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0f0      	beq.n	80067ca <HAL_RCC_OscConfig+0x416>
 80067e8:	e054      	b.n	8006894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ea:	4b10      	ldr	r3, [pc, #64]	; (800682c <HAL_RCC_OscConfig+0x478>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f0:	f7fb ffe8 	bl	80027c4 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f8:	f7fb ffe4 	bl	80027c4 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e045      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800680a:	4b06      	ldr	r3, [pc, #24]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f0      	bne.n	80067f8 <HAL_RCC_OscConfig+0x444>
 8006816:	e03d      	b.n	8006894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d107      	bne.n	8006830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e038      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
 8006824:	40023800 	.word	0x40023800
 8006828:	40007000 	.word	0x40007000
 800682c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006830:	4b1b      	ldr	r3, [pc, #108]	; (80068a0 <HAL_RCC_OscConfig+0x4ec>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d028      	beq.n	8006890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006848:	429a      	cmp	r2, r3
 800684a:	d121      	bne.n	8006890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006856:	429a      	cmp	r2, r3
 8006858:	d11a      	bne.n	8006890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006860:	4013      	ands	r3, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006868:	4293      	cmp	r3, r2
 800686a:	d111      	bne.n	8006890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	3b01      	subs	r3, #1
 800687a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800687c:	429a      	cmp	r2, r3
 800687e:	d107      	bne.n	8006890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800688c:	429a      	cmp	r2, r3
 800688e:	d001      	beq.n	8006894 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40023800 	.word	0x40023800

080068a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0cc      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068b8:	4b68      	ldr	r3, [pc, #416]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d90c      	bls.n	80068e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c6:	4b65      	ldr	r3, [pc, #404]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b63      	ldr	r3, [pc, #396]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0b8      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d020      	beq.n	800692e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068f8:	4b59      	ldr	r3, [pc, #356]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	4a58      	ldr	r2, [pc, #352]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006910:	4b53      	ldr	r3, [pc, #332]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	4a52      	ldr	r2, [pc, #328]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800691a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800691c:	4b50      	ldr	r3, [pc, #320]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	494d      	ldr	r1, [pc, #308]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 800692a:	4313      	orrs	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d044      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d107      	bne.n	8006952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006942:	4b47      	ldr	r3, [pc, #284]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d119      	bne.n	8006982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e07f      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d003      	beq.n	8006962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800695e:	2b03      	cmp	r3, #3
 8006960:	d107      	bne.n	8006972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006962:	4b3f      	ldr	r3, [pc, #252]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e06f      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006972:	4b3b      	ldr	r3, [pc, #236]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e067      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006982:	4b37      	ldr	r3, [pc, #220]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f023 0203 	bic.w	r2, r3, #3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4934      	ldr	r1, [pc, #208]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006990:	4313      	orrs	r3, r2
 8006992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006994:	f7fb ff16 	bl	80027c4 <HAL_GetTick>
 8006998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699a:	e00a      	b.n	80069b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800699c:	f7fb ff12 	bl	80027c4 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e04f      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b2:	4b2b      	ldr	r3, [pc, #172]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 020c 	and.w	r2, r3, #12
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d1eb      	bne.n	800699c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069c4:	4b25      	ldr	r3, [pc, #148]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d20c      	bcs.n	80069ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d2:	4b22      	ldr	r3, [pc, #136]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069da:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d001      	beq.n	80069ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e032      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f8:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4916      	ldr	r1, [pc, #88]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d009      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a16:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	490e      	ldr	r1, [pc, #56]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a2a:	f000 f821 	bl	8006a70 <HAL_RCC_GetSysClockFreq>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	490a      	ldr	r1, [pc, #40]	; (8006a64 <HAL_RCC_ClockConfig+0x1c0>)
 8006a3c:	5ccb      	ldrb	r3, [r1, r3]
 8006a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a42:	4a09      	ldr	r2, [pc, #36]	; (8006a68 <HAL_RCC_ClockConfig+0x1c4>)
 8006a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a46:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <HAL_RCC_ClockConfig+0x1c8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fb fe76 	bl	800273c <HAL_InitTick>

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40023c00 	.word	0x40023c00
 8006a60:	40023800 	.word	0x40023800
 8006a64:	0800f450 	.word	0x0800f450
 8006a68:	20000000 	.word	0x20000000
 8006a6c:	20000004 	.word	0x20000004

08006a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a74:	b094      	sub	sp, #80	; 0x50
 8006a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a80:	2300      	movs	r3, #0
 8006a82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a88:	4b79      	ldr	r3, [pc, #484]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 030c 	and.w	r3, r3, #12
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d00d      	beq.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	f200 80e1 	bhi.w	8006c5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8006aa2:	e0db      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006aa4:	4b73      	ldr	r3, [pc, #460]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8006aa6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006aa8:	e0db      	b.n	8006c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006aaa:	4b73      	ldr	r3, [pc, #460]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x208>)
 8006aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aae:	e0d8      	b.n	8006c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ab0:	4b6f      	ldr	r3, [pc, #444]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ab8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aba:	4b6d      	ldr	r3, [pc, #436]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d063      	beq.n	8006b8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ac6:	4b6a      	ldr	r3, [pc, #424]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	099b      	lsrs	r3, r3, #6
 8006acc:	2200      	movs	r2, #0
 8006ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ad0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8006ada:	2300      	movs	r3, #0
 8006adc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ade:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	f04f 0000 	mov.w	r0, #0
 8006aea:	f04f 0100 	mov.w	r1, #0
 8006aee:	0159      	lsls	r1, r3, #5
 8006af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006af4:	0150      	lsls	r0, r2, #5
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4621      	mov	r1, r4
 8006afc:	1a51      	subs	r1, r2, r1
 8006afe:	6139      	str	r1, [r7, #16]
 8006b00:	4629      	mov	r1, r5
 8006b02:	eb63 0301 	sbc.w	r3, r3, r1
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b14:	4659      	mov	r1, fp
 8006b16:	018b      	lsls	r3, r1, #6
 8006b18:	4651      	mov	r1, sl
 8006b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b1e:	4651      	mov	r1, sl
 8006b20:	018a      	lsls	r2, r1, #6
 8006b22:	4651      	mov	r1, sl
 8006b24:	ebb2 0801 	subs.w	r8, r2, r1
 8006b28:	4659      	mov	r1, fp
 8006b2a:	eb63 0901 	sbc.w	r9, r3, r1
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b42:	4690      	mov	r8, r2
 8006b44:	4699      	mov	r9, r3
 8006b46:	4623      	mov	r3, r4
 8006b48:	eb18 0303 	adds.w	r3, r8, r3
 8006b4c:	60bb      	str	r3, [r7, #8]
 8006b4e:	462b      	mov	r3, r5
 8006b50:	eb49 0303 	adc.w	r3, r9, r3
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b62:	4629      	mov	r1, r5
 8006b64:	024b      	lsls	r3, r1, #9
 8006b66:	4621      	mov	r1, r4
 8006b68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	024a      	lsls	r2, r1, #9
 8006b70:	4610      	mov	r0, r2
 8006b72:	4619      	mov	r1, r3
 8006b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b76:	2200      	movs	r2, #0
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b80:	f7fa f812 	bl	8000ba8 <__aeabi_uldivmod>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4613      	mov	r3, r2
 8006b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b8c:	e058      	b.n	8006c40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b8e:	4b38      	ldr	r3, [pc, #224]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	099b      	lsrs	r3, r3, #6
 8006b94:	2200      	movs	r2, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	4611      	mov	r1, r2
 8006b9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b9e:	623b      	str	r3, [r7, #32]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ba8:	4642      	mov	r2, r8
 8006baa:	464b      	mov	r3, r9
 8006bac:	f04f 0000 	mov.w	r0, #0
 8006bb0:	f04f 0100 	mov.w	r1, #0
 8006bb4:	0159      	lsls	r1, r3, #5
 8006bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bba:	0150      	lsls	r0, r2, #5
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	f04f 0300 	mov.w	r3, #0
 8006bd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006bd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006bdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006be0:	ebb2 040a 	subs.w	r4, r2, sl
 8006be4:	eb63 050b 	sbc.w	r5, r3, fp
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	00eb      	lsls	r3, r5, #3
 8006bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bf6:	00e2      	lsls	r2, r4, #3
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	461d      	mov	r5, r3
 8006bfc:	4643      	mov	r3, r8
 8006bfe:	18e3      	adds	r3, r4, r3
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	464b      	mov	r3, r9
 8006c04:	eb45 0303 	adc.w	r3, r5, r3
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c16:	4629      	mov	r1, r5
 8006c18:	028b      	lsls	r3, r1, #10
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c20:	4621      	mov	r1, r4
 8006c22:	028a      	lsls	r2, r1, #10
 8006c24:	4610      	mov	r0, r2
 8006c26:	4619      	mov	r1, r3
 8006c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	61fa      	str	r2, [r7, #28]
 8006c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c34:	f7f9 ffb8 	bl	8000ba8 <__aeabi_uldivmod>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c40:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	0c1b      	lsrs	r3, r3, #16
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c5a:	e002      	b.n	8006c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3750      	adds	r7, #80	; 0x50
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c6e:	bf00      	nop
 8006c70:	40023800 	.word	0x40023800
 8006c74:	00f42400 	.word	0x00f42400
 8006c78:	007a1200 	.word	0x007a1200

08006c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c80:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c82:	681b      	ldr	r3, [r3, #0]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000000 	.word	0x20000000

08006c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c98:	f7ff fff0 	bl	8006c7c <HAL_RCC_GetHCLKFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	0a9b      	lsrs	r3, r3, #10
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	4903      	ldr	r1, [pc, #12]	; (8006cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006caa:	5ccb      	ldrb	r3, [r1, r3]
 8006cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	0800f460 	.word	0x0800f460

08006cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cc0:	f7ff ffdc 	bl	8006c7c <HAL_RCC_GetHCLKFreq>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	0b5b      	lsrs	r3, r3, #13
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	4903      	ldr	r1, [pc, #12]	; (8006ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd2:	5ccb      	ldrb	r3, [r1, r3]
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	0800f460 	.word	0x0800f460

08006ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d035      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d0c:	4b62      	ldr	r3, [pc, #392]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d12:	f7fb fd57 	bl	80027c4 <HAL_GetTick>
 8006d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d18:	e008      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d1a:	f7fb fd53 	bl	80027c4 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e0b0      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d2c:	4b5b      	ldr	r3, [pc, #364]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1f0      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	019a      	lsls	r2, r3, #6
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	071b      	lsls	r3, r3, #28
 8006d44:	4955      	ldr	r1, [pc, #340]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d4c:	4b52      	ldr	r3, [pc, #328]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d52:	f7fb fd37 	bl	80027c4 <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d58:	e008      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d5a:	f7fb fd33 	bl	80027c4 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e090      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d6c:	4b4b      	ldr	r3, [pc, #300]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0f0      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 8083 	beq.w	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	4b44      	ldr	r3, [pc, #272]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	4a43      	ldr	r2, [pc, #268]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d94:	6413      	str	r3, [r2, #64]	; 0x40
 8006d96:	4b41      	ldr	r3, [pc, #260]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006da2:	4b3f      	ldr	r3, [pc, #252]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a3e      	ldr	r2, [pc, #248]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dae:	f7fb fd09 	bl	80027c4 <HAL_GetTick>
 8006db2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006db4:	e008      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006db6:	f7fb fd05 	bl	80027c4 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e062      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006dc8:	4b35      	ldr	r3, [pc, #212]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0f0      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dd4:	4b31      	ldr	r3, [pc, #196]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ddc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d02f      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d028      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006df2:	4b2a      	ldr	r3, [pc, #168]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dfc:	4b29      	ldr	r3, [pc, #164]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e02:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e08:	4a24      	ldr	r2, [pc, #144]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e0e:	4b23      	ldr	r3, [pc, #140]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d114      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e1a:	f7fb fcd3 	bl	80027c4 <HAL_GetTick>
 8006e1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e20:	e00a      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e22:	f7fb fccf 	bl	80027c4 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e02a      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e38:	4b18      	ldr	r3, [pc, #96]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0ee      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e50:	d10d      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e52:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e66:	490d      	ldr	r1, [pc, #52]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	608b      	str	r3, [r1, #8]
 8006e6c:	e005      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e78:	6093      	str	r3, [r2, #8]
 8006e7a:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e86:	4905      	ldr	r1, [pc, #20]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	42470068 	.word	0x42470068
 8006e9c:	40023800 	.word	0x40023800
 8006ea0:	40007000 	.word	0x40007000
 8006ea4:	42470e40 	.word	0x42470e40

08006ea8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d13f      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ec6:	4b24      	ldr	r3, [pc, #144]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d006      	beq.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006edc:	d12f      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ede:	4b1f      	ldr	r3, [pc, #124]	; (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006ee0:	617b      	str	r3, [r7, #20]
          break;
 8006ee2:	e02f      	b.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ee4:	4b1c      	ldr	r3, [pc, #112]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ef0:	d108      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ef2:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006efa:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	e007      	b.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f04:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f0c:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f12:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f14:	4b10      	ldr	r3, [pc, #64]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f1a:	099b      	lsrs	r3, r3, #6
 8006f1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
 8006f26:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2e:	0f1b      	lsrs	r3, r3, #28
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3a:	617b      	str	r3, [r7, #20]
          break;
 8006f3c:	e002      	b.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]
          break;
 8006f42:	bf00      	nop
        }
      }
      break;
 8006f44:	e000      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8006f46:	bf00      	nop
    }
  }
  return frequency;
 8006f48:	697b      	ldr	r3, [r7, #20]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	00bb8000 	.word	0x00bb8000
 8006f60:	007a1200 	.word	0x007a1200
 8006f64:	00f42400 	.word	0x00f42400

08006f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e07b      	b.n	8007072 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d108      	bne.n	8006f94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f8a:	d009      	beq.n	8006fa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	61da      	str	r2, [r3, #28]
 8006f92:	e005      	b.n	8006fa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fb f91e 	bl	80021fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007024:	ea42 0103 	orr.w	r1, r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	0c1b      	lsrs	r3, r3, #16
 800703e:	f003 0104 	and.w	r1, r3, #4
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	f003 0210 	and.w	r2, r3, #16
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69da      	ldr	r2, [r3, #28]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007060:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b01      	cmp	r3, #1
 8007098:	d002      	beq.n	80070a0 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800709a:	2302      	movs	r3, #2
 800709c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800709e:	e0a2      	b.n	80071e6 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d110      	bne.n	80070ca <HAL_SPI_Receive_DMA+0x4e>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070b0:	d10b      	bne.n	80070ca <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2204      	movs	r2, #4
 80070b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f89f 	bl	8007204 <HAL_SPI_TransmitReceive_DMA>
 80070c6:	4603      	mov	r3, r0
 80070c8:	e092      	b.n	80071f0 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_SPI_Receive_DMA+0x5c>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e08b      	b.n	80071f0 <HAL_SPI_Receive_DMA+0x174>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_SPI_Receive_DMA+0x70>
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070f0:	e079      	b.n	80071e6 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2204      	movs	r2, #4
 80070f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	88fa      	ldrh	r2, [r7, #6]
 800710a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	88fa      	ldrh	r2, [r7, #6]
 8007110:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007132:	d10f      	bne.n	8007154 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007142:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007152:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	4a27      	ldr	r2, [pc, #156]	; (80071f8 <HAL_SPI_Receive_DMA+0x17c>)
 800715a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007160:	4a26      	ldr	r2, [pc, #152]	; (80071fc <HAL_SPI_Receive_DMA+0x180>)
 8007162:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007168:	4a25      	ldr	r2, [pc, #148]	; (8007200 <HAL_SPI_Receive_DMA+0x184>)
 800716a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007170:	2200      	movs	r2, #0
 8007172:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	4619      	mov	r1, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800718c:	f7fb fd0a 	bl	8002ba4 <HAL_DMA_Start_IT>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d008      	beq.n	80071a8 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719a:	f043 0210 	orr.w	r2, r3, #16
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	75fb      	strb	r3, [r7, #23]

    goto error;
 80071a6:	e01e      	b.n	80071e6 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b40      	cmp	r3, #64	; 0x40
 80071b4:	d007      	beq.n	80071c6 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0220 	orr.w	r2, r2, #32
 80071d4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0201 	orr.w	r2, r2, #1
 80071e4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	08007755 	.word	0x08007755
 80071fc:	0800761d 	.word	0x0800761d
 8007200:	0800778d 	.word	0x0800778d

08007204 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007220:	2302      	movs	r3, #2
 8007222:	e0db      	b.n	80073dc <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007232:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800723a:	7dbb      	ldrb	r3, [r7, #22]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d00d      	beq.n	800725c <HAL_SPI_TransmitReceive_DMA+0x58>
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007246:	d106      	bne.n	8007256 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <HAL_SPI_TransmitReceive_DMA+0x52>
 8007250:	7dbb      	ldrb	r3, [r7, #22]
 8007252:	2b04      	cmp	r3, #4
 8007254:	d002      	beq.n	800725c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007256:	2302      	movs	r3, #2
 8007258:	75fb      	strb	r3, [r7, #23]
    goto error;
 800725a:	e0ba      	b.n	80073d2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d005      	beq.n	800726e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007268:	887b      	ldrh	r3, [r7, #2]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007272:	e0ae      	b.n	80073d2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b04      	cmp	r3, #4
 800727e:	d003      	beq.n	8007288 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2205      	movs	r2, #5
 8007284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	887a      	ldrh	r2, [r7, #2]
 8007298:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	887a      	ldrh	r2, [r7, #2]
 800729e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	887a      	ldrh	r2, [r7, #2]
 80072aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	887a      	ldrh	r2, [r7, #2]
 80072b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d108      	bne.n	80072dc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ce:	4a45      	ldr	r2, [pc, #276]	; (80073e4 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d6:	4a44      	ldr	r2, [pc, #272]	; (80073e8 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80072d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80072da:	e007      	b.n	80072ec <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e0:	4a42      	ldr	r2, [pc, #264]	; (80073ec <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80072e2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e8:	4a41      	ldr	r2, [pc, #260]	; (80073f0 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80072ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f0:	4a40      	ldr	r2, [pc, #256]	; (80073f4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80072f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f8:	2200      	movs	r2, #0
 80072fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	330c      	adds	r3, #12
 8007306:	4619      	mov	r1, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007312:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007314:	f7fb fc46 	bl	8002ba4 <HAL_DMA_Start_IT>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d008      	beq.n	8007330 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	f043 0210 	orr.w	r2, r3, #16
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800732e:	e050      	b.n	80073d2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0201 	orr.w	r2, r2, #1
 800733e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007344:	2200      	movs	r2, #0
 8007346:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734c:	2200      	movs	r2, #0
 800734e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007354:	2200      	movs	r2, #0
 8007356:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735c:	2200      	movs	r2, #0
 800735e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	4619      	mov	r1, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007376:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007378:	f7fb fc14 	bl	8002ba4 <HAL_DMA_Start_IT>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d008      	beq.n	8007394 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007386:	f043 0210 	orr.w	r2, r3, #16
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007392:	e01e      	b.n	80073d2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d007      	beq.n	80073b2 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0220 	orr.w	r2, r2, #32
 80073c0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0202 	orr.w	r2, r2, #2
 80073d0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073da:	7dfb      	ldrb	r3, [r7, #23]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	08007755 	.word	0x08007755
 80073e8:	0800761d 	.word	0x0800761d
 80073ec:	08007771 	.word	0x08007771
 80073f0:	080076c5 	.word	0x080076c5
 80073f4:	0800778d 	.word	0x0800778d

080073f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10e      	bne.n	8007438 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007420:	2b00      	cmp	r3, #0
 8007422:	d009      	beq.n	8007438 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
    return;
 8007436:	e0ce      	b.n	80075d6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d009      	beq.n	8007456 <HAL_SPI_IRQHandler+0x5e>
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
    return;
 8007454:	e0bf      	b.n	80075d6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <HAL_SPI_IRQHandler+0x7e>
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80b0 	beq.w	80075d6 <HAL_SPI_IRQHandler+0x1de>
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 80aa 	beq.w	80075d6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d023      	beq.n	80074d4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b03      	cmp	r3, #3
 8007496:	d011      	beq.n	80074bc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749c:	f043 0204 	orr.w	r2, r3, #4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	e00b      	b.n	80074d4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
        return;
 80074d2:	e080      	b.n	80075d6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d014      	beq.n	8007508 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	f043 0201 	orr.w	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00c      	beq.n	800752c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007516:	f043 0208 	orr.w	r2, r3, #8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800751e:	2300      	movs	r3, #0
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007530:	2b00      	cmp	r3, #0
 8007532:	d04f      	beq.n	80075d4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007542:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d104      	bne.n	8007560 <HAL_SPI_IRQHandler+0x168>
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d034      	beq.n	80075ca <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0203 	bic.w	r2, r2, #3
 800756e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d011      	beq.n	800759c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757c:	4a17      	ldr	r2, [pc, #92]	; (80075dc <HAL_SPI_IRQHandler+0x1e4>)
 800757e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007584:	4618      	mov	r0, r3
 8007586:	f7fb fbd5 	bl	8002d34 <HAL_DMA_Abort_IT>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007594:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d016      	beq.n	80075d2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a8:	4a0c      	ldr	r2, [pc, #48]	; (80075dc <HAL_SPI_IRQHandler+0x1e4>)
 80075aa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fb fbbf 	bl	8002d34 <HAL_DMA_Abort_IT>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80075c8:	e003      	b.n	80075d2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7f9 fe8c 	bl	80012e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80075d0:	e000      	b.n	80075d4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80075d2:	bf00      	nop
    return;
 80075d4:	bf00      	nop
  }
}
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	080077cd 	.word	0x080077cd

080075e0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800762a:	f7fb f8cb 	bl	80027c4 <HAL_GetTick>
 800762e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800763e:	d03b      	beq.n	80076b8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0220 	bic.w	r2, r2, #32
 800764e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10d      	bne.n	8007674 <SPI_DMAReceiveCplt+0x58>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007660:	d108      	bne.n	8007674 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0203 	bic.w	r2, r2, #3
 8007670:	605a      	str	r2, [r3, #4]
 8007672:	e007      	b.n	8007684 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0201 	bic.w	r2, r2, #1
 8007682:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	2164      	movs	r1, #100	; 0x64
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f93b 	bl	8007904 <SPI_EndRxTransaction>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7f9 fe19 	bl	80012e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80076b6:	e002      	b.n	80076be <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7f9 fdab 	bl	8001214 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076d2:	f7fb f877 	bl	80027c4 <HAL_GetTick>
 80076d6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e6:	d02f      	beq.n	8007748 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0220 	bic.w	r2, r2, #32
 80076f6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	2164      	movs	r1, #100	; 0x64
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f967 	bl	80079d0 <SPI_EndRxTxTransaction>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770c:	f043 0220 	orr.w	r2, r3, #32
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0203 	bic.w	r2, r2, #3
 8007722:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7f9 fdd1 	bl	80012e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007746:	e002      	b.n	800774e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f7ff ff49 	bl	80075e0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7ff ff46 	bl	80075f4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff ff42 	bl	8007608 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007798:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0203 	bic.w	r2, r2, #3
 80077a8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	f043 0210 	orr.w	r2, r3, #16
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7f9 fd92 	bl	80012e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7f9 fd7e 	bl	80012e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4613      	mov	r3, r2
 8007802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007804:	f7fa ffde 	bl	80027c4 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	1a9b      	subs	r3, r3, r2
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	4413      	add	r3, r2
 8007812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007814:	f7fa ffd6 	bl	80027c4 <HAL_GetTick>
 8007818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800781a:	4b39      	ldr	r3, [pc, #228]	; (8007900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	015b      	lsls	r3, r3, #5
 8007820:	0d1b      	lsrs	r3, r3, #20
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	fb02 f303 	mul.w	r3, r2, r3
 8007828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800782a:	e054      	b.n	80078d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d050      	beq.n	80078d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007834:	f7fa ffc6 	bl	80027c4 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	429a      	cmp	r2, r3
 8007842:	d902      	bls.n	800784a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d13d      	bne.n	80078c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007862:	d111      	bne.n	8007888 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800786c:	d004      	beq.n	8007878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007876:	d107      	bne.n	8007888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007890:	d10f      	bne.n	80078b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e017      	b.n	80078f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4013      	ands	r3, r2
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	bf0c      	ite	eq
 80078e6:	2301      	moveq	r3, #1
 80078e8:	2300      	movne	r3, #0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d19b      	bne.n	800782c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3720      	adds	r7, #32
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000000 	.word	0x20000000

08007904 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af02      	add	r7, sp, #8
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007918:	d111      	bne.n	800793e <SPI_EndRxTransaction+0x3a>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007922:	d004      	beq.n	800792e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792c:	d107      	bne.n	800793e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007946:	d12a      	bne.n	800799e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007950:	d012      	beq.n	8007978 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2200      	movs	r2, #0
 800795a:	2180      	movs	r1, #128	; 0x80
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f7ff ff49 	bl	80077f4 <SPI_WaitFlagStateUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d02d      	beq.n	80079c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796c:	f043 0220 	orr.w	r2, r3, #32
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e026      	b.n	80079c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2200      	movs	r2, #0
 8007980:	2101      	movs	r1, #1
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f7ff ff36 	bl	80077f4 <SPI_WaitFlagStateUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01a      	beq.n	80079c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007992:	f043 0220 	orr.w	r2, r3, #32
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e013      	b.n	80079c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2200      	movs	r2, #0
 80079a6:	2101      	movs	r1, #1
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f7ff ff23 	bl	80077f4 <SPI_WaitFlagStateUntilTimeout>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d007      	beq.n	80079c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b8:	f043 0220 	orr.w	r2, r3, #32
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e000      	b.n	80079c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2201      	movs	r2, #1
 80079e4:	2102      	movs	r1, #2
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff ff04 	bl	80077f4 <SPI_WaitFlagStateUntilTimeout>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	f043 0220 	orr.w	r2, r3, #32
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e032      	b.n	8007a68 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a02:	4b1b      	ldr	r3, [pc, #108]	; (8007a70 <SPI_EndRxTxTransaction+0xa0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a1b      	ldr	r2, [pc, #108]	; (8007a74 <SPI_EndRxTxTransaction+0xa4>)
 8007a08:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0c:	0d5b      	lsrs	r3, r3, #21
 8007a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a12:	fb02 f303 	mul.w	r3, r2, r3
 8007a16:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a20:	d112      	bne.n	8007a48 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2180      	movs	r1, #128	; 0x80
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7ff fee1 	bl	80077f4 <SPI_WaitFlagStateUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d016      	beq.n	8007a66 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	f043 0220 	orr.w	r2, r3, #32
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e00f      	b.n	8007a68 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5e:	2b80      	cmp	r3, #128	; 0x80
 8007a60:	d0f2      	beq.n	8007a48 <SPI_EndRxTxTransaction+0x78>
 8007a62:	e000      	b.n	8007a66 <SPI_EndRxTxTransaction+0x96>
        break;
 8007a64:	bf00      	nop
  }

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000000 	.word	0x20000000
 8007a74:	165e9f81 	.word	0x165e9f81

08007a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e042      	b.n	8007b10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7fa fc2e 	bl	8002300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2224      	movs	r2, #36	; 0x24
 8007aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fdbd 	bl	800863c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	691a      	ldr	r2, [r3, #16]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695a      	ldr	r2, [r3, #20]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	; 0x28
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b20      	cmp	r3, #32
 8007b36:	d175      	bne.n	8007c24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <HAL_UART_Transmit+0x2c>
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e06e      	b.n	8007c26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2221      	movs	r2, #33	; 0x21
 8007b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b56:	f7fa fe35 	bl	80027c4 <HAL_GetTick>
 8007b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	88fa      	ldrh	r2, [r7, #6]
 8007b60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	88fa      	ldrh	r2, [r7, #6]
 8007b66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b70:	d108      	bne.n	8007b84 <HAL_UART_Transmit+0x6c>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	e003      	b.n	8007b8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b8c:	e02e      	b.n	8007bec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2200      	movs	r2, #0
 8007b96:	2180      	movs	r1, #128	; 0x80
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fb1f 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e03a      	b.n	8007c26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10b      	bne.n	8007bce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	3302      	adds	r3, #2
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	e007      	b.n	8007bde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	781a      	ldrb	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1cb      	bne.n	8007b8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2140      	movs	r1, #64	; 0x40
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 faeb 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e006      	b.n	8007c26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	e000      	b.n	8007c26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007c24:	2302      	movs	r3, #2
  }
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3720      	adds	r7, #32
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d112      	bne.n	8007c6e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <HAL_UART_Receive_IT+0x26>
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e00b      	b.n	8007c70 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	461a      	mov	r2, r3
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 fb12 	bl	800828e <UART_Start_Receive_IT>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	e000      	b.n	8007c70 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007c6e:	2302      	movs	r3, #2
  }
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b0ba      	sub	sp, #232	; 0xe8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cae:	f003 030f 	and.w	r3, r3, #15
 8007cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10f      	bne.n	8007cde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <HAL_UART_IRQHandler+0x66>
 8007cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fbf2 	bl	80084c0 <UART_Receive_IT>
      return;
 8007cdc:	e25b      	b.n	8008196 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80de 	beq.w	8007ea4 <HAL_UART_IRQHandler+0x22c>
 8007ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d106      	bne.n	8007d02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cf8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 80d1 	beq.w	8007ea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00b      	beq.n	8007d26 <HAL_UART_IRQHandler+0xae>
 8007d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d005      	beq.n	8007d26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1e:	f043 0201 	orr.w	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2a:	f003 0304 	and.w	r3, r3, #4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00b      	beq.n	8007d4a <HAL_UART_IRQHandler+0xd2>
 8007d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d005      	beq.n	8007d4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d42:	f043 0202 	orr.w	r2, r3, #2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <HAL_UART_IRQHandler+0xf6>
 8007d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d66:	f043 0204 	orr.w	r2, r3, #4
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d72:	f003 0308 	and.w	r3, r3, #8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d011      	beq.n	8007d9e <HAL_UART_IRQHandler+0x126>
 8007d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d105      	bne.n	8007d92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d96:	f043 0208 	orr.w	r2, r3, #8
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 81f2 	beq.w	800818c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d008      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x14e>
 8007db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fb7d 	bl	80084c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd0:	2b40      	cmp	r3, #64	; 0x40
 8007dd2:	bf0c      	ite	eq
 8007dd4:	2301      	moveq	r3, #1
 8007dd6:	2300      	movne	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <HAL_UART_IRQHandler+0x17a>
 8007dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d04f      	beq.n	8007e92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa85 	bl	8008302 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e02:	2b40      	cmp	r3, #64	; 0x40
 8007e04:	d141      	bne.n	8007e8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3314      	adds	r3, #20
 8007e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3314      	adds	r3, #20
 8007e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1d9      	bne.n	8007e06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d013      	beq.n	8007e82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e5e:	4a7e      	ldr	r2, [pc, #504]	; (8008058 <HAL_UART_IRQHandler+0x3e0>)
 8007e60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fa ff64 	bl	8002d34 <HAL_DMA_Abort_IT>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d016      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e80:	e00e      	b.n	8007ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f994 	bl	80081b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e88:	e00a      	b.n	8007ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f990 	bl	80081b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e90:	e006      	b.n	8007ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f98c 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007e9e:	e175      	b.n	800818c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea0:	bf00      	nop
    return;
 8007ea2:	e173      	b.n	800818c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	f040 814f 	bne.w	800814c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb2:	f003 0310 	and.w	r3, r3, #16
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 8148 	beq.w	800814c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec0:	f003 0310 	and.w	r3, r3, #16
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8141 	beq.w	800814c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60bb      	str	r3, [r7, #8]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	60bb      	str	r3, [r7, #8]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	60bb      	str	r3, [r7, #8]
 8007ede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eea:	2b40      	cmp	r3, #64	; 0x40
 8007eec:	f040 80b6 	bne.w	800805c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 8145 	beq.w	8008190 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	f080 813e 	bcs.w	8008190 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f26:	f000 8088 	beq.w	800803a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	330c      	adds	r3, #12
 8007f30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	330c      	adds	r3, #12
 8007f52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1d9      	bne.n	8007f2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3314      	adds	r3, #20
 8007f7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f88:	f023 0301 	bic.w	r3, r3, #1
 8007f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3314      	adds	r3, #20
 8007f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1e1      	bne.n	8007f76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3314      	adds	r3, #20
 8007fb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3314      	adds	r3, #20
 8007fd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007fd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e3      	bne.n	8007fb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	330c      	adds	r3, #12
 8007ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800800a:	f023 0310 	bic.w	r3, r3, #16
 800800e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	330c      	adds	r3, #12
 8008018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800801c:	65ba      	str	r2, [r7, #88]	; 0x58
 800801e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800802a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e3      	bne.n	8007ff8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008034:	4618      	mov	r0, r3
 8008036:	f7fa fe0d 	bl	8002c54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008048:	b29b      	uxth	r3, r3
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	b29b      	uxth	r3, r3
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f8b7 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008056:	e09b      	b.n	8008190 <HAL_UART_IRQHandler+0x518>
 8008058:	080083c9 	.word	0x080083c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008064:	b29b      	uxth	r3, r3
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 808e 	beq.w	8008194 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8089 	beq.w	8008194 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	330c      	adds	r3, #12
 80080a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80080a6:	647a      	str	r2, [r7, #68]	; 0x44
 80080a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e3      	bne.n	8008082 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3314      	adds	r3, #20
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	623b      	str	r3, [r7, #32]
   return(result);
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	f023 0301 	bic.w	r3, r3, #1
 80080d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3314      	adds	r3, #20
 80080da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080de:	633a      	str	r2, [r7, #48]	; 0x30
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e3      	bne.n	80080ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	330c      	adds	r3, #12
 8008106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0310 	bic.w	r3, r3, #16
 8008116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	330c      	adds	r3, #12
 8008120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008124:	61fa      	str	r2, [r7, #28]
 8008126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	69b9      	ldr	r1, [r7, #24]
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	617b      	str	r3, [r7, #20]
   return(result);
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e3      	bne.n	8008100 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800813e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f83d 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800814a:	e023      	b.n	8008194 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800814c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008154:	2b00      	cmp	r3, #0
 8008156:	d009      	beq.n	800816c <HAL_UART_IRQHandler+0x4f4>
 8008158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800815c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f943 	bl	80083f0 <UART_Transmit_IT>
    return;
 800816a:	e014      	b.n	8008196 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00e      	beq.n	8008196 <HAL_UART_IRQHandler+0x51e>
 8008178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d008      	beq.n	8008196 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f983 	bl	8008490 <UART_EndTransmit_IT>
    return;
 800818a:	e004      	b.n	8008196 <HAL_UART_IRQHandler+0x51e>
    return;
 800818c:	bf00      	nop
 800818e:	e002      	b.n	8008196 <HAL_UART_IRQHandler+0x51e>
      return;
 8008190:	bf00      	nop
 8008192:	e000      	b.n	8008196 <HAL_UART_IRQHandler+0x51e>
      return;
 8008194:	bf00      	nop
  }
}
 8008196:	37e8      	adds	r7, #232	; 0xe8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ec:	e03b      	b.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f4:	d037      	beq.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f6:	f7fa fae5 	bl	80027c4 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	429a      	cmp	r2, r3
 8008204:	d302      	bcc.n	800820c <UART_WaitOnFlagUntilTimeout+0x30>
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e03a      	b.n	8008286 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d023      	beq.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b80      	cmp	r3, #128	; 0x80
 8008222:	d020      	beq.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b40      	cmp	r3, #64	; 0x40
 8008228:	d01d      	beq.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b08      	cmp	r3, #8
 8008236:	d116      	bne.n	8008266 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	617b      	str	r3, [r7, #20]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f857 	bl	8008302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2208      	movs	r2, #8
 8008258:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e00f      	b.n	8008286 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4013      	ands	r3, r2
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	429a      	cmp	r2, r3
 8008274:	bf0c      	ite	eq
 8008276:	2301      	moveq	r3, #1
 8008278:	2300      	movne	r3, #0
 800827a:	b2db      	uxtb	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	429a      	cmp	r2, r3
 8008282:	d0b4      	beq.n	80081ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800828e:	b480      	push	{r7}
 8008290:	b085      	sub	sp, #20
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	4613      	mov	r3, r2
 800829a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	88fa      	ldrh	r2, [r7, #6]
 80082a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2222      	movs	r2, #34	; 0x22
 80082b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695a      	ldr	r2, [r3, #20]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68da      	ldr	r2, [r3, #12]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0220 	orr.w	r2, r2, #32
 80082f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008302:	b480      	push	{r7}
 8008304:	b095      	sub	sp, #84	; 0x54
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	330c      	adds	r3, #12
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008320:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	330c      	adds	r3, #12
 8008328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800832a:	643a      	str	r2, [r7, #64]	; 0x40
 800832c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e5      	bne.n	800830a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3314      	adds	r3, #20
 8008344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	61fb      	str	r3, [r7, #28]
   return(result);
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	f023 0301 	bic.w	r3, r3, #1
 8008354:	64bb      	str	r3, [r7, #72]	; 0x48
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3314      	adds	r3, #20
 800835c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800835e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008360:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e5      	bne.n	800833e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008376:	2b01      	cmp	r3, #1
 8008378:	d119      	bne.n	80083ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	330c      	adds	r3, #12
 8008380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	60bb      	str	r3, [r7, #8]
   return(result);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f023 0310 	bic.w	r3, r3, #16
 8008390:	647b      	str	r3, [r7, #68]	; 0x44
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	330c      	adds	r3, #12
 8008398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800839a:	61ba      	str	r2, [r7, #24]
 800839c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6979      	ldr	r1, [r7, #20]
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	613b      	str	r3, [r7, #16]
   return(result);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e5      	bne.n	800837a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80083bc:	bf00      	nop
 80083be:	3754      	adds	r7, #84	; 0x54
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff fee4 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083e8:	bf00      	nop
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b21      	cmp	r3, #33	; 0x21
 8008402:	d13e      	bne.n	8008482 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840c:	d114      	bne.n	8008438 <UART_Transmit_IT+0x48>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d110      	bne.n	8008438 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	461a      	mov	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800842a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	1c9a      	adds	r2, r3, #2
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	621a      	str	r2, [r3, #32]
 8008436:	e008      	b.n	800844a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	1c59      	adds	r1, r3, #1
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	6211      	str	r1, [r2, #32]
 8008442:	781a      	ldrb	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29b      	uxth	r3, r3
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	4619      	mov	r1, r3
 8008458:	84d1      	strh	r1, [r2, #38]	; 0x26
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10f      	bne.n	800847e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800846c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800847c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	e000      	b.n	8008484 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008482:	2302      	movs	r3, #2
  }
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fe73 	bl	800819c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08c      	sub	sp, #48	; 0x30
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b22      	cmp	r3, #34	; 0x22
 80084d2:	f040 80ae 	bne.w	8008632 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084de:	d117      	bne.n	8008510 <UART_Receive_IT+0x50>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d113      	bne.n	8008510 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fe:	b29a      	uxth	r2, r3
 8008500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008502:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	1c9a      	adds	r2, r3, #2
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	629a      	str	r2, [r3, #40]	; 0x28
 800850e:	e026      	b.n	800855e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008522:	d007      	beq.n	8008534 <UART_Receive_IT+0x74>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <UART_Receive_IT+0x82>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d106      	bne.n	8008542 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	b2da      	uxtb	r2, r3
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	701a      	strb	r2, [r3, #0]
 8008540:	e008      	b.n	8008554 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800854e:	b2da      	uxtb	r2, r3
 8008550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008552:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29b      	uxth	r3, r3
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	4619      	mov	r1, r3
 800856c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800856e:	2b00      	cmp	r3, #0
 8008570:	d15d      	bne.n	800862e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0220 	bic.w	r2, r2, #32
 8008580:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0201 	bic.w	r2, r2, #1
 80085a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d135      	bne.n	8008624 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	330c      	adds	r3, #12
 80085c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	613b      	str	r3, [r7, #16]
   return(result);
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f023 0310 	bic.w	r3, r3, #16
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	330c      	adds	r3, #12
 80085dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085de:	623a      	str	r2, [r7, #32]
 80085e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	69f9      	ldr	r1, [r7, #28]
 80085e4:	6a3a      	ldr	r2, [r7, #32]
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e5      	bne.n	80085be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b10      	cmp	r3, #16
 80085fe:	d10a      	bne.n	8008616 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff fdd1 	bl	80081c4 <HAL_UARTEx_RxEventCallback>
 8008622:	e002      	b.n	800862a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7f8 fe6f 	bl	8001308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	e002      	b.n	8008634 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	e000      	b.n	8008634 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008632:	2302      	movs	r3, #2
  }
}
 8008634:	4618      	mov	r0, r3
 8008636:	3730      	adds	r7, #48	; 0x30
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800863c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008640:	b0c0      	sub	sp, #256	; 0x100
 8008642:	af00      	add	r7, sp, #0
 8008644:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008658:	68d9      	ldr	r1, [r3, #12]
 800865a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	ea40 0301 	orr.w	r3, r0, r1
 8008664:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	431a      	orrs	r2, r3
 8008674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	431a      	orrs	r2, r3
 800867c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	4313      	orrs	r3, r2
 8008684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008694:	f021 010c 	bic.w	r1, r1, #12
 8008698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086a2:	430b      	orrs	r3, r1
 80086a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b6:	6999      	ldr	r1, [r3, #24]
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	ea40 0301 	orr.w	r3, r0, r1
 80086c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	4b8f      	ldr	r3, [pc, #572]	; (8008908 <UART_SetConfig+0x2cc>)
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d005      	beq.n	80086dc <UART_SetConfig+0xa0>
 80086d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b8d      	ldr	r3, [pc, #564]	; (800890c <UART_SetConfig+0x2d0>)
 80086d8:	429a      	cmp	r2, r3
 80086da:	d104      	bne.n	80086e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086dc:	f7fe faee 	bl	8006cbc <HAL_RCC_GetPCLK2Freq>
 80086e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80086e4:	e003      	b.n	80086ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086e6:	f7fe fad5 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 80086ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086f8:	f040 810c 	bne.w	8008914 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008700:	2200      	movs	r2, #0
 8008702:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008706:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800870a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800870e:	4622      	mov	r2, r4
 8008710:	462b      	mov	r3, r5
 8008712:	1891      	adds	r1, r2, r2
 8008714:	65b9      	str	r1, [r7, #88]	; 0x58
 8008716:	415b      	adcs	r3, r3
 8008718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800871a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800871e:	4621      	mov	r1, r4
 8008720:	eb12 0801 	adds.w	r8, r2, r1
 8008724:	4629      	mov	r1, r5
 8008726:	eb43 0901 	adc.w	r9, r3, r1
 800872a:	f04f 0200 	mov.w	r2, #0
 800872e:	f04f 0300 	mov.w	r3, #0
 8008732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800873a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800873e:	4690      	mov	r8, r2
 8008740:	4699      	mov	r9, r3
 8008742:	4623      	mov	r3, r4
 8008744:	eb18 0303 	adds.w	r3, r8, r3
 8008748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800874c:	462b      	mov	r3, r5
 800874e:	eb49 0303 	adc.w	r3, r9, r3
 8008752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008762:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008766:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800876a:	460b      	mov	r3, r1
 800876c:	18db      	adds	r3, r3, r3
 800876e:	653b      	str	r3, [r7, #80]	; 0x50
 8008770:	4613      	mov	r3, r2
 8008772:	eb42 0303 	adc.w	r3, r2, r3
 8008776:	657b      	str	r3, [r7, #84]	; 0x54
 8008778:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800877c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008780:	f7f8 fa12 	bl	8000ba8 <__aeabi_uldivmod>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4b61      	ldr	r3, [pc, #388]	; (8008910 <UART_SetConfig+0x2d4>)
 800878a:	fba3 2302 	umull	r2, r3, r3, r2
 800878e:	095b      	lsrs	r3, r3, #5
 8008790:	011c      	lsls	r4, r3, #4
 8008792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008796:	2200      	movs	r2, #0
 8008798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800879c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80087a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80087a4:	4642      	mov	r2, r8
 80087a6:	464b      	mov	r3, r9
 80087a8:	1891      	adds	r1, r2, r2
 80087aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80087ac:	415b      	adcs	r3, r3
 80087ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80087b4:	4641      	mov	r1, r8
 80087b6:	eb12 0a01 	adds.w	sl, r2, r1
 80087ba:	4649      	mov	r1, r9
 80087bc:	eb43 0b01 	adc.w	fp, r3, r1
 80087c0:	f04f 0200 	mov.w	r2, #0
 80087c4:	f04f 0300 	mov.w	r3, #0
 80087c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087d4:	4692      	mov	sl, r2
 80087d6:	469b      	mov	fp, r3
 80087d8:	4643      	mov	r3, r8
 80087da:	eb1a 0303 	adds.w	r3, sl, r3
 80087de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087e2:	464b      	mov	r3, r9
 80087e4:	eb4b 0303 	adc.w	r3, fp, r3
 80087e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80087fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008800:	460b      	mov	r3, r1
 8008802:	18db      	adds	r3, r3, r3
 8008804:	643b      	str	r3, [r7, #64]	; 0x40
 8008806:	4613      	mov	r3, r2
 8008808:	eb42 0303 	adc.w	r3, r2, r3
 800880c:	647b      	str	r3, [r7, #68]	; 0x44
 800880e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008816:	f7f8 f9c7 	bl	8000ba8 <__aeabi_uldivmod>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4611      	mov	r1, r2
 8008820:	4b3b      	ldr	r3, [pc, #236]	; (8008910 <UART_SetConfig+0x2d4>)
 8008822:	fba3 2301 	umull	r2, r3, r3, r1
 8008826:	095b      	lsrs	r3, r3, #5
 8008828:	2264      	movs	r2, #100	; 0x64
 800882a:	fb02 f303 	mul.w	r3, r2, r3
 800882e:	1acb      	subs	r3, r1, r3
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008836:	4b36      	ldr	r3, [pc, #216]	; (8008910 <UART_SetConfig+0x2d4>)
 8008838:	fba3 2302 	umull	r2, r3, r3, r2
 800883c:	095b      	lsrs	r3, r3, #5
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008844:	441c      	add	r4, r3
 8008846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800884a:	2200      	movs	r2, #0
 800884c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008850:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008854:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008858:	4642      	mov	r2, r8
 800885a:	464b      	mov	r3, r9
 800885c:	1891      	adds	r1, r2, r2
 800885e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008860:	415b      	adcs	r3, r3
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008864:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008868:	4641      	mov	r1, r8
 800886a:	1851      	adds	r1, r2, r1
 800886c:	6339      	str	r1, [r7, #48]	; 0x30
 800886e:	4649      	mov	r1, r9
 8008870:	414b      	adcs	r3, r1
 8008872:	637b      	str	r3, [r7, #52]	; 0x34
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	f04f 0300 	mov.w	r3, #0
 800887c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008880:	4659      	mov	r1, fp
 8008882:	00cb      	lsls	r3, r1, #3
 8008884:	4651      	mov	r1, sl
 8008886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800888a:	4651      	mov	r1, sl
 800888c:	00ca      	lsls	r2, r1, #3
 800888e:	4610      	mov	r0, r2
 8008890:	4619      	mov	r1, r3
 8008892:	4603      	mov	r3, r0
 8008894:	4642      	mov	r2, r8
 8008896:	189b      	adds	r3, r3, r2
 8008898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800889c:	464b      	mov	r3, r9
 800889e:	460a      	mov	r2, r1
 80088a0:	eb42 0303 	adc.w	r3, r2, r3
 80088a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80088b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80088bc:	460b      	mov	r3, r1
 80088be:	18db      	adds	r3, r3, r3
 80088c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80088c2:	4613      	mov	r3, r2
 80088c4:	eb42 0303 	adc.w	r3, r2, r3
 80088c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80088d2:	f7f8 f969 	bl	8000ba8 <__aeabi_uldivmod>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4b0d      	ldr	r3, [pc, #52]	; (8008910 <UART_SetConfig+0x2d4>)
 80088dc:	fba3 1302 	umull	r1, r3, r3, r2
 80088e0:	095b      	lsrs	r3, r3, #5
 80088e2:	2164      	movs	r1, #100	; 0x64
 80088e4:	fb01 f303 	mul.w	r3, r1, r3
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	3332      	adds	r3, #50	; 0x32
 80088ee:	4a08      	ldr	r2, [pc, #32]	; (8008910 <UART_SetConfig+0x2d4>)
 80088f0:	fba2 2303 	umull	r2, r3, r2, r3
 80088f4:	095b      	lsrs	r3, r3, #5
 80088f6:	f003 0207 	and.w	r2, r3, #7
 80088fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4422      	add	r2, r4
 8008902:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008904:	e106      	b.n	8008b14 <UART_SetConfig+0x4d8>
 8008906:	bf00      	nop
 8008908:	40011000 	.word	0x40011000
 800890c:	40011400 	.word	0x40011400
 8008910:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008918:	2200      	movs	r2, #0
 800891a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800891e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008922:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008926:	4642      	mov	r2, r8
 8008928:	464b      	mov	r3, r9
 800892a:	1891      	adds	r1, r2, r2
 800892c:	6239      	str	r1, [r7, #32]
 800892e:	415b      	adcs	r3, r3
 8008930:	627b      	str	r3, [r7, #36]	; 0x24
 8008932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008936:	4641      	mov	r1, r8
 8008938:	1854      	adds	r4, r2, r1
 800893a:	4649      	mov	r1, r9
 800893c:	eb43 0501 	adc.w	r5, r3, r1
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	00eb      	lsls	r3, r5, #3
 800894a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800894e:	00e2      	lsls	r2, r4, #3
 8008950:	4614      	mov	r4, r2
 8008952:	461d      	mov	r5, r3
 8008954:	4643      	mov	r3, r8
 8008956:	18e3      	adds	r3, r4, r3
 8008958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800895c:	464b      	mov	r3, r9
 800895e:	eb45 0303 	adc.w	r3, r5, r3
 8008962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008976:	f04f 0200 	mov.w	r2, #0
 800897a:	f04f 0300 	mov.w	r3, #0
 800897e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008982:	4629      	mov	r1, r5
 8008984:	008b      	lsls	r3, r1, #2
 8008986:	4621      	mov	r1, r4
 8008988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800898c:	4621      	mov	r1, r4
 800898e:	008a      	lsls	r2, r1, #2
 8008990:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008994:	f7f8 f908 	bl	8000ba8 <__aeabi_uldivmod>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4b60      	ldr	r3, [pc, #384]	; (8008b20 <UART_SetConfig+0x4e4>)
 800899e:	fba3 2302 	umull	r2, r3, r3, r2
 80089a2:	095b      	lsrs	r3, r3, #5
 80089a4:	011c      	lsls	r4, r3, #4
 80089a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80089b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80089b8:	4642      	mov	r2, r8
 80089ba:	464b      	mov	r3, r9
 80089bc:	1891      	adds	r1, r2, r2
 80089be:	61b9      	str	r1, [r7, #24]
 80089c0:	415b      	adcs	r3, r3
 80089c2:	61fb      	str	r3, [r7, #28]
 80089c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089c8:	4641      	mov	r1, r8
 80089ca:	1851      	adds	r1, r2, r1
 80089cc:	6139      	str	r1, [r7, #16]
 80089ce:	4649      	mov	r1, r9
 80089d0:	414b      	adcs	r3, r1
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	f04f 0300 	mov.w	r3, #0
 80089dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089e0:	4659      	mov	r1, fp
 80089e2:	00cb      	lsls	r3, r1, #3
 80089e4:	4651      	mov	r1, sl
 80089e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ea:	4651      	mov	r1, sl
 80089ec:	00ca      	lsls	r2, r1, #3
 80089ee:	4610      	mov	r0, r2
 80089f0:	4619      	mov	r1, r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	4642      	mov	r2, r8
 80089f6:	189b      	adds	r3, r3, r2
 80089f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089fc:	464b      	mov	r3, r9
 80089fe:	460a      	mov	r2, r1
 8008a00:	eb42 0303 	adc.w	r3, r2, r3
 8008a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a14:	f04f 0200 	mov.w	r2, #0
 8008a18:	f04f 0300 	mov.w	r3, #0
 8008a1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a20:	4649      	mov	r1, r9
 8008a22:	008b      	lsls	r3, r1, #2
 8008a24:	4641      	mov	r1, r8
 8008a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a2a:	4641      	mov	r1, r8
 8008a2c:	008a      	lsls	r2, r1, #2
 8008a2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a32:	f7f8 f8b9 	bl	8000ba8 <__aeabi_uldivmod>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	4b38      	ldr	r3, [pc, #224]	; (8008b20 <UART_SetConfig+0x4e4>)
 8008a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8008a42:	095b      	lsrs	r3, r3, #5
 8008a44:	2264      	movs	r2, #100	; 0x64
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
 8008a4a:	1acb      	subs	r3, r1, r3
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	3332      	adds	r3, #50	; 0x32
 8008a50:	4a33      	ldr	r2, [pc, #204]	; (8008b20 <UART_SetConfig+0x4e4>)
 8008a52:	fba2 2303 	umull	r2, r3, r2, r3
 8008a56:	095b      	lsrs	r3, r3, #5
 8008a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a5c:	441c      	add	r4, r3
 8008a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a62:	2200      	movs	r2, #0
 8008a64:	673b      	str	r3, [r7, #112]	; 0x70
 8008a66:	677a      	str	r2, [r7, #116]	; 0x74
 8008a68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	464b      	mov	r3, r9
 8008a70:	1891      	adds	r1, r2, r2
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	415b      	adcs	r3, r3
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a7c:	4641      	mov	r1, r8
 8008a7e:	1851      	adds	r1, r2, r1
 8008a80:	6039      	str	r1, [r7, #0]
 8008a82:	4649      	mov	r1, r9
 8008a84:	414b      	adcs	r3, r1
 8008a86:	607b      	str	r3, [r7, #4]
 8008a88:	f04f 0200 	mov.w	r2, #0
 8008a8c:	f04f 0300 	mov.w	r3, #0
 8008a90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a94:	4659      	mov	r1, fp
 8008a96:	00cb      	lsls	r3, r1, #3
 8008a98:	4651      	mov	r1, sl
 8008a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a9e:	4651      	mov	r1, sl
 8008aa0:	00ca      	lsls	r2, r1, #3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	4642      	mov	r2, r8
 8008aaa:	189b      	adds	r3, r3, r2
 8008aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8008aae:	464b      	mov	r3, r9
 8008ab0:	460a      	mov	r2, r1
 8008ab2:	eb42 0303 	adc.w	r3, r2, r3
 8008ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ac2:	667a      	str	r2, [r7, #100]	; 0x64
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	f04f 0300 	mov.w	r3, #0
 8008acc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	008b      	lsls	r3, r1, #2
 8008ad4:	4641      	mov	r1, r8
 8008ad6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ada:	4641      	mov	r1, r8
 8008adc:	008a      	lsls	r2, r1, #2
 8008ade:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ae2:	f7f8 f861 	bl	8000ba8 <__aeabi_uldivmod>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <UART_SetConfig+0x4e4>)
 8008aec:	fba3 1302 	umull	r1, r3, r3, r2
 8008af0:	095b      	lsrs	r3, r3, #5
 8008af2:	2164      	movs	r1, #100	; 0x64
 8008af4:	fb01 f303 	mul.w	r3, r1, r3
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	3332      	adds	r3, #50	; 0x32
 8008afe:	4a08      	ldr	r2, [pc, #32]	; (8008b20 <UART_SetConfig+0x4e4>)
 8008b00:	fba2 2303 	umull	r2, r3, r2, r3
 8008b04:	095b      	lsrs	r3, r3, #5
 8008b06:	f003 020f 	and.w	r2, r3, #15
 8008b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4422      	add	r2, r4
 8008b12:	609a      	str	r2, [r3, #8]
}
 8008b14:	bf00      	nop
 8008b16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b20:	51eb851f 	.word	0x51eb851f

08008b24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b24:	b084      	sub	sp, #16
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b084      	sub	sp, #16
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	f107 001c 	add.w	r0, r7, #28
 8008b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b36:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d123      	bne.n	8008b86 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d105      	bne.n	8008b7a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f9dc 	bl	8008f38 <USB_CoreReset>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]
 8008b84:	e01b      	b.n	8008bbe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f9d0 	bl	8008f38 <USB_CoreReset>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b9c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d106      	bne.n	8008bb2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
 8008bb0:	e005      	b.n	8008bbe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008bbe:	7fbb      	ldrb	r3, [r7, #30]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d10b      	bne.n	8008bdc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f043 0206 	orr.w	r2, r3, #6
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f043 0220 	orr.w	r2, r3, #32
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008be8:	b004      	add	sp, #16
 8008bea:	4770      	bx	lr

08008bec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f043 0201 	orr.w	r2, r3, #1
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f023 0201 	bic.w	r2, r3, #1
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d115      	bne.n	8008c7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008c5e:	200a      	movs	r0, #10
 8008c60:	f7f9 fdbc 	bl	80027dc <HAL_Delay>
      ms += 10U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	330a      	adds	r3, #10
 8008c68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f956 	bl	8008f1c <USB_GetMode>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d01e      	beq.n	8008cb4 <USB_SetCurrentMode+0x84>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2bc7      	cmp	r3, #199	; 0xc7
 8008c7a:	d9f0      	bls.n	8008c5e <USB_SetCurrentMode+0x2e>
 8008c7c:	e01a      	b.n	8008cb4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d115      	bne.n	8008cb0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008c90:	200a      	movs	r0, #10
 8008c92:	f7f9 fda3 	bl	80027dc <HAL_Delay>
      ms += 10U;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	330a      	adds	r3, #10
 8008c9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f93d 	bl	8008f1c <USB_GetMode>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d005      	beq.n	8008cb4 <USB_SetCurrentMode+0x84>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2bc7      	cmp	r3, #199	; 0xc7
 8008cac:	d9f0      	bls.n	8008c90 <USB_SetCurrentMode+0x60>
 8008cae:	e001      	b.n	8008cb4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e005      	b.n	8008cc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2bc8      	cmp	r3, #200	; 0xc8
 8008cb8:	d101      	bne.n	8008cbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ce2:	d901      	bls.n	8008ce8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e01b      	b.n	8008d20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	daf2      	bge.n	8008cd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	019b      	lsls	r3, r3, #6
 8008cf8:	f043 0220 	orr.w	r2, r3, #32
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3301      	adds	r3, #1
 8008d04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008d0c:	d901      	bls.n	8008d12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e006      	b.n	8008d20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	d0f0      	beq.n	8008d00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008d44:	d901      	bls.n	8008d4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e018      	b.n	8008d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	daf2      	bge.n	8008d38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2210      	movs	r2, #16
 8008d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008d68:	d901      	bls.n	8008d6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e006      	b.n	8008d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	f003 0310 	and.w	r3, r3, #16
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d0f0      	beq.n	8008d5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b089      	sub	sp, #36	; 0x24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4611      	mov	r1, r2
 8008d94:	461a      	mov	r2, r3
 8008d96:	460b      	mov	r3, r1
 8008d98:	71fb      	strb	r3, [r7, #7]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d123      	bne.n	8008df6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008dae:	88bb      	ldrh	r3, [r7, #4]
 8008db0:	3303      	adds	r3, #3
 8008db2:	089b      	lsrs	r3, r3, #2
 8008db4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008db6:	2300      	movs	r3, #0
 8008db8:	61bb      	str	r3, [r7, #24]
 8008dba:	e018      	b.n	8008dee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008dbc:	79fb      	ldrb	r3, [r7, #7]
 8008dbe:	031a      	lsls	r2, r3, #12
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc8:	461a      	mov	r2, r3
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	3301      	adds	r3, #1
 8008de0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	3301      	adds	r3, #1
 8008de6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	3301      	adds	r3, #1
 8008dec:	61bb      	str	r3, [r7, #24]
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d3e2      	bcc.n	8008dbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3724      	adds	r7, #36	; 0x24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b08b      	sub	sp, #44	; 0x2c
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e1a:	88fb      	ldrh	r3, [r7, #6]
 8008e1c:	089b      	lsrs	r3, r3, #2
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e22:	88fb      	ldrh	r3, [r7, #6]
 8008e24:	f003 0303 	and.w	r3, r3, #3
 8008e28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	623b      	str	r3, [r7, #32]
 8008e2e:	e014      	b.n	8008e5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	3301      	adds	r3, #1
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	3301      	adds	r3, #1
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	3301      	adds	r3, #1
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	3301      	adds	r3, #1
 8008e58:	623b      	str	r3, [r7, #32]
 8008e5a:	6a3a      	ldr	r2, [r7, #32]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d3e6      	bcc.n	8008e30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e62:	8bfb      	ldrh	r3, [r7, #30]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01e      	beq.n	8008ea6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e72:	461a      	mov	r2, r3
 8008e74:	f107 0310 	add.w	r3, r7, #16
 8008e78:	6812      	ldr	r2, [r2, #0]
 8008e7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	701a      	strb	r2, [r3, #0]
      i++;
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	3301      	adds	r3, #1
 8008e92:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	3301      	adds	r3, #1
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e9a:	8bfb      	ldrh	r3, [r7, #30]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ea0:	8bfb      	ldrh	r3, [r7, #30]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1ea      	bne.n	8008e7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	372c      	adds	r7, #44	; 0x2c
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008eea:	78fb      	ldrb	r3, [r7, #3]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	f003 0301 	and.w	r3, r3, #1
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3301      	adds	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f50:	d901      	bls.n	8008f56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e01b      	b.n	8008f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	daf2      	bge.n	8008f44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f043 0201 	orr.w	r2, r3, #1
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3301      	adds	r3, #1
 8008f72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f7a:	d901      	bls.n	8008f80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e006      	b.n	8008f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d0f0      	beq.n	8008f6e <USB_CoreReset+0x36>

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b086      	sub	sp, #24
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d119      	bne.n	8009026 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d10a      	bne.n	8009010 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009008:	f043 0304 	orr.w	r3, r3, #4
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	e014      	b.n	800903a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800901e:	f023 0304 	bic.w	r3, r3, #4
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	e009      	b.n	800903a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009034:	f023 0304 	bic.w	r3, r3, #4
 8009038:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800903a:	2110      	movs	r1, #16
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff fe43 	bl	8008cc8 <USB_FlushTxFifo>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff fe6d 	bl	8008d2c <USB_FlushRxFifo>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800905c:	2300      	movs	r3, #0
 800905e:	613b      	str	r3, [r7, #16]
 8009060:	e015      	b.n	800908e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4413      	add	r3, r2
 800906a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800906e:	461a      	mov	r2, r3
 8009070:	f04f 33ff 	mov.w	r3, #4294967295
 8009074:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4413      	add	r3, r2
 800907e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009082:	461a      	mov	r2, r3
 8009084:	2300      	movs	r3, #0
 8009086:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	3301      	adds	r3, #1
 800908c:	613b      	str	r3, [r7, #16]
 800908e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009092:	461a      	mov	r2, r3
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	4293      	cmp	r3, r2
 8009098:	d3e3      	bcc.n	8009062 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f04f 32ff 	mov.w	r2, #4294967295
 80090a6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a18      	ldr	r2, [pc, #96]	; (800910c <USB_HostInit+0x170>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d10b      	bne.n	80090c8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090b6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a15      	ldr	r2, [pc, #84]	; (8009110 <USB_HostInit+0x174>)
 80090bc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a14      	ldr	r2, [pc, #80]	; (8009114 <USB_HostInit+0x178>)
 80090c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80090c6:	e009      	b.n	80090dc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2280      	movs	r2, #128	; 0x80
 80090cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a11      	ldr	r2, [pc, #68]	; (8009118 <USB_HostInit+0x17c>)
 80090d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a11      	ldr	r2, [pc, #68]	; (800911c <USB_HostInit+0x180>)
 80090d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d105      	bne.n	80090f0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	f043 0210 	orr.w	r2, r3, #16
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	699a      	ldr	r2, [r3, #24]
 80090f4:	4b0a      	ldr	r3, [pc, #40]	; (8009120 <USB_HostInit+0x184>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009108:	b004      	add	sp, #16
 800910a:	4770      	bx	lr
 800910c:	40040000 	.word	0x40040000
 8009110:	01000200 	.word	0x01000200
 8009114:	00e00300 	.word	0x00e00300
 8009118:	00600080 	.word	0x00600080
 800911c:	004000e0 	.word	0x004000e0
 8009120:	a3200008 	.word	0xa3200008

08009124 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009142:	f023 0303 	bic.w	r3, r3, #3
 8009146:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	68f9      	ldr	r1, [r7, #12]
 8009158:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800915c:	4313      	orrs	r3, r2
 800915e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d107      	bne.n	8009176 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800916c:	461a      	mov	r2, r3
 800916e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009172:	6053      	str	r3, [r2, #4]
 8009174:	e00c      	b.n	8009190 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009176:	78fb      	ldrb	r3, [r7, #3]
 8009178:	2b02      	cmp	r3, #2
 800917a:	d107      	bne.n	800918c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009182:	461a      	mov	r2, r3
 8009184:	f241 7370 	movw	r3, #6000	; 0x1770
 8009188:	6053      	str	r3, [r2, #4]
 800918a:	e001      	b.n	8009190 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e000      	b.n	8009192 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80091be:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80091c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80091ce:	2064      	movs	r0, #100	; 0x64
 80091d0:	f7f9 fb04 	bl	80027dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80091dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80091e2:	200a      	movs	r0, #10
 80091e4:	f7f9 fafa 	bl	80027dc <HAL_Delay>

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b085      	sub	sp, #20
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	460b      	mov	r3, r1
 80091fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009216:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d109      	bne.n	8009236 <USB_DriveVbus+0x44>
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d106      	bne.n	8009236 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009234:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800923c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009240:	d109      	bne.n	8009256 <USB_DriveVbus+0x64>
 8009242:	78fb      	ldrb	r3, [r7, #3]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d106      	bne.n	8009256 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009254:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	0c5b      	lsrs	r3, r3, #17
 8009282:	f003 0303 	and.w	r3, r3, #3
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	b29b      	uxth	r3, r3
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	4608      	mov	r0, r1
 80092be:	4611      	mov	r1, r2
 80092c0:	461a      	mov	r2, r3
 80092c2:	4603      	mov	r3, r0
 80092c4:	70fb      	strb	r3, [r7, #3]
 80092c6:	460b      	mov	r3, r1
 80092c8:	70bb      	strb	r3, [r7, #2]
 80092ca:	4613      	mov	r3, r2
 80092cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80092d6:	78fb      	ldrb	r3, [r7, #3]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e2:	461a      	mov	r2, r3
 80092e4:	f04f 33ff 	mov.w	r3, #4294967295
 80092e8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80092ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d87c      	bhi.n	80093ec <USB_HC_Init+0x138>
 80092f2:	a201      	add	r2, pc, #4	; (adr r2, 80092f8 <USB_HC_Init+0x44>)
 80092f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f8:	08009309 	.word	0x08009309
 80092fc:	080093af 	.word	0x080093af
 8009300:	08009309 	.word	0x08009309
 8009304:	08009371 	.word	0x08009371
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	4413      	add	r3, r2
 8009310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009314:	461a      	mov	r2, r3
 8009316:	f240 439d 	movw	r3, #1181	; 0x49d
 800931a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800931c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009320:	2b00      	cmp	r3, #0
 8009322:	da10      	bge.n	8009346 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	4413      	add	r3, r2
 800932c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	78fa      	ldrb	r2, [r7, #3]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	440a      	add	r2, r1
 800933a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800933e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009342:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009344:	e055      	b.n	80093f2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a6f      	ldr	r2, [pc, #444]	; (8009508 <USB_HC_Init+0x254>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d151      	bne.n	80093f2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	4413      	add	r3, r2
 8009356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	440a      	add	r2, r1
 8009364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009368:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800936c:	60d3      	str	r3, [r2, #12]
      break;
 800936e:	e040      	b.n	80093f2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	4413      	add	r3, r2
 8009378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800937c:	461a      	mov	r2, r3
 800937e:	f240 639d 	movw	r3, #1693	; 0x69d
 8009382:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009384:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009388:	2b00      	cmp	r3, #0
 800938a:	da34      	bge.n	80093f6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800938c:	78fb      	ldrb	r3, [r7, #3]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	4413      	add	r3, r2
 8009394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	78fa      	ldrb	r2, [r7, #3]
 800939c:	0151      	lsls	r1, r2, #5
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	440a      	add	r2, r1
 80093a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80093ac:	e023      	b.n	80093f6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ba:	461a      	mov	r2, r3
 80093bc:	f240 2325 	movw	r3, #549	; 0x225
 80093c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80093c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	da17      	bge.n	80093fa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80093ca:	78fb      	ldrb	r3, [r7, #3]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80093e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80093ea:	e006      	b.n	80093fa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	77fb      	strb	r3, [r7, #31]
      break;
 80093f0:	e004      	b.n	80093fc <USB_HC_Init+0x148>
      break;
 80093f2:	bf00      	nop
 80093f4:	e002      	b.n	80093fc <USB_HC_Init+0x148>
      break;
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <USB_HC_Init+0x148>
      break;
 80093fa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	4413      	add	r3, r2
 8009404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009408:	461a      	mov	r2, r3
 800940a:	2300      	movs	r3, #0
 800940c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	4413      	add	r3, r2
 8009416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	78fa      	ldrb	r2, [r7, #3]
 800941e:	0151      	lsls	r1, r2, #5
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	440a      	add	r2, r1
 8009424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009428:	f043 0302 	orr.w	r3, r3, #2
 800942c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009434:	699a      	ldr	r2, [r3, #24]
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	f003 030f 	and.w	r3, r3, #15
 800943c:	2101      	movs	r1, #1
 800943e:	fa01 f303 	lsl.w	r3, r1, r3
 8009442:	6939      	ldr	r1, [r7, #16]
 8009444:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009448:	4313      	orrs	r3, r2
 800944a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009458:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800945c:	2b00      	cmp	r3, #0
 800945e:	da03      	bge.n	8009468 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009464:	61bb      	str	r3, [r7, #24]
 8009466:	e001      	b.n	800946c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff fef9 	bl	8009264 <USB_GetHostSpeed>
 8009472:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009474:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009478:	2b02      	cmp	r3, #2
 800947a:	d106      	bne.n	800948a <USB_HC_Init+0x1d6>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d003      	beq.n	800948a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009486:	617b      	str	r3, [r7, #20]
 8009488:	e001      	b.n	800948e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800948e:	787b      	ldrb	r3, [r7, #1]
 8009490:	059b      	lsls	r3, r3, #22
 8009492:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009496:	78bb      	ldrb	r3, [r7, #2]
 8009498:	02db      	lsls	r3, r3, #11
 800949a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800949e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094a4:	049b      	lsls	r3, r3, #18
 80094a6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094aa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80094ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094b2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	431a      	orrs	r2, r3
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	0151      	lsls	r1, r2, #5
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	440a      	add	r2, r1
 80094c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80094c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094cc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80094ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d003      	beq.n	80094de <USB_HC_Init+0x22a>
 80094d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d10f      	bne.n	80094fe <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	0151      	lsls	r1, r2, #5
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	440a      	add	r2, r1
 80094f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094fc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80094fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	40040000 	.word	0x40040000

0800950c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08c      	sub	sp, #48	; 0x30
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	4613      	mov	r3, r2
 8009518:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009528:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	4a5d      	ldr	r2, [pc, #372]	; (80096a4 <USB_HC_StartXfer+0x198>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d12f      	bne.n	8009592 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d11c      	bne.n	8009572 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	7c9b      	ldrb	r3, [r3, #18]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <USB_HC_StartXfer+0x3c>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	7c9b      	ldrb	r3, [r3, #18]
 8009544:	2b02      	cmp	r3, #2
 8009546:	d124      	bne.n	8009592 <USB_HC_StartXfer+0x86>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	799b      	ldrb	r3, [r3, #6]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d120      	bne.n	8009592 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	4413      	add	r3, r2
 8009558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	0151      	lsls	r1, r2, #5
 8009562:	6a3a      	ldr	r2, [r7, #32]
 8009564:	440a      	add	r2, r1
 8009566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800956a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800956e:	60d3      	str	r3, [r2, #12]
 8009570:	e00f      	b.n	8009592 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	791b      	ldrb	r3, [r3, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10b      	bne.n	8009592 <USB_HC_StartXfer+0x86>
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	795b      	ldrb	r3, [r3, #5]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d107      	bne.n	8009592 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	785b      	ldrb	r3, [r3, #1]
 8009586:	4619      	mov	r1, r3
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fb6b 	bl	8009c64 <USB_DoPing>
        return HAL_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	e232      	b.n	80099f8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	799b      	ldrb	r3, [r3, #6]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d158      	bne.n	800964c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800959a:	2301      	movs	r3, #1
 800959c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	78db      	ldrb	r3, [r3, #3]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d007      	beq.n	80095b6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80095a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	8a92      	ldrh	r2, [r2, #20]
 80095ac:	fb03 f202 	mul.w	r2, r3, r2
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	61da      	str	r2, [r3, #28]
 80095b4:	e07c      	b.n	80096b0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	7c9b      	ldrb	r3, [r3, #18]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d130      	bne.n	8009620 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	2bbc      	cmp	r3, #188	; 0xbc
 80095c4:	d918      	bls.n	80095f8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	8a9b      	ldrh	r3, [r3, #20]
 80095ca:	461a      	mov	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	69da      	ldr	r2, [r3, #28]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d003      	beq.n	80095e8 <USB_HC_StartXfer+0xdc>
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d103      	bne.n	80095f0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2202      	movs	r2, #2
 80095ec:	60da      	str	r2, [r3, #12]
 80095ee:	e05f      	b.n	80096b0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2201      	movs	r2, #1
 80095f4:	60da      	str	r2, [r3, #12]
 80095f6:	e05b      	b.n	80096b0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6a1a      	ldr	r2, [r3, #32]
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d007      	beq.n	8009618 <USB_HC_StartXfer+0x10c>
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	2b02      	cmp	r3, #2
 800960e:	d003      	beq.n	8009618 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2204      	movs	r2, #4
 8009614:	60da      	str	r2, [r3, #12]
 8009616:	e04b      	b.n	80096b0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2203      	movs	r2, #3
 800961c:	60da      	str	r2, [r3, #12]
 800961e:	e047      	b.n	80096b0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d10d      	bne.n	8009642 <USB_HC_StartXfer+0x136>
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	8a92      	ldrh	r2, [r2, #20]
 800962e:	4293      	cmp	r3, r2
 8009630:	d907      	bls.n	8009642 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009632:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	8a92      	ldrh	r2, [r2, #20]
 8009638:	fb03 f202 	mul.w	r2, r3, r2
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	61da      	str	r2, [r3, #28]
 8009640:	e036      	b.n	80096b0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6a1a      	ldr	r2, [r3, #32]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	61da      	str	r2, [r3, #28]
 800964a:	e031      	b.n	80096b0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	6a1b      	ldr	r3, [r3, #32]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d018      	beq.n	8009686 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	8a92      	ldrh	r2, [r2, #20]
 800965c:	4413      	add	r3, r2
 800965e:	3b01      	subs	r3, #1
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	8a92      	ldrh	r2, [r2, #20]
 8009664:	fbb3 f3f2 	udiv	r3, r3, r2
 8009668:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800966a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800966c:	8b7b      	ldrh	r3, [r7, #26]
 800966e:	429a      	cmp	r2, r3
 8009670:	d90b      	bls.n	800968a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009672:	8b7b      	ldrh	r3, [r7, #26]
 8009674:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009676:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	8a92      	ldrh	r2, [r2, #20]
 800967c:	fb03 f202 	mul.w	r2, r3, r2
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	61da      	str	r2, [r3, #28]
 8009684:	e001      	b.n	800968a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009686:	2301      	movs	r3, #1
 8009688:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	78db      	ldrb	r3, [r3, #3]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00a      	beq.n	80096a8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	8a92      	ldrh	r2, [r2, #20]
 8009698:	fb03 f202 	mul.w	r2, r3, r2
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	61da      	str	r2, [r3, #28]
 80096a0:	e006      	b.n	80096b0 <USB_HC_StartXfer+0x1a4>
 80096a2:	bf00      	nop
 80096a4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	6a1a      	ldr	r2, [r3, #32]
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80096b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096ba:	04d9      	lsls	r1, r3, #19
 80096bc:	4ba3      	ldr	r3, [pc, #652]	; (800994c <USB_HC_StartXfer+0x440>)
 80096be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80096c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	7d9b      	ldrb	r3, [r3, #22]
 80096c6:	075b      	lsls	r3, r3, #29
 80096c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80096cc:	69f9      	ldr	r1, [r7, #28]
 80096ce:	0148      	lsls	r0, r1, #5
 80096d0:	6a39      	ldr	r1, [r7, #32]
 80096d2:	4401      	add	r1, r0
 80096d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80096d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80096da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d009      	beq.n	80096f6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	6999      	ldr	r1, [r3, #24]
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096f2:	460a      	mov	r2, r1
 80096f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	2b00      	cmp	r3, #0
 8009704:	bf0c      	ite	eq
 8009706:	2301      	moveq	r3, #1
 8009708:	2300      	movne	r3, #0
 800970a:	b2db      	uxtb	r3, r3
 800970c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	6a3b      	ldr	r3, [r7, #32]
 8009714:	4413      	add	r3, r2
 8009716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	0151      	lsls	r1, r2, #5
 8009720:	6a3a      	ldr	r2, [r7, #32]
 8009722:	440a      	add	r2, r1
 8009724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009728:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800972c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	4413      	add	r3, r2
 8009736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	7e7b      	ldrb	r3, [r7, #25]
 800973e:	075b      	lsls	r3, r3, #29
 8009740:	69f9      	ldr	r1, [r7, #28]
 8009742:	0148      	lsls	r0, r1, #5
 8009744:	6a39      	ldr	r1, [r7, #32]
 8009746:	4401      	add	r1, r0
 8009748:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800974c:	4313      	orrs	r3, r2
 800974e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	799b      	ldrb	r3, [r3, #6]
 8009754:	2b01      	cmp	r3, #1
 8009756:	f040 80c3 	bne.w	80098e0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	7c5b      	ldrb	r3, [r3, #17]
 800975e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009764:	4313      	orrs	r3, r2
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	0151      	lsls	r1, r2, #5
 800976a:	6a3a      	ldr	r2, [r7, #32]
 800976c:	440a      	add	r2, r1
 800976e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009776:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	4413      	add	r3, r2
 8009780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	69fa      	ldr	r2, [r7, #28]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	6a3a      	ldr	r2, [r7, #32]
 800978c:	440a      	add	r2, r1
 800978e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009792:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009796:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	79db      	ldrb	r3, [r3, #7]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d123      	bne.n	80097e8 <USB_HC_StartXfer+0x2dc>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	78db      	ldrb	r3, [r3, #3]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d11f      	bne.n	80097e8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	69fa      	ldr	r2, [r7, #28]
 80097b8:	0151      	lsls	r1, r2, #5
 80097ba:	6a3a      	ldr	r2, [r7, #32]
 80097bc:	440a      	add	r2, r1
 80097be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097c6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	6a3a      	ldr	r2, [r7, #32]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	7c9b      	ldrb	r3, [r3, #18]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d003      	beq.n	80097f8 <USB_HC_StartXfer+0x2ec>
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	7c9b      	ldrb	r3, [r3, #18]
 80097f4:	2b03      	cmp	r3, #3
 80097f6:	d117      	bne.n	8009828 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d113      	bne.n	8009828 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	78db      	ldrb	r3, [r3, #3]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d10f      	bne.n	8009828 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	4413      	add	r3, r2
 8009810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	69fa      	ldr	r2, [r7, #28]
 8009818:	0151      	lsls	r1, r2, #5
 800981a:	6a3a      	ldr	r2, [r7, #32]
 800981c:	440a      	add	r2, r1
 800981e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009826:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	7c9b      	ldrb	r3, [r3, #18]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d162      	bne.n	80098f6 <USB_HC_StartXfer+0x3ea>
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	78db      	ldrb	r3, [r3, #3]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d15e      	bne.n	80098f6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	3b01      	subs	r3, #1
 800983e:	2b03      	cmp	r3, #3
 8009840:	d858      	bhi.n	80098f4 <USB_HC_StartXfer+0x3e8>
 8009842:	a201      	add	r2, pc, #4	; (adr r2, 8009848 <USB_HC_StartXfer+0x33c>)
 8009844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009848:	08009859 	.word	0x08009859
 800984c:	0800987b 	.word	0x0800987b
 8009850:	0800989d 	.word	0x0800989d
 8009854:	080098bf 	.word	0x080098bf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	4413      	add	r3, r2
 8009860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	69fa      	ldr	r2, [r7, #28]
 8009868:	0151      	lsls	r1, r2, #5
 800986a:	6a3a      	ldr	r2, [r7, #32]
 800986c:	440a      	add	r2, r1
 800986e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009876:	6053      	str	r3, [r2, #4]
          break;
 8009878:	e03d      	b.n	80098f6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	015a      	lsls	r2, r3, #5
 800987e:	6a3b      	ldr	r3, [r7, #32]
 8009880:	4413      	add	r3, r2
 8009882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	69fa      	ldr	r2, [r7, #28]
 800988a:	0151      	lsls	r1, r2, #5
 800988c:	6a3a      	ldr	r2, [r7, #32]
 800988e:	440a      	add	r2, r1
 8009890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009894:	f043 030e 	orr.w	r3, r3, #14
 8009898:	6053      	str	r3, [r2, #4]
          break;
 800989a:	e02c      	b.n	80098f6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	015a      	lsls	r2, r3, #5
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	69fa      	ldr	r2, [r7, #28]
 80098ac:	0151      	lsls	r1, r2, #5
 80098ae:	6a3a      	ldr	r2, [r7, #32]
 80098b0:	440a      	add	r2, r1
 80098b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098ba:	6053      	str	r3, [r2, #4]
          break;
 80098bc:	e01b      	b.n	80098f6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	015a      	lsls	r2, r3, #5
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	69fa      	ldr	r2, [r7, #28]
 80098ce:	0151      	lsls	r1, r2, #5
 80098d0:	6a3a      	ldr	r2, [r7, #32]
 80098d2:	440a      	add	r2, r1
 80098d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098dc:	6053      	str	r3, [r2, #4]
          break;
 80098de:	e00a      	b.n	80098f6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ec:	461a      	mov	r2, r3
 80098ee:	2300      	movs	r3, #0
 80098f0:	6053      	str	r3, [r2, #4]
 80098f2:	e000      	b.n	80098f6 <USB_HC_StartXfer+0x3ea>
          break;
 80098f4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800990c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	78db      	ldrb	r3, [r3, #3]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d004      	beq.n	8009920 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800991c:	613b      	str	r3, [r7, #16]
 800991e:	e003      	b.n	8009928 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009926:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800992e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	4413      	add	r3, r2
 8009938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800993c:	461a      	mov	r2, r3
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d003      	beq.n	8009950 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	e055      	b.n	80099f8 <USB_HC_StartXfer+0x4ec>
 800994c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	78db      	ldrb	r3, [r3, #3]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d14e      	bne.n	80099f6 <USB_HC_StartXfer+0x4ea>
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d04a      	beq.n	80099f6 <USB_HC_StartXfer+0x4ea>
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	79db      	ldrb	r3, [r3, #7]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d146      	bne.n	80099f6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	7c9b      	ldrb	r3, [r3, #18]
 800996c:	2b03      	cmp	r3, #3
 800996e:	d831      	bhi.n	80099d4 <USB_HC_StartXfer+0x4c8>
 8009970:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <USB_HC_StartXfer+0x46c>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	08009989 	.word	0x08009989
 800997c:	080099ad 	.word	0x080099ad
 8009980:	08009989 	.word	0x08009989
 8009984:	080099ad 	.word	0x080099ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6a1b      	ldr	r3, [r3, #32]
 800998c:	3303      	adds	r3, #3
 800998e:	089b      	lsrs	r3, r3, #2
 8009990:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009992:	8afa      	ldrh	r2, [r7, #22]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009998:	b29b      	uxth	r3, r3
 800999a:	429a      	cmp	r2, r3
 800999c:	d91c      	bls.n	80099d8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	f043 0220 	orr.w	r2, r3, #32
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80099aa:	e015      	b.n	80099d8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	3303      	adds	r3, #3
 80099b2:	089b      	lsrs	r3, r3, #2
 80099b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80099b6:	8afa      	ldrh	r2, [r7, #22]
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d90a      	bls.n	80099dc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80099d2:	e003      	b.n	80099dc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80099d4:	bf00      	nop
 80099d6:	e002      	b.n	80099de <USB_HC_StartXfer+0x4d2>
        break;
 80099d8:	bf00      	nop
 80099da:	e000      	b.n	80099de <USB_HC_StartXfer+0x4d2>
        break;
 80099dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	6999      	ldr	r1, [r3, #24]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	785a      	ldrb	r2, [r3, #1]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	2000      	movs	r0, #0
 80099ee:	9000      	str	r0, [sp, #0]
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f7ff f9c9 	bl	8008d88 <USB_WritePacket>
  }

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3728      	adds	r7, #40	; 0x28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	b29b      	uxth	r3, r3
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b089      	sub	sp, #36	; 0x24
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009a32:	78fb      	ldrb	r3, [r7, #3]
 8009a34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	0c9b      	lsrs	r3, r3, #18
 8009a4a:	f003 0303 	and.w	r3, r3, #3
 8009a4e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	0fdb      	lsrs	r3, r3, #31
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	0fdb      	lsrs	r3, r3, #31
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f003 0320 	and.w	r3, r3, #32
 8009a84:	2b20      	cmp	r3, #32
 8009a86:	d10d      	bne.n	8009aa4 <USB_HC_Halt+0x82>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10a      	bne.n	8009aa4 <USB_HC_Halt+0x82>
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d005      	beq.n	8009aa0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d002      	beq.n	8009aa0 <USB_HC_Halt+0x7e>
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b03      	cmp	r3, #3
 8009a9e:	d101      	bne.n	8009aa4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e0d8      	b.n	8009c56 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d002      	beq.n	8009ab0 <USB_HC_Halt+0x8e>
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d173      	bne.n	8009b98 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	0151      	lsls	r1, r2, #5
 8009ac2:	69fa      	ldr	r2, [r7, #28]
 8009ac4:	440a      	add	r2, r1
 8009ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ace:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d14a      	bne.n	8009b72 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d133      	bne.n	8009b50 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69ba      	ldr	r2, [r7, #24]
 8009af8:	0151      	lsls	r1, r2, #5
 8009afa:	69fa      	ldr	r2, [r7, #28]
 8009afc:	440a      	add	r2, r1
 8009afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b06:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	0151      	lsls	r1, r2, #5
 8009b1a:	69fa      	ldr	r2, [r7, #28]
 8009b1c:	440a      	add	r2, r1
 8009b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b26:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b34:	d82e      	bhi.n	8009b94 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b4c:	d0ec      	beq.n	8009b28 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b4e:	e081      	b.n	8009c54 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	0151      	lsls	r1, r2, #5
 8009b62:	69fa      	ldr	r2, [r7, #28]
 8009b64:	440a      	add	r2, r1
 8009b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b6e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b70:	e070      	b.n	8009c54 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69ba      	ldr	r2, [r7, #24]
 8009b82:	0151      	lsls	r1, r2, #5
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	440a      	add	r2, r1
 8009b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b90:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b92:	e05f      	b.n	8009c54 <USB_HC_Halt+0x232>
            break;
 8009b94:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b96:	e05d      	b.n	8009c54 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	0151      	lsls	r1, r2, #5
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	440a      	add	r2, r1
 8009bae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bb6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d133      	bne.n	8009c30 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	0151      	lsls	r1, r2, #5
 8009bda:	69fa      	ldr	r2, [r7, #28]
 8009bdc:	440a      	add	r2, r1
 8009bde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009be6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	0151      	lsls	r1, r2, #5
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	440a      	add	r2, r1
 8009bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c06:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c14:	d81d      	bhi.n	8009c52 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c2c:	d0ec      	beq.n	8009c08 <USB_HC_Halt+0x1e6>
 8009c2e:	e011      	b.n	8009c54 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	0151      	lsls	r1, r2, #5
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	440a      	add	r2, r1
 8009c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	e000      	b.n	8009c54 <USB_HC_Halt+0x232>
          break;
 8009c52:	bf00      	nop
    }
  }

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3724      	adds	r7, #36	; 0x24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
	...

08009c64 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	04da      	lsls	r2, r3, #19
 8009c80:	4b15      	ldr	r3, [pc, #84]	; (8009cd8 <USB_DoPing+0x74>)
 8009c82:	4013      	ands	r3, r2
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	0151      	lsls	r1, r2, #5
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	440a      	add	r2, r1
 8009c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c94:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	015a      	lsls	r2, r3, #5
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009cac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cb4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	1ff80000 	.word	0x1ff80000

08009cdc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009cec:	2300      	movs	r3, #0
 8009cee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7fe ff8c 	bl	8008c0e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009cf6:	2110      	movs	r1, #16
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7fe ffe5 	bl	8008cc8 <USB_FlushTxFifo>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff f80f 	bl	8008d2c <USB_FlushRxFifo>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	61bb      	str	r3, [r7, #24]
 8009d1c:	e01f      	b.n	8009d5e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	015a      	lsls	r2, r3, #5
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	4413      	add	r3, r2
 8009d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	015a      	lsls	r2, r3, #5
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d52:	461a      	mov	r2, r3
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	61bb      	str	r3, [r7, #24]
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	2b0f      	cmp	r3, #15
 8009d62:	d9dc      	bls.n	8009d1e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009d64:	2300      	movs	r3, #0
 8009d66:	61bb      	str	r3, [r7, #24]
 8009d68:	e034      	b.n	8009dd4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d80:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	015a      	lsls	r2, r3, #5
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	4413      	add	r3, r2
 8009d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d9e:	461a      	mov	r2, r3
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3301      	adds	r3, #1
 8009da8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009db0:	d80c      	bhi.n	8009dcc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dc8:	d0ec      	beq.n	8009da4 <USB_StopHost+0xc8>
 8009dca:	e000      	b.n	8009dce <USB_StopHost+0xf2>
        break;
 8009dcc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	61bb      	str	r3, [r7, #24]
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	2b0f      	cmp	r3, #15
 8009dd8:	d9c7      	bls.n	8009d6a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009de0:	461a      	mov	r2, r3
 8009de2:	f04f 33ff 	mov.w	r3, #4294967295
 8009de6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f04f 32ff 	mov.w	r2, #4294967295
 8009dee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7fe fefb 	bl	8008bec <USB_EnableGlobalInt>

  return ret;
 8009df6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3720      	adds	r7, #32
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009e00:	b590      	push	{r4, r7, lr}
 8009e02:	b089      	sub	sp, #36	; 0x24
 8009e04:	af04      	add	r7, sp, #16
 8009e06:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009e08:	2301      	movs	r3, #1
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	2102      	movs	r1, #2
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fc85 	bl	800a71e <USBH_FindInterface>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	2bff      	cmp	r3, #255	; 0xff
 8009e1c:	d002      	beq.n	8009e24 <USBH_CDC_InterfaceInit+0x24>
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d901      	bls.n	8009e28 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009e24:	2302      	movs	r3, #2
 8009e26:	e13d      	b.n	800a0a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fc5a 	bl	800a6e6 <USBH_SelectInterface>
 8009e32:	4603      	mov	r3, r0
 8009e34:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	e131      	b.n	800a0a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009e46:	2050      	movs	r0, #80	; 0x50
 8009e48:	f002 fb74 	bl	800c534 <malloc>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009e60:	2302      	movs	r3, #2
 8009e62:	e11f      	b.n	800a0a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009e64:	2250      	movs	r2, #80	; 0x50
 8009e66:	2100      	movs	r1, #0
 8009e68:	68b8      	ldr	r0, [r7, #8]
 8009e6a:	f003 f9de 	bl	800d22a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	211a      	movs	r1, #26
 8009e74:	fb01 f303 	mul.w	r3, r1, r3
 8009e78:	4413      	add	r3, r2
 8009e7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	b25b      	sxtb	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	da15      	bge.n	8009eb2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	211a      	movs	r1, #26
 8009e8c:	fb01 f303 	mul.w	r3, r1, r3
 8009e90:	4413      	add	r3, r2
 8009e92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e96:	781a      	ldrb	r2, [r3, #0]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	211a      	movs	r1, #26
 8009ea2:	fb01 f303 	mul.w	r3, r1, r3
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009eac:	881a      	ldrh	r2, [r3, #0]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	785b      	ldrb	r3, [r3, #1]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f001 ffce 	bl	800be5a <USBH_AllocPipe>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	7819      	ldrb	r1, [r3, #0]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	7858      	ldrb	r0, [r3, #1]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	8952      	ldrh	r2, [r2, #10]
 8009ede:	9202      	str	r2, [sp, #8]
 8009ee0:	2203      	movs	r2, #3
 8009ee2:	9201      	str	r2, [sp, #4]
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	4602      	mov	r2, r0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f001 ff86 	bl	800bdfc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f002 fa95 	bl	800c428 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009efe:	2300      	movs	r3, #0
 8009f00:	2200      	movs	r2, #0
 8009f02:	210a      	movs	r1, #10
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fc0a 	bl	800a71e <USBH_FindInterface>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2bff      	cmp	r3, #255	; 0xff
 8009f12:	d002      	beq.n	8009f1a <USBH_CDC_InterfaceInit+0x11a>
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d901      	bls.n	8009f1e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	e0c2      	b.n	800a0a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	211a      	movs	r1, #26
 8009f24:	fb01 f303 	mul.w	r3, r1, r3
 8009f28:	4413      	add	r3, r2
 8009f2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	b25b      	sxtb	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	da16      	bge.n	8009f64 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	211a      	movs	r1, #26
 8009f3c:	fb01 f303 	mul.w	r3, r1, r3
 8009f40:	4413      	add	r3, r2
 8009f42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009f46:	781a      	ldrb	r2, [r3, #0]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	211a      	movs	r1, #26
 8009f52:	fb01 f303 	mul.w	r3, r1, r3
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009f5c:	881a      	ldrh	r2, [r3, #0]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	835a      	strh	r2, [r3, #26]
 8009f62:	e015      	b.n	8009f90 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	211a      	movs	r1, #26
 8009f6a:	fb01 f303 	mul.w	r3, r1, r3
 8009f6e:	4413      	add	r3, r2
 8009f70:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009f74:	781a      	ldrb	r2, [r3, #0]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	211a      	movs	r1, #26
 8009f80:	fb01 f303 	mul.w	r3, r1, r3
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009f8a:	881a      	ldrh	r2, [r3, #0]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	211a      	movs	r1, #26
 8009f96:	fb01 f303 	mul.w	r3, r1, r3
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	b25b      	sxtb	r3, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	da16      	bge.n	8009fd6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	211a      	movs	r1, #26
 8009fae:	fb01 f303 	mul.w	r3, r1, r3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009fb8:	781a      	ldrb	r2, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	211a      	movs	r1, #26
 8009fc4:	fb01 f303 	mul.w	r3, r1, r3
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009fce:	881a      	ldrh	r2, [r3, #0]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	835a      	strh	r2, [r3, #26]
 8009fd4:	e015      	b.n	800a002 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	211a      	movs	r1, #26
 8009fdc:	fb01 f303 	mul.w	r3, r1, r3
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	211a      	movs	r1, #26
 8009ff2:	fb01 f303 	mul.w	r3, r1, r3
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009ffc:	881a      	ldrh	r2, [r3, #0]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	7b9b      	ldrb	r3, [r3, #14]
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 ff26 	bl	800be5a <USBH_AllocPipe>
 800a00e:	4603      	mov	r3, r0
 800a010:	461a      	mov	r2, r3
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	7bdb      	ldrb	r3, [r3, #15]
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f001 ff1c 	bl	800be5a <USBH_AllocPipe>
 800a022:	4603      	mov	r3, r0
 800a024:	461a      	mov	r2, r3
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	7b59      	ldrb	r1, [r3, #13]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	7b98      	ldrb	r0, [r3, #14]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	8b12      	ldrh	r2, [r2, #24]
 800a042:	9202      	str	r2, [sp, #8]
 800a044:	2202      	movs	r2, #2
 800a046:	9201      	str	r2, [sp, #4]
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	4623      	mov	r3, r4
 800a04c:	4602      	mov	r2, r0
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f001 fed4 	bl	800bdfc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	7b19      	ldrb	r1, [r3, #12]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	7bd8      	ldrb	r0, [r3, #15]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	8b52      	ldrh	r2, [r2, #26]
 800a06c:	9202      	str	r2, [sp, #8]
 800a06e:	2202      	movs	r2, #2
 800a070:	9201      	str	r2, [sp, #4]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	4623      	mov	r3, r4
 800a076:	4602      	mov	r2, r0
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f001 febf 	bl	800bdfc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	7b5b      	ldrb	r3, [r3, #13]
 800a08a:	2200      	movs	r2, #0
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f002 f9ca 	bl	800c428 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	7b1b      	ldrb	r3, [r3, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f002 f9c3 	bl	800c428 <USBH_LL_SetToggle>

  return USBH_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd90      	pop	{r4, r7, pc}

0800a0ac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00e      	beq.n	800a0e4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 feb4 	bl	800be3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 fedf 	bl	800be9c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	7b1b      	ldrb	r3, [r3, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00e      	beq.n	800a10a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	7b1b      	ldrb	r3, [r3, #12]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 fea1 	bl	800be3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	7b1b      	ldrb	r3, [r3, #12]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f001 fecc 	bl	800be9c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	7b5b      	ldrb	r3, [r3, #13]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00e      	beq.n	800a130 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	7b5b      	ldrb	r3, [r3, #13]
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 fe8e 	bl	800be3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	7b5b      	ldrb	r3, [r3, #13]
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f001 feb9 	bl	800be9c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00b      	beq.n	800a154 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	4618      	mov	r0, r3
 800a146:	f002 f9fd 	bl	800c544 <free>
    phost->pActiveClass->pData = 0U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a150:	2200      	movs	r2, #0
 800a152:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	3340      	adds	r3, #64	; 0x40
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f8b1 	bl	800a2de <GetLineCoding>
 800a17c:	4603      	mov	r3, r0
 800a17e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a180:	7afb      	ldrb	r3, [r7, #11]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d105      	bne.n	800a192 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a18c:	2102      	movs	r1, #2
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a192:	7afb      	ldrb	r3, [r7, #11]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	d877      	bhi.n	800a2b0 <USBH_CDC_Process+0x114>
 800a1c0:	a201      	add	r2, pc, #4	; (adr r2, 800a1c8 <USBH_CDC_Process+0x2c>)
 800a1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c6:	bf00      	nop
 800a1c8:	0800a1dd 	.word	0x0800a1dd
 800a1cc:	0800a1e3 	.word	0x0800a1e3
 800a1d0:	0800a213 	.word	0x0800a213
 800a1d4:	0800a287 	.word	0x0800a287
 800a1d8:	0800a295 	.word	0x0800a295
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73fb      	strb	r3, [r7, #15]
      break;
 800a1e0:	e06d      	b.n	800a2be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f897 	bl	800a31c <SetLineCoding>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a1f2:	7bbb      	ldrb	r3, [r7, #14]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a200:	e058      	b.n	800a2b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a202:	7bbb      	ldrb	r3, [r7, #14]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d055      	beq.n	800a2b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2204      	movs	r2, #4
 800a20c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a210:	e050      	b.n	800a2b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	3340      	adds	r3, #64	; 0x40
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f860 	bl	800a2de <GetLineCoding>
 800a21e:	4603      	mov	r3, r0
 800a220:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a222:	7bbb      	ldrb	r3, [r7, #14]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d126      	bne.n	800a276 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a23a:	791b      	ldrb	r3, [r3, #4]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d13b      	bne.n	800a2b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a24a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d133      	bne.n	800a2b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a25a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d12b      	bne.n	800a2b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a268:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d124      	bne.n	800a2b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f958 	bl	800a524 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a274:	e020      	b.n	800a2b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a276:	7bbb      	ldrb	r3, [r7, #14]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d01d      	beq.n	800a2b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2204      	movs	r2, #4
 800a280:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a284:	e018      	b.n	800a2b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f867 	bl	800a35a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f8da 	bl	800a446 <CDC_ProcessReception>
      break;
 800a292:	e014      	b.n	800a2be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a294:	2100      	movs	r1, #0
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 f822 	bl	800b2e0 <USBH_ClrFeature>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10a      	bne.n	800a2bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a2ae:	e005      	b.n	800a2bc <USBH_CDC_Process+0x120>

    default:
      break;
 800a2b0:	bf00      	nop
 800a2b2:	e004      	b.n	800a2be <USBH_CDC_Process+0x122>
      break;
 800a2b4:	bf00      	nop
 800a2b6:	e002      	b.n	800a2be <USBH_CDC_Process+0x122>
      break;
 800a2b8:	bf00      	nop
 800a2ba:	e000      	b.n	800a2be <USBH_CDC_Process+0x122>
      break;
 800a2bc:	bf00      	nop

  }

  return status;
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	22a1      	movs	r2, #161	; 0xa1
 800a2ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2221      	movs	r2, #33	; 0x21
 800a2f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2207      	movs	r2, #7
 800a304:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	2207      	movs	r2, #7
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f001 fb23 	bl	800b958 <USBH_CtlReq>
 800a312:	4603      	mov	r3, r0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2221      	movs	r2, #33	; 0x21
 800a32a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2220      	movs	r2, #32
 800a330:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2207      	movs	r2, #7
 800a342:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2207      	movs	r2, #7
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f001 fb04 	bl	800b958 <USBH_CtlReq>
 800a350:	4603      	mov	r3, r0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b086      	sub	sp, #24
 800a35e:	af02      	add	r7, sp, #8
 800a360:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a36c:	2300      	movs	r3, #0
 800a36e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a376:	2b01      	cmp	r3, #1
 800a378:	d002      	beq.n	800a380 <CDC_ProcessTransmission+0x26>
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d023      	beq.n	800a3c6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a37e:	e05e      	b.n	800a43e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	8b12      	ldrh	r2, [r2, #24]
 800a388:	4293      	cmp	r3, r2
 800a38a:	d90b      	bls.n	800a3a4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	69d9      	ldr	r1, [r3, #28]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	8b1a      	ldrh	r2, [r3, #24]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	7b5b      	ldrb	r3, [r3, #13]
 800a398:	2001      	movs	r0, #1
 800a39a:	9000      	str	r0, [sp, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f001 fcea 	bl	800bd76 <USBH_BulkSendData>
 800a3a2:	e00b      	b.n	800a3bc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	7b5b      	ldrb	r3, [r3, #13]
 800a3b2:	2001      	movs	r0, #1
 800a3b4:	9000      	str	r0, [sp, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f001 fcdd 	bl	800bd76 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a3c4:	e03b      	b.n	800a43e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	7b5b      	ldrb	r3, [r3, #13]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f002 f801 	bl	800c3d4 <USBH_LL_GetURBState>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a3d6:	7afb      	ldrb	r3, [r7, #11]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d128      	bne.n	800a42e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	8b12      	ldrh	r2, [r2, #24]
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d90e      	bls.n	800a406 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	8b12      	ldrh	r2, [r2, #24]
 800a3f0:	1a9a      	subs	r2, r3, r2
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	8b12      	ldrh	r2, [r2, #24]
 800a3fe:	441a      	add	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	61da      	str	r2, [r3, #28]
 800a404:	e002      	b.n	800a40c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a410:	2b00      	cmp	r3, #0
 800a412:	d004      	beq.n	800a41e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a41c:	e00e      	b.n	800a43c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f868 	bl	800a4fc <USBH_CDC_TransmitCallback>
      break;
 800a42c:	e006      	b.n	800a43c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	2b02      	cmp	r3, #2
 800a432:	d103      	bne.n	800a43c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a43c:	bf00      	nop
  }
}
 800a43e:	bf00      	nop
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b086      	sub	sp, #24
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a458:	2300      	movs	r3, #0
 800a45a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a462:	2b03      	cmp	r3, #3
 800a464:	d002      	beq.n	800a46c <CDC_ProcessReception+0x26>
 800a466:	2b04      	cmp	r3, #4
 800a468:	d00e      	beq.n	800a488 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a46a:	e043      	b.n	800a4f4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	6a19      	ldr	r1, [r3, #32]
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	8b5a      	ldrh	r2, [r3, #26]
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	7b1b      	ldrb	r3, [r3, #12]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f001 fca1 	bl	800bdc0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2204      	movs	r2, #4
 800a482:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a486:	e035      	b.n	800a4f4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	7b1b      	ldrb	r3, [r3, #12]
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 ffa0 	bl	800c3d4 <USBH_LL_GetURBState>
 800a494:	4603      	mov	r3, r0
 800a496:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a498:	7cfb      	ldrb	r3, [r7, #19]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d129      	bne.n	800a4f2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	7b1b      	ldrb	r3, [r3, #12]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f001 ff03 	bl	800c2b0 <USBH_LL_GetLastXferSize>
 800a4aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d016      	beq.n	800a4e4 <CDC_ProcessReception+0x9e>
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	8b5b      	ldrh	r3, [r3, #26]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d910      	bls.n	800a4e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	1ad2      	subs	r2, r2, r3
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	6a1a      	ldr	r2, [r3, #32]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	441a      	add	r2, r3
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2203      	movs	r2, #3
 800a4de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a4e2:	e006      	b.n	800a4f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f80f 	bl	800a510 <USBH_CDC_ReceiveCallback>
      break;
 800a4f2:	bf00      	nop
  }
}
 800a4f4:	bf00      	nop
 800a4f6:	3718      	adds	r7, #24
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	4613      	mov	r3, r2
 800a544:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a54c:	2302      	movs	r3, #2
 800a54e:	e029      	b.n	800a5a4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	79fa      	ldrb	r2, [r7, #7]
 800a554:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 f81f 	bl	800a5ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d003      	beq.n	800a59c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f001 fdd3 	bl	800c148 <USBH_LL_Init>

  return USBH_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]
 800a5bc:	e009      	b.n	800a5d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	33e0      	adds	r3, #224	; 0xe0
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	60fb      	str	r3, [r7, #12]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b0f      	cmp	r3, #15
 800a5d6:	d9f2      	bls.n	800a5be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	e009      	b.n	800a5f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5f8:	d3f1      	bcc.n	800a5de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2240      	movs	r2, #64	; 0x40
 800a61e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	331c      	adds	r3, #28
 800a64a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a64e:	2100      	movs	r1, #0
 800a650:	4618      	mov	r0, r3
 800a652:	f002 fdea 	bl	800d22a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a65c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a660:	2100      	movs	r1, #0
 800a662:	4618      	mov	r0, r3
 800a664:	f002 fde1 	bl	800d22a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f203 3326 	addw	r3, r3, #806	; 0x326
 800a66e:	2212      	movs	r2, #18
 800a670:	2100      	movs	r1, #0
 800a672:	4618      	mov	r0, r3
 800a674:	f002 fdd9 	bl	800d22a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a67e:	223e      	movs	r2, #62	; 0x3e
 800a680:	2100      	movs	r1, #0
 800a682:	4618      	mov	r0, r3
 800a684:	f002 fdd1 	bl	800d22a <memset>

  return USBH_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a692:	b480      	push	{r7}
 800a694:	b085      	sub	sp, #20
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d016      	beq.n	800a6d4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10e      	bne.n	800a6ce <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6b6:	1c59      	adds	r1, r3, #1
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	33de      	adds	r3, #222	; 0xde
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73fb      	strb	r3, [r7, #15]
 800a6cc:	e004      	b.n	800a6d8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	73fb      	strb	r3, [r7, #15]
 800a6d2:	e001      	b.n	800a6d8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b085      	sub	sp, #20
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a6fc:	78fa      	ldrb	r2, [r7, #3]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d204      	bcs.n	800a70c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	78fa      	ldrb	r2, [r7, #3]
 800a706:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a70a:	e001      	b.n	800a710 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a70c:	2302      	movs	r3, #2
 800a70e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a710:	7bfb      	ldrb	r3, [r7, #15]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a71e:	b480      	push	{r7}
 800a720:	b087      	sub	sp, #28
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	461a      	mov	r2, r3
 800a72c:	4603      	mov	r3, r0
 800a72e:	70fb      	strb	r3, [r7, #3]
 800a730:	460b      	mov	r3, r1
 800a732:	70bb      	strb	r3, [r7, #2]
 800a734:	4613      	mov	r3, r2
 800a736:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a746:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a748:	e025      	b.n	800a796 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	221a      	movs	r2, #26
 800a74e:	fb02 f303 	mul.w	r3, r2, r3
 800a752:	3308      	adds	r3, #8
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4413      	add	r3, r2
 800a758:	3302      	adds	r3, #2
 800a75a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	795b      	ldrb	r3, [r3, #5]
 800a760:	78fa      	ldrb	r2, [r7, #3]
 800a762:	429a      	cmp	r2, r3
 800a764:	d002      	beq.n	800a76c <USBH_FindInterface+0x4e>
 800a766:	78fb      	ldrb	r3, [r7, #3]
 800a768:	2bff      	cmp	r3, #255	; 0xff
 800a76a:	d111      	bne.n	800a790 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a770:	78ba      	ldrb	r2, [r7, #2]
 800a772:	429a      	cmp	r2, r3
 800a774:	d002      	beq.n	800a77c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a776:	78bb      	ldrb	r3, [r7, #2]
 800a778:	2bff      	cmp	r3, #255	; 0xff
 800a77a:	d109      	bne.n	800a790 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a780:	787a      	ldrb	r2, [r7, #1]
 800a782:	429a      	cmp	r2, r3
 800a784:	d002      	beq.n	800a78c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a786:	787b      	ldrb	r3, [r7, #1]
 800a788:	2bff      	cmp	r3, #255	; 0xff
 800a78a:	d101      	bne.n	800a790 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
 800a78e:	e006      	b.n	800a79e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a790:	7dfb      	ldrb	r3, [r7, #23]
 800a792:	3301      	adds	r3, #1
 800a794:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a796:	7dfb      	ldrb	r3, [r7, #23]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d9d6      	bls.n	800a74a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a79c:	23ff      	movs	r3, #255	; 0xff
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	371c      	adds	r7, #28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f001 fd04 	bl	800c1c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 fe1d 	bl	800c3fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
	...

0800a7cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b088      	sub	sp, #32
 800a7d0:	af04      	add	r7, sp, #16
 800a7d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d102      	bne.n	800a7ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2203      	movs	r2, #3
 800a7ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b0b      	cmp	r3, #11
 800a7f6:	f200 81be 	bhi.w	800ab76 <USBH_Process+0x3aa>
 800a7fa:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <USBH_Process+0x34>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a831 	.word	0x0800a831
 800a804:	0800a863 	.word	0x0800a863
 800a808:	0800a8cb 	.word	0x0800a8cb
 800a80c:	0800ab11 	.word	0x0800ab11
 800a810:	0800ab77 	.word	0x0800ab77
 800a814:	0800a96f 	.word	0x0800a96f
 800a818:	0800aab7 	.word	0x0800aab7
 800a81c:	0800a9a5 	.word	0x0800a9a5
 800a820:	0800a9c5 	.word	0x0800a9c5
 800a824:	0800a9e5 	.word	0x0800a9e5
 800a828:	0800aa29 	.word	0x0800aa29
 800a82c:	0800aaf9 	.word	0x0800aaf9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 819e 	beq.w	800ab7a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a844:	20c8      	movs	r0, #200	; 0xc8
 800a846:	f001 fe22 	bl	800c48e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 fd15 	bl	800c27a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a860:	e18b      	b.n	800ab7a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d107      	bne.n	800a87c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2202      	movs	r2, #2
 800a878:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a87a:	e18d      	b.n	800ab98 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a886:	d914      	bls.n	800a8b2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a88e:	3301      	adds	r3, #1
 800a890:	b2da      	uxtb	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d903      	bls.n	800a8aa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	220d      	movs	r2, #13
 800a8a6:	701a      	strb	r2, [r3, #0]
      break;
 800a8a8:	e176      	b.n	800ab98 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	701a      	strb	r2, [r3, #0]
      break;
 800a8b0:	e172      	b.n	800ab98 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a8b8:	f103 020a 	add.w	r2, r3, #10
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a8c2:	200a      	movs	r0, #10
 800a8c4:	f001 fde3 	bl	800c48e <USBH_Delay>
      break;
 800a8c8:	e166      	b.n	800ab98 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d005      	beq.n	800a8e0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8da:	2104      	movs	r1, #4
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a8e0:	2064      	movs	r0, #100	; 0x64
 800a8e2:	f001 fdd4 	bl	800c48e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f001 fca0 	bl	800c22c <USBH_LL_GetSpeed>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2205      	movs	r2, #5
 800a8fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f001 faab 	bl	800be5a <USBH_AllocPipe>
 800a904:	4603      	mov	r3, r0
 800a906:	461a      	mov	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a90c:	2180      	movs	r1, #128	; 0x80
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 faa3 	bl	800be5a <USBH_AllocPipe>
 800a914:	4603      	mov	r3, r0
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	7919      	ldrb	r1, [r3, #4]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a930:	b292      	uxth	r2, r2
 800a932:	9202      	str	r2, [sp, #8]
 800a934:	2200      	movs	r2, #0
 800a936:	9201      	str	r2, [sp, #4]
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	4603      	mov	r3, r0
 800a93c:	2280      	movs	r2, #128	; 0x80
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f001 fa5c 	bl	800bdfc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	7959      	ldrb	r1, [r3, #5]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a958:	b292      	uxth	r2, r2
 800a95a:	9202      	str	r2, [sp, #8]
 800a95c:	2200      	movs	r2, #0
 800a95e:	9201      	str	r2, [sp, #4]
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	4603      	mov	r3, r0
 800a964:	2200      	movs	r2, #0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f001 fa48 	bl	800bdfc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a96c:	e114      	b.n	800ab98 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f918 	bl	800aba4 <USBH_HandleEnum>
 800a974:	4603      	mov	r3, r0
 800a976:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f040 80fe 	bne.w	800ab7e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a990:	2b01      	cmp	r3, #1
 800a992:	d103      	bne.n	800a99c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2208      	movs	r2, #8
 800a998:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a99a:	e0f0      	b.n	800ab7e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2207      	movs	r2, #7
 800a9a0:	701a      	strb	r2, [r3, #0]
      break;
 800a9a2:	e0ec      	b.n	800ab7e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 80e9 	beq.w	800ab82 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9b6:	2101      	movs	r1, #1
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2208      	movs	r2, #8
 800a9c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a9c2:	e0de      	b.n	800ab82 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fc3f 	bl	800b252 <USBH_SetCfg>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f040 80d5 	bne.w	800ab86 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2209      	movs	r2, #9
 800a9e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a9e2:	e0d0      	b.n	800ab86 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a9ea:	f003 0320 	and.w	r3, r3, #32
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d016      	beq.n	800aa20 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fc4f 	bl	800b298 <USBH_SetFeature>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d103      	bne.n	800aa0e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	220a      	movs	r2, #10
 800aa0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa0c:	e0bd      	b.n	800ab8a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800aa0e:	7bbb      	ldrb	r3, [r7, #14]
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	f040 80b9 	bne.w	800ab8a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	220a      	movs	r2, #10
 800aa1c:	701a      	strb	r2, [r3, #0]
      break;
 800aa1e:	e0b4      	b.n	800ab8a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	220a      	movs	r2, #10
 800aa24:	701a      	strb	r2, [r3, #0]
      break;
 800aa26:	e0b0      	b.n	800ab8a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f000 80ad 	beq.w	800ab8e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	73fb      	strb	r3, [r7, #15]
 800aa40:	e016      	b.n	800aa70 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aa42:	7bfa      	ldrb	r2, [r7, #15]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	32de      	adds	r2, #222	; 0xde
 800aa48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa4c:	791a      	ldrb	r2, [r3, #4]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d108      	bne.n	800aa6a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aa58:	7bfa      	ldrb	r2, [r7, #15]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	32de      	adds	r2, #222	; 0xde
 800aa5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800aa68:	e005      	b.n	800aa76 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	73fb      	strb	r3, [r7, #15]
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0e5      	beq.n	800aa42 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d016      	beq.n	800aaae <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	4798      	blx	r3
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d109      	bne.n	800aaa6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2206      	movs	r2, #6
 800aa96:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa9e:	2103      	movs	r1, #3
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aaa4:	e073      	b.n	800ab8e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	220d      	movs	r2, #13
 800aaaa:	701a      	strb	r2, [r3, #0]
      break;
 800aaac:	e06f      	b.n	800ab8e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	220d      	movs	r2, #13
 800aab2:	701a      	strb	r2, [r3, #0]
      break;
 800aab4:	e06b      	b.n	800ab8e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d017      	beq.n	800aaf0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	4798      	blx	r3
 800aacc:	4603      	mov	r3, r0
 800aace:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d103      	bne.n	800aae0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	220b      	movs	r2, #11
 800aadc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aade:	e058      	b.n	800ab92 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d154      	bne.n	800ab92 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	220d      	movs	r2, #13
 800aaec:	701a      	strb	r2, [r3, #0]
      break;
 800aaee:	e050      	b.n	800ab92 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	220d      	movs	r2, #13
 800aaf4:	701a      	strb	r2, [r3, #0]
      break;
 800aaf6:	e04c      	b.n	800ab92 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d049      	beq.n	800ab96 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	4798      	blx	r3
      }
      break;
 800ab0e:	e042      	b.n	800ab96 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7ff fd47 	bl	800a5ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d009      	beq.n	800ab3c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d005      	beq.n	800ab52 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab4c:	2105      	movs	r1, #5
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d107      	bne.n	800ab6e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7ff fe1f 	bl	800a7aa <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab6c:	e014      	b.n	800ab98 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f001 fb26 	bl	800c1c0 <USBH_LL_Start>
      break;
 800ab74:	e010      	b.n	800ab98 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800ab76:	bf00      	nop
 800ab78:	e00e      	b.n	800ab98 <USBH_Process+0x3cc>
      break;
 800ab7a:	bf00      	nop
 800ab7c:	e00c      	b.n	800ab98 <USBH_Process+0x3cc>
      break;
 800ab7e:	bf00      	nop
 800ab80:	e00a      	b.n	800ab98 <USBH_Process+0x3cc>
    break;
 800ab82:	bf00      	nop
 800ab84:	e008      	b.n	800ab98 <USBH_Process+0x3cc>
      break;
 800ab86:	bf00      	nop
 800ab88:	e006      	b.n	800ab98 <USBH_Process+0x3cc>
      break;
 800ab8a:	bf00      	nop
 800ab8c:	e004      	b.n	800ab98 <USBH_Process+0x3cc>
      break;
 800ab8e:	bf00      	nop
 800ab90:	e002      	b.n	800ab98 <USBH_Process+0x3cc>
      break;
 800ab92:	bf00      	nop
 800ab94:	e000      	b.n	800ab98 <USBH_Process+0x3cc>
      break;
 800ab96:	bf00      	nop
  }
  return USBH_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop

0800aba4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b088      	sub	sp, #32
 800aba8:	af04      	add	r7, sp, #16
 800abaa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800abac:	2301      	movs	r3, #1
 800abae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800abb0:	2301      	movs	r3, #1
 800abb2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	785b      	ldrb	r3, [r3, #1]
 800abb8:	2b07      	cmp	r3, #7
 800abba:	f200 81c1 	bhi.w	800af40 <USBH_HandleEnum+0x39c>
 800abbe:	a201      	add	r2, pc, #4	; (adr r2, 800abc4 <USBH_HandleEnum+0x20>)
 800abc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc4:	0800abe5 	.word	0x0800abe5
 800abc8:	0800aca3 	.word	0x0800aca3
 800abcc:	0800ad0d 	.word	0x0800ad0d
 800abd0:	0800ad9b 	.word	0x0800ad9b
 800abd4:	0800ae05 	.word	0x0800ae05
 800abd8:	0800ae75 	.word	0x0800ae75
 800abdc:	0800aebb 	.word	0x0800aebb
 800abe0:	0800af01 	.word	0x0800af01
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800abe4:	2108      	movs	r1, #8
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fa50 	bl	800b08c <USBH_Get_DevDesc>
 800abec:	4603      	mov	r3, r0
 800abee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abf0:	7bbb      	ldrb	r3, [r7, #14]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d130      	bne.n	800ac58 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	7919      	ldrb	r1, [r3, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac1a:	b292      	uxth	r2, r2
 800ac1c:	9202      	str	r2, [sp, #8]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	9201      	str	r2, [sp, #4]
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	4603      	mov	r3, r0
 800ac26:	2280      	movs	r2, #128	; 0x80
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f001 f8e7 	bl	800bdfc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	7959      	ldrb	r1, [r3, #5]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac42:	b292      	uxth	r2, r2
 800ac44:	9202      	str	r2, [sp, #8]
 800ac46:	2200      	movs	r2, #0
 800ac48:	9201      	str	r2, [sp, #4]
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2200      	movs	r2, #0
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f001 f8d3 	bl	800bdfc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac56:	e175      	b.n	800af44 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac58:	7bbb      	ldrb	r3, [r7, #14]
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	f040 8172 	bne.w	800af44 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac66:	3301      	adds	r3, #1
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac76:	2b03      	cmp	r3, #3
 800ac78:	d903      	bls.n	800ac82 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	220d      	movs	r2, #13
 800ac7e:	701a      	strb	r2, [r3, #0]
      break;
 800ac80:	e160      	b.n	800af44 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	795b      	ldrb	r3, [r3, #5]
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f001 f907 	bl	800be9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	791b      	ldrb	r3, [r3, #4]
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f001 f901 	bl	800be9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	701a      	strb	r2, [r3, #0]
      break;
 800aca0:	e150      	b.n	800af44 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aca2:	2112      	movs	r1, #18
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f9f1 	bl	800b08c <USBH_Get_DevDesc>
 800acaa:	4603      	mov	r3, r0
 800acac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800acae:	7bbb      	ldrb	r3, [r7, #14]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d103      	bne.n	800acbc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2202      	movs	r2, #2
 800acb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800acba:	e145      	b.n	800af48 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	f040 8142 	bne.w	800af48 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acca:	3301      	adds	r3, #1
 800accc:	b2da      	uxtb	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d903      	bls.n	800ace6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	220d      	movs	r2, #13
 800ace2:	701a      	strb	r2, [r3, #0]
      break;
 800ace4:	e130      	b.n	800af48 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	795b      	ldrb	r3, [r3, #5]
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f001 f8d5 	bl	800be9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	791b      	ldrb	r3, [r3, #4]
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f001 f8cf 	bl	800be9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	701a      	strb	r2, [r3, #0]
      break;
 800ad0a:	e11d      	b.n	800af48 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fa7b 	bl	800b20a <USBH_SetAddress>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d132      	bne.n	800ad84 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ad1e:	2002      	movs	r0, #2
 800ad20:	f001 fbb5 	bl	800c48e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2203      	movs	r2, #3
 800ad30:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	7919      	ldrb	r1, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad46:	b292      	uxth	r2, r2
 800ad48:	9202      	str	r2, [sp, #8]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	9201      	str	r2, [sp, #4]
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	4603      	mov	r3, r0
 800ad52:	2280      	movs	r2, #128	; 0x80
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f001 f851 	bl	800bdfc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7959      	ldrb	r1, [r3, #5]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad6e:	b292      	uxth	r2, r2
 800ad70:	9202      	str	r2, [sp, #8]
 800ad72:	2200      	movs	r2, #0
 800ad74:	9201      	str	r2, [sp, #4]
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f001 f83d 	bl	800bdfc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ad82:	e0e3      	b.n	800af4c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	f040 80e0 	bne.w	800af4c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	220d      	movs	r2, #13
 800ad90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	705a      	strb	r2, [r3, #1]
      break;
 800ad98:	e0d8      	b.n	800af4c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ad9a:	2109      	movs	r1, #9
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f9a1 	bl	800b0e4 <USBH_Get_CfgDesc>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d103      	bne.n	800adb4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2204      	movs	r2, #4
 800adb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800adb2:	e0cd      	b.n	800af50 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	f040 80ca 	bne.w	800af50 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adc2:	3301      	adds	r3, #1
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800add2:	2b03      	cmp	r3, #3
 800add4:	d903      	bls.n	800adde <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	220d      	movs	r2, #13
 800adda:	701a      	strb	r2, [r3, #0]
      break;
 800addc:	e0b8      	b.n	800af50 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	795b      	ldrb	r3, [r3, #5]
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f001 f859 	bl	800be9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	791b      	ldrb	r3, [r3, #4]
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f001 f853 	bl	800be9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	701a      	strb	r2, [r3, #0]
      break;
 800ae02:	e0a5      	b.n	800af50 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f969 	bl	800b0e4 <USBH_Get_CfgDesc>
 800ae12:	4603      	mov	r3, r0
 800ae14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d103      	bne.n	800ae24 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2205      	movs	r2, #5
 800ae20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae22:	e097      	b.n	800af54 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	f040 8094 	bne.w	800af54 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae32:	3301      	adds	r3, #1
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	d903      	bls.n	800ae4e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	220d      	movs	r2, #13
 800ae4a:	701a      	strb	r2, [r3, #0]
      break;
 800ae4c:	e082      	b.n	800af54 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	795b      	ldrb	r3, [r3, #5]
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 f821 	bl	800be9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	791b      	ldrb	r3, [r3, #4]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f001 f81b 	bl	800be9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	701a      	strb	r2, [r3, #0]
      break;
 800ae72:	e06f      	b.n	800af54 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d019      	beq.n	800aeb2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae8a:	23ff      	movs	r3, #255	; 0xff
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 f953 	bl	800b138 <USBH_Get_StringDesc>
 800ae92:	4603      	mov	r3, r0
 800ae94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae96:	7bbb      	ldrb	r3, [r7, #14]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2206      	movs	r2, #6
 800aea0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aea2:	e059      	b.n	800af58 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d156      	bne.n	800af58 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2206      	movs	r2, #6
 800aeae:	705a      	strb	r2, [r3, #1]
      break;
 800aeb0:	e052      	b.n	800af58 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2206      	movs	r2, #6
 800aeb6:	705a      	strb	r2, [r3, #1]
      break;
 800aeb8:	e04e      	b.n	800af58 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d019      	beq.n	800aef8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aed0:	23ff      	movs	r3, #255	; 0xff
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f930 	bl	800b138 <USBH_Get_StringDesc>
 800aed8:	4603      	mov	r3, r0
 800aeda:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d103      	bne.n	800aeea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2207      	movs	r2, #7
 800aee6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aee8:	e038      	b.n	800af5c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aeea:	7bbb      	ldrb	r3, [r7, #14]
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d135      	bne.n	800af5c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2207      	movs	r2, #7
 800aef4:	705a      	strb	r2, [r3, #1]
      break;
 800aef6:	e031      	b.n	800af5c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2207      	movs	r2, #7
 800aefc:	705a      	strb	r2, [r3, #1]
      break;
 800aefe:	e02d      	b.n	800af5c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800af06:	2b00      	cmp	r3, #0
 800af08:	d017      	beq.n	800af3a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af16:	23ff      	movs	r3, #255	; 0xff
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f90d 	bl	800b138 <USBH_Get_StringDesc>
 800af1e:	4603      	mov	r3, r0
 800af20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af22:	7bbb      	ldrb	r3, [r7, #14]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d102      	bne.n	800af2e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800af2c:	e018      	b.n	800af60 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	2b03      	cmp	r3, #3
 800af32:	d115      	bne.n	800af60 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	73fb      	strb	r3, [r7, #15]
      break;
 800af38:	e012      	b.n	800af60 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	73fb      	strb	r3, [r7, #15]
      break;
 800af3e:	e00f      	b.n	800af60 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800af40:	bf00      	nop
 800af42:	e00e      	b.n	800af62 <USBH_HandleEnum+0x3be>
      break;
 800af44:	bf00      	nop
 800af46:	e00c      	b.n	800af62 <USBH_HandleEnum+0x3be>
      break;
 800af48:	bf00      	nop
 800af4a:	e00a      	b.n	800af62 <USBH_HandleEnum+0x3be>
      break;
 800af4c:	bf00      	nop
 800af4e:	e008      	b.n	800af62 <USBH_HandleEnum+0x3be>
      break;
 800af50:	bf00      	nop
 800af52:	e006      	b.n	800af62 <USBH_HandleEnum+0x3be>
      break;
 800af54:	bf00      	nop
 800af56:	e004      	b.n	800af62 <USBH_HandleEnum+0x3be>
      break;
 800af58:	bf00      	nop
 800af5a:	e002      	b.n	800af62 <USBH_HandleEnum+0x3be>
      break;
 800af5c:	bf00      	nop
 800af5e:	e000      	b.n	800af62 <USBH_HandleEnum+0x3be>
      break;
 800af60:	bf00      	nop
  }
  return Status;
 800af62:	7bfb      	ldrb	r3, [r7, #15]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800af7e:	bf00      	nop
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af98:	1c5a      	adds	r2, r3, #1
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f804 	bl	800afae <USBH_HandleSof>
}
 800afa6:	bf00      	nop
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b082      	sub	sp, #8
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b0b      	cmp	r3, #11
 800afbe:	d10a      	bne.n	800afd6 <USBH_HandleSof+0x28>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d005      	beq.n	800afd6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	4798      	blx	r3
  }
}
 800afd6:	bf00      	nop
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800afde:	b480      	push	{r7}
 800afe0:	b083      	sub	sp, #12
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2201      	movs	r2, #1
 800afea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800afee:	bf00      	nop
}
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800affa:	b480      	push	{r7}
 800affc:	b083      	sub	sp, #12
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b00a:	bf00      	nop
}
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b016:	b480      	push	{r7}
 800b018:	b083      	sub	sp, #12
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 f8c6 	bl	800c1f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	791b      	ldrb	r3, [r3, #4]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 ff13 	bl	800be9c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	795b      	ldrb	r3, [r3, #5]
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 ff0d 	bl	800be9c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af02      	add	r7, sp, #8
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b098:	887b      	ldrh	r3, [r7, #2]
 800b09a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b09e:	d901      	bls.n	800b0a4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	e01b      	b.n	800b0dc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b0aa:	887b      	ldrh	r3, [r7, #2]
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f872 	bl	800b1a0 <USBH_GetDescriptor>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d109      	bne.n	800b0da <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b0cc:	887a      	ldrh	r2, [r7, #2]
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f929 	bl	800b328 <USBH_ParseDevDesc>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af02      	add	r7, sp, #8
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	331c      	adds	r3, #28
 800b0f4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b0f6:	887b      	ldrh	r3, [r7, #2]
 800b0f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0fc:	d901      	bls.n	800b102 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e016      	b.n	800b130 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b102:	887b      	ldrh	r3, [r7, #2]
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b10c:	2100      	movs	r1, #0
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f846 	bl	800b1a0 <USBH_GetDescriptor>
 800b114:	4603      	mov	r3, r0
 800b116:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d107      	bne.n	800b12e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b11e:	887b      	ldrh	r3, [r7, #2]
 800b120:	461a      	mov	r2, r3
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f9b3 	bl	800b490 <USBH_ParseCfgDesc>
 800b12a:	4603      	mov	r3, r0
 800b12c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b088      	sub	sp, #32
 800b13c:	af02      	add	r7, sp, #8
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	607a      	str	r2, [r7, #4]
 800b142:	461a      	mov	r2, r3
 800b144:	460b      	mov	r3, r1
 800b146:	72fb      	strb	r3, [r7, #11]
 800b148:	4613      	mov	r3, r2
 800b14a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b14c:	893b      	ldrh	r3, [r7, #8]
 800b14e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b152:	d802      	bhi.n	800b15a <USBH_Get_StringDesc+0x22>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d101      	bne.n	800b15e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b15a:	2303      	movs	r3, #3
 800b15c:	e01c      	b.n	800b198 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b15e:	7afb      	ldrb	r3, [r7, #11]
 800b160:	b29b      	uxth	r3, r3
 800b162:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b166:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b16e:	893b      	ldrh	r3, [r7, #8]
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	460b      	mov	r3, r1
 800b174:	2100      	movs	r1, #0
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 f812 	bl	800b1a0 <USBH_GetDescriptor>
 800b17c:	4603      	mov	r3, r0
 800b17e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b180:	7dfb      	ldrb	r3, [r7, #23]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d107      	bne.n	800b196 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b18c:	893a      	ldrh	r2, [r7, #8]
 800b18e:	6879      	ldr	r1, [r7, #4]
 800b190:	4618      	mov	r0, r3
 800b192:	f000 fb93 	bl	800b8bc <USBH_ParseStringDesc>
  }

  return status;
 800b196:	7dfb      	ldrb	r3, [r7, #23]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	607b      	str	r3, [r7, #4]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	72fb      	strb	r3, [r7, #11]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	789b      	ldrb	r3, [r3, #2]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d11c      	bne.n	800b1f4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b1ba:	7afb      	ldrb	r3, [r7, #11]
 800b1bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2206      	movs	r2, #6
 800b1ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	893a      	ldrh	r2, [r7, #8]
 800b1d0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b1d2:	893b      	ldrh	r3, [r7, #8]
 800b1d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b1d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1dc:	d104      	bne.n	800b1e8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f240 4209 	movw	r2, #1033	; 0x409
 800b1e4:	829a      	strh	r2, [r3, #20]
 800b1e6:	e002      	b.n	800b1ee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8b3a      	ldrh	r2, [r7, #24]
 800b1f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b1f4:	8b3b      	ldrh	r3, [r7, #24]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f000 fbac 	bl	800b958 <USBH_CtlReq>
 800b200:	4603      	mov	r3, r0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	460b      	mov	r3, r1
 800b214:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	789b      	ldrb	r3, [r3, #2]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d10f      	bne.n	800b23e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2205      	movs	r2, #5
 800b228:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b22a:	78fb      	ldrb	r3, [r7, #3]
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b23e:	2200      	movs	r2, #0
 800b240:	2100      	movs	r1, #0
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fb88 	bl	800b958 <USBH_CtlReq>
 800b248:	4603      	mov	r3, r0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b082      	sub	sp, #8
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	789b      	ldrb	r3, [r3, #2]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d10e      	bne.n	800b284 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2209      	movs	r2, #9
 800b270:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	887a      	ldrh	r2, [r7, #2]
 800b276:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b284:	2200      	movs	r2, #0
 800b286:	2100      	movs	r1, #0
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 fb65 	bl	800b958 <USBH_CtlReq>
 800b28e:	4603      	mov	r3, r0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	789b      	ldrb	r3, [r3, #2]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d10f      	bne.n	800b2cc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2203      	movs	r2, #3
 800b2b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fb41 	bl	800b958 <USBH_CtlReq>
 800b2d6:	4603      	mov	r3, r0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	789b      	ldrb	r3, [r3, #2]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d10f      	bne.n	800b314 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b306:	78fb      	ldrb	r3, [r7, #3]
 800b308:	b29a      	uxth	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b314:	2200      	movs	r2, #0
 800b316:	2100      	movs	r1, #0
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 fb1d 	bl	800b958 <USBH_CtlReq>
 800b31e:	4603      	mov	r3, r0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b328:	b480      	push	{r7}
 800b32a:	b087      	sub	sp, #28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	4613      	mov	r3, r2
 800b334:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b33c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b348:	2302      	movs	r3, #2
 800b34a:	e098      	b.n	800b47e <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	781a      	ldrb	r2, [r3, #0]
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	785a      	ldrb	r2, [r3, #1]
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	3302      	adds	r3, #2
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	b29a      	uxth	r2, r3
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	3303      	adds	r3, #3
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	021b      	lsls	r3, r3, #8
 800b36e:	b29b      	uxth	r3, r3
 800b370:	4313      	orrs	r3, r2
 800b372:	b29a      	uxth	r2, r3
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	791a      	ldrb	r2, [r3, #4]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	795a      	ldrb	r2, [r3, #5]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	799a      	ldrb	r2, [r3, #6]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	79da      	ldrb	r2, [r3, #7]
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d004      	beq.n	800b3ac <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d11b      	bne.n	800b3e4 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	79db      	ldrb	r3, [r3, #7]
 800b3b0:	2b20      	cmp	r3, #32
 800b3b2:	dc0f      	bgt.n	800b3d4 <USBH_ParseDevDesc+0xac>
 800b3b4:	2b08      	cmp	r3, #8
 800b3b6:	db0f      	blt.n	800b3d8 <USBH_ParseDevDesc+0xb0>
 800b3b8:	3b08      	subs	r3, #8
 800b3ba:	4a34      	ldr	r2, [pc, #208]	; (800b48c <USBH_ParseDevDesc+0x164>)
 800b3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c0:	f003 0301 	and.w	r3, r3, #1
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	bf14      	ite	ne
 800b3c8:	2301      	movne	r3, #1
 800b3ca:	2300      	moveq	r3, #0
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d106      	bne.n	800b3e0 <USBH_ParseDevDesc+0xb8>
 800b3d2:	e001      	b.n	800b3d8 <USBH_ParseDevDesc+0xb0>
 800b3d4:	2b40      	cmp	r3, #64	; 0x40
 800b3d6:	d003      	beq.n	800b3e0 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	2208      	movs	r2, #8
 800b3dc:	71da      	strb	r2, [r3, #7]
        break;
 800b3de:	e000      	b.n	800b3e2 <USBH_ParseDevDesc+0xba>
        break;
 800b3e0:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b3e2:	e00e      	b.n	800b402 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d107      	bne.n	800b3fe <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	79db      	ldrb	r3, [r3, #7]
 800b3f2:	2b08      	cmp	r3, #8
 800b3f4:	d005      	beq.n	800b402 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	2208      	movs	r2, #8
 800b3fa:	71da      	strb	r2, [r3, #7]
 800b3fc:	e001      	b.n	800b402 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b3fe:	2303      	movs	r3, #3
 800b400:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b402:	88fb      	ldrh	r3, [r7, #6]
 800b404:	2b08      	cmp	r3, #8
 800b406:	d939      	bls.n	800b47c <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	3308      	adds	r3, #8
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	b29a      	uxth	r2, r3
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	3309      	adds	r3, #9
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	b29b      	uxth	r3, r3
 800b418:	021b      	lsls	r3, r3, #8
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	4313      	orrs	r3, r2
 800b41e:	b29a      	uxth	r2, r3
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	330a      	adds	r3, #10
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	330b      	adds	r3, #11
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	b29b      	uxth	r3, r3
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	b29b      	uxth	r3, r3
 800b438:	4313      	orrs	r3, r2
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	330c      	adds	r3, #12
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	b29a      	uxth	r2, r3
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	330d      	adds	r3, #13
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	b29b      	uxth	r3, r3
 800b450:	021b      	lsls	r3, r3, #8
 800b452:	b29b      	uxth	r3, r3
 800b454:	4313      	orrs	r3, r2
 800b456:	b29a      	uxth	r2, r3
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	7b9a      	ldrb	r2, [r3, #14]
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	7bda      	ldrb	r2, [r3, #15]
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	7c1a      	ldrb	r2, [r3, #16]
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	7c5a      	ldrb	r2, [r3, #17]
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	371c      	adds	r7, #28
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	01000101 	.word	0x01000101

0800b490 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b08c      	sub	sp, #48	; 0x30
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	4613      	mov	r3, r2
 800b49c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b4a4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b4be:	2302      	movs	r3, #2
 800b4c0:	e0db      	b.n	800b67a <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	781a      	ldrb	r2, [r3, #0]
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	785a      	ldrb	r2, [r3, #1]
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	3302      	adds	r3, #2
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	3303      	adds	r3, #3
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	021b      	lsls	r3, r3, #8
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4f2:	bf28      	it	cs
 800b4f4:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	791a      	ldrb	r2, [r3, #4]
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	795a      	ldrb	r2, [r3, #5]
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	799a      	ldrb	r2, [r3, #6]
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	79da      	ldrb	r2, [r3, #7]
 800b51a:	6a3b      	ldr	r3, [r7, #32]
 800b51c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	7a1a      	ldrb	r2, [r3, #8]
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b09      	cmp	r3, #9
 800b52c:	d002      	beq.n	800b534 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	2209      	movs	r2, #9
 800b532:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b534:	88fb      	ldrh	r3, [r7, #6]
 800b536:	2b09      	cmp	r3, #9
 800b538:	f240 809d 	bls.w	800b676 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800b53c:	2309      	movs	r3, #9
 800b53e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b540:	2300      	movs	r3, #0
 800b542:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b544:	e081      	b.n	800b64a <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b546:	f107 0316 	add.w	r3, r7, #22
 800b54a:	4619      	mov	r1, r3
 800b54c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b54e:	f000 f9e8 	bl	800b922 <USBH_GetNextDesc>
 800b552:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b556:	785b      	ldrb	r3, [r3, #1]
 800b558:	2b04      	cmp	r3, #4
 800b55a:	d176      	bne.n	800b64a <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	2b09      	cmp	r3, #9
 800b562:	d002      	beq.n	800b56a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	2209      	movs	r2, #9
 800b568:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b56a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b56e:	221a      	movs	r2, #26
 800b570:	fb02 f303 	mul.w	r3, r2, r3
 800b574:	3308      	adds	r3, #8
 800b576:	6a3a      	ldr	r2, [r7, #32]
 800b578:	4413      	add	r3, r2
 800b57a:	3302      	adds	r3, #2
 800b57c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b57e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b580:	69f8      	ldr	r0, [r7, #28]
 800b582:	f000 f87e 	bl	800b682 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b58c:	2300      	movs	r3, #0
 800b58e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b590:	e043      	b.n	800b61a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b592:	f107 0316 	add.w	r3, r7, #22
 800b596:	4619      	mov	r1, r3
 800b598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b59a:	f000 f9c2 	bl	800b922 <USBH_GetNextDesc>
 800b59e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a2:	785b      	ldrb	r3, [r3, #1]
 800b5a4:	2b05      	cmp	r3, #5
 800b5a6:	d138      	bne.n	800b61a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	795b      	ldrb	r3, [r3, #5]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d113      	bne.n	800b5d8 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d003      	beq.n	800b5c0 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	799b      	ldrb	r3, [r3, #6]
 800b5bc:	2b03      	cmp	r3, #3
 800b5be:	d10b      	bne.n	800b5d8 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	79db      	ldrb	r3, [r3, #7]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10b      	bne.n	800b5e0 <USBH_ParseCfgDesc+0x150>
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	2b09      	cmp	r3, #9
 800b5ce:	d007      	beq.n	800b5e0 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	2209      	movs	r2, #9
 800b5d4:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b5d6:	e003      	b.n	800b5e0 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5da:	2207      	movs	r2, #7
 800b5dc:	701a      	strb	r2, [r3, #0]
 800b5de:	e000      	b.n	800b5e2 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b5e0:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b5e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b5ea:	3201      	adds	r2, #1
 800b5ec:	00d2      	lsls	r2, r2, #3
 800b5ee:	211a      	movs	r1, #26
 800b5f0:	fb01 f303 	mul.w	r3, r1, r3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	6a3a      	ldr	r2, [r7, #32]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b602:	69b9      	ldr	r1, [r7, #24]
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f000 f870 	bl	800b6ea <USBH_ParseEPDesc>
 800b60a:	4603      	mov	r3, r0
 800b60c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b610:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b614:	3301      	adds	r3, #1
 800b616:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	791b      	ldrb	r3, [r3, #4]
 800b61e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b622:	429a      	cmp	r2, r3
 800b624:	d204      	bcs.n	800b630 <USBH_ParseCfgDesc+0x1a0>
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	885a      	ldrh	r2, [r3, #2]
 800b62a:	8afb      	ldrh	r3, [r7, #22]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d8b0      	bhi.n	800b592 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	791b      	ldrb	r3, [r3, #4]
 800b634:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b638:	429a      	cmp	r2, r3
 800b63a:	d201      	bcs.n	800b640 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e01c      	b.n	800b67a <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800b640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b644:	3301      	adds	r3, #1
 800b646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b64a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d805      	bhi.n	800b65e <USBH_ParseCfgDesc+0x1ce>
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	885a      	ldrh	r2, [r3, #2]
 800b656:	8afb      	ldrh	r3, [r7, #22]
 800b658:	429a      	cmp	r2, r3
 800b65a:	f63f af74 	bhi.w	800b546 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	791b      	ldrb	r3, [r3, #4]
 800b662:	2b02      	cmp	r3, #2
 800b664:	bf28      	it	cs
 800b666:	2302      	movcs	r3, #2
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b66e:	429a      	cmp	r2, r3
 800b670:	d201      	bcs.n	800b676 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800b672:	2303      	movs	r3, #3
 800b674:	e001      	b.n	800b67a <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800b676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3730      	adds	r7, #48	; 0x30
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b682:	b480      	push	{r7}
 800b684:	b083      	sub	sp, #12
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	785a      	ldrb	r2, [r3, #1]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	789a      	ldrb	r2, [r3, #2]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	78da      	ldrb	r2, [r3, #3]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	3304      	adds	r3, #4
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	bf28      	it	cs
 800b6b6:	2302      	movcs	r3, #2
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	795a      	ldrb	r2, [r3, #5]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	799a      	ldrb	r2, [r3, #6]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	79da      	ldrb	r2, [r3, #7]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	7a1a      	ldrb	r2, [r3, #8]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	721a      	strb	r2, [r3, #8]
}
 800b6de:	bf00      	nop
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b087      	sub	sp, #28
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	60b9      	str	r1, [r7, #8]
 800b6f4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	781a      	ldrb	r2, [r3, #0]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	785a      	ldrb	r2, [r3, #1]
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	789a      	ldrb	r2, [r3, #2]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	78da      	ldrb	r2, [r3, #3]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3304      	adds	r3, #4
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	b29a      	uxth	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3305      	adds	r3, #5
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	b29b      	uxth	r3, r3
 800b72a:	021b      	lsls	r3, r3, #8
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	4313      	orrs	r3, r2
 800b730:	b29a      	uxth	r2, r3
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	799a      	ldrb	r2, [r3, #6]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	889b      	ldrh	r3, [r3, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d009      	beq.n	800b75a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b74a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b74e:	d804      	bhi.n	800b75a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b758:	d901      	bls.n	800b75e <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800b75a:	2303      	movs	r3, #3
 800b75c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b764:	2b00      	cmp	r3, #0
 800b766:	d136      	bne.n	800b7d6 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	78db      	ldrb	r3, [r3, #3]
 800b76c:	f003 0303 	and.w	r3, r3, #3
 800b770:	2b02      	cmp	r3, #2
 800b772:	d108      	bne.n	800b786 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	889b      	ldrh	r3, [r3, #4]
 800b778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b77c:	f240 8097 	bls.w	800b8ae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b780:	2303      	movs	r3, #3
 800b782:	75fb      	strb	r3, [r7, #23]
 800b784:	e093      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	78db      	ldrb	r3, [r3, #3]
 800b78a:	f003 0303 	and.w	r3, r3, #3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d107      	bne.n	800b7a2 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	889b      	ldrh	r3, [r3, #4]
 800b796:	2b40      	cmp	r3, #64	; 0x40
 800b798:	f240 8089 	bls.w	800b8ae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b79c:	2303      	movs	r3, #3
 800b79e:	75fb      	strb	r3, [r7, #23]
 800b7a0:	e085      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	78db      	ldrb	r3, [r3, #3]
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d005      	beq.n	800b7ba <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	78db      	ldrb	r3, [r3, #3]
 800b7b2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b7b6:	2b03      	cmp	r3, #3
 800b7b8:	d10a      	bne.n	800b7d0 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	799b      	ldrb	r3, [r3, #6]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d003      	beq.n	800b7ca <USBH_ParseEPDesc+0xe0>
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	799b      	ldrb	r3, [r3, #6]
 800b7c6:	2b10      	cmp	r3, #16
 800b7c8:	d970      	bls.n	800b8ac <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b7ce:	e06d      	b.n	800b8ac <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	75fb      	strb	r3, [r7, #23]
 800b7d4:	e06b      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d13c      	bne.n	800b85a <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	78db      	ldrb	r3, [r3, #3]
 800b7e4:	f003 0303 	and.w	r3, r3, #3
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d005      	beq.n	800b7f8 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	78db      	ldrb	r3, [r3, #3]
 800b7f0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d106      	bne.n	800b806 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	889b      	ldrh	r3, [r3, #4]
 800b7fc:	2b40      	cmp	r3, #64	; 0x40
 800b7fe:	d956      	bls.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b800:	2303      	movs	r3, #3
 800b802:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b804:	e053      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	78db      	ldrb	r3, [r3, #3]
 800b80a:	f003 0303 	and.w	r3, r3, #3
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d10e      	bne.n	800b830 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	799b      	ldrb	r3, [r3, #6]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d007      	beq.n	800b82a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b81e:	2b10      	cmp	r3, #16
 800b820:	d803      	bhi.n	800b82a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b826:	2b40      	cmp	r3, #64	; 0x40
 800b828:	d941      	bls.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b82a:	2303      	movs	r3, #3
 800b82c:	75fb      	strb	r3, [r7, #23]
 800b82e:	e03e      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	78db      	ldrb	r3, [r3, #3]
 800b834:	f003 0303 	and.w	r3, r3, #3
 800b838:	2b03      	cmp	r3, #3
 800b83a:	d10b      	bne.n	800b854 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	799b      	ldrb	r3, [r3, #6]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d004      	beq.n	800b84e <USBH_ParseEPDesc+0x164>
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	889b      	ldrh	r3, [r3, #4]
 800b848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b84c:	d32f      	bcc.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b84e:	2303      	movs	r3, #3
 800b850:	75fb      	strb	r3, [r7, #23]
 800b852:	e02c      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b854:	2303      	movs	r3, #3
 800b856:	75fb      	strb	r3, [r7, #23]
 800b858:	e029      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b860:	2b02      	cmp	r3, #2
 800b862:	d120      	bne.n	800b8a6 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	78db      	ldrb	r3, [r3, #3]
 800b868:	f003 0303 	and.w	r3, r3, #3
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d106      	bne.n	800b87e <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	889b      	ldrh	r3, [r3, #4]
 800b874:	2b08      	cmp	r3, #8
 800b876:	d01a      	beq.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b878:	2303      	movs	r3, #3
 800b87a:	75fb      	strb	r3, [r7, #23]
 800b87c:	e017      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	78db      	ldrb	r3, [r3, #3]
 800b882:	f003 0303 	and.w	r3, r3, #3
 800b886:	2b03      	cmp	r3, #3
 800b888:	d10a      	bne.n	800b8a0 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	799b      	ldrb	r3, [r3, #6]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d003      	beq.n	800b89a <USBH_ParseEPDesc+0x1b0>
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	889b      	ldrh	r3, [r3, #4]
 800b896:	2b08      	cmp	r3, #8
 800b898:	d909      	bls.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b89a:	2303      	movs	r3, #3
 800b89c:	75fb      	strb	r3, [r7, #23]
 800b89e:	e006      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	75fb      	strb	r3, [r7, #23]
 800b8a4:	e003      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	75fb      	strb	r3, [r7, #23]
 800b8aa:	e000      	b.n	800b8ae <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b8ac:	bf00      	nop
  }

  return status;
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	371c      	adds	r7, #28
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b087      	sub	sp, #28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2b03      	cmp	r3, #3
 800b8d2:	d120      	bne.n	800b916 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	1e9a      	subs	r2, r3, #2
 800b8da:	88fb      	ldrh	r3, [r7, #6]
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	bf28      	it	cs
 800b8e0:	4613      	movcs	r3, r2
 800b8e2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3302      	adds	r3, #2
 800b8e8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	82fb      	strh	r3, [r7, #22]
 800b8ee:	e00b      	b.n	800b908 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b8f0:	8afb      	ldrh	r3, [r7, #22]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	781a      	ldrb	r2, [r3, #0]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	3301      	adds	r3, #1
 800b900:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b902:	8afb      	ldrh	r3, [r7, #22]
 800b904:	3302      	adds	r3, #2
 800b906:	82fb      	strh	r3, [r7, #22]
 800b908:	8afa      	ldrh	r2, [r7, #22]
 800b90a:	8abb      	ldrh	r3, [r7, #20]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d3ef      	bcc.n	800b8f0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2200      	movs	r2, #0
 800b914:	701a      	strb	r2, [r3, #0]
  }
}
 800b916:	bf00      	nop
 800b918:	371c      	adds	r7, #28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	881a      	ldrh	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	b29b      	uxth	r3, r3
 800b936:	4413      	add	r3, r2
 800b938:	b29a      	uxth	r2, r3
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4413      	add	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b94a:	68fb      	ldr	r3, [r7, #12]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	4613      	mov	r3, r2
 800b964:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b966:	2301      	movs	r3, #1
 800b968:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	789b      	ldrb	r3, [r3, #2]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d002      	beq.n	800b978 <USBH_CtlReq+0x20>
 800b972:	2b02      	cmp	r3, #2
 800b974:	d00f      	beq.n	800b996 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b976:	e027      	b.n	800b9c8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	88fa      	ldrh	r2, [r7, #6]
 800b982:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2201      	movs	r2, #1
 800b988:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2202      	movs	r2, #2
 800b98e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b990:	2301      	movs	r3, #1
 800b992:	75fb      	strb	r3, [r7, #23]
      break;
 800b994:	e018      	b.n	800b9c8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f81c 	bl	800b9d4 <USBH_HandleControl>
 800b99c:	4603      	mov	r3, r0
 800b99e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d002      	beq.n	800b9ac <USBH_CtlReq+0x54>
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d106      	bne.n	800b9ba <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	761a      	strb	r2, [r3, #24]
      break;
 800b9b8:	e005      	b.n	800b9c6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b9ba:	7dfb      	ldrb	r3, [r7, #23]
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d102      	bne.n	800b9c6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	709a      	strb	r2, [r3, #2]
      break;
 800b9c6:	bf00      	nop
  }
  return status;
 800b9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3718      	adds	r7, #24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
	...

0800b9d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af02      	add	r7, sp, #8
 800b9da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	7e1b      	ldrb	r3, [r3, #24]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	2b0a      	cmp	r3, #10
 800b9ec:	f200 8156 	bhi.w	800bc9c <USBH_HandleControl+0x2c8>
 800b9f0:	a201      	add	r2, pc, #4	; (adr r2, 800b9f8 <USBH_HandleControl+0x24>)
 800b9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f6:	bf00      	nop
 800b9f8:	0800ba25 	.word	0x0800ba25
 800b9fc:	0800ba3f 	.word	0x0800ba3f
 800ba00:	0800baa9 	.word	0x0800baa9
 800ba04:	0800bacf 	.word	0x0800bacf
 800ba08:	0800bb07 	.word	0x0800bb07
 800ba0c:	0800bb31 	.word	0x0800bb31
 800ba10:	0800bb83 	.word	0x0800bb83
 800ba14:	0800bba5 	.word	0x0800bba5
 800ba18:	0800bbe1 	.word	0x0800bbe1
 800ba1c:	0800bc07 	.word	0x0800bc07
 800ba20:	0800bc45 	.word	0x0800bc45
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f103 0110 	add.w	r1, r3, #16
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	795b      	ldrb	r3, [r3, #5]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f943 	bl	800bcbc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2202      	movs	r2, #2
 800ba3a:	761a      	strb	r2, [r3, #24]
      break;
 800ba3c:	e139      	b.n	800bcb2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	795b      	ldrb	r3, [r3, #5]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fcc5 	bl	800c3d4 <USBH_LL_GetURBState>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d11e      	bne.n	800ba92 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7c1b      	ldrb	r3, [r3, #16]
 800ba58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba5c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	8adb      	ldrh	r3, [r3, #22]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ba66:	7b7b      	ldrb	r3, [r7, #13]
 800ba68:	2b80      	cmp	r3, #128	; 0x80
 800ba6a:	d103      	bne.n	800ba74 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2203      	movs	r2, #3
 800ba70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba72:	e115      	b.n	800bca0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2205      	movs	r2, #5
 800ba78:	761a      	strb	r2, [r3, #24]
      break;
 800ba7a:	e111      	b.n	800bca0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ba7c:	7b7b      	ldrb	r3, [r7, #13]
 800ba7e:	2b80      	cmp	r3, #128	; 0x80
 800ba80:	d103      	bne.n	800ba8a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2209      	movs	r2, #9
 800ba86:	761a      	strb	r2, [r3, #24]
      break;
 800ba88:	e10a      	b.n	800bca0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2207      	movs	r2, #7
 800ba8e:	761a      	strb	r2, [r3, #24]
      break;
 800ba90:	e106      	b.n	800bca0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	d003      	beq.n	800baa0 <USBH_HandleControl+0xcc>
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	f040 8100 	bne.w	800bca0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	220b      	movs	r2, #11
 800baa4:	761a      	strb	r2, [r3, #24]
      break;
 800baa6:	e0fb      	b.n	800bca0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800baae:	b29a      	uxth	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6899      	ldr	r1, [r3, #8]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	899a      	ldrh	r2, [r3, #12]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	791b      	ldrb	r3, [r3, #4]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f93a 	bl	800bd3a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2204      	movs	r2, #4
 800baca:	761a      	strb	r2, [r3, #24]
      break;
 800bacc:	e0f1      	b.n	800bcb2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	791b      	ldrb	r3, [r3, #4]
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fc7d 	bl	800c3d4 <USBH_LL_GetURBState>
 800bada:	4603      	mov	r3, r0
 800badc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d102      	bne.n	800baea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2209      	movs	r2, #9
 800bae8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800baea:	7bbb      	ldrb	r3, [r7, #14]
 800baec:	2b05      	cmp	r3, #5
 800baee:	d102      	bne.n	800baf6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800baf0:	2303      	movs	r3, #3
 800baf2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800baf4:	e0d6      	b.n	800bca4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
 800baf8:	2b04      	cmp	r3, #4
 800bafa:	f040 80d3 	bne.w	800bca4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	220b      	movs	r2, #11
 800bb02:	761a      	strb	r2, [r3, #24]
      break;
 800bb04:	e0ce      	b.n	800bca4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6899      	ldr	r1, [r3, #8]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	899a      	ldrh	r2, [r3, #12]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	795b      	ldrb	r3, [r3, #5]
 800bb12:	2001      	movs	r0, #1
 800bb14:	9000      	str	r0, [sp, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f8ea 	bl	800bcf0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2206      	movs	r2, #6
 800bb2c:	761a      	strb	r2, [r3, #24]
      break;
 800bb2e:	e0c0      	b.n	800bcb2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	795b      	ldrb	r3, [r3, #5]
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 fc4c 	bl	800c3d4 <USBH_LL_GetURBState>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bb40:	7bbb      	ldrb	r3, [r7, #14]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d103      	bne.n	800bb4e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2207      	movs	r2, #7
 800bb4a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bb4c:	e0ac      	b.n	800bca8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
 800bb50:	2b05      	cmp	r3, #5
 800bb52:	d105      	bne.n	800bb60 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	220c      	movs	r2, #12
 800bb58:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5e:	e0a3      	b.n	800bca8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb60:	7bbb      	ldrb	r3, [r7, #14]
 800bb62:	2b02      	cmp	r3, #2
 800bb64:	d103      	bne.n	800bb6e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2205      	movs	r2, #5
 800bb6a:	761a      	strb	r2, [r3, #24]
      break;
 800bb6c:	e09c      	b.n	800bca8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	2b04      	cmp	r3, #4
 800bb72:	f040 8099 	bne.w	800bca8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	220b      	movs	r2, #11
 800bb7a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb80:	e092      	b.n	800bca8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	791b      	ldrb	r3, [r3, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	2100      	movs	r1, #0
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f8d5 	bl	800bd3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2208      	movs	r2, #8
 800bba0:	761a      	strb	r2, [r3, #24]

      break;
 800bba2:	e086      	b.n	800bcb2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	791b      	ldrb	r3, [r3, #4]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fc12 	bl	800c3d4 <USBH_LL_GetURBState>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bbb4:	7bbb      	ldrb	r3, [r7, #14]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d105      	bne.n	800bbc6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	220d      	movs	r2, #13
 800bbbe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bbc4:	e072      	b.n	800bcac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bbc6:	7bbb      	ldrb	r3, [r7, #14]
 800bbc8:	2b04      	cmp	r3, #4
 800bbca:	d103      	bne.n	800bbd4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	220b      	movs	r2, #11
 800bbd0:	761a      	strb	r2, [r3, #24]
      break;
 800bbd2:	e06b      	b.n	800bcac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bbd4:	7bbb      	ldrb	r3, [r7, #14]
 800bbd6:	2b05      	cmp	r3, #5
 800bbd8:	d168      	bne.n	800bcac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbde:	e065      	b.n	800bcac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	795b      	ldrb	r3, [r3, #5]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	9200      	str	r2, [sp, #0]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2100      	movs	r1, #0
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 f87f 	bl	800bcf0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	220a      	movs	r2, #10
 800bc02:	761a      	strb	r2, [r3, #24]
      break;
 800bc04:	e055      	b.n	800bcb2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	795b      	ldrb	r3, [r3, #5]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fbe1 	bl	800c3d4 <USBH_LL_GetURBState>
 800bc12:	4603      	mov	r3, r0
 800bc14:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d105      	bne.n	800bc28 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	220d      	movs	r2, #13
 800bc24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bc26:	e043      	b.n	800bcb0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d103      	bne.n	800bc36 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2209      	movs	r2, #9
 800bc32:	761a      	strb	r2, [r3, #24]
      break;
 800bc34:	e03c      	b.n	800bcb0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	2b04      	cmp	r3, #4
 800bc3a:	d139      	bne.n	800bcb0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	220b      	movs	r2, #11
 800bc40:	761a      	strb	r2, [r3, #24]
      break;
 800bc42:	e035      	b.n	800bcb0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	7e5b      	ldrb	r3, [r3, #25]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	765a      	strb	r2, [r3, #25]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	7e5b      	ldrb	r3, [r3, #25]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d806      	bhi.n	800bc66 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bc64:	e025      	b.n	800bcb2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc6c:	2106      	movs	r1, #6
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	795b      	ldrb	r3, [r3, #5]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f90c 	bl	800be9c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	791b      	ldrb	r3, [r3, #4]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f906 	bl	800be9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bc96:	2302      	movs	r3, #2
 800bc98:	73fb      	strb	r3, [r7, #15]
      break;
 800bc9a:	e00a      	b.n	800bcb2 <USBH_HandleControl+0x2de>

    default:
      break;
 800bc9c:	bf00      	nop
 800bc9e:	e008      	b.n	800bcb2 <USBH_HandleControl+0x2de>
      break;
 800bca0:	bf00      	nop
 800bca2:	e006      	b.n	800bcb2 <USBH_HandleControl+0x2de>
      break;
 800bca4:	bf00      	nop
 800bca6:	e004      	b.n	800bcb2 <USBH_HandleControl+0x2de>
      break;
 800bca8:	bf00      	nop
 800bcaa:	e002      	b.n	800bcb2 <USBH_HandleControl+0x2de>
      break;
 800bcac:	bf00      	nop
 800bcae:	e000      	b.n	800bcb2 <USBH_HandleControl+0x2de>
      break;
 800bcb0:	bf00      	nop
  }

  return status;
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af04      	add	r7, sp, #16
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bcca:	79f9      	ldrb	r1, [r7, #7]
 800bccc:	2300      	movs	r3, #0
 800bcce:	9303      	str	r3, [sp, #12]
 800bcd0:	2308      	movs	r3, #8
 800bcd2:	9302      	str	r3, [sp, #8]
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	9301      	str	r3, [sp, #4]
 800bcd8:	2300      	movs	r3, #0
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	2300      	movs	r3, #0
 800bcde:	2200      	movs	r2, #0
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f000 fb46 	bl	800c372 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b088      	sub	sp, #32
 800bcf4:	af04      	add	r7, sp, #16
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	460b      	mov	r3, r1
 800bd00:	80fb      	strh	r3, [r7, #6]
 800bd02:	4613      	mov	r3, r2
 800bd04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bd10:	2300      	movs	r3, #0
 800bd12:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd14:	7979      	ldrb	r1, [r7, #5]
 800bd16:	7e3b      	ldrb	r3, [r7, #24]
 800bd18:	9303      	str	r3, [sp, #12]
 800bd1a:	88fb      	ldrh	r3, [r7, #6]
 800bd1c:	9302      	str	r3, [sp, #8]
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	9301      	str	r3, [sp, #4]
 800bd22:	2301      	movs	r3, #1
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	2300      	movs	r3, #0
 800bd28:	2200      	movs	r2, #0
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f000 fb21 	bl	800c372 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b088      	sub	sp, #32
 800bd3e:	af04      	add	r7, sp, #16
 800bd40:	60f8      	str	r0, [r7, #12]
 800bd42:	60b9      	str	r1, [r7, #8]
 800bd44:	4611      	mov	r1, r2
 800bd46:	461a      	mov	r2, r3
 800bd48:	460b      	mov	r3, r1
 800bd4a:	80fb      	strh	r3, [r7, #6]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd50:	7979      	ldrb	r1, [r7, #5]
 800bd52:	2300      	movs	r3, #0
 800bd54:	9303      	str	r3, [sp, #12]
 800bd56:	88fb      	ldrh	r3, [r7, #6]
 800bd58:	9302      	str	r3, [sp, #8]
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	2301      	movs	r3, #1
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	2300      	movs	r3, #0
 800bd64:	2201      	movs	r2, #1
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f000 fb03 	bl	800c372 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bd6c:	2300      	movs	r3, #0

}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b088      	sub	sp, #32
 800bd7a:	af04      	add	r7, sp, #16
 800bd7c:	60f8      	str	r0, [r7, #12]
 800bd7e:	60b9      	str	r1, [r7, #8]
 800bd80:	4611      	mov	r1, r2
 800bd82:	461a      	mov	r2, r3
 800bd84:	460b      	mov	r3, r1
 800bd86:	80fb      	strh	r3, [r7, #6]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bd96:	2300      	movs	r3, #0
 800bd98:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd9a:	7979      	ldrb	r1, [r7, #5]
 800bd9c:	7e3b      	ldrb	r3, [r7, #24]
 800bd9e:	9303      	str	r3, [sp, #12]
 800bda0:	88fb      	ldrh	r3, [r7, #6]
 800bda2:	9302      	str	r3, [sp, #8]
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	2301      	movs	r3, #1
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	2302      	movs	r3, #2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f000 fade 	bl	800c372 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af04      	add	r7, sp, #16
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	4611      	mov	r1, r2
 800bdcc:	461a      	mov	r2, r3
 800bdce:	460b      	mov	r3, r1
 800bdd0:	80fb      	strh	r3, [r7, #6]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bdd6:	7979      	ldrb	r1, [r7, #5]
 800bdd8:	2300      	movs	r3, #0
 800bdda:	9303      	str	r3, [sp, #12]
 800bddc:	88fb      	ldrh	r3, [r7, #6]
 800bdde:	9302      	str	r3, [sp, #8]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	9301      	str	r3, [sp, #4]
 800bde4:	2301      	movs	r3, #1
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	2302      	movs	r3, #2
 800bdea:	2201      	movs	r2, #1
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f000 fac0 	bl	800c372 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af04      	add	r7, sp, #16
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	4608      	mov	r0, r1
 800be06:	4611      	mov	r1, r2
 800be08:	461a      	mov	r2, r3
 800be0a:	4603      	mov	r3, r0
 800be0c:	70fb      	strb	r3, [r7, #3]
 800be0e:	460b      	mov	r3, r1
 800be10:	70bb      	strb	r3, [r7, #2]
 800be12:	4613      	mov	r3, r2
 800be14:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800be16:	7878      	ldrb	r0, [r7, #1]
 800be18:	78ba      	ldrb	r2, [r7, #2]
 800be1a:	78f9      	ldrb	r1, [r7, #3]
 800be1c:	8b3b      	ldrh	r3, [r7, #24]
 800be1e:	9302      	str	r3, [sp, #8]
 800be20:	7d3b      	ldrb	r3, [r7, #20]
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	7c3b      	ldrb	r3, [r7, #16]
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	4603      	mov	r3, r0
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fa53 	bl	800c2d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b082      	sub	sp, #8
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	460b      	mov	r3, r1
 800be44:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800be46:	78fb      	ldrb	r3, [r7, #3]
 800be48:	4619      	mov	r1, r3
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fa72 	bl	800c334 <USBH_LL_ClosePipe>

  return USBH_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f836 	bl	800bed8 <USBH_GetFreePipe>
 800be6c:	4603      	mov	r3, r0
 800be6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800be70:	89fb      	ldrh	r3, [r7, #14]
 800be72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be76:	4293      	cmp	r3, r2
 800be78:	d00a      	beq.n	800be90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800be7a:	78fa      	ldrb	r2, [r7, #3]
 800be7c:	89fb      	ldrh	r3, [r7, #14]
 800be7e:	f003 030f 	and.w	r3, r3, #15
 800be82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be86:	6879      	ldr	r1, [r7, #4]
 800be88:	33e0      	adds	r3, #224	; 0xe0
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	440b      	add	r3, r1
 800be8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800be90:	89fb      	ldrh	r3, [r7, #14]
 800be92:	b2db      	uxtb	r3, r3
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	460b      	mov	r3, r1
 800bea6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bea8:	78fb      	ldrb	r3, [r7, #3]
 800beaa:	2b0f      	cmp	r3, #15
 800beac:	d80d      	bhi.n	800beca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800beae:	78fb      	ldrb	r3, [r7, #3]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	33e0      	adds	r3, #224	; 0xe0
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	4413      	add	r3, r2
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	78fb      	ldrb	r3, [r7, #3]
 800bebc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bec0:	6879      	ldr	r1, [r7, #4]
 800bec2:	33e0      	adds	r3, #224	; 0xe0
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	440b      	add	r3, r1
 800bec8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bee0:	2300      	movs	r3, #0
 800bee2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bee4:	2300      	movs	r3, #0
 800bee6:	73fb      	strb	r3, [r7, #15]
 800bee8:	e00f      	b.n	800bf0a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	33e0      	adds	r3, #224	; 0xe0
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4413      	add	r3, r2
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800befa:	2b00      	cmp	r3, #0
 800befc:	d102      	bne.n	800bf04 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	e007      	b.n	800bf14 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	3301      	adds	r3, #1
 800bf08:	73fb      	strb	r3, [r7, #15]
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
 800bf0c:	2b0f      	cmp	r3, #15
 800bf0e:	d9ec      	bls.n	800beea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bf10:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bf24:	2201      	movs	r2, #1
 800bf26:	490e      	ldr	r1, [pc, #56]	; (800bf60 <MX_USB_HOST_Init+0x40>)
 800bf28:	480e      	ldr	r0, [pc, #56]	; (800bf64 <MX_USB_HOST_Init+0x44>)
 800bf2a:	f7fe fb05 	bl	800a538 <USBH_Init>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bf34:	f7f6 f86c 	bl	8002010 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bf38:	490b      	ldr	r1, [pc, #44]	; (800bf68 <MX_USB_HOST_Init+0x48>)
 800bf3a:	480a      	ldr	r0, [pc, #40]	; (800bf64 <MX_USB_HOST_Init+0x44>)
 800bf3c:	f7fe fba9 	bl	800a692 <USBH_RegisterClass>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bf46:	f7f6 f863 	bl	8002010 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bf4a:	4806      	ldr	r0, [pc, #24]	; (800bf64 <MX_USB_HOST_Init+0x44>)
 800bf4c:	f7fe fc2d 	bl	800a7aa <USBH_Start>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bf56:	f7f6 f85b 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bf5a:	bf00      	nop
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	0800bf81 	.word	0x0800bf81
 800bf64:	200005e4 	.word	0x200005e4
 800bf68:	2000000c 	.word	0x2000000c

0800bf6c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bf70:	4802      	ldr	r0, [pc, #8]	; (800bf7c <MX_USB_HOST_Process+0x10>)
 800bf72:	f7fe fc2b 	bl	800a7cc <USBH_Process>
}
 800bf76:	bf00      	nop
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	200005e4 	.word	0x200005e4

0800bf80 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bf8c:	78fb      	ldrb	r3, [r7, #3]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	2b04      	cmp	r3, #4
 800bf92:	d819      	bhi.n	800bfc8 <USBH_UserProcess+0x48>
 800bf94:	a201      	add	r2, pc, #4	; (adr r2, 800bf9c <USBH_UserProcess+0x1c>)
 800bf96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf9a:	bf00      	nop
 800bf9c:	0800bfc9 	.word	0x0800bfc9
 800bfa0:	0800bfb9 	.word	0x0800bfb9
 800bfa4:	0800bfc9 	.word	0x0800bfc9
 800bfa8:	0800bfc1 	.word	0x0800bfc1
 800bfac:	0800bfb1 	.word	0x0800bfb1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bfb0:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <USBH_UserProcess+0x58>)
 800bfb2:	2203      	movs	r2, #3
 800bfb4:	701a      	strb	r2, [r3, #0]
  break;
 800bfb6:	e008      	b.n	800bfca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bfb8:	4b07      	ldr	r3, [pc, #28]	; (800bfd8 <USBH_UserProcess+0x58>)
 800bfba:	2202      	movs	r2, #2
 800bfbc:	701a      	strb	r2, [r3, #0]
  break;
 800bfbe:	e004      	b.n	800bfca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bfc0:	4b05      	ldr	r3, [pc, #20]	; (800bfd8 <USBH_UserProcess+0x58>)
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	701a      	strb	r2, [r3, #0]
  break;
 800bfc6:	e000      	b.n	800bfca <USBH_UserProcess+0x4a>

  default:
  break;
 800bfc8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bfca:	bf00      	nop
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	200009bc 	.word	0x200009bc

0800bfdc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b08a      	sub	sp, #40	; 0x28
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfe4:	f107 0314 	add.w	r3, r7, #20
 800bfe8:	2200      	movs	r2, #0
 800bfea:	601a      	str	r2, [r3, #0]
 800bfec:	605a      	str	r2, [r3, #4]
 800bfee:	609a      	str	r2, [r3, #8]
 800bff0:	60da      	str	r2, [r3, #12]
 800bff2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bffc:	d147      	bne.n	800c08e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bffe:	2300      	movs	r3, #0
 800c000:	613b      	str	r3, [r7, #16]
 800c002:	4b25      	ldr	r3, [pc, #148]	; (800c098 <HAL_HCD_MspInit+0xbc>)
 800c004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c006:	4a24      	ldr	r2, [pc, #144]	; (800c098 <HAL_HCD_MspInit+0xbc>)
 800c008:	f043 0301 	orr.w	r3, r3, #1
 800c00c:	6313      	str	r3, [r2, #48]	; 0x30
 800c00e:	4b22      	ldr	r3, [pc, #136]	; (800c098 <HAL_HCD_MspInit+0xbc>)
 800c010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	613b      	str	r3, [r7, #16]
 800c018:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c01a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c01e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c020:	2300      	movs	r3, #0
 800c022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c024:	2300      	movs	r3, #0
 800c026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c028:	f107 0314 	add.w	r3, r7, #20
 800c02c:	4619      	mov	r1, r3
 800c02e:	481b      	ldr	r0, [pc, #108]	; (800c09c <HAL_HCD_MspInit+0xc0>)
 800c030:	f7f7 f90c 	bl	800324c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c034:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c03a:	2302      	movs	r3, #2
 800c03c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c03e:	2300      	movs	r3, #0
 800c040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c042:	2300      	movs	r3, #0
 800c044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c046:	230a      	movs	r3, #10
 800c048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c04a:	f107 0314 	add.w	r3, r7, #20
 800c04e:	4619      	mov	r1, r3
 800c050:	4812      	ldr	r0, [pc, #72]	; (800c09c <HAL_HCD_MspInit+0xc0>)
 800c052:	f7f7 f8fb 	bl	800324c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c056:	4b10      	ldr	r3, [pc, #64]	; (800c098 <HAL_HCD_MspInit+0xbc>)
 800c058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c05a:	4a0f      	ldr	r2, [pc, #60]	; (800c098 <HAL_HCD_MspInit+0xbc>)
 800c05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c060:	6353      	str	r3, [r2, #52]	; 0x34
 800c062:	2300      	movs	r3, #0
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	4b0c      	ldr	r3, [pc, #48]	; (800c098 <HAL_HCD_MspInit+0xbc>)
 800c068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c06a:	4a0b      	ldr	r2, [pc, #44]	; (800c098 <HAL_HCD_MspInit+0xbc>)
 800c06c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c070:	6453      	str	r3, [r2, #68]	; 0x44
 800c072:	4b09      	ldr	r3, [pc, #36]	; (800c098 <HAL_HCD_MspInit+0xbc>)
 800c074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c07e:	2200      	movs	r2, #0
 800c080:	2100      	movs	r1, #0
 800c082:	2043      	movs	r0, #67	; 0x43
 800c084:	f7f6 fca9 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c088:	2043      	movs	r0, #67	; 0x43
 800c08a:	f7f6 fcc2 	bl	8002a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c08e:	bf00      	nop
 800c090:	3728      	adds	r7, #40	; 0x28
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	40023800 	.word	0x40023800
 800c09c:	40020000 	.word	0x40020000

0800c0a0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe ff6b 	bl	800af8a <USBH_LL_IncTimer>
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe ffa3 	bl	800b016 <USBH_LL_Connect>
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fe ffac 	bl	800b044 <USBH_LL_Disconnect>
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70fb      	strb	r3, [r7, #3]
 800c100:	4613      	mov	r3, r2
 800c102:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe ff5d 	bl	800afde <USBH_LL_PortEnabled>
}
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe ff5d 	bl	800affa <USBH_LL_PortDisabled>
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c156:	2b01      	cmp	r3, #1
 800c158:	d12a      	bne.n	800c1b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c15a:	4a18      	ldr	r2, [pc, #96]	; (800c1bc <USBH_LL_Init+0x74>)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a15      	ldr	r2, [pc, #84]	; (800c1bc <USBH_LL_Init+0x74>)
 800c166:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c16a:	4b14      	ldr	r3, [pc, #80]	; (800c1bc <USBH_LL_Init+0x74>)
 800c16c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c170:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c172:	4b12      	ldr	r3, [pc, #72]	; (800c1bc <USBH_LL_Init+0x74>)
 800c174:	2208      	movs	r2, #8
 800c176:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c178:	4b10      	ldr	r3, [pc, #64]	; (800c1bc <USBH_LL_Init+0x74>)
 800c17a:	2201      	movs	r2, #1
 800c17c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c17e:	4b0f      	ldr	r3, [pc, #60]	; (800c1bc <USBH_LL_Init+0x74>)
 800c180:	2200      	movs	r2, #0
 800c182:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c184:	4b0d      	ldr	r3, [pc, #52]	; (800c1bc <USBH_LL_Init+0x74>)
 800c186:	2202      	movs	r2, #2
 800c188:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c18a:	4b0c      	ldr	r3, [pc, #48]	; (800c1bc <USBH_LL_Init+0x74>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c190:	480a      	ldr	r0, [pc, #40]	; (800c1bc <USBH_LL_Init+0x74>)
 800c192:	f7f7 fa10 	bl	80035b6 <HAL_HCD_Init>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c19c:	f7f5 ff38 	bl	8002010 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c1a0:	4806      	ldr	r0, [pc, #24]	; (800c1bc <USBH_LL_Init+0x74>)
 800c1a2:	f7f7 fe71 	bl	8003e88 <HAL_HCD_GetCurrentFrame>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7fe fede 	bl	800af6c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	200009c0 	.word	0x200009c0

0800c1c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7f7 fdde 	bl	8003d98 <HAL_HCD_Start>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f000 f95e 	bl	800c4a4 <USBH_Get_USB_Status>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c202:	2300      	movs	r3, #0
 800c204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7f7 fde6 	bl	8003dde <HAL_HCD_Stop>
 800c212:	4603      	mov	r3, r0
 800c214:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c216:	7bfb      	ldrb	r3, [r7, #15]
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 f943 	bl	800c4a4 <USBH_Get_USB_Status>
 800c21e:	4603      	mov	r3, r0
 800c220:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c222:	7bbb      	ldrb	r3, [r7, #14]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c234:	2301      	movs	r3, #1
 800c236:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c23e:	4618      	mov	r0, r3
 800c240:	f7f7 fe30 	bl	8003ea4 <HAL_HCD_GetCurrentSpeed>
 800c244:	4603      	mov	r3, r0
 800c246:	2b02      	cmp	r3, #2
 800c248:	d00c      	beq.n	800c264 <USBH_LL_GetSpeed+0x38>
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d80d      	bhi.n	800c26a <USBH_LL_GetSpeed+0x3e>
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <USBH_LL_GetSpeed+0x2c>
 800c252:	2b01      	cmp	r3, #1
 800c254:	d003      	beq.n	800c25e <USBH_LL_GetSpeed+0x32>
 800c256:	e008      	b.n	800c26a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c258:	2300      	movs	r3, #0
 800c25a:	73fb      	strb	r3, [r7, #15]
    break;
 800c25c:	e008      	b.n	800c270 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c25e:	2301      	movs	r3, #1
 800c260:	73fb      	strb	r3, [r7, #15]
    break;
 800c262:	e005      	b.n	800c270 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c264:	2302      	movs	r3, #2
 800c266:	73fb      	strb	r3, [r7, #15]
    break;
 800c268:	e002      	b.n	800c270 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c26a:	2301      	movs	r3, #1
 800c26c:	73fb      	strb	r3, [r7, #15]
    break;
 800c26e:	bf00      	nop
  }
  return  speed;
 800c270:	7bfb      	ldrb	r3, [r7, #15]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c290:	4618      	mov	r0, r3
 800c292:	f7f7 fdc1 	bl	8003e18 <HAL_HCD_ResetPort>
 800c296:	4603      	mov	r3, r0
 800c298:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 f901 	bl	800c4a4 <USBH_Get_USB_Status>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2c2:	78fa      	ldrb	r2, [r7, #3]
 800c2c4:	4611      	mov	r1, r2
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7f7 fdc9 	bl	8003e5e <HAL_HCD_HC_GetXferCount>
 800c2cc:	4603      	mov	r3, r0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3708      	adds	r7, #8
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c2d6:	b590      	push	{r4, r7, lr}
 800c2d8:	b089      	sub	sp, #36	; 0x24
 800c2da:	af04      	add	r7, sp, #16
 800c2dc:	6078      	str	r0, [r7, #4]
 800c2de:	4608      	mov	r0, r1
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	70fb      	strb	r3, [r7, #3]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	70bb      	strb	r3, [r7, #2]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c2fe:	787c      	ldrb	r4, [r7, #1]
 800c300:	78ba      	ldrb	r2, [r7, #2]
 800c302:	78f9      	ldrb	r1, [r7, #3]
 800c304:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c306:	9302      	str	r3, [sp, #8]
 800c308:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	4623      	mov	r3, r4
 800c316:	f7f7 f9b5 	bl	8003684 <HAL_HCD_HC_Init>
 800c31a:	4603      	mov	r3, r0
 800c31c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
 800c320:	4618      	mov	r0, r3
 800c322:	f000 f8bf 	bl	800c4a4 <USBH_Get_USB_Status>
 800c326:	4603      	mov	r3, r0
 800c328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	bd90      	pop	{r4, r7, pc}

0800c334 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c34e:	78fa      	ldrb	r2, [r7, #3]
 800c350:	4611      	mov	r1, r2
 800c352:	4618      	mov	r0, r3
 800c354:	f7f7 fa4e 	bl	80037f4 <HAL_HCD_HC_Halt>
 800c358:	4603      	mov	r3, r0
 800c35a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 f8a0 	bl	800c4a4 <USBH_Get_USB_Status>
 800c364:	4603      	mov	r3, r0
 800c366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c368:	7bbb      	ldrb	r3, [r7, #14]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c372:	b590      	push	{r4, r7, lr}
 800c374:	b089      	sub	sp, #36	; 0x24
 800c376:	af04      	add	r7, sp, #16
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	4608      	mov	r0, r1
 800c37c:	4611      	mov	r1, r2
 800c37e:	461a      	mov	r2, r3
 800c380:	4603      	mov	r3, r0
 800c382:	70fb      	strb	r3, [r7, #3]
 800c384:	460b      	mov	r3, r1
 800c386:	70bb      	strb	r3, [r7, #2]
 800c388:	4613      	mov	r3, r2
 800c38a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c39a:	787c      	ldrb	r4, [r7, #1]
 800c39c:	78ba      	ldrb	r2, [r7, #2]
 800c39e:	78f9      	ldrb	r1, [r7, #3]
 800c3a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c3a4:	9303      	str	r3, [sp, #12]
 800c3a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3a8:	9302      	str	r3, [sp, #8]
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ac:	9301      	str	r3, [sp, #4]
 800c3ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	4623      	mov	r3, r4
 800c3b6:	f7f7 fa41 	bl	800383c <HAL_HCD_HC_SubmitRequest>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c3be:	7bfb      	ldrb	r3, [r7, #15]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 f86f 	bl	800c4a4 <USBH_Get_USB_Status>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd90      	pop	{r4, r7, pc}

0800c3d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3e6:	78fa      	ldrb	r2, [r7, #3]
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7f7 fd22 	bl	8003e34 <HAL_HCD_HC_GetURBState>
 800c3f0:	4603      	mov	r3, r0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b082      	sub	sp, #8
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	460b      	mov	r3, r1
 800c404:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d103      	bne.n	800c418 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c410:	78fb      	ldrb	r3, [r7, #3]
 800c412:	4618      	mov	r0, r3
 800c414:	f000 f872 	bl	800c4fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c418:	20c8      	movs	r0, #200	; 0xc8
 800c41a:	f7f6 f9df 	bl	80027dc <HAL_Delay>
  return USBH_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	70fb      	strb	r3, [r7, #3]
 800c434:	4613      	mov	r3, r2
 800c436:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c43e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c440:	78fa      	ldrb	r2, [r7, #3]
 800c442:	68f9      	ldr	r1, [r7, #12]
 800c444:	4613      	mov	r3, r2
 800c446:	011b      	lsls	r3, r3, #4
 800c448:	1a9b      	subs	r3, r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	440b      	add	r3, r1
 800c44e:	3317      	adds	r3, #23
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00a      	beq.n	800c46c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c456:	78fa      	ldrb	r2, [r7, #3]
 800c458:	68f9      	ldr	r1, [r7, #12]
 800c45a:	4613      	mov	r3, r2
 800c45c:	011b      	lsls	r3, r3, #4
 800c45e:	1a9b      	subs	r3, r3, r2
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	440b      	add	r3, r1
 800c464:	333c      	adds	r3, #60	; 0x3c
 800c466:	78ba      	ldrb	r2, [r7, #2]
 800c468:	701a      	strb	r2, [r3, #0]
 800c46a:	e009      	b.n	800c480 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c46c:	78fa      	ldrb	r2, [r7, #3]
 800c46e:	68f9      	ldr	r1, [r7, #12]
 800c470:	4613      	mov	r3, r2
 800c472:	011b      	lsls	r3, r3, #4
 800c474:	1a9b      	subs	r3, r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	440b      	add	r3, r1
 800c47a:	333d      	adds	r3, #61	; 0x3d
 800c47c:	78ba      	ldrb	r2, [r7, #2]
 800c47e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b082      	sub	sp, #8
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7f6 f9a0 	bl	80027dc <HAL_Delay>
}
 800c49c:	bf00      	nop
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4b2:	79fb      	ldrb	r3, [r7, #7]
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	d817      	bhi.n	800c4e8 <USBH_Get_USB_Status+0x44>
 800c4b8:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <USBH_Get_USB_Status+0x1c>)
 800c4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4be:	bf00      	nop
 800c4c0:	0800c4d1 	.word	0x0800c4d1
 800c4c4:	0800c4d7 	.word	0x0800c4d7
 800c4c8:	0800c4dd 	.word	0x0800c4dd
 800c4cc:	0800c4e3 	.word	0x0800c4e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d4:	e00b      	b.n	800c4ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4da:	e008      	b.n	800c4ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e0:	e005      	b.n	800c4ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e6:	e002      	b.n	800c4ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ec:	bf00      	nop
  }
  return usb_status;
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c506:	79fb      	ldrb	r3, [r7, #7]
 800c508:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c50a:	79fb      	ldrb	r3, [r7, #7]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d102      	bne.n	800c516 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c510:	2300      	movs	r3, #0
 800c512:	73fb      	strb	r3, [r7, #15]
 800c514:	e001      	b.n	800c51a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c516:	2301      	movs	r3, #1
 800c518:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
 800c51c:	461a      	mov	r2, r3
 800c51e:	2101      	movs	r1, #1
 800c520:	4803      	ldr	r0, [pc, #12]	; (800c530 <MX_DriverVbusFS+0x34>)
 800c522:	f7f7 f82f 	bl	8003584 <HAL_GPIO_WritePin>
}
 800c526:	bf00      	nop
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	40020800 	.word	0x40020800

0800c534 <malloc>:
 800c534:	4b02      	ldr	r3, [pc, #8]	; (800c540 <malloc+0xc>)
 800c536:	4601      	mov	r1, r0
 800c538:	6818      	ldr	r0, [r3, #0]
 800c53a:	f000 b82b 	b.w	800c594 <_malloc_r>
 800c53e:	bf00      	nop
 800c540:	20000084 	.word	0x20000084

0800c544 <free>:
 800c544:	4b02      	ldr	r3, [pc, #8]	; (800c550 <free+0xc>)
 800c546:	4601      	mov	r1, r0
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	f001 bd83 	b.w	800e054 <_free_r>
 800c54e:	bf00      	nop
 800c550:	20000084 	.word	0x20000084

0800c554 <sbrk_aligned>:
 800c554:	b570      	push	{r4, r5, r6, lr}
 800c556:	4e0e      	ldr	r6, [pc, #56]	; (800c590 <sbrk_aligned+0x3c>)
 800c558:	460c      	mov	r4, r1
 800c55a:	6831      	ldr	r1, [r6, #0]
 800c55c:	4605      	mov	r5, r0
 800c55e:	b911      	cbnz	r1, 800c566 <sbrk_aligned+0x12>
 800c560:	f000 fea4 	bl	800d2ac <_sbrk_r>
 800c564:	6030      	str	r0, [r6, #0]
 800c566:	4621      	mov	r1, r4
 800c568:	4628      	mov	r0, r5
 800c56a:	f000 fe9f 	bl	800d2ac <_sbrk_r>
 800c56e:	1c43      	adds	r3, r0, #1
 800c570:	d00a      	beq.n	800c588 <sbrk_aligned+0x34>
 800c572:	1cc4      	adds	r4, r0, #3
 800c574:	f024 0403 	bic.w	r4, r4, #3
 800c578:	42a0      	cmp	r0, r4
 800c57a:	d007      	beq.n	800c58c <sbrk_aligned+0x38>
 800c57c:	1a21      	subs	r1, r4, r0
 800c57e:	4628      	mov	r0, r5
 800c580:	f000 fe94 	bl	800d2ac <_sbrk_r>
 800c584:	3001      	adds	r0, #1
 800c586:	d101      	bne.n	800c58c <sbrk_aligned+0x38>
 800c588:	f04f 34ff 	mov.w	r4, #4294967295
 800c58c:	4620      	mov	r0, r4
 800c58e:	bd70      	pop	{r4, r5, r6, pc}
 800c590:	20000da4 	.word	0x20000da4

0800c594 <_malloc_r>:
 800c594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c598:	1ccd      	adds	r5, r1, #3
 800c59a:	f025 0503 	bic.w	r5, r5, #3
 800c59e:	3508      	adds	r5, #8
 800c5a0:	2d0c      	cmp	r5, #12
 800c5a2:	bf38      	it	cc
 800c5a4:	250c      	movcc	r5, #12
 800c5a6:	2d00      	cmp	r5, #0
 800c5a8:	4607      	mov	r7, r0
 800c5aa:	db01      	blt.n	800c5b0 <_malloc_r+0x1c>
 800c5ac:	42a9      	cmp	r1, r5
 800c5ae:	d905      	bls.n	800c5bc <_malloc_r+0x28>
 800c5b0:	230c      	movs	r3, #12
 800c5b2:	603b      	str	r3, [r7, #0]
 800c5b4:	2600      	movs	r6, #0
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c690 <_malloc_r+0xfc>
 800c5c0:	f000 f868 	bl	800c694 <__malloc_lock>
 800c5c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c5c8:	461c      	mov	r4, r3
 800c5ca:	bb5c      	cbnz	r4, 800c624 <_malloc_r+0x90>
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	4638      	mov	r0, r7
 800c5d0:	f7ff ffc0 	bl	800c554 <sbrk_aligned>
 800c5d4:	1c43      	adds	r3, r0, #1
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	d155      	bne.n	800c686 <_malloc_r+0xf2>
 800c5da:	f8d8 4000 	ldr.w	r4, [r8]
 800c5de:	4626      	mov	r6, r4
 800c5e0:	2e00      	cmp	r6, #0
 800c5e2:	d145      	bne.n	800c670 <_malloc_r+0xdc>
 800c5e4:	2c00      	cmp	r4, #0
 800c5e6:	d048      	beq.n	800c67a <_malloc_r+0xe6>
 800c5e8:	6823      	ldr	r3, [r4, #0]
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	eb04 0903 	add.w	r9, r4, r3
 800c5f2:	f000 fe5b 	bl	800d2ac <_sbrk_r>
 800c5f6:	4581      	cmp	r9, r0
 800c5f8:	d13f      	bne.n	800c67a <_malloc_r+0xe6>
 800c5fa:	6821      	ldr	r1, [r4, #0]
 800c5fc:	1a6d      	subs	r5, r5, r1
 800c5fe:	4629      	mov	r1, r5
 800c600:	4638      	mov	r0, r7
 800c602:	f7ff ffa7 	bl	800c554 <sbrk_aligned>
 800c606:	3001      	adds	r0, #1
 800c608:	d037      	beq.n	800c67a <_malloc_r+0xe6>
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	442b      	add	r3, r5
 800c60e:	6023      	str	r3, [r4, #0]
 800c610:	f8d8 3000 	ldr.w	r3, [r8]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d038      	beq.n	800c68a <_malloc_r+0xf6>
 800c618:	685a      	ldr	r2, [r3, #4]
 800c61a:	42a2      	cmp	r2, r4
 800c61c:	d12b      	bne.n	800c676 <_malloc_r+0xe2>
 800c61e:	2200      	movs	r2, #0
 800c620:	605a      	str	r2, [r3, #4]
 800c622:	e00f      	b.n	800c644 <_malloc_r+0xb0>
 800c624:	6822      	ldr	r2, [r4, #0]
 800c626:	1b52      	subs	r2, r2, r5
 800c628:	d41f      	bmi.n	800c66a <_malloc_r+0xd6>
 800c62a:	2a0b      	cmp	r2, #11
 800c62c:	d917      	bls.n	800c65e <_malloc_r+0xca>
 800c62e:	1961      	adds	r1, r4, r5
 800c630:	42a3      	cmp	r3, r4
 800c632:	6025      	str	r5, [r4, #0]
 800c634:	bf18      	it	ne
 800c636:	6059      	strne	r1, [r3, #4]
 800c638:	6863      	ldr	r3, [r4, #4]
 800c63a:	bf08      	it	eq
 800c63c:	f8c8 1000 	streq.w	r1, [r8]
 800c640:	5162      	str	r2, [r4, r5]
 800c642:	604b      	str	r3, [r1, #4]
 800c644:	4638      	mov	r0, r7
 800c646:	f104 060b 	add.w	r6, r4, #11
 800c64a:	f000 f829 	bl	800c6a0 <__malloc_unlock>
 800c64e:	f026 0607 	bic.w	r6, r6, #7
 800c652:	1d23      	adds	r3, r4, #4
 800c654:	1af2      	subs	r2, r6, r3
 800c656:	d0ae      	beq.n	800c5b6 <_malloc_r+0x22>
 800c658:	1b9b      	subs	r3, r3, r6
 800c65a:	50a3      	str	r3, [r4, r2]
 800c65c:	e7ab      	b.n	800c5b6 <_malloc_r+0x22>
 800c65e:	42a3      	cmp	r3, r4
 800c660:	6862      	ldr	r2, [r4, #4]
 800c662:	d1dd      	bne.n	800c620 <_malloc_r+0x8c>
 800c664:	f8c8 2000 	str.w	r2, [r8]
 800c668:	e7ec      	b.n	800c644 <_malloc_r+0xb0>
 800c66a:	4623      	mov	r3, r4
 800c66c:	6864      	ldr	r4, [r4, #4]
 800c66e:	e7ac      	b.n	800c5ca <_malloc_r+0x36>
 800c670:	4634      	mov	r4, r6
 800c672:	6876      	ldr	r6, [r6, #4]
 800c674:	e7b4      	b.n	800c5e0 <_malloc_r+0x4c>
 800c676:	4613      	mov	r3, r2
 800c678:	e7cc      	b.n	800c614 <_malloc_r+0x80>
 800c67a:	230c      	movs	r3, #12
 800c67c:	603b      	str	r3, [r7, #0]
 800c67e:	4638      	mov	r0, r7
 800c680:	f000 f80e 	bl	800c6a0 <__malloc_unlock>
 800c684:	e797      	b.n	800c5b6 <_malloc_r+0x22>
 800c686:	6025      	str	r5, [r4, #0]
 800c688:	e7dc      	b.n	800c644 <_malloc_r+0xb0>
 800c68a:	605b      	str	r3, [r3, #4]
 800c68c:	deff      	udf	#255	; 0xff
 800c68e:	bf00      	nop
 800c690:	20000da0 	.word	0x20000da0

0800c694 <__malloc_lock>:
 800c694:	4801      	ldr	r0, [pc, #4]	; (800c69c <__malloc_lock+0x8>)
 800c696:	f000 be56 	b.w	800d346 <__retarget_lock_acquire_recursive>
 800c69a:	bf00      	nop
 800c69c:	20000ee8 	.word	0x20000ee8

0800c6a0 <__malloc_unlock>:
 800c6a0:	4801      	ldr	r0, [pc, #4]	; (800c6a8 <__malloc_unlock+0x8>)
 800c6a2:	f000 be51 	b.w	800d348 <__retarget_lock_release_recursive>
 800c6a6:	bf00      	nop
 800c6a8:	20000ee8 	.word	0x20000ee8

0800c6ac <__cvt>:
 800c6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b0:	ec55 4b10 	vmov	r4, r5, d0
 800c6b4:	2d00      	cmp	r5, #0
 800c6b6:	460e      	mov	r6, r1
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	462b      	mov	r3, r5
 800c6bc:	bfbb      	ittet	lt
 800c6be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c6c2:	461d      	movlt	r5, r3
 800c6c4:	2300      	movge	r3, #0
 800c6c6:	232d      	movlt	r3, #45	; 0x2d
 800c6c8:	700b      	strb	r3, [r1, #0]
 800c6ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c6d0:	4691      	mov	r9, r2
 800c6d2:	f023 0820 	bic.w	r8, r3, #32
 800c6d6:	bfbc      	itt	lt
 800c6d8:	4622      	movlt	r2, r4
 800c6da:	4614      	movlt	r4, r2
 800c6dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c6e0:	d005      	beq.n	800c6ee <__cvt+0x42>
 800c6e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c6e6:	d100      	bne.n	800c6ea <__cvt+0x3e>
 800c6e8:	3601      	adds	r6, #1
 800c6ea:	2102      	movs	r1, #2
 800c6ec:	e000      	b.n	800c6f0 <__cvt+0x44>
 800c6ee:	2103      	movs	r1, #3
 800c6f0:	ab03      	add	r3, sp, #12
 800c6f2:	9301      	str	r3, [sp, #4]
 800c6f4:	ab02      	add	r3, sp, #8
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	ec45 4b10 	vmov	d0, r4, r5
 800c6fc:	4653      	mov	r3, sl
 800c6fe:	4632      	mov	r2, r6
 800c700:	f000 feb6 	bl	800d470 <_dtoa_r>
 800c704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c708:	4607      	mov	r7, r0
 800c70a:	d102      	bne.n	800c712 <__cvt+0x66>
 800c70c:	f019 0f01 	tst.w	r9, #1
 800c710:	d022      	beq.n	800c758 <__cvt+0xac>
 800c712:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c716:	eb07 0906 	add.w	r9, r7, r6
 800c71a:	d110      	bne.n	800c73e <__cvt+0x92>
 800c71c:	783b      	ldrb	r3, [r7, #0]
 800c71e:	2b30      	cmp	r3, #48	; 0x30
 800c720:	d10a      	bne.n	800c738 <__cvt+0x8c>
 800c722:	2200      	movs	r2, #0
 800c724:	2300      	movs	r3, #0
 800c726:	4620      	mov	r0, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	f7f4 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c72e:	b918      	cbnz	r0, 800c738 <__cvt+0x8c>
 800c730:	f1c6 0601 	rsb	r6, r6, #1
 800c734:	f8ca 6000 	str.w	r6, [sl]
 800c738:	f8da 3000 	ldr.w	r3, [sl]
 800c73c:	4499      	add	r9, r3
 800c73e:	2200      	movs	r2, #0
 800c740:	2300      	movs	r3, #0
 800c742:	4620      	mov	r0, r4
 800c744:	4629      	mov	r1, r5
 800c746:	f7f4 f9bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800c74a:	b108      	cbz	r0, 800c750 <__cvt+0xa4>
 800c74c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c750:	2230      	movs	r2, #48	; 0x30
 800c752:	9b03      	ldr	r3, [sp, #12]
 800c754:	454b      	cmp	r3, r9
 800c756:	d307      	bcc.n	800c768 <__cvt+0xbc>
 800c758:	9b03      	ldr	r3, [sp, #12]
 800c75a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c75c:	1bdb      	subs	r3, r3, r7
 800c75e:	4638      	mov	r0, r7
 800c760:	6013      	str	r3, [r2, #0]
 800c762:	b004      	add	sp, #16
 800c764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c768:	1c59      	adds	r1, r3, #1
 800c76a:	9103      	str	r1, [sp, #12]
 800c76c:	701a      	strb	r2, [r3, #0]
 800c76e:	e7f0      	b.n	800c752 <__cvt+0xa6>

0800c770 <__exponent>:
 800c770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c772:	4603      	mov	r3, r0
 800c774:	2900      	cmp	r1, #0
 800c776:	bfb8      	it	lt
 800c778:	4249      	neglt	r1, r1
 800c77a:	f803 2b02 	strb.w	r2, [r3], #2
 800c77e:	bfb4      	ite	lt
 800c780:	222d      	movlt	r2, #45	; 0x2d
 800c782:	222b      	movge	r2, #43	; 0x2b
 800c784:	2909      	cmp	r1, #9
 800c786:	7042      	strb	r2, [r0, #1]
 800c788:	dd2a      	ble.n	800c7e0 <__exponent+0x70>
 800c78a:	f10d 0207 	add.w	r2, sp, #7
 800c78e:	4617      	mov	r7, r2
 800c790:	260a      	movs	r6, #10
 800c792:	4694      	mov	ip, r2
 800c794:	fb91 f5f6 	sdiv	r5, r1, r6
 800c798:	fb06 1415 	mls	r4, r6, r5, r1
 800c79c:	3430      	adds	r4, #48	; 0x30
 800c79e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	2c63      	cmp	r4, #99	; 0x63
 800c7a6:	f102 32ff 	add.w	r2, r2, #4294967295
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	dcf1      	bgt.n	800c792 <__exponent+0x22>
 800c7ae:	3130      	adds	r1, #48	; 0x30
 800c7b0:	f1ac 0402 	sub.w	r4, ip, #2
 800c7b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c7b8:	1c41      	adds	r1, r0, #1
 800c7ba:	4622      	mov	r2, r4
 800c7bc:	42ba      	cmp	r2, r7
 800c7be:	d30a      	bcc.n	800c7d6 <__exponent+0x66>
 800c7c0:	f10d 0209 	add.w	r2, sp, #9
 800c7c4:	eba2 020c 	sub.w	r2, r2, ip
 800c7c8:	42bc      	cmp	r4, r7
 800c7ca:	bf88      	it	hi
 800c7cc:	2200      	movhi	r2, #0
 800c7ce:	4413      	add	r3, r2
 800c7d0:	1a18      	subs	r0, r3, r0
 800c7d2:	b003      	add	sp, #12
 800c7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c7da:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c7de:	e7ed      	b.n	800c7bc <__exponent+0x4c>
 800c7e0:	2330      	movs	r3, #48	; 0x30
 800c7e2:	3130      	adds	r1, #48	; 0x30
 800c7e4:	7083      	strb	r3, [r0, #2]
 800c7e6:	70c1      	strb	r1, [r0, #3]
 800c7e8:	1d03      	adds	r3, r0, #4
 800c7ea:	e7f1      	b.n	800c7d0 <__exponent+0x60>

0800c7ec <_printf_float>:
 800c7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f0:	ed2d 8b02 	vpush	{d8}
 800c7f4:	b08d      	sub	sp, #52	; 0x34
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c7fc:	4616      	mov	r6, r2
 800c7fe:	461f      	mov	r7, r3
 800c800:	4605      	mov	r5, r0
 800c802:	f000 fd1b 	bl	800d23c <_localeconv_r>
 800c806:	f8d0 a000 	ldr.w	sl, [r0]
 800c80a:	4650      	mov	r0, sl
 800c80c:	f7f3 fd30 	bl	8000270 <strlen>
 800c810:	2300      	movs	r3, #0
 800c812:	930a      	str	r3, [sp, #40]	; 0x28
 800c814:	6823      	ldr	r3, [r4, #0]
 800c816:	9305      	str	r3, [sp, #20]
 800c818:	f8d8 3000 	ldr.w	r3, [r8]
 800c81c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c820:	3307      	adds	r3, #7
 800c822:	f023 0307 	bic.w	r3, r3, #7
 800c826:	f103 0208 	add.w	r2, r3, #8
 800c82a:	f8c8 2000 	str.w	r2, [r8]
 800c82e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c832:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c836:	9307      	str	r3, [sp, #28]
 800c838:	f8cd 8018 	str.w	r8, [sp, #24]
 800c83c:	ee08 0a10 	vmov	s16, r0
 800c840:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c848:	4b9e      	ldr	r3, [pc, #632]	; (800cac4 <_printf_float+0x2d8>)
 800c84a:	f04f 32ff 	mov.w	r2, #4294967295
 800c84e:	f7f4 f96d 	bl	8000b2c <__aeabi_dcmpun>
 800c852:	bb88      	cbnz	r0, 800c8b8 <_printf_float+0xcc>
 800c854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c858:	4b9a      	ldr	r3, [pc, #616]	; (800cac4 <_printf_float+0x2d8>)
 800c85a:	f04f 32ff 	mov.w	r2, #4294967295
 800c85e:	f7f4 f947 	bl	8000af0 <__aeabi_dcmple>
 800c862:	bb48      	cbnz	r0, 800c8b8 <_printf_float+0xcc>
 800c864:	2200      	movs	r2, #0
 800c866:	2300      	movs	r3, #0
 800c868:	4640      	mov	r0, r8
 800c86a:	4649      	mov	r1, r9
 800c86c:	f7f4 f936 	bl	8000adc <__aeabi_dcmplt>
 800c870:	b110      	cbz	r0, 800c878 <_printf_float+0x8c>
 800c872:	232d      	movs	r3, #45	; 0x2d
 800c874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c878:	4a93      	ldr	r2, [pc, #588]	; (800cac8 <_printf_float+0x2dc>)
 800c87a:	4b94      	ldr	r3, [pc, #592]	; (800cacc <_printf_float+0x2e0>)
 800c87c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c880:	bf94      	ite	ls
 800c882:	4690      	movls	r8, r2
 800c884:	4698      	movhi	r8, r3
 800c886:	2303      	movs	r3, #3
 800c888:	6123      	str	r3, [r4, #16]
 800c88a:	9b05      	ldr	r3, [sp, #20]
 800c88c:	f023 0304 	bic.w	r3, r3, #4
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	f04f 0900 	mov.w	r9, #0
 800c896:	9700      	str	r7, [sp, #0]
 800c898:	4633      	mov	r3, r6
 800c89a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c89c:	4621      	mov	r1, r4
 800c89e:	4628      	mov	r0, r5
 800c8a0:	f000 f9da 	bl	800cc58 <_printf_common>
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	f040 8090 	bne.w	800c9ca <_printf_float+0x1de>
 800c8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ae:	b00d      	add	sp, #52	; 0x34
 800c8b0:	ecbd 8b02 	vpop	{d8}
 800c8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b8:	4642      	mov	r2, r8
 800c8ba:	464b      	mov	r3, r9
 800c8bc:	4640      	mov	r0, r8
 800c8be:	4649      	mov	r1, r9
 800c8c0:	f7f4 f934 	bl	8000b2c <__aeabi_dcmpun>
 800c8c4:	b140      	cbz	r0, 800c8d8 <_printf_float+0xec>
 800c8c6:	464b      	mov	r3, r9
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	bfbc      	itt	lt
 800c8cc:	232d      	movlt	r3, #45	; 0x2d
 800c8ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c8d2:	4a7f      	ldr	r2, [pc, #508]	; (800cad0 <_printf_float+0x2e4>)
 800c8d4:	4b7f      	ldr	r3, [pc, #508]	; (800cad4 <_printf_float+0x2e8>)
 800c8d6:	e7d1      	b.n	800c87c <_printf_float+0x90>
 800c8d8:	6863      	ldr	r3, [r4, #4]
 800c8da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c8de:	9206      	str	r2, [sp, #24]
 800c8e0:	1c5a      	adds	r2, r3, #1
 800c8e2:	d13f      	bne.n	800c964 <_printf_float+0x178>
 800c8e4:	2306      	movs	r3, #6
 800c8e6:	6063      	str	r3, [r4, #4]
 800c8e8:	9b05      	ldr	r3, [sp, #20]
 800c8ea:	6861      	ldr	r1, [r4, #4]
 800c8ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	9303      	str	r3, [sp, #12]
 800c8f4:	ab0a      	add	r3, sp, #40	; 0x28
 800c8f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c8fa:	ab09      	add	r3, sp, #36	; 0x24
 800c8fc:	ec49 8b10 	vmov	d0, r8, r9
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	6022      	str	r2, [r4, #0]
 800c904:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c908:	4628      	mov	r0, r5
 800c90a:	f7ff fecf 	bl	800c6ac <__cvt>
 800c90e:	9b06      	ldr	r3, [sp, #24]
 800c910:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c912:	2b47      	cmp	r3, #71	; 0x47
 800c914:	4680      	mov	r8, r0
 800c916:	d108      	bne.n	800c92a <_printf_float+0x13e>
 800c918:	1cc8      	adds	r0, r1, #3
 800c91a:	db02      	blt.n	800c922 <_printf_float+0x136>
 800c91c:	6863      	ldr	r3, [r4, #4]
 800c91e:	4299      	cmp	r1, r3
 800c920:	dd41      	ble.n	800c9a6 <_printf_float+0x1ba>
 800c922:	f1ab 0302 	sub.w	r3, fp, #2
 800c926:	fa5f fb83 	uxtb.w	fp, r3
 800c92a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c92e:	d820      	bhi.n	800c972 <_printf_float+0x186>
 800c930:	3901      	subs	r1, #1
 800c932:	465a      	mov	r2, fp
 800c934:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c938:	9109      	str	r1, [sp, #36]	; 0x24
 800c93a:	f7ff ff19 	bl	800c770 <__exponent>
 800c93e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c940:	1813      	adds	r3, r2, r0
 800c942:	2a01      	cmp	r2, #1
 800c944:	4681      	mov	r9, r0
 800c946:	6123      	str	r3, [r4, #16]
 800c948:	dc02      	bgt.n	800c950 <_printf_float+0x164>
 800c94a:	6822      	ldr	r2, [r4, #0]
 800c94c:	07d2      	lsls	r2, r2, #31
 800c94e:	d501      	bpl.n	800c954 <_printf_float+0x168>
 800c950:	3301      	adds	r3, #1
 800c952:	6123      	str	r3, [r4, #16]
 800c954:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d09c      	beq.n	800c896 <_printf_float+0xaa>
 800c95c:	232d      	movs	r3, #45	; 0x2d
 800c95e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c962:	e798      	b.n	800c896 <_printf_float+0xaa>
 800c964:	9a06      	ldr	r2, [sp, #24]
 800c966:	2a47      	cmp	r2, #71	; 0x47
 800c968:	d1be      	bne.n	800c8e8 <_printf_float+0xfc>
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d1bc      	bne.n	800c8e8 <_printf_float+0xfc>
 800c96e:	2301      	movs	r3, #1
 800c970:	e7b9      	b.n	800c8e6 <_printf_float+0xfa>
 800c972:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c976:	d118      	bne.n	800c9aa <_printf_float+0x1be>
 800c978:	2900      	cmp	r1, #0
 800c97a:	6863      	ldr	r3, [r4, #4]
 800c97c:	dd0b      	ble.n	800c996 <_printf_float+0x1aa>
 800c97e:	6121      	str	r1, [r4, #16]
 800c980:	b913      	cbnz	r3, 800c988 <_printf_float+0x19c>
 800c982:	6822      	ldr	r2, [r4, #0]
 800c984:	07d0      	lsls	r0, r2, #31
 800c986:	d502      	bpl.n	800c98e <_printf_float+0x1a2>
 800c988:	3301      	adds	r3, #1
 800c98a:	440b      	add	r3, r1
 800c98c:	6123      	str	r3, [r4, #16]
 800c98e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c990:	f04f 0900 	mov.w	r9, #0
 800c994:	e7de      	b.n	800c954 <_printf_float+0x168>
 800c996:	b913      	cbnz	r3, 800c99e <_printf_float+0x1b2>
 800c998:	6822      	ldr	r2, [r4, #0]
 800c99a:	07d2      	lsls	r2, r2, #31
 800c99c:	d501      	bpl.n	800c9a2 <_printf_float+0x1b6>
 800c99e:	3302      	adds	r3, #2
 800c9a0:	e7f4      	b.n	800c98c <_printf_float+0x1a0>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e7f2      	b.n	800c98c <_printf_float+0x1a0>
 800c9a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ac:	4299      	cmp	r1, r3
 800c9ae:	db05      	blt.n	800c9bc <_printf_float+0x1d0>
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	6121      	str	r1, [r4, #16]
 800c9b4:	07d8      	lsls	r0, r3, #31
 800c9b6:	d5ea      	bpl.n	800c98e <_printf_float+0x1a2>
 800c9b8:	1c4b      	adds	r3, r1, #1
 800c9ba:	e7e7      	b.n	800c98c <_printf_float+0x1a0>
 800c9bc:	2900      	cmp	r1, #0
 800c9be:	bfd4      	ite	le
 800c9c0:	f1c1 0202 	rsble	r2, r1, #2
 800c9c4:	2201      	movgt	r2, #1
 800c9c6:	4413      	add	r3, r2
 800c9c8:	e7e0      	b.n	800c98c <_printf_float+0x1a0>
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	055a      	lsls	r2, r3, #21
 800c9ce:	d407      	bmi.n	800c9e0 <_printf_float+0x1f4>
 800c9d0:	6923      	ldr	r3, [r4, #16]
 800c9d2:	4642      	mov	r2, r8
 800c9d4:	4631      	mov	r1, r6
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	47b8      	blx	r7
 800c9da:	3001      	adds	r0, #1
 800c9dc:	d12c      	bne.n	800ca38 <_printf_float+0x24c>
 800c9de:	e764      	b.n	800c8aa <_printf_float+0xbe>
 800c9e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c9e4:	f240 80e0 	bls.w	800cba8 <_printf_float+0x3bc>
 800c9e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	f7f4 f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d034      	beq.n	800ca62 <_printf_float+0x276>
 800c9f8:	4a37      	ldr	r2, [pc, #220]	; (800cad8 <_printf_float+0x2ec>)
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	4631      	mov	r1, r6
 800c9fe:	4628      	mov	r0, r5
 800ca00:	47b8      	blx	r7
 800ca02:	3001      	adds	r0, #1
 800ca04:	f43f af51 	beq.w	800c8aa <_printf_float+0xbe>
 800ca08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	db02      	blt.n	800ca16 <_printf_float+0x22a>
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	07d8      	lsls	r0, r3, #31
 800ca14:	d510      	bpl.n	800ca38 <_printf_float+0x24c>
 800ca16:	ee18 3a10 	vmov	r3, s16
 800ca1a:	4652      	mov	r2, sl
 800ca1c:	4631      	mov	r1, r6
 800ca1e:	4628      	mov	r0, r5
 800ca20:	47b8      	blx	r7
 800ca22:	3001      	adds	r0, #1
 800ca24:	f43f af41 	beq.w	800c8aa <_printf_float+0xbe>
 800ca28:	f04f 0800 	mov.w	r8, #0
 800ca2c:	f104 091a 	add.w	r9, r4, #26
 800ca30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca32:	3b01      	subs	r3, #1
 800ca34:	4543      	cmp	r3, r8
 800ca36:	dc09      	bgt.n	800ca4c <_printf_float+0x260>
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	079b      	lsls	r3, r3, #30
 800ca3c:	f100 8107 	bmi.w	800cc4e <_printf_float+0x462>
 800ca40:	68e0      	ldr	r0, [r4, #12]
 800ca42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca44:	4298      	cmp	r0, r3
 800ca46:	bfb8      	it	lt
 800ca48:	4618      	movlt	r0, r3
 800ca4a:	e730      	b.n	800c8ae <_printf_float+0xc2>
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	464a      	mov	r2, r9
 800ca50:	4631      	mov	r1, r6
 800ca52:	4628      	mov	r0, r5
 800ca54:	47b8      	blx	r7
 800ca56:	3001      	adds	r0, #1
 800ca58:	f43f af27 	beq.w	800c8aa <_printf_float+0xbe>
 800ca5c:	f108 0801 	add.w	r8, r8, #1
 800ca60:	e7e6      	b.n	800ca30 <_printf_float+0x244>
 800ca62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	dc39      	bgt.n	800cadc <_printf_float+0x2f0>
 800ca68:	4a1b      	ldr	r2, [pc, #108]	; (800cad8 <_printf_float+0x2ec>)
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	4631      	mov	r1, r6
 800ca6e:	4628      	mov	r0, r5
 800ca70:	47b8      	blx	r7
 800ca72:	3001      	adds	r0, #1
 800ca74:	f43f af19 	beq.w	800c8aa <_printf_float+0xbe>
 800ca78:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	d102      	bne.n	800ca86 <_printf_float+0x29a>
 800ca80:	6823      	ldr	r3, [r4, #0]
 800ca82:	07d9      	lsls	r1, r3, #31
 800ca84:	d5d8      	bpl.n	800ca38 <_printf_float+0x24c>
 800ca86:	ee18 3a10 	vmov	r3, s16
 800ca8a:	4652      	mov	r2, sl
 800ca8c:	4631      	mov	r1, r6
 800ca8e:	4628      	mov	r0, r5
 800ca90:	47b8      	blx	r7
 800ca92:	3001      	adds	r0, #1
 800ca94:	f43f af09 	beq.w	800c8aa <_printf_float+0xbe>
 800ca98:	f04f 0900 	mov.w	r9, #0
 800ca9c:	f104 0a1a 	add.w	sl, r4, #26
 800caa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa2:	425b      	negs	r3, r3
 800caa4:	454b      	cmp	r3, r9
 800caa6:	dc01      	bgt.n	800caac <_printf_float+0x2c0>
 800caa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caaa:	e792      	b.n	800c9d2 <_printf_float+0x1e6>
 800caac:	2301      	movs	r3, #1
 800caae:	4652      	mov	r2, sl
 800cab0:	4631      	mov	r1, r6
 800cab2:	4628      	mov	r0, r5
 800cab4:	47b8      	blx	r7
 800cab6:	3001      	adds	r0, #1
 800cab8:	f43f aef7 	beq.w	800c8aa <_printf_float+0xbe>
 800cabc:	f109 0901 	add.w	r9, r9, #1
 800cac0:	e7ee      	b.n	800caa0 <_printf_float+0x2b4>
 800cac2:	bf00      	nop
 800cac4:	7fefffff 	.word	0x7fefffff
 800cac8:	0800f470 	.word	0x0800f470
 800cacc:	0800f474 	.word	0x0800f474
 800cad0:	0800f478 	.word	0x0800f478
 800cad4:	0800f47c 	.word	0x0800f47c
 800cad8:	0800f480 	.word	0x0800f480
 800cadc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cae0:	429a      	cmp	r2, r3
 800cae2:	bfa8      	it	ge
 800cae4:	461a      	movge	r2, r3
 800cae6:	2a00      	cmp	r2, #0
 800cae8:	4691      	mov	r9, r2
 800caea:	dc37      	bgt.n	800cb5c <_printf_float+0x370>
 800caec:	f04f 0b00 	mov.w	fp, #0
 800caf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800caf4:	f104 021a 	add.w	r2, r4, #26
 800caf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cafa:	9305      	str	r3, [sp, #20]
 800cafc:	eba3 0309 	sub.w	r3, r3, r9
 800cb00:	455b      	cmp	r3, fp
 800cb02:	dc33      	bgt.n	800cb6c <_printf_float+0x380>
 800cb04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	db3b      	blt.n	800cb84 <_printf_float+0x398>
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	07da      	lsls	r2, r3, #31
 800cb10:	d438      	bmi.n	800cb84 <_printf_float+0x398>
 800cb12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cb16:	eba2 0903 	sub.w	r9, r2, r3
 800cb1a:	9b05      	ldr	r3, [sp, #20]
 800cb1c:	1ad2      	subs	r2, r2, r3
 800cb1e:	4591      	cmp	r9, r2
 800cb20:	bfa8      	it	ge
 800cb22:	4691      	movge	r9, r2
 800cb24:	f1b9 0f00 	cmp.w	r9, #0
 800cb28:	dc35      	bgt.n	800cb96 <_printf_float+0x3aa>
 800cb2a:	f04f 0800 	mov.w	r8, #0
 800cb2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb32:	f104 0a1a 	add.w	sl, r4, #26
 800cb36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb3a:	1a9b      	subs	r3, r3, r2
 800cb3c:	eba3 0309 	sub.w	r3, r3, r9
 800cb40:	4543      	cmp	r3, r8
 800cb42:	f77f af79 	ble.w	800ca38 <_printf_float+0x24c>
 800cb46:	2301      	movs	r3, #1
 800cb48:	4652      	mov	r2, sl
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	47b8      	blx	r7
 800cb50:	3001      	adds	r0, #1
 800cb52:	f43f aeaa 	beq.w	800c8aa <_printf_float+0xbe>
 800cb56:	f108 0801 	add.w	r8, r8, #1
 800cb5a:	e7ec      	b.n	800cb36 <_printf_float+0x34a>
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	4631      	mov	r1, r6
 800cb60:	4642      	mov	r2, r8
 800cb62:	4628      	mov	r0, r5
 800cb64:	47b8      	blx	r7
 800cb66:	3001      	adds	r0, #1
 800cb68:	d1c0      	bne.n	800caec <_printf_float+0x300>
 800cb6a:	e69e      	b.n	800c8aa <_printf_float+0xbe>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	4631      	mov	r1, r6
 800cb70:	4628      	mov	r0, r5
 800cb72:	9205      	str	r2, [sp, #20]
 800cb74:	47b8      	blx	r7
 800cb76:	3001      	adds	r0, #1
 800cb78:	f43f ae97 	beq.w	800c8aa <_printf_float+0xbe>
 800cb7c:	9a05      	ldr	r2, [sp, #20]
 800cb7e:	f10b 0b01 	add.w	fp, fp, #1
 800cb82:	e7b9      	b.n	800caf8 <_printf_float+0x30c>
 800cb84:	ee18 3a10 	vmov	r3, s16
 800cb88:	4652      	mov	r2, sl
 800cb8a:	4631      	mov	r1, r6
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	47b8      	blx	r7
 800cb90:	3001      	adds	r0, #1
 800cb92:	d1be      	bne.n	800cb12 <_printf_float+0x326>
 800cb94:	e689      	b.n	800c8aa <_printf_float+0xbe>
 800cb96:	9a05      	ldr	r2, [sp, #20]
 800cb98:	464b      	mov	r3, r9
 800cb9a:	4442      	add	r2, r8
 800cb9c:	4631      	mov	r1, r6
 800cb9e:	4628      	mov	r0, r5
 800cba0:	47b8      	blx	r7
 800cba2:	3001      	adds	r0, #1
 800cba4:	d1c1      	bne.n	800cb2a <_printf_float+0x33e>
 800cba6:	e680      	b.n	800c8aa <_printf_float+0xbe>
 800cba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbaa:	2a01      	cmp	r2, #1
 800cbac:	dc01      	bgt.n	800cbb2 <_printf_float+0x3c6>
 800cbae:	07db      	lsls	r3, r3, #31
 800cbb0:	d53a      	bpl.n	800cc28 <_printf_float+0x43c>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	4642      	mov	r2, r8
 800cbb6:	4631      	mov	r1, r6
 800cbb8:	4628      	mov	r0, r5
 800cbba:	47b8      	blx	r7
 800cbbc:	3001      	adds	r0, #1
 800cbbe:	f43f ae74 	beq.w	800c8aa <_printf_float+0xbe>
 800cbc2:	ee18 3a10 	vmov	r3, s16
 800cbc6:	4652      	mov	r2, sl
 800cbc8:	4631      	mov	r1, r6
 800cbca:	4628      	mov	r0, r5
 800cbcc:	47b8      	blx	r7
 800cbce:	3001      	adds	r0, #1
 800cbd0:	f43f ae6b 	beq.w	800c8aa <_printf_float+0xbe>
 800cbd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cbd8:	2200      	movs	r2, #0
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cbe0:	f7f3 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbe4:	b9d8      	cbnz	r0, 800cc1e <_printf_float+0x432>
 800cbe6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cbea:	f108 0201 	add.w	r2, r8, #1
 800cbee:	4631      	mov	r1, r6
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b8      	blx	r7
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d10e      	bne.n	800cc16 <_printf_float+0x42a>
 800cbf8:	e657      	b.n	800c8aa <_printf_float+0xbe>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	4652      	mov	r2, sl
 800cbfe:	4631      	mov	r1, r6
 800cc00:	4628      	mov	r0, r5
 800cc02:	47b8      	blx	r7
 800cc04:	3001      	adds	r0, #1
 800cc06:	f43f ae50 	beq.w	800c8aa <_printf_float+0xbe>
 800cc0a:	f108 0801 	add.w	r8, r8, #1
 800cc0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc10:	3b01      	subs	r3, #1
 800cc12:	4543      	cmp	r3, r8
 800cc14:	dcf1      	bgt.n	800cbfa <_printf_float+0x40e>
 800cc16:	464b      	mov	r3, r9
 800cc18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc1c:	e6da      	b.n	800c9d4 <_printf_float+0x1e8>
 800cc1e:	f04f 0800 	mov.w	r8, #0
 800cc22:	f104 0a1a 	add.w	sl, r4, #26
 800cc26:	e7f2      	b.n	800cc0e <_printf_float+0x422>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	4642      	mov	r2, r8
 800cc2c:	e7df      	b.n	800cbee <_printf_float+0x402>
 800cc2e:	2301      	movs	r3, #1
 800cc30:	464a      	mov	r2, r9
 800cc32:	4631      	mov	r1, r6
 800cc34:	4628      	mov	r0, r5
 800cc36:	47b8      	blx	r7
 800cc38:	3001      	adds	r0, #1
 800cc3a:	f43f ae36 	beq.w	800c8aa <_printf_float+0xbe>
 800cc3e:	f108 0801 	add.w	r8, r8, #1
 800cc42:	68e3      	ldr	r3, [r4, #12]
 800cc44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc46:	1a5b      	subs	r3, r3, r1
 800cc48:	4543      	cmp	r3, r8
 800cc4a:	dcf0      	bgt.n	800cc2e <_printf_float+0x442>
 800cc4c:	e6f8      	b.n	800ca40 <_printf_float+0x254>
 800cc4e:	f04f 0800 	mov.w	r8, #0
 800cc52:	f104 0919 	add.w	r9, r4, #25
 800cc56:	e7f4      	b.n	800cc42 <_printf_float+0x456>

0800cc58 <_printf_common>:
 800cc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc5c:	4616      	mov	r6, r2
 800cc5e:	4699      	mov	r9, r3
 800cc60:	688a      	ldr	r2, [r1, #8]
 800cc62:	690b      	ldr	r3, [r1, #16]
 800cc64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	bfb8      	it	lt
 800cc6c:	4613      	movlt	r3, r2
 800cc6e:	6033      	str	r3, [r6, #0]
 800cc70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc74:	4607      	mov	r7, r0
 800cc76:	460c      	mov	r4, r1
 800cc78:	b10a      	cbz	r2, 800cc7e <_printf_common+0x26>
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	6033      	str	r3, [r6, #0]
 800cc7e:	6823      	ldr	r3, [r4, #0]
 800cc80:	0699      	lsls	r1, r3, #26
 800cc82:	bf42      	ittt	mi
 800cc84:	6833      	ldrmi	r3, [r6, #0]
 800cc86:	3302      	addmi	r3, #2
 800cc88:	6033      	strmi	r3, [r6, #0]
 800cc8a:	6825      	ldr	r5, [r4, #0]
 800cc8c:	f015 0506 	ands.w	r5, r5, #6
 800cc90:	d106      	bne.n	800cca0 <_printf_common+0x48>
 800cc92:	f104 0a19 	add.w	sl, r4, #25
 800cc96:	68e3      	ldr	r3, [r4, #12]
 800cc98:	6832      	ldr	r2, [r6, #0]
 800cc9a:	1a9b      	subs	r3, r3, r2
 800cc9c:	42ab      	cmp	r3, r5
 800cc9e:	dc26      	bgt.n	800ccee <_printf_common+0x96>
 800cca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cca4:	1e13      	subs	r3, r2, #0
 800cca6:	6822      	ldr	r2, [r4, #0]
 800cca8:	bf18      	it	ne
 800ccaa:	2301      	movne	r3, #1
 800ccac:	0692      	lsls	r2, r2, #26
 800ccae:	d42b      	bmi.n	800cd08 <_printf_common+0xb0>
 800ccb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	4638      	mov	r0, r7
 800ccb8:	47c0      	blx	r8
 800ccba:	3001      	adds	r0, #1
 800ccbc:	d01e      	beq.n	800ccfc <_printf_common+0xa4>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	6922      	ldr	r2, [r4, #16]
 800ccc2:	f003 0306 	and.w	r3, r3, #6
 800ccc6:	2b04      	cmp	r3, #4
 800ccc8:	bf02      	ittt	eq
 800ccca:	68e5      	ldreq	r5, [r4, #12]
 800cccc:	6833      	ldreq	r3, [r6, #0]
 800ccce:	1aed      	subeq	r5, r5, r3
 800ccd0:	68a3      	ldr	r3, [r4, #8]
 800ccd2:	bf0c      	ite	eq
 800ccd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccd8:	2500      	movne	r5, #0
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	bfc4      	itt	gt
 800ccde:	1a9b      	subgt	r3, r3, r2
 800cce0:	18ed      	addgt	r5, r5, r3
 800cce2:	2600      	movs	r6, #0
 800cce4:	341a      	adds	r4, #26
 800cce6:	42b5      	cmp	r5, r6
 800cce8:	d11a      	bne.n	800cd20 <_printf_common+0xc8>
 800ccea:	2000      	movs	r0, #0
 800ccec:	e008      	b.n	800cd00 <_printf_common+0xa8>
 800ccee:	2301      	movs	r3, #1
 800ccf0:	4652      	mov	r2, sl
 800ccf2:	4649      	mov	r1, r9
 800ccf4:	4638      	mov	r0, r7
 800ccf6:	47c0      	blx	r8
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d103      	bne.n	800cd04 <_printf_common+0xac>
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd04:	3501      	adds	r5, #1
 800cd06:	e7c6      	b.n	800cc96 <_printf_common+0x3e>
 800cd08:	18e1      	adds	r1, r4, r3
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	2030      	movs	r0, #48	; 0x30
 800cd0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd12:	4422      	add	r2, r4
 800cd14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd1c:	3302      	adds	r3, #2
 800cd1e:	e7c7      	b.n	800ccb0 <_printf_common+0x58>
 800cd20:	2301      	movs	r3, #1
 800cd22:	4622      	mov	r2, r4
 800cd24:	4649      	mov	r1, r9
 800cd26:	4638      	mov	r0, r7
 800cd28:	47c0      	blx	r8
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	d0e6      	beq.n	800ccfc <_printf_common+0xa4>
 800cd2e:	3601      	adds	r6, #1
 800cd30:	e7d9      	b.n	800cce6 <_printf_common+0x8e>
	...

0800cd34 <_printf_i>:
 800cd34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd38:	7e0f      	ldrb	r7, [r1, #24]
 800cd3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd3c:	2f78      	cmp	r7, #120	; 0x78
 800cd3e:	4691      	mov	r9, r2
 800cd40:	4680      	mov	r8, r0
 800cd42:	460c      	mov	r4, r1
 800cd44:	469a      	mov	sl, r3
 800cd46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd4a:	d807      	bhi.n	800cd5c <_printf_i+0x28>
 800cd4c:	2f62      	cmp	r7, #98	; 0x62
 800cd4e:	d80a      	bhi.n	800cd66 <_printf_i+0x32>
 800cd50:	2f00      	cmp	r7, #0
 800cd52:	f000 80d4 	beq.w	800cefe <_printf_i+0x1ca>
 800cd56:	2f58      	cmp	r7, #88	; 0x58
 800cd58:	f000 80c0 	beq.w	800cedc <_printf_i+0x1a8>
 800cd5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd64:	e03a      	b.n	800cddc <_printf_i+0xa8>
 800cd66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd6a:	2b15      	cmp	r3, #21
 800cd6c:	d8f6      	bhi.n	800cd5c <_printf_i+0x28>
 800cd6e:	a101      	add	r1, pc, #4	; (adr r1, 800cd74 <_printf_i+0x40>)
 800cd70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd74:	0800cdcd 	.word	0x0800cdcd
 800cd78:	0800cde1 	.word	0x0800cde1
 800cd7c:	0800cd5d 	.word	0x0800cd5d
 800cd80:	0800cd5d 	.word	0x0800cd5d
 800cd84:	0800cd5d 	.word	0x0800cd5d
 800cd88:	0800cd5d 	.word	0x0800cd5d
 800cd8c:	0800cde1 	.word	0x0800cde1
 800cd90:	0800cd5d 	.word	0x0800cd5d
 800cd94:	0800cd5d 	.word	0x0800cd5d
 800cd98:	0800cd5d 	.word	0x0800cd5d
 800cd9c:	0800cd5d 	.word	0x0800cd5d
 800cda0:	0800cee5 	.word	0x0800cee5
 800cda4:	0800ce0d 	.word	0x0800ce0d
 800cda8:	0800ce9f 	.word	0x0800ce9f
 800cdac:	0800cd5d 	.word	0x0800cd5d
 800cdb0:	0800cd5d 	.word	0x0800cd5d
 800cdb4:	0800cf07 	.word	0x0800cf07
 800cdb8:	0800cd5d 	.word	0x0800cd5d
 800cdbc:	0800ce0d 	.word	0x0800ce0d
 800cdc0:	0800cd5d 	.word	0x0800cd5d
 800cdc4:	0800cd5d 	.word	0x0800cd5d
 800cdc8:	0800cea7 	.word	0x0800cea7
 800cdcc:	682b      	ldr	r3, [r5, #0]
 800cdce:	1d1a      	adds	r2, r3, #4
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	602a      	str	r2, [r5, #0]
 800cdd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cddc:	2301      	movs	r3, #1
 800cdde:	e09f      	b.n	800cf20 <_printf_i+0x1ec>
 800cde0:	6820      	ldr	r0, [r4, #0]
 800cde2:	682b      	ldr	r3, [r5, #0]
 800cde4:	0607      	lsls	r7, r0, #24
 800cde6:	f103 0104 	add.w	r1, r3, #4
 800cdea:	6029      	str	r1, [r5, #0]
 800cdec:	d501      	bpl.n	800cdf2 <_printf_i+0xbe>
 800cdee:	681e      	ldr	r6, [r3, #0]
 800cdf0:	e003      	b.n	800cdfa <_printf_i+0xc6>
 800cdf2:	0646      	lsls	r6, r0, #25
 800cdf4:	d5fb      	bpl.n	800cdee <_printf_i+0xba>
 800cdf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cdfa:	2e00      	cmp	r6, #0
 800cdfc:	da03      	bge.n	800ce06 <_printf_i+0xd2>
 800cdfe:	232d      	movs	r3, #45	; 0x2d
 800ce00:	4276      	negs	r6, r6
 800ce02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce06:	485a      	ldr	r0, [pc, #360]	; (800cf70 <_printf_i+0x23c>)
 800ce08:	230a      	movs	r3, #10
 800ce0a:	e012      	b.n	800ce32 <_printf_i+0xfe>
 800ce0c:	682b      	ldr	r3, [r5, #0]
 800ce0e:	6820      	ldr	r0, [r4, #0]
 800ce10:	1d19      	adds	r1, r3, #4
 800ce12:	6029      	str	r1, [r5, #0]
 800ce14:	0605      	lsls	r5, r0, #24
 800ce16:	d501      	bpl.n	800ce1c <_printf_i+0xe8>
 800ce18:	681e      	ldr	r6, [r3, #0]
 800ce1a:	e002      	b.n	800ce22 <_printf_i+0xee>
 800ce1c:	0641      	lsls	r1, r0, #25
 800ce1e:	d5fb      	bpl.n	800ce18 <_printf_i+0xe4>
 800ce20:	881e      	ldrh	r6, [r3, #0]
 800ce22:	4853      	ldr	r0, [pc, #332]	; (800cf70 <_printf_i+0x23c>)
 800ce24:	2f6f      	cmp	r7, #111	; 0x6f
 800ce26:	bf0c      	ite	eq
 800ce28:	2308      	moveq	r3, #8
 800ce2a:	230a      	movne	r3, #10
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce32:	6865      	ldr	r5, [r4, #4]
 800ce34:	60a5      	str	r5, [r4, #8]
 800ce36:	2d00      	cmp	r5, #0
 800ce38:	bfa2      	ittt	ge
 800ce3a:	6821      	ldrge	r1, [r4, #0]
 800ce3c:	f021 0104 	bicge.w	r1, r1, #4
 800ce40:	6021      	strge	r1, [r4, #0]
 800ce42:	b90e      	cbnz	r6, 800ce48 <_printf_i+0x114>
 800ce44:	2d00      	cmp	r5, #0
 800ce46:	d04b      	beq.n	800cee0 <_printf_i+0x1ac>
 800ce48:	4615      	mov	r5, r2
 800ce4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce4e:	fb03 6711 	mls	r7, r3, r1, r6
 800ce52:	5dc7      	ldrb	r7, [r0, r7]
 800ce54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce58:	4637      	mov	r7, r6
 800ce5a:	42bb      	cmp	r3, r7
 800ce5c:	460e      	mov	r6, r1
 800ce5e:	d9f4      	bls.n	800ce4a <_printf_i+0x116>
 800ce60:	2b08      	cmp	r3, #8
 800ce62:	d10b      	bne.n	800ce7c <_printf_i+0x148>
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	07de      	lsls	r6, r3, #31
 800ce68:	d508      	bpl.n	800ce7c <_printf_i+0x148>
 800ce6a:	6923      	ldr	r3, [r4, #16]
 800ce6c:	6861      	ldr	r1, [r4, #4]
 800ce6e:	4299      	cmp	r1, r3
 800ce70:	bfde      	ittt	le
 800ce72:	2330      	movle	r3, #48	; 0x30
 800ce74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce7c:	1b52      	subs	r2, r2, r5
 800ce7e:	6122      	str	r2, [r4, #16]
 800ce80:	f8cd a000 	str.w	sl, [sp]
 800ce84:	464b      	mov	r3, r9
 800ce86:	aa03      	add	r2, sp, #12
 800ce88:	4621      	mov	r1, r4
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	f7ff fee4 	bl	800cc58 <_printf_common>
 800ce90:	3001      	adds	r0, #1
 800ce92:	d14a      	bne.n	800cf2a <_printf_i+0x1f6>
 800ce94:	f04f 30ff 	mov.w	r0, #4294967295
 800ce98:	b004      	add	sp, #16
 800ce9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	f043 0320 	orr.w	r3, r3, #32
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	4833      	ldr	r0, [pc, #204]	; (800cf74 <_printf_i+0x240>)
 800cea8:	2778      	movs	r7, #120	; 0x78
 800ceaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	6829      	ldr	r1, [r5, #0]
 800ceb2:	061f      	lsls	r7, r3, #24
 800ceb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ceb8:	d402      	bmi.n	800cec0 <_printf_i+0x18c>
 800ceba:	065f      	lsls	r7, r3, #25
 800cebc:	bf48      	it	mi
 800cebe:	b2b6      	uxthmi	r6, r6
 800cec0:	07df      	lsls	r7, r3, #31
 800cec2:	bf48      	it	mi
 800cec4:	f043 0320 	orrmi.w	r3, r3, #32
 800cec8:	6029      	str	r1, [r5, #0]
 800ceca:	bf48      	it	mi
 800cecc:	6023      	strmi	r3, [r4, #0]
 800cece:	b91e      	cbnz	r6, 800ced8 <_printf_i+0x1a4>
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	f023 0320 	bic.w	r3, r3, #32
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	2310      	movs	r3, #16
 800ceda:	e7a7      	b.n	800ce2c <_printf_i+0xf8>
 800cedc:	4824      	ldr	r0, [pc, #144]	; (800cf70 <_printf_i+0x23c>)
 800cede:	e7e4      	b.n	800ceaa <_printf_i+0x176>
 800cee0:	4615      	mov	r5, r2
 800cee2:	e7bd      	b.n	800ce60 <_printf_i+0x12c>
 800cee4:	682b      	ldr	r3, [r5, #0]
 800cee6:	6826      	ldr	r6, [r4, #0]
 800cee8:	6961      	ldr	r1, [r4, #20]
 800ceea:	1d18      	adds	r0, r3, #4
 800ceec:	6028      	str	r0, [r5, #0]
 800ceee:	0635      	lsls	r5, r6, #24
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	d501      	bpl.n	800cef8 <_printf_i+0x1c4>
 800cef4:	6019      	str	r1, [r3, #0]
 800cef6:	e002      	b.n	800cefe <_printf_i+0x1ca>
 800cef8:	0670      	lsls	r0, r6, #25
 800cefa:	d5fb      	bpl.n	800cef4 <_printf_i+0x1c0>
 800cefc:	8019      	strh	r1, [r3, #0]
 800cefe:	2300      	movs	r3, #0
 800cf00:	6123      	str	r3, [r4, #16]
 800cf02:	4615      	mov	r5, r2
 800cf04:	e7bc      	b.n	800ce80 <_printf_i+0x14c>
 800cf06:	682b      	ldr	r3, [r5, #0]
 800cf08:	1d1a      	adds	r2, r3, #4
 800cf0a:	602a      	str	r2, [r5, #0]
 800cf0c:	681d      	ldr	r5, [r3, #0]
 800cf0e:	6862      	ldr	r2, [r4, #4]
 800cf10:	2100      	movs	r1, #0
 800cf12:	4628      	mov	r0, r5
 800cf14:	f7f3 f95c 	bl	80001d0 <memchr>
 800cf18:	b108      	cbz	r0, 800cf1e <_printf_i+0x1ea>
 800cf1a:	1b40      	subs	r0, r0, r5
 800cf1c:	6060      	str	r0, [r4, #4]
 800cf1e:	6863      	ldr	r3, [r4, #4]
 800cf20:	6123      	str	r3, [r4, #16]
 800cf22:	2300      	movs	r3, #0
 800cf24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf28:	e7aa      	b.n	800ce80 <_printf_i+0x14c>
 800cf2a:	6923      	ldr	r3, [r4, #16]
 800cf2c:	462a      	mov	r2, r5
 800cf2e:	4649      	mov	r1, r9
 800cf30:	4640      	mov	r0, r8
 800cf32:	47d0      	blx	sl
 800cf34:	3001      	adds	r0, #1
 800cf36:	d0ad      	beq.n	800ce94 <_printf_i+0x160>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	079b      	lsls	r3, r3, #30
 800cf3c:	d413      	bmi.n	800cf66 <_printf_i+0x232>
 800cf3e:	68e0      	ldr	r0, [r4, #12]
 800cf40:	9b03      	ldr	r3, [sp, #12]
 800cf42:	4298      	cmp	r0, r3
 800cf44:	bfb8      	it	lt
 800cf46:	4618      	movlt	r0, r3
 800cf48:	e7a6      	b.n	800ce98 <_printf_i+0x164>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	4632      	mov	r2, r6
 800cf4e:	4649      	mov	r1, r9
 800cf50:	4640      	mov	r0, r8
 800cf52:	47d0      	blx	sl
 800cf54:	3001      	adds	r0, #1
 800cf56:	d09d      	beq.n	800ce94 <_printf_i+0x160>
 800cf58:	3501      	adds	r5, #1
 800cf5a:	68e3      	ldr	r3, [r4, #12]
 800cf5c:	9903      	ldr	r1, [sp, #12]
 800cf5e:	1a5b      	subs	r3, r3, r1
 800cf60:	42ab      	cmp	r3, r5
 800cf62:	dcf2      	bgt.n	800cf4a <_printf_i+0x216>
 800cf64:	e7eb      	b.n	800cf3e <_printf_i+0x20a>
 800cf66:	2500      	movs	r5, #0
 800cf68:	f104 0619 	add.w	r6, r4, #25
 800cf6c:	e7f5      	b.n	800cf5a <_printf_i+0x226>
 800cf6e:	bf00      	nop
 800cf70:	0800f482 	.word	0x0800f482
 800cf74:	0800f493 	.word	0x0800f493

0800cf78 <std>:
 800cf78:	2300      	movs	r3, #0
 800cf7a:	b510      	push	{r4, lr}
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	e9c0 3300 	strd	r3, r3, [r0]
 800cf82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf86:	6083      	str	r3, [r0, #8]
 800cf88:	8181      	strh	r1, [r0, #12]
 800cf8a:	6643      	str	r3, [r0, #100]	; 0x64
 800cf8c:	81c2      	strh	r2, [r0, #14]
 800cf8e:	6183      	str	r3, [r0, #24]
 800cf90:	4619      	mov	r1, r3
 800cf92:	2208      	movs	r2, #8
 800cf94:	305c      	adds	r0, #92	; 0x5c
 800cf96:	f000 f948 	bl	800d22a <memset>
 800cf9a:	4b0d      	ldr	r3, [pc, #52]	; (800cfd0 <std+0x58>)
 800cf9c:	6263      	str	r3, [r4, #36]	; 0x24
 800cf9e:	4b0d      	ldr	r3, [pc, #52]	; (800cfd4 <std+0x5c>)
 800cfa0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cfa2:	4b0d      	ldr	r3, [pc, #52]	; (800cfd8 <std+0x60>)
 800cfa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cfa6:	4b0d      	ldr	r3, [pc, #52]	; (800cfdc <std+0x64>)
 800cfa8:	6323      	str	r3, [r4, #48]	; 0x30
 800cfaa:	4b0d      	ldr	r3, [pc, #52]	; (800cfe0 <std+0x68>)
 800cfac:	6224      	str	r4, [r4, #32]
 800cfae:	429c      	cmp	r4, r3
 800cfb0:	d006      	beq.n	800cfc0 <std+0x48>
 800cfb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cfb6:	4294      	cmp	r4, r2
 800cfb8:	d002      	beq.n	800cfc0 <std+0x48>
 800cfba:	33d0      	adds	r3, #208	; 0xd0
 800cfbc:	429c      	cmp	r4, r3
 800cfbe:	d105      	bne.n	800cfcc <std+0x54>
 800cfc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfc8:	f000 b9bc 	b.w	800d344 <__retarget_lock_init_recursive>
 800cfcc:	bd10      	pop	{r4, pc}
 800cfce:	bf00      	nop
 800cfd0:	0800d1a5 	.word	0x0800d1a5
 800cfd4:	0800d1c7 	.word	0x0800d1c7
 800cfd8:	0800d1ff 	.word	0x0800d1ff
 800cfdc:	0800d223 	.word	0x0800d223
 800cfe0:	20000da8 	.word	0x20000da8

0800cfe4 <stdio_exit_handler>:
 800cfe4:	4a02      	ldr	r2, [pc, #8]	; (800cff0 <stdio_exit_handler+0xc>)
 800cfe6:	4903      	ldr	r1, [pc, #12]	; (800cff4 <stdio_exit_handler+0x10>)
 800cfe8:	4803      	ldr	r0, [pc, #12]	; (800cff8 <stdio_exit_handler+0x14>)
 800cfea:	f000 b869 	b.w	800d0c0 <_fwalk_sglue>
 800cfee:	bf00      	nop
 800cff0:	2000002c 	.word	0x2000002c
 800cff4:	0800eba1 	.word	0x0800eba1
 800cff8:	20000038 	.word	0x20000038

0800cffc <cleanup_stdio>:
 800cffc:	6841      	ldr	r1, [r0, #4]
 800cffe:	4b0c      	ldr	r3, [pc, #48]	; (800d030 <cleanup_stdio+0x34>)
 800d000:	4299      	cmp	r1, r3
 800d002:	b510      	push	{r4, lr}
 800d004:	4604      	mov	r4, r0
 800d006:	d001      	beq.n	800d00c <cleanup_stdio+0x10>
 800d008:	f001 fdca 	bl	800eba0 <_fflush_r>
 800d00c:	68a1      	ldr	r1, [r4, #8]
 800d00e:	4b09      	ldr	r3, [pc, #36]	; (800d034 <cleanup_stdio+0x38>)
 800d010:	4299      	cmp	r1, r3
 800d012:	d002      	beq.n	800d01a <cleanup_stdio+0x1e>
 800d014:	4620      	mov	r0, r4
 800d016:	f001 fdc3 	bl	800eba0 <_fflush_r>
 800d01a:	68e1      	ldr	r1, [r4, #12]
 800d01c:	4b06      	ldr	r3, [pc, #24]	; (800d038 <cleanup_stdio+0x3c>)
 800d01e:	4299      	cmp	r1, r3
 800d020:	d004      	beq.n	800d02c <cleanup_stdio+0x30>
 800d022:	4620      	mov	r0, r4
 800d024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d028:	f001 bdba 	b.w	800eba0 <_fflush_r>
 800d02c:	bd10      	pop	{r4, pc}
 800d02e:	bf00      	nop
 800d030:	20000da8 	.word	0x20000da8
 800d034:	20000e10 	.word	0x20000e10
 800d038:	20000e78 	.word	0x20000e78

0800d03c <global_stdio_init.part.0>:
 800d03c:	b510      	push	{r4, lr}
 800d03e:	4b0b      	ldr	r3, [pc, #44]	; (800d06c <global_stdio_init.part.0+0x30>)
 800d040:	4c0b      	ldr	r4, [pc, #44]	; (800d070 <global_stdio_init.part.0+0x34>)
 800d042:	4a0c      	ldr	r2, [pc, #48]	; (800d074 <global_stdio_init.part.0+0x38>)
 800d044:	601a      	str	r2, [r3, #0]
 800d046:	4620      	mov	r0, r4
 800d048:	2200      	movs	r2, #0
 800d04a:	2104      	movs	r1, #4
 800d04c:	f7ff ff94 	bl	800cf78 <std>
 800d050:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d054:	2201      	movs	r2, #1
 800d056:	2109      	movs	r1, #9
 800d058:	f7ff ff8e 	bl	800cf78 <std>
 800d05c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d060:	2202      	movs	r2, #2
 800d062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d066:	2112      	movs	r1, #18
 800d068:	f7ff bf86 	b.w	800cf78 <std>
 800d06c:	20000ee0 	.word	0x20000ee0
 800d070:	20000da8 	.word	0x20000da8
 800d074:	0800cfe5 	.word	0x0800cfe5

0800d078 <__sfp_lock_acquire>:
 800d078:	4801      	ldr	r0, [pc, #4]	; (800d080 <__sfp_lock_acquire+0x8>)
 800d07a:	f000 b964 	b.w	800d346 <__retarget_lock_acquire_recursive>
 800d07e:	bf00      	nop
 800d080:	20000ee9 	.word	0x20000ee9

0800d084 <__sfp_lock_release>:
 800d084:	4801      	ldr	r0, [pc, #4]	; (800d08c <__sfp_lock_release+0x8>)
 800d086:	f000 b95f 	b.w	800d348 <__retarget_lock_release_recursive>
 800d08a:	bf00      	nop
 800d08c:	20000ee9 	.word	0x20000ee9

0800d090 <__sinit>:
 800d090:	b510      	push	{r4, lr}
 800d092:	4604      	mov	r4, r0
 800d094:	f7ff fff0 	bl	800d078 <__sfp_lock_acquire>
 800d098:	6a23      	ldr	r3, [r4, #32]
 800d09a:	b11b      	cbz	r3, 800d0a4 <__sinit+0x14>
 800d09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0a0:	f7ff bff0 	b.w	800d084 <__sfp_lock_release>
 800d0a4:	4b04      	ldr	r3, [pc, #16]	; (800d0b8 <__sinit+0x28>)
 800d0a6:	6223      	str	r3, [r4, #32]
 800d0a8:	4b04      	ldr	r3, [pc, #16]	; (800d0bc <__sinit+0x2c>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d1f5      	bne.n	800d09c <__sinit+0xc>
 800d0b0:	f7ff ffc4 	bl	800d03c <global_stdio_init.part.0>
 800d0b4:	e7f2      	b.n	800d09c <__sinit+0xc>
 800d0b6:	bf00      	nop
 800d0b8:	0800cffd 	.word	0x0800cffd
 800d0bc:	20000ee0 	.word	0x20000ee0

0800d0c0 <_fwalk_sglue>:
 800d0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c4:	4607      	mov	r7, r0
 800d0c6:	4688      	mov	r8, r1
 800d0c8:	4614      	mov	r4, r2
 800d0ca:	2600      	movs	r6, #0
 800d0cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0d0:	f1b9 0901 	subs.w	r9, r9, #1
 800d0d4:	d505      	bpl.n	800d0e2 <_fwalk_sglue+0x22>
 800d0d6:	6824      	ldr	r4, [r4, #0]
 800d0d8:	2c00      	cmp	r4, #0
 800d0da:	d1f7      	bne.n	800d0cc <_fwalk_sglue+0xc>
 800d0dc:	4630      	mov	r0, r6
 800d0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e2:	89ab      	ldrh	r3, [r5, #12]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d907      	bls.n	800d0f8 <_fwalk_sglue+0x38>
 800d0e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	d003      	beq.n	800d0f8 <_fwalk_sglue+0x38>
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	47c0      	blx	r8
 800d0f6:	4306      	orrs	r6, r0
 800d0f8:	3568      	adds	r5, #104	; 0x68
 800d0fa:	e7e9      	b.n	800d0d0 <_fwalk_sglue+0x10>

0800d0fc <sniprintf>:
 800d0fc:	b40c      	push	{r2, r3}
 800d0fe:	b530      	push	{r4, r5, lr}
 800d100:	4b17      	ldr	r3, [pc, #92]	; (800d160 <sniprintf+0x64>)
 800d102:	1e0c      	subs	r4, r1, #0
 800d104:	681d      	ldr	r5, [r3, #0]
 800d106:	b09d      	sub	sp, #116	; 0x74
 800d108:	da08      	bge.n	800d11c <sniprintf+0x20>
 800d10a:	238b      	movs	r3, #139	; 0x8b
 800d10c:	602b      	str	r3, [r5, #0]
 800d10e:	f04f 30ff 	mov.w	r0, #4294967295
 800d112:	b01d      	add	sp, #116	; 0x74
 800d114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d118:	b002      	add	sp, #8
 800d11a:	4770      	bx	lr
 800d11c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d120:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d124:	bf14      	ite	ne
 800d126:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d12a:	4623      	moveq	r3, r4
 800d12c:	9304      	str	r3, [sp, #16]
 800d12e:	9307      	str	r3, [sp, #28]
 800d130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d134:	9002      	str	r0, [sp, #8]
 800d136:	9006      	str	r0, [sp, #24]
 800d138:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d13c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d13e:	ab21      	add	r3, sp, #132	; 0x84
 800d140:	a902      	add	r1, sp, #8
 800d142:	4628      	mov	r0, r5
 800d144:	9301      	str	r3, [sp, #4]
 800d146:	f001 fba7 	bl	800e898 <_svfiprintf_r>
 800d14a:	1c43      	adds	r3, r0, #1
 800d14c:	bfbc      	itt	lt
 800d14e:	238b      	movlt	r3, #139	; 0x8b
 800d150:	602b      	strlt	r3, [r5, #0]
 800d152:	2c00      	cmp	r4, #0
 800d154:	d0dd      	beq.n	800d112 <sniprintf+0x16>
 800d156:	9b02      	ldr	r3, [sp, #8]
 800d158:	2200      	movs	r2, #0
 800d15a:	701a      	strb	r2, [r3, #0]
 800d15c:	e7d9      	b.n	800d112 <sniprintf+0x16>
 800d15e:	bf00      	nop
 800d160:	20000084 	.word	0x20000084

0800d164 <siprintf>:
 800d164:	b40e      	push	{r1, r2, r3}
 800d166:	b500      	push	{lr}
 800d168:	b09c      	sub	sp, #112	; 0x70
 800d16a:	ab1d      	add	r3, sp, #116	; 0x74
 800d16c:	9002      	str	r0, [sp, #8]
 800d16e:	9006      	str	r0, [sp, #24]
 800d170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d174:	4809      	ldr	r0, [pc, #36]	; (800d19c <siprintf+0x38>)
 800d176:	9107      	str	r1, [sp, #28]
 800d178:	9104      	str	r1, [sp, #16]
 800d17a:	4909      	ldr	r1, [pc, #36]	; (800d1a0 <siprintf+0x3c>)
 800d17c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d180:	9105      	str	r1, [sp, #20]
 800d182:	6800      	ldr	r0, [r0, #0]
 800d184:	9301      	str	r3, [sp, #4]
 800d186:	a902      	add	r1, sp, #8
 800d188:	f001 fb86 	bl	800e898 <_svfiprintf_r>
 800d18c:	9b02      	ldr	r3, [sp, #8]
 800d18e:	2200      	movs	r2, #0
 800d190:	701a      	strb	r2, [r3, #0]
 800d192:	b01c      	add	sp, #112	; 0x70
 800d194:	f85d eb04 	ldr.w	lr, [sp], #4
 800d198:	b003      	add	sp, #12
 800d19a:	4770      	bx	lr
 800d19c:	20000084 	.word	0x20000084
 800d1a0:	ffff0208 	.word	0xffff0208

0800d1a4 <__sread>:
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ac:	f000 f86c 	bl	800d288 <_read_r>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	bfab      	itete	ge
 800d1b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1b6:	89a3      	ldrhlt	r3, [r4, #12]
 800d1b8:	181b      	addge	r3, r3, r0
 800d1ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1be:	bfac      	ite	ge
 800d1c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1c2:	81a3      	strhlt	r3, [r4, #12]
 800d1c4:	bd10      	pop	{r4, pc}

0800d1c6 <__swrite>:
 800d1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ca:	461f      	mov	r7, r3
 800d1cc:	898b      	ldrh	r3, [r1, #12]
 800d1ce:	05db      	lsls	r3, r3, #23
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	4616      	mov	r6, r2
 800d1d6:	d505      	bpl.n	800d1e4 <__swrite+0x1e>
 800d1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1dc:	2302      	movs	r3, #2
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f000 f840 	bl	800d264 <_lseek_r>
 800d1e4:	89a3      	ldrh	r3, [r4, #12]
 800d1e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1ee:	81a3      	strh	r3, [r4, #12]
 800d1f0:	4632      	mov	r2, r6
 800d1f2:	463b      	mov	r3, r7
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1fa:	f000 b867 	b.w	800d2cc <_write_r>

0800d1fe <__sseek>:
 800d1fe:	b510      	push	{r4, lr}
 800d200:	460c      	mov	r4, r1
 800d202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d206:	f000 f82d 	bl	800d264 <_lseek_r>
 800d20a:	1c43      	adds	r3, r0, #1
 800d20c:	89a3      	ldrh	r3, [r4, #12]
 800d20e:	bf15      	itete	ne
 800d210:	6560      	strne	r0, [r4, #84]	; 0x54
 800d212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d21a:	81a3      	strheq	r3, [r4, #12]
 800d21c:	bf18      	it	ne
 800d21e:	81a3      	strhne	r3, [r4, #12]
 800d220:	bd10      	pop	{r4, pc}

0800d222 <__sclose>:
 800d222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d226:	f000 b80d 	b.w	800d244 <_close_r>

0800d22a <memset>:
 800d22a:	4402      	add	r2, r0
 800d22c:	4603      	mov	r3, r0
 800d22e:	4293      	cmp	r3, r2
 800d230:	d100      	bne.n	800d234 <memset+0xa>
 800d232:	4770      	bx	lr
 800d234:	f803 1b01 	strb.w	r1, [r3], #1
 800d238:	e7f9      	b.n	800d22e <memset+0x4>
	...

0800d23c <_localeconv_r>:
 800d23c:	4800      	ldr	r0, [pc, #0]	; (800d240 <_localeconv_r+0x4>)
 800d23e:	4770      	bx	lr
 800d240:	20000178 	.word	0x20000178

0800d244 <_close_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d06      	ldr	r5, [pc, #24]	; (800d260 <_close_r+0x1c>)
 800d248:	2300      	movs	r3, #0
 800d24a:	4604      	mov	r4, r0
 800d24c:	4608      	mov	r0, r1
 800d24e:	602b      	str	r3, [r5, #0]
 800d250:	f7f5 f9ab 	bl	80025aa <_close>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d102      	bne.n	800d25e <_close_r+0x1a>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	b103      	cbz	r3, 800d25e <_close_r+0x1a>
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
 800d260:	20000ee4 	.word	0x20000ee4

0800d264 <_lseek_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	4d07      	ldr	r5, [pc, #28]	; (800d284 <_lseek_r+0x20>)
 800d268:	4604      	mov	r4, r0
 800d26a:	4608      	mov	r0, r1
 800d26c:	4611      	mov	r1, r2
 800d26e:	2200      	movs	r2, #0
 800d270:	602a      	str	r2, [r5, #0]
 800d272:	461a      	mov	r2, r3
 800d274:	f7f5 f9c0 	bl	80025f8 <_lseek>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_lseek_r+0x1e>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_lseek_r+0x1e>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	20000ee4 	.word	0x20000ee4

0800d288 <_read_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4d07      	ldr	r5, [pc, #28]	; (800d2a8 <_read_r+0x20>)
 800d28c:	4604      	mov	r4, r0
 800d28e:	4608      	mov	r0, r1
 800d290:	4611      	mov	r1, r2
 800d292:	2200      	movs	r2, #0
 800d294:	602a      	str	r2, [r5, #0]
 800d296:	461a      	mov	r2, r3
 800d298:	f7f5 f94e 	bl	8002538 <_read>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_read_r+0x1e>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_read_r+0x1e>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	20000ee4 	.word	0x20000ee4

0800d2ac <_sbrk_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	4d06      	ldr	r5, [pc, #24]	; (800d2c8 <_sbrk_r+0x1c>)
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	4608      	mov	r0, r1
 800d2b6:	602b      	str	r3, [r5, #0]
 800d2b8:	f7f5 f9ac 	bl	8002614 <_sbrk>
 800d2bc:	1c43      	adds	r3, r0, #1
 800d2be:	d102      	bne.n	800d2c6 <_sbrk_r+0x1a>
 800d2c0:	682b      	ldr	r3, [r5, #0]
 800d2c2:	b103      	cbz	r3, 800d2c6 <_sbrk_r+0x1a>
 800d2c4:	6023      	str	r3, [r4, #0]
 800d2c6:	bd38      	pop	{r3, r4, r5, pc}
 800d2c8:	20000ee4 	.word	0x20000ee4

0800d2cc <_write_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4d07      	ldr	r5, [pc, #28]	; (800d2ec <_write_r+0x20>)
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	4608      	mov	r0, r1
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	602a      	str	r2, [r5, #0]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f7f5 f949 	bl	8002572 <_write>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	d102      	bne.n	800d2ea <_write_r+0x1e>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	b103      	cbz	r3, 800d2ea <_write_r+0x1e>
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
 800d2ec:	20000ee4 	.word	0x20000ee4

0800d2f0 <__errno>:
 800d2f0:	4b01      	ldr	r3, [pc, #4]	; (800d2f8 <__errno+0x8>)
 800d2f2:	6818      	ldr	r0, [r3, #0]
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	20000084 	.word	0x20000084

0800d2fc <__libc_init_array>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	4d0d      	ldr	r5, [pc, #52]	; (800d334 <__libc_init_array+0x38>)
 800d300:	4c0d      	ldr	r4, [pc, #52]	; (800d338 <__libc_init_array+0x3c>)
 800d302:	1b64      	subs	r4, r4, r5
 800d304:	10a4      	asrs	r4, r4, #2
 800d306:	2600      	movs	r6, #0
 800d308:	42a6      	cmp	r6, r4
 800d30a:	d109      	bne.n	800d320 <__libc_init_array+0x24>
 800d30c:	4d0b      	ldr	r5, [pc, #44]	; (800d33c <__libc_init_array+0x40>)
 800d30e:	4c0c      	ldr	r4, [pc, #48]	; (800d340 <__libc_init_array+0x44>)
 800d310:	f001 ffda 	bl	800f2c8 <_init>
 800d314:	1b64      	subs	r4, r4, r5
 800d316:	10a4      	asrs	r4, r4, #2
 800d318:	2600      	movs	r6, #0
 800d31a:	42a6      	cmp	r6, r4
 800d31c:	d105      	bne.n	800d32a <__libc_init_array+0x2e>
 800d31e:	bd70      	pop	{r4, r5, r6, pc}
 800d320:	f855 3b04 	ldr.w	r3, [r5], #4
 800d324:	4798      	blx	r3
 800d326:	3601      	adds	r6, #1
 800d328:	e7ee      	b.n	800d308 <__libc_init_array+0xc>
 800d32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d32e:	4798      	blx	r3
 800d330:	3601      	adds	r6, #1
 800d332:	e7f2      	b.n	800d31a <__libc_init_array+0x1e>
 800d334:	0800f7ec 	.word	0x0800f7ec
 800d338:	0800f7ec 	.word	0x0800f7ec
 800d33c:	0800f7ec 	.word	0x0800f7ec
 800d340:	0800f7f0 	.word	0x0800f7f0

0800d344 <__retarget_lock_init_recursive>:
 800d344:	4770      	bx	lr

0800d346 <__retarget_lock_acquire_recursive>:
 800d346:	4770      	bx	lr

0800d348 <__retarget_lock_release_recursive>:
 800d348:	4770      	bx	lr

0800d34a <strcpy>:
 800d34a:	4603      	mov	r3, r0
 800d34c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d350:	f803 2b01 	strb.w	r2, [r3], #1
 800d354:	2a00      	cmp	r2, #0
 800d356:	d1f9      	bne.n	800d34c <strcpy+0x2>
 800d358:	4770      	bx	lr

0800d35a <quorem>:
 800d35a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35e:	6903      	ldr	r3, [r0, #16]
 800d360:	690c      	ldr	r4, [r1, #16]
 800d362:	42a3      	cmp	r3, r4
 800d364:	4607      	mov	r7, r0
 800d366:	db7e      	blt.n	800d466 <quorem+0x10c>
 800d368:	3c01      	subs	r4, #1
 800d36a:	f101 0814 	add.w	r8, r1, #20
 800d36e:	f100 0514 	add.w	r5, r0, #20
 800d372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d376:	9301      	str	r3, [sp, #4]
 800d378:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d37c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d380:	3301      	adds	r3, #1
 800d382:	429a      	cmp	r2, r3
 800d384:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d388:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d38c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d390:	d331      	bcc.n	800d3f6 <quorem+0x9c>
 800d392:	f04f 0e00 	mov.w	lr, #0
 800d396:	4640      	mov	r0, r8
 800d398:	46ac      	mov	ip, r5
 800d39a:	46f2      	mov	sl, lr
 800d39c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3a0:	b293      	uxth	r3, r2
 800d3a2:	fb06 e303 	mla	r3, r6, r3, lr
 800d3a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3aa:	0c1a      	lsrs	r2, r3, #16
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	ebaa 0303 	sub.w	r3, sl, r3
 800d3b2:	f8dc a000 	ldr.w	sl, [ip]
 800d3b6:	fa13 f38a 	uxtah	r3, r3, sl
 800d3ba:	fb06 220e 	mla	r2, r6, lr, r2
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	9b00      	ldr	r3, [sp, #0]
 800d3c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3c6:	b292      	uxth	r2, r2
 800d3c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d3cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3d0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d3d4:	4581      	cmp	r9, r0
 800d3d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3da:	f84c 3b04 	str.w	r3, [ip], #4
 800d3de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d3e2:	d2db      	bcs.n	800d39c <quorem+0x42>
 800d3e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d3e8:	b92b      	cbnz	r3, 800d3f6 <quorem+0x9c>
 800d3ea:	9b01      	ldr	r3, [sp, #4]
 800d3ec:	3b04      	subs	r3, #4
 800d3ee:	429d      	cmp	r5, r3
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	d32c      	bcc.n	800d44e <quorem+0xf4>
 800d3f4:	613c      	str	r4, [r7, #16]
 800d3f6:	4638      	mov	r0, r7
 800d3f8:	f001 f8f4 	bl	800e5e4 <__mcmp>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	db22      	blt.n	800d446 <quorem+0xec>
 800d400:	3601      	adds	r6, #1
 800d402:	4629      	mov	r1, r5
 800d404:	2000      	movs	r0, #0
 800d406:	f858 2b04 	ldr.w	r2, [r8], #4
 800d40a:	f8d1 c000 	ldr.w	ip, [r1]
 800d40e:	b293      	uxth	r3, r2
 800d410:	1ac3      	subs	r3, r0, r3
 800d412:	0c12      	lsrs	r2, r2, #16
 800d414:	fa13 f38c 	uxtah	r3, r3, ip
 800d418:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d41c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d420:	b29b      	uxth	r3, r3
 800d422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d426:	45c1      	cmp	r9, r8
 800d428:	f841 3b04 	str.w	r3, [r1], #4
 800d42c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d430:	d2e9      	bcs.n	800d406 <quorem+0xac>
 800d432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d43a:	b922      	cbnz	r2, 800d446 <quorem+0xec>
 800d43c:	3b04      	subs	r3, #4
 800d43e:	429d      	cmp	r5, r3
 800d440:	461a      	mov	r2, r3
 800d442:	d30a      	bcc.n	800d45a <quorem+0x100>
 800d444:	613c      	str	r4, [r7, #16]
 800d446:	4630      	mov	r0, r6
 800d448:	b003      	add	sp, #12
 800d44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44e:	6812      	ldr	r2, [r2, #0]
 800d450:	3b04      	subs	r3, #4
 800d452:	2a00      	cmp	r2, #0
 800d454:	d1ce      	bne.n	800d3f4 <quorem+0x9a>
 800d456:	3c01      	subs	r4, #1
 800d458:	e7c9      	b.n	800d3ee <quorem+0x94>
 800d45a:	6812      	ldr	r2, [r2, #0]
 800d45c:	3b04      	subs	r3, #4
 800d45e:	2a00      	cmp	r2, #0
 800d460:	d1f0      	bne.n	800d444 <quorem+0xea>
 800d462:	3c01      	subs	r4, #1
 800d464:	e7eb      	b.n	800d43e <quorem+0xe4>
 800d466:	2000      	movs	r0, #0
 800d468:	e7ee      	b.n	800d448 <quorem+0xee>
 800d46a:	0000      	movs	r0, r0
 800d46c:	0000      	movs	r0, r0
	...

0800d470 <_dtoa_r>:
 800d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d474:	ed2d 8b04 	vpush	{d8-d9}
 800d478:	69c5      	ldr	r5, [r0, #28]
 800d47a:	b093      	sub	sp, #76	; 0x4c
 800d47c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d480:	ec57 6b10 	vmov	r6, r7, d0
 800d484:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d488:	9107      	str	r1, [sp, #28]
 800d48a:	4604      	mov	r4, r0
 800d48c:	920a      	str	r2, [sp, #40]	; 0x28
 800d48e:	930d      	str	r3, [sp, #52]	; 0x34
 800d490:	b975      	cbnz	r5, 800d4b0 <_dtoa_r+0x40>
 800d492:	2010      	movs	r0, #16
 800d494:	f7ff f84e 	bl	800c534 <malloc>
 800d498:	4602      	mov	r2, r0
 800d49a:	61e0      	str	r0, [r4, #28]
 800d49c:	b920      	cbnz	r0, 800d4a8 <_dtoa_r+0x38>
 800d49e:	4bae      	ldr	r3, [pc, #696]	; (800d758 <_dtoa_r+0x2e8>)
 800d4a0:	21ef      	movs	r1, #239	; 0xef
 800d4a2:	48ae      	ldr	r0, [pc, #696]	; (800d75c <_dtoa_r+0x2ec>)
 800d4a4:	f001 fbcc 	bl	800ec40 <__assert_func>
 800d4a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4ac:	6005      	str	r5, [r0, #0]
 800d4ae:	60c5      	str	r5, [r0, #12]
 800d4b0:	69e3      	ldr	r3, [r4, #28]
 800d4b2:	6819      	ldr	r1, [r3, #0]
 800d4b4:	b151      	cbz	r1, 800d4cc <_dtoa_r+0x5c>
 800d4b6:	685a      	ldr	r2, [r3, #4]
 800d4b8:	604a      	str	r2, [r1, #4]
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	4093      	lsls	r3, r2
 800d4be:	608b      	str	r3, [r1, #8]
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f000 fe53 	bl	800e16c <_Bfree>
 800d4c6:	69e3      	ldr	r3, [r4, #28]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	1e3b      	subs	r3, r7, #0
 800d4ce:	bfbb      	ittet	lt
 800d4d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d4d4:	9303      	strlt	r3, [sp, #12]
 800d4d6:	2300      	movge	r3, #0
 800d4d8:	2201      	movlt	r2, #1
 800d4da:	bfac      	ite	ge
 800d4dc:	f8c8 3000 	strge.w	r3, [r8]
 800d4e0:	f8c8 2000 	strlt.w	r2, [r8]
 800d4e4:	4b9e      	ldr	r3, [pc, #632]	; (800d760 <_dtoa_r+0x2f0>)
 800d4e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d4ea:	ea33 0308 	bics.w	r3, r3, r8
 800d4ee:	d11b      	bne.n	800d528 <_dtoa_r+0xb8>
 800d4f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d4f6:	6013      	str	r3, [r2, #0]
 800d4f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d4fc:	4333      	orrs	r3, r6
 800d4fe:	f000 8593 	beq.w	800e028 <_dtoa_r+0xbb8>
 800d502:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d504:	b963      	cbnz	r3, 800d520 <_dtoa_r+0xb0>
 800d506:	4b97      	ldr	r3, [pc, #604]	; (800d764 <_dtoa_r+0x2f4>)
 800d508:	e027      	b.n	800d55a <_dtoa_r+0xea>
 800d50a:	4b97      	ldr	r3, [pc, #604]	; (800d768 <_dtoa_r+0x2f8>)
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	3308      	adds	r3, #8
 800d510:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d512:	6013      	str	r3, [r2, #0]
 800d514:	9800      	ldr	r0, [sp, #0]
 800d516:	b013      	add	sp, #76	; 0x4c
 800d518:	ecbd 8b04 	vpop	{d8-d9}
 800d51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d520:	4b90      	ldr	r3, [pc, #576]	; (800d764 <_dtoa_r+0x2f4>)
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	3303      	adds	r3, #3
 800d526:	e7f3      	b.n	800d510 <_dtoa_r+0xa0>
 800d528:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d52c:	2200      	movs	r2, #0
 800d52e:	ec51 0b17 	vmov	r0, r1, d7
 800d532:	eeb0 8a47 	vmov.f32	s16, s14
 800d536:	eef0 8a67 	vmov.f32	s17, s15
 800d53a:	2300      	movs	r3, #0
 800d53c:	f7f3 fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d540:	4681      	mov	r9, r0
 800d542:	b160      	cbz	r0, 800d55e <_dtoa_r+0xee>
 800d544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d546:	2301      	movs	r3, #1
 800d548:	6013      	str	r3, [r2, #0]
 800d54a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f000 8568 	beq.w	800e022 <_dtoa_r+0xbb2>
 800d552:	4b86      	ldr	r3, [pc, #536]	; (800d76c <_dtoa_r+0x2fc>)
 800d554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d556:	6013      	str	r3, [r2, #0]
 800d558:	3b01      	subs	r3, #1
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	e7da      	b.n	800d514 <_dtoa_r+0xa4>
 800d55e:	aa10      	add	r2, sp, #64	; 0x40
 800d560:	a911      	add	r1, sp, #68	; 0x44
 800d562:	4620      	mov	r0, r4
 800d564:	eeb0 0a48 	vmov.f32	s0, s16
 800d568:	eef0 0a68 	vmov.f32	s1, s17
 800d56c:	f001 f8e0 	bl	800e730 <__d2b>
 800d570:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d574:	4682      	mov	sl, r0
 800d576:	2d00      	cmp	r5, #0
 800d578:	d07f      	beq.n	800d67a <_dtoa_r+0x20a>
 800d57a:	ee18 3a90 	vmov	r3, s17
 800d57e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d582:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d586:	ec51 0b18 	vmov	r0, r1, d8
 800d58a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d58e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d592:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d596:	4619      	mov	r1, r3
 800d598:	2200      	movs	r2, #0
 800d59a:	4b75      	ldr	r3, [pc, #468]	; (800d770 <_dtoa_r+0x300>)
 800d59c:	f7f2 fe74 	bl	8000288 <__aeabi_dsub>
 800d5a0:	a367      	add	r3, pc, #412	; (adr r3, 800d740 <_dtoa_r+0x2d0>)
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	f7f3 f827 	bl	80005f8 <__aeabi_dmul>
 800d5aa:	a367      	add	r3, pc, #412	; (adr r3, 800d748 <_dtoa_r+0x2d8>)
 800d5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b0:	f7f2 fe6c 	bl	800028c <__adddf3>
 800d5b4:	4606      	mov	r6, r0
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	460f      	mov	r7, r1
 800d5ba:	f7f2 ffb3 	bl	8000524 <__aeabi_i2d>
 800d5be:	a364      	add	r3, pc, #400	; (adr r3, 800d750 <_dtoa_r+0x2e0>)
 800d5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c4:	f7f3 f818 	bl	80005f8 <__aeabi_dmul>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	4639      	mov	r1, r7
 800d5d0:	f7f2 fe5c 	bl	800028c <__adddf3>
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	460f      	mov	r7, r1
 800d5d8:	f7f3 fabe 	bl	8000b58 <__aeabi_d2iz>
 800d5dc:	2200      	movs	r2, #0
 800d5de:	4683      	mov	fp, r0
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	4639      	mov	r1, r7
 800d5e6:	f7f3 fa79 	bl	8000adc <__aeabi_dcmplt>
 800d5ea:	b148      	cbz	r0, 800d600 <_dtoa_r+0x190>
 800d5ec:	4658      	mov	r0, fp
 800d5ee:	f7f2 ff99 	bl	8000524 <__aeabi_i2d>
 800d5f2:	4632      	mov	r2, r6
 800d5f4:	463b      	mov	r3, r7
 800d5f6:	f7f3 fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5fa:	b908      	cbnz	r0, 800d600 <_dtoa_r+0x190>
 800d5fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d600:	f1bb 0f16 	cmp.w	fp, #22
 800d604:	d857      	bhi.n	800d6b6 <_dtoa_r+0x246>
 800d606:	4b5b      	ldr	r3, [pc, #364]	; (800d774 <_dtoa_r+0x304>)
 800d608:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d610:	ec51 0b18 	vmov	r0, r1, d8
 800d614:	f7f3 fa62 	bl	8000adc <__aeabi_dcmplt>
 800d618:	2800      	cmp	r0, #0
 800d61a:	d04e      	beq.n	800d6ba <_dtoa_r+0x24a>
 800d61c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d620:	2300      	movs	r3, #0
 800d622:	930c      	str	r3, [sp, #48]	; 0x30
 800d624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d626:	1b5b      	subs	r3, r3, r5
 800d628:	1e5a      	subs	r2, r3, #1
 800d62a:	bf45      	ittet	mi
 800d62c:	f1c3 0301 	rsbmi	r3, r3, #1
 800d630:	9305      	strmi	r3, [sp, #20]
 800d632:	2300      	movpl	r3, #0
 800d634:	2300      	movmi	r3, #0
 800d636:	9206      	str	r2, [sp, #24]
 800d638:	bf54      	ite	pl
 800d63a:	9305      	strpl	r3, [sp, #20]
 800d63c:	9306      	strmi	r3, [sp, #24]
 800d63e:	f1bb 0f00 	cmp.w	fp, #0
 800d642:	db3c      	blt.n	800d6be <_dtoa_r+0x24e>
 800d644:	9b06      	ldr	r3, [sp, #24]
 800d646:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d64a:	445b      	add	r3, fp
 800d64c:	9306      	str	r3, [sp, #24]
 800d64e:	2300      	movs	r3, #0
 800d650:	9308      	str	r3, [sp, #32]
 800d652:	9b07      	ldr	r3, [sp, #28]
 800d654:	2b09      	cmp	r3, #9
 800d656:	d868      	bhi.n	800d72a <_dtoa_r+0x2ba>
 800d658:	2b05      	cmp	r3, #5
 800d65a:	bfc4      	itt	gt
 800d65c:	3b04      	subgt	r3, #4
 800d65e:	9307      	strgt	r3, [sp, #28]
 800d660:	9b07      	ldr	r3, [sp, #28]
 800d662:	f1a3 0302 	sub.w	r3, r3, #2
 800d666:	bfcc      	ite	gt
 800d668:	2500      	movgt	r5, #0
 800d66a:	2501      	movle	r5, #1
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	f200 8085 	bhi.w	800d77c <_dtoa_r+0x30c>
 800d672:	e8df f003 	tbb	[pc, r3]
 800d676:	3b2e      	.short	0x3b2e
 800d678:	5839      	.short	0x5839
 800d67a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d67e:	441d      	add	r5, r3
 800d680:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d684:	2b20      	cmp	r3, #32
 800d686:	bfc1      	itttt	gt
 800d688:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d68c:	fa08 f803 	lslgt.w	r8, r8, r3
 800d690:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d694:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d698:	bfd6      	itet	le
 800d69a:	f1c3 0320 	rsble	r3, r3, #32
 800d69e:	ea48 0003 	orrgt.w	r0, r8, r3
 800d6a2:	fa06 f003 	lslle.w	r0, r6, r3
 800d6a6:	f7f2 ff2d 	bl	8000504 <__aeabi_ui2d>
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d6b0:	3d01      	subs	r5, #1
 800d6b2:	920e      	str	r2, [sp, #56]	; 0x38
 800d6b4:	e76f      	b.n	800d596 <_dtoa_r+0x126>
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e7b3      	b.n	800d622 <_dtoa_r+0x1b2>
 800d6ba:	900c      	str	r0, [sp, #48]	; 0x30
 800d6bc:	e7b2      	b.n	800d624 <_dtoa_r+0x1b4>
 800d6be:	9b05      	ldr	r3, [sp, #20]
 800d6c0:	eba3 030b 	sub.w	r3, r3, fp
 800d6c4:	9305      	str	r3, [sp, #20]
 800d6c6:	f1cb 0300 	rsb	r3, fp, #0
 800d6ca:	9308      	str	r3, [sp, #32]
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6d0:	e7bf      	b.n	800d652 <_dtoa_r+0x1e2>
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	dc52      	bgt.n	800d782 <_dtoa_r+0x312>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	9301      	str	r3, [sp, #4]
 800d6e0:	9304      	str	r3, [sp, #16]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	920a      	str	r2, [sp, #40]	; 0x28
 800d6e6:	e00b      	b.n	800d700 <_dtoa_r+0x290>
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e7f3      	b.n	800d6d4 <_dtoa_r+0x264>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6f2:	445b      	add	r3, fp
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	9304      	str	r3, [sp, #16]
 800d6fc:	bfb8      	it	lt
 800d6fe:	2301      	movlt	r3, #1
 800d700:	69e0      	ldr	r0, [r4, #28]
 800d702:	2100      	movs	r1, #0
 800d704:	2204      	movs	r2, #4
 800d706:	f102 0614 	add.w	r6, r2, #20
 800d70a:	429e      	cmp	r6, r3
 800d70c:	d93d      	bls.n	800d78a <_dtoa_r+0x31a>
 800d70e:	6041      	str	r1, [r0, #4]
 800d710:	4620      	mov	r0, r4
 800d712:	f000 fceb 	bl	800e0ec <_Balloc>
 800d716:	9000      	str	r0, [sp, #0]
 800d718:	2800      	cmp	r0, #0
 800d71a:	d139      	bne.n	800d790 <_dtoa_r+0x320>
 800d71c:	4b16      	ldr	r3, [pc, #88]	; (800d778 <_dtoa_r+0x308>)
 800d71e:	4602      	mov	r2, r0
 800d720:	f240 11af 	movw	r1, #431	; 0x1af
 800d724:	e6bd      	b.n	800d4a2 <_dtoa_r+0x32>
 800d726:	2301      	movs	r3, #1
 800d728:	e7e1      	b.n	800d6ee <_dtoa_r+0x27e>
 800d72a:	2501      	movs	r5, #1
 800d72c:	2300      	movs	r3, #0
 800d72e:	9307      	str	r3, [sp, #28]
 800d730:	9509      	str	r5, [sp, #36]	; 0x24
 800d732:	f04f 33ff 	mov.w	r3, #4294967295
 800d736:	9301      	str	r3, [sp, #4]
 800d738:	9304      	str	r3, [sp, #16]
 800d73a:	2200      	movs	r2, #0
 800d73c:	2312      	movs	r3, #18
 800d73e:	e7d1      	b.n	800d6e4 <_dtoa_r+0x274>
 800d740:	636f4361 	.word	0x636f4361
 800d744:	3fd287a7 	.word	0x3fd287a7
 800d748:	8b60c8b3 	.word	0x8b60c8b3
 800d74c:	3fc68a28 	.word	0x3fc68a28
 800d750:	509f79fb 	.word	0x509f79fb
 800d754:	3fd34413 	.word	0x3fd34413
 800d758:	0800f4b1 	.word	0x0800f4b1
 800d75c:	0800f4c8 	.word	0x0800f4c8
 800d760:	7ff00000 	.word	0x7ff00000
 800d764:	0800f4ad 	.word	0x0800f4ad
 800d768:	0800f4a4 	.word	0x0800f4a4
 800d76c:	0800f481 	.word	0x0800f481
 800d770:	3ff80000 	.word	0x3ff80000
 800d774:	0800f5b8 	.word	0x0800f5b8
 800d778:	0800f520 	.word	0x0800f520
 800d77c:	2301      	movs	r3, #1
 800d77e:	9309      	str	r3, [sp, #36]	; 0x24
 800d780:	e7d7      	b.n	800d732 <_dtoa_r+0x2c2>
 800d782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d784:	9301      	str	r3, [sp, #4]
 800d786:	9304      	str	r3, [sp, #16]
 800d788:	e7ba      	b.n	800d700 <_dtoa_r+0x290>
 800d78a:	3101      	adds	r1, #1
 800d78c:	0052      	lsls	r2, r2, #1
 800d78e:	e7ba      	b.n	800d706 <_dtoa_r+0x296>
 800d790:	69e3      	ldr	r3, [r4, #28]
 800d792:	9a00      	ldr	r2, [sp, #0]
 800d794:	601a      	str	r2, [r3, #0]
 800d796:	9b04      	ldr	r3, [sp, #16]
 800d798:	2b0e      	cmp	r3, #14
 800d79a:	f200 80a8 	bhi.w	800d8ee <_dtoa_r+0x47e>
 800d79e:	2d00      	cmp	r5, #0
 800d7a0:	f000 80a5 	beq.w	800d8ee <_dtoa_r+0x47e>
 800d7a4:	f1bb 0f00 	cmp.w	fp, #0
 800d7a8:	dd38      	ble.n	800d81c <_dtoa_r+0x3ac>
 800d7aa:	4bc0      	ldr	r3, [pc, #768]	; (800daac <_dtoa_r+0x63c>)
 800d7ac:	f00b 020f 	and.w	r2, fp, #15
 800d7b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d7b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d7bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d7c0:	d019      	beq.n	800d7f6 <_dtoa_r+0x386>
 800d7c2:	4bbb      	ldr	r3, [pc, #748]	; (800dab0 <_dtoa_r+0x640>)
 800d7c4:	ec51 0b18 	vmov	r0, r1, d8
 800d7c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7cc:	f7f3 f83e 	bl	800084c <__aeabi_ddiv>
 800d7d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7d4:	f008 080f 	and.w	r8, r8, #15
 800d7d8:	2503      	movs	r5, #3
 800d7da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dab0 <_dtoa_r+0x640>
 800d7de:	f1b8 0f00 	cmp.w	r8, #0
 800d7e2:	d10a      	bne.n	800d7fa <_dtoa_r+0x38a>
 800d7e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7e8:	4632      	mov	r2, r6
 800d7ea:	463b      	mov	r3, r7
 800d7ec:	f7f3 f82e 	bl	800084c <__aeabi_ddiv>
 800d7f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7f4:	e02b      	b.n	800d84e <_dtoa_r+0x3de>
 800d7f6:	2502      	movs	r5, #2
 800d7f8:	e7ef      	b.n	800d7da <_dtoa_r+0x36a>
 800d7fa:	f018 0f01 	tst.w	r8, #1
 800d7fe:	d008      	beq.n	800d812 <_dtoa_r+0x3a2>
 800d800:	4630      	mov	r0, r6
 800d802:	4639      	mov	r1, r7
 800d804:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d808:	f7f2 fef6 	bl	80005f8 <__aeabi_dmul>
 800d80c:	3501      	adds	r5, #1
 800d80e:	4606      	mov	r6, r0
 800d810:	460f      	mov	r7, r1
 800d812:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d816:	f109 0908 	add.w	r9, r9, #8
 800d81a:	e7e0      	b.n	800d7de <_dtoa_r+0x36e>
 800d81c:	f000 809f 	beq.w	800d95e <_dtoa_r+0x4ee>
 800d820:	f1cb 0600 	rsb	r6, fp, #0
 800d824:	4ba1      	ldr	r3, [pc, #644]	; (800daac <_dtoa_r+0x63c>)
 800d826:	4fa2      	ldr	r7, [pc, #648]	; (800dab0 <_dtoa_r+0x640>)
 800d828:	f006 020f 	and.w	r2, r6, #15
 800d82c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d834:	ec51 0b18 	vmov	r0, r1, d8
 800d838:	f7f2 fede 	bl	80005f8 <__aeabi_dmul>
 800d83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d840:	1136      	asrs	r6, r6, #4
 800d842:	2300      	movs	r3, #0
 800d844:	2502      	movs	r5, #2
 800d846:	2e00      	cmp	r6, #0
 800d848:	d17e      	bne.n	800d948 <_dtoa_r+0x4d8>
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1d0      	bne.n	800d7f0 <_dtoa_r+0x380>
 800d84e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d850:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	f000 8084 	beq.w	800d962 <_dtoa_r+0x4f2>
 800d85a:	4b96      	ldr	r3, [pc, #600]	; (800dab4 <_dtoa_r+0x644>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	4640      	mov	r0, r8
 800d860:	4649      	mov	r1, r9
 800d862:	f7f3 f93b 	bl	8000adc <__aeabi_dcmplt>
 800d866:	2800      	cmp	r0, #0
 800d868:	d07b      	beq.n	800d962 <_dtoa_r+0x4f2>
 800d86a:	9b04      	ldr	r3, [sp, #16]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d078      	beq.n	800d962 <_dtoa_r+0x4f2>
 800d870:	9b01      	ldr	r3, [sp, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	dd39      	ble.n	800d8ea <_dtoa_r+0x47a>
 800d876:	4b90      	ldr	r3, [pc, #576]	; (800dab8 <_dtoa_r+0x648>)
 800d878:	2200      	movs	r2, #0
 800d87a:	4640      	mov	r0, r8
 800d87c:	4649      	mov	r1, r9
 800d87e:	f7f2 febb 	bl	80005f8 <__aeabi_dmul>
 800d882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d886:	9e01      	ldr	r6, [sp, #4]
 800d888:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d88c:	3501      	adds	r5, #1
 800d88e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d892:	4628      	mov	r0, r5
 800d894:	f7f2 fe46 	bl	8000524 <__aeabi_i2d>
 800d898:	4642      	mov	r2, r8
 800d89a:	464b      	mov	r3, r9
 800d89c:	f7f2 feac 	bl	80005f8 <__aeabi_dmul>
 800d8a0:	4b86      	ldr	r3, [pc, #536]	; (800dabc <_dtoa_r+0x64c>)
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f7f2 fcf2 	bl	800028c <__adddf3>
 800d8a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8b0:	9303      	str	r3, [sp, #12]
 800d8b2:	2e00      	cmp	r6, #0
 800d8b4:	d158      	bne.n	800d968 <_dtoa_r+0x4f8>
 800d8b6:	4b82      	ldr	r3, [pc, #520]	; (800dac0 <_dtoa_r+0x650>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	4649      	mov	r1, r9
 800d8be:	f7f2 fce3 	bl	8000288 <__aeabi_dsub>
 800d8c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	4689      	mov	r9, r1
 800d8ca:	f7f3 f925 	bl	8000b18 <__aeabi_dcmpgt>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	f040 8296 	bne.w	800de00 <_dtoa_r+0x990>
 800d8d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d8d8:	4640      	mov	r0, r8
 800d8da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8de:	4649      	mov	r1, r9
 800d8e0:	f7f3 f8fc 	bl	8000adc <__aeabi_dcmplt>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	f040 8289 	bne.w	800ddfc <_dtoa_r+0x98c>
 800d8ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d8ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f2c0 814e 	blt.w	800db92 <_dtoa_r+0x722>
 800d8f6:	f1bb 0f0e 	cmp.w	fp, #14
 800d8fa:	f300 814a 	bgt.w	800db92 <_dtoa_r+0x722>
 800d8fe:	4b6b      	ldr	r3, [pc, #428]	; (800daac <_dtoa_r+0x63c>)
 800d900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d904:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f280 80dc 	bge.w	800dac8 <_dtoa_r+0x658>
 800d910:	9b04      	ldr	r3, [sp, #16]
 800d912:	2b00      	cmp	r3, #0
 800d914:	f300 80d8 	bgt.w	800dac8 <_dtoa_r+0x658>
 800d918:	f040 826f 	bne.w	800ddfa <_dtoa_r+0x98a>
 800d91c:	4b68      	ldr	r3, [pc, #416]	; (800dac0 <_dtoa_r+0x650>)
 800d91e:	2200      	movs	r2, #0
 800d920:	4640      	mov	r0, r8
 800d922:	4649      	mov	r1, r9
 800d924:	f7f2 fe68 	bl	80005f8 <__aeabi_dmul>
 800d928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d92c:	f7f3 f8ea 	bl	8000b04 <__aeabi_dcmpge>
 800d930:	9e04      	ldr	r6, [sp, #16]
 800d932:	4637      	mov	r7, r6
 800d934:	2800      	cmp	r0, #0
 800d936:	f040 8245 	bne.w	800ddc4 <_dtoa_r+0x954>
 800d93a:	9d00      	ldr	r5, [sp, #0]
 800d93c:	2331      	movs	r3, #49	; 0x31
 800d93e:	f805 3b01 	strb.w	r3, [r5], #1
 800d942:	f10b 0b01 	add.w	fp, fp, #1
 800d946:	e241      	b.n	800ddcc <_dtoa_r+0x95c>
 800d948:	07f2      	lsls	r2, r6, #31
 800d94a:	d505      	bpl.n	800d958 <_dtoa_r+0x4e8>
 800d94c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d950:	f7f2 fe52 	bl	80005f8 <__aeabi_dmul>
 800d954:	3501      	adds	r5, #1
 800d956:	2301      	movs	r3, #1
 800d958:	1076      	asrs	r6, r6, #1
 800d95a:	3708      	adds	r7, #8
 800d95c:	e773      	b.n	800d846 <_dtoa_r+0x3d6>
 800d95e:	2502      	movs	r5, #2
 800d960:	e775      	b.n	800d84e <_dtoa_r+0x3de>
 800d962:	9e04      	ldr	r6, [sp, #16]
 800d964:	465f      	mov	r7, fp
 800d966:	e792      	b.n	800d88e <_dtoa_r+0x41e>
 800d968:	9900      	ldr	r1, [sp, #0]
 800d96a:	4b50      	ldr	r3, [pc, #320]	; (800daac <_dtoa_r+0x63c>)
 800d96c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d970:	4431      	add	r1, r6
 800d972:	9102      	str	r1, [sp, #8]
 800d974:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d976:	eeb0 9a47 	vmov.f32	s18, s14
 800d97a:	eef0 9a67 	vmov.f32	s19, s15
 800d97e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d982:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d986:	2900      	cmp	r1, #0
 800d988:	d044      	beq.n	800da14 <_dtoa_r+0x5a4>
 800d98a:	494e      	ldr	r1, [pc, #312]	; (800dac4 <_dtoa_r+0x654>)
 800d98c:	2000      	movs	r0, #0
 800d98e:	f7f2 ff5d 	bl	800084c <__aeabi_ddiv>
 800d992:	ec53 2b19 	vmov	r2, r3, d9
 800d996:	f7f2 fc77 	bl	8000288 <__aeabi_dsub>
 800d99a:	9d00      	ldr	r5, [sp, #0]
 800d99c:	ec41 0b19 	vmov	d9, r0, r1
 800d9a0:	4649      	mov	r1, r9
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	f7f3 f8d8 	bl	8000b58 <__aeabi_d2iz>
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	f7f2 fdbb 	bl	8000524 <__aeabi_i2d>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	f7f2 fc67 	bl	8000288 <__aeabi_dsub>
 800d9ba:	3630      	adds	r6, #48	; 0x30
 800d9bc:	f805 6b01 	strb.w	r6, [r5], #1
 800d9c0:	ec53 2b19 	vmov	r2, r3, d9
 800d9c4:	4680      	mov	r8, r0
 800d9c6:	4689      	mov	r9, r1
 800d9c8:	f7f3 f888 	bl	8000adc <__aeabi_dcmplt>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d164      	bne.n	800da9a <_dtoa_r+0x62a>
 800d9d0:	4642      	mov	r2, r8
 800d9d2:	464b      	mov	r3, r9
 800d9d4:	4937      	ldr	r1, [pc, #220]	; (800dab4 <_dtoa_r+0x644>)
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	f7f2 fc56 	bl	8000288 <__aeabi_dsub>
 800d9dc:	ec53 2b19 	vmov	r2, r3, d9
 800d9e0:	f7f3 f87c 	bl	8000adc <__aeabi_dcmplt>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	f040 80b6 	bne.w	800db56 <_dtoa_r+0x6e6>
 800d9ea:	9b02      	ldr	r3, [sp, #8]
 800d9ec:	429d      	cmp	r5, r3
 800d9ee:	f43f af7c 	beq.w	800d8ea <_dtoa_r+0x47a>
 800d9f2:	4b31      	ldr	r3, [pc, #196]	; (800dab8 <_dtoa_r+0x648>)
 800d9f4:	ec51 0b19 	vmov	r0, r1, d9
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f7f2 fdfd 	bl	80005f8 <__aeabi_dmul>
 800d9fe:	4b2e      	ldr	r3, [pc, #184]	; (800dab8 <_dtoa_r+0x648>)
 800da00:	ec41 0b19 	vmov	d9, r0, r1
 800da04:	2200      	movs	r2, #0
 800da06:	4640      	mov	r0, r8
 800da08:	4649      	mov	r1, r9
 800da0a:	f7f2 fdf5 	bl	80005f8 <__aeabi_dmul>
 800da0e:	4680      	mov	r8, r0
 800da10:	4689      	mov	r9, r1
 800da12:	e7c5      	b.n	800d9a0 <_dtoa_r+0x530>
 800da14:	ec51 0b17 	vmov	r0, r1, d7
 800da18:	f7f2 fdee 	bl	80005f8 <__aeabi_dmul>
 800da1c:	9b02      	ldr	r3, [sp, #8]
 800da1e:	9d00      	ldr	r5, [sp, #0]
 800da20:	930f      	str	r3, [sp, #60]	; 0x3c
 800da22:	ec41 0b19 	vmov	d9, r0, r1
 800da26:	4649      	mov	r1, r9
 800da28:	4640      	mov	r0, r8
 800da2a:	f7f3 f895 	bl	8000b58 <__aeabi_d2iz>
 800da2e:	4606      	mov	r6, r0
 800da30:	f7f2 fd78 	bl	8000524 <__aeabi_i2d>
 800da34:	3630      	adds	r6, #48	; 0x30
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	4640      	mov	r0, r8
 800da3c:	4649      	mov	r1, r9
 800da3e:	f7f2 fc23 	bl	8000288 <__aeabi_dsub>
 800da42:	f805 6b01 	strb.w	r6, [r5], #1
 800da46:	9b02      	ldr	r3, [sp, #8]
 800da48:	429d      	cmp	r5, r3
 800da4a:	4680      	mov	r8, r0
 800da4c:	4689      	mov	r9, r1
 800da4e:	f04f 0200 	mov.w	r2, #0
 800da52:	d124      	bne.n	800da9e <_dtoa_r+0x62e>
 800da54:	4b1b      	ldr	r3, [pc, #108]	; (800dac4 <_dtoa_r+0x654>)
 800da56:	ec51 0b19 	vmov	r0, r1, d9
 800da5a:	f7f2 fc17 	bl	800028c <__adddf3>
 800da5e:	4602      	mov	r2, r0
 800da60:	460b      	mov	r3, r1
 800da62:	4640      	mov	r0, r8
 800da64:	4649      	mov	r1, r9
 800da66:	f7f3 f857 	bl	8000b18 <__aeabi_dcmpgt>
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d173      	bne.n	800db56 <_dtoa_r+0x6e6>
 800da6e:	ec53 2b19 	vmov	r2, r3, d9
 800da72:	4914      	ldr	r1, [pc, #80]	; (800dac4 <_dtoa_r+0x654>)
 800da74:	2000      	movs	r0, #0
 800da76:	f7f2 fc07 	bl	8000288 <__aeabi_dsub>
 800da7a:	4602      	mov	r2, r0
 800da7c:	460b      	mov	r3, r1
 800da7e:	4640      	mov	r0, r8
 800da80:	4649      	mov	r1, r9
 800da82:	f7f3 f82b 	bl	8000adc <__aeabi_dcmplt>
 800da86:	2800      	cmp	r0, #0
 800da88:	f43f af2f 	beq.w	800d8ea <_dtoa_r+0x47a>
 800da8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800da8e:	1e6b      	subs	r3, r5, #1
 800da90:	930f      	str	r3, [sp, #60]	; 0x3c
 800da92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da96:	2b30      	cmp	r3, #48	; 0x30
 800da98:	d0f8      	beq.n	800da8c <_dtoa_r+0x61c>
 800da9a:	46bb      	mov	fp, r7
 800da9c:	e04a      	b.n	800db34 <_dtoa_r+0x6c4>
 800da9e:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <_dtoa_r+0x648>)
 800daa0:	f7f2 fdaa 	bl	80005f8 <__aeabi_dmul>
 800daa4:	4680      	mov	r8, r0
 800daa6:	4689      	mov	r9, r1
 800daa8:	e7bd      	b.n	800da26 <_dtoa_r+0x5b6>
 800daaa:	bf00      	nop
 800daac:	0800f5b8 	.word	0x0800f5b8
 800dab0:	0800f590 	.word	0x0800f590
 800dab4:	3ff00000 	.word	0x3ff00000
 800dab8:	40240000 	.word	0x40240000
 800dabc:	401c0000 	.word	0x401c0000
 800dac0:	40140000 	.word	0x40140000
 800dac4:	3fe00000 	.word	0x3fe00000
 800dac8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dacc:	9d00      	ldr	r5, [sp, #0]
 800dace:	4642      	mov	r2, r8
 800dad0:	464b      	mov	r3, r9
 800dad2:	4630      	mov	r0, r6
 800dad4:	4639      	mov	r1, r7
 800dad6:	f7f2 feb9 	bl	800084c <__aeabi_ddiv>
 800dada:	f7f3 f83d 	bl	8000b58 <__aeabi_d2iz>
 800dade:	9001      	str	r0, [sp, #4]
 800dae0:	f7f2 fd20 	bl	8000524 <__aeabi_i2d>
 800dae4:	4642      	mov	r2, r8
 800dae6:	464b      	mov	r3, r9
 800dae8:	f7f2 fd86 	bl	80005f8 <__aeabi_dmul>
 800daec:	4602      	mov	r2, r0
 800daee:	460b      	mov	r3, r1
 800daf0:	4630      	mov	r0, r6
 800daf2:	4639      	mov	r1, r7
 800daf4:	f7f2 fbc8 	bl	8000288 <__aeabi_dsub>
 800daf8:	9e01      	ldr	r6, [sp, #4]
 800dafa:	9f04      	ldr	r7, [sp, #16]
 800dafc:	3630      	adds	r6, #48	; 0x30
 800dafe:	f805 6b01 	strb.w	r6, [r5], #1
 800db02:	9e00      	ldr	r6, [sp, #0]
 800db04:	1bae      	subs	r6, r5, r6
 800db06:	42b7      	cmp	r7, r6
 800db08:	4602      	mov	r2, r0
 800db0a:	460b      	mov	r3, r1
 800db0c:	d134      	bne.n	800db78 <_dtoa_r+0x708>
 800db0e:	f7f2 fbbd 	bl	800028c <__adddf3>
 800db12:	4642      	mov	r2, r8
 800db14:	464b      	mov	r3, r9
 800db16:	4606      	mov	r6, r0
 800db18:	460f      	mov	r7, r1
 800db1a:	f7f2 fffd 	bl	8000b18 <__aeabi_dcmpgt>
 800db1e:	b9c8      	cbnz	r0, 800db54 <_dtoa_r+0x6e4>
 800db20:	4642      	mov	r2, r8
 800db22:	464b      	mov	r3, r9
 800db24:	4630      	mov	r0, r6
 800db26:	4639      	mov	r1, r7
 800db28:	f7f2 ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 800db2c:	b110      	cbz	r0, 800db34 <_dtoa_r+0x6c4>
 800db2e:	9b01      	ldr	r3, [sp, #4]
 800db30:	07db      	lsls	r3, r3, #31
 800db32:	d40f      	bmi.n	800db54 <_dtoa_r+0x6e4>
 800db34:	4651      	mov	r1, sl
 800db36:	4620      	mov	r0, r4
 800db38:	f000 fb18 	bl	800e16c <_Bfree>
 800db3c:	2300      	movs	r3, #0
 800db3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db40:	702b      	strb	r3, [r5, #0]
 800db42:	f10b 0301 	add.w	r3, fp, #1
 800db46:	6013      	str	r3, [r2, #0]
 800db48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f43f ace2 	beq.w	800d514 <_dtoa_r+0xa4>
 800db50:	601d      	str	r5, [r3, #0]
 800db52:	e4df      	b.n	800d514 <_dtoa_r+0xa4>
 800db54:	465f      	mov	r7, fp
 800db56:	462b      	mov	r3, r5
 800db58:	461d      	mov	r5, r3
 800db5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db5e:	2a39      	cmp	r2, #57	; 0x39
 800db60:	d106      	bne.n	800db70 <_dtoa_r+0x700>
 800db62:	9a00      	ldr	r2, [sp, #0]
 800db64:	429a      	cmp	r2, r3
 800db66:	d1f7      	bne.n	800db58 <_dtoa_r+0x6e8>
 800db68:	9900      	ldr	r1, [sp, #0]
 800db6a:	2230      	movs	r2, #48	; 0x30
 800db6c:	3701      	adds	r7, #1
 800db6e:	700a      	strb	r2, [r1, #0]
 800db70:	781a      	ldrb	r2, [r3, #0]
 800db72:	3201      	adds	r2, #1
 800db74:	701a      	strb	r2, [r3, #0]
 800db76:	e790      	b.n	800da9a <_dtoa_r+0x62a>
 800db78:	4ba3      	ldr	r3, [pc, #652]	; (800de08 <_dtoa_r+0x998>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	f7f2 fd3c 	bl	80005f8 <__aeabi_dmul>
 800db80:	2200      	movs	r2, #0
 800db82:	2300      	movs	r3, #0
 800db84:	4606      	mov	r6, r0
 800db86:	460f      	mov	r7, r1
 800db88:	f7f2 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d09e      	beq.n	800dace <_dtoa_r+0x65e>
 800db90:	e7d0      	b.n	800db34 <_dtoa_r+0x6c4>
 800db92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db94:	2a00      	cmp	r2, #0
 800db96:	f000 80ca 	beq.w	800dd2e <_dtoa_r+0x8be>
 800db9a:	9a07      	ldr	r2, [sp, #28]
 800db9c:	2a01      	cmp	r2, #1
 800db9e:	f300 80ad 	bgt.w	800dcfc <_dtoa_r+0x88c>
 800dba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dba4:	2a00      	cmp	r2, #0
 800dba6:	f000 80a5 	beq.w	800dcf4 <_dtoa_r+0x884>
 800dbaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dbae:	9e08      	ldr	r6, [sp, #32]
 800dbb0:	9d05      	ldr	r5, [sp, #20]
 800dbb2:	9a05      	ldr	r2, [sp, #20]
 800dbb4:	441a      	add	r2, r3
 800dbb6:	9205      	str	r2, [sp, #20]
 800dbb8:	9a06      	ldr	r2, [sp, #24]
 800dbba:	2101      	movs	r1, #1
 800dbbc:	441a      	add	r2, r3
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	9206      	str	r2, [sp, #24]
 800dbc2:	f000 fb89 	bl	800e2d8 <__i2b>
 800dbc6:	4607      	mov	r7, r0
 800dbc8:	b165      	cbz	r5, 800dbe4 <_dtoa_r+0x774>
 800dbca:	9b06      	ldr	r3, [sp, #24]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	dd09      	ble.n	800dbe4 <_dtoa_r+0x774>
 800dbd0:	42ab      	cmp	r3, r5
 800dbd2:	9a05      	ldr	r2, [sp, #20]
 800dbd4:	bfa8      	it	ge
 800dbd6:	462b      	movge	r3, r5
 800dbd8:	1ad2      	subs	r2, r2, r3
 800dbda:	9205      	str	r2, [sp, #20]
 800dbdc:	9a06      	ldr	r2, [sp, #24]
 800dbde:	1aed      	subs	r5, r5, r3
 800dbe0:	1ad3      	subs	r3, r2, r3
 800dbe2:	9306      	str	r3, [sp, #24]
 800dbe4:	9b08      	ldr	r3, [sp, #32]
 800dbe6:	b1f3      	cbz	r3, 800dc26 <_dtoa_r+0x7b6>
 800dbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f000 80a3 	beq.w	800dd36 <_dtoa_r+0x8c6>
 800dbf0:	2e00      	cmp	r6, #0
 800dbf2:	dd10      	ble.n	800dc16 <_dtoa_r+0x7a6>
 800dbf4:	4639      	mov	r1, r7
 800dbf6:	4632      	mov	r2, r6
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f000 fc2d 	bl	800e458 <__pow5mult>
 800dbfe:	4652      	mov	r2, sl
 800dc00:	4601      	mov	r1, r0
 800dc02:	4607      	mov	r7, r0
 800dc04:	4620      	mov	r0, r4
 800dc06:	f000 fb7d 	bl	800e304 <__multiply>
 800dc0a:	4651      	mov	r1, sl
 800dc0c:	4680      	mov	r8, r0
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f000 faac 	bl	800e16c <_Bfree>
 800dc14:	46c2      	mov	sl, r8
 800dc16:	9b08      	ldr	r3, [sp, #32]
 800dc18:	1b9a      	subs	r2, r3, r6
 800dc1a:	d004      	beq.n	800dc26 <_dtoa_r+0x7b6>
 800dc1c:	4651      	mov	r1, sl
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f000 fc1a 	bl	800e458 <__pow5mult>
 800dc24:	4682      	mov	sl, r0
 800dc26:	2101      	movs	r1, #1
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f000 fb55 	bl	800e2d8 <__i2b>
 800dc2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	4606      	mov	r6, r0
 800dc34:	f340 8081 	ble.w	800dd3a <_dtoa_r+0x8ca>
 800dc38:	461a      	mov	r2, r3
 800dc3a:	4601      	mov	r1, r0
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f000 fc0b 	bl	800e458 <__pow5mult>
 800dc42:	9b07      	ldr	r3, [sp, #28]
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	4606      	mov	r6, r0
 800dc48:	dd7a      	ble.n	800dd40 <_dtoa_r+0x8d0>
 800dc4a:	f04f 0800 	mov.w	r8, #0
 800dc4e:	6933      	ldr	r3, [r6, #16]
 800dc50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc54:	6918      	ldr	r0, [r3, #16]
 800dc56:	f000 faf1 	bl	800e23c <__hi0bits>
 800dc5a:	f1c0 0020 	rsb	r0, r0, #32
 800dc5e:	9b06      	ldr	r3, [sp, #24]
 800dc60:	4418      	add	r0, r3
 800dc62:	f010 001f 	ands.w	r0, r0, #31
 800dc66:	f000 8094 	beq.w	800dd92 <_dtoa_r+0x922>
 800dc6a:	f1c0 0320 	rsb	r3, r0, #32
 800dc6e:	2b04      	cmp	r3, #4
 800dc70:	f340 8085 	ble.w	800dd7e <_dtoa_r+0x90e>
 800dc74:	9b05      	ldr	r3, [sp, #20]
 800dc76:	f1c0 001c 	rsb	r0, r0, #28
 800dc7a:	4403      	add	r3, r0
 800dc7c:	9305      	str	r3, [sp, #20]
 800dc7e:	9b06      	ldr	r3, [sp, #24]
 800dc80:	4403      	add	r3, r0
 800dc82:	4405      	add	r5, r0
 800dc84:	9306      	str	r3, [sp, #24]
 800dc86:	9b05      	ldr	r3, [sp, #20]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	dd05      	ble.n	800dc98 <_dtoa_r+0x828>
 800dc8c:	4651      	mov	r1, sl
 800dc8e:	461a      	mov	r2, r3
 800dc90:	4620      	mov	r0, r4
 800dc92:	f000 fc3b 	bl	800e50c <__lshift>
 800dc96:	4682      	mov	sl, r0
 800dc98:	9b06      	ldr	r3, [sp, #24]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	dd05      	ble.n	800dcaa <_dtoa_r+0x83a>
 800dc9e:	4631      	mov	r1, r6
 800dca0:	461a      	mov	r2, r3
 800dca2:	4620      	mov	r0, r4
 800dca4:	f000 fc32 	bl	800e50c <__lshift>
 800dca8:	4606      	mov	r6, r0
 800dcaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d072      	beq.n	800dd96 <_dtoa_r+0x926>
 800dcb0:	4631      	mov	r1, r6
 800dcb2:	4650      	mov	r0, sl
 800dcb4:	f000 fc96 	bl	800e5e4 <__mcmp>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	da6c      	bge.n	800dd96 <_dtoa_r+0x926>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	4651      	mov	r1, sl
 800dcc0:	220a      	movs	r2, #10
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f000 fa74 	bl	800e1b0 <__multadd>
 800dcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dcce:	4682      	mov	sl, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	f000 81b0 	beq.w	800e036 <_dtoa_r+0xbc6>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	4639      	mov	r1, r7
 800dcda:	220a      	movs	r2, #10
 800dcdc:	4620      	mov	r0, r4
 800dcde:	f000 fa67 	bl	800e1b0 <__multadd>
 800dce2:	9b01      	ldr	r3, [sp, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	4607      	mov	r7, r0
 800dce8:	f300 8096 	bgt.w	800de18 <_dtoa_r+0x9a8>
 800dcec:	9b07      	ldr	r3, [sp, #28]
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	dc59      	bgt.n	800dda6 <_dtoa_r+0x936>
 800dcf2:	e091      	b.n	800de18 <_dtoa_r+0x9a8>
 800dcf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dcf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dcfa:	e758      	b.n	800dbae <_dtoa_r+0x73e>
 800dcfc:	9b04      	ldr	r3, [sp, #16]
 800dcfe:	1e5e      	subs	r6, r3, #1
 800dd00:	9b08      	ldr	r3, [sp, #32]
 800dd02:	42b3      	cmp	r3, r6
 800dd04:	bfbf      	itttt	lt
 800dd06:	9b08      	ldrlt	r3, [sp, #32]
 800dd08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800dd0a:	9608      	strlt	r6, [sp, #32]
 800dd0c:	1af3      	sublt	r3, r6, r3
 800dd0e:	bfb4      	ite	lt
 800dd10:	18d2      	addlt	r2, r2, r3
 800dd12:	1b9e      	subge	r6, r3, r6
 800dd14:	9b04      	ldr	r3, [sp, #16]
 800dd16:	bfbc      	itt	lt
 800dd18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800dd1a:	2600      	movlt	r6, #0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	bfb7      	itett	lt
 800dd20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800dd24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800dd28:	1a9d      	sublt	r5, r3, r2
 800dd2a:	2300      	movlt	r3, #0
 800dd2c:	e741      	b.n	800dbb2 <_dtoa_r+0x742>
 800dd2e:	9e08      	ldr	r6, [sp, #32]
 800dd30:	9d05      	ldr	r5, [sp, #20]
 800dd32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dd34:	e748      	b.n	800dbc8 <_dtoa_r+0x758>
 800dd36:	9a08      	ldr	r2, [sp, #32]
 800dd38:	e770      	b.n	800dc1c <_dtoa_r+0x7ac>
 800dd3a:	9b07      	ldr	r3, [sp, #28]
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	dc19      	bgt.n	800dd74 <_dtoa_r+0x904>
 800dd40:	9b02      	ldr	r3, [sp, #8]
 800dd42:	b9bb      	cbnz	r3, 800dd74 <_dtoa_r+0x904>
 800dd44:	9b03      	ldr	r3, [sp, #12]
 800dd46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd4a:	b99b      	cbnz	r3, 800dd74 <_dtoa_r+0x904>
 800dd4c:	9b03      	ldr	r3, [sp, #12]
 800dd4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd52:	0d1b      	lsrs	r3, r3, #20
 800dd54:	051b      	lsls	r3, r3, #20
 800dd56:	b183      	cbz	r3, 800dd7a <_dtoa_r+0x90a>
 800dd58:	9b05      	ldr	r3, [sp, #20]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	9305      	str	r3, [sp, #20]
 800dd5e:	9b06      	ldr	r3, [sp, #24]
 800dd60:	3301      	adds	r3, #1
 800dd62:	9306      	str	r3, [sp, #24]
 800dd64:	f04f 0801 	mov.w	r8, #1
 800dd68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f47f af6f 	bne.w	800dc4e <_dtoa_r+0x7de>
 800dd70:	2001      	movs	r0, #1
 800dd72:	e774      	b.n	800dc5e <_dtoa_r+0x7ee>
 800dd74:	f04f 0800 	mov.w	r8, #0
 800dd78:	e7f6      	b.n	800dd68 <_dtoa_r+0x8f8>
 800dd7a:	4698      	mov	r8, r3
 800dd7c:	e7f4      	b.n	800dd68 <_dtoa_r+0x8f8>
 800dd7e:	d082      	beq.n	800dc86 <_dtoa_r+0x816>
 800dd80:	9a05      	ldr	r2, [sp, #20]
 800dd82:	331c      	adds	r3, #28
 800dd84:	441a      	add	r2, r3
 800dd86:	9205      	str	r2, [sp, #20]
 800dd88:	9a06      	ldr	r2, [sp, #24]
 800dd8a:	441a      	add	r2, r3
 800dd8c:	441d      	add	r5, r3
 800dd8e:	9206      	str	r2, [sp, #24]
 800dd90:	e779      	b.n	800dc86 <_dtoa_r+0x816>
 800dd92:	4603      	mov	r3, r0
 800dd94:	e7f4      	b.n	800dd80 <_dtoa_r+0x910>
 800dd96:	9b04      	ldr	r3, [sp, #16]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	dc37      	bgt.n	800de0c <_dtoa_r+0x99c>
 800dd9c:	9b07      	ldr	r3, [sp, #28]
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	dd34      	ble.n	800de0c <_dtoa_r+0x99c>
 800dda2:	9b04      	ldr	r3, [sp, #16]
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	9b01      	ldr	r3, [sp, #4]
 800dda8:	b963      	cbnz	r3, 800ddc4 <_dtoa_r+0x954>
 800ddaa:	4631      	mov	r1, r6
 800ddac:	2205      	movs	r2, #5
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f000 f9fe 	bl	800e1b0 <__multadd>
 800ddb4:	4601      	mov	r1, r0
 800ddb6:	4606      	mov	r6, r0
 800ddb8:	4650      	mov	r0, sl
 800ddba:	f000 fc13 	bl	800e5e4 <__mcmp>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	f73f adbb 	bgt.w	800d93a <_dtoa_r+0x4ca>
 800ddc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddc6:	9d00      	ldr	r5, [sp, #0]
 800ddc8:	ea6f 0b03 	mvn.w	fp, r3
 800ddcc:	f04f 0800 	mov.w	r8, #0
 800ddd0:	4631      	mov	r1, r6
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 f9ca 	bl	800e16c <_Bfree>
 800ddd8:	2f00      	cmp	r7, #0
 800ddda:	f43f aeab 	beq.w	800db34 <_dtoa_r+0x6c4>
 800ddde:	f1b8 0f00 	cmp.w	r8, #0
 800dde2:	d005      	beq.n	800ddf0 <_dtoa_r+0x980>
 800dde4:	45b8      	cmp	r8, r7
 800dde6:	d003      	beq.n	800ddf0 <_dtoa_r+0x980>
 800dde8:	4641      	mov	r1, r8
 800ddea:	4620      	mov	r0, r4
 800ddec:	f000 f9be 	bl	800e16c <_Bfree>
 800ddf0:	4639      	mov	r1, r7
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f000 f9ba 	bl	800e16c <_Bfree>
 800ddf8:	e69c      	b.n	800db34 <_dtoa_r+0x6c4>
 800ddfa:	2600      	movs	r6, #0
 800ddfc:	4637      	mov	r7, r6
 800ddfe:	e7e1      	b.n	800ddc4 <_dtoa_r+0x954>
 800de00:	46bb      	mov	fp, r7
 800de02:	4637      	mov	r7, r6
 800de04:	e599      	b.n	800d93a <_dtoa_r+0x4ca>
 800de06:	bf00      	nop
 800de08:	40240000 	.word	0x40240000
 800de0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f000 80c8 	beq.w	800dfa4 <_dtoa_r+0xb34>
 800de14:	9b04      	ldr	r3, [sp, #16]
 800de16:	9301      	str	r3, [sp, #4]
 800de18:	2d00      	cmp	r5, #0
 800de1a:	dd05      	ble.n	800de28 <_dtoa_r+0x9b8>
 800de1c:	4639      	mov	r1, r7
 800de1e:	462a      	mov	r2, r5
 800de20:	4620      	mov	r0, r4
 800de22:	f000 fb73 	bl	800e50c <__lshift>
 800de26:	4607      	mov	r7, r0
 800de28:	f1b8 0f00 	cmp.w	r8, #0
 800de2c:	d05b      	beq.n	800dee6 <_dtoa_r+0xa76>
 800de2e:	6879      	ldr	r1, [r7, #4]
 800de30:	4620      	mov	r0, r4
 800de32:	f000 f95b 	bl	800e0ec <_Balloc>
 800de36:	4605      	mov	r5, r0
 800de38:	b928      	cbnz	r0, 800de46 <_dtoa_r+0x9d6>
 800de3a:	4b83      	ldr	r3, [pc, #524]	; (800e048 <_dtoa_r+0xbd8>)
 800de3c:	4602      	mov	r2, r0
 800de3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800de42:	f7ff bb2e 	b.w	800d4a2 <_dtoa_r+0x32>
 800de46:	693a      	ldr	r2, [r7, #16]
 800de48:	3202      	adds	r2, #2
 800de4a:	0092      	lsls	r2, r2, #2
 800de4c:	f107 010c 	add.w	r1, r7, #12
 800de50:	300c      	adds	r0, #12
 800de52:	f000 fee7 	bl	800ec24 <memcpy>
 800de56:	2201      	movs	r2, #1
 800de58:	4629      	mov	r1, r5
 800de5a:	4620      	mov	r0, r4
 800de5c:	f000 fb56 	bl	800e50c <__lshift>
 800de60:	9b00      	ldr	r3, [sp, #0]
 800de62:	3301      	adds	r3, #1
 800de64:	9304      	str	r3, [sp, #16]
 800de66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de6a:	4413      	add	r3, r2
 800de6c:	9308      	str	r3, [sp, #32]
 800de6e:	9b02      	ldr	r3, [sp, #8]
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	46b8      	mov	r8, r7
 800de76:	9306      	str	r3, [sp, #24]
 800de78:	4607      	mov	r7, r0
 800de7a:	9b04      	ldr	r3, [sp, #16]
 800de7c:	4631      	mov	r1, r6
 800de7e:	3b01      	subs	r3, #1
 800de80:	4650      	mov	r0, sl
 800de82:	9301      	str	r3, [sp, #4]
 800de84:	f7ff fa69 	bl	800d35a <quorem>
 800de88:	4641      	mov	r1, r8
 800de8a:	9002      	str	r0, [sp, #8]
 800de8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800de90:	4650      	mov	r0, sl
 800de92:	f000 fba7 	bl	800e5e4 <__mcmp>
 800de96:	463a      	mov	r2, r7
 800de98:	9005      	str	r0, [sp, #20]
 800de9a:	4631      	mov	r1, r6
 800de9c:	4620      	mov	r0, r4
 800de9e:	f000 fbbd 	bl	800e61c <__mdiff>
 800dea2:	68c2      	ldr	r2, [r0, #12]
 800dea4:	4605      	mov	r5, r0
 800dea6:	bb02      	cbnz	r2, 800deea <_dtoa_r+0xa7a>
 800dea8:	4601      	mov	r1, r0
 800deaa:	4650      	mov	r0, sl
 800deac:	f000 fb9a 	bl	800e5e4 <__mcmp>
 800deb0:	4602      	mov	r2, r0
 800deb2:	4629      	mov	r1, r5
 800deb4:	4620      	mov	r0, r4
 800deb6:	9209      	str	r2, [sp, #36]	; 0x24
 800deb8:	f000 f958 	bl	800e16c <_Bfree>
 800debc:	9b07      	ldr	r3, [sp, #28]
 800debe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dec0:	9d04      	ldr	r5, [sp, #16]
 800dec2:	ea43 0102 	orr.w	r1, r3, r2
 800dec6:	9b06      	ldr	r3, [sp, #24]
 800dec8:	4319      	orrs	r1, r3
 800deca:	d110      	bne.n	800deee <_dtoa_r+0xa7e>
 800decc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ded0:	d029      	beq.n	800df26 <_dtoa_r+0xab6>
 800ded2:	9b05      	ldr	r3, [sp, #20]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	dd02      	ble.n	800dede <_dtoa_r+0xa6e>
 800ded8:	9b02      	ldr	r3, [sp, #8]
 800deda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800dede:	9b01      	ldr	r3, [sp, #4]
 800dee0:	f883 9000 	strb.w	r9, [r3]
 800dee4:	e774      	b.n	800ddd0 <_dtoa_r+0x960>
 800dee6:	4638      	mov	r0, r7
 800dee8:	e7ba      	b.n	800de60 <_dtoa_r+0x9f0>
 800deea:	2201      	movs	r2, #1
 800deec:	e7e1      	b.n	800deb2 <_dtoa_r+0xa42>
 800deee:	9b05      	ldr	r3, [sp, #20]
 800def0:	2b00      	cmp	r3, #0
 800def2:	db04      	blt.n	800defe <_dtoa_r+0xa8e>
 800def4:	9907      	ldr	r1, [sp, #28]
 800def6:	430b      	orrs	r3, r1
 800def8:	9906      	ldr	r1, [sp, #24]
 800defa:	430b      	orrs	r3, r1
 800defc:	d120      	bne.n	800df40 <_dtoa_r+0xad0>
 800defe:	2a00      	cmp	r2, #0
 800df00:	dded      	ble.n	800dede <_dtoa_r+0xa6e>
 800df02:	4651      	mov	r1, sl
 800df04:	2201      	movs	r2, #1
 800df06:	4620      	mov	r0, r4
 800df08:	f000 fb00 	bl	800e50c <__lshift>
 800df0c:	4631      	mov	r1, r6
 800df0e:	4682      	mov	sl, r0
 800df10:	f000 fb68 	bl	800e5e4 <__mcmp>
 800df14:	2800      	cmp	r0, #0
 800df16:	dc03      	bgt.n	800df20 <_dtoa_r+0xab0>
 800df18:	d1e1      	bne.n	800dede <_dtoa_r+0xa6e>
 800df1a:	f019 0f01 	tst.w	r9, #1
 800df1e:	d0de      	beq.n	800dede <_dtoa_r+0xa6e>
 800df20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800df24:	d1d8      	bne.n	800ded8 <_dtoa_r+0xa68>
 800df26:	9a01      	ldr	r2, [sp, #4]
 800df28:	2339      	movs	r3, #57	; 0x39
 800df2a:	7013      	strb	r3, [r2, #0]
 800df2c:	462b      	mov	r3, r5
 800df2e:	461d      	mov	r5, r3
 800df30:	3b01      	subs	r3, #1
 800df32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df36:	2a39      	cmp	r2, #57	; 0x39
 800df38:	d06c      	beq.n	800e014 <_dtoa_r+0xba4>
 800df3a:	3201      	adds	r2, #1
 800df3c:	701a      	strb	r2, [r3, #0]
 800df3e:	e747      	b.n	800ddd0 <_dtoa_r+0x960>
 800df40:	2a00      	cmp	r2, #0
 800df42:	dd07      	ble.n	800df54 <_dtoa_r+0xae4>
 800df44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800df48:	d0ed      	beq.n	800df26 <_dtoa_r+0xab6>
 800df4a:	9a01      	ldr	r2, [sp, #4]
 800df4c:	f109 0301 	add.w	r3, r9, #1
 800df50:	7013      	strb	r3, [r2, #0]
 800df52:	e73d      	b.n	800ddd0 <_dtoa_r+0x960>
 800df54:	9b04      	ldr	r3, [sp, #16]
 800df56:	9a08      	ldr	r2, [sp, #32]
 800df58:	f803 9c01 	strb.w	r9, [r3, #-1]
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d043      	beq.n	800dfe8 <_dtoa_r+0xb78>
 800df60:	4651      	mov	r1, sl
 800df62:	2300      	movs	r3, #0
 800df64:	220a      	movs	r2, #10
 800df66:	4620      	mov	r0, r4
 800df68:	f000 f922 	bl	800e1b0 <__multadd>
 800df6c:	45b8      	cmp	r8, r7
 800df6e:	4682      	mov	sl, r0
 800df70:	f04f 0300 	mov.w	r3, #0
 800df74:	f04f 020a 	mov.w	r2, #10
 800df78:	4641      	mov	r1, r8
 800df7a:	4620      	mov	r0, r4
 800df7c:	d107      	bne.n	800df8e <_dtoa_r+0xb1e>
 800df7e:	f000 f917 	bl	800e1b0 <__multadd>
 800df82:	4680      	mov	r8, r0
 800df84:	4607      	mov	r7, r0
 800df86:	9b04      	ldr	r3, [sp, #16]
 800df88:	3301      	adds	r3, #1
 800df8a:	9304      	str	r3, [sp, #16]
 800df8c:	e775      	b.n	800de7a <_dtoa_r+0xa0a>
 800df8e:	f000 f90f 	bl	800e1b0 <__multadd>
 800df92:	4639      	mov	r1, r7
 800df94:	4680      	mov	r8, r0
 800df96:	2300      	movs	r3, #0
 800df98:	220a      	movs	r2, #10
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 f908 	bl	800e1b0 <__multadd>
 800dfa0:	4607      	mov	r7, r0
 800dfa2:	e7f0      	b.n	800df86 <_dtoa_r+0xb16>
 800dfa4:	9b04      	ldr	r3, [sp, #16]
 800dfa6:	9301      	str	r3, [sp, #4]
 800dfa8:	9d00      	ldr	r5, [sp, #0]
 800dfaa:	4631      	mov	r1, r6
 800dfac:	4650      	mov	r0, sl
 800dfae:	f7ff f9d4 	bl	800d35a <quorem>
 800dfb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dfb6:	9b00      	ldr	r3, [sp, #0]
 800dfb8:	f805 9b01 	strb.w	r9, [r5], #1
 800dfbc:	1aea      	subs	r2, r5, r3
 800dfbe:	9b01      	ldr	r3, [sp, #4]
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	dd07      	ble.n	800dfd4 <_dtoa_r+0xb64>
 800dfc4:	4651      	mov	r1, sl
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	220a      	movs	r2, #10
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f000 f8f0 	bl	800e1b0 <__multadd>
 800dfd0:	4682      	mov	sl, r0
 800dfd2:	e7ea      	b.n	800dfaa <_dtoa_r+0xb3a>
 800dfd4:	9b01      	ldr	r3, [sp, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	bfc8      	it	gt
 800dfda:	461d      	movgt	r5, r3
 800dfdc:	9b00      	ldr	r3, [sp, #0]
 800dfde:	bfd8      	it	le
 800dfe0:	2501      	movle	r5, #1
 800dfe2:	441d      	add	r5, r3
 800dfe4:	f04f 0800 	mov.w	r8, #0
 800dfe8:	4651      	mov	r1, sl
 800dfea:	2201      	movs	r2, #1
 800dfec:	4620      	mov	r0, r4
 800dfee:	f000 fa8d 	bl	800e50c <__lshift>
 800dff2:	4631      	mov	r1, r6
 800dff4:	4682      	mov	sl, r0
 800dff6:	f000 faf5 	bl	800e5e4 <__mcmp>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	dc96      	bgt.n	800df2c <_dtoa_r+0xabc>
 800dffe:	d102      	bne.n	800e006 <_dtoa_r+0xb96>
 800e000:	f019 0f01 	tst.w	r9, #1
 800e004:	d192      	bne.n	800df2c <_dtoa_r+0xabc>
 800e006:	462b      	mov	r3, r5
 800e008:	461d      	mov	r5, r3
 800e00a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e00e:	2a30      	cmp	r2, #48	; 0x30
 800e010:	d0fa      	beq.n	800e008 <_dtoa_r+0xb98>
 800e012:	e6dd      	b.n	800ddd0 <_dtoa_r+0x960>
 800e014:	9a00      	ldr	r2, [sp, #0]
 800e016:	429a      	cmp	r2, r3
 800e018:	d189      	bne.n	800df2e <_dtoa_r+0xabe>
 800e01a:	f10b 0b01 	add.w	fp, fp, #1
 800e01e:	2331      	movs	r3, #49	; 0x31
 800e020:	e796      	b.n	800df50 <_dtoa_r+0xae0>
 800e022:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <_dtoa_r+0xbdc>)
 800e024:	f7ff ba99 	b.w	800d55a <_dtoa_r+0xea>
 800e028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f47f aa6d 	bne.w	800d50a <_dtoa_r+0x9a>
 800e030:	4b07      	ldr	r3, [pc, #28]	; (800e050 <_dtoa_r+0xbe0>)
 800e032:	f7ff ba92 	b.w	800d55a <_dtoa_r+0xea>
 800e036:	9b01      	ldr	r3, [sp, #4]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	dcb5      	bgt.n	800dfa8 <_dtoa_r+0xb38>
 800e03c:	9b07      	ldr	r3, [sp, #28]
 800e03e:	2b02      	cmp	r3, #2
 800e040:	f73f aeb1 	bgt.w	800dda6 <_dtoa_r+0x936>
 800e044:	e7b0      	b.n	800dfa8 <_dtoa_r+0xb38>
 800e046:	bf00      	nop
 800e048:	0800f520 	.word	0x0800f520
 800e04c:	0800f480 	.word	0x0800f480
 800e050:	0800f4a4 	.word	0x0800f4a4

0800e054 <_free_r>:
 800e054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e056:	2900      	cmp	r1, #0
 800e058:	d044      	beq.n	800e0e4 <_free_r+0x90>
 800e05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e05e:	9001      	str	r0, [sp, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	f1a1 0404 	sub.w	r4, r1, #4
 800e066:	bfb8      	it	lt
 800e068:	18e4      	addlt	r4, r4, r3
 800e06a:	f7fe fb13 	bl	800c694 <__malloc_lock>
 800e06e:	4a1e      	ldr	r2, [pc, #120]	; (800e0e8 <_free_r+0x94>)
 800e070:	9801      	ldr	r0, [sp, #4]
 800e072:	6813      	ldr	r3, [r2, #0]
 800e074:	b933      	cbnz	r3, 800e084 <_free_r+0x30>
 800e076:	6063      	str	r3, [r4, #4]
 800e078:	6014      	str	r4, [r2, #0]
 800e07a:	b003      	add	sp, #12
 800e07c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e080:	f7fe bb0e 	b.w	800c6a0 <__malloc_unlock>
 800e084:	42a3      	cmp	r3, r4
 800e086:	d908      	bls.n	800e09a <_free_r+0x46>
 800e088:	6825      	ldr	r5, [r4, #0]
 800e08a:	1961      	adds	r1, r4, r5
 800e08c:	428b      	cmp	r3, r1
 800e08e:	bf01      	itttt	eq
 800e090:	6819      	ldreq	r1, [r3, #0]
 800e092:	685b      	ldreq	r3, [r3, #4]
 800e094:	1949      	addeq	r1, r1, r5
 800e096:	6021      	streq	r1, [r4, #0]
 800e098:	e7ed      	b.n	800e076 <_free_r+0x22>
 800e09a:	461a      	mov	r2, r3
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	b10b      	cbz	r3, 800e0a4 <_free_r+0x50>
 800e0a0:	42a3      	cmp	r3, r4
 800e0a2:	d9fa      	bls.n	800e09a <_free_r+0x46>
 800e0a4:	6811      	ldr	r1, [r2, #0]
 800e0a6:	1855      	adds	r5, r2, r1
 800e0a8:	42a5      	cmp	r5, r4
 800e0aa:	d10b      	bne.n	800e0c4 <_free_r+0x70>
 800e0ac:	6824      	ldr	r4, [r4, #0]
 800e0ae:	4421      	add	r1, r4
 800e0b0:	1854      	adds	r4, r2, r1
 800e0b2:	42a3      	cmp	r3, r4
 800e0b4:	6011      	str	r1, [r2, #0]
 800e0b6:	d1e0      	bne.n	800e07a <_free_r+0x26>
 800e0b8:	681c      	ldr	r4, [r3, #0]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	6053      	str	r3, [r2, #4]
 800e0be:	440c      	add	r4, r1
 800e0c0:	6014      	str	r4, [r2, #0]
 800e0c2:	e7da      	b.n	800e07a <_free_r+0x26>
 800e0c4:	d902      	bls.n	800e0cc <_free_r+0x78>
 800e0c6:	230c      	movs	r3, #12
 800e0c8:	6003      	str	r3, [r0, #0]
 800e0ca:	e7d6      	b.n	800e07a <_free_r+0x26>
 800e0cc:	6825      	ldr	r5, [r4, #0]
 800e0ce:	1961      	adds	r1, r4, r5
 800e0d0:	428b      	cmp	r3, r1
 800e0d2:	bf04      	itt	eq
 800e0d4:	6819      	ldreq	r1, [r3, #0]
 800e0d6:	685b      	ldreq	r3, [r3, #4]
 800e0d8:	6063      	str	r3, [r4, #4]
 800e0da:	bf04      	itt	eq
 800e0dc:	1949      	addeq	r1, r1, r5
 800e0de:	6021      	streq	r1, [r4, #0]
 800e0e0:	6054      	str	r4, [r2, #4]
 800e0e2:	e7ca      	b.n	800e07a <_free_r+0x26>
 800e0e4:	b003      	add	sp, #12
 800e0e6:	bd30      	pop	{r4, r5, pc}
 800e0e8:	20000da0 	.word	0x20000da0

0800e0ec <_Balloc>:
 800e0ec:	b570      	push	{r4, r5, r6, lr}
 800e0ee:	69c6      	ldr	r6, [r0, #28]
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	460d      	mov	r5, r1
 800e0f4:	b976      	cbnz	r6, 800e114 <_Balloc+0x28>
 800e0f6:	2010      	movs	r0, #16
 800e0f8:	f7fe fa1c 	bl	800c534 <malloc>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	61e0      	str	r0, [r4, #28]
 800e100:	b920      	cbnz	r0, 800e10c <_Balloc+0x20>
 800e102:	4b18      	ldr	r3, [pc, #96]	; (800e164 <_Balloc+0x78>)
 800e104:	4818      	ldr	r0, [pc, #96]	; (800e168 <_Balloc+0x7c>)
 800e106:	216b      	movs	r1, #107	; 0x6b
 800e108:	f000 fd9a 	bl	800ec40 <__assert_func>
 800e10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e110:	6006      	str	r6, [r0, #0]
 800e112:	60c6      	str	r6, [r0, #12]
 800e114:	69e6      	ldr	r6, [r4, #28]
 800e116:	68f3      	ldr	r3, [r6, #12]
 800e118:	b183      	cbz	r3, 800e13c <_Balloc+0x50>
 800e11a:	69e3      	ldr	r3, [r4, #28]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e122:	b9b8      	cbnz	r0, 800e154 <_Balloc+0x68>
 800e124:	2101      	movs	r1, #1
 800e126:	fa01 f605 	lsl.w	r6, r1, r5
 800e12a:	1d72      	adds	r2, r6, #5
 800e12c:	0092      	lsls	r2, r2, #2
 800e12e:	4620      	mov	r0, r4
 800e130:	f000 fda4 	bl	800ec7c <_calloc_r>
 800e134:	b160      	cbz	r0, 800e150 <_Balloc+0x64>
 800e136:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e13a:	e00e      	b.n	800e15a <_Balloc+0x6e>
 800e13c:	2221      	movs	r2, #33	; 0x21
 800e13e:	2104      	movs	r1, #4
 800e140:	4620      	mov	r0, r4
 800e142:	f000 fd9b 	bl	800ec7c <_calloc_r>
 800e146:	69e3      	ldr	r3, [r4, #28]
 800e148:	60f0      	str	r0, [r6, #12]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d1e4      	bne.n	800e11a <_Balloc+0x2e>
 800e150:	2000      	movs	r0, #0
 800e152:	bd70      	pop	{r4, r5, r6, pc}
 800e154:	6802      	ldr	r2, [r0, #0]
 800e156:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e15a:	2300      	movs	r3, #0
 800e15c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e160:	e7f7      	b.n	800e152 <_Balloc+0x66>
 800e162:	bf00      	nop
 800e164:	0800f4b1 	.word	0x0800f4b1
 800e168:	0800f531 	.word	0x0800f531

0800e16c <_Bfree>:
 800e16c:	b570      	push	{r4, r5, r6, lr}
 800e16e:	69c6      	ldr	r6, [r0, #28]
 800e170:	4605      	mov	r5, r0
 800e172:	460c      	mov	r4, r1
 800e174:	b976      	cbnz	r6, 800e194 <_Bfree+0x28>
 800e176:	2010      	movs	r0, #16
 800e178:	f7fe f9dc 	bl	800c534 <malloc>
 800e17c:	4602      	mov	r2, r0
 800e17e:	61e8      	str	r0, [r5, #28]
 800e180:	b920      	cbnz	r0, 800e18c <_Bfree+0x20>
 800e182:	4b09      	ldr	r3, [pc, #36]	; (800e1a8 <_Bfree+0x3c>)
 800e184:	4809      	ldr	r0, [pc, #36]	; (800e1ac <_Bfree+0x40>)
 800e186:	218f      	movs	r1, #143	; 0x8f
 800e188:	f000 fd5a 	bl	800ec40 <__assert_func>
 800e18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e190:	6006      	str	r6, [r0, #0]
 800e192:	60c6      	str	r6, [r0, #12]
 800e194:	b13c      	cbz	r4, 800e1a6 <_Bfree+0x3a>
 800e196:	69eb      	ldr	r3, [r5, #28]
 800e198:	6862      	ldr	r2, [r4, #4]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1a0:	6021      	str	r1, [r4, #0]
 800e1a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1a6:	bd70      	pop	{r4, r5, r6, pc}
 800e1a8:	0800f4b1 	.word	0x0800f4b1
 800e1ac:	0800f531 	.word	0x0800f531

0800e1b0 <__multadd>:
 800e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b4:	690d      	ldr	r5, [r1, #16]
 800e1b6:	4607      	mov	r7, r0
 800e1b8:	460c      	mov	r4, r1
 800e1ba:	461e      	mov	r6, r3
 800e1bc:	f101 0c14 	add.w	ip, r1, #20
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	f8dc 3000 	ldr.w	r3, [ip]
 800e1c6:	b299      	uxth	r1, r3
 800e1c8:	fb02 6101 	mla	r1, r2, r1, r6
 800e1cc:	0c1e      	lsrs	r6, r3, #16
 800e1ce:	0c0b      	lsrs	r3, r1, #16
 800e1d0:	fb02 3306 	mla	r3, r2, r6, r3
 800e1d4:	b289      	uxth	r1, r1
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1dc:	4285      	cmp	r5, r0
 800e1de:	f84c 1b04 	str.w	r1, [ip], #4
 800e1e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1e6:	dcec      	bgt.n	800e1c2 <__multadd+0x12>
 800e1e8:	b30e      	cbz	r6, 800e22e <__multadd+0x7e>
 800e1ea:	68a3      	ldr	r3, [r4, #8]
 800e1ec:	42ab      	cmp	r3, r5
 800e1ee:	dc19      	bgt.n	800e224 <__multadd+0x74>
 800e1f0:	6861      	ldr	r1, [r4, #4]
 800e1f2:	4638      	mov	r0, r7
 800e1f4:	3101      	adds	r1, #1
 800e1f6:	f7ff ff79 	bl	800e0ec <_Balloc>
 800e1fa:	4680      	mov	r8, r0
 800e1fc:	b928      	cbnz	r0, 800e20a <__multadd+0x5a>
 800e1fe:	4602      	mov	r2, r0
 800e200:	4b0c      	ldr	r3, [pc, #48]	; (800e234 <__multadd+0x84>)
 800e202:	480d      	ldr	r0, [pc, #52]	; (800e238 <__multadd+0x88>)
 800e204:	21ba      	movs	r1, #186	; 0xba
 800e206:	f000 fd1b 	bl	800ec40 <__assert_func>
 800e20a:	6922      	ldr	r2, [r4, #16]
 800e20c:	3202      	adds	r2, #2
 800e20e:	f104 010c 	add.w	r1, r4, #12
 800e212:	0092      	lsls	r2, r2, #2
 800e214:	300c      	adds	r0, #12
 800e216:	f000 fd05 	bl	800ec24 <memcpy>
 800e21a:	4621      	mov	r1, r4
 800e21c:	4638      	mov	r0, r7
 800e21e:	f7ff ffa5 	bl	800e16c <_Bfree>
 800e222:	4644      	mov	r4, r8
 800e224:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e228:	3501      	adds	r5, #1
 800e22a:	615e      	str	r6, [r3, #20]
 800e22c:	6125      	str	r5, [r4, #16]
 800e22e:	4620      	mov	r0, r4
 800e230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e234:	0800f520 	.word	0x0800f520
 800e238:	0800f531 	.word	0x0800f531

0800e23c <__hi0bits>:
 800e23c:	0c03      	lsrs	r3, r0, #16
 800e23e:	041b      	lsls	r3, r3, #16
 800e240:	b9d3      	cbnz	r3, 800e278 <__hi0bits+0x3c>
 800e242:	0400      	lsls	r0, r0, #16
 800e244:	2310      	movs	r3, #16
 800e246:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e24a:	bf04      	itt	eq
 800e24c:	0200      	lsleq	r0, r0, #8
 800e24e:	3308      	addeq	r3, #8
 800e250:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e254:	bf04      	itt	eq
 800e256:	0100      	lsleq	r0, r0, #4
 800e258:	3304      	addeq	r3, #4
 800e25a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e25e:	bf04      	itt	eq
 800e260:	0080      	lsleq	r0, r0, #2
 800e262:	3302      	addeq	r3, #2
 800e264:	2800      	cmp	r0, #0
 800e266:	db05      	blt.n	800e274 <__hi0bits+0x38>
 800e268:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e26c:	f103 0301 	add.w	r3, r3, #1
 800e270:	bf08      	it	eq
 800e272:	2320      	moveq	r3, #32
 800e274:	4618      	mov	r0, r3
 800e276:	4770      	bx	lr
 800e278:	2300      	movs	r3, #0
 800e27a:	e7e4      	b.n	800e246 <__hi0bits+0xa>

0800e27c <__lo0bits>:
 800e27c:	6803      	ldr	r3, [r0, #0]
 800e27e:	f013 0207 	ands.w	r2, r3, #7
 800e282:	d00c      	beq.n	800e29e <__lo0bits+0x22>
 800e284:	07d9      	lsls	r1, r3, #31
 800e286:	d422      	bmi.n	800e2ce <__lo0bits+0x52>
 800e288:	079a      	lsls	r2, r3, #30
 800e28a:	bf49      	itett	mi
 800e28c:	085b      	lsrmi	r3, r3, #1
 800e28e:	089b      	lsrpl	r3, r3, #2
 800e290:	6003      	strmi	r3, [r0, #0]
 800e292:	2201      	movmi	r2, #1
 800e294:	bf5c      	itt	pl
 800e296:	6003      	strpl	r3, [r0, #0]
 800e298:	2202      	movpl	r2, #2
 800e29a:	4610      	mov	r0, r2
 800e29c:	4770      	bx	lr
 800e29e:	b299      	uxth	r1, r3
 800e2a0:	b909      	cbnz	r1, 800e2a6 <__lo0bits+0x2a>
 800e2a2:	0c1b      	lsrs	r3, r3, #16
 800e2a4:	2210      	movs	r2, #16
 800e2a6:	b2d9      	uxtb	r1, r3
 800e2a8:	b909      	cbnz	r1, 800e2ae <__lo0bits+0x32>
 800e2aa:	3208      	adds	r2, #8
 800e2ac:	0a1b      	lsrs	r3, r3, #8
 800e2ae:	0719      	lsls	r1, r3, #28
 800e2b0:	bf04      	itt	eq
 800e2b2:	091b      	lsreq	r3, r3, #4
 800e2b4:	3204      	addeq	r2, #4
 800e2b6:	0799      	lsls	r1, r3, #30
 800e2b8:	bf04      	itt	eq
 800e2ba:	089b      	lsreq	r3, r3, #2
 800e2bc:	3202      	addeq	r2, #2
 800e2be:	07d9      	lsls	r1, r3, #31
 800e2c0:	d403      	bmi.n	800e2ca <__lo0bits+0x4e>
 800e2c2:	085b      	lsrs	r3, r3, #1
 800e2c4:	f102 0201 	add.w	r2, r2, #1
 800e2c8:	d003      	beq.n	800e2d2 <__lo0bits+0x56>
 800e2ca:	6003      	str	r3, [r0, #0]
 800e2cc:	e7e5      	b.n	800e29a <__lo0bits+0x1e>
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	e7e3      	b.n	800e29a <__lo0bits+0x1e>
 800e2d2:	2220      	movs	r2, #32
 800e2d4:	e7e1      	b.n	800e29a <__lo0bits+0x1e>
	...

0800e2d8 <__i2b>:
 800e2d8:	b510      	push	{r4, lr}
 800e2da:	460c      	mov	r4, r1
 800e2dc:	2101      	movs	r1, #1
 800e2de:	f7ff ff05 	bl	800e0ec <_Balloc>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	b928      	cbnz	r0, 800e2f2 <__i2b+0x1a>
 800e2e6:	4b05      	ldr	r3, [pc, #20]	; (800e2fc <__i2b+0x24>)
 800e2e8:	4805      	ldr	r0, [pc, #20]	; (800e300 <__i2b+0x28>)
 800e2ea:	f240 1145 	movw	r1, #325	; 0x145
 800e2ee:	f000 fca7 	bl	800ec40 <__assert_func>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	6144      	str	r4, [r0, #20]
 800e2f6:	6103      	str	r3, [r0, #16]
 800e2f8:	bd10      	pop	{r4, pc}
 800e2fa:	bf00      	nop
 800e2fc:	0800f520 	.word	0x0800f520
 800e300:	0800f531 	.word	0x0800f531

0800e304 <__multiply>:
 800e304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e308:	4691      	mov	r9, r2
 800e30a:	690a      	ldr	r2, [r1, #16]
 800e30c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e310:	429a      	cmp	r2, r3
 800e312:	bfb8      	it	lt
 800e314:	460b      	movlt	r3, r1
 800e316:	460c      	mov	r4, r1
 800e318:	bfbc      	itt	lt
 800e31a:	464c      	movlt	r4, r9
 800e31c:	4699      	movlt	r9, r3
 800e31e:	6927      	ldr	r7, [r4, #16]
 800e320:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e324:	68a3      	ldr	r3, [r4, #8]
 800e326:	6861      	ldr	r1, [r4, #4]
 800e328:	eb07 060a 	add.w	r6, r7, sl
 800e32c:	42b3      	cmp	r3, r6
 800e32e:	b085      	sub	sp, #20
 800e330:	bfb8      	it	lt
 800e332:	3101      	addlt	r1, #1
 800e334:	f7ff feda 	bl	800e0ec <_Balloc>
 800e338:	b930      	cbnz	r0, 800e348 <__multiply+0x44>
 800e33a:	4602      	mov	r2, r0
 800e33c:	4b44      	ldr	r3, [pc, #272]	; (800e450 <__multiply+0x14c>)
 800e33e:	4845      	ldr	r0, [pc, #276]	; (800e454 <__multiply+0x150>)
 800e340:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e344:	f000 fc7c 	bl	800ec40 <__assert_func>
 800e348:	f100 0514 	add.w	r5, r0, #20
 800e34c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e350:	462b      	mov	r3, r5
 800e352:	2200      	movs	r2, #0
 800e354:	4543      	cmp	r3, r8
 800e356:	d321      	bcc.n	800e39c <__multiply+0x98>
 800e358:	f104 0314 	add.w	r3, r4, #20
 800e35c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e360:	f109 0314 	add.w	r3, r9, #20
 800e364:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e368:	9202      	str	r2, [sp, #8]
 800e36a:	1b3a      	subs	r2, r7, r4
 800e36c:	3a15      	subs	r2, #21
 800e36e:	f022 0203 	bic.w	r2, r2, #3
 800e372:	3204      	adds	r2, #4
 800e374:	f104 0115 	add.w	r1, r4, #21
 800e378:	428f      	cmp	r7, r1
 800e37a:	bf38      	it	cc
 800e37c:	2204      	movcc	r2, #4
 800e37e:	9201      	str	r2, [sp, #4]
 800e380:	9a02      	ldr	r2, [sp, #8]
 800e382:	9303      	str	r3, [sp, #12]
 800e384:	429a      	cmp	r2, r3
 800e386:	d80c      	bhi.n	800e3a2 <__multiply+0x9e>
 800e388:	2e00      	cmp	r6, #0
 800e38a:	dd03      	ble.n	800e394 <__multiply+0x90>
 800e38c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e390:	2b00      	cmp	r3, #0
 800e392:	d05b      	beq.n	800e44c <__multiply+0x148>
 800e394:	6106      	str	r6, [r0, #16]
 800e396:	b005      	add	sp, #20
 800e398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39c:	f843 2b04 	str.w	r2, [r3], #4
 800e3a0:	e7d8      	b.n	800e354 <__multiply+0x50>
 800e3a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e3a6:	f1ba 0f00 	cmp.w	sl, #0
 800e3aa:	d024      	beq.n	800e3f6 <__multiply+0xf2>
 800e3ac:	f104 0e14 	add.w	lr, r4, #20
 800e3b0:	46a9      	mov	r9, r5
 800e3b2:	f04f 0c00 	mov.w	ip, #0
 800e3b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e3ba:	f8d9 1000 	ldr.w	r1, [r9]
 800e3be:	fa1f fb82 	uxth.w	fp, r2
 800e3c2:	b289      	uxth	r1, r1
 800e3c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e3c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e3cc:	f8d9 2000 	ldr.w	r2, [r9]
 800e3d0:	4461      	add	r1, ip
 800e3d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e3da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3de:	b289      	uxth	r1, r1
 800e3e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3e4:	4577      	cmp	r7, lr
 800e3e6:	f849 1b04 	str.w	r1, [r9], #4
 800e3ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3ee:	d8e2      	bhi.n	800e3b6 <__multiply+0xb2>
 800e3f0:	9a01      	ldr	r2, [sp, #4]
 800e3f2:	f845 c002 	str.w	ip, [r5, r2]
 800e3f6:	9a03      	ldr	r2, [sp, #12]
 800e3f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3fc:	3304      	adds	r3, #4
 800e3fe:	f1b9 0f00 	cmp.w	r9, #0
 800e402:	d021      	beq.n	800e448 <__multiply+0x144>
 800e404:	6829      	ldr	r1, [r5, #0]
 800e406:	f104 0c14 	add.w	ip, r4, #20
 800e40a:	46ae      	mov	lr, r5
 800e40c:	f04f 0a00 	mov.w	sl, #0
 800e410:	f8bc b000 	ldrh.w	fp, [ip]
 800e414:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e418:	fb09 220b 	mla	r2, r9, fp, r2
 800e41c:	4452      	add	r2, sl
 800e41e:	b289      	uxth	r1, r1
 800e420:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e424:	f84e 1b04 	str.w	r1, [lr], #4
 800e428:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e42c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e430:	f8be 1000 	ldrh.w	r1, [lr]
 800e434:	fb09 110a 	mla	r1, r9, sl, r1
 800e438:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e43c:	4567      	cmp	r7, ip
 800e43e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e442:	d8e5      	bhi.n	800e410 <__multiply+0x10c>
 800e444:	9a01      	ldr	r2, [sp, #4]
 800e446:	50a9      	str	r1, [r5, r2]
 800e448:	3504      	adds	r5, #4
 800e44a:	e799      	b.n	800e380 <__multiply+0x7c>
 800e44c:	3e01      	subs	r6, #1
 800e44e:	e79b      	b.n	800e388 <__multiply+0x84>
 800e450:	0800f520 	.word	0x0800f520
 800e454:	0800f531 	.word	0x0800f531

0800e458 <__pow5mult>:
 800e458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e45c:	4615      	mov	r5, r2
 800e45e:	f012 0203 	ands.w	r2, r2, #3
 800e462:	4606      	mov	r6, r0
 800e464:	460f      	mov	r7, r1
 800e466:	d007      	beq.n	800e478 <__pow5mult+0x20>
 800e468:	4c25      	ldr	r4, [pc, #148]	; (800e500 <__pow5mult+0xa8>)
 800e46a:	3a01      	subs	r2, #1
 800e46c:	2300      	movs	r3, #0
 800e46e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e472:	f7ff fe9d 	bl	800e1b0 <__multadd>
 800e476:	4607      	mov	r7, r0
 800e478:	10ad      	asrs	r5, r5, #2
 800e47a:	d03d      	beq.n	800e4f8 <__pow5mult+0xa0>
 800e47c:	69f4      	ldr	r4, [r6, #28]
 800e47e:	b97c      	cbnz	r4, 800e4a0 <__pow5mult+0x48>
 800e480:	2010      	movs	r0, #16
 800e482:	f7fe f857 	bl	800c534 <malloc>
 800e486:	4602      	mov	r2, r0
 800e488:	61f0      	str	r0, [r6, #28]
 800e48a:	b928      	cbnz	r0, 800e498 <__pow5mult+0x40>
 800e48c:	4b1d      	ldr	r3, [pc, #116]	; (800e504 <__pow5mult+0xac>)
 800e48e:	481e      	ldr	r0, [pc, #120]	; (800e508 <__pow5mult+0xb0>)
 800e490:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e494:	f000 fbd4 	bl	800ec40 <__assert_func>
 800e498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e49c:	6004      	str	r4, [r0, #0]
 800e49e:	60c4      	str	r4, [r0, #12]
 800e4a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e4a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4a8:	b94c      	cbnz	r4, 800e4be <__pow5mult+0x66>
 800e4aa:	f240 2171 	movw	r1, #625	; 0x271
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	f7ff ff12 	bl	800e2d8 <__i2b>
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	6003      	str	r3, [r0, #0]
 800e4be:	f04f 0900 	mov.w	r9, #0
 800e4c2:	07eb      	lsls	r3, r5, #31
 800e4c4:	d50a      	bpl.n	800e4dc <__pow5mult+0x84>
 800e4c6:	4639      	mov	r1, r7
 800e4c8:	4622      	mov	r2, r4
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f7ff ff1a 	bl	800e304 <__multiply>
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	4680      	mov	r8, r0
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	f7ff fe49 	bl	800e16c <_Bfree>
 800e4da:	4647      	mov	r7, r8
 800e4dc:	106d      	asrs	r5, r5, #1
 800e4de:	d00b      	beq.n	800e4f8 <__pow5mult+0xa0>
 800e4e0:	6820      	ldr	r0, [r4, #0]
 800e4e2:	b938      	cbnz	r0, 800e4f4 <__pow5mult+0x9c>
 800e4e4:	4622      	mov	r2, r4
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f7ff ff0b 	bl	800e304 <__multiply>
 800e4ee:	6020      	str	r0, [r4, #0]
 800e4f0:	f8c0 9000 	str.w	r9, [r0]
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	e7e4      	b.n	800e4c2 <__pow5mult+0x6a>
 800e4f8:	4638      	mov	r0, r7
 800e4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4fe:	bf00      	nop
 800e500:	0800f680 	.word	0x0800f680
 800e504:	0800f4b1 	.word	0x0800f4b1
 800e508:	0800f531 	.word	0x0800f531

0800e50c <__lshift>:
 800e50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e510:	460c      	mov	r4, r1
 800e512:	6849      	ldr	r1, [r1, #4]
 800e514:	6923      	ldr	r3, [r4, #16]
 800e516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e51a:	68a3      	ldr	r3, [r4, #8]
 800e51c:	4607      	mov	r7, r0
 800e51e:	4691      	mov	r9, r2
 800e520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e524:	f108 0601 	add.w	r6, r8, #1
 800e528:	42b3      	cmp	r3, r6
 800e52a:	db0b      	blt.n	800e544 <__lshift+0x38>
 800e52c:	4638      	mov	r0, r7
 800e52e:	f7ff fddd 	bl	800e0ec <_Balloc>
 800e532:	4605      	mov	r5, r0
 800e534:	b948      	cbnz	r0, 800e54a <__lshift+0x3e>
 800e536:	4602      	mov	r2, r0
 800e538:	4b28      	ldr	r3, [pc, #160]	; (800e5dc <__lshift+0xd0>)
 800e53a:	4829      	ldr	r0, [pc, #164]	; (800e5e0 <__lshift+0xd4>)
 800e53c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e540:	f000 fb7e 	bl	800ec40 <__assert_func>
 800e544:	3101      	adds	r1, #1
 800e546:	005b      	lsls	r3, r3, #1
 800e548:	e7ee      	b.n	800e528 <__lshift+0x1c>
 800e54a:	2300      	movs	r3, #0
 800e54c:	f100 0114 	add.w	r1, r0, #20
 800e550:	f100 0210 	add.w	r2, r0, #16
 800e554:	4618      	mov	r0, r3
 800e556:	4553      	cmp	r3, sl
 800e558:	db33      	blt.n	800e5c2 <__lshift+0xb6>
 800e55a:	6920      	ldr	r0, [r4, #16]
 800e55c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e560:	f104 0314 	add.w	r3, r4, #20
 800e564:	f019 091f 	ands.w	r9, r9, #31
 800e568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e56c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e570:	d02b      	beq.n	800e5ca <__lshift+0xbe>
 800e572:	f1c9 0e20 	rsb	lr, r9, #32
 800e576:	468a      	mov	sl, r1
 800e578:	2200      	movs	r2, #0
 800e57a:	6818      	ldr	r0, [r3, #0]
 800e57c:	fa00 f009 	lsl.w	r0, r0, r9
 800e580:	4310      	orrs	r0, r2
 800e582:	f84a 0b04 	str.w	r0, [sl], #4
 800e586:	f853 2b04 	ldr.w	r2, [r3], #4
 800e58a:	459c      	cmp	ip, r3
 800e58c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e590:	d8f3      	bhi.n	800e57a <__lshift+0x6e>
 800e592:	ebac 0304 	sub.w	r3, ip, r4
 800e596:	3b15      	subs	r3, #21
 800e598:	f023 0303 	bic.w	r3, r3, #3
 800e59c:	3304      	adds	r3, #4
 800e59e:	f104 0015 	add.w	r0, r4, #21
 800e5a2:	4584      	cmp	ip, r0
 800e5a4:	bf38      	it	cc
 800e5a6:	2304      	movcc	r3, #4
 800e5a8:	50ca      	str	r2, [r1, r3]
 800e5aa:	b10a      	cbz	r2, 800e5b0 <__lshift+0xa4>
 800e5ac:	f108 0602 	add.w	r6, r8, #2
 800e5b0:	3e01      	subs	r6, #1
 800e5b2:	4638      	mov	r0, r7
 800e5b4:	612e      	str	r6, [r5, #16]
 800e5b6:	4621      	mov	r1, r4
 800e5b8:	f7ff fdd8 	bl	800e16c <_Bfree>
 800e5bc:	4628      	mov	r0, r5
 800e5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	e7c5      	b.n	800e556 <__lshift+0x4a>
 800e5ca:	3904      	subs	r1, #4
 800e5cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5d4:	459c      	cmp	ip, r3
 800e5d6:	d8f9      	bhi.n	800e5cc <__lshift+0xc0>
 800e5d8:	e7ea      	b.n	800e5b0 <__lshift+0xa4>
 800e5da:	bf00      	nop
 800e5dc:	0800f520 	.word	0x0800f520
 800e5e0:	0800f531 	.word	0x0800f531

0800e5e4 <__mcmp>:
 800e5e4:	b530      	push	{r4, r5, lr}
 800e5e6:	6902      	ldr	r2, [r0, #16]
 800e5e8:	690c      	ldr	r4, [r1, #16]
 800e5ea:	1b12      	subs	r2, r2, r4
 800e5ec:	d10e      	bne.n	800e60c <__mcmp+0x28>
 800e5ee:	f100 0314 	add.w	r3, r0, #20
 800e5f2:	3114      	adds	r1, #20
 800e5f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e600:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e604:	42a5      	cmp	r5, r4
 800e606:	d003      	beq.n	800e610 <__mcmp+0x2c>
 800e608:	d305      	bcc.n	800e616 <__mcmp+0x32>
 800e60a:	2201      	movs	r2, #1
 800e60c:	4610      	mov	r0, r2
 800e60e:	bd30      	pop	{r4, r5, pc}
 800e610:	4283      	cmp	r3, r0
 800e612:	d3f3      	bcc.n	800e5fc <__mcmp+0x18>
 800e614:	e7fa      	b.n	800e60c <__mcmp+0x28>
 800e616:	f04f 32ff 	mov.w	r2, #4294967295
 800e61a:	e7f7      	b.n	800e60c <__mcmp+0x28>

0800e61c <__mdiff>:
 800e61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e620:	460c      	mov	r4, r1
 800e622:	4606      	mov	r6, r0
 800e624:	4611      	mov	r1, r2
 800e626:	4620      	mov	r0, r4
 800e628:	4690      	mov	r8, r2
 800e62a:	f7ff ffdb 	bl	800e5e4 <__mcmp>
 800e62e:	1e05      	subs	r5, r0, #0
 800e630:	d110      	bne.n	800e654 <__mdiff+0x38>
 800e632:	4629      	mov	r1, r5
 800e634:	4630      	mov	r0, r6
 800e636:	f7ff fd59 	bl	800e0ec <_Balloc>
 800e63a:	b930      	cbnz	r0, 800e64a <__mdiff+0x2e>
 800e63c:	4b3a      	ldr	r3, [pc, #232]	; (800e728 <__mdiff+0x10c>)
 800e63e:	4602      	mov	r2, r0
 800e640:	f240 2137 	movw	r1, #567	; 0x237
 800e644:	4839      	ldr	r0, [pc, #228]	; (800e72c <__mdiff+0x110>)
 800e646:	f000 fafb 	bl	800ec40 <__assert_func>
 800e64a:	2301      	movs	r3, #1
 800e64c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e654:	bfa4      	itt	ge
 800e656:	4643      	movge	r3, r8
 800e658:	46a0      	movge	r8, r4
 800e65a:	4630      	mov	r0, r6
 800e65c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e660:	bfa6      	itte	ge
 800e662:	461c      	movge	r4, r3
 800e664:	2500      	movge	r5, #0
 800e666:	2501      	movlt	r5, #1
 800e668:	f7ff fd40 	bl	800e0ec <_Balloc>
 800e66c:	b920      	cbnz	r0, 800e678 <__mdiff+0x5c>
 800e66e:	4b2e      	ldr	r3, [pc, #184]	; (800e728 <__mdiff+0x10c>)
 800e670:	4602      	mov	r2, r0
 800e672:	f240 2145 	movw	r1, #581	; 0x245
 800e676:	e7e5      	b.n	800e644 <__mdiff+0x28>
 800e678:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e67c:	6926      	ldr	r6, [r4, #16]
 800e67e:	60c5      	str	r5, [r0, #12]
 800e680:	f104 0914 	add.w	r9, r4, #20
 800e684:	f108 0514 	add.w	r5, r8, #20
 800e688:	f100 0e14 	add.w	lr, r0, #20
 800e68c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e690:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e694:	f108 0210 	add.w	r2, r8, #16
 800e698:	46f2      	mov	sl, lr
 800e69a:	2100      	movs	r1, #0
 800e69c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e6a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e6a4:	fa11 f88b 	uxtah	r8, r1, fp
 800e6a8:	b299      	uxth	r1, r3
 800e6aa:	0c1b      	lsrs	r3, r3, #16
 800e6ac:	eba8 0801 	sub.w	r8, r8, r1
 800e6b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e6b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e6b8:	fa1f f888 	uxth.w	r8, r8
 800e6bc:	1419      	asrs	r1, r3, #16
 800e6be:	454e      	cmp	r6, r9
 800e6c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e6c4:	f84a 3b04 	str.w	r3, [sl], #4
 800e6c8:	d8e8      	bhi.n	800e69c <__mdiff+0x80>
 800e6ca:	1b33      	subs	r3, r6, r4
 800e6cc:	3b15      	subs	r3, #21
 800e6ce:	f023 0303 	bic.w	r3, r3, #3
 800e6d2:	3304      	adds	r3, #4
 800e6d4:	3415      	adds	r4, #21
 800e6d6:	42a6      	cmp	r6, r4
 800e6d8:	bf38      	it	cc
 800e6da:	2304      	movcc	r3, #4
 800e6dc:	441d      	add	r5, r3
 800e6de:	4473      	add	r3, lr
 800e6e0:	469e      	mov	lr, r3
 800e6e2:	462e      	mov	r6, r5
 800e6e4:	4566      	cmp	r6, ip
 800e6e6:	d30e      	bcc.n	800e706 <__mdiff+0xea>
 800e6e8:	f10c 0203 	add.w	r2, ip, #3
 800e6ec:	1b52      	subs	r2, r2, r5
 800e6ee:	f022 0203 	bic.w	r2, r2, #3
 800e6f2:	3d03      	subs	r5, #3
 800e6f4:	45ac      	cmp	ip, r5
 800e6f6:	bf38      	it	cc
 800e6f8:	2200      	movcc	r2, #0
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e700:	b17a      	cbz	r2, 800e722 <__mdiff+0x106>
 800e702:	6107      	str	r7, [r0, #16]
 800e704:	e7a4      	b.n	800e650 <__mdiff+0x34>
 800e706:	f856 8b04 	ldr.w	r8, [r6], #4
 800e70a:	fa11 f288 	uxtah	r2, r1, r8
 800e70e:	1414      	asrs	r4, r2, #16
 800e710:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e714:	b292      	uxth	r2, r2
 800e716:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e71a:	f84e 2b04 	str.w	r2, [lr], #4
 800e71e:	1421      	asrs	r1, r4, #16
 800e720:	e7e0      	b.n	800e6e4 <__mdiff+0xc8>
 800e722:	3f01      	subs	r7, #1
 800e724:	e7ea      	b.n	800e6fc <__mdiff+0xe0>
 800e726:	bf00      	nop
 800e728:	0800f520 	.word	0x0800f520
 800e72c:	0800f531 	.word	0x0800f531

0800e730 <__d2b>:
 800e730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e734:	460f      	mov	r7, r1
 800e736:	2101      	movs	r1, #1
 800e738:	ec59 8b10 	vmov	r8, r9, d0
 800e73c:	4616      	mov	r6, r2
 800e73e:	f7ff fcd5 	bl	800e0ec <_Balloc>
 800e742:	4604      	mov	r4, r0
 800e744:	b930      	cbnz	r0, 800e754 <__d2b+0x24>
 800e746:	4602      	mov	r2, r0
 800e748:	4b24      	ldr	r3, [pc, #144]	; (800e7dc <__d2b+0xac>)
 800e74a:	4825      	ldr	r0, [pc, #148]	; (800e7e0 <__d2b+0xb0>)
 800e74c:	f240 310f 	movw	r1, #783	; 0x30f
 800e750:	f000 fa76 	bl	800ec40 <__assert_func>
 800e754:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e75c:	bb2d      	cbnz	r5, 800e7aa <__d2b+0x7a>
 800e75e:	9301      	str	r3, [sp, #4]
 800e760:	f1b8 0300 	subs.w	r3, r8, #0
 800e764:	d026      	beq.n	800e7b4 <__d2b+0x84>
 800e766:	4668      	mov	r0, sp
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	f7ff fd87 	bl	800e27c <__lo0bits>
 800e76e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e772:	b1e8      	cbz	r0, 800e7b0 <__d2b+0x80>
 800e774:	f1c0 0320 	rsb	r3, r0, #32
 800e778:	fa02 f303 	lsl.w	r3, r2, r3
 800e77c:	430b      	orrs	r3, r1
 800e77e:	40c2      	lsrs	r2, r0
 800e780:	6163      	str	r3, [r4, #20]
 800e782:	9201      	str	r2, [sp, #4]
 800e784:	9b01      	ldr	r3, [sp, #4]
 800e786:	61a3      	str	r3, [r4, #24]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	bf14      	ite	ne
 800e78c:	2202      	movne	r2, #2
 800e78e:	2201      	moveq	r2, #1
 800e790:	6122      	str	r2, [r4, #16]
 800e792:	b1bd      	cbz	r5, 800e7c4 <__d2b+0x94>
 800e794:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e798:	4405      	add	r5, r0
 800e79a:	603d      	str	r5, [r7, #0]
 800e79c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e7a0:	6030      	str	r0, [r6, #0]
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	b003      	add	sp, #12
 800e7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7ae:	e7d6      	b.n	800e75e <__d2b+0x2e>
 800e7b0:	6161      	str	r1, [r4, #20]
 800e7b2:	e7e7      	b.n	800e784 <__d2b+0x54>
 800e7b4:	a801      	add	r0, sp, #4
 800e7b6:	f7ff fd61 	bl	800e27c <__lo0bits>
 800e7ba:	9b01      	ldr	r3, [sp, #4]
 800e7bc:	6163      	str	r3, [r4, #20]
 800e7be:	3020      	adds	r0, #32
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	e7e5      	b.n	800e790 <__d2b+0x60>
 800e7c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7cc:	6038      	str	r0, [r7, #0]
 800e7ce:	6918      	ldr	r0, [r3, #16]
 800e7d0:	f7ff fd34 	bl	800e23c <__hi0bits>
 800e7d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7d8:	e7e2      	b.n	800e7a0 <__d2b+0x70>
 800e7da:	bf00      	nop
 800e7dc:	0800f520 	.word	0x0800f520
 800e7e0:	0800f531 	.word	0x0800f531

0800e7e4 <__ssputs_r>:
 800e7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e8:	688e      	ldr	r6, [r1, #8]
 800e7ea:	461f      	mov	r7, r3
 800e7ec:	42be      	cmp	r6, r7
 800e7ee:	680b      	ldr	r3, [r1, #0]
 800e7f0:	4682      	mov	sl, r0
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	4690      	mov	r8, r2
 800e7f6:	d82c      	bhi.n	800e852 <__ssputs_r+0x6e>
 800e7f8:	898a      	ldrh	r2, [r1, #12]
 800e7fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e7fe:	d026      	beq.n	800e84e <__ssputs_r+0x6a>
 800e800:	6965      	ldr	r5, [r4, #20]
 800e802:	6909      	ldr	r1, [r1, #16]
 800e804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e808:	eba3 0901 	sub.w	r9, r3, r1
 800e80c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e810:	1c7b      	adds	r3, r7, #1
 800e812:	444b      	add	r3, r9
 800e814:	106d      	asrs	r5, r5, #1
 800e816:	429d      	cmp	r5, r3
 800e818:	bf38      	it	cc
 800e81a:	461d      	movcc	r5, r3
 800e81c:	0553      	lsls	r3, r2, #21
 800e81e:	d527      	bpl.n	800e870 <__ssputs_r+0x8c>
 800e820:	4629      	mov	r1, r5
 800e822:	f7fd feb7 	bl	800c594 <_malloc_r>
 800e826:	4606      	mov	r6, r0
 800e828:	b360      	cbz	r0, 800e884 <__ssputs_r+0xa0>
 800e82a:	6921      	ldr	r1, [r4, #16]
 800e82c:	464a      	mov	r2, r9
 800e82e:	f000 f9f9 	bl	800ec24 <memcpy>
 800e832:	89a3      	ldrh	r3, [r4, #12]
 800e834:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e83c:	81a3      	strh	r3, [r4, #12]
 800e83e:	6126      	str	r6, [r4, #16]
 800e840:	6165      	str	r5, [r4, #20]
 800e842:	444e      	add	r6, r9
 800e844:	eba5 0509 	sub.w	r5, r5, r9
 800e848:	6026      	str	r6, [r4, #0]
 800e84a:	60a5      	str	r5, [r4, #8]
 800e84c:	463e      	mov	r6, r7
 800e84e:	42be      	cmp	r6, r7
 800e850:	d900      	bls.n	800e854 <__ssputs_r+0x70>
 800e852:	463e      	mov	r6, r7
 800e854:	6820      	ldr	r0, [r4, #0]
 800e856:	4632      	mov	r2, r6
 800e858:	4641      	mov	r1, r8
 800e85a:	f000 f9c9 	bl	800ebf0 <memmove>
 800e85e:	68a3      	ldr	r3, [r4, #8]
 800e860:	1b9b      	subs	r3, r3, r6
 800e862:	60a3      	str	r3, [r4, #8]
 800e864:	6823      	ldr	r3, [r4, #0]
 800e866:	4433      	add	r3, r6
 800e868:	6023      	str	r3, [r4, #0]
 800e86a:	2000      	movs	r0, #0
 800e86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e870:	462a      	mov	r2, r5
 800e872:	f000 fa2b 	bl	800eccc <_realloc_r>
 800e876:	4606      	mov	r6, r0
 800e878:	2800      	cmp	r0, #0
 800e87a:	d1e0      	bne.n	800e83e <__ssputs_r+0x5a>
 800e87c:	6921      	ldr	r1, [r4, #16]
 800e87e:	4650      	mov	r0, sl
 800e880:	f7ff fbe8 	bl	800e054 <_free_r>
 800e884:	230c      	movs	r3, #12
 800e886:	f8ca 3000 	str.w	r3, [sl]
 800e88a:	89a3      	ldrh	r3, [r4, #12]
 800e88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e890:	81a3      	strh	r3, [r4, #12]
 800e892:	f04f 30ff 	mov.w	r0, #4294967295
 800e896:	e7e9      	b.n	800e86c <__ssputs_r+0x88>

0800e898 <_svfiprintf_r>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	4698      	mov	r8, r3
 800e89e:	898b      	ldrh	r3, [r1, #12]
 800e8a0:	061b      	lsls	r3, r3, #24
 800e8a2:	b09d      	sub	sp, #116	; 0x74
 800e8a4:	4607      	mov	r7, r0
 800e8a6:	460d      	mov	r5, r1
 800e8a8:	4614      	mov	r4, r2
 800e8aa:	d50e      	bpl.n	800e8ca <_svfiprintf_r+0x32>
 800e8ac:	690b      	ldr	r3, [r1, #16]
 800e8ae:	b963      	cbnz	r3, 800e8ca <_svfiprintf_r+0x32>
 800e8b0:	2140      	movs	r1, #64	; 0x40
 800e8b2:	f7fd fe6f 	bl	800c594 <_malloc_r>
 800e8b6:	6028      	str	r0, [r5, #0]
 800e8b8:	6128      	str	r0, [r5, #16]
 800e8ba:	b920      	cbnz	r0, 800e8c6 <_svfiprintf_r+0x2e>
 800e8bc:	230c      	movs	r3, #12
 800e8be:	603b      	str	r3, [r7, #0]
 800e8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c4:	e0d0      	b.n	800ea68 <_svfiprintf_r+0x1d0>
 800e8c6:	2340      	movs	r3, #64	; 0x40
 800e8c8:	616b      	str	r3, [r5, #20]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e8ce:	2320      	movs	r3, #32
 800e8d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8d8:	2330      	movs	r3, #48	; 0x30
 800e8da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ea80 <_svfiprintf_r+0x1e8>
 800e8de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8e2:	f04f 0901 	mov.w	r9, #1
 800e8e6:	4623      	mov	r3, r4
 800e8e8:	469a      	mov	sl, r3
 800e8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8ee:	b10a      	cbz	r2, 800e8f4 <_svfiprintf_r+0x5c>
 800e8f0:	2a25      	cmp	r2, #37	; 0x25
 800e8f2:	d1f9      	bne.n	800e8e8 <_svfiprintf_r+0x50>
 800e8f4:	ebba 0b04 	subs.w	fp, sl, r4
 800e8f8:	d00b      	beq.n	800e912 <_svfiprintf_r+0x7a>
 800e8fa:	465b      	mov	r3, fp
 800e8fc:	4622      	mov	r2, r4
 800e8fe:	4629      	mov	r1, r5
 800e900:	4638      	mov	r0, r7
 800e902:	f7ff ff6f 	bl	800e7e4 <__ssputs_r>
 800e906:	3001      	adds	r0, #1
 800e908:	f000 80a9 	beq.w	800ea5e <_svfiprintf_r+0x1c6>
 800e90c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e90e:	445a      	add	r2, fp
 800e910:	9209      	str	r2, [sp, #36]	; 0x24
 800e912:	f89a 3000 	ldrb.w	r3, [sl]
 800e916:	2b00      	cmp	r3, #0
 800e918:	f000 80a1 	beq.w	800ea5e <_svfiprintf_r+0x1c6>
 800e91c:	2300      	movs	r3, #0
 800e91e:	f04f 32ff 	mov.w	r2, #4294967295
 800e922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e926:	f10a 0a01 	add.w	sl, sl, #1
 800e92a:	9304      	str	r3, [sp, #16]
 800e92c:	9307      	str	r3, [sp, #28]
 800e92e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e932:	931a      	str	r3, [sp, #104]	; 0x68
 800e934:	4654      	mov	r4, sl
 800e936:	2205      	movs	r2, #5
 800e938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e93c:	4850      	ldr	r0, [pc, #320]	; (800ea80 <_svfiprintf_r+0x1e8>)
 800e93e:	f7f1 fc47 	bl	80001d0 <memchr>
 800e942:	9a04      	ldr	r2, [sp, #16]
 800e944:	b9d8      	cbnz	r0, 800e97e <_svfiprintf_r+0xe6>
 800e946:	06d0      	lsls	r0, r2, #27
 800e948:	bf44      	itt	mi
 800e94a:	2320      	movmi	r3, #32
 800e94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e950:	0711      	lsls	r1, r2, #28
 800e952:	bf44      	itt	mi
 800e954:	232b      	movmi	r3, #43	; 0x2b
 800e956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e95a:	f89a 3000 	ldrb.w	r3, [sl]
 800e95e:	2b2a      	cmp	r3, #42	; 0x2a
 800e960:	d015      	beq.n	800e98e <_svfiprintf_r+0xf6>
 800e962:	9a07      	ldr	r2, [sp, #28]
 800e964:	4654      	mov	r4, sl
 800e966:	2000      	movs	r0, #0
 800e968:	f04f 0c0a 	mov.w	ip, #10
 800e96c:	4621      	mov	r1, r4
 800e96e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e972:	3b30      	subs	r3, #48	; 0x30
 800e974:	2b09      	cmp	r3, #9
 800e976:	d94d      	bls.n	800ea14 <_svfiprintf_r+0x17c>
 800e978:	b1b0      	cbz	r0, 800e9a8 <_svfiprintf_r+0x110>
 800e97a:	9207      	str	r2, [sp, #28]
 800e97c:	e014      	b.n	800e9a8 <_svfiprintf_r+0x110>
 800e97e:	eba0 0308 	sub.w	r3, r0, r8
 800e982:	fa09 f303 	lsl.w	r3, r9, r3
 800e986:	4313      	orrs	r3, r2
 800e988:	9304      	str	r3, [sp, #16]
 800e98a:	46a2      	mov	sl, r4
 800e98c:	e7d2      	b.n	800e934 <_svfiprintf_r+0x9c>
 800e98e:	9b03      	ldr	r3, [sp, #12]
 800e990:	1d19      	adds	r1, r3, #4
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	9103      	str	r1, [sp, #12]
 800e996:	2b00      	cmp	r3, #0
 800e998:	bfbb      	ittet	lt
 800e99a:	425b      	neglt	r3, r3
 800e99c:	f042 0202 	orrlt.w	r2, r2, #2
 800e9a0:	9307      	strge	r3, [sp, #28]
 800e9a2:	9307      	strlt	r3, [sp, #28]
 800e9a4:	bfb8      	it	lt
 800e9a6:	9204      	strlt	r2, [sp, #16]
 800e9a8:	7823      	ldrb	r3, [r4, #0]
 800e9aa:	2b2e      	cmp	r3, #46	; 0x2e
 800e9ac:	d10c      	bne.n	800e9c8 <_svfiprintf_r+0x130>
 800e9ae:	7863      	ldrb	r3, [r4, #1]
 800e9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800e9b2:	d134      	bne.n	800ea1e <_svfiprintf_r+0x186>
 800e9b4:	9b03      	ldr	r3, [sp, #12]
 800e9b6:	1d1a      	adds	r2, r3, #4
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	9203      	str	r2, [sp, #12]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	bfb8      	it	lt
 800e9c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9c4:	3402      	adds	r4, #2
 800e9c6:	9305      	str	r3, [sp, #20]
 800e9c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ea90 <_svfiprintf_r+0x1f8>
 800e9cc:	7821      	ldrb	r1, [r4, #0]
 800e9ce:	2203      	movs	r2, #3
 800e9d0:	4650      	mov	r0, sl
 800e9d2:	f7f1 fbfd 	bl	80001d0 <memchr>
 800e9d6:	b138      	cbz	r0, 800e9e8 <_svfiprintf_r+0x150>
 800e9d8:	9b04      	ldr	r3, [sp, #16]
 800e9da:	eba0 000a 	sub.w	r0, r0, sl
 800e9de:	2240      	movs	r2, #64	; 0x40
 800e9e0:	4082      	lsls	r2, r0
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	3401      	adds	r4, #1
 800e9e6:	9304      	str	r3, [sp, #16]
 800e9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9ec:	4825      	ldr	r0, [pc, #148]	; (800ea84 <_svfiprintf_r+0x1ec>)
 800e9ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9f2:	2206      	movs	r2, #6
 800e9f4:	f7f1 fbec 	bl	80001d0 <memchr>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d038      	beq.n	800ea6e <_svfiprintf_r+0x1d6>
 800e9fc:	4b22      	ldr	r3, [pc, #136]	; (800ea88 <_svfiprintf_r+0x1f0>)
 800e9fe:	bb1b      	cbnz	r3, 800ea48 <_svfiprintf_r+0x1b0>
 800ea00:	9b03      	ldr	r3, [sp, #12]
 800ea02:	3307      	adds	r3, #7
 800ea04:	f023 0307 	bic.w	r3, r3, #7
 800ea08:	3308      	adds	r3, #8
 800ea0a:	9303      	str	r3, [sp, #12]
 800ea0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea0e:	4433      	add	r3, r6
 800ea10:	9309      	str	r3, [sp, #36]	; 0x24
 800ea12:	e768      	b.n	800e8e6 <_svfiprintf_r+0x4e>
 800ea14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea18:	460c      	mov	r4, r1
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	e7a6      	b.n	800e96c <_svfiprintf_r+0xd4>
 800ea1e:	2300      	movs	r3, #0
 800ea20:	3401      	adds	r4, #1
 800ea22:	9305      	str	r3, [sp, #20]
 800ea24:	4619      	mov	r1, r3
 800ea26:	f04f 0c0a 	mov.w	ip, #10
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea30:	3a30      	subs	r2, #48	; 0x30
 800ea32:	2a09      	cmp	r2, #9
 800ea34:	d903      	bls.n	800ea3e <_svfiprintf_r+0x1a6>
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d0c6      	beq.n	800e9c8 <_svfiprintf_r+0x130>
 800ea3a:	9105      	str	r1, [sp, #20]
 800ea3c:	e7c4      	b.n	800e9c8 <_svfiprintf_r+0x130>
 800ea3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea42:	4604      	mov	r4, r0
 800ea44:	2301      	movs	r3, #1
 800ea46:	e7f0      	b.n	800ea2a <_svfiprintf_r+0x192>
 800ea48:	ab03      	add	r3, sp, #12
 800ea4a:	9300      	str	r3, [sp, #0]
 800ea4c:	462a      	mov	r2, r5
 800ea4e:	4b0f      	ldr	r3, [pc, #60]	; (800ea8c <_svfiprintf_r+0x1f4>)
 800ea50:	a904      	add	r1, sp, #16
 800ea52:	4638      	mov	r0, r7
 800ea54:	f7fd feca 	bl	800c7ec <_printf_float>
 800ea58:	1c42      	adds	r2, r0, #1
 800ea5a:	4606      	mov	r6, r0
 800ea5c:	d1d6      	bne.n	800ea0c <_svfiprintf_r+0x174>
 800ea5e:	89ab      	ldrh	r3, [r5, #12]
 800ea60:	065b      	lsls	r3, r3, #25
 800ea62:	f53f af2d 	bmi.w	800e8c0 <_svfiprintf_r+0x28>
 800ea66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea68:	b01d      	add	sp, #116	; 0x74
 800ea6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea6e:	ab03      	add	r3, sp, #12
 800ea70:	9300      	str	r3, [sp, #0]
 800ea72:	462a      	mov	r2, r5
 800ea74:	4b05      	ldr	r3, [pc, #20]	; (800ea8c <_svfiprintf_r+0x1f4>)
 800ea76:	a904      	add	r1, sp, #16
 800ea78:	4638      	mov	r0, r7
 800ea7a:	f7fe f95b 	bl	800cd34 <_printf_i>
 800ea7e:	e7eb      	b.n	800ea58 <_svfiprintf_r+0x1c0>
 800ea80:	0800f68c 	.word	0x0800f68c
 800ea84:	0800f696 	.word	0x0800f696
 800ea88:	0800c7ed 	.word	0x0800c7ed
 800ea8c:	0800e7e5 	.word	0x0800e7e5
 800ea90:	0800f692 	.word	0x0800f692

0800ea94 <__sflush_r>:
 800ea94:	898a      	ldrh	r2, [r1, #12]
 800ea96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	0710      	lsls	r0, r2, #28
 800ea9e:	460c      	mov	r4, r1
 800eaa0:	d458      	bmi.n	800eb54 <__sflush_r+0xc0>
 800eaa2:	684b      	ldr	r3, [r1, #4]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	dc05      	bgt.n	800eab4 <__sflush_r+0x20>
 800eaa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	dc02      	bgt.n	800eab4 <__sflush_r+0x20>
 800eaae:	2000      	movs	r0, #0
 800eab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eab6:	2e00      	cmp	r6, #0
 800eab8:	d0f9      	beq.n	800eaae <__sflush_r+0x1a>
 800eaba:	2300      	movs	r3, #0
 800eabc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eac0:	682f      	ldr	r7, [r5, #0]
 800eac2:	6a21      	ldr	r1, [r4, #32]
 800eac4:	602b      	str	r3, [r5, #0]
 800eac6:	d032      	beq.n	800eb2e <__sflush_r+0x9a>
 800eac8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eaca:	89a3      	ldrh	r3, [r4, #12]
 800eacc:	075a      	lsls	r2, r3, #29
 800eace:	d505      	bpl.n	800eadc <__sflush_r+0x48>
 800ead0:	6863      	ldr	r3, [r4, #4]
 800ead2:	1ac0      	subs	r0, r0, r3
 800ead4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ead6:	b10b      	cbz	r3, 800eadc <__sflush_r+0x48>
 800ead8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eada:	1ac0      	subs	r0, r0, r3
 800eadc:	2300      	movs	r3, #0
 800eade:	4602      	mov	r2, r0
 800eae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eae2:	6a21      	ldr	r1, [r4, #32]
 800eae4:	4628      	mov	r0, r5
 800eae6:	47b0      	blx	r6
 800eae8:	1c43      	adds	r3, r0, #1
 800eaea:	89a3      	ldrh	r3, [r4, #12]
 800eaec:	d106      	bne.n	800eafc <__sflush_r+0x68>
 800eaee:	6829      	ldr	r1, [r5, #0]
 800eaf0:	291d      	cmp	r1, #29
 800eaf2:	d82b      	bhi.n	800eb4c <__sflush_r+0xb8>
 800eaf4:	4a29      	ldr	r2, [pc, #164]	; (800eb9c <__sflush_r+0x108>)
 800eaf6:	410a      	asrs	r2, r1
 800eaf8:	07d6      	lsls	r6, r2, #31
 800eafa:	d427      	bmi.n	800eb4c <__sflush_r+0xb8>
 800eafc:	2200      	movs	r2, #0
 800eafe:	6062      	str	r2, [r4, #4]
 800eb00:	04d9      	lsls	r1, r3, #19
 800eb02:	6922      	ldr	r2, [r4, #16]
 800eb04:	6022      	str	r2, [r4, #0]
 800eb06:	d504      	bpl.n	800eb12 <__sflush_r+0x7e>
 800eb08:	1c42      	adds	r2, r0, #1
 800eb0a:	d101      	bne.n	800eb10 <__sflush_r+0x7c>
 800eb0c:	682b      	ldr	r3, [r5, #0]
 800eb0e:	b903      	cbnz	r3, 800eb12 <__sflush_r+0x7e>
 800eb10:	6560      	str	r0, [r4, #84]	; 0x54
 800eb12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb14:	602f      	str	r7, [r5, #0]
 800eb16:	2900      	cmp	r1, #0
 800eb18:	d0c9      	beq.n	800eaae <__sflush_r+0x1a>
 800eb1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb1e:	4299      	cmp	r1, r3
 800eb20:	d002      	beq.n	800eb28 <__sflush_r+0x94>
 800eb22:	4628      	mov	r0, r5
 800eb24:	f7ff fa96 	bl	800e054 <_free_r>
 800eb28:	2000      	movs	r0, #0
 800eb2a:	6360      	str	r0, [r4, #52]	; 0x34
 800eb2c:	e7c0      	b.n	800eab0 <__sflush_r+0x1c>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	4628      	mov	r0, r5
 800eb32:	47b0      	blx	r6
 800eb34:	1c41      	adds	r1, r0, #1
 800eb36:	d1c8      	bne.n	800eaca <__sflush_r+0x36>
 800eb38:	682b      	ldr	r3, [r5, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d0c5      	beq.n	800eaca <__sflush_r+0x36>
 800eb3e:	2b1d      	cmp	r3, #29
 800eb40:	d001      	beq.n	800eb46 <__sflush_r+0xb2>
 800eb42:	2b16      	cmp	r3, #22
 800eb44:	d101      	bne.n	800eb4a <__sflush_r+0xb6>
 800eb46:	602f      	str	r7, [r5, #0]
 800eb48:	e7b1      	b.n	800eaae <__sflush_r+0x1a>
 800eb4a:	89a3      	ldrh	r3, [r4, #12]
 800eb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb50:	81a3      	strh	r3, [r4, #12]
 800eb52:	e7ad      	b.n	800eab0 <__sflush_r+0x1c>
 800eb54:	690f      	ldr	r7, [r1, #16]
 800eb56:	2f00      	cmp	r7, #0
 800eb58:	d0a9      	beq.n	800eaae <__sflush_r+0x1a>
 800eb5a:	0793      	lsls	r3, r2, #30
 800eb5c:	680e      	ldr	r6, [r1, #0]
 800eb5e:	bf08      	it	eq
 800eb60:	694b      	ldreq	r3, [r1, #20]
 800eb62:	600f      	str	r7, [r1, #0]
 800eb64:	bf18      	it	ne
 800eb66:	2300      	movne	r3, #0
 800eb68:	eba6 0807 	sub.w	r8, r6, r7
 800eb6c:	608b      	str	r3, [r1, #8]
 800eb6e:	f1b8 0f00 	cmp.w	r8, #0
 800eb72:	dd9c      	ble.n	800eaae <__sflush_r+0x1a>
 800eb74:	6a21      	ldr	r1, [r4, #32]
 800eb76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb78:	4643      	mov	r3, r8
 800eb7a:	463a      	mov	r2, r7
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	47b0      	blx	r6
 800eb80:	2800      	cmp	r0, #0
 800eb82:	dc06      	bgt.n	800eb92 <__sflush_r+0xfe>
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb8a:	81a3      	strh	r3, [r4, #12]
 800eb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb90:	e78e      	b.n	800eab0 <__sflush_r+0x1c>
 800eb92:	4407      	add	r7, r0
 800eb94:	eba8 0800 	sub.w	r8, r8, r0
 800eb98:	e7e9      	b.n	800eb6e <__sflush_r+0xda>
 800eb9a:	bf00      	nop
 800eb9c:	dfbffffe 	.word	0xdfbffffe

0800eba0 <_fflush_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	690b      	ldr	r3, [r1, #16]
 800eba4:	4605      	mov	r5, r0
 800eba6:	460c      	mov	r4, r1
 800eba8:	b913      	cbnz	r3, 800ebb0 <_fflush_r+0x10>
 800ebaa:	2500      	movs	r5, #0
 800ebac:	4628      	mov	r0, r5
 800ebae:	bd38      	pop	{r3, r4, r5, pc}
 800ebb0:	b118      	cbz	r0, 800ebba <_fflush_r+0x1a>
 800ebb2:	6a03      	ldr	r3, [r0, #32]
 800ebb4:	b90b      	cbnz	r3, 800ebba <_fflush_r+0x1a>
 800ebb6:	f7fe fa6b 	bl	800d090 <__sinit>
 800ebba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d0f3      	beq.n	800ebaa <_fflush_r+0xa>
 800ebc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ebc4:	07d0      	lsls	r0, r2, #31
 800ebc6:	d404      	bmi.n	800ebd2 <_fflush_r+0x32>
 800ebc8:	0599      	lsls	r1, r3, #22
 800ebca:	d402      	bmi.n	800ebd2 <_fflush_r+0x32>
 800ebcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebce:	f7fe fbba 	bl	800d346 <__retarget_lock_acquire_recursive>
 800ebd2:	4628      	mov	r0, r5
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	f7ff ff5d 	bl	800ea94 <__sflush_r>
 800ebda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebdc:	07da      	lsls	r2, r3, #31
 800ebde:	4605      	mov	r5, r0
 800ebe0:	d4e4      	bmi.n	800ebac <_fflush_r+0xc>
 800ebe2:	89a3      	ldrh	r3, [r4, #12]
 800ebe4:	059b      	lsls	r3, r3, #22
 800ebe6:	d4e1      	bmi.n	800ebac <_fflush_r+0xc>
 800ebe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebea:	f7fe fbad 	bl	800d348 <__retarget_lock_release_recursive>
 800ebee:	e7dd      	b.n	800ebac <_fflush_r+0xc>

0800ebf0 <memmove>:
 800ebf0:	4288      	cmp	r0, r1
 800ebf2:	b510      	push	{r4, lr}
 800ebf4:	eb01 0402 	add.w	r4, r1, r2
 800ebf8:	d902      	bls.n	800ec00 <memmove+0x10>
 800ebfa:	4284      	cmp	r4, r0
 800ebfc:	4623      	mov	r3, r4
 800ebfe:	d807      	bhi.n	800ec10 <memmove+0x20>
 800ec00:	1e43      	subs	r3, r0, #1
 800ec02:	42a1      	cmp	r1, r4
 800ec04:	d008      	beq.n	800ec18 <memmove+0x28>
 800ec06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec0e:	e7f8      	b.n	800ec02 <memmove+0x12>
 800ec10:	4402      	add	r2, r0
 800ec12:	4601      	mov	r1, r0
 800ec14:	428a      	cmp	r2, r1
 800ec16:	d100      	bne.n	800ec1a <memmove+0x2a>
 800ec18:	bd10      	pop	{r4, pc}
 800ec1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec22:	e7f7      	b.n	800ec14 <memmove+0x24>

0800ec24 <memcpy>:
 800ec24:	440a      	add	r2, r1
 800ec26:	4291      	cmp	r1, r2
 800ec28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec2c:	d100      	bne.n	800ec30 <memcpy+0xc>
 800ec2e:	4770      	bx	lr
 800ec30:	b510      	push	{r4, lr}
 800ec32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec3a:	4291      	cmp	r1, r2
 800ec3c:	d1f9      	bne.n	800ec32 <memcpy+0xe>
 800ec3e:	bd10      	pop	{r4, pc}

0800ec40 <__assert_func>:
 800ec40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec42:	4614      	mov	r4, r2
 800ec44:	461a      	mov	r2, r3
 800ec46:	4b09      	ldr	r3, [pc, #36]	; (800ec6c <__assert_func+0x2c>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4605      	mov	r5, r0
 800ec4c:	68d8      	ldr	r0, [r3, #12]
 800ec4e:	b14c      	cbz	r4, 800ec64 <__assert_func+0x24>
 800ec50:	4b07      	ldr	r3, [pc, #28]	; (800ec70 <__assert_func+0x30>)
 800ec52:	9100      	str	r1, [sp, #0]
 800ec54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec58:	4906      	ldr	r1, [pc, #24]	; (800ec74 <__assert_func+0x34>)
 800ec5a:	462b      	mov	r3, r5
 800ec5c:	f000 f872 	bl	800ed44 <fiprintf>
 800ec60:	f000 f882 	bl	800ed68 <abort>
 800ec64:	4b04      	ldr	r3, [pc, #16]	; (800ec78 <__assert_func+0x38>)
 800ec66:	461c      	mov	r4, r3
 800ec68:	e7f3      	b.n	800ec52 <__assert_func+0x12>
 800ec6a:	bf00      	nop
 800ec6c:	20000084 	.word	0x20000084
 800ec70:	0800f6a7 	.word	0x0800f6a7
 800ec74:	0800f6b4 	.word	0x0800f6b4
 800ec78:	0800f6e2 	.word	0x0800f6e2

0800ec7c <_calloc_r>:
 800ec7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec7e:	fba1 2402 	umull	r2, r4, r1, r2
 800ec82:	b94c      	cbnz	r4, 800ec98 <_calloc_r+0x1c>
 800ec84:	4611      	mov	r1, r2
 800ec86:	9201      	str	r2, [sp, #4]
 800ec88:	f7fd fc84 	bl	800c594 <_malloc_r>
 800ec8c:	9a01      	ldr	r2, [sp, #4]
 800ec8e:	4605      	mov	r5, r0
 800ec90:	b930      	cbnz	r0, 800eca0 <_calloc_r+0x24>
 800ec92:	4628      	mov	r0, r5
 800ec94:	b003      	add	sp, #12
 800ec96:	bd30      	pop	{r4, r5, pc}
 800ec98:	220c      	movs	r2, #12
 800ec9a:	6002      	str	r2, [r0, #0]
 800ec9c:	2500      	movs	r5, #0
 800ec9e:	e7f8      	b.n	800ec92 <_calloc_r+0x16>
 800eca0:	4621      	mov	r1, r4
 800eca2:	f7fe fac2 	bl	800d22a <memset>
 800eca6:	e7f4      	b.n	800ec92 <_calloc_r+0x16>

0800eca8 <__ascii_mbtowc>:
 800eca8:	b082      	sub	sp, #8
 800ecaa:	b901      	cbnz	r1, 800ecae <__ascii_mbtowc+0x6>
 800ecac:	a901      	add	r1, sp, #4
 800ecae:	b142      	cbz	r2, 800ecc2 <__ascii_mbtowc+0x1a>
 800ecb0:	b14b      	cbz	r3, 800ecc6 <__ascii_mbtowc+0x1e>
 800ecb2:	7813      	ldrb	r3, [r2, #0]
 800ecb4:	600b      	str	r3, [r1, #0]
 800ecb6:	7812      	ldrb	r2, [r2, #0]
 800ecb8:	1e10      	subs	r0, r2, #0
 800ecba:	bf18      	it	ne
 800ecbc:	2001      	movne	r0, #1
 800ecbe:	b002      	add	sp, #8
 800ecc0:	4770      	bx	lr
 800ecc2:	4610      	mov	r0, r2
 800ecc4:	e7fb      	b.n	800ecbe <__ascii_mbtowc+0x16>
 800ecc6:	f06f 0001 	mvn.w	r0, #1
 800ecca:	e7f8      	b.n	800ecbe <__ascii_mbtowc+0x16>

0800eccc <_realloc_r>:
 800eccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd0:	4680      	mov	r8, r0
 800ecd2:	4614      	mov	r4, r2
 800ecd4:	460e      	mov	r6, r1
 800ecd6:	b921      	cbnz	r1, 800ece2 <_realloc_r+0x16>
 800ecd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecdc:	4611      	mov	r1, r2
 800ecde:	f7fd bc59 	b.w	800c594 <_malloc_r>
 800ece2:	b92a      	cbnz	r2, 800ecf0 <_realloc_r+0x24>
 800ece4:	f7ff f9b6 	bl	800e054 <_free_r>
 800ece8:	4625      	mov	r5, r4
 800ecea:	4628      	mov	r0, r5
 800ecec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf0:	f000 f841 	bl	800ed76 <_malloc_usable_size_r>
 800ecf4:	4284      	cmp	r4, r0
 800ecf6:	4607      	mov	r7, r0
 800ecf8:	d802      	bhi.n	800ed00 <_realloc_r+0x34>
 800ecfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ecfe:	d812      	bhi.n	800ed26 <_realloc_r+0x5a>
 800ed00:	4621      	mov	r1, r4
 800ed02:	4640      	mov	r0, r8
 800ed04:	f7fd fc46 	bl	800c594 <_malloc_r>
 800ed08:	4605      	mov	r5, r0
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	d0ed      	beq.n	800ecea <_realloc_r+0x1e>
 800ed0e:	42bc      	cmp	r4, r7
 800ed10:	4622      	mov	r2, r4
 800ed12:	4631      	mov	r1, r6
 800ed14:	bf28      	it	cs
 800ed16:	463a      	movcs	r2, r7
 800ed18:	f7ff ff84 	bl	800ec24 <memcpy>
 800ed1c:	4631      	mov	r1, r6
 800ed1e:	4640      	mov	r0, r8
 800ed20:	f7ff f998 	bl	800e054 <_free_r>
 800ed24:	e7e1      	b.n	800ecea <_realloc_r+0x1e>
 800ed26:	4635      	mov	r5, r6
 800ed28:	e7df      	b.n	800ecea <_realloc_r+0x1e>

0800ed2a <__ascii_wctomb>:
 800ed2a:	b149      	cbz	r1, 800ed40 <__ascii_wctomb+0x16>
 800ed2c:	2aff      	cmp	r2, #255	; 0xff
 800ed2e:	bf85      	ittet	hi
 800ed30:	238a      	movhi	r3, #138	; 0x8a
 800ed32:	6003      	strhi	r3, [r0, #0]
 800ed34:	700a      	strbls	r2, [r1, #0]
 800ed36:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed3a:	bf98      	it	ls
 800ed3c:	2001      	movls	r0, #1
 800ed3e:	4770      	bx	lr
 800ed40:	4608      	mov	r0, r1
 800ed42:	4770      	bx	lr

0800ed44 <fiprintf>:
 800ed44:	b40e      	push	{r1, r2, r3}
 800ed46:	b503      	push	{r0, r1, lr}
 800ed48:	4601      	mov	r1, r0
 800ed4a:	ab03      	add	r3, sp, #12
 800ed4c:	4805      	ldr	r0, [pc, #20]	; (800ed64 <fiprintf+0x20>)
 800ed4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed52:	6800      	ldr	r0, [r0, #0]
 800ed54:	9301      	str	r3, [sp, #4]
 800ed56:	f000 f83f 	bl	800edd8 <_vfiprintf_r>
 800ed5a:	b002      	add	sp, #8
 800ed5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed60:	b003      	add	sp, #12
 800ed62:	4770      	bx	lr
 800ed64:	20000084 	.word	0x20000084

0800ed68 <abort>:
 800ed68:	b508      	push	{r3, lr}
 800ed6a:	2006      	movs	r0, #6
 800ed6c:	f000 fa0c 	bl	800f188 <raise>
 800ed70:	2001      	movs	r0, #1
 800ed72:	f7f3 fbd7 	bl	8002524 <_exit>

0800ed76 <_malloc_usable_size_r>:
 800ed76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed7a:	1f18      	subs	r0, r3, #4
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	bfbc      	itt	lt
 800ed80:	580b      	ldrlt	r3, [r1, r0]
 800ed82:	18c0      	addlt	r0, r0, r3
 800ed84:	4770      	bx	lr

0800ed86 <__sfputc_r>:
 800ed86:	6893      	ldr	r3, [r2, #8]
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	b410      	push	{r4}
 800ed8e:	6093      	str	r3, [r2, #8]
 800ed90:	da08      	bge.n	800eda4 <__sfputc_r+0x1e>
 800ed92:	6994      	ldr	r4, [r2, #24]
 800ed94:	42a3      	cmp	r3, r4
 800ed96:	db01      	blt.n	800ed9c <__sfputc_r+0x16>
 800ed98:	290a      	cmp	r1, #10
 800ed9a:	d103      	bne.n	800eda4 <__sfputc_r+0x1e>
 800ed9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda0:	f000 b934 	b.w	800f00c <__swbuf_r>
 800eda4:	6813      	ldr	r3, [r2, #0]
 800eda6:	1c58      	adds	r0, r3, #1
 800eda8:	6010      	str	r0, [r2, #0]
 800edaa:	7019      	strb	r1, [r3, #0]
 800edac:	4608      	mov	r0, r1
 800edae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <__sfputs_r>:
 800edb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb6:	4606      	mov	r6, r0
 800edb8:	460f      	mov	r7, r1
 800edba:	4614      	mov	r4, r2
 800edbc:	18d5      	adds	r5, r2, r3
 800edbe:	42ac      	cmp	r4, r5
 800edc0:	d101      	bne.n	800edc6 <__sfputs_r+0x12>
 800edc2:	2000      	movs	r0, #0
 800edc4:	e007      	b.n	800edd6 <__sfputs_r+0x22>
 800edc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edca:	463a      	mov	r2, r7
 800edcc:	4630      	mov	r0, r6
 800edce:	f7ff ffda 	bl	800ed86 <__sfputc_r>
 800edd2:	1c43      	adds	r3, r0, #1
 800edd4:	d1f3      	bne.n	800edbe <__sfputs_r+0xa>
 800edd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edd8 <_vfiprintf_r>:
 800edd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eddc:	460d      	mov	r5, r1
 800edde:	b09d      	sub	sp, #116	; 0x74
 800ede0:	4614      	mov	r4, r2
 800ede2:	4698      	mov	r8, r3
 800ede4:	4606      	mov	r6, r0
 800ede6:	b118      	cbz	r0, 800edf0 <_vfiprintf_r+0x18>
 800ede8:	6a03      	ldr	r3, [r0, #32]
 800edea:	b90b      	cbnz	r3, 800edf0 <_vfiprintf_r+0x18>
 800edec:	f7fe f950 	bl	800d090 <__sinit>
 800edf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edf2:	07d9      	lsls	r1, r3, #31
 800edf4:	d405      	bmi.n	800ee02 <_vfiprintf_r+0x2a>
 800edf6:	89ab      	ldrh	r3, [r5, #12]
 800edf8:	059a      	lsls	r2, r3, #22
 800edfa:	d402      	bmi.n	800ee02 <_vfiprintf_r+0x2a>
 800edfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edfe:	f7fe faa2 	bl	800d346 <__retarget_lock_acquire_recursive>
 800ee02:	89ab      	ldrh	r3, [r5, #12]
 800ee04:	071b      	lsls	r3, r3, #28
 800ee06:	d501      	bpl.n	800ee0c <_vfiprintf_r+0x34>
 800ee08:	692b      	ldr	r3, [r5, #16]
 800ee0a:	b99b      	cbnz	r3, 800ee34 <_vfiprintf_r+0x5c>
 800ee0c:	4629      	mov	r1, r5
 800ee0e:	4630      	mov	r0, r6
 800ee10:	f000 f93a 	bl	800f088 <__swsetup_r>
 800ee14:	b170      	cbz	r0, 800ee34 <_vfiprintf_r+0x5c>
 800ee16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee18:	07dc      	lsls	r4, r3, #31
 800ee1a:	d504      	bpl.n	800ee26 <_vfiprintf_r+0x4e>
 800ee1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee20:	b01d      	add	sp, #116	; 0x74
 800ee22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee26:	89ab      	ldrh	r3, [r5, #12]
 800ee28:	0598      	lsls	r0, r3, #22
 800ee2a:	d4f7      	bmi.n	800ee1c <_vfiprintf_r+0x44>
 800ee2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee2e:	f7fe fa8b 	bl	800d348 <__retarget_lock_release_recursive>
 800ee32:	e7f3      	b.n	800ee1c <_vfiprintf_r+0x44>
 800ee34:	2300      	movs	r3, #0
 800ee36:	9309      	str	r3, [sp, #36]	; 0x24
 800ee38:	2320      	movs	r3, #32
 800ee3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee42:	2330      	movs	r3, #48	; 0x30
 800ee44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800eff8 <_vfiprintf_r+0x220>
 800ee48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee4c:	f04f 0901 	mov.w	r9, #1
 800ee50:	4623      	mov	r3, r4
 800ee52:	469a      	mov	sl, r3
 800ee54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee58:	b10a      	cbz	r2, 800ee5e <_vfiprintf_r+0x86>
 800ee5a:	2a25      	cmp	r2, #37	; 0x25
 800ee5c:	d1f9      	bne.n	800ee52 <_vfiprintf_r+0x7a>
 800ee5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ee62:	d00b      	beq.n	800ee7c <_vfiprintf_r+0xa4>
 800ee64:	465b      	mov	r3, fp
 800ee66:	4622      	mov	r2, r4
 800ee68:	4629      	mov	r1, r5
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	f7ff ffa2 	bl	800edb4 <__sfputs_r>
 800ee70:	3001      	adds	r0, #1
 800ee72:	f000 80a9 	beq.w	800efc8 <_vfiprintf_r+0x1f0>
 800ee76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee78:	445a      	add	r2, fp
 800ee7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ee7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 80a1 	beq.w	800efc8 <_vfiprintf_r+0x1f0>
 800ee86:	2300      	movs	r3, #0
 800ee88:	f04f 32ff 	mov.w	r2, #4294967295
 800ee8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee90:	f10a 0a01 	add.w	sl, sl, #1
 800ee94:	9304      	str	r3, [sp, #16]
 800ee96:	9307      	str	r3, [sp, #28]
 800ee98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ee9e:	4654      	mov	r4, sl
 800eea0:	2205      	movs	r2, #5
 800eea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eea6:	4854      	ldr	r0, [pc, #336]	; (800eff8 <_vfiprintf_r+0x220>)
 800eea8:	f7f1 f992 	bl	80001d0 <memchr>
 800eeac:	9a04      	ldr	r2, [sp, #16]
 800eeae:	b9d8      	cbnz	r0, 800eee8 <_vfiprintf_r+0x110>
 800eeb0:	06d1      	lsls	r1, r2, #27
 800eeb2:	bf44      	itt	mi
 800eeb4:	2320      	movmi	r3, #32
 800eeb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eeba:	0713      	lsls	r3, r2, #28
 800eebc:	bf44      	itt	mi
 800eebe:	232b      	movmi	r3, #43	; 0x2b
 800eec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eec4:	f89a 3000 	ldrb.w	r3, [sl]
 800eec8:	2b2a      	cmp	r3, #42	; 0x2a
 800eeca:	d015      	beq.n	800eef8 <_vfiprintf_r+0x120>
 800eecc:	9a07      	ldr	r2, [sp, #28]
 800eece:	4654      	mov	r4, sl
 800eed0:	2000      	movs	r0, #0
 800eed2:	f04f 0c0a 	mov.w	ip, #10
 800eed6:	4621      	mov	r1, r4
 800eed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eedc:	3b30      	subs	r3, #48	; 0x30
 800eede:	2b09      	cmp	r3, #9
 800eee0:	d94d      	bls.n	800ef7e <_vfiprintf_r+0x1a6>
 800eee2:	b1b0      	cbz	r0, 800ef12 <_vfiprintf_r+0x13a>
 800eee4:	9207      	str	r2, [sp, #28]
 800eee6:	e014      	b.n	800ef12 <_vfiprintf_r+0x13a>
 800eee8:	eba0 0308 	sub.w	r3, r0, r8
 800eeec:	fa09 f303 	lsl.w	r3, r9, r3
 800eef0:	4313      	orrs	r3, r2
 800eef2:	9304      	str	r3, [sp, #16]
 800eef4:	46a2      	mov	sl, r4
 800eef6:	e7d2      	b.n	800ee9e <_vfiprintf_r+0xc6>
 800eef8:	9b03      	ldr	r3, [sp, #12]
 800eefa:	1d19      	adds	r1, r3, #4
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	9103      	str	r1, [sp, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	bfbb      	ittet	lt
 800ef04:	425b      	neglt	r3, r3
 800ef06:	f042 0202 	orrlt.w	r2, r2, #2
 800ef0a:	9307      	strge	r3, [sp, #28]
 800ef0c:	9307      	strlt	r3, [sp, #28]
 800ef0e:	bfb8      	it	lt
 800ef10:	9204      	strlt	r2, [sp, #16]
 800ef12:	7823      	ldrb	r3, [r4, #0]
 800ef14:	2b2e      	cmp	r3, #46	; 0x2e
 800ef16:	d10c      	bne.n	800ef32 <_vfiprintf_r+0x15a>
 800ef18:	7863      	ldrb	r3, [r4, #1]
 800ef1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef1c:	d134      	bne.n	800ef88 <_vfiprintf_r+0x1b0>
 800ef1e:	9b03      	ldr	r3, [sp, #12]
 800ef20:	1d1a      	adds	r2, r3, #4
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	9203      	str	r2, [sp, #12]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	bfb8      	it	lt
 800ef2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef2e:	3402      	adds	r4, #2
 800ef30:	9305      	str	r3, [sp, #20]
 800ef32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f008 <_vfiprintf_r+0x230>
 800ef36:	7821      	ldrb	r1, [r4, #0]
 800ef38:	2203      	movs	r2, #3
 800ef3a:	4650      	mov	r0, sl
 800ef3c:	f7f1 f948 	bl	80001d0 <memchr>
 800ef40:	b138      	cbz	r0, 800ef52 <_vfiprintf_r+0x17a>
 800ef42:	9b04      	ldr	r3, [sp, #16]
 800ef44:	eba0 000a 	sub.w	r0, r0, sl
 800ef48:	2240      	movs	r2, #64	; 0x40
 800ef4a:	4082      	lsls	r2, r0
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	3401      	adds	r4, #1
 800ef50:	9304      	str	r3, [sp, #16]
 800ef52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef56:	4829      	ldr	r0, [pc, #164]	; (800effc <_vfiprintf_r+0x224>)
 800ef58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef5c:	2206      	movs	r2, #6
 800ef5e:	f7f1 f937 	bl	80001d0 <memchr>
 800ef62:	2800      	cmp	r0, #0
 800ef64:	d03f      	beq.n	800efe6 <_vfiprintf_r+0x20e>
 800ef66:	4b26      	ldr	r3, [pc, #152]	; (800f000 <_vfiprintf_r+0x228>)
 800ef68:	bb1b      	cbnz	r3, 800efb2 <_vfiprintf_r+0x1da>
 800ef6a:	9b03      	ldr	r3, [sp, #12]
 800ef6c:	3307      	adds	r3, #7
 800ef6e:	f023 0307 	bic.w	r3, r3, #7
 800ef72:	3308      	adds	r3, #8
 800ef74:	9303      	str	r3, [sp, #12]
 800ef76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef78:	443b      	add	r3, r7
 800ef7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef7c:	e768      	b.n	800ee50 <_vfiprintf_r+0x78>
 800ef7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef82:	460c      	mov	r4, r1
 800ef84:	2001      	movs	r0, #1
 800ef86:	e7a6      	b.n	800eed6 <_vfiprintf_r+0xfe>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	3401      	adds	r4, #1
 800ef8c:	9305      	str	r3, [sp, #20]
 800ef8e:	4619      	mov	r1, r3
 800ef90:	f04f 0c0a 	mov.w	ip, #10
 800ef94:	4620      	mov	r0, r4
 800ef96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef9a:	3a30      	subs	r2, #48	; 0x30
 800ef9c:	2a09      	cmp	r2, #9
 800ef9e:	d903      	bls.n	800efa8 <_vfiprintf_r+0x1d0>
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d0c6      	beq.n	800ef32 <_vfiprintf_r+0x15a>
 800efa4:	9105      	str	r1, [sp, #20]
 800efa6:	e7c4      	b.n	800ef32 <_vfiprintf_r+0x15a>
 800efa8:	fb0c 2101 	mla	r1, ip, r1, r2
 800efac:	4604      	mov	r4, r0
 800efae:	2301      	movs	r3, #1
 800efb0:	e7f0      	b.n	800ef94 <_vfiprintf_r+0x1bc>
 800efb2:	ab03      	add	r3, sp, #12
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	462a      	mov	r2, r5
 800efb8:	4b12      	ldr	r3, [pc, #72]	; (800f004 <_vfiprintf_r+0x22c>)
 800efba:	a904      	add	r1, sp, #16
 800efbc:	4630      	mov	r0, r6
 800efbe:	f7fd fc15 	bl	800c7ec <_printf_float>
 800efc2:	4607      	mov	r7, r0
 800efc4:	1c78      	adds	r0, r7, #1
 800efc6:	d1d6      	bne.n	800ef76 <_vfiprintf_r+0x19e>
 800efc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efca:	07d9      	lsls	r1, r3, #31
 800efcc:	d405      	bmi.n	800efda <_vfiprintf_r+0x202>
 800efce:	89ab      	ldrh	r3, [r5, #12]
 800efd0:	059a      	lsls	r2, r3, #22
 800efd2:	d402      	bmi.n	800efda <_vfiprintf_r+0x202>
 800efd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efd6:	f7fe f9b7 	bl	800d348 <__retarget_lock_release_recursive>
 800efda:	89ab      	ldrh	r3, [r5, #12]
 800efdc:	065b      	lsls	r3, r3, #25
 800efde:	f53f af1d 	bmi.w	800ee1c <_vfiprintf_r+0x44>
 800efe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efe4:	e71c      	b.n	800ee20 <_vfiprintf_r+0x48>
 800efe6:	ab03      	add	r3, sp, #12
 800efe8:	9300      	str	r3, [sp, #0]
 800efea:	462a      	mov	r2, r5
 800efec:	4b05      	ldr	r3, [pc, #20]	; (800f004 <_vfiprintf_r+0x22c>)
 800efee:	a904      	add	r1, sp, #16
 800eff0:	4630      	mov	r0, r6
 800eff2:	f7fd fe9f 	bl	800cd34 <_printf_i>
 800eff6:	e7e4      	b.n	800efc2 <_vfiprintf_r+0x1ea>
 800eff8:	0800f68c 	.word	0x0800f68c
 800effc:	0800f696 	.word	0x0800f696
 800f000:	0800c7ed 	.word	0x0800c7ed
 800f004:	0800edb5 	.word	0x0800edb5
 800f008:	0800f692 	.word	0x0800f692

0800f00c <__swbuf_r>:
 800f00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f00e:	460e      	mov	r6, r1
 800f010:	4614      	mov	r4, r2
 800f012:	4605      	mov	r5, r0
 800f014:	b118      	cbz	r0, 800f01e <__swbuf_r+0x12>
 800f016:	6a03      	ldr	r3, [r0, #32]
 800f018:	b90b      	cbnz	r3, 800f01e <__swbuf_r+0x12>
 800f01a:	f7fe f839 	bl	800d090 <__sinit>
 800f01e:	69a3      	ldr	r3, [r4, #24]
 800f020:	60a3      	str	r3, [r4, #8]
 800f022:	89a3      	ldrh	r3, [r4, #12]
 800f024:	071a      	lsls	r2, r3, #28
 800f026:	d525      	bpl.n	800f074 <__swbuf_r+0x68>
 800f028:	6923      	ldr	r3, [r4, #16]
 800f02a:	b31b      	cbz	r3, 800f074 <__swbuf_r+0x68>
 800f02c:	6823      	ldr	r3, [r4, #0]
 800f02e:	6922      	ldr	r2, [r4, #16]
 800f030:	1a98      	subs	r0, r3, r2
 800f032:	6963      	ldr	r3, [r4, #20]
 800f034:	b2f6      	uxtb	r6, r6
 800f036:	4283      	cmp	r3, r0
 800f038:	4637      	mov	r7, r6
 800f03a:	dc04      	bgt.n	800f046 <__swbuf_r+0x3a>
 800f03c:	4621      	mov	r1, r4
 800f03e:	4628      	mov	r0, r5
 800f040:	f7ff fdae 	bl	800eba0 <_fflush_r>
 800f044:	b9e0      	cbnz	r0, 800f080 <__swbuf_r+0x74>
 800f046:	68a3      	ldr	r3, [r4, #8]
 800f048:	3b01      	subs	r3, #1
 800f04a:	60a3      	str	r3, [r4, #8]
 800f04c:	6823      	ldr	r3, [r4, #0]
 800f04e:	1c5a      	adds	r2, r3, #1
 800f050:	6022      	str	r2, [r4, #0]
 800f052:	701e      	strb	r6, [r3, #0]
 800f054:	6962      	ldr	r2, [r4, #20]
 800f056:	1c43      	adds	r3, r0, #1
 800f058:	429a      	cmp	r2, r3
 800f05a:	d004      	beq.n	800f066 <__swbuf_r+0x5a>
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	07db      	lsls	r3, r3, #31
 800f060:	d506      	bpl.n	800f070 <__swbuf_r+0x64>
 800f062:	2e0a      	cmp	r6, #10
 800f064:	d104      	bne.n	800f070 <__swbuf_r+0x64>
 800f066:	4621      	mov	r1, r4
 800f068:	4628      	mov	r0, r5
 800f06a:	f7ff fd99 	bl	800eba0 <_fflush_r>
 800f06e:	b938      	cbnz	r0, 800f080 <__swbuf_r+0x74>
 800f070:	4638      	mov	r0, r7
 800f072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f074:	4621      	mov	r1, r4
 800f076:	4628      	mov	r0, r5
 800f078:	f000 f806 	bl	800f088 <__swsetup_r>
 800f07c:	2800      	cmp	r0, #0
 800f07e:	d0d5      	beq.n	800f02c <__swbuf_r+0x20>
 800f080:	f04f 37ff 	mov.w	r7, #4294967295
 800f084:	e7f4      	b.n	800f070 <__swbuf_r+0x64>
	...

0800f088 <__swsetup_r>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4b2a      	ldr	r3, [pc, #168]	; (800f134 <__swsetup_r+0xac>)
 800f08c:	4605      	mov	r5, r0
 800f08e:	6818      	ldr	r0, [r3, #0]
 800f090:	460c      	mov	r4, r1
 800f092:	b118      	cbz	r0, 800f09c <__swsetup_r+0x14>
 800f094:	6a03      	ldr	r3, [r0, #32]
 800f096:	b90b      	cbnz	r3, 800f09c <__swsetup_r+0x14>
 800f098:	f7fd fffa 	bl	800d090 <__sinit>
 800f09c:	89a3      	ldrh	r3, [r4, #12]
 800f09e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0a2:	0718      	lsls	r0, r3, #28
 800f0a4:	d422      	bmi.n	800f0ec <__swsetup_r+0x64>
 800f0a6:	06d9      	lsls	r1, r3, #27
 800f0a8:	d407      	bmi.n	800f0ba <__swsetup_r+0x32>
 800f0aa:	2309      	movs	r3, #9
 800f0ac:	602b      	str	r3, [r5, #0]
 800f0ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f0b2:	81a3      	strh	r3, [r4, #12]
 800f0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b8:	e034      	b.n	800f124 <__swsetup_r+0x9c>
 800f0ba:	0758      	lsls	r0, r3, #29
 800f0bc:	d512      	bpl.n	800f0e4 <__swsetup_r+0x5c>
 800f0be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0c0:	b141      	cbz	r1, 800f0d4 <__swsetup_r+0x4c>
 800f0c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0c6:	4299      	cmp	r1, r3
 800f0c8:	d002      	beq.n	800f0d0 <__swsetup_r+0x48>
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	f7fe ffc2 	bl	800e054 <_free_r>
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	6363      	str	r3, [r4, #52]	; 0x34
 800f0d4:	89a3      	ldrh	r3, [r4, #12]
 800f0d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f0da:	81a3      	strh	r3, [r4, #12]
 800f0dc:	2300      	movs	r3, #0
 800f0de:	6063      	str	r3, [r4, #4]
 800f0e0:	6923      	ldr	r3, [r4, #16]
 800f0e2:	6023      	str	r3, [r4, #0]
 800f0e4:	89a3      	ldrh	r3, [r4, #12]
 800f0e6:	f043 0308 	orr.w	r3, r3, #8
 800f0ea:	81a3      	strh	r3, [r4, #12]
 800f0ec:	6923      	ldr	r3, [r4, #16]
 800f0ee:	b94b      	cbnz	r3, 800f104 <__swsetup_r+0x7c>
 800f0f0:	89a3      	ldrh	r3, [r4, #12]
 800f0f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0fa:	d003      	beq.n	800f104 <__swsetup_r+0x7c>
 800f0fc:	4621      	mov	r1, r4
 800f0fe:	4628      	mov	r0, r5
 800f100:	f000 f884 	bl	800f20c <__smakebuf_r>
 800f104:	89a0      	ldrh	r0, [r4, #12]
 800f106:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f10a:	f010 0301 	ands.w	r3, r0, #1
 800f10e:	d00a      	beq.n	800f126 <__swsetup_r+0x9e>
 800f110:	2300      	movs	r3, #0
 800f112:	60a3      	str	r3, [r4, #8]
 800f114:	6963      	ldr	r3, [r4, #20]
 800f116:	425b      	negs	r3, r3
 800f118:	61a3      	str	r3, [r4, #24]
 800f11a:	6923      	ldr	r3, [r4, #16]
 800f11c:	b943      	cbnz	r3, 800f130 <__swsetup_r+0xa8>
 800f11e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f122:	d1c4      	bne.n	800f0ae <__swsetup_r+0x26>
 800f124:	bd38      	pop	{r3, r4, r5, pc}
 800f126:	0781      	lsls	r1, r0, #30
 800f128:	bf58      	it	pl
 800f12a:	6963      	ldrpl	r3, [r4, #20]
 800f12c:	60a3      	str	r3, [r4, #8]
 800f12e:	e7f4      	b.n	800f11a <__swsetup_r+0x92>
 800f130:	2000      	movs	r0, #0
 800f132:	e7f7      	b.n	800f124 <__swsetup_r+0x9c>
 800f134:	20000084 	.word	0x20000084

0800f138 <_raise_r>:
 800f138:	291f      	cmp	r1, #31
 800f13a:	b538      	push	{r3, r4, r5, lr}
 800f13c:	4604      	mov	r4, r0
 800f13e:	460d      	mov	r5, r1
 800f140:	d904      	bls.n	800f14c <_raise_r+0x14>
 800f142:	2316      	movs	r3, #22
 800f144:	6003      	str	r3, [r0, #0]
 800f146:	f04f 30ff 	mov.w	r0, #4294967295
 800f14a:	bd38      	pop	{r3, r4, r5, pc}
 800f14c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f14e:	b112      	cbz	r2, 800f156 <_raise_r+0x1e>
 800f150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f154:	b94b      	cbnz	r3, 800f16a <_raise_r+0x32>
 800f156:	4620      	mov	r0, r4
 800f158:	f000 f830 	bl	800f1bc <_getpid_r>
 800f15c:	462a      	mov	r2, r5
 800f15e:	4601      	mov	r1, r0
 800f160:	4620      	mov	r0, r4
 800f162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f166:	f000 b817 	b.w	800f198 <_kill_r>
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d00a      	beq.n	800f184 <_raise_r+0x4c>
 800f16e:	1c59      	adds	r1, r3, #1
 800f170:	d103      	bne.n	800f17a <_raise_r+0x42>
 800f172:	2316      	movs	r3, #22
 800f174:	6003      	str	r3, [r0, #0]
 800f176:	2001      	movs	r0, #1
 800f178:	e7e7      	b.n	800f14a <_raise_r+0x12>
 800f17a:	2400      	movs	r4, #0
 800f17c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f180:	4628      	mov	r0, r5
 800f182:	4798      	blx	r3
 800f184:	2000      	movs	r0, #0
 800f186:	e7e0      	b.n	800f14a <_raise_r+0x12>

0800f188 <raise>:
 800f188:	4b02      	ldr	r3, [pc, #8]	; (800f194 <raise+0xc>)
 800f18a:	4601      	mov	r1, r0
 800f18c:	6818      	ldr	r0, [r3, #0]
 800f18e:	f7ff bfd3 	b.w	800f138 <_raise_r>
 800f192:	bf00      	nop
 800f194:	20000084 	.word	0x20000084

0800f198 <_kill_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4d07      	ldr	r5, [pc, #28]	; (800f1b8 <_kill_r+0x20>)
 800f19c:	2300      	movs	r3, #0
 800f19e:	4604      	mov	r4, r0
 800f1a0:	4608      	mov	r0, r1
 800f1a2:	4611      	mov	r1, r2
 800f1a4:	602b      	str	r3, [r5, #0]
 800f1a6:	f7f3 f9ad 	bl	8002504 <_kill>
 800f1aa:	1c43      	adds	r3, r0, #1
 800f1ac:	d102      	bne.n	800f1b4 <_kill_r+0x1c>
 800f1ae:	682b      	ldr	r3, [r5, #0]
 800f1b0:	b103      	cbz	r3, 800f1b4 <_kill_r+0x1c>
 800f1b2:	6023      	str	r3, [r4, #0]
 800f1b4:	bd38      	pop	{r3, r4, r5, pc}
 800f1b6:	bf00      	nop
 800f1b8:	20000ee4 	.word	0x20000ee4

0800f1bc <_getpid_r>:
 800f1bc:	f7f3 b99a 	b.w	80024f4 <_getpid>

0800f1c0 <__swhatbuf_r>:
 800f1c0:	b570      	push	{r4, r5, r6, lr}
 800f1c2:	460c      	mov	r4, r1
 800f1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1c8:	2900      	cmp	r1, #0
 800f1ca:	b096      	sub	sp, #88	; 0x58
 800f1cc:	4615      	mov	r5, r2
 800f1ce:	461e      	mov	r6, r3
 800f1d0:	da0d      	bge.n	800f1ee <__swhatbuf_r+0x2e>
 800f1d2:	89a3      	ldrh	r3, [r4, #12]
 800f1d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f1d8:	f04f 0100 	mov.w	r1, #0
 800f1dc:	bf0c      	ite	eq
 800f1de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f1e2:	2340      	movne	r3, #64	; 0x40
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	6031      	str	r1, [r6, #0]
 800f1e8:	602b      	str	r3, [r5, #0]
 800f1ea:	b016      	add	sp, #88	; 0x58
 800f1ec:	bd70      	pop	{r4, r5, r6, pc}
 800f1ee:	466a      	mov	r2, sp
 800f1f0:	f000 f848 	bl	800f284 <_fstat_r>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	dbec      	blt.n	800f1d2 <__swhatbuf_r+0x12>
 800f1f8:	9901      	ldr	r1, [sp, #4]
 800f1fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f1fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f202:	4259      	negs	r1, r3
 800f204:	4159      	adcs	r1, r3
 800f206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f20a:	e7eb      	b.n	800f1e4 <__swhatbuf_r+0x24>

0800f20c <__smakebuf_r>:
 800f20c:	898b      	ldrh	r3, [r1, #12]
 800f20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f210:	079d      	lsls	r5, r3, #30
 800f212:	4606      	mov	r6, r0
 800f214:	460c      	mov	r4, r1
 800f216:	d507      	bpl.n	800f228 <__smakebuf_r+0x1c>
 800f218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f21c:	6023      	str	r3, [r4, #0]
 800f21e:	6123      	str	r3, [r4, #16]
 800f220:	2301      	movs	r3, #1
 800f222:	6163      	str	r3, [r4, #20]
 800f224:	b002      	add	sp, #8
 800f226:	bd70      	pop	{r4, r5, r6, pc}
 800f228:	ab01      	add	r3, sp, #4
 800f22a:	466a      	mov	r2, sp
 800f22c:	f7ff ffc8 	bl	800f1c0 <__swhatbuf_r>
 800f230:	9900      	ldr	r1, [sp, #0]
 800f232:	4605      	mov	r5, r0
 800f234:	4630      	mov	r0, r6
 800f236:	f7fd f9ad 	bl	800c594 <_malloc_r>
 800f23a:	b948      	cbnz	r0, 800f250 <__smakebuf_r+0x44>
 800f23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f240:	059a      	lsls	r2, r3, #22
 800f242:	d4ef      	bmi.n	800f224 <__smakebuf_r+0x18>
 800f244:	f023 0303 	bic.w	r3, r3, #3
 800f248:	f043 0302 	orr.w	r3, r3, #2
 800f24c:	81a3      	strh	r3, [r4, #12]
 800f24e:	e7e3      	b.n	800f218 <__smakebuf_r+0xc>
 800f250:	89a3      	ldrh	r3, [r4, #12]
 800f252:	6020      	str	r0, [r4, #0]
 800f254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f258:	81a3      	strh	r3, [r4, #12]
 800f25a:	9b00      	ldr	r3, [sp, #0]
 800f25c:	6163      	str	r3, [r4, #20]
 800f25e:	9b01      	ldr	r3, [sp, #4]
 800f260:	6120      	str	r0, [r4, #16]
 800f262:	b15b      	cbz	r3, 800f27c <__smakebuf_r+0x70>
 800f264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f268:	4630      	mov	r0, r6
 800f26a:	f000 f81d 	bl	800f2a8 <_isatty_r>
 800f26e:	b128      	cbz	r0, 800f27c <__smakebuf_r+0x70>
 800f270:	89a3      	ldrh	r3, [r4, #12]
 800f272:	f023 0303 	bic.w	r3, r3, #3
 800f276:	f043 0301 	orr.w	r3, r3, #1
 800f27a:	81a3      	strh	r3, [r4, #12]
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	431d      	orrs	r5, r3
 800f280:	81a5      	strh	r5, [r4, #12]
 800f282:	e7cf      	b.n	800f224 <__smakebuf_r+0x18>

0800f284 <_fstat_r>:
 800f284:	b538      	push	{r3, r4, r5, lr}
 800f286:	4d07      	ldr	r5, [pc, #28]	; (800f2a4 <_fstat_r+0x20>)
 800f288:	2300      	movs	r3, #0
 800f28a:	4604      	mov	r4, r0
 800f28c:	4608      	mov	r0, r1
 800f28e:	4611      	mov	r1, r2
 800f290:	602b      	str	r3, [r5, #0]
 800f292:	f7f3 f996 	bl	80025c2 <_fstat>
 800f296:	1c43      	adds	r3, r0, #1
 800f298:	d102      	bne.n	800f2a0 <_fstat_r+0x1c>
 800f29a:	682b      	ldr	r3, [r5, #0]
 800f29c:	b103      	cbz	r3, 800f2a0 <_fstat_r+0x1c>
 800f29e:	6023      	str	r3, [r4, #0]
 800f2a0:	bd38      	pop	{r3, r4, r5, pc}
 800f2a2:	bf00      	nop
 800f2a4:	20000ee4 	.word	0x20000ee4

0800f2a8 <_isatty_r>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4d06      	ldr	r5, [pc, #24]	; (800f2c4 <_isatty_r+0x1c>)
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	4608      	mov	r0, r1
 800f2b2:	602b      	str	r3, [r5, #0]
 800f2b4:	f7f3 f995 	bl	80025e2 <_isatty>
 800f2b8:	1c43      	adds	r3, r0, #1
 800f2ba:	d102      	bne.n	800f2c2 <_isatty_r+0x1a>
 800f2bc:	682b      	ldr	r3, [r5, #0]
 800f2be:	b103      	cbz	r3, 800f2c2 <_isatty_r+0x1a>
 800f2c0:	6023      	str	r3, [r4, #0]
 800f2c2:	bd38      	pop	{r3, r4, r5, pc}
 800f2c4:	20000ee4 	.word	0x20000ee4

0800f2c8 <_init>:
 800f2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ca:	bf00      	nop
 800f2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ce:	bc08      	pop	{r3}
 800f2d0:	469e      	mov	lr, r3
 800f2d2:	4770      	bx	lr

0800f2d4 <_fini>:
 800f2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d6:	bf00      	nop
 800f2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2da:	bc08      	pop	{r3}
 800f2dc:	469e      	mov	lr, r3
 800f2de:	4770      	bx	lr
