
h7_handheld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d848  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800d9d8  0800d9d8  0001d9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de4c  0800de4c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800de4c  0800de4c  0001de4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de54  0800de54  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de54  0800de54  0001de54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de58  0800de58  0001de58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800de5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000b0c  200001f8  200001f8  000201f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000d04  20000d04  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a0f1  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040c6  00000000  00000000  0003a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014e0  00000000  00000000  0003e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000101c  00000000  00000000  0003f900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025133  00000000  00000000  0004091c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c92f  00000000  00000000  00065a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfe8c  00000000  00000000  0008237e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006964  00000000  00000000  0015220c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00158b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d9c0 	.word	0x0800d9c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800d9c0 	.word	0x0800d9c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_SPI_RxCpltCallback>:
//        HAL_SPI_Receive_IT(&hspi1, rx_data1, 1);
//    }
//}

// This function is called when the SPI receives data
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b09c      	sub	sp, #112	; 0x70
 8000ea8:	af04      	add	r7, sp, #16
 8000eaa:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a28      	ldr	r2, [pc, #160]	; (8000f54 <HAL_SPI_RxCpltCallback+0xb0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d14a      	bne.n	8000f4c <HAL_SPI_RxCpltCallback+0xa8>
        // String to store the output for debugging
        char debugOutput[PACKET_SIZE * 3 + 1]; // Each byte could use up to 3 characters in text (2 hex digits and a space) + null terminator
        int offset = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	65fb      	str	r3, [r7, #92]	; 0x5c

        // Convert the received data to hexadecimal string for UART transmission
        for (int i = 0; i < PACKET_SIZE; i++) {
 8000eba:	2300      	movs	r3, #0
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ebe:	e017      	b.n	8000ef0 <HAL_SPI_RxCpltCallback+0x4c>
            offset += snprintf(debugOutput + offset, sizeof(debugOutput) - offset, "%02X ", rx_data1[i]);
 8000ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ec2:	f107 0208 	add.w	r2, r7, #8
 8000ec6:	18d0      	adds	r0, r2, r3
 8000ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eca:	f1c3 0149 	rsb	r1, r3, #73	; 0x49
 8000ece:	4a22      	ldr	r2, [pc, #136]	; (8000f58 <HAL_SPI_RxCpltCallback+0xb4>)
 8000ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <HAL_SPI_RxCpltCallback+0xb8>)
 8000ed8:	f00a fc96 	bl	800b808 <sniprintf>
 8000edc:	4602      	mov	r2, r0
 8000ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ee0:	4413      	add	r3, r2
 8000ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (offset >= sizeof(debugOutput)) break; // Safety check to prevent buffer overflow
 8000ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ee6:	2b48      	cmp	r3, #72	; 0x48
 8000ee8:	d806      	bhi.n	8000ef8 <HAL_SPI_RxCpltCallback+0x54>
        for (int i = 0; i < PACKET_SIZE; i++) {
 8000eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eec:	3301      	adds	r3, #1
 8000eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ef2:	2b17      	cmp	r3, #23
 8000ef4:	d9e4      	bls.n	8000ec0 <HAL_SPI_RxCpltCallback+0x1c>
 8000ef6:	e000      	b.n	8000efa <HAL_SPI_RxCpltCallback+0x56>
            if (offset >= sizeof(debugOutput)) break; // Safety check to prevent buffer overflow
 8000ef8:	bf00      	nop
        }

        // Transmit the formatted string over UART3
        HAL_UART_Transmit(&huart3, (uint8_t*)debugOutput, strlen(debugOutput), 100);
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff f9b6 	bl	8000270 <strlen>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f107 0108 	add.w	r1, r7, #8
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	4814      	ldr	r0, [pc, #80]	; (8000f60 <HAL_SPI_RxCpltCallback+0xbc>)
 8000f10:	f006 fa70 	bl	80073f4 <HAL_UART_Transmit>

        // Now, process each byte of the received packet through the FSM
        for (int i = 0; i < PACKET_SIZE; i++) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
 8000f18:	e010      	b.n	8000f3c <HAL_SPI_RxCpltCallback+0x98>
            // Pass each byte of the packet to the FSM
        	processSPIData(hspi, &sensorData1, &rx_data1[i], &uartState1, &timestampBuffer1, &dataBuffer1, &dataIndex1);
 8000f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_SPI_RxCpltCallback+0xb4>)
 8000f1e:	441a      	add	r2, r3
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_SPI_RxCpltCallback+0xc0>)
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_SPI_RxCpltCallback+0xc4>)
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_SPI_RxCpltCallback+0xc8>)
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_SPI_RxCpltCallback+0xcc>)
 8000f2e:	4911      	ldr	r1, [pc, #68]	; (8000f74 <HAL_SPI_RxCpltCallback+0xd0>)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f831 	bl	8000f98 <processSPIData>
        for (int i = 0; i < PACKET_SIZE; i++) {
 8000f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f38:	3301      	adds	r3, #1
 8000f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8000f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f3e:	2b17      	cmp	r3, #23
 8000f40:	d9eb      	bls.n	8000f1a <HAL_SPI_RxCpltCallback+0x76>
        }

        // Ready to receive the next packet
        HAL_SPI_Receive_DMA(hspi, rx_data1, PACKET_SIZE);
 8000f42:	2218      	movs	r2, #24
 8000f44:	4904      	ldr	r1, [pc, #16]	; (8000f58 <HAL_SPI_RxCpltCallback+0xb4>)
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f005 fd06 	bl	8006958 <HAL_SPI_Receive_DMA>
    }
}
 8000f4c:	bf00      	nop
 8000f4e:	3760      	adds	r7, #96	; 0x60
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40013000 	.word	0x40013000
 8000f58:	200003b0 	.word	0x200003b0
 8000f5c:	0800d9d8 	.word	0x0800d9d8
 8000f60:	20000368 	.word	0x20000368
 8000f64:	200003f0 	.word	0x200003f0
 8000f68:	200003e8 	.word	0x200003e8
 8000f6c:	200003e4 	.word	0x200003e4
 8000f70:	200003e0 	.word	0x200003e0
 8000f74:	200003c8 	.word	0x200003c8

08000f78 <HAL_SPI_ErrorCallback>:

// This function is called in case of an error on SPI
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    // Handle your error here
    // After handling the error, re-arm the SPI receive interrupt
	HAL_SPI_Receive_DMA(hspi, rx_data1, PACKET_SIZE);
 8000f80:	2218      	movs	r2, #24
 8000f82:	4904      	ldr	r1, [pc, #16]	; (8000f94 <HAL_SPI_ErrorCallback+0x1c>)
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f005 fce7 	bl	8006958 <HAL_SPI_Receive_DMA>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200003b0 	.word	0x200003b0

08000f98 <processSPIData>:


void processSPIData(SPI_HandleTypeDef *SPI, SensorDataPacket *sensorData, uint8_t *rxData,
                     UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer, uint32_t *dataIndex) {    // Your existing switch case logic here, adapted for the specific sensorData and rx_data
 8000f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f9c:	b089      	sub	sp, #36	; 0x24
 8000f9e:	af02      	add	r7, sp, #8
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	603b      	str	r3, [r7, #0]
    // This function needs to be adapted from your existing HAL_UART_RxCpltCallback logic
	uint8_t rxByte = *rxData; // The received byte
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	75fb      	strb	r3, [r7, #23]
//    sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
    switch (*uartState) {
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	f200 80c7 	bhi.w	8001146 <processSPIData+0x1ae>
 8000fb8:	a201      	add	r2, pc, #4	; (adr r2, 8000fc0 <processSPIData+0x28>)
 8000fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbe:	bf00      	nop
 8000fc0:	08000fe1 	.word	0x08000fe1
 8000fc4:	08000ff7 	.word	0x08000ff7
 8000fc8:	08001005 	.word	0x08001005
 8000fcc:	08001019 	.word	0x08001019
 8000fd0:	0800105f 	.word	0x0800105f
 8000fd4:	080010d9 	.word	0x080010d9
 8000fd8:	080010ed 	.word	0x080010ed
 8000fdc:	0800111d 	.word	0x0800111d
        case UART_WAIT_FOR_SOP: // SOP Case
            if (rxByte == 0x53) { // SOP byte = 0x53 ('S')
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	2b53      	cmp	r3, #83	; 0x53
 8000fe4:	f040 80a6 	bne.w	8001134 <processSPIData+0x19c>
            	sensorData->sop = rxByte; // Set the sop
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	7dfa      	ldrb	r2, [r7, #23]
 8000fec:	701a      	strb	r2, [r3, #0]
            	*uartState = UART_DATATYPE;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
//            	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            }
            break;
 8000ff4:	e09e      	b.n	8001134 <processSPIData+0x19c>
        case UART_DATATYPE: // Data type Case
        	sensorData->datatype = rxByte; // Set th		e data type (Temp = 00, Humidity = 01, Sound = 10, Vibration = 11)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	7dfa      	ldrb	r2, [r7, #23]
 8000ffa:	705a      	strb	r2, [r3, #1]
            *uartState = UART_SENSOR_ID; // Next parameter
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2202      	movs	r2, #2
 8001000:	701a      	strb	r2, [r3, #0]
            break;
 8001002:	e0a0      	b.n	8001146 <processSPIData+0x1ae>

        case UART_SENSOR_ID: // Sensor ID Case
        	sensorData->sensorId = rxByte; // Set the sensor ID (000, 001, 010, 011, 100, 101, 110, 111 (i.e. Sensor 1-8)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	7dfa      	ldrb	r2, [r7, #23]
 8001008:	709a      	strb	r2, [r3, #2]
        	*dataIndex = 0; // Reset dataIndex for the next field
 800100a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
            *uartState = UART_TIMESTAMP; // Next parameter
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	2203      	movs	r2, #3
 8001014:	701a      	strb	r2, [r3, #0]
//            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 8001016:	e096      	b.n	8001146 <processSPIData+0x1ae>

        case UART_TIMESTAMP: // Timestamp Case
            // Combine byte into timestamp assuming little endian - least significant byte first
//            	timestampBuffer |= ((uint32_t)rxByte << (24 - (dataIndex * 8)));
        	*timestampBuffer |= ((uint32_t)rxByte << ((*dataIndex-1) * 8));
 8001018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	7df9      	ldrb	r1, [r7, #23]
 800101e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3b01      	subs	r3, #1
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	431a      	orrs	r2, r3
 800102c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800102e:	601a      	str	r2, [r3, #0]
//            	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
//            	sprintf(buffer, "Timestamp partial: 0x%08lX\r\n", timestampBuffer);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 8001030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001038:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->timestamp)) {
 800103a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d97a      	bls.n	8001138 <processSPIData+0x1a0>
                sensorData->timestamp = *timestampBuffer; // Assign the complete timestamp
 8001042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	605a      	str	r2, [r3, #4]
                *dataIndex = 0; // Reset dataIndex for the data field
 800104a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
                *timestampBuffer = 0; // Clear the buffer for the next use
 8001050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
                *uartState = UART_DATA; // Move to the next state
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2204      	movs	r2, #4
 800105a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800105c:	e06c      	b.n	8001138 <processSPIData+0x1a0>

        case UART_DATA: // Data Case
            // Combine byte into data assuming little endian - least significant byte first
        	*dataBuffer |= ((uint64_t)rxByte << ((*dataIndex-1) * 8));//            	sprintf(buffer, "Data partial: 0x%016llx\r\n", dataBuffer);
 800105e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	2200      	movs	r2, #0
 8001068:	4698      	mov	r8, r3
 800106a:	4691      	mov	r9, r2
 800106c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3b01      	subs	r3, #1
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	f1a3 0620 	sub.w	r6, r3, #32
 8001078:	f1c3 0220 	rsb	r2, r3, #32
 800107c:	fa09 f503 	lsl.w	r5, r9, r3
 8001080:	fa08 f606 	lsl.w	r6, r8, r6
 8001084:	4335      	orrs	r5, r6
 8001086:	fa28 f202 	lsr.w	r2, r8, r2
 800108a:	4315      	orrs	r5, r2
 800108c:	fa08 f403 	lsl.w	r4, r8, r3
 8001090:	ea40 0a04 	orr.w	sl, r0, r4
 8001094:	ea41 0b05 	orr.w	fp, r1, r5
 8001098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800109a:	e9c3 ab00 	strd	sl, fp, [r3]
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 800109e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010a6:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->data)) {
 80010a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b07      	cmp	r3, #7
 80010ae:	d945      	bls.n	800113c <processSPIData+0x1a4>
                sensorData->data = *dataBuffer; // Assign the complete data
 80010b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
                *dataIndex = 0; // Reset dataIndex for the CRC field
 80010bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
                *dataBuffer = 0; // Clear the buffer for the next use
 80010c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c1 2300 	strd	r2, r3, [r1]
                *uartState = UART_CRC; // Move to the next state
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2205      	movs	r2, #5
 80010d4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80010d6:	e031      	b.n	800113c <processSPIData+0x1a4>

        case UART_CRC: // CRC Case
        	if(rxByte != 0){
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d030      	beq.n	8001140 <processSPIData+0x1a8>
                sensorData->crc = rxByte; // Set the CRC value based on algorithm
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	7dfa      	ldrb	r2, [r7, #23]
 80010e2:	741a      	strb	r2, [r3, #16]
                *uartState = UART_EOP; // Next parameter
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2206      	movs	r2, #6
 80010e8:	701a      	strb	r2, [r3, #0]
        	}
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 80010ea:	e029      	b.n	8001140 <processSPIData+0x1a8>

        case UART_EOP:
            if (rxByte == 0x45) { // EOP byte = 0x45 ('E')
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	2b45      	cmp	r3, #69	; 0x45
 80010f0:	d111      	bne.n	8001116 <processSPIData+0x17e>
                *uartState = UART_DONE; // Packet reception is complete
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2207      	movs	r2, #7
 80010f6:	701a      	strb	r2, [r3, #0]
                sensorData->eop = rxByte; // Set the eop
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	7dfa      	ldrb	r2, [r7, #23]
 80010fc:	745a      	strb	r2, [r3, #17]
                if(SPI->Instance == SPI1){
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a16      	ldr	r2, [pc, #88]	; (800115c <processSPIData+0x1c4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d11d      	bne.n	8001144 <processSPIData+0x1ac>
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Red LED set when packet is complete
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <processSPIData+0x1c8>)
 8001110:	f001 fec2 	bl	8002e98 <HAL_GPIO_WritePin>
//                    uartState = UART_DONE; // Packet reception is complete
//                    sensorData.eop = rxByte; // Set the eop
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
            }
            break;
 8001114:	e016      	b.n	8001144 <processSPIData+0x1ac>
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
            break;
 800111a:	e013      	b.n	8001144 <processSPIData+0x1ac>
//        	if(test_five == 5){
//        		printData(sensorData); // Process the data
//        		test_five = 0;
//        	}
//        	printRawData(sensorData);
    		printData(sensorData); // Process the data
 800111c:	68b8      	ldr	r0, [r7, #8]
 800111e:	f000 f859 	bl	80011d4 <printData>
//        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
        	resetUartState(uartState, timestampBuffer, dataBuffer, dataIndex, rxData);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800112a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f000 f819 	bl	8001164 <resetUartState>
            break;
 8001132:	e008      	b.n	8001146 <processSPIData+0x1ae>
            break;
 8001134:	bf00      	nop
 8001136:	e006      	b.n	8001146 <processSPIData+0x1ae>
            break;
 8001138:	bf00      	nop
 800113a:	e004      	b.n	8001146 <processSPIData+0x1ae>
            break;
 800113c:	bf00      	nop
 800113e:	e002      	b.n	8001146 <processSPIData+0x1ae>
            break;
 8001140:	bf00      	nop
 8001142:	e000      	b.n	8001146 <processSPIData+0x1ae>
            break;
 8001144:	bf00      	nop
    }
    // Ready to receive the next byte
    HAL_SPI_Receive_DMA(SPI, rxData, 1);
 8001146:	2201      	movs	r2, #1
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f005 fc04 	bl	8006958 <HAL_SPI_Receive_DMA>
}
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800115a:	bf00      	nop
 800115c:	40013000 	.word	0x40013000
 8001160:	40020c00 	.word	0x40020c00

08001164 <resetUartState>:

void resetUartState(UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer, uint32_t *dataIndex, uint8_t *rxData) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
    *uartState = UART_WAIT_FOR_SOP; // Reset UART state
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
    *timestampBuffer = 0; // Clear the timestamp buffer
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
    *dataBuffer = 0; // Clear the data buffer
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e9c1 2300 	strd	r2, r3, [r1]
    *dataIndex = 0;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
    *rxData = 0;
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119e:	480c      	ldr	r0, [pc, #48]	; (80011d0 <resetUartState+0x6c>)
 80011a0:	f001 fe7a 	bl	8002e98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <resetUartState+0x6c>)
 80011ac:	f001 fe74 	bl	8002e98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <resetUartState+0x6c>)
 80011b8:	f001 fe6e 	bl	8002e98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <resetUartState+0x6c>)
 80011c4:	f001 fe68 	bl	8002e98 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020c00 	.word	0x40020c00

080011d4 <printData>:
//int validateCRC(const SensorDataPacket *packet) {
////     Placeholder function to validate CRC - replace with actual CRC calculation
//    return packet->crc == crc_calculated;
//}

void printData(const SensorDataPacket *packet) {
 80011d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011d8:	b0a6      	sub	sp, #152	; 0x98
 80011da:	af04      	add	r7, sp, #16
 80011dc:	6078      	str	r0, [r7, #4]
    char buffer[100]; // Ensure the buffer is large enough for all the data
    double data;
    // Assuming the data field is treated as fixed-point and needs to be converted back to float
    if(packet->datatype != VIBRATION || packet->datatype != SOUND){
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d103      	bne.n	80011ee <printData+0x1a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d00f      	beq.n	800120e <printData+0x3a>
        data = packet->data / 100.0;  // Convert fixed-point back to double
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff f9d0 	bl	800059c <__aeabi_l2d>
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b8f      	ldr	r3, [pc, #572]	; (8001440 <printData+0x26c>)
 8001202:	f7ff fb23 	bl	800084c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    }

    // Start of Packet (SOP) - Hexadecimal
    sprintf(buffer, "SOP: 0x%02X\r\n", packet->sop);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	498a      	ldr	r1, [pc, #552]	; (8001444 <printData+0x270>)
 800121a:	4618      	mov	r0, r3
 800121c:	f00a fb28 	bl	800b870 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f823 	bl	8000270 <strlen>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	f107 0110 	add.w	r1, r7, #16
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	4884      	ldr	r0, [pc, #528]	; (8001448 <printData+0x274>)
 8001236:	f006 f8dd 	bl	80073f4 <HAL_UART_Transmit>

    // Data Type - Binary
    sprintf(buffer, "Data Type: %u\r\n", packet->datatype);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	461a      	mov	r2, r3
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4981      	ldr	r1, [pc, #516]	; (800144c <printData+0x278>)
 8001246:	4618      	mov	r0, r3
 8001248:	f00a fb12 	bl	800b870 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f80d 	bl	8000270 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f107 0110 	add.w	r1, r7, #16
 800125e:	2364      	movs	r3, #100	; 0x64
 8001260:	4879      	ldr	r0, [pc, #484]	; (8001448 <printData+0x274>)
 8001262:	f006 f8c7 	bl	80073f4 <HAL_UART_Transmit>

    // Sensor ID - Binary
    sprintf(buffer, "Sensor ID: %u\r\n", packet->sensorId);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	789b      	ldrb	r3, [r3, #2]
 800126a:	461a      	mov	r2, r3
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4977      	ldr	r1, [pc, #476]	; (8001450 <printData+0x27c>)
 8001272:	4618      	mov	r0, r3
 8001274:	f00a fafc 	bl	800b870 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4618      	mov	r0, r3
 800127e:	f7fe fff7 	bl	8000270 <strlen>
 8001282:	4603      	mov	r3, r0
 8001284:	b29a      	uxth	r2, r3
 8001286:	f107 0110 	add.w	r1, r7, #16
 800128a:	2364      	movs	r3, #100	; 0x64
 800128c:	486e      	ldr	r0, [pc, #440]	; (8001448 <printData+0x274>)
 800128e:	f006 f8b1 	bl	80073f4 <HAL_UART_Transmit>

    // Timestamp - Decimal
    sprintf(buffer, "Timestamp: %lu\r\n", packet->timestamp);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	496e      	ldr	r1, [pc, #440]	; (8001454 <printData+0x280>)
 800129c:	4618      	mov	r0, r3
 800129e:	f00a fae7 	bl	800b870 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7fe ffe2 	bl	8000270 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	f107 0110 	add.w	r1, r7, #16
 80012b4:	2364      	movs	r3, #100	; 0x64
 80012b6:	4864      	ldr	r0, [pc, #400]	; (8001448 <printData+0x274>)
 80012b8:	f006 f89c 	bl	80073f4 <HAL_UART_Transmit>

//    // Data - Decimal
//    sprintf(buffer, "Data: %lu\r\n", packet->data);
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);

    if(packet->datatype == TEMPERATURE) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <printData+0x100>
        // For non-vibration data, print as before
    	sprintf(buffer, "Temp: %.2f C\r\n", data);
 80012c4:	f107 0010 	add.w	r0, r7, #16
 80012c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80012cc:	4962      	ldr	r1, [pc, #392]	; (8001458 <printData+0x284>)
 80012ce:	f00a facf 	bl	800b870 <siprintf>
 80012d2:	e071      	b.n	80013b8 <printData+0x1e4>
    }
    else if(packet->datatype == HUMIDITY){
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	785b      	ldrb	r3, [r3, #1]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <printData+0x118>
    	sprintf(buffer, "Hum: %.2f %%\r\n", data);
 80012dc:	f107 0010 	add.w	r0, r7, #16
 80012e0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80012e4:	495d      	ldr	r1, [pc, #372]	; (800145c <printData+0x288>)
 80012e6:	f00a fac3 	bl	800b870 <siprintf>
 80012ea:	e065      	b.n	80013b8 <printData+0x1e4>
    }
    else if(packet->datatype == SOUND){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d108      	bne.n	8001306 <printData+0x132>
    	sprintf(buffer, "Sound: %lu dB\r\n", packet->data);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012fa:	f107 0010 	add.w	r0, r7, #16
 80012fe:	4958      	ldr	r1, [pc, #352]	; (8001460 <printData+0x28c>)
 8001300:	f00a fab6 	bl	800b870 <siprintf>
 8001304:	e058      	b.n	80013b8 <printData+0x1e4>
    }
    else if (packet->datatype == VIBRATION) {
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d14d      	bne.n	80013aa <printData+0x1d6>
        int16_t x, y, z;
        unpackData(packet->data, &x, &y, &z);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f107 040c 	add.w	r4, r7, #12
 800131c:	f107 020e 	add.w	r2, r7, #14
 8001320:	f107 030a 	add.w	r3, r7, #10
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	4623      	mov	r3, r4
 8001328:	f000 f8a8 	bl	800147c <unpackData>
        // Display the scaled values with two decimal places as floating points
        float x_float = x / 100.0f;
 800132c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001338:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001464 <printData+0x290>
 800133c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001340:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        float y_float = y / 100.0f;
 8001344:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001350:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001464 <printData+0x290>
 8001354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001358:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        float z_float = z / 100.0f;
 800135c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001368:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001464 <printData+0x290>
 800136c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001370:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
//        sprintf(buffer2, "Data: %lu\r\n", packet->data);
        sprintf(buffer, "X: %.2f G\tY: %.2f G\tZ: %.2f G\r\n", x_float, y_float, z_float);
 8001374:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	4680      	mov	r8, r0
 800137c:	4689      	mov	r9, r1
 800137e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001380:	f7ff f8e2 	bl	8000548 <__aeabi_f2d>
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800138a:	f7ff f8dd 	bl	8000548 <__aeabi_f2d>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	f107 0010 	add.w	r0, r7, #16
 8001396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800139a:	e9cd 4500 	strd	r4, r5, [sp]
 800139e:	4642      	mov	r2, r8
 80013a0:	464b      	mov	r3, r9
 80013a2:	4931      	ldr	r1, [pc, #196]	; (8001468 <printData+0x294>)
 80013a4:	f00a fa64 	bl	800b870 <siprintf>
 80013a8:	e006      	b.n	80013b8 <printData+0x1e4>
    }
    else{
    	sprintf(buffer, "Bad Data Type", data);
 80013aa:	f107 0010 	add.w	r0, r7, #16
 80013ae:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80013b2:	492e      	ldr	r1, [pc, #184]	; (800146c <printData+0x298>)
 80013b4:	f00a fa5c 	bl	800b870 <siprintf>
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4618      	mov	r0, r3
 80013be:	f7fe ff57 	bl	8000270 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f107 0110 	add.w	r1, r7, #16
 80013ca:	2364      	movs	r3, #100	; 0x64
 80013cc:	481e      	ldr	r0, [pc, #120]	; (8001448 <printData+0x274>)
 80013ce:	f006 f811 	bl	80073f4 <HAL_UART_Transmit>

    // CRC - Hexadecimal
    sprintf(buffer, "CRC: 0x%02X\r\n", packet->crc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7c1b      	ldrb	r3, [r3, #16]
 80013d6:	461a      	mov	r2, r3
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4924      	ldr	r1, [pc, #144]	; (8001470 <printData+0x29c>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f00a fa46 	bl	800b870 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe ff41 	bl	8000270 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f107 0110 	add.w	r1, r7, #16
 80013f6:	2364      	movs	r3, #100	; 0x64
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <printData+0x274>)
 80013fa:	f005 fffb 	bl	80073f4 <HAL_UART_Transmit>

    // End of Packet (EOP) - Hexadecimal
    sprintf(buffer, "EOP: 0x%02X\r\n", packet->eop);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7c5b      	ldrb	r3, [r3, #17]
 8001402:	461a      	mov	r2, r3
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	491a      	ldr	r1, [pc, #104]	; (8001474 <printData+0x2a0>)
 800140a:	4618      	mov	r0, r3
 800140c:	f00a fa30 	bl	800b870 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe ff2b 	bl	8000270 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0110 	add.w	r1, r7, #16
 8001422:	2364      	movs	r3, #100	; 0x64
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <printData+0x274>)
 8001426:	f005 ffe5 	bl	80073f4 <HAL_UART_Transmit>

    // Separator
    HAL_UART_Transmit(&huart3, (uint8_t*)"--------\r\n", 10, 100);
 800142a:	2364      	movs	r3, #100	; 0x64
 800142c:	220a      	movs	r2, #10
 800142e:	4912      	ldr	r1, [pc, #72]	; (8001478 <printData+0x2a4>)
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <printData+0x274>)
 8001432:	f005 ffdf 	bl	80073f4 <HAL_UART_Transmit>
}
 8001436:	bf00      	nop
 8001438:	3788      	adds	r7, #136	; 0x88
 800143a:	46bd      	mov	sp, r7
 800143c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001440:	40590000 	.word	0x40590000
 8001444:	0800d9e0 	.word	0x0800d9e0
 8001448:	20000368 	.word	0x20000368
 800144c:	0800d9f0 	.word	0x0800d9f0
 8001450:	0800da00 	.word	0x0800da00
 8001454:	0800da10 	.word	0x0800da10
 8001458:	0800da24 	.word	0x0800da24
 800145c:	0800da34 	.word	0x0800da34
 8001460:	0800da44 	.word	0x0800da44
 8001464:	42c80000 	.word	0x42c80000
 8001468:	0800da54 	.word	0x0800da54
 800146c:	0800da74 	.word	0x0800da74
 8001470:	0800da84 	.word	0x0800da84
 8001474:	0800da94 	.word	0x0800da94
 8001478:	0800daa4 	.word	0x0800daa4

0800147c <unpackData>:
    sprintf(buffer, "%lu\r\n", packet->data);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
}


void unpackData(uint64_t packedData, int16_t* x, int16_t* y, int16_t* z) {
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
    *x = (int16_t)((packedData >> 32) & 0xFFFF);
 800148a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	000a      	movs	r2, r1
 8001498:	2300      	movs	r3, #0
 800149a:	b212      	sxth	r2, r2
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((packedData >> 16) & 0xFFFF);
 80014a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	0c02      	lsrs	r2, r0, #16
 80014ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014b2:	0c0b      	lsrs	r3, r1, #16
 80014b4:	b212      	sxth	r2, r2
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(packedData & 0xFFFF);
 80014ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	801a      	strh	r2, [r3, #0]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d4:	f000 fd9a 	bl	800200c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d8:	f000 f818 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014dc:	f000 f95a 	bl	8001794 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e0:	f000 f938 	bl	8001754 <MX_DMA_Init>
  MX_I2C1_Init();
 80014e4:	f000 f87c 	bl	80015e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80014e8:	f000 f8a8 	bl	800163c <MX_I2S3_Init>
  MX_SPI1_Init();
 80014ec:	f000 f8d6 	bl	800169c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80014f0:	f009 f8f2 	bl	800a6d8 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 80014f4:	f000 f904 	bl	8001700 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_SPI_Receive_DMA(&hspi1, rx_data1, PACKET_SIZE);
 80014f8:	2218      	movs	r2, #24
 80014fa:	4902      	ldr	r1, [pc, #8]	; (8001504 <main+0x34>)
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <main+0x38>)
 80014fe:	f005 fa2b 	bl	8006958 <HAL_SPI_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001502:	e7fe      	b.n	8001502 <main+0x32>
 8001504:	200003b0 	.word	0x200003b0
 8001508:	200002b0 	.word	0x200002b0

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	; 0x50
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	2230      	movs	r2, #48	; 0x30
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f00a fa0b 	bl	800b936 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <SystemClock_Config+0xcc>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	4a27      	ldr	r2, [pc, #156]	; (80015d8 <SystemClock_Config+0xcc>)
 800153a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153e:	6413      	str	r3, [r2, #64]	; 0x40
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <SystemClock_Config+0xcc>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <SystemClock_Config+0xd0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a21      	ldr	r2, [pc, #132]	; (80015dc <SystemClock_Config+0xd0>)
 8001556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <SystemClock_Config+0xd0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800156c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	2302      	movs	r3, #2
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800157c:	2308      	movs	r3, #8
 800157e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001586:	2302      	movs	r3, #2
 8001588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800158a:	2307      	movs	r3, #7
 800158c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	4618      	mov	r0, r3
 8001594:	f004 fb7c 	bl	8005c90 <HAL_RCC_OscConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800159e:	f000 f9f7 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a2:	230f      	movs	r3, #15
 80015a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a6:	2302      	movs	r3, #2
 80015a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2105      	movs	r1, #5
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fddd 	bl	8006180 <HAL_RCC_ClockConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015cc:	f000 f9e0 	bl	8001990 <Error_Handler>
  }
}
 80015d0:	bf00      	nop
 80015d2:	3750      	adds	r7, #80	; 0x50
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_I2C1_Init+0x50>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	; (8001634 <MX_I2C1_Init+0x54>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_I2C1_Init+0x50>)
 80015ec:	4a12      	ldr	r2, [pc, #72]	; (8001638 <MX_I2C1_Init+0x58>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_I2C1_Init+0x50>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_I2C1_Init+0x50>)
 800161e:	f003 fd53 	bl	80050c8 <HAL_I2C_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001628:	f000 f9b2 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000214 	.word	0x20000214
 8001634:	40005400 	.word	0x40005400
 8001638:	000186a0 	.word	0x000186a0

0800163c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_I2S3_Init+0x54>)
 8001642:	4a14      	ldr	r2, [pc, #80]	; (8001694 <MX_I2S3_Init+0x58>)
 8001644:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_I2S3_Init+0x54>)
 8001648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_I2S3_Init+0x54>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_I2S3_Init+0x54>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <MX_I2S3_Init+0x54>)
 800165c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001660:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_I2S3_Init+0x54>)
 8001664:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <MX_I2S3_Init+0x5c>)
 8001666:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_I2S3_Init+0x54>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_I2S3_Init+0x54>)
 8001670:	2200      	movs	r2, #0
 8001672:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_I2S3_Init+0x54>)
 8001676:	2200      	movs	r2, #0
 8001678:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_I2S3_Init+0x54>)
 800167c:	f003 fe68 	bl	8005350 <HAL_I2S_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001686:	f000 f983 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000268 	.word	0x20000268
 8001694:	40003c00 	.word	0x40003c00
 8001698:	00017700 	.word	0x00017700

0800169c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016a2:	4a16      	ldr	r2, [pc, #88]	; (80016fc <MX_SPI1_Init+0x60>)
 80016a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016e0:	220a      	movs	r2, #10
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_SPI1_Init+0x5c>)
 80016e6:	f005 f8ad 	bl	8006844 <HAL_SPI_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80016f0:	f000 f94e 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200002b0 	.word	0x200002b0
 80016fc:	40013000 	.word	0x40013000

08001700 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART3_UART_Init+0x4c>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <MX_USART3_UART_Init+0x50>)
 8001708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_USART3_UART_Init+0x4c>)
 800170c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART3_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART3_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART3_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART3_UART_Init+0x4c>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART3_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART3_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART3_UART_Init+0x4c>)
 8001738:	f005 fe0c 	bl	8007354 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001742:	f000 f925 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000368 	.word	0x20000368
 8001750:	40004800 	.word	0x40004800

08001754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_DMA_Init+0x3c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <MX_DMA_Init+0x3c>)
 8001764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_DMA_Init+0x3c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2038      	movs	r0, #56	; 0x38
 800177c:	f000 fdb7 	bl	80022ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001780:	2038      	movs	r0, #56	; 0x38
 8001782:	f000 fdd0 	bl	8002326 <HAL_NVIC_EnableIRQ>

}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	4b72      	ldr	r3, [pc, #456]	; (8001978 <MX_GPIO_Init+0x1e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a71      	ldr	r2, [pc, #452]	; (8001978 <MX_GPIO_Init+0x1e4>)
 80017b4:	f043 0310 	orr.w	r3, r3, #16
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b6f      	ldr	r3, [pc, #444]	; (8001978 <MX_GPIO_Init+0x1e4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <MX_GPIO_Init+0x1e4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a6a      	ldr	r2, [pc, #424]	; (8001978 <MX_GPIO_Init+0x1e4>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b68      	ldr	r3, [pc, #416]	; (8001978 <MX_GPIO_Init+0x1e4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b64      	ldr	r3, [pc, #400]	; (8001978 <MX_GPIO_Init+0x1e4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a63      	ldr	r2, [pc, #396]	; (8001978 <MX_GPIO_Init+0x1e4>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b61      	ldr	r3, [pc, #388]	; (8001978 <MX_GPIO_Init+0x1e4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <MX_GPIO_Init+0x1e4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a5c      	ldr	r2, [pc, #368]	; (8001978 <MX_GPIO_Init+0x1e4>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b5a      	ldr	r3, [pc, #360]	; (8001978 <MX_GPIO_Init+0x1e4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b56      	ldr	r3, [pc, #344]	; (8001978 <MX_GPIO_Init+0x1e4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a55      	ldr	r2, [pc, #340]	; (8001978 <MX_GPIO_Init+0x1e4>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b53      	ldr	r3, [pc, #332]	; (8001978 <MX_GPIO_Init+0x1e4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <MX_GPIO_Init+0x1e4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a4e      	ldr	r2, [pc, #312]	; (8001978 <MX_GPIO_Init+0x1e4>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <MX_GPIO_Init+0x1e4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2108      	movs	r1, #8
 8001856:	4849      	ldr	r0, [pc, #292]	; (800197c <MX_GPIO_Init+0x1e8>)
 8001858:	f001 fb1e 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	2101      	movs	r1, #1
 8001860:	4847      	ldr	r0, [pc, #284]	; (8001980 <MX_GPIO_Init+0x1ec>)
 8001862:	f001 fb19 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001866:	2200      	movs	r2, #0
 8001868:	f24f 0110 	movw	r1, #61456	; 0xf010
 800186c:	4845      	ldr	r0, [pc, #276]	; (8001984 <MX_GPIO_Init+0x1f0>)
 800186e:	f001 fb13 	bl	8002e98 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001872:	2308      	movs	r3, #8
 8001874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	483c      	ldr	r0, [pc, #240]	; (800197c <MX_GPIO_Init+0x1e8>)
 800188a:	f001 f969 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800188e:	2301      	movs	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	4836      	ldr	r0, [pc, #216]	; (8001980 <MX_GPIO_Init+0x1ec>)
 80018a6:	f001 f95b 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80018aa:	2308      	movs	r3, #8
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ba:	2305      	movs	r3, #5
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	482e      	ldr	r0, [pc, #184]	; (8001980 <MX_GPIO_Init+0x1ec>)
 80018c6:	f001 f94b 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ca:	2301      	movs	r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	482a      	ldr	r0, [pc, #168]	; (8001988 <MX_GPIO_Init+0x1f4>)
 80018e0:	f001 f93e 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018e4:	2304      	movs	r3, #4
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4825      	ldr	r0, [pc, #148]	; (800198c <MX_GPIO_Init+0x1f8>)
 80018f8:	f001 f932 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80018fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800190e:	2305      	movs	r3, #5
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	481c      	ldr	r0, [pc, #112]	; (800198c <MX_GPIO_Init+0x1f8>)
 800191a:	f001 f921 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800191e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001922:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	4813      	ldr	r0, [pc, #76]	; (8001984 <MX_GPIO_Init+0x1f0>)
 8001938:	f001 f912 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800193c:	2320      	movs	r3, #32
 800193e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <MX_GPIO_Init+0x1f0>)
 8001950:	f001 f906 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001954:	2302      	movs	r3, #2
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001958:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800195c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	4804      	ldr	r0, [pc, #16]	; (800197c <MX_GPIO_Init+0x1e8>)
 800196a:	f001 f8f9 	bl	8002b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800196e:	bf00      	nop
 8001970:	3730      	adds	r7, #48	; 0x30
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40021000 	.word	0x40021000
 8001980:	40020800 	.word	0x40020800
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	e7fe      	b.n	8001998 <Error_Handler+0x8>
	...

0800199c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_MspInit+0x4c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <HAL_MspInit+0x4c>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_MspInit+0x4c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019da:	2007      	movs	r0, #7
 80019dc:	f000 fc7c 	bl	80022d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <HAL_I2C_MspInit+0x84>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d12c      	bne.n	8001a68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a30:	2312      	movs	r3, #18
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	480c      	ldr	r0, [pc, #48]	; (8001a78 <HAL_I2C_MspInit+0x8c>)
 8001a48:	f001 f88a 	bl	8002b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40005400 	.word	0x40005400
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020400 	.word	0x40020400

08001a7c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08e      	sub	sp, #56	; 0x38
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a31      	ldr	r2, [pc, #196]	; (8001b6c <HAL_I2S_MspInit+0xf0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d15a      	bne.n	8001b62 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001aac:	2301      	movs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 fd7f 	bl	80065c0 <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ac8:	f7ff ff62 	bl	8001990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_I2S_MspInit+0xf4>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <HAL_I2S_MspInit+0xf4>)
 8001ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ada:	6413      	str	r3, [r2, #64]	; 0x40
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_I2S_MspInit+0xf4>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_I2S_MspInit+0xf4>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <HAL_I2S_MspInit+0xf4>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_I2S_MspInit+0xf4>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_I2S_MspInit+0xf4>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_I2S_MspInit+0xf4>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6313      	str	r3, [r2, #48]	; 0x30
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_I2S_MspInit+0xf4>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b20:	2310      	movs	r3, #16
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b30:	2306      	movs	r3, #6
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480e      	ldr	r0, [pc, #56]	; (8001b74 <HAL_I2S_MspInit+0xf8>)
 8001b3c:	f001 f810 	bl	8002b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b40:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b52:	2306      	movs	r3, #6
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4806      	ldr	r0, [pc, #24]	; (8001b78 <HAL_I2S_MspInit+0xfc>)
 8001b5e:	f000 ffff 	bl	8002b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3738      	adds	r7, #56	; 0x38
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40003c00 	.word	0x40003c00
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020800 	.word	0x40020800

08001b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <HAL_SPI_MspInit+0xf0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d161      	bne.n	8001c62 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <HAL_SPI_MspInit+0xf4>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a32      	ldr	r2, [pc, #200]	; (8001c70 <HAL_SPI_MspInit+0xf4>)
 8001ba8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_SPI_MspInit+0xf4>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <HAL_SPI_MspInit+0xf4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	; (8001c70 <HAL_SPI_MspInit+0xf4>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_SPI_MspInit+0xf4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001bd6:	23e0      	movs	r3, #224	; 0xe0
 8001bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be6:	2305      	movs	r3, #5
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4820      	ldr	r0, [pc, #128]	; (8001c74 <HAL_SPI_MspInit+0xf8>)
 8001bf2:	f000 ffb5 	bl	8002b60 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001bf8:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <HAL_SPI_MspInit+0x100>)
 8001bfa:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001bfe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c02:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c16:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c36:	4810      	ldr	r0, [pc, #64]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c38:	f000 fb90 	bl	800235c <HAL_DMA_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001c42:	f7ff fea5 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_SPI_MspInit+0xfc>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2023      	movs	r0, #35	; 0x23
 8001c58:	f000 fb49 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c5c:	2023      	movs	r0, #35	; 0x23
 8001c5e:	f000 fb62 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40013000 	.word	0x40013000
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000
 8001c78:	20000308 	.word	0x20000308
 8001c7c:	40026410 	.word	0x40026410

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <HAL_UART_MspInit+0xd4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d153      	bne.n	8001d4a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <HAL_UART_MspInit+0xd8>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a2b      	ldr	r2, [pc, #172]	; (8001d58 <HAL_UART_MspInit+0xd8>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_UART_MspInit+0xd8>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_UART_MspInit+0xd8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <HAL_UART_MspInit+0xd8>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_UART_MspInit+0xd8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_UART_MspInit+0xd8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_UART_MspInit+0xd8>)
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_UART_MspInit+0xd8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d08:	2307      	movs	r3, #7
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4812      	ldr	r0, [pc, #72]	; (8001d5c <HAL_UART_MspInit+0xdc>)
 8001d14:	f000 ff24 	bl	8002b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	480a      	ldr	r0, [pc, #40]	; (8001d60 <HAL_UART_MspInit+0xe0>)
 8001d36:	f000 ff13 	bl	8002b60 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2027      	movs	r0, #39	; 0x27
 8001d40:	f000 fad5 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d44:	2027      	movs	r0, #39	; 0x27
 8001d46:	f000 faee 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40004800 	.word	0x40004800
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020c00 	.word	0x40020c00

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler+0x4>

08001d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f000 f97e 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <SPI1_IRQHandler+0x10>)
 8001dbe:	f004 ff89 	bl	8006cd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200002b0 	.word	0x200002b0

08001dcc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <USART3_IRQHandler+0x10>)
 8001dd2:	f005 fb9b 	bl	800750c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000368 	.word	0x20000368

08001de0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <DMA2_Stream0_IRQHandler+0x10>)
 8001de6:	f000 fc51 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000308 	.word	0x20000308

08001df4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <OTG_FS_IRQHandler+0x10>)
 8001dfa:	f001 fb47 	bl	800348c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200007d8 	.word	0x200007d8

08001e08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return 1;
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_kill>:

int _kill(int pid, int sig)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e22:	f009 fdeb 	bl	800b9fc <__errno>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2216      	movs	r2, #22
 8001e2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_exit>:

void _exit (int status)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ffe7 	bl	8001e18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e4a:	e7fe      	b.n	8001e4a <_exit+0x12>

08001e4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e00a      	b.n	8001e74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e5e:	f3af 8000 	nop.w
 8001e62:	4601      	mov	r1, r0
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	60ba      	str	r2, [r7, #8]
 8001e6a:	b2ca      	uxtb	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbf0      	blt.n	8001e5e <_read+0x12>
  }

  return len;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e009      	b.n	8001eac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dbf1      	blt.n	8001e98 <_write+0x12>
  }
  return len;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_close>:

int _close(int file)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <_isatty>:

int _isatty(int file)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f009 fd50 	bl	800b9fc <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20020000 	.word	0x20020000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	200003f4 	.word	0x200003f4
 8001f90:	20000d08 	.word	0x20000d08

08001f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <SystemInit+0x20>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <SystemInit+0x20>)
 8001fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fbc:	f7ff ffea 	bl	8001f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc2:	490d      	ldr	r1, [pc, #52]	; (8001ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd8:	4c0a      	ldr	r4, [pc, #40]	; (8002004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f009 fd0f 	bl	800ba08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7ff fa71 	bl	80014d0 <main>
  bx  lr    
 8001fee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001ffc:	0800de5c 	.word	0x0800de5c
  ldr r2, =_sbss
 8002000:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002004:	20000d04 	.word	0x20000d04

08002008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC_IRQHandler>
	...

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0d      	ldr	r2, [pc, #52]	; (800204c <HAL_Init+0x40>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <HAL_Init+0x40>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_Init+0x40>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 f94f 	bl	80022d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203a:	2000      	movs	r0, #0
 800203c:	f000 f808 	bl	8002050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff fcac 	bl	800199c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x54>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_InitTick+0x58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f967 	bl	8002342 <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 f92f 	bl	80022ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_InitTick+0x5c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000008 	.word	0x20000008
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_IncTick+0x24>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_IncTick+0x24>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000008 	.word	0x20000008
 80020d4:	200003f8 	.word	0x200003f8

080020d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_GetTick+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	200003f8 	.word	0x200003f8

080020f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff ffee 	bl	80020d8 <HAL_GetTick>
 80020fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d005      	beq.n	8002116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_Delay+0x44>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002116:	bf00      	nop
 8002118:	f7ff ffde 	bl	80020d8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d8f7      	bhi.n	8002118 <HAL_Delay+0x28>
  {
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000008 	.word	0x20000008

08002138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <__NVIC_SetPriorityGrouping+0x44>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002154:	4013      	ands	r3, r2
 8002156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216a:	4a04      	ldr	r2, [pc, #16]	; (800217c <__NVIC_SetPriorityGrouping+0x44>)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	60d3      	str	r3, [r2, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <__NVIC_GetPriorityGrouping+0x18>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	f003 0307 	and.w	r3, r3, #7
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	db0b      	blt.n	80021c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	f003 021f 	and.w	r2, r3, #31
 80021b4:	4907      	ldr	r1, [pc, #28]	; (80021d4 <__NVIC_EnableIRQ+0x38>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	2001      	movs	r0, #1
 80021be:	fa00 f202 	lsl.w	r2, r0, r2
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	6039      	str	r1, [r7, #0]
 80021e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	db0a      	blt.n	8002202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	490c      	ldr	r1, [pc, #48]	; (8002224 <__NVIC_SetPriority+0x4c>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	0112      	lsls	r2, r2, #4
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	440b      	add	r3, r1
 80021fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002200:	e00a      	b.n	8002218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4908      	ldr	r1, [pc, #32]	; (8002228 <__NVIC_SetPriority+0x50>)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	3b04      	subs	r3, #4
 8002210:	0112      	lsls	r2, r2, #4
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	440b      	add	r3, r1
 8002216:	761a      	strb	r2, [r3, #24]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f1c3 0307 	rsb	r3, r3, #7
 8002246:	2b04      	cmp	r3, #4
 8002248:	bf28      	it	cs
 800224a:	2304      	movcs	r3, #4
 800224c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3304      	adds	r3, #4
 8002252:	2b06      	cmp	r3, #6
 8002254:	d902      	bls.n	800225c <NVIC_EncodePriority+0x30>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3b03      	subs	r3, #3
 800225a:	e000      	b.n	800225e <NVIC_EncodePriority+0x32>
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	401a      	ands	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	43d9      	mvns	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	4313      	orrs	r3, r2
         );
}
 8002286:	4618      	mov	r0, r3
 8002288:	3724      	adds	r7, #36	; 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a4:	d301      	bcc.n	80022aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00f      	b.n	80022ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <SysTick_Config+0x40>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b2:	210f      	movs	r1, #15
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f7ff ff8e 	bl	80021d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <SysTick_Config+0x40>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <SysTick_Config+0x40>)
 80022c4:	2207      	movs	r2, #7
 80022c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	e000e010 	.word	0xe000e010

080022d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff29 	bl	8002138 <__NVIC_SetPriorityGrouping>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002300:	f7ff ff3e 	bl	8002180 <__NVIC_GetPriorityGrouping>
 8002304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7ff ff8e 	bl	800222c <NVIC_EncodePriority>
 8002310:	4602      	mov	r2, r0
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff5d 	bl	80021d8 <__NVIC_SetPriority>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff31 	bl	800219c <__NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffa2 	bl	8002294 <SysTick_Config>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff feb6 	bl	80020d8 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e099      	b.n	80024ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002398:	e00f      	b.n	80023ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800239a:	f7ff fe9d 	bl	80020d8 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d908      	bls.n	80023ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2203      	movs	r2, #3
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e078      	b.n	80024ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e8      	bne.n	800239a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_DMA_Init+0x158>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	2b04      	cmp	r3, #4
 8002412:	d107      	bne.n	8002424 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	4313      	orrs	r3, r2
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f023 0307 	bic.w	r3, r3, #7
 800243a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	2b04      	cmp	r3, #4
 800244c:	d117      	bne.n	800247e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00e      	beq.n	800247e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fb01 	bl	8002a68 <DMA_CheckFifoParam>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800247a:	2301      	movs	r3, #1
 800247c:	e016      	b.n	80024ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fab8 	bl	80029fc <DMA_CalcBaseAndBitshift>
 800248c:	4603      	mov	r3, r0
 800248e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	223f      	movs	r2, #63	; 0x3f
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	f010803f 	.word	0xf010803f

080024b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_DMA_Start_IT+0x26>
 80024da:	2302      	movs	r3, #2
 80024dc:	e040      	b.n	8002560 <HAL_DMA_Start_IT+0xa8>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d12f      	bne.n	8002552 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fa4a 	bl	80029a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	223f      	movs	r2, #63	; 0x3f
 8002512:	409a      	lsls	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0216 	orr.w	r2, r2, #22
 8002526:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0208 	orr.w	r2, r2, #8
 800253e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e005      	b.n	800255e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800255e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002576:	f7ff fdaf 	bl	80020d8 <HAL_GetTick>
 800257a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d008      	beq.n	800259a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e052      	b.n	8002640 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0216 	bic.w	r2, r2, #22
 80025a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <HAL_DMA_Abort+0x62>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0208 	bic.w	r2, r2, #8
 80025d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ea:	e013      	b.n	8002614 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ec:	f7ff fd74 	bl	80020d8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d90c      	bls.n	8002614 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2220      	movs	r2, #32
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2203      	movs	r2, #3
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e015      	b.n	8002640 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e4      	bne.n	80025ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	223f      	movs	r2, #63	; 0x3f
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e00c      	b.n	8002680 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2205      	movs	r2, #5
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002698:	4b8e      	ldr	r3, [pc, #568]	; (80028d4 <HAL_DMA_IRQHandler+0x248>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a8e      	ldr	r2, [pc, #568]	; (80028d8 <HAL_DMA_IRQHandler+0x24c>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	2208      	movs	r2, #8
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01a      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	2208      	movs	r2, #8
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2201      	movs	r2, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2201      	movs	r2, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f043 0202 	orr.w	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2204      	movs	r2, #4
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2204      	movs	r2, #4
 8002752:	409a      	lsls	r2, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0204 	orr.w	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2210      	movs	r2, #16
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d043      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d03c      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2210      	movs	r2, #16
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d024      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	e01f      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
 80027cc:	e016      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0208 	bic.w	r2, r2, #8
 80027ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	2220      	movs	r2, #32
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 808f 	beq.w	800292c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8087 	beq.w	800292c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2220      	movs	r2, #32
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b05      	cmp	r3, #5
 8002834:	d136      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0216 	bic.w	r2, r2, #22
 8002844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <HAL_DMA_IRQHandler+0x1da>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0208 	bic.w	r2, r2, #8
 8002874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	223f      	movs	r2, #63	; 0x3f
 800287c:	409a      	lsls	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	2b00      	cmp	r3, #0
 8002898:	d07e      	beq.n	8002998 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
        }
        return;
 80028a2:	e079      	b.n	8002998 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01d      	beq.n	80028ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d031      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
 80028d0:	e02c      	b.n	800292c <HAL_DMA_IRQHandler+0x2a0>
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000
 80028d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d023      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e01e      	b.n	800292c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0210 	bic.w	r2, r2, #16
 800290a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	2b00      	cmp	r3, #0
 8002932:	d032      	beq.n	800299a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d022      	beq.n	8002986 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2205      	movs	r2, #5
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3301      	adds	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	d307      	bcc.n	8002974 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f2      	bne.n	8002958 <HAL_DMA_IRQHandler+0x2cc>
 8002972:	e000      	b.n	8002976 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002974:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	e000      	b.n	800299a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002998:	bf00      	nop
    }
  }
}
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d108      	bne.n	80029e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029de:	e007      	b.n	80029f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3b10      	subs	r3, #16
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <DMA_CalcBaseAndBitshift+0x64>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a16:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <DMA_CalcBaseAndBitshift+0x68>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d909      	bls.n	8002a3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	1d1a      	adds	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a3c:	e007      	b.n	8002a4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a46:	f023 0303 	bic.w	r3, r3, #3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	aaaaaaab 	.word	0xaaaaaaab
 8002a64:	0800dad4 	.word	0x0800dad4

08002a68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11f      	bne.n	8002ac2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d856      	bhi.n	8002b36 <DMA_CheckFifoParam+0xce>
 8002a88:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <DMA_CheckFifoParam+0x28>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002ab3 	.word	0x08002ab3
 8002a98:	08002aa1 	.word	0x08002aa1
 8002a9c:	08002b37 	.word	0x08002b37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d046      	beq.n	8002b3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab0:	e043      	b.n	8002b3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aba:	d140      	bne.n	8002b3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac0:	e03d      	b.n	8002b3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aca:	d121      	bne.n	8002b10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d837      	bhi.n	8002b42 <DMA_CheckFifoParam+0xda>
 8002ad2:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <DMA_CheckFifoParam+0x70>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002aef 	.word	0x08002aef
 8002ae0:	08002ae9 	.word	0x08002ae9
 8002ae4:	08002b01 	.word	0x08002b01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      break;
 8002aec:	e030      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d025      	beq.n	8002b46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afe:	e022      	b.n	8002b46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b08:	d11f      	bne.n	8002b4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b0e:	e01c      	b.n	8002b4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d903      	bls.n	8002b1e <DMA_CheckFifoParam+0xb6>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d003      	beq.n	8002b24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b1c:	e018      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
      break;
 8002b22:	e015      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00e      	beq.n	8002b4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e00b      	b.n	8002b4e <DMA_CheckFifoParam+0xe6>
      break;
 8002b36:	bf00      	nop
 8002b38:	e00a      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e008      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e006      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e004      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e002      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b4a:	bf00      	nop
 8002b4c:	e000      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop

08002b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e16b      	b.n	8002e54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f040 815a 	bne.w	8002e4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d005      	beq.n	8002bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d130      	bne.n	8002c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0201 	and.w	r2, r3, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d017      	beq.n	8002c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d123      	bne.n	8002ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0203 	and.w	r2, r3, #3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80b4 	beq.w	8002e4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b60      	ldr	r3, [pc, #384]	; (8002e6c <HAL_GPIO_Init+0x30c>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a5f      	ldr	r2, [pc, #380]	; (8002e6c <HAL_GPIO_Init+0x30c>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b5d      	ldr	r3, [pc, #372]	; (8002e6c <HAL_GPIO_Init+0x30c>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d02:	4a5b      	ldr	r2, [pc, #364]	; (8002e70 <HAL_GPIO_Init+0x310>)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <HAL_GPIO_Init+0x314>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <HAL_GPIO_Init+0x226>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a51      	ldr	r2, [pc, #324]	; (8002e78 <HAL_GPIO_Init+0x318>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d025      	beq.n	8002d82 <HAL_GPIO_Init+0x222>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a50      	ldr	r2, [pc, #320]	; (8002e7c <HAL_GPIO_Init+0x31c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <HAL_GPIO_Init+0x21e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4f      	ldr	r2, [pc, #316]	; (8002e80 <HAL_GPIO_Init+0x320>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x21a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4e      	ldr	r2, [pc, #312]	; (8002e84 <HAL_GPIO_Init+0x324>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x216>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4d      	ldr	r2, [pc, #308]	; (8002e88 <HAL_GPIO_Init+0x328>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4c      	ldr	r2, [pc, #304]	; (8002e8c <HAL_GPIO_Init+0x32c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x20e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4b      	ldr	r2, [pc, #300]	; (8002e90 <HAL_GPIO_Init+0x330>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x20a>
 8002d66:	2307      	movs	r3, #7
 8002d68:	e00e      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	e00c      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d6e:	2306      	movs	r3, #6
 8002d70:	e00a      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d72:	2305      	movs	r3, #5
 8002d74:	e008      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d76:	2304      	movs	r3, #4
 8002d78:	e006      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e004      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e002      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d86:	2300      	movs	r3, #0
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	f002 0203 	and.w	r2, r2, #3
 8002d8e:	0092      	lsls	r2, r2, #2
 8002d90:	4093      	lsls	r3, r2
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d98:	4935      	ldr	r1, [pc, #212]	; (8002e70 <HAL_GPIO_Init+0x310>)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dca:	4a32      	ldr	r2, [pc, #200]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd0:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df4:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dfa:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e48:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3301      	adds	r3, #1
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	f67f ae90 	bls.w	8002b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40013800 	.word	0x40013800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	40020800 	.word	0x40020800
 8002e80:	40020c00 	.word	0x40020c00
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40021400 	.word	0x40021400
 8002e8c:	40021800 	.word	0x40021800
 8002e90:	40021c00 	.word	0x40021c00
 8002e94:	40013c00 	.word	0x40013c00

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb4:	e003      	b.n	8002ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	041a      	lsls	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af02      	add	r7, sp, #8
 8002ed0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e059      	b.n	8002f90 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f007 fc42 	bl	800a780 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2203      	movs	r2, #3
 8002f00:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f0a:	d102      	bne.n	8002f12 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f005 fa93 	bl	8008442 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7c1a      	ldrb	r2, [r3, #16]
 8002f24:	f88d 2000 	strb.w	r2, [sp]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f2c:	f005 fa14 	bl	8008358 <USB_CoreInit>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e026      	b.n	8002f90 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f005 fa8b 	bl	8008464 <USB_SetCurrentMode>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e017      	b.n	8002f90 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7c1a      	ldrb	r2, [r3, #16]
 8002f68:	f88d 2000 	strb.w	r2, [sp]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f70:	f005 fc2e 	bl	80087d0 <USB_HostInit>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e004      	b.n	8002f90 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b08b      	sub	sp, #44	; 0x2c
 8002f9c:	af04      	add	r7, sp, #16
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	70fb      	strb	r3, [r7, #3]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70bb      	strb	r3, [r7, #2]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002fb2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002fb4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_HCD_HC_Init+0x2c>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e09d      	b.n	8003100 <HAL_HCD_HC_Init+0x168>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	3319      	adds	r3, #25
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	3314      	adds	r3, #20
 8002ff0:	787a      	ldrb	r2, [r7, #1]
 8002ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	3315      	adds	r3, #21
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3326      	adds	r3, #38	; 0x26
 8003018:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800301c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	78bb      	ldrb	r3, [r7, #2]
 8003022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003026:	b2d8      	uxtb	r0, r3
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	3316      	adds	r3, #22
 8003036:	4602      	mov	r2, r0
 8003038:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fbac 	bl	800379c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003044:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003048:	2b00      	cmp	r3, #0
 800304a:	da0a      	bge.n	8003062 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3317      	adds	r3, #23
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e009      	b.n	8003076 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	3317      	adds	r3, #23
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f005 fce2 	bl	8008a44 <USB_GetHostSpeed>
 8003080:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003082:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10b      	bne.n	80030a2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800308a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_HCD_HC_Init+0x10a>
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2bbc      	cmp	r3, #188	; 0xbc
 800309c:	d901      	bls.n	80030a2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800309e:	23bc      	movs	r3, #188	; 0xbc
 80030a0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3318      	adds	r3, #24
 80030b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80030b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	b298      	uxth	r0, r3
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3328      	adds	r3, #40	; 0x28
 80030cc:	4602      	mov	r2, r0
 80030ce:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	787c      	ldrb	r4, [r7, #1]
 80030da:	78ba      	ldrb	r2, [r7, #2]
 80030dc:	78f9      	ldrb	r1, [r7, #3]
 80030de:	9302      	str	r3, [sp, #8]
 80030e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4623      	mov	r3, r4
 80030ee:	f005 fcd1 	bl	8008a94 <USB_HC_Init>
 80030f2:	4603      	mov	r3, r0
 80030f4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003100:	4618      	mov	r0, r3
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}

08003108 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_HCD_HC_Halt+0x1e>
 8003122:	2302      	movs	r3, #2
 8003124:	e00f      	b.n	8003146 <HAL_HCD_HC_Halt+0x3e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f006 f863 	bl	8009202 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	461a      	mov	r2, r3
 800315e:	4603      	mov	r3, r0
 8003160:	70fb      	strb	r3, [r7, #3]
 8003162:	460b      	mov	r3, r1
 8003164:	70bb      	strb	r3, [r7, #2]
 8003166:	4613      	mov	r3, r2
 8003168:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3317      	adds	r3, #23
 800317a:	78ba      	ldrb	r2, [r7, #2]
 800317c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	3326      	adds	r3, #38	; 0x26
 800318e:	787a      	ldrb	r2, [r7, #1]
 8003190:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003192:	7c3b      	ldrb	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d114      	bne.n	80031c2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	332a      	adds	r3, #42	; 0x2a
 80031a8:	2203      	movs	r2, #3
 80031aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3319      	adds	r3, #25
 80031bc:	7f3a      	ldrb	r2, [r7, #28]
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e009      	b.n	80031d6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	332a      	adds	r3, #42	; 0x2a
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80031d6:	787b      	ldrb	r3, [r7, #1]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	f200 8102 	bhi.w	80033e2 <HAL_HCD_HC_SubmitRequest+0x292>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	080033cd 	.word	0x080033cd
 80031ec:	080032b9 	.word	0x080032b9
 80031f0:	08003343 	.word	0x08003343
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80031f4:	7c3b      	ldrb	r3, [r7, #16]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	f040 80f5 	bne.w	80033e6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80031fc:	78bb      	ldrb	r3, [r7, #2]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d12d      	bne.n	800325e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003202:	8b3b      	ldrh	r3, [r7, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d109      	bne.n	800321c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	333d      	adds	r3, #61	; 0x3d
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	333d      	adds	r3, #61	; 0x3d
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	332a      	adds	r3, #42	; 0x2a
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003246:	e0ce      	b.n	80033e6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	332a      	adds	r3, #42	; 0x2a
 8003258:	2202      	movs	r2, #2
 800325a:	701a      	strb	r2, [r3, #0]
      break;
 800325c:	e0c3      	b.n	80033e6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	331a      	adds	r3, #26
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 80b8 	bne.w	80033e6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	333c      	adds	r3, #60	; 0x3c
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	332a      	adds	r3, #42	; 0x2a
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
      break;
 80032a0:	e0a1      	b.n	80033e6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	332a      	adds	r3, #42	; 0x2a
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]
      break;
 80032b6:	e096      	b.n	80033e6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80032b8:	78bb      	ldrb	r3, [r7, #2]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d120      	bne.n	8003300 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	333d      	adds	r3, #61	; 0x3d
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	332a      	adds	r3, #42	; 0x2a
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80032e8:	e07e      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	332a      	adds	r3, #42	; 0x2a
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]
      break;
 80032fe:	e073      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	333c      	adds	r3, #60	; 0x3c
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10a      	bne.n	800332c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	332a      	adds	r3, #42	; 0x2a
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
      break;
 800332a:	e05d      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	332a      	adds	r3, #42	; 0x2a
 800333c:	2202      	movs	r2, #2
 800333e:	701a      	strb	r2, [r3, #0]
      break;
 8003340:	e052      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003342:	78bb      	ldrb	r3, [r7, #2]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d120      	bne.n	800338a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	333d      	adds	r3, #61	; 0x3d
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	332a      	adds	r3, #42	; 0x2a
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003372:	e039      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	332a      	adds	r3, #42	; 0x2a
 8003384:	2202      	movs	r2, #2
 8003386:	701a      	strb	r2, [r3, #0]
      break;
 8003388:	e02e      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	333c      	adds	r3, #60	; 0x3c
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	332a      	adds	r3, #42	; 0x2a
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
      break;
 80033b4:	e018      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	332a      	adds	r3, #42	; 0x2a
 80033c6:	2202      	movs	r2, #2
 80033c8:	701a      	strb	r2, [r3, #0]
      break;
 80033ca:	e00d      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	332a      	adds	r3, #42	; 0x2a
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
      break;
 80033e0:	e002      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80033e6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	332c      	adds	r3, #44	; 0x2c
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	8b39      	ldrh	r1, [r7, #24]
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4403      	add	r3, r0
 800340c:	3334      	adds	r3, #52	; 0x34
 800340e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	334c      	adds	r3, #76	; 0x4c
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	3338      	adds	r3, #56	; 0x38
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3315      	adds	r3, #21
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334d      	adds	r3, #77	; 0x4d
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	3310      	adds	r3, #16
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	1d19      	adds	r1, r3, #4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	799b      	ldrb	r3, [r3, #6]
 800347a:	461a      	mov	r2, r3
 800347c:	f005 fc36 	bl	8008cec <USB_HC_StartXfer>
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop

0800348c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f005 f954 	bl	8008750 <USB_GetMode>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	f040 80fb 	bne.w	80036a6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f005 f917 	bl	80086e8 <USB_ReadInterrupts>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80f1 	beq.w	80036a4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f005 f90e 	bl	80086e8 <USB_ReadInterrupts>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034d6:	d104      	bne.n	80034e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80034e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f005 f8fe 	bl	80086e8 <USB_ReadInterrupts>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f6:	d104      	bne.n	8003502 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003500:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f005 f8ee 	bl	80086e8 <USB_ReadInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003512:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003516:	d104      	bne.n	8003522 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003520:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f005 f8de 	bl	80086e8 <USB_ReadInterrupts>
 800352c:	4603      	mov	r3, r0
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b02      	cmp	r3, #2
 8003534:	d103      	bne.n	800353e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2202      	movs	r2, #2
 800353c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f005 f8d0 	bl	80086e8 <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800354e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003552:	d120      	bne.n	8003596 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800355c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d113      	bne.n	8003596 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800356e:	2110      	movs	r1, #16
 8003570:	6938      	ldr	r0, [r7, #16]
 8003572:	f004 ffc3 	bl	80084fc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003576:	6938      	ldr	r0, [r7, #16]
 8003578:	f004 fff2 	bl	8008560 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7a5b      	ldrb	r3, [r3, #9]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d105      	bne.n	8003590 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	4618      	mov	r0, r3
 800358c:	f005 f9e4 	bl	8008958 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f007 f973 	bl	800a87c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f005 f8a4 	bl	80086e8 <USB_ReadInterrupts>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035aa:	d102      	bne.n	80035b2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f001 fd17 	bl	8004fe0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f005 f896 	bl	80086e8 <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d106      	bne.n	80035d4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f007 f93c 	bl	800a844 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2208      	movs	r2, #8
 80035d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f005 f885 	bl	80086e8 <USB_ReadInterrupts>
 80035de:	4603      	mov	r3, r0
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035e8:	d139      	bne.n	800365e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f005 fdf6 	bl	80091e0 <USB_HC_ReadInterrupt>
 80035f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e025      	b.n	8003648 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d018      	beq.n	8003642 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003626:	d106      	bne.n	8003636 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8e9 	bl	8003806 <HCD_HC_IN_IRQHandler>
 8003634:	e005      	b.n	8003642 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 ff4b 	bl	80044d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3301      	adds	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	795b      	ldrb	r3, [r3, #5]
 800364c:	461a      	mov	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4293      	cmp	r3, r2
 8003652:	d3d3      	bcc.n	80035fc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800365c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f005 f840 	bl	80086e8 <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b10      	cmp	r3, #16
 8003670:	d101      	bne.n	8003676 <HAL_HCD_IRQHandler+0x1ea>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_HCD_IRQHandler+0x1ec>
 8003676:	2300      	movs	r3, #0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d014      	beq.n	80036a6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0210 	bic.w	r2, r2, #16
 800368a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f001 fbc8 	bl	8004e22 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699a      	ldr	r2, [r3, #24]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0210 	orr.w	r2, r2, #16
 80036a0:	619a      	str	r2, [r3, #24]
 80036a2:	e000      	b.n	80036a6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80036a4:	bf00      	nop
    }
  }
}
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_HCD_Start+0x16>
 80036be:	2302      	movs	r3, #2
 80036c0:	e013      	b.n	80036ea <HAL_HCD_Start+0x3e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2101      	movs	r1, #1
 80036d0:	4618      	mov	r0, r3
 80036d2:	f005 f97e 	bl	80089d2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f004 fea0 	bl	8008420 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_HCD_Stop+0x16>
 8003704:	2302      	movs	r3, #2
 8003706:	e00d      	b.n	8003724 <HAL_HCD_Stop+0x32>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f005 fed1 	bl	80094bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	334c      	adds	r3, #76	; 0x4c
 8003748:	781b      	ldrb	r3, [r3, #0]
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3338      	adds	r3, #56	; 0x38
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f005 f970 	bl	8008a72 <USB_GetCurrentFrame>
 8003792:	4603      	mov	r3, r0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	331a      	adds	r3, #26
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	331b      	adds	r3, #27
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	3325      	adds	r3, #37	; 0x25
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	3324      	adds	r3, #36	; 0x24
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f004 ff72 	bl	800870e <USB_ReadChInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d11a      	bne.n	800386a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	461a      	mov	r2, r3
 8003842:	2304      	movs	r3, #4
 8003844:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	334d      	adds	r3, #77	; 0x4d
 8003856:	2207      	movs	r2, #7
 8003858:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f005 fccd 	bl	8009202 <USB_HC_Halt>
 8003868:	e09e      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f004 ff4b 	bl	800870e <USB_ReadChInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d11b      	bne.n	80038bc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	461a      	mov	r2, r3
 8003892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003896:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	334d      	adds	r3, #77	; 0x4d
 80038a8:	2208      	movs	r2, #8
 80038aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f005 fca4 	bl	8009202 <USB_HC_Halt>
 80038ba:	e075      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f004 ff22 	bl	800870e <USB_ReadChInterrupts>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d11a      	bne.n	800390a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e0:	461a      	mov	r2, r3
 80038e2:	2308      	movs	r3, #8
 80038e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	334d      	adds	r3, #77	; 0x4d
 80038f6:	2206      	movs	r2, #6
 80038f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f005 fc7d 	bl	8009202 <USB_HC_Halt>
 8003908:	e04e      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f004 fefb 	bl	800870e <USB_ReadChInterrupts>
 8003918:	4603      	mov	r3, r0
 800391a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003922:	d11b      	bne.n	800395c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003936:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	334d      	adds	r3, #77	; 0x4d
 8003948:	2209      	movs	r2, #9
 800394a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f005 fc54 	bl	8009202 <USB_HC_Halt>
 800395a:	e025      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f004 fed2 	bl	800870e <USB_ReadChInterrupts>
 800396a:	4603      	mov	r3, r0
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d119      	bne.n	80039a8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	461a      	mov	r2, r3
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	334d      	adds	r3, #77	; 0x4d
 8003996:	2207      	movs	r2, #7
 8003998:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f005 fc2d 	bl	8009202 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f004 feac 	bl	800870e <USB_ReadChInterrupts>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c0:	d112      	bne.n	80039e8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f005 fc19 	bl	8009202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039dc:	461a      	mov	r2, r3
 80039de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039e2:	6093      	str	r3, [r2, #8]
 80039e4:	f000 bd75 	b.w	80044d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f004 fe8c 	bl	800870e <USB_ReadChInterrupts>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	f040 8128 	bne.w	8003c52 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2320      	movs	r3, #32
 8003a12:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	331b      	adds	r3, #27
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d119      	bne.n	8003a5e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	331b      	adds	r3, #27
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	0151      	lsls	r1, r2, #5
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	440a      	add	r2, r1
 8003a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	799b      	ldrb	r3, [r3, #6]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01b      	beq.n	8003a9e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	3330      	adds	r3, #48	; 0x30
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	1ac9      	subs	r1, r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4403      	add	r3, r0
 8003a9a:	3338      	adds	r3, #56	; 0x38
 8003a9c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	334d      	adds	r3, #77	; 0x4d
 8003aae:	2201      	movs	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3344      	adds	r3, #68	; 0x44
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	3326      	adds	r3, #38	; 0x26
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3326      	adds	r3, #38	; 0x26
 8003afe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d110      	bne.n	8003b26 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f005 fb78 	bl	8009202 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2310      	movs	r3, #16
 8003b22:	6093      	str	r3, [r2, #8]
 8003b24:	e03d      	b.n	8003ba2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	3326      	adds	r3, #38	; 0x26
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d00a      	beq.n	8003b52 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	3326      	adds	r3, #38	; 0x26
 8003b4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d127      	bne.n	8003ba2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	0151      	lsls	r1, r2, #5
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	440a      	add	r2, r1
 8003b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b70:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	334c      	adds	r3, #76	; 0x4c
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	334c      	adds	r3, #76	; 0x4c
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f006 fe7b 	bl	800a898 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	799b      	ldrb	r3, [r3, #6]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d13b      	bne.n	8003c22 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	3338      	adds	r3, #56	; 0x38
 8003bba:	6819      	ldr	r1, [r3, #0]
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4403      	add	r3, r0
 8003bca:	3328      	adds	r3, #40	; 0x28
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	440b      	add	r3, r1
 8003bd0:	1e59      	subs	r1, r3, #1
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4403      	add	r3, r0
 8003be0:	3328      	adds	r3, #40	; 0x28
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8470 	beq.w	80044d2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	333c      	adds	r3, #60	; 0x3c
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	f083 0301 	eor.w	r3, r3, #1
 8003c0a:	b2d8      	uxtb	r0, r3
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	333c      	adds	r3, #60	; 0x3c
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	f000 bc58 	b.w	80044d2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	333c      	adds	r3, #60	; 0x3c
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	f083 0301 	eor.w	r3, r3, #1
 8003c3a:	b2d8      	uxtb	r0, r3
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	333c      	adds	r3, #60	; 0x3c
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	f000 bc40 	b.w	80044d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	4611      	mov	r1, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f004 fd57 	bl	800870e <USB_ReadChInterrupts>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d131      	bne.n	8003cce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c76:	461a      	mov	r2, r3
 8003c78:	2320      	movs	r3, #32
 8003c7a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	331a      	adds	r3, #26
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	f040 841f 	bne.w	80044d2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	331b      	adds	r3, #27
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	334d      	adds	r3, #77	; 0x4d
 8003cb8:	2203      	movs	r2, #3
 8003cba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f005 fa9c 	bl	8009202 <USB_HC_Halt>
 8003cca:	f000 bc02 	b.w	80044d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f004 fd19 	bl	800870e <USB_ReadChInterrupts>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	f040 8305 	bne.w	80042f2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	334d      	adds	r3, #77	; 0x4d
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d114      	bne.n	8003d3a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	334d      	adds	r3, #77	; 0x4d
 8003d20:	2202      	movs	r2, #2
 8003d22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	334c      	adds	r3, #76	; 0x4c
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e2cc      	b.n	80042d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	334d      	adds	r3, #77	; 0x4d
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b06      	cmp	r3, #6
 8003d4e:	d114      	bne.n	8003d7a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	334d      	adds	r3, #77	; 0x4d
 8003d60:	2202      	movs	r2, #2
 8003d62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	334c      	adds	r3, #76	; 0x4c
 8003d74:	2205      	movs	r2, #5
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e2ac      	b.n	80042d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	334d      	adds	r3, #77	; 0x4d
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b07      	cmp	r3, #7
 8003d8e:	d00b      	beq.n	8003da8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	334d      	adds	r3, #77	; 0x4d
 8003da0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003da2:	2b09      	cmp	r3, #9
 8003da4:	f040 80a6 	bne.w	8003ef4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	334d      	adds	r3, #77	; 0x4d
 8003db8:	2202      	movs	r2, #2
 8003dba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3344      	adds	r3, #68	; 0x44
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	1c59      	adds	r1, r3, #1
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4403      	add	r3, r0
 8003ddc:	3344      	adds	r3, #68	; 0x44
 8003dde:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	3344      	adds	r3, #68	; 0x44
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d943      	bls.n	8003e7e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	3344      	adds	r3, #68	; 0x44
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	331a      	adds	r3, #26
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d123      	bne.n	8003e68 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	331b      	adds	r3, #27
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	331c      	adds	r3, #28
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	334c      	adds	r3, #76	; 0x4c
 8003e78:	2204      	movs	r2, #4
 8003e7a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e7c:	e229      	b.n	80042d2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	334c      	adds	r3, #76	; 0x4c
 8003e8e:	2202      	movs	r2, #2
 8003e90:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3326      	adds	r3, #38	; 0x26
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3326      	adds	r3, #38	; 0x26
 8003eb8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	f040 8209 	bne.w	80042d2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ed6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ede:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eec:	461a      	mov	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ef2:	e1ee      	b.n	80042d2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	334d      	adds	r3, #77	; 0x4d
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	f040 80c8 	bne.w	800409c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	334d      	adds	r3, #77	; 0x4d
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	331b      	adds	r3, #27
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	f040 81ce 	bne.w	80042d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3326      	adds	r3, #38	; 0x26
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d16b      	bne.n	8004026 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3348      	adds	r3, #72	; 0x48
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	1c59      	adds	r1, r3, #1
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4403      	add	r3, r0
 8003f6e:	3348      	adds	r3, #72	; 0x48
 8003f70:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	3348      	adds	r3, #72	; 0x48
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d943      	bls.n	8004010 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3348      	adds	r3, #72	; 0x48
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	331b      	adds	r3, #27
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3344      	adds	r3, #68	; 0x44
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d809      	bhi.n	8003fda <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	331c      	adds	r3, #28
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	0151      	lsls	r1, r2, #5
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	440a      	add	r2, r1
 8003ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	334c      	adds	r3, #76	; 0x4c
 800400a:	2204      	movs	r2, #4
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e014      	b.n	800403a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	334c      	adds	r3, #76	; 0x4c
 8004020:	2202      	movs	r2, #2
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e009      	b.n	800403a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	334c      	adds	r3, #76	; 0x4c
 8004036:	2202      	movs	r2, #2
 8004038:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3326      	adds	r3, #38	; 0x26
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3326      	adds	r3, #38	; 0x26
 8004060:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004062:	2b02      	cmp	r3, #2
 8004064:	f040 8136 	bne.w	80042d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800407e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004086:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	461a      	mov	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e11b      	b.n	80042d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	334d      	adds	r3, #77	; 0x4d
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	f040 8081 	bne.w	80041b6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	334d      	adds	r3, #77	; 0x4d
 80040c4:	2202      	movs	r2, #2
 80040c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	331b      	adds	r3, #27
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	f040 80fa 	bne.w	80042d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	334c      	adds	r3, #76	; 0x4c
 80040f0:	2202      	movs	r2, #2
 80040f2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	440a      	add	r2, r1
 800410a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800410e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004112:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	440a      	add	r2, r1
 800412a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800412e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004132:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	440a      	add	r2, r1
 800414a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800414e:	f023 0320 	bic.w	r3, r3, #32
 8004152:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3326      	adds	r3, #38	; 0x26
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	3326      	adds	r3, #38	; 0x26
 800417a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800417c:	2b02      	cmp	r3, #2
 800417e:	f040 80a9 	bne.w	80042d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4413      	add	r3, r2
 800418a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004198:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041a0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e08e      	b.n	80042d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80041b6:	78fa      	ldrb	r2, [r7, #3]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	334d      	adds	r3, #77	; 0x4d
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d143      	bne.n	8004254 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	334d      	adds	r3, #77	; 0x4d
 80041dc:	2202      	movs	r2, #2
 80041de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	334c      	adds	r3, #76	; 0x4c
 80041f0:	2202      	movs	r2, #2
 80041f2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	3326      	adds	r3, #38	; 0x26
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	3326      	adds	r3, #38	; 0x26
 800421a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800421c:	2b02      	cmp	r3, #2
 800421e:	d159      	bne.n	80042d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004236:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800423e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4413      	add	r3, r2
 8004248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424c:	461a      	mov	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e03f      	b.n	80042d4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	334d      	adds	r3, #77	; 0x4d
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b08      	cmp	r3, #8
 8004268:	d126      	bne.n	80042b8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	334d      	adds	r3, #77	; 0x4d
 800427a:	2202      	movs	r2, #2
 800427c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3344      	adds	r3, #68	; 0x44
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	1c59      	adds	r1, r3, #1
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4403      	add	r3, r0
 800429e:	3344      	adds	r3, #68	; 0x44
 80042a0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	334c      	adds	r3, #76	; 0x4c
 80042b2:	2204      	movs	r2, #4
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e00d      	b.n	80042d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	334d      	adds	r3, #77	; 0x4d
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	f000 8100 	beq.w	80044d0 <HCD_HC_IN_IRQHandler+0xcca>
 80042d0:	e000      	b.n	80042d4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042d2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	334c      	adds	r3, #76	; 0x4c
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f006 fad4 	bl	800a898 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042f0:	e0ef      	b.n	80044d2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f004 fa07 	bl	800870e <USB_ReadChInterrupts>
 8004300:	4603      	mov	r3, r0
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d12f      	bne.n	800436a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004316:	461a      	mov	r2, r3
 8004318:	2340      	movs	r3, #64	; 0x40
 800431a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	334d      	adds	r3, #77	; 0x4d
 800432c:	2205      	movs	r2, #5
 800432e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	331a      	adds	r3, #26
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	3344      	adds	r3, #68	; 0x44
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f004 ff4d 	bl	8009202 <USB_HC_Halt>
 8004368:	e0b3      	b.n	80044d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f004 f9cb 	bl	800870e <USB_ReadChInterrupts>
 8004378:	4603      	mov	r3, r0
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b10      	cmp	r3, #16
 8004380:	f040 80a7 	bne.w	80044d2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	3326      	adds	r3, #38	; 0x26
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d11b      	bne.n	80043d2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	3344      	adds	r3, #68	; 0x44
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	334d      	adds	r3, #77	; 0x4d
 80043be:	2204      	movs	r2, #4
 80043c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f004 ff19 	bl	8009202 <USB_HC_Halt>
 80043d0:	e03f      	b.n	8004452 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3326      	adds	r3, #38	; 0x26
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3326      	adds	r3, #38	; 0x26
 80043f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d129      	bne.n	8004452 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3344      	adds	r3, #68	; 0x44
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	799b      	ldrb	r3, [r3, #6]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HCD_HC_IN_IRQHandler+0xc2a>
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	331b      	adds	r3, #27
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d110      	bne.n	8004452 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	334d      	adds	r3, #77	; 0x4d
 8004440:	2204      	movs	r2, #4
 8004442:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f004 fed8 	bl	8009202 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	331b      	adds	r3, #27
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d129      	bne.n	80044bc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	331b      	adds	r3, #27
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	0151      	lsls	r1, r2, #5
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	440a      	add	r2, r1
 8004492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044b6:	f043 0320 	orr.w	r3, r3, #32
 80044ba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c8:	461a      	mov	r2, r3
 80044ca:	2310      	movs	r3, #16
 80044cc:	6093      	str	r3, [r2, #8]
 80044ce:	e000      	b.n	80044d2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80044d0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f004 f909 	bl	800870e <USB_ReadChInterrupts>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b04      	cmp	r3, #4
 8004504:	d11b      	bne.n	800453e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4413      	add	r3, r2
 800450e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004512:	461a      	mov	r2, r3
 8004514:	2304      	movs	r3, #4
 8004516:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	334d      	adds	r3, #77	; 0x4d
 8004528:	2207      	movs	r2, #7
 800452a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f004 fe64 	bl	8009202 <USB_HC_Halt>
 800453a:	f000 bc6f 	b.w	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	78fa      	ldrb	r2, [r7, #3]
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f004 f8e1 	bl	800870e <USB_ReadChInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b20      	cmp	r3, #32
 8004554:	f040 8082 	bne.w	800465c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004564:	461a      	mov	r2, r3
 8004566:	2320      	movs	r3, #32
 8004568:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	3319      	adds	r3, #25
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d124      	bne.n	80045ca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3319      	adds	r3, #25
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	334c      	adds	r3, #76	; 0x4c
 80045a4:	2202      	movs	r2, #2
 80045a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	334d      	adds	r3, #77	; 0x4d
 80045b8:	2203      	movs	r2, #3
 80045ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f004 fe1c 	bl	8009202 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	331a      	adds	r3, #26
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	f040 841d 	bne.w	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	331b      	adds	r3, #27
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 8411 	bne.w	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	3326      	adds	r3, #38	; 0x26
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d009      	beq.n	8004624 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	331b      	adds	r3, #27
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334d      	adds	r3, #77	; 0x4d
 8004634:	2203      	movs	r2, #3
 8004636:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f004 fdde 	bl	8009202 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	3344      	adds	r3, #68	; 0x44
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e3df      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f004 f852 	bl	800870e <USB_ReadChInterrupts>
 800466a:	4603      	mov	r3, r0
 800466c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004674:	d111      	bne.n	800469a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4413      	add	r3, r2
 800467e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004682:	461a      	mov	r2, r3
 8004684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004688:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f004 fdb5 	bl	8009202 <USB_HC_Halt>
 8004698:	e3c0      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f004 f833 	bl	800870e <USB_ReadChInterrupts>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d168      	bne.n	8004784 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	3344      	adds	r3, #68	; 0x44
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f004 f81d 	bl	800870e <USB_ReadChInterrupts>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b40      	cmp	r3, #64	; 0x40
 80046dc:	d112      	bne.n	8004704 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	3319      	adds	r3, #25
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fe:	461a      	mov	r2, r3
 8004700:	2340      	movs	r3, #64	; 0x40
 8004702:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	331b      	adds	r3, #27
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d019      	beq.n	800474e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	331b      	adds	r3, #27
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	440a      	add	r2, r1
 8004744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	461a      	mov	r2, r3
 800475c:	2301      	movs	r3, #1
 800475e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	334d      	adds	r3, #77	; 0x4d
 8004770:	2201      	movs	r2, #1
 8004772:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f004 fd40 	bl	8009202 <USB_HC_Halt>
 8004782:	e34b      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f003 ffbe 	bl	800870e <USB_ReadChInterrupts>
 8004792:	4603      	mov	r3, r0
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d139      	bne.n	8004810 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	334d      	adds	r3, #77	; 0x4d
 80047ac:	2205      	movs	r2, #5
 80047ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	331a      	adds	r3, #26
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3319      	adds	r3, #25
 80047d6:	2201      	movs	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	3344      	adds	r3, #68	; 0x44
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f004 fd03 	bl	8009202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4413      	add	r3, r2
 8004804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004808:	461a      	mov	r2, r3
 800480a:	2340      	movs	r3, #64	; 0x40
 800480c:	6093      	str	r3, [r2, #8]
 800480e:	e305      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f003 ff78 	bl	800870e <USB_ReadChInterrupts>
 800481e:	4603      	mov	r3, r0
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b08      	cmp	r3, #8
 8004826:	d11a      	bne.n	800485e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004834:	461a      	mov	r2, r3
 8004836:	2308      	movs	r3, #8
 8004838:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	334d      	adds	r3, #77	; 0x4d
 800484a:	2206      	movs	r2, #6
 800484c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f004 fcd3 	bl	8009202 <USB_HC_Halt>
 800485c:	e2de      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f003 ff51 	bl	800870e <USB_ReadChInterrupts>
 800486c:	4603      	mov	r3, r0
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b10      	cmp	r3, #16
 8004874:	d144      	bne.n	8004900 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004876:	78fa      	ldrb	r2, [r7, #3]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	3344      	adds	r3, #68	; 0x44
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	334d      	adds	r3, #77	; 0x4d
 800489a:	2204      	movs	r2, #4
 800489c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	3319      	adds	r3, #25
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d114      	bne.n	80048de <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80048b4:	78fa      	ldrb	r2, [r7, #3]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	3318      	adds	r3, #24
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80048ca:	78fa      	ldrb	r2, [r7, #3]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	3319      	adds	r3, #25
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f004 fc8b 	bl	8009202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f8:	461a      	mov	r2, r3
 80048fa:	2310      	movs	r3, #16
 80048fc:	6093      	str	r3, [r2, #8]
 80048fe:	e28d      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	4611      	mov	r1, r2
 8004908:	4618      	mov	r0, r3
 800490a:	f003 ff00 	bl	800870e <USB_ReadChInterrupts>
 800490e:	4603      	mov	r3, r0
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d169      	bne.n	80049ec <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	799b      	ldrb	r3, [r3, #6]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d111      	bne.n	8004944 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	334d      	adds	r3, #77	; 0x4d
 8004930:	2207      	movs	r2, #7
 8004932:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	4611      	mov	r1, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f004 fc60 	bl	8009202 <USB_HC_Halt>
 8004942:	e049      	b.n	80049d8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	3344      	adds	r3, #68	; 0x44
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4403      	add	r3, r0
 8004964:	3344      	adds	r3, #68	; 0x44
 8004966:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	3344      	adds	r3, #68	; 0x44
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d922      	bls.n	80049c4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3344      	adds	r3, #68	; 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	334c      	adds	r3, #76	; 0x4c
 80049a2:	2204      	movs	r2, #4
 80049a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	334c      	adds	r3, #76	; 0x4c
 80049b6:	781a      	ldrb	r2, [r3, #0]
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f005 ff6b 	bl	800a898 <HAL_HCD_HC_NotifyURBChange_Callback>
 80049c2:	e009      	b.n	80049d8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	334c      	adds	r3, #76	; 0x4c
 80049d4:	2202      	movs	r2, #2
 80049d6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e4:	461a      	mov	r2, r3
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	6093      	str	r3, [r2, #8]
 80049ea:	e217      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	78fa      	ldrb	r2, [r7, #3]
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f003 fe8a 	bl	800870e <USB_ReadChInterrupts>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a04:	d11b      	bne.n	8004a3e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	334d      	adds	r3, #77	; 0x4d
 8004a16:	2209      	movs	r2, #9
 8004a18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f004 fbed 	bl	8009202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	461a      	mov	r2, r3
 8004a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3a:	6093      	str	r3, [r2, #8]
 8004a3c:	e1ee      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f003 fe61 	bl	800870e <USB_ReadChInterrupts>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	f040 81df 	bne.w	8004e16 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	461a      	mov	r2, r3
 8004a66:	2302      	movs	r3, #2
 8004a68:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	334d      	adds	r3, #77	; 0x4d
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	f040 8093 	bne.w	8004ba8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	334d      	adds	r3, #77	; 0x4d
 8004a92:	2202      	movs	r2, #2
 8004a94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	334c      	adds	r3, #76	; 0x4c
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	3326      	adds	r3, #38	; 0x26
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d00b      	beq.n	8004ad8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	3326      	adds	r3, #38	; 0x26
 8004ad0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	f040 8190 	bne.w	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	799b      	ldrb	r3, [r3, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d115      	bne.n	8004b0c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004ae0:	78fa      	ldrb	r2, [r7, #3]
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	333d      	adds	r3, #61	; 0x3d
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	f083 0301 	eor.w	r3, r3, #1
 8004af8:	b2d8      	uxtb	r0, r3
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	333d      	adds	r3, #61	; 0x3d
 8004b08:	4602      	mov	r2, r0
 8004b0a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	799b      	ldrb	r3, [r3, #6]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	f040 8171 	bne.w	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3334      	adds	r3, #52	; 0x34
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8165 	beq.w	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	3334      	adds	r3, #52	; 0x34
 8004b3e:	6819      	ldr	r1, [r3, #0]
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4403      	add	r3, r0
 8004b4e:	3328      	adds	r3, #40	; 0x28
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	440b      	add	r3, r1
 8004b54:	1e59      	subs	r1, r3, #1
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4403      	add	r3, r0
 8004b64:	3328      	adds	r3, #40	; 0x28
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b6c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 813f 	beq.w	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	333d      	adds	r3, #61	; 0x3d
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	f083 0301 	eor.w	r3, r3, #1
 8004b92:	b2d8      	uxtb	r0, r3
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	333d      	adds	r3, #61	; 0x3d
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	e127      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	334d      	adds	r3, #77	; 0x4d
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d120      	bne.n	8004c00 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	334d      	adds	r3, #77	; 0x4d
 8004bce:	2202      	movs	r2, #2
 8004bd0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	331b      	adds	r3, #27
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	f040 8107 	bne.w	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	334c      	adds	r3, #76	; 0x4c
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e0fb      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	334d      	adds	r3, #77	; 0x4d
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d13a      	bne.n	8004c8c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	334d      	adds	r3, #77	; 0x4d
 8004c26:	2202      	movs	r2, #2
 8004c28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	334c      	adds	r3, #76	; 0x4c
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	331b      	adds	r3, #27
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f040 80d1 	bne.w	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	331b      	adds	r3, #27
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c88:	6053      	str	r3, [r2, #4]
 8004c8a:	e0b5      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004c8c:	78fa      	ldrb	r2, [r7, #3]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	334d      	adds	r3, #77	; 0x4d
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d114      	bne.n	8004ccc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	334d      	adds	r3, #77	; 0x4d
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	334c      	adds	r3, #76	; 0x4c
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e095      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	334d      	adds	r3, #77	; 0x4d
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b06      	cmp	r3, #6
 8004ce0:	d114      	bne.n	8004d0c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	334d      	adds	r3, #77	; 0x4d
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	334c      	adds	r3, #76	; 0x4c
 8004d06:	2205      	movs	r2, #5
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e075      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	334d      	adds	r3, #77	; 0x4d
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b07      	cmp	r3, #7
 8004d20:	d00a      	beq.n	8004d38 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	334d      	adds	r3, #77	; 0x4d
 8004d32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004d34:	2b09      	cmp	r3, #9
 8004d36:	d170      	bne.n	8004e1a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	334d      	adds	r3, #77	; 0x4d
 8004d48:	2202      	movs	r2, #2
 8004d4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3344      	adds	r3, #68	; 0x44
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	1c59      	adds	r1, r3, #1
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4403      	add	r3, r0
 8004d6c:	3344      	adds	r3, #68	; 0x44
 8004d6e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3344      	adds	r3, #68	; 0x44
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d914      	bls.n	8004db0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	3344      	adds	r3, #68	; 0x44
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	334c      	adds	r3, #76	; 0x4c
 8004daa:	2204      	movs	r2, #4
 8004dac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004dae:	e022      	b.n	8004df6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	334c      	adds	r3, #76	; 0x4c
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dda:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004de2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df0:	461a      	mov	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004df6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	334c      	adds	r3, #76	; 0x4c
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f005 fd42 	bl	800a898 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e14:	e002      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004e1a:	bf00      	nop
  }
}
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b08a      	sub	sp, #40	; 0x28
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	0c5b      	lsrs	r3, r3, #17
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e56:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d004      	beq.n	8004e68 <HCD_RXQLVL_IRQHandler+0x46>
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b05      	cmp	r3, #5
 8004e62:	f000 80b6 	beq.w	8004fd2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e66:	e0b7      	b.n	8004fd8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80b3 	beq.w	8004fd6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	332c      	adds	r3, #44	; 0x2c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80a7 	beq.w	8004fd6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3338      	adds	r3, #56	; 0x38
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	18d1      	adds	r1, r2, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4403      	add	r3, r0
 8004eac:	3334      	adds	r3, #52	; 0x34
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4299      	cmp	r1, r3
 8004eb2:	f200 8083 	bhi.w	8004fbc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	332c      	adds	r3, #44	; 0x2c
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	b292      	uxth	r2, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	f003 fbb1 	bl	8008638 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	332c      	adds	r3, #44	; 0x2c
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	18d1      	adds	r1, r2, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4403      	add	r3, r0
 8004efa:	332c      	adds	r3, #44	; 0x2c
 8004efc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4613      	mov	r3, r2
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3338      	adds	r3, #56	; 0x38
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	18d1      	adds	r1, r2, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4403      	add	r3, r0
 8004f22:	3338      	adds	r3, #56	; 0x38
 8004f24:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	0cdb      	lsrs	r3, r3, #19
 8004f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f3a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	3328      	adds	r3, #40	; 0x28
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d13f      	bne.n	8004fd6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d03c      	beq.n	8004fd6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f72:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f7a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f88:	461a      	mov	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4613      	mov	r3, r2
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	333c      	adds	r3, #60	; 0x3c
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f083 0301 	eor.w	r3, r3, #1
 8004fa4:	b2d8      	uxtb	r0, r3
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4613      	mov	r3, r2
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	1a9b      	subs	r3, r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	333c      	adds	r3, #60	; 0x3c
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	701a      	strb	r2, [r3, #0]
      break;
 8004fba:	e00c      	b.n	8004fd6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	334c      	adds	r3, #76	; 0x4c
 8004fcc:	2204      	movs	r2, #4
 8004fce:	701a      	strb	r2, [r3, #0]
      break;
 8004fd0:	e001      	b.n	8004fd6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e000      	b.n	8004fd8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004fd6:	bf00      	nop
  }
}
 8004fd8:	bf00      	nop
 8004fda:	3728      	adds	r7, #40	; 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800500c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b02      	cmp	r3, #2
 8005016:	d10b      	bne.n	8005030 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d102      	bne.n	8005028 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f005 fc1c 	bl	800a860 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f043 0302 	orr.w	r3, r3, #2
 800502e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b08      	cmp	r3, #8
 8005038:	d132      	bne.n	80050a0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f043 0308 	orr.w	r3, r3, #8
 8005040:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b04      	cmp	r3, #4
 800504a:	d126      	bne.n	800509a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	7a5b      	ldrb	r3, [r3, #9]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d113      	bne.n	800507c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800505a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800505e:	d106      	bne.n	800506e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2102      	movs	r1, #2
 8005066:	4618      	mov	r0, r3
 8005068:	f003 fc76 	bl	8008958 <USB_InitFSLSPClkSel>
 800506c:	e011      	b.n	8005092 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2101      	movs	r1, #1
 8005074:	4618      	mov	r0, r3
 8005076:	f003 fc6f 	bl	8008958 <USB_InitFSLSPClkSel>
 800507a:	e00a      	b.n	8005092 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	79db      	ldrb	r3, [r3, #7]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d106      	bne.n	8005092 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800508a:	461a      	mov	r2, r3
 800508c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005090:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f005 fc0e 	bl	800a8b4 <HAL_HCD_PortEnabled_Callback>
 8005098:	e002      	b.n	80050a0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f005 fc18 	bl	800a8d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d103      	bne.n	80050b2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f043 0320 	orr.w	r3, r3, #32
 80050b0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050b8:	461a      	mov	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6013      	str	r3, [r2, #0]
}
 80050be:	bf00      	nop
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e12b      	b.n	8005332 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fc fc7c 	bl	80019ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2224      	movs	r2, #36	; 0x24
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0201 	bic.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800511a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800512a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800512c:	f001 fa20 	bl	8006570 <HAL_RCC_GetPCLK1Freq>
 8005130:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	4a81      	ldr	r2, [pc, #516]	; (800533c <HAL_I2C_Init+0x274>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d807      	bhi.n	800514c <HAL_I2C_Init+0x84>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4a80      	ldr	r2, [pc, #512]	; (8005340 <HAL_I2C_Init+0x278>)
 8005140:	4293      	cmp	r3, r2
 8005142:	bf94      	ite	ls
 8005144:	2301      	movls	r3, #1
 8005146:	2300      	movhi	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	e006      	b.n	800515a <HAL_I2C_Init+0x92>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4a7d      	ldr	r2, [pc, #500]	; (8005344 <HAL_I2C_Init+0x27c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	bf94      	ite	ls
 8005154:	2301      	movls	r3, #1
 8005156:	2300      	movhi	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e0e7      	b.n	8005332 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a78      	ldr	r2, [pc, #480]	; (8005348 <HAL_I2C_Init+0x280>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	0c9b      	lsrs	r3, r3, #18
 800516c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4a6a      	ldr	r2, [pc, #424]	; (800533c <HAL_I2C_Init+0x274>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d802      	bhi.n	800519c <HAL_I2C_Init+0xd4>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	3301      	adds	r3, #1
 800519a:	e009      	b.n	80051b0 <HAL_I2C_Init+0xe8>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	4a69      	ldr	r2, [pc, #420]	; (800534c <HAL_I2C_Init+0x284>)
 80051a8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ac:	099b      	lsrs	r3, r3, #6
 80051ae:	3301      	adds	r3, #1
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	495c      	ldr	r1, [pc, #368]	; (800533c <HAL_I2C_Init+0x274>)
 80051cc:	428b      	cmp	r3, r1
 80051ce:	d819      	bhi.n	8005204 <HAL_I2C_Init+0x13c>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	1e59      	subs	r1, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	fbb1 f3f3 	udiv	r3, r1, r3
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051e4:	400b      	ands	r3, r1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_I2C_Init+0x138>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1e59      	subs	r1, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80051f8:	3301      	adds	r3, #1
 80051fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051fe:	e051      	b.n	80052a4 <HAL_I2C_Init+0x1dc>
 8005200:	2304      	movs	r3, #4
 8005202:	e04f      	b.n	80052a4 <HAL_I2C_Init+0x1dc>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d111      	bne.n	8005230 <HAL_I2C_Init+0x168>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1e58      	subs	r0, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	440b      	add	r3, r1
 800521a:	fbb0 f3f3 	udiv	r3, r0, r3
 800521e:	3301      	adds	r3, #1
 8005220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005224:	2b00      	cmp	r3, #0
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e012      	b.n	8005256 <HAL_I2C_Init+0x18e>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	1e58      	subs	r0, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6859      	ldr	r1, [r3, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	0099      	lsls	r1, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	fbb0 f3f3 	udiv	r3, r0, r3
 8005246:	3301      	adds	r3, #1
 8005248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_Init+0x196>
 800525a:	2301      	movs	r3, #1
 800525c:	e022      	b.n	80052a4 <HAL_I2C_Init+0x1dc>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10e      	bne.n	8005284 <HAL_I2C_Init+0x1bc>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1e58      	subs	r0, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6859      	ldr	r1, [r3, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	440b      	add	r3, r1
 8005274:	fbb0 f3f3 	udiv	r3, r0, r3
 8005278:	3301      	adds	r3, #1
 800527a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005282:	e00f      	b.n	80052a4 <HAL_I2C_Init+0x1dc>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1e58      	subs	r0, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6859      	ldr	r1, [r3, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	0099      	lsls	r1, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	fbb0 f3f3 	udiv	r3, r0, r3
 800529a:	3301      	adds	r3, #1
 800529c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	6809      	ldr	r1, [r1, #0]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6911      	ldr	r1, [r2, #16]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	68d2      	ldr	r2, [r2, #12]
 80052de:	4311      	orrs	r1, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	430b      	orrs	r3, r1
 80052e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	000186a0 	.word	0x000186a0
 8005340:	001e847f 	.word	0x001e847f
 8005344:	003d08ff 	.word	0x003d08ff
 8005348:	431bde83 	.word	0x431bde83
 800534c:	10624dd3 	.word	0x10624dd3

08005350 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e128      	b.n	80055b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a90      	ldr	r2, [pc, #576]	; (80055bc <HAL_I2S_Init+0x26c>)
 800537a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fc fb7d 	bl	8001a7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005398:	f023 030f 	bic.w	r3, r3, #15
 800539c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2202      	movs	r2, #2
 80053a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d060      	beq.n	8005470 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80053b6:	2310      	movs	r3, #16
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e001      	b.n	80053c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80053bc:	2320      	movs	r3, #32
 80053be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d802      	bhi.n	80053ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80053ce:	2001      	movs	r0, #1
 80053d0:	f001 f9d8 	bl	8006784 <HAL_RCCEx_GetPeriphCLKFreq>
 80053d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053de:	d125      	bne.n	800542c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d010      	beq.n	800540a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	461a      	mov	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	3305      	adds	r3, #5
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	e01f      	b.n	800544a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	fbb2 f2f3 	udiv	r2, r2, r3
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	461a      	mov	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	3305      	adds	r3, #5
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	e00e      	b.n	800544a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	fbb2 f2f3 	udiv	r2, r2, r3
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	461a      	mov	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	fbb2 f3f3 	udiv	r3, r2, r3
 8005446:	3305      	adds	r3, #5
 8005448:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4a5c      	ldr	r2, [pc, #368]	; (80055c0 <HAL_I2S_Init+0x270>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	08db      	lsrs	r3, r3, #3
 8005454:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	085b      	lsrs	r3, r3, #1
 8005466:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	e003      	b.n	8005478 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005470:	2302      	movs	r3, #2
 8005472:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d902      	bls.n	8005484 <HAL_I2S_Init+0x134>
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2bff      	cmp	r3, #255	; 0xff
 8005482:	d907      	bls.n	8005494 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005488:	f043 0210 	orr.w	r2, r3, #16
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e08f      	b.n	80055b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	ea42 0103 	orr.w	r1, r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80054b2:	f023 030f 	bic.w	r3, r3, #15
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6851      	ldr	r1, [r2, #4]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6892      	ldr	r2, [r2, #8]
 80054be:	4311      	orrs	r1, r2
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	68d2      	ldr	r2, [r2, #12]
 80054c4:	4311      	orrs	r1, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6992      	ldr	r2, [r2, #24]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d161      	bne.n	80055a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a38      	ldr	r2, [pc, #224]	; (80055c4 <HAL_I2S_Init+0x274>)
 80054e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a37      	ldr	r2, [pc, #220]	; (80055c8 <HAL_I2S_Init+0x278>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <HAL_I2S_Init+0x1a4>
 80054f0:	4b36      	ldr	r3, [pc, #216]	; (80055cc <HAL_I2S_Init+0x27c>)
 80054f2:	e001      	b.n	80054f8 <HAL_I2S_Init+0x1a8>
 80054f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	4932      	ldr	r1, [pc, #200]	; (80055c8 <HAL_I2S_Init+0x278>)
 8005500:	428a      	cmp	r2, r1
 8005502:	d101      	bne.n	8005508 <HAL_I2S_Init+0x1b8>
 8005504:	4a31      	ldr	r2, [pc, #196]	; (80055cc <HAL_I2S_Init+0x27c>)
 8005506:	e001      	b.n	800550c <HAL_I2S_Init+0x1bc>
 8005508:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800550c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005510:	f023 030f 	bic.w	r3, r3, #15
 8005514:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a2b      	ldr	r2, [pc, #172]	; (80055c8 <HAL_I2S_Init+0x278>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d101      	bne.n	8005524 <HAL_I2S_Init+0x1d4>
 8005520:	4b2a      	ldr	r3, [pc, #168]	; (80055cc <HAL_I2S_Init+0x27c>)
 8005522:	e001      	b.n	8005528 <HAL_I2S_Init+0x1d8>
 8005524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005528:	2202      	movs	r2, #2
 800552a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a25      	ldr	r2, [pc, #148]	; (80055c8 <HAL_I2S_Init+0x278>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d101      	bne.n	800553a <HAL_I2S_Init+0x1ea>
 8005536:	4b25      	ldr	r3, [pc, #148]	; (80055cc <HAL_I2S_Init+0x27c>)
 8005538:	e001      	b.n	800553e <HAL_I2S_Init+0x1ee>
 800553a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800554a:	d003      	beq.n	8005554 <HAL_I2S_Init+0x204>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	e001      	b.n	8005560 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800555c:	2300      	movs	r3, #0
 800555e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800556a:	4313      	orrs	r3, r2
 800556c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005574:	4313      	orrs	r3, r2
 8005576:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800557e:	4313      	orrs	r3, r2
 8005580:	b29a      	uxth	r2, r3
 8005582:	897b      	ldrh	r3, [r7, #10]
 8005584:	4313      	orrs	r3, r2
 8005586:	b29b      	uxth	r3, r3
 8005588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800558c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a0d      	ldr	r2, [pc, #52]	; (80055c8 <HAL_I2S_Init+0x278>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d101      	bne.n	800559c <HAL_I2S_Init+0x24c>
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <HAL_I2S_Init+0x27c>)
 800559a:	e001      	b.n	80055a0 <HAL_I2S_Init+0x250>
 800559c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055a0:	897a      	ldrh	r2, [r7, #10]
 80055a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	080056c7 	.word	0x080056c7
 80055c0:	cccccccd 	.word	0xcccccccd
 80055c4:	080057dd 	.word	0x080057dd
 80055c8:	40003800 	.word	0x40003800
 80055cc:	40003400 	.word	0x40003400

080055d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	881a      	ldrh	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10e      	bne.n	8005660 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005650:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff ffb8 	bl	80055d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	b292      	uxth	r2, r2
 800567c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	1c9a      	adds	r2, r3, #2
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10e      	bne.n	80056be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff93 	bl	80055e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d13a      	bne.n	8005758 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d109      	bne.n	8005700 <I2S_IRQHandler+0x3a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b40      	cmp	r3, #64	; 0x40
 80056f8:	d102      	bne.n	8005700 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff ffb4 	bl	8005668 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d126      	bne.n	8005758 <I2S_IRQHandler+0x92>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b20      	cmp	r3, #32
 8005716:	d11f      	bne.n	8005758 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005726:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	f043 0202 	orr.w	r2, r3, #2
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff ff50 	bl	80055f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b03      	cmp	r3, #3
 8005762:	d136      	bne.n	80057d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b02      	cmp	r3, #2
 800576c:	d109      	bne.n	8005782 <I2S_IRQHandler+0xbc>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005778:	2b80      	cmp	r3, #128	; 0x80
 800577a:	d102      	bne.n	8005782 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ff45 	bl	800560c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b08      	cmp	r3, #8
 800578a:	d122      	bne.n	80057d2 <I2S_IRQHandler+0x10c>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b20      	cmp	r3, #32
 8005798:	d11b      	bne.n	80057d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c4:	f043 0204 	orr.w	r2, r3, #4
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ff13 	bl	80055f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057d2:	bf00      	nop
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a92      	ldr	r2, [pc, #584]	; (8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d101      	bne.n	80057fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80057f6:	4b92      	ldr	r3, [pc, #584]	; (8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057f8:	e001      	b.n	80057fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80057fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a8b      	ldr	r2, [pc, #556]	; (8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d101      	bne.n	8005818 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005814:	4b8a      	ldr	r3, [pc, #552]	; (8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005816:	e001      	b.n	800581c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005828:	d004      	beq.n	8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f040 8099 	bne.w	8005966 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b02      	cmp	r3, #2
 800583c:	d107      	bne.n	800584e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f925 	bl	8005a98 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b01      	cmp	r3, #1
 8005856:	d107      	bne.n	8005868 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9c8 	bl	8005bf8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d13a      	bne.n	80058e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b00      	cmp	r3, #0
 800587a:	d035      	beq.n	80058e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a6e      	ldr	r2, [pc, #440]	; (8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005886:	4b6e      	ldr	r3, [pc, #440]	; (8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005888:	e001      	b.n	800588e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800588a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4969      	ldr	r1, [pc, #420]	; (8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005896:	428b      	cmp	r3, r1
 8005898:	d101      	bne.n	800589e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800589a:	4b69      	ldr	r3, [pc, #420]	; (8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800589c:	e001      	b.n	80058a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800589e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058da:	f043 0202 	orr.w	r2, r3, #2
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fe88 	bl	80055f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	f040 80c3 	bne.w	8005a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 80bd 	beq.w	8005a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800590e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a49      	ldr	r2, [pc, #292]	; (8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d101      	bne.n	800591e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800591a:	4b49      	ldr	r3, [pc, #292]	; (8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800591c:	e001      	b.n	8005922 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800591e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4944      	ldr	r1, [pc, #272]	; (8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800592a:	428b      	cmp	r3, r1
 800592c:	d101      	bne.n	8005932 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800592e:	4b44      	ldr	r3, [pc, #272]	; (8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005930:	e001      	b.n	8005936 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005936:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800593a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800593c:	2300      	movs	r3, #0
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005956:	f043 0204 	orr.w	r2, r3, #4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff fe4a 	bl	80055f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005964:	e089      	b.n	8005a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b02      	cmp	r3, #2
 800596e:	d107      	bne.n	8005980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f8be 	bl	8005afc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b01      	cmp	r3, #1
 8005988:	d107      	bne.n	800599a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f8fd 	bl	8005b94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	2b40      	cmp	r3, #64	; 0x40
 80059a2:	d12f      	bne.n	8005a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d02a      	beq.n	8005a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d101      	bne.n	80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059ca:	e001      	b.n	80059d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80059cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4919      	ldr	r1, [pc, #100]	; (8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059d8:	428b      	cmp	r3, r1
 80059da:	d101      	bne.n	80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80059dc:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059de:	e001      	b.n	80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80059e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f6:	f043 0202 	orr.w	r2, r3, #2
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff fdfa 	bl	80055f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d136      	bne.n	8005a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d031      	beq.n	8005a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d101      	bne.n	8005a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a24:	e001      	b.n	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4902      	ldr	r1, [pc, #8]	; (8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a32:	428b      	cmp	r3, r1
 8005a34:	d106      	bne.n	8005a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005a36:	4b02      	ldr	r3, [pc, #8]	; (8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a38:	e006      	b.n	8005a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005a3a:	bf00      	nop
 8005a3c:	40003800 	.word	0x40003800
 8005a40:	40003400 	.word	0x40003400
 8005a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a4c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f043 0204 	orr.w	r2, r3, #4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fdc0 	bl	80055f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a78:	e000      	b.n	8005a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a7a:	bf00      	nop
}
 8005a7c:	bf00      	nop
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	1c99      	adds	r1, r3, #2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6251      	str	r1, [r2, #36]	; 0x24
 8005aaa:	881a      	ldrh	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d113      	bne.n	8005af2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ad8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ffc9 	bl	8005a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	1c99      	adds	r1, r3, #2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6251      	str	r1, [r2, #36]	; 0x24
 8005b0e:	8819      	ldrh	r1, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1d      	ldr	r2, [pc, #116]	; (8005b8c <I2SEx_TxISR_I2SExt+0x90>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d101      	bne.n	8005b1e <I2SEx_TxISR_I2SExt+0x22>
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <I2SEx_TxISR_I2SExt+0x94>)
 8005b1c:	e001      	b.n	8005b22 <I2SEx_TxISR_I2SExt+0x26>
 8005b1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b22:	460a      	mov	r2, r1
 8005b24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d121      	bne.n	8005b82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <I2SEx_TxISR_I2SExt+0x90>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d101      	bne.n	8005b4c <I2SEx_TxISR_I2SExt+0x50>
 8005b48:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <I2SEx_TxISR_I2SExt+0x94>)
 8005b4a:	e001      	b.n	8005b50 <I2SEx_TxISR_I2SExt+0x54>
 8005b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	490d      	ldr	r1, [pc, #52]	; (8005b8c <I2SEx_TxISR_I2SExt+0x90>)
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	d101      	bne.n	8005b60 <I2SEx_TxISR_I2SExt+0x64>
 8005b5c:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <I2SEx_TxISR_I2SExt+0x94>)
 8005b5e:	e001      	b.n	8005b64 <I2SEx_TxISR_I2SExt+0x68>
 8005b60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ff81 	bl	8005a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40003800 	.word	0x40003800
 8005b90:	40003400 	.word	0x40003400

08005b94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68d8      	ldr	r0, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	1c99      	adds	r1, r3, #2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005bac:	b282      	uxth	r2, r0
 8005bae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d113      	bne.n	8005bf0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bd6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff ff4a 	bl	8005a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a20      	ldr	r2, [pc, #128]	; (8005c88 <I2SEx_RxISR_I2SExt+0x90>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d101      	bne.n	8005c0e <I2SEx_RxISR_I2SExt+0x16>
 8005c0a:	4b20      	ldr	r3, [pc, #128]	; (8005c8c <I2SEx_RxISR_I2SExt+0x94>)
 8005c0c:	e001      	b.n	8005c12 <I2SEx_RxISR_I2SExt+0x1a>
 8005c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c12:	68d8      	ldr	r0, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	1c99      	adds	r1, r3, #2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005c1e:	b282      	uxth	r2, r0
 8005c20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d121      	bne.n	8005c7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a12      	ldr	r2, [pc, #72]	; (8005c88 <I2SEx_RxISR_I2SExt+0x90>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d101      	bne.n	8005c48 <I2SEx_RxISR_I2SExt+0x50>
 8005c44:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <I2SEx_RxISR_I2SExt+0x94>)
 8005c46:	e001      	b.n	8005c4c <I2SEx_RxISR_I2SExt+0x54>
 8005c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	490d      	ldr	r1, [pc, #52]	; (8005c88 <I2SEx_RxISR_I2SExt+0x90>)
 8005c54:	428b      	cmp	r3, r1
 8005c56:	d101      	bne.n	8005c5c <I2SEx_RxISR_I2SExt+0x64>
 8005c58:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <I2SEx_RxISR_I2SExt+0x94>)
 8005c5a:	e001      	b.n	8005c60 <I2SEx_RxISR_I2SExt+0x68>
 8005c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff ff03 	bl	8005a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c7e:	bf00      	nop
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	40003800 	.word	0x40003800
 8005c8c:	40003400 	.word	0x40003400

08005c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e267      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d075      	beq.n	8005d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cae:	4b88      	ldr	r3, [pc, #544]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cba:	4b85      	ldr	r3, [pc, #532]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d112      	bne.n	8005cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cc6:	4b82      	ldr	r3, [pc, #520]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd2:	d10b      	bne.n	8005cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd4:	4b7e      	ldr	r3, [pc, #504]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d05b      	beq.n	8005d98 <HAL_RCC_OscConfig+0x108>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d157      	bne.n	8005d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e242      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf4:	d106      	bne.n	8005d04 <HAL_RCC_OscConfig+0x74>
 8005cf6:	4b76      	ldr	r3, [pc, #472]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a75      	ldr	r2, [pc, #468]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e01d      	b.n	8005d40 <HAL_RCC_OscConfig+0xb0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x98>
 8005d0e:	4b70      	ldr	r3, [pc, #448]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a6f      	ldr	r2, [pc, #444]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4b6d      	ldr	r3, [pc, #436]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6c      	ldr	r2, [pc, #432]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e00b      	b.n	8005d40 <HAL_RCC_OscConfig+0xb0>
 8005d28:	4b69      	ldr	r3, [pc, #420]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a68      	ldr	r2, [pc, #416]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b66      	ldr	r3, [pc, #408]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a65      	ldr	r2, [pc, #404]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d013      	beq.n	8005d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d48:	f7fc f9c6 	bl	80020d8 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d50:	f7fc f9c2 	bl	80020d8 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b64      	cmp	r3, #100	; 0x64
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e207      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d62:	4b5b      	ldr	r3, [pc, #364]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0xc0>
 8005d6e:	e014      	b.n	8005d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d70:	f7fc f9b2 	bl	80020d8 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d78:	f7fc f9ae 	bl	80020d8 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	; 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e1f3      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d8a:	4b51      	ldr	r3, [pc, #324]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0xe8>
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d063      	beq.n	8005e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005da6:	4b4a      	ldr	r3, [pc, #296]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 030c 	and.w	r3, r3, #12
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db2:	4b47      	ldr	r3, [pc, #284]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d11c      	bne.n	8005df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dbe:	4b44      	ldr	r3, [pc, #272]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d116      	bne.n	8005df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dca:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_RCC_OscConfig+0x152>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d001      	beq.n	8005de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e1c7      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de2:	4b3b      	ldr	r3, [pc, #236]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	4937      	ldr	r1, [pc, #220]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005df6:	e03a      	b.n	8005e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d020      	beq.n	8005e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e00:	4b34      	ldr	r3, [pc, #208]	; (8005ed4 <HAL_RCC_OscConfig+0x244>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e06:	f7fc f967 	bl	80020d8 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e0e:	f7fc f963 	bl	80020d8 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e1a8      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e20:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2c:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4925      	ldr	r1, [pc, #148]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]
 8005e40:	e015      	b.n	8005e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e42:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_RCC_OscConfig+0x244>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fc f946 	bl	80020d8 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e50:	f7fc f942 	bl	80020d8 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e187      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e62:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d036      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d016      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <HAL_RCC_OscConfig+0x248>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e88:	f7fc f926 	bl	80020d8 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e90:	f7fc f922 	bl	80020d8 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e167      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x200>
 8005eae:	e01b      	b.n	8005ee8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <HAL_RCC_OscConfig+0x248>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eb6:	f7fc f90f 	bl	80020d8 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ebc:	e00e      	b.n	8005edc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ebe:	f7fc f90b 	bl	80020d8 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d907      	bls.n	8005edc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e150      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	42470000 	.word	0x42470000
 8005ed8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005edc:	4b88      	ldr	r3, [pc, #544]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1ea      	bne.n	8005ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8097 	beq.w	8006024 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efa:	4b81      	ldr	r3, [pc, #516]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10f      	bne.n	8005f26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	4b7d      	ldr	r3, [pc, #500]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	4a7c      	ldr	r2, [pc, #496]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f14:	6413      	str	r3, [r2, #64]	; 0x40
 8005f16:	4b7a      	ldr	r3, [pc, #488]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	60bb      	str	r3, [r7, #8]
 8005f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f26:	4b77      	ldr	r3, [pc, #476]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d118      	bne.n	8005f64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f32:	4b74      	ldr	r3, [pc, #464]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a73      	ldr	r2, [pc, #460]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3e:	f7fc f8cb 	bl	80020d8 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f46:	f7fc f8c7 	bl	80020d8 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e10c      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f58:	4b6a      	ldr	r3, [pc, #424]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d106      	bne.n	8005f7a <HAL_RCC_OscConfig+0x2ea>
 8005f6c:	4b64      	ldr	r3, [pc, #400]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	4a63      	ldr	r2, [pc, #396]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	6713      	str	r3, [r2, #112]	; 0x70
 8005f78:	e01c      	b.n	8005fb4 <HAL_RCC_OscConfig+0x324>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x30c>
 8005f82:	4b5f      	ldr	r3, [pc, #380]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	4a5e      	ldr	r2, [pc, #376]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f88:	f043 0304 	orr.w	r3, r3, #4
 8005f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8e:	4b5c      	ldr	r3, [pc, #368]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	4a5b      	ldr	r2, [pc, #364]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCC_OscConfig+0x324>
 8005f9c:	4b58      	ldr	r3, [pc, #352]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	4a57      	ldr	r2, [pc, #348]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	f023 0301 	bic.w	r3, r3, #1
 8005fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa8:	4b55      	ldr	r3, [pc, #340]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fac:	4a54      	ldr	r2, [pc, #336]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005fae:	f023 0304 	bic.w	r3, r3, #4
 8005fb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d015      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbc:	f7fc f88c 	bl	80020d8 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc4:	f7fc f888 	bl	80020d8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0cb      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fda:	4b49      	ldr	r3, [pc, #292]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0ee      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x334>
 8005fe6:	e014      	b.n	8006012 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe8:	f7fc f876 	bl	80020d8 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fee:	e00a      	b.n	8006006 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff0:	f7fc f872 	bl	80020d8 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e0b5      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006006:	4b3e      	ldr	r3, [pc, #248]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1ee      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d105      	bne.n	8006024 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006018:	4b39      	ldr	r3, [pc, #228]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	4a38      	ldr	r2, [pc, #224]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 800601e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006022:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80a1 	beq.w	8006170 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800602e:	4b34      	ldr	r3, [pc, #208]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 030c 	and.w	r3, r3, #12
 8006036:	2b08      	cmp	r3, #8
 8006038:	d05c      	beq.n	80060f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	2b02      	cmp	r3, #2
 8006040:	d141      	bne.n	80060c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006042:	4b31      	ldr	r3, [pc, #196]	; (8006108 <HAL_RCC_OscConfig+0x478>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fc f846 	bl	80020d8 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006050:	f7fc f842 	bl	80020d8 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e087      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006062:	4b27      	ldr	r3, [pc, #156]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	019b      	lsls	r3, r3, #6
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	3b01      	subs	r3, #1
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	061b      	lsls	r3, r3, #24
 8006092:	491b      	ldr	r1, [pc, #108]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006094:	4313      	orrs	r3, r2
 8006096:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006098:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <HAL_RCC_OscConfig+0x478>)
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609e:	f7fc f81b 	bl	80020d8 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a6:	f7fc f817 	bl	80020d8 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e05c      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f0      	beq.n	80060a6 <HAL_RCC_OscConfig+0x416>
 80060c4:	e054      	b.n	8006170 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c6:	4b10      	ldr	r3, [pc, #64]	; (8006108 <HAL_RCC_OscConfig+0x478>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060cc:	f7fc f804 	bl	80020d8 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d4:	f7fc f800 	bl	80020d8 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e045      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e6:	4b06      	ldr	r3, [pc, #24]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0x444>
 80060f2:	e03d      	b.n	8006170 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d107      	bne.n	800610c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e038      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
 8006100:	40023800 	.word	0x40023800
 8006104:	40007000 	.word	0x40007000
 8006108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800610c:	4b1b      	ldr	r3, [pc, #108]	; (800617c <HAL_RCC_OscConfig+0x4ec>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d028      	beq.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d121      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006132:	429a      	cmp	r2, r3
 8006134:	d11a      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800613c:	4013      	ands	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006144:	4293      	cmp	r3, r2
 8006146:	d111      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	3b01      	subs	r3, #1
 8006156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006158:	429a      	cmp	r2, r3
 800615a:	d107      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006168:	429a      	cmp	r2, r3
 800616a:	d001      	beq.n	8006170 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800

08006180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0cc      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006194:	4b68      	ldr	r3, [pc, #416]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d90c      	bls.n	80061bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a2:	4b65      	ldr	r3, [pc, #404]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061aa:	4b63      	ldr	r3, [pc, #396]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d001      	beq.n	80061bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0b8      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d020      	beq.n	800620a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061d4:	4b59      	ldr	r3, [pc, #356]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4a58      	ldr	r2, [pc, #352]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061ec:	4b53      	ldr	r3, [pc, #332]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4a52      	ldr	r2, [pc, #328]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f8:	4b50      	ldr	r3, [pc, #320]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	494d      	ldr	r1, [pc, #308]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d044      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d107      	bne.n	800622e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800621e:	4b47      	ldr	r3, [pc, #284]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d119      	bne.n	800625e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e07f      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d003      	beq.n	800623e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800623a:	2b03      	cmp	r3, #3
 800623c:	d107      	bne.n	800624e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800623e:	4b3f      	ldr	r3, [pc, #252]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d109      	bne.n	800625e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e06f      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800624e:	4b3b      	ldr	r3, [pc, #236]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e067      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800625e:	4b37      	ldr	r3, [pc, #220]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f023 0203 	bic.w	r2, r3, #3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4934      	ldr	r1, [pc, #208]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 800626c:	4313      	orrs	r3, r2
 800626e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006270:	f7fb ff32 	bl	80020d8 <HAL_GetTick>
 8006274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	e00a      	b.n	800628e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006278:	f7fb ff2e 	bl	80020d8 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	; 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e04f      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628e:	4b2b      	ldr	r3, [pc, #172]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 020c 	and.w	r2, r3, #12
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	429a      	cmp	r2, r3
 800629e:	d1eb      	bne.n	8006278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a0:	4b25      	ldr	r3, [pc, #148]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d20c      	bcs.n	80062c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ae:	4b22      	ldr	r3, [pc, #136]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b6:	4b20      	ldr	r3, [pc, #128]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e032      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d008      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d4:	4b19      	ldr	r3, [pc, #100]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	4916      	ldr	r1, [pc, #88]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d009      	beq.n	8006306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062f2:	4b12      	ldr	r3, [pc, #72]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	490e      	ldr	r1, [pc, #56]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	4313      	orrs	r3, r2
 8006304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006306:	f000 f821 	bl	800634c <HAL_RCC_GetSysClockFreq>
 800630a:	4602      	mov	r2, r0
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	490a      	ldr	r1, [pc, #40]	; (8006340 <HAL_RCC_ClockConfig+0x1c0>)
 8006318:	5ccb      	ldrb	r3, [r1, r3]
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	4a09      	ldr	r2, [pc, #36]	; (8006344 <HAL_RCC_ClockConfig+0x1c4>)
 8006320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <HAL_RCC_ClockConfig+0x1c8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7fb fe92 	bl	8002050 <HAL_InitTick>

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40023c00 	.word	0x40023c00
 800633c:	40023800 	.word	0x40023800
 8006340:	0800dabc 	.word	0x0800dabc
 8006344:	20000000 	.word	0x20000000
 8006348:	20000004 	.word	0x20000004

0800634c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800634c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006350:	b094      	sub	sp, #80	; 0x50
 8006352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	647b      	str	r3, [r7, #68]	; 0x44
 8006358:	2300      	movs	r3, #0
 800635a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800635c:	2300      	movs	r3, #0
 800635e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006364:	4b79      	ldr	r3, [pc, #484]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	2b08      	cmp	r3, #8
 800636e:	d00d      	beq.n	800638c <HAL_RCC_GetSysClockFreq+0x40>
 8006370:	2b08      	cmp	r3, #8
 8006372:	f200 80e1 	bhi.w	8006538 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_RCC_GetSysClockFreq+0x34>
 800637a:	2b04      	cmp	r3, #4
 800637c:	d003      	beq.n	8006386 <HAL_RCC_GetSysClockFreq+0x3a>
 800637e:	e0db      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006380:	4b73      	ldr	r3, [pc, #460]	; (8006550 <HAL_RCC_GetSysClockFreq+0x204>)
 8006382:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006384:	e0db      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006386:	4b73      	ldr	r3, [pc, #460]	; (8006554 <HAL_RCC_GetSysClockFreq+0x208>)
 8006388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800638a:	e0d8      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800638c:	4b6f      	ldr	r3, [pc, #444]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006396:	4b6d      	ldr	r3, [pc, #436]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d063      	beq.n	800646a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063a2:	4b6a      	ldr	r3, [pc, #424]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	2200      	movs	r2, #0
 80063aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30
 80063b6:	2300      	movs	r3, #0
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063be:	4622      	mov	r2, r4
 80063c0:	462b      	mov	r3, r5
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f04f 0100 	mov.w	r1, #0
 80063ca:	0159      	lsls	r1, r3, #5
 80063cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063d0:	0150      	lsls	r0, r2, #5
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4621      	mov	r1, r4
 80063d8:	1a51      	subs	r1, r2, r1
 80063da:	6139      	str	r1, [r7, #16]
 80063dc:	4629      	mov	r1, r5
 80063de:	eb63 0301 	sbc.w	r3, r3, r1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	f04f 0300 	mov.w	r3, #0
 80063ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063f0:	4659      	mov	r1, fp
 80063f2:	018b      	lsls	r3, r1, #6
 80063f4:	4651      	mov	r1, sl
 80063f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063fa:	4651      	mov	r1, sl
 80063fc:	018a      	lsls	r2, r1, #6
 80063fe:	4651      	mov	r1, sl
 8006400:	ebb2 0801 	subs.w	r8, r2, r1
 8006404:	4659      	mov	r1, fp
 8006406:	eb63 0901 	sbc.w	r9, r3, r1
 800640a:	f04f 0200 	mov.w	r2, #0
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800641a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800641e:	4690      	mov	r8, r2
 8006420:	4699      	mov	r9, r3
 8006422:	4623      	mov	r3, r4
 8006424:	eb18 0303 	adds.w	r3, r8, r3
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	462b      	mov	r3, r5
 800642c:	eb49 0303 	adc.w	r3, r9, r3
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800643e:	4629      	mov	r1, r5
 8006440:	024b      	lsls	r3, r1, #9
 8006442:	4621      	mov	r1, r4
 8006444:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006448:	4621      	mov	r1, r4
 800644a:	024a      	lsls	r2, r1, #9
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006452:	2200      	movs	r2, #0
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
 8006456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800645c:	f7fa fba4 	bl	8000ba8 <__aeabi_uldivmod>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4613      	mov	r3, r2
 8006466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006468:	e058      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800646a:	4b38      	ldr	r3, [pc, #224]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	099b      	lsrs	r3, r3, #6
 8006470:	2200      	movs	r2, #0
 8006472:	4618      	mov	r0, r3
 8006474:	4611      	mov	r1, r2
 8006476:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800647a:	623b      	str	r3, [r7, #32]
 800647c:	2300      	movs	r3, #0
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
 8006480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006484:	4642      	mov	r2, r8
 8006486:	464b      	mov	r3, r9
 8006488:	f04f 0000 	mov.w	r0, #0
 800648c:	f04f 0100 	mov.w	r1, #0
 8006490:	0159      	lsls	r1, r3, #5
 8006492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006496:	0150      	lsls	r0, r2, #5
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4641      	mov	r1, r8
 800649e:	ebb2 0a01 	subs.w	sl, r2, r1
 80064a2:	4649      	mov	r1, r9
 80064a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064bc:	ebb2 040a 	subs.w	r4, r2, sl
 80064c0:	eb63 050b 	sbc.w	r5, r3, fp
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	00eb      	lsls	r3, r5, #3
 80064ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064d2:	00e2      	lsls	r2, r4, #3
 80064d4:	4614      	mov	r4, r2
 80064d6:	461d      	mov	r5, r3
 80064d8:	4643      	mov	r3, r8
 80064da:	18e3      	adds	r3, r4, r3
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	464b      	mov	r3, r9
 80064e0:	eb45 0303 	adc.w	r3, r5, r3
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064f2:	4629      	mov	r1, r5
 80064f4:	028b      	lsls	r3, r1, #10
 80064f6:	4621      	mov	r1, r4
 80064f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064fc:	4621      	mov	r1, r4
 80064fe:	028a      	lsls	r2, r1, #10
 8006500:	4610      	mov	r0, r2
 8006502:	4619      	mov	r1, r3
 8006504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006506:	2200      	movs	r2, #0
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	61fa      	str	r2, [r7, #28]
 800650c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006510:	f7fa fb4a 	bl	8000ba8 <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4613      	mov	r3, r2
 800651a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800651c:	4b0b      	ldr	r3, [pc, #44]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	0c1b      	lsrs	r3, r3, #16
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	3301      	adds	r3, #1
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800652c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800652e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006530:	fbb2 f3f3 	udiv	r3, r2, r3
 8006534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006536:	e002      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <HAL_RCC_GetSysClockFreq+0x204>)
 800653a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800653c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800653e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006540:	4618      	mov	r0, r3
 8006542:	3750      	adds	r7, #80	; 0x50
 8006544:	46bd      	mov	sp, r7
 8006546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800654a:	bf00      	nop
 800654c:	40023800 	.word	0x40023800
 8006550:	00f42400 	.word	0x00f42400
 8006554:	007a1200 	.word	0x007a1200

08006558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800655c:	4b03      	ldr	r3, [pc, #12]	; (800656c <HAL_RCC_GetHCLKFreq+0x14>)
 800655e:	681b      	ldr	r3, [r3, #0]
}
 8006560:	4618      	mov	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000000 	.word	0x20000000

08006570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006574:	f7ff fff0 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	0a9b      	lsrs	r3, r3, #10
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	4903      	ldr	r1, [pc, #12]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006586:	5ccb      	ldrb	r3, [r1, r3]
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40023800 	.word	0x40023800
 8006594:	0800dacc 	.word	0x0800dacc

08006598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800659c:	f7ff ffdc 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	0b5b      	lsrs	r3, r3, #13
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4903      	ldr	r1, [pc, #12]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40023800 	.word	0x40023800
 80065bc:	0800dacc 	.word	0x0800dacc

080065c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d035      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065e8:	4b62      	ldr	r3, [pc, #392]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065ee:	f7fb fd73 	bl	80020d8 <HAL_GetTick>
 80065f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065f4:	e008      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065f6:	f7fb fd6f 	bl	80020d8 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e0b0      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006608:	4b5b      	ldr	r3, [pc, #364]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1f0      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	019a      	lsls	r2, r3, #6
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	071b      	lsls	r3, r3, #28
 8006620:	4955      	ldr	r1, [pc, #340]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006628:	4b52      	ldr	r3, [pc, #328]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800662a:	2201      	movs	r2, #1
 800662c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800662e:	f7fb fd53 	bl	80020d8 <HAL_GetTick>
 8006632:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006634:	e008      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006636:	f7fb fd4f 	bl	80020d8 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d901      	bls.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e090      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006648:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0f0      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8083 	beq.w	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	4b44      	ldr	r3, [pc, #272]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	4a43      	ldr	r2, [pc, #268]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800666c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006670:	6413      	str	r3, [r2, #64]	; 0x40
 8006672:	4b41      	ldr	r3, [pc, #260]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800667e:	4b3f      	ldr	r3, [pc, #252]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a3e      	ldr	r2, [pc, #248]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006688:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800668a:	f7fb fd25 	bl	80020d8 <HAL_GetTick>
 800668e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006690:	e008      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006692:	f7fb fd21 	bl	80020d8 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e062      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80066a4:	4b35      	ldr	r3, [pc, #212]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066b0:	4b31      	ldr	r3, [pc, #196]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d02f      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d028      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066ce:	4b2a      	ldr	r3, [pc, #168]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066d8:	4b29      	ldr	r3, [pc, #164]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066de:	4b28      	ldr	r3, [pc, #160]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80066e4:	4a24      	ldr	r2, [pc, #144]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066ea:	4b23      	ldr	r3, [pc, #140]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d114      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80066f6:	f7fb fcef 	bl	80020d8 <HAL_GetTick>
 80066fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066fc:	e00a      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066fe:	f7fb fceb 	bl	80020d8 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	f241 3288 	movw	r2, #5000	; 0x1388
 800670c:	4293      	cmp	r3, r2
 800670e:	d901      	bls.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e02a      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006714:	4b18      	ldr	r3, [pc, #96]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0ee      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800672c:	d10d      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800672e:	4b12      	ldr	r3, [pc, #72]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800673e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006742:	490d      	ldr	r1, [pc, #52]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006744:	4313      	orrs	r3, r2
 8006746:	608b      	str	r3, [r1, #8]
 8006748:	e005      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006750:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006754:	6093      	str	r3, [r2, #8]
 8006756:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006758:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006762:	4905      	ldr	r1, [pc, #20]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006764:	4313      	orrs	r3, r2
 8006766:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	42470068 	.word	0x42470068
 8006778:	40023800 	.word	0x40023800
 800677c:	40007000 	.word	0x40007000
 8006780:	42470e40 	.word	0x42470e40

08006784 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d13f      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80067a2:	4b24      	ldr	r3, [pc, #144]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d006      	beq.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067b8:	d12f      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80067ba:	4b1f      	ldr	r3, [pc, #124]	; (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80067bc:	617b      	str	r3, [r7, #20]
          break;
 80067be:	e02f      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80067c0:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067cc:	d108      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80067ce:	4b19      	ldr	r3, [pc, #100]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067d6:	4a19      	ldr	r2, [pc, #100]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80067d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	e007      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80067e0:	4b14      	ldr	r3, [pc, #80]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067e8:	4a15      	ldr	r2, [pc, #84]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80067ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ee:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80067f0:	4b10      	ldr	r3, [pc, #64]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067f6:	099b      	lsrs	r3, r3, #6
 80067f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800680a:	0f1b      	lsrs	r3, r3, #28
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
 8006816:	617b      	str	r3, [r7, #20]
          break;
 8006818:	e002      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]
          break;
 800681e:	bf00      	nop
        }
      }
      break;
 8006820:	e000      	b.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8006822:	bf00      	nop
    }
  }
  return frequency;
 8006824:	697b      	ldr	r3, [r7, #20]
}
 8006826:	4618      	mov	r0, r3
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40023800 	.word	0x40023800
 8006838:	00bb8000 	.word	0x00bb8000
 800683c:	007a1200 	.word	0x007a1200
 8006840:	00f42400 	.word	0x00f42400

08006844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e07b      	b.n	800694e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	d108      	bne.n	8006870 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006866:	d009      	beq.n	800687c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	61da      	str	r2, [r3, #28]
 800686e:	e005      	b.n	800687c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fb f970 	bl	8001b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006900:	ea42 0103 	orr.w	r1, r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	0c1b      	lsrs	r3, r3, #16
 800691a:	f003 0104 	and.w	r1, r3, #4
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	f003 0210 	and.w	r2, r3, #16
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69da      	ldr	r2, [r3, #28]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800693c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b01      	cmp	r3, #1
 8006974:	d002      	beq.n	800697c <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8006976:	2302      	movs	r3, #2
 8006978:	75fb      	strb	r3, [r7, #23]
    goto error;
 800697a:	e0a2      	b.n	8006ac2 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d110      	bne.n	80069a6 <HAL_SPI_Receive_DMA+0x4e>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800698c:	d10b      	bne.n	80069a6 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2204      	movs	r2, #4
 8006992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f89f 	bl	8006ae0 <HAL_SPI_TransmitReceive_DMA>
 80069a2:	4603      	mov	r3, r0
 80069a4:	e092      	b.n	8006acc <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_SPI_Receive_DMA+0x5c>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e08b      	b.n	8006acc <HAL_SPI_Receive_DMA+0x174>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_SPI_Receive_DMA+0x70>
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069cc:	e079      	b.n	8006ac2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2204      	movs	r2, #4
 80069d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	88fa      	ldrh	r2, [r7, #6]
 80069e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0e:	d10f      	bne.n	8006a30 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a34:	4a27      	ldr	r2, [pc, #156]	; (8006ad4 <HAL_SPI_Receive_DMA+0x17c>)
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3c:	4a26      	ldr	r2, [pc, #152]	; (8006ad8 <HAL_SPI_Receive_DMA+0x180>)
 8006a3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a44:	4a25      	ldr	r2, [pc, #148]	; (8006adc <HAL_SPI_Receive_DMA+0x184>)
 8006a46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a66:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a68:	f7fb fd26 	bl	80024b8 <HAL_DMA_Start_IT>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a76:	f043 0210 	orr.w	r2, r3, #16
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006a82:	e01e      	b.n	8006ac2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d007      	beq.n	8006aa2 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0220 	orr.w	r2, r2, #32
 8006ab0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f042 0201 	orr.w	r2, r2, #1
 8006ac0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	08007031 	.word	0x08007031
 8006ad8:	08006ef9 	.word	0x08006ef9
 8006adc:	08007069 	.word	0x08007069

08006ae0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e0db      	b.n	8006cb8 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b0e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006b16:	7dbb      	ldrb	r3, [r7, #22]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d00d      	beq.n	8006b38 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b22:	d106      	bne.n	8006b32 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <HAL_SPI_TransmitReceive_DMA+0x52>
 8006b2c:	7dbb      	ldrb	r3, [r7, #22]
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d002      	beq.n	8006b38 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006b32:	2302      	movs	r3, #2
 8006b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b36:	e0ba      	b.n	8006cae <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006b44:	887b      	ldrh	r3, [r7, #2]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b4e:	e0ae      	b.n	8006cae <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d003      	beq.n	8006b64 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2205      	movs	r2, #5
 8006b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	887a      	ldrh	r2, [r7, #2]
 8006b74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	887a      	ldrh	r2, [r7, #2]
 8006b7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	887a      	ldrh	r2, [r7, #2]
 8006b86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	887a      	ldrh	r2, [r7, #2]
 8006b8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d108      	bne.n	8006bb8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	4a45      	ldr	r2, [pc, #276]	; (8006cc0 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8006bac:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb2:	4a44      	ldr	r2, [pc, #272]	; (8006cc4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006bb4:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bb6:	e007      	b.n	8006bc8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbc:	4a42      	ldr	r2, [pc, #264]	; (8006cc8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc4:	4a41      	ldr	r2, [pc, #260]	; (8006ccc <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bcc:	4a40      	ldr	r2, [pc, #256]	; (8006cd0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006bce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	4619      	mov	r1, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006bf0:	f7fb fc62 	bl	80024b8 <HAL_DMA_Start_IT>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d008      	beq.n	8006c0c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfe:	f043 0210 	orr.w	r2, r3, #16
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006c0a:	e050      	b.n	8006cae <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c20:	2200      	movs	r2, #0
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c28:	2200      	movs	r2, #0
 8006c2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c30:	2200      	movs	r2, #0
 8006c32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c38:	2200      	movs	r2, #0
 8006c3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	4619      	mov	r1, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	330c      	adds	r3, #12
 8006c4c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c52:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006c54:	f7fb fc30 	bl	80024b8 <HAL_DMA_Start_IT>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d008      	beq.n	8006c70 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	f043 0210 	orr.w	r2, r3, #16
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006c6e:	e01e      	b.n	8006cae <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d007      	beq.n	8006c8e <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c8c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0220 	orr.w	r2, r2, #32
 8006c9c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0202 	orr.w	r2, r2, #2
 8006cac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	08007031 	.word	0x08007031
 8006cc4:	08006ef9 	.word	0x08006ef9
 8006cc8:	0800704d 	.word	0x0800704d
 8006ccc:	08006fa1 	.word	0x08006fa1
 8006cd0:	08007069 	.word	0x08007069

08006cd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10e      	bne.n	8006d14 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d009      	beq.n	8006d14 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
    return;
 8006d12:	e0ce      	b.n	8006eb2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HAL_SPI_IRQHandler+0x5e>
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d004      	beq.n	8006d32 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
    return;
 8006d30:	e0bf      	b.n	8006eb2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <HAL_SPI_IRQHandler+0x7e>
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d105      	bne.n	8006d52 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 80b0 	beq.w	8006eb2 <HAL_SPI_IRQHandler+0x1de>
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 80aa 	beq.w	8006eb2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d023      	beq.n	8006db0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d011      	beq.n	8006d98 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	f043 0204 	orr.w	r2, r3, #4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	e00b      	b.n	8006db0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d98:	2300      	movs	r3, #0
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	693b      	ldr	r3, [r7, #16]
        return;
 8006dae:	e080      	b.n	8006eb2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d014      	beq.n	8006de4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbe:	f043 0201 	orr.w	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00c      	beq.n	8006e08 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df2:	f043 0208 	orr.w	r2, r3, #8
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	60bb      	str	r3, [r7, #8]
 8006e06:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d04f      	beq.n	8006eb0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e1e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d104      	bne.n	8006e3c <HAL_SPI_IRQHandler+0x168>
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d034      	beq.n	8006ea6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0203 	bic.w	r2, r2, #3
 8006e4a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d011      	beq.n	8006e78 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e58:	4a17      	ldr	r2, [pc, #92]	; (8006eb8 <HAL_SPI_IRQHandler+0x1e4>)
 8006e5a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fb fbf1 	bl	8002648 <HAL_DMA_Abort_IT>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d016      	beq.n	8006eae <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e84:	4a0c      	ldr	r2, [pc, #48]	; (8006eb8 <HAL_SPI_IRQHandler+0x1e4>)
 8006e86:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fb fbdb 	bl	8002648 <HAL_DMA_Abort_IT>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006ea4:	e003      	b.n	8006eae <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fa f866 	bl	8000f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006eac:	e000      	b.n	8006eb0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006eae:	bf00      	nop
    return;
 8006eb0:	bf00      	nop
  }
}
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	080070a9 	.word	0x080070a9

08006ebc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f06:	f7fb f8e7 	bl	80020d8 <HAL_GetTick>
 8006f0a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1a:	d03b      	beq.n	8006f94 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0220 	bic.w	r2, r2, #32
 8006f2a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10d      	bne.n	8006f50 <SPI_DMAReceiveCplt+0x58>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f3c:	d108      	bne.n	8006f50 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0203 	bic.w	r2, r2, #3
 8006f4c:	605a      	str	r2, [r3, #4]
 8006f4e:	e007      	b.n	8006f60 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0201 	bic.w	r2, r2, #1
 8006f5e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	2164      	movs	r1, #100	; 0x64
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f93b 	bl	80071e0 <SPI_EndRxTransaction>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7f9 fff3 	bl	8000f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006f92:	e002      	b.n	8006f9a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7f9 ff85 	bl	8000ea4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fae:	f7fb f893 	bl	80020d8 <HAL_GetTick>
 8006fb2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc2:	d02f      	beq.n	8007024 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0220 	bic.w	r2, r2, #32
 8006fd2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	2164      	movs	r1, #100	; 0x64
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f967 	bl	80072ac <SPI_EndRxTxTransaction>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe8:	f043 0220 	orr.w	r2, r3, #32
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0203 	bic.w	r2, r2, #3
 8006ffe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7f9 ffab 	bl	8000f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007022:	e002      	b.n	800702a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff ff49 	bl	8006ebc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f7ff ff46 	bl	8006ed0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f7ff ff42 	bl	8006ee4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0203 	bic.w	r2, r2, #3
 8007084:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708a:	f043 0210 	orr.w	r2, r3, #16
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7f9 ff6c 	bl	8000f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7f9 ff58 	bl	8000f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070e0:	f7fa fffa 	bl	80020d8 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	4413      	add	r3, r2
 80070ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070f0:	f7fa fff2 	bl	80020d8 <HAL_GetTick>
 80070f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	015b      	lsls	r3, r3, #5
 80070fc:	0d1b      	lsrs	r3, r3, #20
 80070fe:	69fa      	ldr	r2, [r7, #28]
 8007100:	fb02 f303 	mul.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007106:	e054      	b.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d050      	beq.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007110:	f7fa ffe2 	bl	80020d8 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	429a      	cmp	r2, r3
 800711e:	d902      	bls.n	8007126 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d13d      	bne.n	80071a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800713e:	d111      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007148:	d004      	beq.n	8007154 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007152:	d107      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716c:	d10f      	bne.n	800718e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800718c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e017      	b.n	80071d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4013      	ands	r3, r2
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	bf0c      	ite	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	2300      	movne	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d19b      	bne.n	8007108 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000000 	.word	0x20000000

080071e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071f4:	d111      	bne.n	800721a <SPI_EndRxTransaction+0x3a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071fe:	d004      	beq.n	800720a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007208:	d107      	bne.n	800721a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007218:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007222:	d12a      	bne.n	800727a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722c:	d012      	beq.n	8007254 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2200      	movs	r2, #0
 8007236:	2180      	movs	r1, #128	; 0x80
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff ff49 	bl	80070d0 <SPI_WaitFlagStateUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d02d      	beq.n	80072a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	f043 0220 	orr.w	r2, r3, #32
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e026      	b.n	80072a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	2101      	movs	r1, #1
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f7ff ff36 	bl	80070d0 <SPI_WaitFlagStateUntilTimeout>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d01a      	beq.n	80072a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	f043 0220 	orr.w	r2, r3, #32
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e013      	b.n	80072a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2200      	movs	r2, #0
 8007282:	2101      	movs	r1, #1
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7ff ff23 	bl	80070d0 <SPI_WaitFlagStateUntilTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d007      	beq.n	80072a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007294:	f043 0220 	orr.w	r2, r3, #32
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e000      	b.n	80072a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2201      	movs	r2, #1
 80072c0:	2102      	movs	r1, #2
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f7ff ff04 	bl	80070d0 <SPI_WaitFlagStateUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d2:	f043 0220 	orr.w	r2, r3, #32
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e032      	b.n	8007344 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80072de:	4b1b      	ldr	r3, [pc, #108]	; (800734c <SPI_EndRxTxTransaction+0xa0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a1b      	ldr	r2, [pc, #108]	; (8007350 <SPI_EndRxTxTransaction+0xa4>)
 80072e4:	fba2 2303 	umull	r2, r3, r2, r3
 80072e8:	0d5b      	lsrs	r3, r3, #21
 80072ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072ee:	fb02 f303 	mul.w	r3, r2, r3
 80072f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072fc:	d112      	bne.n	8007324 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	2180      	movs	r1, #128	; 0x80
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f7ff fee1 	bl	80070d0 <SPI_WaitFlagStateUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d016      	beq.n	8007342 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007318:	f043 0220 	orr.w	r2, r3, #32
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e00f      	b.n	8007344 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	3b01      	subs	r3, #1
 800732e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733a:	2b80      	cmp	r3, #128	; 0x80
 800733c:	d0f2      	beq.n	8007324 <SPI_EndRxTxTransaction+0x78>
 800733e:	e000      	b.n	8007342 <SPI_EndRxTxTransaction+0x96>
        break;
 8007340:	bf00      	nop
  }

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000000 	.word	0x20000000
 8007350:	165e9f81 	.word	0x165e9f81

08007354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e042      	b.n	80073ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fa fc80 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2224      	movs	r2, #36	; 0x24
 8007384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fd69 	bl	8007e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695a      	ldr	r2, [r3, #20]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b20      	cmp	r3, #32
 8007412:	d175      	bne.n	8007500 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_UART_Transmit+0x2c>
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e06e      	b.n	8007502 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2221      	movs	r2, #33	; 0x21
 800742e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007432:	f7fa fe51 	bl	80020d8 <HAL_GetTick>
 8007436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	88fa      	ldrh	r2, [r7, #6]
 8007442:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744c:	d108      	bne.n	8007460 <HAL_UART_Transmit+0x6c>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d104      	bne.n	8007460 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	e003      	b.n	8007468 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007468:	e02e      	b.n	80074c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2200      	movs	r2, #0
 8007472:	2180      	movs	r1, #128	; 0x80
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fb05 	bl	8007a84 <UART_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e03a      	b.n	8007502 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	3302      	adds	r3, #2
 80074a6:	61bb      	str	r3, [r7, #24]
 80074a8:	e007      	b.n	80074ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	781a      	ldrb	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	3301      	adds	r3, #1
 80074b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074be:	b29b      	uxth	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1cb      	bne.n	800746a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2200      	movs	r2, #0
 80074da:	2140      	movs	r1, #64	; 0x40
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 fad1 	bl	8007a84 <UART_WaitOnFlagUntilTimeout>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e006      	b.n	8007502 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e000      	b.n	8007502 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007500:	2302      	movs	r3, #2
  }
}
 8007502:	4618      	mov	r0, r3
 8007504:	3720      	adds	r7, #32
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b0ba      	sub	sp, #232	; 0xe8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007532:	2300      	movs	r3, #0
 8007534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007538:	2300      	movs	r3, #0
 800753a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800753e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800754a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10f      	bne.n	8007572 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <HAL_UART_IRQHandler+0x66>
 800755e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fbc2 	bl	8007cf4 <UART_Receive_IT>
      return;
 8007570:	e25b      	b.n	8007a2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80de 	beq.w	8007738 <HAL_UART_IRQHandler+0x22c>
 800757c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 80d1 	beq.w	8007738 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <HAL_UART_IRQHandler+0xae>
 80075a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b2:	f043 0201 	orr.w	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00b      	beq.n	80075de <HAL_UART_IRQHandler+0xd2>
 80075c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	f043 0202 	orr.w	r2, r3, #2
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <HAL_UART_IRQHandler+0xf6>
 80075ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	f043 0204 	orr.w	r2, r3, #4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d011      	beq.n	8007632 <HAL_UART_IRQHandler+0x126>
 800760e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800761a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762a:	f043 0208 	orr.w	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 81f2 	beq.w	8007a20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b00      	cmp	r3, #0
 8007646:	d008      	beq.n	800765a <HAL_UART_IRQHandler+0x14e>
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764c:	f003 0320 	and.w	r3, r3, #32
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fb4d 	bl	8007cf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b40      	cmp	r3, #64	; 0x40
 8007666:	bf0c      	ite	eq
 8007668:	2301      	moveq	r3, #1
 800766a:	2300      	movne	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007676:	f003 0308 	and.w	r3, r3, #8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <HAL_UART_IRQHandler+0x17a>
 800767e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d04f      	beq.n	8007726 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa55 	bl	8007b36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007696:	2b40      	cmp	r3, #64	; 0x40
 8007698:	d141      	bne.n	800771e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3314      	adds	r3, #20
 80076a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3314      	adds	r3, #20
 80076c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1d9      	bne.n	800769a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d013      	beq.n	8007716 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f2:	4a7e      	ldr	r2, [pc, #504]	; (80078ec <HAL_UART_IRQHandler+0x3e0>)
 80076f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fa ffa4 	bl	8002648 <HAL_DMA_Abort_IT>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d016      	beq.n	8007734 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007710:	4610      	mov	r0, r2
 8007712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	e00e      	b.n	8007734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f99e 	bl	8007a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771c:	e00a      	b.n	8007734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f99a 	bl	8007a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007724:	e006      	b.n	8007734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f996 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007732:	e175      	b.n	8007a20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007734:	bf00      	nop
    return;
 8007736:	e173      	b.n	8007a20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	2b01      	cmp	r3, #1
 800773e:	f040 814f 	bne.w	80079e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 8148 	beq.w	80079e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007754:	f003 0310 	and.w	r3, r3, #16
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 8141 	beq.w	80079e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	60bb      	str	r3, [r7, #8]
 8007772:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	f040 80b6 	bne.w	80078f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8145 	beq.w	8007a24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800779e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077a2:	429a      	cmp	r2, r3
 80077a4:	f080 813e 	bcs.w	8007a24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ba:	f000 8088 	beq.w	80078ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1d9      	bne.n	80077be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3314      	adds	r3, #20
 8007810:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800781a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3314      	adds	r3, #20
 800782a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800782e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007832:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007836:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e1      	bne.n	800780a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3314      	adds	r3, #20
 800784c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3314      	adds	r3, #20
 8007866:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800786a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800786c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007870:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e3      	bne.n	8007846 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800789c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800789e:	f023 0310 	bic.w	r3, r3, #16
 80078a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	330c      	adds	r3, #12
 80078ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80078b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078b8:	e841 2300 	strex	r3, r2, [r1]
 80078bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e3      	bne.n	800788c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fa fe4d 	bl	8002568 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078dc:	b29b      	uxth	r3, r3
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f8c1 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078ea:	e09b      	b.n	8007a24 <HAL_UART_IRQHandler+0x518>
 80078ec:	08007bfd 	.word	0x08007bfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 808e 	beq.w	8007a28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800790c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8089 	beq.w	8007a28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	330c      	adds	r3, #12
 800791c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800792c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	330c      	adds	r3, #12
 8007936:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800793a:	647a      	str	r2, [r7, #68]	; 0x44
 800793c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e3      	bne.n	8007916 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3314      	adds	r3, #20
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	623b      	str	r3, [r7, #32]
   return(result);
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	f023 0301 	bic.w	r3, r3, #1
 8007964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3314      	adds	r3, #20
 800796e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007972:	633a      	str	r2, [r7, #48]	; 0x30
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e3      	bne.n	800794e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330c      	adds	r3, #12
 800799a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0310 	bic.w	r3, r3, #16
 80079aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	330c      	adds	r3, #12
 80079b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079b8:	61fa      	str	r2, [r7, #28]
 80079ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	69b9      	ldr	r1, [r7, #24]
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	617b      	str	r3, [r7, #20]
   return(result);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e3      	bne.n	8007994 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f847 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079de:	e023      	b.n	8007a28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d009      	beq.n	8007a00 <HAL_UART_IRQHandler+0x4f4>
 80079ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f913 	bl	8007c24 <UART_Transmit_IT>
    return;
 80079fe:	e014      	b.n	8007a2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00e      	beq.n	8007a2a <HAL_UART_IRQHandler+0x51e>
 8007a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f953 	bl	8007cc4 <UART_EndTransmit_IT>
    return;
 8007a1e:	e004      	b.n	8007a2a <HAL_UART_IRQHandler+0x51e>
    return;
 8007a20:	bf00      	nop
 8007a22:	e002      	b.n	8007a2a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a24:	bf00      	nop
 8007a26:	e000      	b.n	8007a2a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a28:	bf00      	nop
  }
}
 8007a2a:	37e8      	adds	r7, #232	; 0xe8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	4613      	mov	r3, r2
 8007a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a94:	e03b      	b.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d037      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a9e:	f7fa fb1b 	bl	80020d8 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	6a3a      	ldr	r2, [r7, #32]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d302      	bcc.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e03a      	b.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d023      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2b80      	cmp	r3, #128	; 0x80
 8007aca:	d020      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d01d      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d116      	bne.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 f81d 	bl	8007b36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2208      	movs	r2, #8
 8007b00:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e00f      	b.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4013      	ands	r3, r2
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	bf0c      	ite	eq
 8007b1e:	2301      	moveq	r3, #1
 8007b20:	2300      	movne	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d0b4      	beq.n	8007a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b095      	sub	sp, #84	; 0x54
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	330c      	adds	r3, #12
 8007b44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	330c      	adds	r3, #12
 8007b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b5e:	643a      	str	r2, [r7, #64]	; 0x40
 8007b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e5      	bne.n	8007b3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3314      	adds	r3, #20
 8007b78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	f023 0301 	bic.w	r3, r3, #1
 8007b88:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3314      	adds	r3, #20
 8007b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1e5      	bne.n	8007b72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d119      	bne.n	8007be2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	330c      	adds	r3, #12
 8007bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f023 0310 	bic.w	r3, r3, #16
 8007bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	330c      	adds	r3, #12
 8007bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bce:	61ba      	str	r2, [r7, #24]
 8007bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6979      	ldr	r1, [r7, #20]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	613b      	str	r3, [r7, #16]
   return(result);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e5      	bne.n	8007bae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bf0:	bf00      	nop
 8007bf2:	3754      	adds	r7, #84	; 0x54
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff ff1e 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c1c:	bf00      	nop
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b21      	cmp	r3, #33	; 0x21
 8007c36:	d13e      	bne.n	8007cb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c40:	d114      	bne.n	8007c6c <UART_Transmit_IT+0x48>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d110      	bne.n	8007c6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	1c9a      	adds	r2, r3, #2
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	621a      	str	r2, [r3, #32]
 8007c6a:	e008      	b.n	8007c7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	1c59      	adds	r1, r3, #1
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6211      	str	r1, [r2, #32]
 8007c76:	781a      	ldrb	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10f      	bne.n	8007cb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ca0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e000      	b.n	8007cb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cb6:	2302      	movs	r3, #2
  }
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff fea3 	bl	8007a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08c      	sub	sp, #48	; 0x30
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b22      	cmp	r3, #34	; 0x22
 8007d06:	f040 80ae 	bne.w	8007e66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d12:	d117      	bne.n	8007d44 <UART_Receive_IT+0x50>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d113      	bne.n	8007d44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d24:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	1c9a      	adds	r2, r3, #2
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	629a      	str	r2, [r3, #40]	; 0x28
 8007d42:	e026      	b.n	8007d92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d56:	d007      	beq.n	8007d68 <UART_Receive_IT+0x74>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <UART_Receive_IT+0x82>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d106      	bne.n	8007d76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	e008      	b.n	8007d88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d15d      	bne.n	8007e62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0220 	bic.w	r2, r2, #32
 8007db4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695a      	ldr	r2, [r3, #20]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0201 	bic.w	r2, r2, #1
 8007dd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d135      	bne.n	8007e58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	330c      	adds	r3, #12
 8007df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	613b      	str	r3, [r7, #16]
   return(result);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f023 0310 	bic.w	r3, r3, #16
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	330c      	adds	r3, #12
 8007e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e12:	623a      	str	r2, [r7, #32]
 8007e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	69f9      	ldr	r1, [r7, #28]
 8007e18:	6a3a      	ldr	r2, [r7, #32]
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e5      	bne.n	8007df2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d10a      	bne.n	8007e4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff fe0b 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
 8007e56:	e002      	b.n	8007e5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff fdf3 	bl	8007a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e002      	b.n	8007e68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e000      	b.n	8007e68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3730      	adds	r7, #48	; 0x30
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e74:	b0c0      	sub	sp, #256	; 0x100
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8c:	68d9      	ldr	r1, [r3, #12]
 8007e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	ea40 0301 	orr.w	r3, r0, r1
 8007e98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ec8:	f021 010c 	bic.w	r1, r1, #12
 8007ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eea:	6999      	ldr	r1, [r3, #24]
 8007eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	ea40 0301 	orr.w	r3, r0, r1
 8007ef6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4b8f      	ldr	r3, [pc, #572]	; (800813c <UART_SetConfig+0x2cc>)
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d005      	beq.n	8007f10 <UART_SetConfig+0xa0>
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	4b8d      	ldr	r3, [pc, #564]	; (8008140 <UART_SetConfig+0x2d0>)
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d104      	bne.n	8007f1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f10:	f7fe fb42 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 8007f14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f18:	e003      	b.n	8007f22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f1a:	f7fe fb29 	bl	8006570 <HAL_RCC_GetPCLK1Freq>
 8007f1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f2c:	f040 810c 	bne.w	8008148 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f42:	4622      	mov	r2, r4
 8007f44:	462b      	mov	r3, r5
 8007f46:	1891      	adds	r1, r2, r2
 8007f48:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f4a:	415b      	adcs	r3, r3
 8007f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f52:	4621      	mov	r1, r4
 8007f54:	eb12 0801 	adds.w	r8, r2, r1
 8007f58:	4629      	mov	r1, r5
 8007f5a:	eb43 0901 	adc.w	r9, r3, r1
 8007f5e:	f04f 0200 	mov.w	r2, #0
 8007f62:	f04f 0300 	mov.w	r3, #0
 8007f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f72:	4690      	mov	r8, r2
 8007f74:	4699      	mov	r9, r3
 8007f76:	4623      	mov	r3, r4
 8007f78:	eb18 0303 	adds.w	r3, r8, r3
 8007f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f80:	462b      	mov	r3, r5
 8007f82:	eb49 0303 	adc.w	r3, r9, r3
 8007f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	18db      	adds	r3, r3, r3
 8007fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	eb42 0303 	adc.w	r3, r2, r3
 8007faa:	657b      	str	r3, [r7, #84]	; 0x54
 8007fac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007fb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007fb4:	f7f8 fdf8 	bl	8000ba8 <__aeabi_uldivmod>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4b61      	ldr	r3, [pc, #388]	; (8008144 <UART_SetConfig+0x2d4>)
 8007fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	011c      	lsls	r4, r3, #4
 8007fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007fd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007fd8:	4642      	mov	r2, r8
 8007fda:	464b      	mov	r3, r9
 8007fdc:	1891      	adds	r1, r2, r2
 8007fde:	64b9      	str	r1, [r7, #72]	; 0x48
 8007fe0:	415b      	adcs	r3, r3
 8007fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fe4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007fe8:	4641      	mov	r1, r8
 8007fea:	eb12 0a01 	adds.w	sl, r2, r1
 8007fee:	4649      	mov	r1, r9
 8007ff0:	eb43 0b01 	adc.w	fp, r3, r1
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008000:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008008:	4692      	mov	sl, r2
 800800a:	469b      	mov	fp, r3
 800800c:	4643      	mov	r3, r8
 800800e:	eb1a 0303 	adds.w	r3, sl, r3
 8008012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008016:	464b      	mov	r3, r9
 8008018:	eb4b 0303 	adc.w	r3, fp, r3
 800801c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800802c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008030:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008034:	460b      	mov	r3, r1
 8008036:	18db      	adds	r3, r3, r3
 8008038:	643b      	str	r3, [r7, #64]	; 0x40
 800803a:	4613      	mov	r3, r2
 800803c:	eb42 0303 	adc.w	r3, r2, r3
 8008040:	647b      	str	r3, [r7, #68]	; 0x44
 8008042:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800804a:	f7f8 fdad 	bl	8000ba8 <__aeabi_uldivmod>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4611      	mov	r1, r2
 8008054:	4b3b      	ldr	r3, [pc, #236]	; (8008144 <UART_SetConfig+0x2d4>)
 8008056:	fba3 2301 	umull	r2, r3, r3, r1
 800805a:	095b      	lsrs	r3, r3, #5
 800805c:	2264      	movs	r2, #100	; 0x64
 800805e:	fb02 f303 	mul.w	r3, r2, r3
 8008062:	1acb      	subs	r3, r1, r3
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800806a:	4b36      	ldr	r3, [pc, #216]	; (8008144 <UART_SetConfig+0x2d4>)
 800806c:	fba3 2302 	umull	r2, r3, r3, r2
 8008070:	095b      	lsrs	r3, r3, #5
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008078:	441c      	add	r4, r3
 800807a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800807e:	2200      	movs	r2, #0
 8008080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008084:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008088:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800808c:	4642      	mov	r2, r8
 800808e:	464b      	mov	r3, r9
 8008090:	1891      	adds	r1, r2, r2
 8008092:	63b9      	str	r1, [r7, #56]	; 0x38
 8008094:	415b      	adcs	r3, r3
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800809c:	4641      	mov	r1, r8
 800809e:	1851      	adds	r1, r2, r1
 80080a0:	6339      	str	r1, [r7, #48]	; 0x30
 80080a2:	4649      	mov	r1, r9
 80080a4:	414b      	adcs	r3, r1
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
 80080a8:	f04f 0200 	mov.w	r2, #0
 80080ac:	f04f 0300 	mov.w	r3, #0
 80080b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80080b4:	4659      	mov	r1, fp
 80080b6:	00cb      	lsls	r3, r1, #3
 80080b8:	4651      	mov	r1, sl
 80080ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080be:	4651      	mov	r1, sl
 80080c0:	00ca      	lsls	r2, r1, #3
 80080c2:	4610      	mov	r0, r2
 80080c4:	4619      	mov	r1, r3
 80080c6:	4603      	mov	r3, r0
 80080c8:	4642      	mov	r2, r8
 80080ca:	189b      	adds	r3, r3, r2
 80080cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080d0:	464b      	mov	r3, r9
 80080d2:	460a      	mov	r2, r1
 80080d4:	eb42 0303 	adc.w	r3, r2, r3
 80080d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80080ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80080f0:	460b      	mov	r3, r1
 80080f2:	18db      	adds	r3, r3, r3
 80080f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080f6:	4613      	mov	r3, r2
 80080f8:	eb42 0303 	adc.w	r3, r2, r3
 80080fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008102:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008106:	f7f8 fd4f 	bl	8000ba8 <__aeabi_uldivmod>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <UART_SetConfig+0x2d4>)
 8008110:	fba3 1302 	umull	r1, r3, r3, r2
 8008114:	095b      	lsrs	r3, r3, #5
 8008116:	2164      	movs	r1, #100	; 0x64
 8008118:	fb01 f303 	mul.w	r3, r1, r3
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	3332      	adds	r3, #50	; 0x32
 8008122:	4a08      	ldr	r2, [pc, #32]	; (8008144 <UART_SetConfig+0x2d4>)
 8008124:	fba2 2303 	umull	r2, r3, r2, r3
 8008128:	095b      	lsrs	r3, r3, #5
 800812a:	f003 0207 	and.w	r2, r3, #7
 800812e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4422      	add	r2, r4
 8008136:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008138:	e106      	b.n	8008348 <UART_SetConfig+0x4d8>
 800813a:	bf00      	nop
 800813c:	40011000 	.word	0x40011000
 8008140:	40011400 	.word	0x40011400
 8008144:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800814c:	2200      	movs	r2, #0
 800814e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008152:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008156:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800815a:	4642      	mov	r2, r8
 800815c:	464b      	mov	r3, r9
 800815e:	1891      	adds	r1, r2, r2
 8008160:	6239      	str	r1, [r7, #32]
 8008162:	415b      	adcs	r3, r3
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
 8008166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800816a:	4641      	mov	r1, r8
 800816c:	1854      	adds	r4, r2, r1
 800816e:	4649      	mov	r1, r9
 8008170:	eb43 0501 	adc.w	r5, r3, r1
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	f04f 0300 	mov.w	r3, #0
 800817c:	00eb      	lsls	r3, r5, #3
 800817e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008182:	00e2      	lsls	r2, r4, #3
 8008184:	4614      	mov	r4, r2
 8008186:	461d      	mov	r5, r3
 8008188:	4643      	mov	r3, r8
 800818a:	18e3      	adds	r3, r4, r3
 800818c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008190:	464b      	mov	r3, r9
 8008192:	eb45 0303 	adc.w	r3, r5, r3
 8008196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800819a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081aa:	f04f 0200 	mov.w	r2, #0
 80081ae:	f04f 0300 	mov.w	r3, #0
 80081b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80081b6:	4629      	mov	r1, r5
 80081b8:	008b      	lsls	r3, r1, #2
 80081ba:	4621      	mov	r1, r4
 80081bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081c0:	4621      	mov	r1, r4
 80081c2:	008a      	lsls	r2, r1, #2
 80081c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80081c8:	f7f8 fcee 	bl	8000ba8 <__aeabi_uldivmod>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4b60      	ldr	r3, [pc, #384]	; (8008354 <UART_SetConfig+0x4e4>)
 80081d2:	fba3 2302 	umull	r2, r3, r3, r2
 80081d6:	095b      	lsrs	r3, r3, #5
 80081d8:	011c      	lsls	r4, r3, #4
 80081da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80081e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80081ec:	4642      	mov	r2, r8
 80081ee:	464b      	mov	r3, r9
 80081f0:	1891      	adds	r1, r2, r2
 80081f2:	61b9      	str	r1, [r7, #24]
 80081f4:	415b      	adcs	r3, r3
 80081f6:	61fb      	str	r3, [r7, #28]
 80081f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081fc:	4641      	mov	r1, r8
 80081fe:	1851      	adds	r1, r2, r1
 8008200:	6139      	str	r1, [r7, #16]
 8008202:	4649      	mov	r1, r9
 8008204:	414b      	adcs	r3, r1
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	f04f 0300 	mov.w	r3, #0
 8008210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008214:	4659      	mov	r1, fp
 8008216:	00cb      	lsls	r3, r1, #3
 8008218:	4651      	mov	r1, sl
 800821a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800821e:	4651      	mov	r1, sl
 8008220:	00ca      	lsls	r2, r1, #3
 8008222:	4610      	mov	r0, r2
 8008224:	4619      	mov	r1, r3
 8008226:	4603      	mov	r3, r0
 8008228:	4642      	mov	r2, r8
 800822a:	189b      	adds	r3, r3, r2
 800822c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008230:	464b      	mov	r3, r9
 8008232:	460a      	mov	r2, r1
 8008234:	eb42 0303 	adc.w	r3, r2, r3
 8008238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	67bb      	str	r3, [r7, #120]	; 0x78
 8008246:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	f04f 0300 	mov.w	r3, #0
 8008250:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008254:	4649      	mov	r1, r9
 8008256:	008b      	lsls	r3, r1, #2
 8008258:	4641      	mov	r1, r8
 800825a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800825e:	4641      	mov	r1, r8
 8008260:	008a      	lsls	r2, r1, #2
 8008262:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008266:	f7f8 fc9f 	bl	8000ba8 <__aeabi_uldivmod>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4611      	mov	r1, r2
 8008270:	4b38      	ldr	r3, [pc, #224]	; (8008354 <UART_SetConfig+0x4e4>)
 8008272:	fba3 2301 	umull	r2, r3, r3, r1
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	2264      	movs	r2, #100	; 0x64
 800827a:	fb02 f303 	mul.w	r3, r2, r3
 800827e:	1acb      	subs	r3, r1, r3
 8008280:	011b      	lsls	r3, r3, #4
 8008282:	3332      	adds	r3, #50	; 0x32
 8008284:	4a33      	ldr	r2, [pc, #204]	; (8008354 <UART_SetConfig+0x4e4>)
 8008286:	fba2 2303 	umull	r2, r3, r2, r3
 800828a:	095b      	lsrs	r3, r3, #5
 800828c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008290:	441c      	add	r4, r3
 8008292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008296:	2200      	movs	r2, #0
 8008298:	673b      	str	r3, [r7, #112]	; 0x70
 800829a:	677a      	str	r2, [r7, #116]	; 0x74
 800829c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80082a0:	4642      	mov	r2, r8
 80082a2:	464b      	mov	r3, r9
 80082a4:	1891      	adds	r1, r2, r2
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	415b      	adcs	r3, r3
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082b0:	4641      	mov	r1, r8
 80082b2:	1851      	adds	r1, r2, r1
 80082b4:	6039      	str	r1, [r7, #0]
 80082b6:	4649      	mov	r1, r9
 80082b8:	414b      	adcs	r3, r1
 80082ba:	607b      	str	r3, [r7, #4]
 80082bc:	f04f 0200 	mov.w	r2, #0
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082c8:	4659      	mov	r1, fp
 80082ca:	00cb      	lsls	r3, r1, #3
 80082cc:	4651      	mov	r1, sl
 80082ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082d2:	4651      	mov	r1, sl
 80082d4:	00ca      	lsls	r2, r1, #3
 80082d6:	4610      	mov	r0, r2
 80082d8:	4619      	mov	r1, r3
 80082da:	4603      	mov	r3, r0
 80082dc:	4642      	mov	r2, r8
 80082de:	189b      	adds	r3, r3, r2
 80082e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80082e2:	464b      	mov	r3, r9
 80082e4:	460a      	mov	r2, r1
 80082e6:	eb42 0303 	adc.w	r3, r2, r3
 80082ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	663b      	str	r3, [r7, #96]	; 0x60
 80082f6:	667a      	str	r2, [r7, #100]	; 0x64
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008304:	4649      	mov	r1, r9
 8008306:	008b      	lsls	r3, r1, #2
 8008308:	4641      	mov	r1, r8
 800830a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800830e:	4641      	mov	r1, r8
 8008310:	008a      	lsls	r2, r1, #2
 8008312:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008316:	f7f8 fc47 	bl	8000ba8 <__aeabi_uldivmod>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <UART_SetConfig+0x4e4>)
 8008320:	fba3 1302 	umull	r1, r3, r3, r2
 8008324:	095b      	lsrs	r3, r3, #5
 8008326:	2164      	movs	r1, #100	; 0x64
 8008328:	fb01 f303 	mul.w	r3, r1, r3
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	3332      	adds	r3, #50	; 0x32
 8008332:	4a08      	ldr	r2, [pc, #32]	; (8008354 <UART_SetConfig+0x4e4>)
 8008334:	fba2 2303 	umull	r2, r3, r2, r3
 8008338:	095b      	lsrs	r3, r3, #5
 800833a:	f003 020f 	and.w	r2, r3, #15
 800833e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4422      	add	r2, r4
 8008346:	609a      	str	r2, [r3, #8]
}
 8008348:	bf00      	nop
 800834a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800834e:	46bd      	mov	sp, r7
 8008350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008354:	51eb851f 	.word	0x51eb851f

08008358 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008358:	b084      	sub	sp, #16
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	f107 001c 	add.w	r0, r7, #28
 8008366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800836a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800836e:	2b01      	cmp	r3, #1
 8008370:	d123      	bne.n	80083ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800839a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d105      	bne.n	80083ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f9dc 	bl	800876c <USB_CoreReset>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
 80083b8:	e01b      	b.n	80083f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f9d0 	bl	800876c <USB_CoreReset>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80083d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d106      	bne.n	80083e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	639a      	str	r2, [r3, #56]	; 0x38
 80083e4:	e005      	b.n	80083f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80083f2:	7fbb      	ldrb	r3, [r7, #30]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d10b      	bne.n	8008410 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f043 0206 	orr.w	r2, r3, #6
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f043 0220 	orr.w	r2, r3, #32
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800841c:	b004      	add	sp, #16
 800841e:	4770      	bx	lr

08008420 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f043 0201 	orr.w	r2, r3, #1
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f023 0201 	bic.w	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d115      	bne.n	80084b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008492:	200a      	movs	r0, #10
 8008494:	f7f9 fe2c 	bl	80020f0 <HAL_Delay>
      ms += 10U;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	330a      	adds	r3, #10
 800849c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f956 	bl	8008750 <USB_GetMode>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d01e      	beq.n	80084e8 <USB_SetCurrentMode+0x84>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2bc7      	cmp	r3, #199	; 0xc7
 80084ae:	d9f0      	bls.n	8008492 <USB_SetCurrentMode+0x2e>
 80084b0:	e01a      	b.n	80084e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d115      	bne.n	80084e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80084c4:	200a      	movs	r0, #10
 80084c6:	f7f9 fe13 	bl	80020f0 <HAL_Delay>
      ms += 10U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	330a      	adds	r3, #10
 80084ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f93d 	bl	8008750 <USB_GetMode>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <USB_SetCurrentMode+0x84>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2bc7      	cmp	r3, #199	; 0xc7
 80084e0:	d9f0      	bls.n	80084c4 <USB_SetCurrentMode+0x60>
 80084e2:	e001      	b.n	80084e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e005      	b.n	80084f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2bc8      	cmp	r3, #200	; 0xc8
 80084ec:	d101      	bne.n	80084f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e000      	b.n	80084f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3301      	adds	r3, #1
 800850e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008516:	d901      	bls.n	800851c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e01b      	b.n	8008554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	daf2      	bge.n	800850a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	019b      	lsls	r3, r3, #6
 800852c:	f043 0220 	orr.w	r2, r3, #32
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3301      	adds	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008540:	d901      	bls.n	8008546 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e006      	b.n	8008554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f003 0320 	and.w	r3, r3, #32
 800854e:	2b20      	cmp	r3, #32
 8008550:	d0f0      	beq.n	8008534 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3301      	adds	r3, #1
 8008570:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008578:	d901      	bls.n	800857e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e018      	b.n	80085b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	daf2      	bge.n	800856c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2210      	movs	r2, #16
 800858e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3301      	adds	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800859c:	d901      	bls.n	80085a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e006      	b.n	80085b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0310 	and.w	r3, r3, #16
 80085aa:	2b10      	cmp	r3, #16
 80085ac:	d0f0      	beq.n	8008590 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80085bc:	b480      	push	{r7}
 80085be:	b089      	sub	sp, #36	; 0x24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	4611      	mov	r1, r2
 80085c8:	461a      	mov	r2, r3
 80085ca:	460b      	mov	r3, r1
 80085cc:	71fb      	strb	r3, [r7, #7]
 80085ce:	4613      	mov	r3, r2
 80085d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80085da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d123      	bne.n	800862a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80085e2:	88bb      	ldrh	r3, [r7, #4]
 80085e4:	3303      	adds	r3, #3
 80085e6:	089b      	lsrs	r3, r3, #2
 80085e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80085ea:	2300      	movs	r3, #0
 80085ec:	61bb      	str	r3, [r7, #24]
 80085ee:	e018      	b.n	8008622 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	031a      	lsls	r2, r3, #12
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085fc:	461a      	mov	r2, r3
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	3301      	adds	r3, #1
 8008608:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	3301      	adds	r3, #1
 800860e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	3301      	adds	r3, #1
 8008614:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	3301      	adds	r3, #1
 800861a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	3301      	adds	r3, #1
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	429a      	cmp	r2, r3
 8008628:	d3e2      	bcc.n	80085f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3724      	adds	r7, #36	; 0x24
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008638:	b480      	push	{r7}
 800863a:	b08b      	sub	sp, #44	; 0x2c
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800864e:	88fb      	ldrh	r3, [r7, #6]
 8008650:	089b      	lsrs	r3, r3, #2
 8008652:	b29b      	uxth	r3, r3
 8008654:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	f003 0303 	and.w	r3, r3, #3
 800865c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800865e:	2300      	movs	r3, #0
 8008660:	623b      	str	r3, [r7, #32]
 8008662:	e014      	b.n	800868e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	3301      	adds	r3, #1
 8008674:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	3301      	adds	r3, #1
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	3301      	adds	r3, #1
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	3301      	adds	r3, #1
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	3301      	adds	r3, #1
 800868c:	623b      	str	r3, [r7, #32]
 800868e:	6a3a      	ldr	r2, [r7, #32]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	429a      	cmp	r2, r3
 8008694:	d3e6      	bcc.n	8008664 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008696:	8bfb      	ldrh	r3, [r7, #30]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01e      	beq.n	80086da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a6:	461a      	mov	r2, r3
 80086a8:	f107 0310 	add.w	r3, r7, #16
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	fa22 f303 	lsr.w	r3, r2, r3
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	701a      	strb	r2, [r3, #0]
      i++;
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	3301      	adds	r3, #1
 80086c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	3301      	adds	r3, #1
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80086ce:	8bfb      	ldrh	r3, [r7, #30]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80086d4:	8bfb      	ldrh	r3, [r7, #30]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1ea      	bne.n	80086b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086dc:	4618      	mov	r0, r3
 80086de:	372c      	adds	r7, #44	; 0x2c
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	4013      	ands	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008700:	68fb      	ldr	r3, [r7, #12]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800870e:	b480      	push	{r7}
 8008710:	b085      	sub	sp, #20
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4413      	add	r3, r2
 8008726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800872e:	78fb      	ldrb	r3, [r7, #3]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	4413      	add	r3, r2
 8008736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	4013      	ands	r3, r2
 8008740:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008742:	68bb      	ldr	r3, [r7, #8]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	f003 0301 	and.w	r3, r3, #1
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008784:	d901      	bls.n	800878a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e01b      	b.n	80087c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	daf2      	bge.n	8008778 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f043 0201 	orr.w	r2, r3, #1
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80087ae:	d901      	bls.n	80087b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e006      	b.n	80087c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d0f0      	beq.n	80087a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
	...

080087d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087d0:	b084      	sub	sp, #16
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b086      	sub	sp, #24
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80087de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087f0:	461a      	mov	r2, r3
 80087f2:	2300      	movs	r3, #0
 80087f4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008822:	2b00      	cmp	r3, #0
 8008824:	d119      	bne.n	800885a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800882a:	2b01      	cmp	r3, #1
 800882c:	d10a      	bne.n	8008844 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800883c:	f043 0304 	orr.w	r3, r3, #4
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	e014      	b.n	800886e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008852:	f023 0304 	bic.w	r3, r3, #4
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	e009      	b.n	800886e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008868:	f023 0304 	bic.w	r3, r3, #4
 800886c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800886e:	2110      	movs	r1, #16
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fe43 	bl	80084fc <USB_FlushTxFifo>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff fe6d 	bl	8008560 <USB_FlushRxFifo>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008890:	2300      	movs	r3, #0
 8008892:	613b      	str	r3, [r7, #16]
 8008894:	e015      	b.n	80088c2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	4413      	add	r3, r2
 800889e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a2:	461a      	mov	r2, r3
 80088a4:	f04f 33ff 	mov.w	r3, #4294967295
 80088a8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b6:	461a      	mov	r2, r3
 80088b8:	2300      	movs	r3, #0
 80088ba:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	3301      	adds	r3, #1
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80088c6:	461a      	mov	r2, r3
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d3e3      	bcc.n	8008896 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f04f 32ff 	mov.w	r2, #4294967295
 80088da:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a18      	ldr	r2, [pc, #96]	; (8008940 <USB_HostInit+0x170>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d10b      	bne.n	80088fc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a15      	ldr	r2, [pc, #84]	; (8008944 <USB_HostInit+0x174>)
 80088f0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a14      	ldr	r2, [pc, #80]	; (8008948 <USB_HostInit+0x178>)
 80088f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80088fa:	e009      	b.n	8008910 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2280      	movs	r2, #128	; 0x80
 8008900:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a11      	ldr	r2, [pc, #68]	; (800894c <USB_HostInit+0x17c>)
 8008906:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a11      	ldr	r2, [pc, #68]	; (8008950 <USB_HostInit+0x180>)
 800890c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008910:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008914:	2b00      	cmp	r3, #0
 8008916:	d105      	bne.n	8008924 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	f043 0210 	orr.w	r2, r3, #16
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <USB_HostInit+0x184>)
 800892a:	4313      	orrs	r3, r2
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008930:	7dfb      	ldrb	r3, [r7, #23]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800893c:	b004      	add	sp, #16
 800893e:	4770      	bx	lr
 8008940:	40040000 	.word	0x40040000
 8008944:	01000200 	.word	0x01000200
 8008948:	00e00300 	.word	0x00e00300
 800894c:	00600080 	.word	0x00600080
 8008950:	004000e0 	.word	0x004000e0
 8008954:	a3200008 	.word	0xa3200008

08008958 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008976:	f023 0303 	bic.w	r3, r3, #3
 800897a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	68f9      	ldr	r1, [r7, #12]
 800898c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008990:	4313      	orrs	r3, r2
 8008992:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d107      	bne.n	80089aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089a0:	461a      	mov	r2, r3
 80089a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80089a6:	6053      	str	r3, [r2, #4]
 80089a8:	e00c      	b.n	80089c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d107      	bne.n	80089c0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089b6:	461a      	mov	r2, r3
 80089b8:	f241 7370 	movw	r3, #6000	; 0x1770
 80089bc:	6053      	str	r3, [r2, #4]
 80089be:	e001      	b.n	80089c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e000      	b.n	80089c6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80089f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <USB_DriveVbus+0x44>
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d106      	bne.n	8008a16 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a14:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a20:	d109      	bne.n	8008a36 <USB_DriveVbus+0x64>
 8008a22:	78fb      	ldrb	r3, [r7, #3]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d106      	bne.n	8008a36 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a34:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	0c5b      	lsrs	r3, r3, #17
 8008a62:	f003 0303 	and.w	r3, r3, #3
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b085      	sub	sp, #20
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	b29b      	uxth	r3, r3
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	70fb      	strb	r3, [r7, #3]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	70bb      	strb	r3, [r7, #2]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008aca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d87c      	bhi.n	8008bcc <USB_HC_Init+0x138>
 8008ad2:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <USB_HC_Init+0x44>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008ae9 	.word	0x08008ae9
 8008adc:	08008b8f 	.word	0x08008b8f
 8008ae0:	08008ae9 	.word	0x08008ae9
 8008ae4:	08008b51 	.word	0x08008b51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af4:	461a      	mov	r2, r3
 8008af6:	f240 439d 	movw	r3, #1181	; 0x49d
 8008afa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008afc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	da10      	bge.n	8008b26 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	78fa      	ldrb	r2, [r7, #3]
 8008b14:	0151      	lsls	r1, r2, #5
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	440a      	add	r2, r1
 8008b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b22:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008b24:	e055      	b.n	8008bd2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a6f      	ldr	r2, [pc, #444]	; (8008ce8 <USB_HC_Init+0x254>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d151      	bne.n	8008bd2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008b4c:	60d3      	str	r3, [r2, #12]
      break;
 8008b4e:	e040      	b.n	8008bd2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008b62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	da34      	bge.n	8008bd6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	0151      	lsls	r1, r2, #5
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	440a      	add	r2, r1
 8008b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008b8c:	e023      	b.n	8008bd6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f240 2325 	movw	r3, #549	; 0x225
 8008ba0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	da17      	bge.n	8008bda <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008baa:	78fb      	ldrb	r3, [r7, #3]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	0151      	lsls	r1, r2, #5
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bc4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008bc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008bca:	e006      	b.n	8008bda <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	77fb      	strb	r3, [r7, #31]
      break;
 8008bd0:	e004      	b.n	8008bdc <USB_HC_Init+0x148>
      break;
 8008bd2:	bf00      	nop
 8008bd4:	e002      	b.n	8008bdc <USB_HC_Init+0x148>
      break;
 8008bd6:	bf00      	nop
 8008bd8:	e000      	b.n	8008bdc <USB_HC_Init+0x148>
      break;
 8008bda:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be8:	461a      	mov	r2, r3
 8008bea:	2300      	movs	r3, #0
 8008bec:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008bee:	78fb      	ldrb	r3, [r7, #3]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	78fa      	ldrb	r2, [r7, #3]
 8008bfe:	0151      	lsls	r1, r2, #5
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	440a      	add	r2, r1
 8008c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c08:	f043 0302 	orr.w	r3, r3, #2
 8008c0c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c14:	699a      	ldr	r2, [r3, #24]
 8008c16:	78fb      	ldrb	r3, [r7, #3]
 8008c18:	f003 030f 	and.w	r3, r3, #15
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c22:	6939      	ldr	r1, [r7, #16]
 8008c24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008c38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	da03      	bge.n	8008c48 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	e001      	b.n	8008c4c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff fef9 	bl	8008a44 <USB_GetHostSpeed>
 8008c52:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008c54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d106      	bne.n	8008c6a <USB_HC_Init+0x1d6>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d003      	beq.n	8008c6a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008c62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	e001      	b.n	8008c6e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c6e:	787b      	ldrb	r3, [r7, #1]
 8008c70:	059b      	lsls	r3, r3, #22
 8008c72:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c76:	78bb      	ldrb	r3, [r7, #2]
 8008c78:	02db      	lsls	r3, r3, #11
 8008c7a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c7e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c84:	049b      	lsls	r3, r3, #18
 8008c86:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c8a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008c8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c92:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	431a      	orrs	r2, r3
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c9c:	78fa      	ldrb	r2, [r7, #3]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008cac:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008cae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d003      	beq.n	8008cbe <USB_HC_Init+0x22a>
 8008cb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d10f      	bne.n	8008cde <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	78fa      	ldrb	r2, [r7, #3]
 8008cce:	0151      	lsls	r1, r2, #5
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	440a      	add	r2, r1
 8008cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cdc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008cde:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	40040000 	.word	0x40040000

08008cec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08c      	sub	sp, #48	; 0x30
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d08:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4a5d      	ldr	r2, [pc, #372]	; (8008e84 <USB_HC_StartXfer+0x198>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d12f      	bne.n	8008d72 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d11c      	bne.n	8008d52 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	7c9b      	ldrb	r3, [r3, #18]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <USB_HC_StartXfer+0x3c>
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	7c9b      	ldrb	r3, [r3, #18]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d124      	bne.n	8008d72 <USB_HC_StartXfer+0x86>
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	799b      	ldrb	r3, [r3, #6]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d120      	bne.n	8008d72 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	6a3a      	ldr	r2, [r7, #32]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4e:	60d3      	str	r3, [r2, #12]
 8008d50:	e00f      	b.n	8008d72 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	791b      	ldrb	r3, [r3, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10b      	bne.n	8008d72 <USB_HC_StartXfer+0x86>
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	795b      	ldrb	r3, [r3, #5]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d107      	bne.n	8008d72 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	785b      	ldrb	r3, [r3, #1]
 8008d66:	4619      	mov	r1, r3
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 fb6b 	bl	8009444 <USB_DoPing>
        return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e232      	b.n	80091d8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	799b      	ldrb	r3, [r3, #6]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d158      	bne.n	8008e2c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	78db      	ldrb	r3, [r3, #3]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d007      	beq.n	8008d96 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	8a92      	ldrh	r2, [r2, #20]
 8008d8c:	fb03 f202 	mul.w	r2, r3, r2
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	61da      	str	r2, [r3, #28]
 8008d94:	e07c      	b.n	8008e90 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	7c9b      	ldrb	r3, [r3, #18]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d130      	bne.n	8008e00 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	2bbc      	cmp	r3, #188	; 0xbc
 8008da4:	d918      	bls.n	8008dd8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	8a9b      	ldrh	r3, [r3, #20]
 8008daa:	461a      	mov	r2, r3
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	69da      	ldr	r2, [r3, #28]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d003      	beq.n	8008dc8 <USB_HC_StartXfer+0xdc>
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d103      	bne.n	8008dd0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	60da      	str	r2, [r3, #12]
 8008dce:	e05f      	b.n	8008e90 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	60da      	str	r2, [r3, #12]
 8008dd6:	e05b      	b.n	8008e90 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	6a1a      	ldr	r2, [r3, #32]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d007      	beq.n	8008df8 <USB_HC_StartXfer+0x10c>
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d003      	beq.n	8008df8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2204      	movs	r2, #4
 8008df4:	60da      	str	r2, [r3, #12]
 8008df6:	e04b      	b.n	8008e90 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	60da      	str	r2, [r3, #12]
 8008dfe:	e047      	b.n	8008e90 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d10d      	bne.n	8008e22 <USB_HC_StartXfer+0x136>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	8a92      	ldrh	r2, [r2, #20]
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d907      	bls.n	8008e22 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008e12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	8a92      	ldrh	r2, [r2, #20]
 8008e18:	fb03 f202 	mul.w	r2, r3, r2
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	61da      	str	r2, [r3, #28]
 8008e20:	e036      	b.n	8008e90 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	6a1a      	ldr	r2, [r3, #32]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	61da      	str	r2, [r3, #28]
 8008e2a:	e031      	b.n	8008e90 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d018      	beq.n	8008e66 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	8a92      	ldrh	r2, [r2, #20]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	8a92      	ldrh	r2, [r2, #20]
 8008e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e48:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8008e4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008e4c:	8b7b      	ldrh	r3, [r7, #26]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d90b      	bls.n	8008e6a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008e52:	8b7b      	ldrh	r3, [r7, #26]
 8008e54:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008e56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	8a92      	ldrh	r2, [r2, #20]
 8008e5c:	fb03 f202 	mul.w	r2, r3, r2
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	61da      	str	r2, [r3, #28]
 8008e64:	e001      	b.n	8008e6a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008e66:	2301      	movs	r3, #1
 8008e68:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	78db      	ldrb	r3, [r3, #3]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008e72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	8a92      	ldrh	r2, [r2, #20]
 8008e78:	fb03 f202 	mul.w	r2, r3, r2
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	61da      	str	r2, [r3, #28]
 8008e80:	e006      	b.n	8008e90 <USB_HC_StartXfer+0x1a4>
 8008e82:	bf00      	nop
 8008e84:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	6a1a      	ldr	r2, [r3, #32]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e9a:	04d9      	lsls	r1, r3, #19
 8008e9c:	4ba3      	ldr	r3, [pc, #652]	; (800912c <USB_HC_StartXfer+0x440>)
 8008e9e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ea0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	7d9b      	ldrb	r3, [r3, #22]
 8008ea6:	075b      	lsls	r3, r3, #29
 8008ea8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008eac:	69f9      	ldr	r1, [r7, #28]
 8008eae:	0148      	lsls	r0, r1, #5
 8008eb0:	6a39      	ldr	r1, [r7, #32]
 8008eb2:	4401      	add	r1, r0
 8008eb4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008eb8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008eba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	6999      	ldr	r1, [r3, #24]
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed2:	460a      	mov	r2, r1
 8008ed4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	bf0c      	ite	eq
 8008ee6:	2301      	moveq	r3, #1
 8008ee8:	2300      	movne	r3, #0
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	0151      	lsls	r1, r2, #5
 8008f00:	6a3a      	ldr	r2, [r7, #32]
 8008f02:	440a      	add	r2, r1
 8008f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f0c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	7e7b      	ldrb	r3, [r7, #25]
 8008f1e:	075b      	lsls	r3, r3, #29
 8008f20:	69f9      	ldr	r1, [r7, #28]
 8008f22:	0148      	lsls	r0, r1, #5
 8008f24:	6a39      	ldr	r1, [r7, #32]
 8008f26:	4401      	add	r1, r0
 8008f28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	799b      	ldrb	r3, [r3, #6]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	f040 80c3 	bne.w	80090c0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	7c5b      	ldrb	r3, [r3, #17]
 8008f3e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008f44:	4313      	orrs	r3, r2
 8008f46:	69fa      	ldr	r2, [r7, #28]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	6a3a      	ldr	r2, [r7, #32]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008f56:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	0151      	lsls	r1, r2, #5
 8008f6a:	6a3a      	ldr	r2, [r7, #32]
 8008f6c:	440a      	add	r2, r1
 8008f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	79db      	ldrb	r3, [r3, #7]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d123      	bne.n	8008fc8 <USB_HC_StartXfer+0x2dc>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	78db      	ldrb	r3, [r3, #3]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d11f      	bne.n	8008fc8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	69fa      	ldr	r2, [r7, #28]
 8008f98:	0151      	lsls	r1, r2, #5
 8008f9a:	6a3a      	ldr	r2, [r7, #32]
 8008f9c:	440a      	add	r2, r1
 8008f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fa6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	0151      	lsls	r1, r2, #5
 8008fba:	6a3a      	ldr	r2, [r7, #32]
 8008fbc:	440a      	add	r2, r1
 8008fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	7c9b      	ldrb	r3, [r3, #18]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d003      	beq.n	8008fd8 <USB_HC_StartXfer+0x2ec>
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	7c9b      	ldrb	r3, [r3, #18]
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d117      	bne.n	8009008 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d113      	bne.n	8009008 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	78db      	ldrb	r3, [r3, #3]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d10f      	bne.n	8009008 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	6a3a      	ldr	r2, [r7, #32]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009006:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	7c9b      	ldrb	r3, [r3, #18]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d162      	bne.n	80090d6 <USB_HC_StartXfer+0x3ea>
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	78db      	ldrb	r3, [r3, #3]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d15e      	bne.n	80090d6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	3b01      	subs	r3, #1
 800901e:	2b03      	cmp	r3, #3
 8009020:	d858      	bhi.n	80090d4 <USB_HC_StartXfer+0x3e8>
 8009022:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <USB_HC_StartXfer+0x33c>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009039 	.word	0x08009039
 800902c:	0800905b 	.word	0x0800905b
 8009030:	0800907d 	.word	0x0800907d
 8009034:	0800909f 	.word	0x0800909f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	4413      	add	r3, r2
 8009040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	69fa      	ldr	r2, [r7, #28]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	6a3a      	ldr	r2, [r7, #32]
 800904c:	440a      	add	r2, r1
 800904e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009056:	6053      	str	r3, [r2, #4]
          break;
 8009058:	e03d      	b.n	80090d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	4413      	add	r3, r2
 8009062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	69fa      	ldr	r2, [r7, #28]
 800906a:	0151      	lsls	r1, r2, #5
 800906c:	6a3a      	ldr	r2, [r7, #32]
 800906e:	440a      	add	r2, r1
 8009070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009074:	f043 030e 	orr.w	r3, r3, #14
 8009078:	6053      	str	r3, [r2, #4]
          break;
 800907a:	e02c      	b.n	80090d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	4413      	add	r3, r2
 8009084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	0151      	lsls	r1, r2, #5
 800908e:	6a3a      	ldr	r2, [r7, #32]
 8009090:	440a      	add	r2, r1
 8009092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800909a:	6053      	str	r3, [r2, #4]
          break;
 800909c:	e01b      	b.n	80090d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	0151      	lsls	r1, r2, #5
 80090b0:	6a3a      	ldr	r2, [r7, #32]
 80090b2:	440a      	add	r2, r1
 80090b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090bc:	6053      	str	r3, [r2, #4]
          break;
 80090be:	e00a      	b.n	80090d6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090cc:	461a      	mov	r2, r3
 80090ce:	2300      	movs	r3, #0
 80090d0:	6053      	str	r3, [r2, #4]
 80090d2:	e000      	b.n	80090d6 <USB_HC_StartXfer+0x3ea>
          break;
 80090d4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80090ec:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	78db      	ldrb	r3, [r3, #3]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d004      	beq.n	8009100 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090fc:	613b      	str	r3, [r7, #16]
 80090fe:	e003      	b.n	8009108 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009106:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800910e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	4413      	add	r3, r2
 8009118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800911c:	461a      	mov	r2, r3
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009122:	79fb      	ldrb	r3, [r7, #7]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	e055      	b.n	80091d8 <USB_HC_StartXfer+0x4ec>
 800912c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	78db      	ldrb	r3, [r3, #3]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d14e      	bne.n	80091d6 <USB_HC_StartXfer+0x4ea>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d04a      	beq.n	80091d6 <USB_HC_StartXfer+0x4ea>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	79db      	ldrb	r3, [r3, #7]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d146      	bne.n	80091d6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	7c9b      	ldrb	r3, [r3, #18]
 800914c:	2b03      	cmp	r3, #3
 800914e:	d831      	bhi.n	80091b4 <USB_HC_StartXfer+0x4c8>
 8009150:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <USB_HC_StartXfer+0x46c>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	08009169 	.word	0x08009169
 800915c:	0800918d 	.word	0x0800918d
 8009160:	08009169 	.word	0x08009169
 8009164:	0800918d 	.word	0x0800918d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	3303      	adds	r3, #3
 800916e:	089b      	lsrs	r3, r3, #2
 8009170:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009172:	8afa      	ldrh	r2, [r7, #22]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	b29b      	uxth	r3, r3
 800917a:	429a      	cmp	r2, r3
 800917c:	d91c      	bls.n	80091b8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	f043 0220 	orr.w	r2, r3, #32
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	619a      	str	r2, [r3, #24]
        }
        break;
 800918a:	e015      	b.n	80091b8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	3303      	adds	r3, #3
 8009192:	089b      	lsrs	r3, r3, #2
 8009194:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009196:	8afa      	ldrh	r2, [r7, #22]
 8009198:	6a3b      	ldr	r3, [r7, #32]
 800919a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d90a      	bls.n	80091bc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80091b2:	e003      	b.n	80091bc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80091b4:	bf00      	nop
 80091b6:	e002      	b.n	80091be <USB_HC_StartXfer+0x4d2>
        break;
 80091b8:	bf00      	nop
 80091ba:	e000      	b.n	80091be <USB_HC_StartXfer+0x4d2>
        break;
 80091bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6999      	ldr	r1, [r3, #24]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	785a      	ldrb	r2, [r3, #1]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	2000      	movs	r0, #0
 80091ce:	9000      	str	r0, [sp, #0]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7ff f9f3 	bl	80085bc <USB_WritePacket>
  }

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3728      	adds	r7, #40	; 0x28
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	b29b      	uxth	r3, r3
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009202:	b480      	push	{r7}
 8009204:	b089      	sub	sp, #36	; 0x24
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	460b      	mov	r3, r1
 800920c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	4413      	add	r3, r2
 8009222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	0c9b      	lsrs	r3, r3, #18
 800922a:	f003 0303 	and.w	r3, r3, #3
 800922e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	4413      	add	r3, r2
 8009238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	0fdb      	lsrs	r3, r3, #31
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	0fdb      	lsrs	r3, r3, #31
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	2b20      	cmp	r3, #32
 8009266:	d10d      	bne.n	8009284 <USB_HC_Halt+0x82>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10a      	bne.n	8009284 <USB_HC_Halt+0x82>
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d002      	beq.n	8009280 <USB_HC_Halt+0x7e>
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b03      	cmp	r3, #3
 800927e:	d101      	bne.n	8009284 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	e0d8      	b.n	8009436 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <USB_HC_Halt+0x8e>
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d173      	bne.n	8009378 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	4413      	add	r3, r2
 8009298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	69fa      	ldr	r2, [r7, #28]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d14a      	bne.n	8009352 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d133      	bne.n	8009330 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	0151      	lsls	r1, r2, #5
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	440a      	add	r2, r1
 80092de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092e6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	0151      	lsls	r1, r2, #5
 80092fa:	69fa      	ldr	r2, [r7, #28]
 80092fc:	440a      	add	r2, r1
 80092fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009302:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009306:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	3301      	adds	r3, #1
 800930c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009314:	d82e      	bhi.n	8009374 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	4413      	add	r3, r2
 800931e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800932c:	d0ec      	beq.n	8009308 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800932e:	e081      	b.n	8009434 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	4413      	add	r3, r2
 8009338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	0151      	lsls	r1, r2, #5
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	440a      	add	r2, r1
 8009346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800934a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800934e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009350:	e070      	b.n	8009434 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	4413      	add	r3, r2
 800935a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	0151      	lsls	r1, r2, #5
 8009364:	69fa      	ldr	r2, [r7, #28]
 8009366:	440a      	add	r2, r1
 8009368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800936c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009370:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009372:	e05f      	b.n	8009434 <USB_HC_Halt+0x232>
            break;
 8009374:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009376:	e05d      	b.n	8009434 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	4413      	add	r3, r2
 8009380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	0151      	lsls	r1, r2, #5
 800938a:	69fa      	ldr	r2, [r7, #28]
 800938c:	440a      	add	r2, r1
 800938e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009396:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d133      	bne.n	8009410 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	0151      	lsls	r1, r2, #5
 80093ba:	69fa      	ldr	r2, [r7, #28]
 80093bc:	440a      	add	r2, r1
 80093be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	0151      	lsls	r1, r2, #5
 80093da:	69fa      	ldr	r2, [r7, #28]
 80093dc:	440a      	add	r2, r1
 80093de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093e6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	3301      	adds	r3, #1
 80093ec:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093f4:	d81d      	bhi.n	8009432 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800940c:	d0ec      	beq.n	80093e8 <USB_HC_Halt+0x1e6>
 800940e:	e011      	b.n	8009434 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	4413      	add	r3, r2
 8009418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	69fa      	ldr	r2, [r7, #28]
 8009424:	440a      	add	r2, r1
 8009426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800942a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	e000      	b.n	8009434 <USB_HC_Halt+0x232>
          break;
 8009432:	bf00      	nop
    }
  }

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3724      	adds	r7, #36	; 0x24
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
	...

08009444 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009458:	2301      	movs	r3, #1
 800945a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	04da      	lsls	r2, r3, #19
 8009460:	4b15      	ldr	r3, [pc, #84]	; (80094b8 <USB_DoPing+0x74>)
 8009462:	4013      	ands	r3, r2
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	0151      	lsls	r1, r2, #5
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	440a      	add	r2, r1
 800946c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009474:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	4413      	add	r3, r2
 800947e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800948c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009494:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	4413      	add	r3, r2
 800949e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a2:	461a      	mov	r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	371c      	adds	r7, #28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	1ff80000 	.word	0x1ff80000

080094bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7fe ffb6 	bl	8008442 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80094d6:	2110      	movs	r1, #16
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff f80f 	bl	80084fc <USB_FlushTxFifo>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7ff f839 	bl	8008560 <USB_FlushRxFifo>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80094f8:	2300      	movs	r3, #0
 80094fa:	61bb      	str	r3, [r7, #24]
 80094fc:	e01f      	b.n	800953e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	4413      	add	r3, r2
 8009506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009514:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800951c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009524:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	4413      	add	r3, r2
 800952e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009532:	461a      	mov	r2, r3
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	3301      	adds	r3, #1
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	2b0f      	cmp	r3, #15
 8009542:	d9dc      	bls.n	80094fe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009544:	2300      	movs	r3, #0
 8009546:	61bb      	str	r3, [r7, #24]
 8009548:	e034      	b.n	80095b4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	015a      	lsls	r2, r3, #5
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	4413      	add	r3, r2
 8009552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009560:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009568:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009570:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	4413      	add	r3, r2
 800957a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800957e:	461a      	mov	r2, r3
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3301      	adds	r3, #1
 8009588:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009590:	d80c      	bhi.n	80095ac <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	4413      	add	r3, r2
 800959a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095a8:	d0ec      	beq.n	8009584 <USB_StopHost+0xc8>
 80095aa:	e000      	b.n	80095ae <USB_StopHost+0xf2>
        break;
 80095ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	3301      	adds	r3, #1
 80095b2:	61bb      	str	r3, [r7, #24]
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b0f      	cmp	r3, #15
 80095b8:	d9c7      	bls.n	800954a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095c0:	461a      	mov	r2, r3
 80095c2:	f04f 33ff 	mov.w	r3, #4294967295
 80095c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f04f 32ff 	mov.w	r2, #4294967295
 80095ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7fe ff25 	bl	8008420 <USB_EnableGlobalInt>

  return ret;
 80095d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3720      	adds	r7, #32
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80095e0:	b590      	push	{r4, r7, lr}
 80095e2:	b089      	sub	sp, #36	; 0x24
 80095e4:	af04      	add	r7, sp, #16
 80095e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80095e8:	2301      	movs	r3, #1
 80095ea:	2202      	movs	r2, #2
 80095ec:	2102      	movs	r1, #2
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fc85 	bl	8009efe <USBH_FindInterface>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	2bff      	cmp	r3, #255	; 0xff
 80095fc:	d002      	beq.n	8009604 <USBH_CDC_InterfaceInit+0x24>
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d901      	bls.n	8009608 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009604:	2302      	movs	r3, #2
 8009606:	e13d      	b.n	8009884 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fc5a 	bl	8009ec6 <USBH_SelectInterface>
 8009612:	4603      	mov	r3, r0
 8009614:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800961c:	2302      	movs	r3, #2
 800961e:	e131      	b.n	8009884 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009626:	2050      	movs	r0, #80	; 0x50
 8009628:	f001 fb0a 	bl	800ac40 <malloc>
 800962c:	4603      	mov	r3, r0
 800962e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009636:	69db      	ldr	r3, [r3, #28]
 8009638:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009640:	2302      	movs	r3, #2
 8009642:	e11f      	b.n	8009884 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009644:	2250      	movs	r2, #80	; 0x50
 8009646:	2100      	movs	r1, #0
 8009648:	68b8      	ldr	r0, [r7, #8]
 800964a:	f002 f974 	bl	800b936 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	211a      	movs	r1, #26
 8009654:	fb01 f303 	mul.w	r3, r1, r3
 8009658:	4413      	add	r3, r2
 800965a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	b25b      	sxtb	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	da15      	bge.n	8009692 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	211a      	movs	r1, #26
 800966c:	fb01 f303 	mul.w	r3, r1, r3
 8009670:	4413      	add	r3, r2
 8009672:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009676:	781a      	ldrb	r2, [r3, #0]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	211a      	movs	r1, #26
 8009682:	fb01 f303 	mul.w	r3, r1, r3
 8009686:	4413      	add	r3, r2
 8009688:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800968c:	881a      	ldrh	r2, [r3, #0]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	785b      	ldrb	r3, [r3, #1]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 ffba 	bl	800a612 <USBH_AllocPipe>
 800969e:	4603      	mov	r3, r0
 80096a0:	461a      	mov	r2, r3
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	7819      	ldrb	r1, [r3, #0]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	7858      	ldrb	r0, [r3, #1]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	8952      	ldrh	r2, [r2, #10]
 80096be:	9202      	str	r2, [sp, #8]
 80096c0:	2203      	movs	r2, #3
 80096c2:	9201      	str	r2, [sp, #4]
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	4623      	mov	r3, r4
 80096c8:	4602      	mov	r2, r0
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 ff72 	bl	800a5b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2200      	movs	r2, #0
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 fa35 	bl	800ab48 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80096de:	2300      	movs	r3, #0
 80096e0:	2200      	movs	r2, #0
 80096e2:	210a      	movs	r1, #10
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fc0a 	bl	8009efe <USBH_FindInterface>
 80096ea:	4603      	mov	r3, r0
 80096ec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
 80096f0:	2bff      	cmp	r3, #255	; 0xff
 80096f2:	d002      	beq.n	80096fa <USBH_CDC_InterfaceInit+0x11a>
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d901      	bls.n	80096fe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80096fa:	2302      	movs	r3, #2
 80096fc:	e0c2      	b.n	8009884 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	211a      	movs	r1, #26
 8009704:	fb01 f303 	mul.w	r3, r1, r3
 8009708:	4413      	add	r3, r2
 800970a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	b25b      	sxtb	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	da16      	bge.n	8009744 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	211a      	movs	r1, #26
 800971c:	fb01 f303 	mul.w	r3, r1, r3
 8009720:	4413      	add	r3, r2
 8009722:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009726:	781a      	ldrb	r2, [r3, #0]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	211a      	movs	r1, #26
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	4413      	add	r3, r2
 8009738:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800973c:	881a      	ldrh	r2, [r3, #0]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	835a      	strh	r2, [r3, #26]
 8009742:	e015      	b.n	8009770 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	211a      	movs	r1, #26
 800974a:	fb01 f303 	mul.w	r3, r1, r3
 800974e:	4413      	add	r3, r2
 8009750:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009754:	781a      	ldrb	r2, [r3, #0]
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800975a:	7bfb      	ldrb	r3, [r7, #15]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	211a      	movs	r1, #26
 8009760:	fb01 f303 	mul.w	r3, r1, r3
 8009764:	4413      	add	r3, r2
 8009766:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800976a:	881a      	ldrh	r2, [r3, #0]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	211a      	movs	r1, #26
 8009776:	fb01 f303 	mul.w	r3, r1, r3
 800977a:	4413      	add	r3, r2
 800977c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b25b      	sxtb	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	da16      	bge.n	80097b6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009788:	7bfb      	ldrb	r3, [r7, #15]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	211a      	movs	r1, #26
 800978e:	fb01 f303 	mul.w	r3, r1, r3
 8009792:	4413      	add	r3, r2
 8009794:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009798:	781a      	ldrb	r2, [r3, #0]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	211a      	movs	r1, #26
 80097a4:	fb01 f303 	mul.w	r3, r1, r3
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80097ae:	881a      	ldrh	r2, [r3, #0]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	835a      	strh	r2, [r3, #26]
 80097b4:	e015      	b.n	80097e2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	211a      	movs	r1, #26
 80097bc:	fb01 f303 	mul.w	r3, r1, r3
 80097c0:	4413      	add	r3, r2
 80097c2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	211a      	movs	r1, #26
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80097dc:	881a      	ldrh	r2, [r3, #0]
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	7b9b      	ldrb	r3, [r3, #14]
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 ff12 	bl	800a612 <USBH_AllocPipe>
 80097ee:	4603      	mov	r3, r0
 80097f0:	461a      	mov	r2, r3
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	7bdb      	ldrb	r3, [r3, #15]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 ff08 	bl	800a612 <USBH_AllocPipe>
 8009802:	4603      	mov	r3, r0
 8009804:	461a      	mov	r2, r3
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	7b59      	ldrb	r1, [r3, #13]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	7b98      	ldrb	r0, [r3, #14]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	8b12      	ldrh	r2, [r2, #24]
 8009822:	9202      	str	r2, [sp, #8]
 8009824:	2202      	movs	r2, #2
 8009826:	9201      	str	r2, [sp, #4]
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	4623      	mov	r3, r4
 800982c:	4602      	mov	r2, r0
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fec0 	bl	800a5b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	7b19      	ldrb	r1, [r3, #12]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	7bd8      	ldrb	r0, [r3, #15]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	8b52      	ldrh	r2, [r2, #26]
 800984c:	9202      	str	r2, [sp, #8]
 800984e:	2202      	movs	r2, #2
 8009850:	9201      	str	r2, [sp, #4]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	4623      	mov	r3, r4
 8009856:	4602      	mov	r2, r0
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 feab 	bl	800a5b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	7b5b      	ldrb	r3, [r3, #13]
 800986a:	2200      	movs	r2, #0
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 f96a 	bl	800ab48 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	7b1b      	ldrb	r3, [r3, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f001 f963 	bl	800ab48 <USBH_LL_SetToggle>

  return USBH_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	bd90      	pop	{r4, r7, pc}

0800988c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00e      	beq.n	80098c4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fea0 	bl	800a5f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	4619      	mov	r1, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fecb 	bl	800a654 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	7b1b      	ldrb	r3, [r3, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00e      	beq.n	80098ea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	7b1b      	ldrb	r3, [r3, #12]
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fe8d 	bl	800a5f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	7b1b      	ldrb	r3, [r3, #12]
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 feb8 	bl	800a654 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	7b5b      	ldrb	r3, [r3, #13]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00e      	beq.n	8009910 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	7b5b      	ldrb	r3, [r3, #13]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fe7a 	bl	800a5f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	7b5b      	ldrb	r3, [r3, #13]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fea5 	bl	800a654 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00b      	beq.n	8009934 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	4618      	mov	r0, r3
 8009926:	f001 f993 	bl	800ac50 <free>
    phost->pActiveClass->pData = 0U;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009930:	2200      	movs	r2, #0
 8009932:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	3340      	adds	r3, #64	; 0x40
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f8b1 	bl	8009abe <GetLineCoding>
 800995c:	4603      	mov	r3, r0
 800995e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009960:	7afb      	ldrb	r3, [r7, #11]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d105      	bne.n	8009972 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800996c:	2102      	movs	r1, #2
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009972:	7afb      	ldrb	r3, [r7, #11]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009984:	2301      	movs	r3, #1
 8009986:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800999c:	2b04      	cmp	r3, #4
 800999e:	d877      	bhi.n	8009a90 <USBH_CDC_Process+0x114>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <USBH_CDC_Process+0x2c>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099bd 	.word	0x080099bd
 80099ac:	080099c3 	.word	0x080099c3
 80099b0:	080099f3 	.word	0x080099f3
 80099b4:	08009a67 	.word	0x08009a67
 80099b8:	08009a75 	.word	0x08009a75
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
      break;
 80099c0:	e06d      	b.n	8009a9e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f897 	bl	8009afc <SetLineCoding>
 80099ce:	4603      	mov	r3, r0
 80099d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d104      	bne.n	80099e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2202      	movs	r2, #2
 80099dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80099e0:	e058      	b.n	8009a94 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d055      	beq.n	8009a94 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2204      	movs	r2, #4
 80099ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80099f0:	e050      	b.n	8009a94 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	3340      	adds	r3, #64	; 0x40
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f860 	bl	8009abe <GetLineCoding>
 80099fe:	4603      	mov	r3, r0
 8009a00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d126      	bne.n	8009a56 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a1a:	791b      	ldrb	r3, [r3, #4]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d13b      	bne.n	8009a98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a2a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d133      	bne.n	8009a98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a3a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d12b      	bne.n	8009a98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a48:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d124      	bne.n	8009a98 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f958 	bl	8009d04 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009a54:	e020      	b.n	8009a98 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d01d      	beq.n	8009a98 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2204      	movs	r2, #4
 8009a60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009a64:	e018      	b.n	8009a98 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f867 	bl	8009b3a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f8da 	bl	8009c26 <CDC_ProcessReception>
      break;
 8009a72:	e014      	b.n	8009a9e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009a74:	2100      	movs	r1, #0
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fb27 	bl	800a0ca <USBH_ClrFeature>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10a      	bne.n	8009a9c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009a8e:	e005      	b.n	8009a9c <USBH_CDC_Process+0x120>

    default:
      break;
 8009a90:	bf00      	nop
 8009a92:	e004      	b.n	8009a9e <USBH_CDC_Process+0x122>
      break;
 8009a94:	bf00      	nop
 8009a96:	e002      	b.n	8009a9e <USBH_CDC_Process+0x122>
      break;
 8009a98:	bf00      	nop
 8009a9a:	e000      	b.n	8009a9e <USBH_CDC_Process+0x122>
      break;
 8009a9c:	bf00      	nop

  }

  return status;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	22a1      	movs	r2, #161	; 0xa1
 8009acc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2221      	movs	r2, #33	; 0x21
 8009ad2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2207      	movs	r2, #7
 8009ae4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2207      	movs	r2, #7
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fb10 	bl	800a112 <USBH_CtlReq>
 8009af2:	4603      	mov	r3, r0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2221      	movs	r2, #33	; 0x21
 8009b0a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2207      	movs	r2, #7
 8009b22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2207      	movs	r2, #7
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 faf1 	bl	800a112 <USBH_CtlReq>
 8009b30:	4603      	mov	r3, r0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b086      	sub	sp, #24
 8009b3e:	af02      	add	r7, sp, #8
 8009b40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d002      	beq.n	8009b60 <CDC_ProcessTransmission+0x26>
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d023      	beq.n	8009ba6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009b5e:	e05e      	b.n	8009c1e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	8b12      	ldrh	r2, [r2, #24]
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d90b      	bls.n	8009b84 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	69d9      	ldr	r1, [r3, #28]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	8b1a      	ldrh	r2, [r3, #24]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	7b5b      	ldrb	r3, [r3, #13]
 8009b78:	2001      	movs	r0, #1
 8009b7a:	9000      	str	r0, [sp, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fcd6 	bl	800a52e <USBH_BulkSendData>
 8009b82:	e00b      	b.n	8009b9c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	7b5b      	ldrb	r3, [r3, #13]
 8009b92:	2001      	movs	r0, #1
 8009b94:	9000      	str	r0, [sp, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fcc9 	bl	800a52e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2202      	movs	r2, #2
 8009ba0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009ba4:	e03b      	b.n	8009c1e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	7b5b      	ldrb	r3, [r3, #13]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 ffa1 	bl	800aaf4 <USBH_LL_GetURBState>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009bb6:	7afb      	ldrb	r3, [r7, #11]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d128      	bne.n	8009c0e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	8b12      	ldrh	r2, [r2, #24]
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d90e      	bls.n	8009be6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	8b12      	ldrh	r2, [r2, #24]
 8009bd0:	1a9a      	subs	r2, r3, r2
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	8b12      	ldrh	r2, [r2, #24]
 8009bde:	441a      	add	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	61da      	str	r2, [r3, #28]
 8009be4:	e002      	b.n	8009bec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d004      	beq.n	8009bfe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009bfc:	e00e      	b.n	8009c1c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f868 	bl	8009cdc <USBH_CDC_TransmitCallback>
      break;
 8009c0c:	e006      	b.n	8009c1c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009c0e:	7afb      	ldrb	r3, [r7, #11]
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d103      	bne.n	8009c1c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009c1c:	bf00      	nop
  }
}
 8009c1e:	bf00      	nop
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b086      	sub	sp, #24
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d002      	beq.n	8009c4c <CDC_ProcessReception+0x26>
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d00e      	beq.n	8009c68 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009c4a:	e043      	b.n	8009cd4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	6a19      	ldr	r1, [r3, #32]
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	8b5a      	ldrh	r2, [r3, #26]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	7b1b      	ldrb	r3, [r3, #12]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fc8d 	bl	800a578 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2204      	movs	r2, #4
 8009c62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009c66:	e035      	b.n	8009cd4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	7b1b      	ldrb	r3, [r3, #12]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 ff40 	bl	800aaf4 <USBH_LL_GetURBState>
 8009c74:	4603      	mov	r3, r0
 8009c76:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009c78:	7cfb      	ldrb	r3, [r7, #19]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d129      	bne.n	8009cd2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	7b1b      	ldrb	r3, [r3, #12]
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fea3 	bl	800a9d0 <USBH_LL_GetLastXferSize>
 8009c8a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d016      	beq.n	8009cc4 <CDC_ProcessReception+0x9e>
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	8b5b      	ldrh	r3, [r3, #26]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d910      	bls.n	8009cc4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	1ad2      	subs	r2, r2, r3
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	6a1a      	ldr	r2, [r3, #32]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	441a      	add	r2, r3
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2203      	movs	r2, #3
 8009cbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009cc2:	e006      	b.n	8009cd2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f80f 	bl	8009cf0 <USBH_CDC_ReceiveCallback>
      break;
 8009cd2:	bf00      	nop
  }
}
 8009cd4:	bf00      	nop
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	e029      	b.n	8009d84 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	79fa      	ldrb	r2, [r7, #7]
 8009d34:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f000 f81f 	bl	8009d8c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 fdb5 	bl	800a8ec <USBH_LL_Init>

  return USBH_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009d94:	2300      	movs	r3, #0
 8009d96:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	e009      	b.n	8009db2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	33e0      	adds	r3, #224	; 0xe0
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	2200      	movs	r2, #0
 8009daa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3301      	adds	r3, #1
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2b0f      	cmp	r3, #15
 8009db6:	d9f2      	bls.n	8009d9e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	e009      	b.n	8009dd2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009dc8:	2200      	movs	r2, #0
 8009dca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dd8:	d3f1      	bcc.n	8009dbe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2240      	movs	r2, #64	; 0x40
 8009dfe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	331c      	adds	r3, #28
 8009e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 fd80 	bl	800b936 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e40:	2100      	movs	r1, #0
 8009e42:	4618      	mov	r0, r3
 8009e44:	f001 fd77 	bl	800b936 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f203 3326 	addw	r3, r3, #806	; 0x326
 8009e4e:	2212      	movs	r2, #18
 8009e50:	2100      	movs	r1, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 fd6f 	bl	800b936 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009e5e:	223e      	movs	r2, #62	; 0x3e
 8009e60:	2100      	movs	r1, #0
 8009e62:	4618      	mov	r0, r3
 8009e64:	f001 fd67 	bl	800b936 <memset>

  return USBH_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b085      	sub	sp, #20
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d016      	beq.n	8009eb4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10e      	bne.n	8009eae <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e96:	1c59      	adds	r1, r3, #1
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	33de      	adds	r3, #222	; 0xde
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73fb      	strb	r3, [r7, #15]
 8009eac:	e004      	b.n	8009eb8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009eae:	2302      	movs	r3, #2
 8009eb0:	73fb      	strb	r3, [r7, #15]
 8009eb2:	e001      	b.n	8009eb8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009edc:	78fa      	ldrb	r2, [r7, #3]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d204      	bcs.n	8009eec <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	78fa      	ldrb	r2, [r7, #3]
 8009ee6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009eea:	e001      	b.n	8009ef0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009eec:	2302      	movs	r3, #2
 8009eee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b087      	sub	sp, #28
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	4608      	mov	r0, r1
 8009f08:	4611      	mov	r1, r2
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	70fb      	strb	r3, [r7, #3]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70bb      	strb	r3, [r7, #2]
 8009f14:	4613      	mov	r3, r2
 8009f16:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f26:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f28:	e025      	b.n	8009f76 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	221a      	movs	r2, #26
 8009f2e:	fb02 f303 	mul.w	r3, r2, r3
 8009f32:	3308      	adds	r3, #8
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	3302      	adds	r3, #2
 8009f3a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	795b      	ldrb	r3, [r3, #5]
 8009f40:	78fa      	ldrb	r2, [r7, #3]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d002      	beq.n	8009f4c <USBH_FindInterface+0x4e>
 8009f46:	78fb      	ldrb	r3, [r7, #3]
 8009f48:	2bff      	cmp	r3, #255	; 0xff
 8009f4a:	d111      	bne.n	8009f70 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f50:	78ba      	ldrb	r2, [r7, #2]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d002      	beq.n	8009f5c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f56:	78bb      	ldrb	r3, [r7, #2]
 8009f58:	2bff      	cmp	r3, #255	; 0xff
 8009f5a:	d109      	bne.n	8009f70 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f60:	787a      	ldrb	r2, [r7, #1]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d002      	beq.n	8009f6c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f66:	787b      	ldrb	r3, [r7, #1]
 8009f68:	2bff      	cmp	r3, #255	; 0xff
 8009f6a:	d101      	bne.n	8009f70 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	e006      	b.n	8009f7e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	3301      	adds	r3, #1
 8009f74:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d9d6      	bls.n	8009f2a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009f7c:	23ff      	movs	r3, #255	; 0xff
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fce6 	bl	800a964 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009f98:	2101      	movs	r1, #1
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fdbd 	bl	800ab1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b083      	sub	sp, #12
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fd6:	1c5a      	adds	r2, r3, #1
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f804 	bl	8009fec <USBH_HandleSof>
}
 8009fe4:	bf00      	nop
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b0b      	cmp	r3, #11
 8009ffc:	d10a      	bne.n	800a014 <USBH_HandleSof+0x28>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a004:	2b00      	cmp	r3, #0
 800a006:	d005      	beq.n	800a014 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	4798      	blx	r3
  }
}
 800a014:	bf00      	nop
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a02c:	bf00      	nop
}
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a048:	bf00      	nop
}
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b082      	sub	sp, #8
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fc79 	bl	800a99a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	791b      	ldrb	r3, [r3, #4]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fad0 	bl	800a654 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	795b      	ldrb	r3, [r3, #5]
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 faca 	bl	800a654 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	789b      	ldrb	r3, [r3, #2]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d10f      	bne.n	800a0fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a0fe:	2200      	movs	r2, #0
 800a100:	2100      	movs	r1, #0
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f805 	bl	800a112 <USBH_CtlReq>
 800a108:	4603      	mov	r3, r0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b086      	sub	sp, #24
 800a116:	af00      	add	r7, sp, #0
 800a118:	60f8      	str	r0, [r7, #12]
 800a11a:	60b9      	str	r1, [r7, #8]
 800a11c:	4613      	mov	r3, r2
 800a11e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a120:	2301      	movs	r3, #1
 800a122:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	789b      	ldrb	r3, [r3, #2]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d002      	beq.n	800a132 <USBH_CtlReq+0x20>
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d00f      	beq.n	800a150 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a130:	e027      	b.n	800a182 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	88fa      	ldrh	r2, [r7, #6]
 800a13c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2202      	movs	r2, #2
 800a148:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a14a:	2301      	movs	r3, #1
 800a14c:	75fb      	strb	r3, [r7, #23]
      break;
 800a14e:	e018      	b.n	800a182 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 f81b 	bl	800a18c <USBH_HandleControl>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <USBH_CtlReq+0x54>
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	2b03      	cmp	r3, #3
 800a164:	d106      	bne.n	800a174 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2201      	movs	r2, #1
 800a16a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	761a      	strb	r2, [r3, #24]
      break;
 800a172:	e005      	b.n	800a180 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a174:	7dfb      	ldrb	r3, [r7, #23]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d102      	bne.n	800a180 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2201      	movs	r2, #1
 800a17e:	709a      	strb	r2, [r3, #2]
      break;
 800a180:	bf00      	nop
  }
  return status;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af02      	add	r7, sp, #8
 800a192:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a194:	2301      	movs	r3, #1
 800a196:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a198:	2300      	movs	r3, #0
 800a19a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	7e1b      	ldrb	r3, [r3, #24]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	2b0a      	cmp	r3, #10
 800a1a4:	f200 8156 	bhi.w	800a454 <USBH_HandleControl+0x2c8>
 800a1a8:	a201      	add	r2, pc, #4	; (adr r2, 800a1b0 <USBH_HandleControl+0x24>)
 800a1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ae:	bf00      	nop
 800a1b0:	0800a1dd 	.word	0x0800a1dd
 800a1b4:	0800a1f7 	.word	0x0800a1f7
 800a1b8:	0800a261 	.word	0x0800a261
 800a1bc:	0800a287 	.word	0x0800a287
 800a1c0:	0800a2bf 	.word	0x0800a2bf
 800a1c4:	0800a2e9 	.word	0x0800a2e9
 800a1c8:	0800a33b 	.word	0x0800a33b
 800a1cc:	0800a35d 	.word	0x0800a35d
 800a1d0:	0800a399 	.word	0x0800a399
 800a1d4:	0800a3bf 	.word	0x0800a3bf
 800a1d8:	0800a3fd 	.word	0x0800a3fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f103 0110 	add.w	r1, r3, #16
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	795b      	ldrb	r3, [r3, #5]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f943 	bl	800a474 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2202      	movs	r2, #2
 800a1f2:	761a      	strb	r2, [r3, #24]
      break;
 800a1f4:	e139      	b.n	800a46a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	795b      	ldrb	r3, [r3, #5]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fc79 	bl	800aaf4 <USBH_LL_GetURBState>
 800a202:	4603      	mov	r3, r0
 800a204:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a206:	7bbb      	ldrb	r3, [r7, #14]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d11e      	bne.n	800a24a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	7c1b      	ldrb	r3, [r3, #16]
 800a210:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a214:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	8adb      	ldrh	r3, [r3, #22]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a21e:	7b7b      	ldrb	r3, [r7, #13]
 800a220:	2b80      	cmp	r3, #128	; 0x80
 800a222:	d103      	bne.n	800a22c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2203      	movs	r2, #3
 800a228:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a22a:	e115      	b.n	800a458 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2205      	movs	r2, #5
 800a230:	761a      	strb	r2, [r3, #24]
      break;
 800a232:	e111      	b.n	800a458 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a234:	7b7b      	ldrb	r3, [r7, #13]
 800a236:	2b80      	cmp	r3, #128	; 0x80
 800a238:	d103      	bne.n	800a242 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2209      	movs	r2, #9
 800a23e:	761a      	strb	r2, [r3, #24]
      break;
 800a240:	e10a      	b.n	800a458 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2207      	movs	r2, #7
 800a246:	761a      	strb	r2, [r3, #24]
      break;
 800a248:	e106      	b.n	800a458 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	d003      	beq.n	800a258 <USBH_HandleControl+0xcc>
 800a250:	7bbb      	ldrb	r3, [r7, #14]
 800a252:	2b02      	cmp	r3, #2
 800a254:	f040 8100 	bne.w	800a458 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	220b      	movs	r2, #11
 800a25c:	761a      	strb	r2, [r3, #24]
      break;
 800a25e:	e0fb      	b.n	800a458 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a266:	b29a      	uxth	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6899      	ldr	r1, [r3, #8]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	899a      	ldrh	r2, [r3, #12]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	791b      	ldrb	r3, [r3, #4]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f93a 	bl	800a4f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2204      	movs	r2, #4
 800a282:	761a      	strb	r2, [r3, #24]
      break;
 800a284:	e0f1      	b.n	800a46a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	791b      	ldrb	r3, [r3, #4]
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fc31 	bl	800aaf4 <USBH_LL_GetURBState>
 800a292:	4603      	mov	r3, r0
 800a294:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d102      	bne.n	800a2a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2209      	movs	r2, #9
 800a2a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	2b05      	cmp	r3, #5
 800a2a6:	d102      	bne.n	800a2ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2ac:	e0d6      	b.n	800a45c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	2b04      	cmp	r3, #4
 800a2b2:	f040 80d3 	bne.w	800a45c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	220b      	movs	r2, #11
 800a2ba:	761a      	strb	r2, [r3, #24]
      break;
 800a2bc:	e0ce      	b.n	800a45c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6899      	ldr	r1, [r3, #8]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	899a      	ldrh	r2, [r3, #12]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	795b      	ldrb	r3, [r3, #5]
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	9000      	str	r0, [sp, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f8ea 	bl	800a4a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2206      	movs	r2, #6
 800a2e4:	761a      	strb	r2, [r3, #24]
      break;
 800a2e6:	e0c0      	b.n	800a46a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	795b      	ldrb	r3, [r3, #5]
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fc00 	bl	800aaf4 <USBH_LL_GetURBState>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d103      	bne.n	800a306 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2207      	movs	r2, #7
 800a302:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a304:	e0ac      	b.n	800a460 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a306:	7bbb      	ldrb	r3, [r7, #14]
 800a308:	2b05      	cmp	r3, #5
 800a30a:	d105      	bne.n	800a318 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	220c      	movs	r2, #12
 800a310:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a312:	2303      	movs	r3, #3
 800a314:	73fb      	strb	r3, [r7, #15]
      break;
 800a316:	e0a3      	b.n	800a460 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a318:	7bbb      	ldrb	r3, [r7, #14]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d103      	bne.n	800a326 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2205      	movs	r2, #5
 800a322:	761a      	strb	r2, [r3, #24]
      break;
 800a324:	e09c      	b.n	800a460 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a326:	7bbb      	ldrb	r3, [r7, #14]
 800a328:	2b04      	cmp	r3, #4
 800a32a:	f040 8099 	bne.w	800a460 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	220b      	movs	r2, #11
 800a332:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a334:	2302      	movs	r3, #2
 800a336:	73fb      	strb	r3, [r7, #15]
      break;
 800a338:	e092      	b.n	800a460 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	791b      	ldrb	r3, [r3, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	2100      	movs	r1, #0
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f8d5 	bl	800a4f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a34e:	b29a      	uxth	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2208      	movs	r2, #8
 800a358:	761a      	strb	r2, [r3, #24]

      break;
 800a35a:	e086      	b.n	800a46a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	791b      	ldrb	r3, [r3, #4]
 800a360:	4619      	mov	r1, r3
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fbc6 	bl	800aaf4 <USBH_LL_GetURBState>
 800a368:	4603      	mov	r3, r0
 800a36a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d105      	bne.n	800a37e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	220d      	movs	r2, #13
 800a376:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a37c:	e072      	b.n	800a464 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a37e:	7bbb      	ldrb	r3, [r7, #14]
 800a380:	2b04      	cmp	r3, #4
 800a382:	d103      	bne.n	800a38c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	220b      	movs	r2, #11
 800a388:	761a      	strb	r2, [r3, #24]
      break;
 800a38a:	e06b      	b.n	800a464 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a38c:	7bbb      	ldrb	r3, [r7, #14]
 800a38e:	2b05      	cmp	r3, #5
 800a390:	d168      	bne.n	800a464 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a392:	2303      	movs	r3, #3
 800a394:	73fb      	strb	r3, [r7, #15]
      break;
 800a396:	e065      	b.n	800a464 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	795b      	ldrb	r3, [r3, #5]
 800a39c:	2201      	movs	r2, #1
 800a39e:	9200      	str	r2, [sp, #0]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f87f 	bl	800a4a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	220a      	movs	r2, #10
 800a3ba:	761a      	strb	r2, [r3, #24]
      break;
 800a3bc:	e055      	b.n	800a46a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	795b      	ldrb	r3, [r3, #5]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fb95 	bl	800aaf4 <USBH_LL_GetURBState>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d105      	bne.n	800a3e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	220d      	movs	r2, #13
 800a3dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3de:	e043      	b.n	800a468 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d103      	bne.n	800a3ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2209      	movs	r2, #9
 800a3ea:	761a      	strb	r2, [r3, #24]
      break;
 800a3ec:	e03c      	b.n	800a468 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
 800a3f0:	2b04      	cmp	r3, #4
 800a3f2:	d139      	bne.n	800a468 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	220b      	movs	r2, #11
 800a3f8:	761a      	strb	r2, [r3, #24]
      break;
 800a3fa:	e035      	b.n	800a468 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	7e5b      	ldrb	r3, [r3, #25]
 800a400:	3301      	adds	r3, #1
 800a402:	b2da      	uxtb	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	765a      	strb	r2, [r3, #25]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	7e5b      	ldrb	r3, [r3, #25]
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d806      	bhi.n	800a41e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a41c:	e025      	b.n	800a46a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a424:	2106      	movs	r1, #6
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	795b      	ldrb	r3, [r3, #5]
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f90c 	bl	800a654 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	791b      	ldrb	r3, [r3, #4]
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f906 	bl	800a654 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a44e:	2302      	movs	r3, #2
 800a450:	73fb      	strb	r3, [r7, #15]
      break;
 800a452:	e00a      	b.n	800a46a <USBH_HandleControl+0x2de>

    default:
      break;
 800a454:	bf00      	nop
 800a456:	e008      	b.n	800a46a <USBH_HandleControl+0x2de>
      break;
 800a458:	bf00      	nop
 800a45a:	e006      	b.n	800a46a <USBH_HandleControl+0x2de>
      break;
 800a45c:	bf00      	nop
 800a45e:	e004      	b.n	800a46a <USBH_HandleControl+0x2de>
      break;
 800a460:	bf00      	nop
 800a462:	e002      	b.n	800a46a <USBH_HandleControl+0x2de>
      break;
 800a464:	bf00      	nop
 800a466:	e000      	b.n	800a46a <USBH_HandleControl+0x2de>
      break;
 800a468:	bf00      	nop
  }

  return status;
 800a46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af04      	add	r7, sp, #16
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	4613      	mov	r3, r2
 800a480:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a482:	79f9      	ldrb	r1, [r7, #7]
 800a484:	2300      	movs	r3, #0
 800a486:	9303      	str	r3, [sp, #12]
 800a488:	2308      	movs	r3, #8
 800a48a:	9302      	str	r3, [sp, #8]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	2300      	movs	r3, #0
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	2300      	movs	r3, #0
 800a496:	2200      	movs	r2, #0
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 fafa 	bl	800aa92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b088      	sub	sp, #32
 800a4ac:	af04      	add	r7, sp, #16
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	80fb      	strh	r3, [r7, #6]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4cc:	7979      	ldrb	r1, [r7, #5]
 800a4ce:	7e3b      	ldrb	r3, [r7, #24]
 800a4d0:	9303      	str	r3, [sp, #12]
 800a4d2:	88fb      	ldrh	r3, [r7, #6]
 800a4d4:	9302      	str	r3, [sp, #8]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	2301      	movs	r3, #1
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f000 fad5 	bl	800aa92 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b088      	sub	sp, #32
 800a4f6:	af04      	add	r7, sp, #16
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	461a      	mov	r2, r3
 800a500:	460b      	mov	r3, r1
 800a502:	80fb      	strh	r3, [r7, #6]
 800a504:	4613      	mov	r3, r2
 800a506:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a508:	7979      	ldrb	r1, [r7, #5]
 800a50a:	2300      	movs	r3, #0
 800a50c:	9303      	str	r3, [sp, #12]
 800a50e:	88fb      	ldrh	r3, [r7, #6]
 800a510:	9302      	str	r3, [sp, #8]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	2301      	movs	r3, #1
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	2300      	movs	r3, #0
 800a51c:	2201      	movs	r2, #1
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f000 fab7 	bl	800aa92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a524:	2300      	movs	r3, #0

}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b088      	sub	sp, #32
 800a532:	af04      	add	r7, sp, #16
 800a534:	60f8      	str	r0, [r7, #12]
 800a536:	60b9      	str	r1, [r7, #8]
 800a538:	4611      	mov	r1, r2
 800a53a:	461a      	mov	r2, r3
 800a53c:	460b      	mov	r3, r1
 800a53e:	80fb      	strh	r3, [r7, #6]
 800a540:	4613      	mov	r3, r2
 800a542:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a54e:	2300      	movs	r3, #0
 800a550:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a552:	7979      	ldrb	r1, [r7, #5]
 800a554:	7e3b      	ldrb	r3, [r7, #24]
 800a556:	9303      	str	r3, [sp, #12]
 800a558:	88fb      	ldrh	r3, [r7, #6]
 800a55a:	9302      	str	r3, [sp, #8]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	2301      	movs	r3, #1
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	2302      	movs	r3, #2
 800a566:	2200      	movs	r2, #0
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 fa92 	bl	800aa92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b088      	sub	sp, #32
 800a57c:	af04      	add	r7, sp, #16
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	4611      	mov	r1, r2
 800a584:	461a      	mov	r2, r3
 800a586:	460b      	mov	r3, r1
 800a588:	80fb      	strh	r3, [r7, #6]
 800a58a:	4613      	mov	r3, r2
 800a58c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a58e:	7979      	ldrb	r1, [r7, #5]
 800a590:	2300      	movs	r3, #0
 800a592:	9303      	str	r3, [sp, #12]
 800a594:	88fb      	ldrh	r3, [r7, #6]
 800a596:	9302      	str	r3, [sp, #8]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	9301      	str	r3, [sp, #4]
 800a59c:	2301      	movs	r3, #1
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f000 fa74 	bl	800aa92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af04      	add	r7, sp, #16
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	70fb      	strb	r3, [r7, #3]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70bb      	strb	r3, [r7, #2]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a5ce:	7878      	ldrb	r0, [r7, #1]
 800a5d0:	78ba      	ldrb	r2, [r7, #2]
 800a5d2:	78f9      	ldrb	r1, [r7, #3]
 800a5d4:	8b3b      	ldrh	r3, [r7, #24]
 800a5d6:	9302      	str	r3, [sp, #8]
 800a5d8:	7d3b      	ldrb	r3, [r7, #20]
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	7c3b      	ldrb	r3, [r7, #16]
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fa07 	bl	800a9f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b082      	sub	sp, #8
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fa26 	bl	800aa54 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	460b      	mov	r3, r1
 800a61c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f836 	bl	800a690 <USBH_GetFreePipe>
 800a624:	4603      	mov	r3, r0
 800a626:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a628:	89fb      	ldrh	r3, [r7, #14]
 800a62a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a62e:	4293      	cmp	r3, r2
 800a630:	d00a      	beq.n	800a648 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a632:	78fa      	ldrb	r2, [r7, #3]
 800a634:	89fb      	ldrh	r3, [r7, #14]
 800a636:	f003 030f 	and.w	r3, r3, #15
 800a63a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	33e0      	adds	r3, #224	; 0xe0
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	440b      	add	r3, r1
 800a646:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a648:	89fb      	ldrh	r3, [r7, #14]
 800a64a:	b2db      	uxtb	r3, r3
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	2b0f      	cmp	r3, #15
 800a664:	d80d      	bhi.n	800a682 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a666:	78fb      	ldrb	r3, [r7, #3]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	33e0      	adds	r3, #224	; 0xe0
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	78fb      	ldrb	r3, [r7, #3]
 800a674:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a678:	6879      	ldr	r1, [r7, #4]
 800a67a:	33e0      	adds	r3, #224	; 0xe0
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	440b      	add	r3, r1
 800a680:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a698:	2300      	movs	r3, #0
 800a69a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a69c:	2300      	movs	r3, #0
 800a69e:	73fb      	strb	r3, [r7, #15]
 800a6a0:	e00f      	b.n	800a6c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	33e0      	adds	r3, #224	; 0xe0
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d102      	bne.n	800a6bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	e007      	b.n	800a6cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	73fb      	strb	r3, [r7, #15]
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	2b0f      	cmp	r3, #15
 800a6c6:	d9ec      	bls.n	800a6a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a6c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a6dc:	2201      	movs	r2, #1
 800a6de:	490e      	ldr	r1, [pc, #56]	; (800a718 <MX_USB_HOST_Init+0x40>)
 800a6e0:	480e      	ldr	r0, [pc, #56]	; (800a71c <MX_USB_HOST_Init+0x44>)
 800a6e2:	f7ff fb19 	bl	8009d18 <USBH_Init>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a6ec:	f7f7 f950 	bl	8001990 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a6f0:	490b      	ldr	r1, [pc, #44]	; (800a720 <MX_USB_HOST_Init+0x48>)
 800a6f2:	480a      	ldr	r0, [pc, #40]	; (800a71c <MX_USB_HOST_Init+0x44>)
 800a6f4:	f7ff fbbd 	bl	8009e72 <USBH_RegisterClass>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a6fe:	f7f7 f947 	bl	8001990 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a702:	4806      	ldr	r0, [pc, #24]	; (800a71c <MX_USB_HOST_Init+0x44>)
 800a704:	f7ff fc41 	bl	8009f8a <USBH_Start>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a70e:	f7f7 f93f 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a712:	bf00      	nop
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	0800a725 	.word	0x0800a725
 800a71c:	200003fc 	.word	0x200003fc
 800a720:	2000000c 	.word	0x2000000c

0800a724 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a730:	78fb      	ldrb	r3, [r7, #3]
 800a732:	3b01      	subs	r3, #1
 800a734:	2b04      	cmp	r3, #4
 800a736:	d819      	bhi.n	800a76c <USBH_UserProcess+0x48>
 800a738:	a201      	add	r2, pc, #4	; (adr r2, 800a740 <USBH_UserProcess+0x1c>)
 800a73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73e:	bf00      	nop
 800a740:	0800a76d 	.word	0x0800a76d
 800a744:	0800a75d 	.word	0x0800a75d
 800a748:	0800a76d 	.word	0x0800a76d
 800a74c:	0800a765 	.word	0x0800a765
 800a750:	0800a755 	.word	0x0800a755
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a754:	4b09      	ldr	r3, [pc, #36]	; (800a77c <USBH_UserProcess+0x58>)
 800a756:	2203      	movs	r2, #3
 800a758:	701a      	strb	r2, [r3, #0]
  break;
 800a75a:	e008      	b.n	800a76e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a75c:	4b07      	ldr	r3, [pc, #28]	; (800a77c <USBH_UserProcess+0x58>)
 800a75e:	2202      	movs	r2, #2
 800a760:	701a      	strb	r2, [r3, #0]
  break;
 800a762:	e004      	b.n	800a76e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a764:	4b05      	ldr	r3, [pc, #20]	; (800a77c <USBH_UserProcess+0x58>)
 800a766:	2201      	movs	r2, #1
 800a768:	701a      	strb	r2, [r3, #0]
  break;
 800a76a:	e000      	b.n	800a76e <USBH_UserProcess+0x4a>

  default:
  break;
 800a76c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	200007d4 	.word	0x200007d4

0800a780 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b08a      	sub	sp, #40	; 0x28
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a788:	f107 0314 	add.w	r3, r7, #20
 800a78c:	2200      	movs	r2, #0
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	609a      	str	r2, [r3, #8]
 800a794:	60da      	str	r2, [r3, #12]
 800a796:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7a0:	d147      	bne.n	800a832 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	613b      	str	r3, [r7, #16]
 800a7a6:	4b25      	ldr	r3, [pc, #148]	; (800a83c <HAL_HCD_MspInit+0xbc>)
 800a7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7aa:	4a24      	ldr	r2, [pc, #144]	; (800a83c <HAL_HCD_MspInit+0xbc>)
 800a7ac:	f043 0301 	orr.w	r3, r3, #1
 800a7b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a7b2:	4b22      	ldr	r3, [pc, #136]	; (800a83c <HAL_HCD_MspInit+0xbc>)
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	613b      	str	r3, [r7, #16]
 800a7bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a7be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a7cc:	f107 0314 	add.w	r3, r7, #20
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	481b      	ldr	r0, [pc, #108]	; (800a840 <HAL_HCD_MspInit+0xc0>)
 800a7d4:	f7f8 f9c4 	bl	8002b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a7d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a7dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7de:	2302      	movs	r3, #2
 800a7e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a7ea:	230a      	movs	r3, #10
 800a7ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7ee:	f107 0314 	add.w	r3, r7, #20
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	4812      	ldr	r0, [pc, #72]	; (800a840 <HAL_HCD_MspInit+0xc0>)
 800a7f6:	f7f8 f9b3 	bl	8002b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a7fa:	4b10      	ldr	r3, [pc, #64]	; (800a83c <HAL_HCD_MspInit+0xbc>)
 800a7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7fe:	4a0f      	ldr	r2, [pc, #60]	; (800a83c <HAL_HCD_MspInit+0xbc>)
 800a800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a804:	6353      	str	r3, [r2, #52]	; 0x34
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	4b0c      	ldr	r3, [pc, #48]	; (800a83c <HAL_HCD_MspInit+0xbc>)
 800a80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a80e:	4a0b      	ldr	r2, [pc, #44]	; (800a83c <HAL_HCD_MspInit+0xbc>)
 800a810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a814:	6453      	str	r3, [r2, #68]	; 0x44
 800a816:	4b09      	ldr	r3, [pc, #36]	; (800a83c <HAL_HCD_MspInit+0xbc>)
 800a818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a81a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a81e:	60fb      	str	r3, [r7, #12]
 800a820:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a822:	2200      	movs	r2, #0
 800a824:	2100      	movs	r1, #0
 800a826:	2043      	movs	r0, #67	; 0x43
 800a828:	f7f7 fd61 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a82c:	2043      	movs	r0, #67	; 0x43
 800a82e:	f7f7 fd7a 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a832:	bf00      	nop
 800a834:	3728      	adds	r7, #40	; 0x28
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	40023800 	.word	0x40023800
 800a840:	40020000 	.word	0x40020000

0800a844 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff fbb8 	bl	8009fc8 <USBH_LL_IncTimer>
}
 800a858:	bf00      	nop
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a86e:	4618      	mov	r0, r3
 800a870:	f7ff fbf0 	bl	800a054 <USBH_LL_Connect>
}
 800a874:	bf00      	nop
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7ff fbf9 	bl	800a082 <USBH_LL_Disconnect>
}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	70fb      	strb	r3, [r7, #3]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff fbaa 	bl	800a01c <USBH_LL_PortEnabled>
}
 800a8c8:	bf00      	nop
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7ff fbaa 	bl	800a038 <USBH_LL_PortDisabled>
}
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d12a      	bne.n	800a954 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a8fe:	4a18      	ldr	r2, [pc, #96]	; (800a960 <USBH_LL_Init+0x74>)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a15      	ldr	r2, [pc, #84]	; (800a960 <USBH_LL_Init+0x74>)
 800a90a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a90e:	4b14      	ldr	r3, [pc, #80]	; (800a960 <USBH_LL_Init+0x74>)
 800a910:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a914:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a916:	4b12      	ldr	r3, [pc, #72]	; (800a960 <USBH_LL_Init+0x74>)
 800a918:	2208      	movs	r2, #8
 800a91a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a91c:	4b10      	ldr	r3, [pc, #64]	; (800a960 <USBH_LL_Init+0x74>)
 800a91e:	2201      	movs	r2, #1
 800a920:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a922:	4b0f      	ldr	r3, [pc, #60]	; (800a960 <USBH_LL_Init+0x74>)
 800a924:	2200      	movs	r2, #0
 800a926:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a928:	4b0d      	ldr	r3, [pc, #52]	; (800a960 <USBH_LL_Init+0x74>)
 800a92a:	2202      	movs	r2, #2
 800a92c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a92e:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <USBH_LL_Init+0x74>)
 800a930:	2200      	movs	r2, #0
 800a932:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a934:	480a      	ldr	r0, [pc, #40]	; (800a960 <USBH_LL_Init+0x74>)
 800a936:	f7f8 fac8 	bl	8002eca <HAL_HCD_Init>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d001      	beq.n	800a944 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a940:	f7f7 f826 	bl	8001990 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a944:	4806      	ldr	r0, [pc, #24]	; (800a960 <USBH_LL_Init+0x74>)
 800a946:	f7f8 ff1b 	bl	8003780 <HAL_HCD_GetCurrentFrame>
 800a94a:	4603      	mov	r3, r0
 800a94c:	4619      	mov	r1, r3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff fb2b 	bl	8009faa <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	200007d8 	.word	0x200007d8

0800a964 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f8 fe96 	bl	80036ac <HAL_HCD_Start>
 800a980:	4603      	mov	r3, r0
 800a982:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	4618      	mov	r0, r3
 800a988:	f000 f912 	bl	800abb0 <USBH_Get_USB_Status>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a990:	7bbb      	ldrb	r3, [r7, #14]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b084      	sub	sp, #16
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7f8 fe9e 	bl	80036f2 <HAL_HCD_Stop>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f8f7 	bl	800abb0 <USBH_Get_USB_Status>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9e2:	78fa      	ldrb	r2, [r7, #3]
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7f8 feb5 	bl	8003756 <HAL_HCD_HC_GetXferCount>
 800a9ec:	4603      	mov	r3, r0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a9f6:	b590      	push	{r4, r7, lr}
 800a9f8:	b089      	sub	sp, #36	; 0x24
 800a9fa:	af04      	add	r7, sp, #16
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	4608      	mov	r0, r1
 800aa00:	4611      	mov	r1, r2
 800aa02:	461a      	mov	r2, r3
 800aa04:	4603      	mov	r3, r0
 800aa06:	70fb      	strb	r3, [r7, #3]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70bb      	strb	r3, [r7, #2]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa1e:	787c      	ldrb	r4, [r7, #1]
 800aa20:	78ba      	ldrb	r2, [r7, #2]
 800aa22:	78f9      	ldrb	r1, [r7, #3]
 800aa24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa26:	9302      	str	r3, [sp, #8]
 800aa28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	4623      	mov	r3, r4
 800aa36:	f7f8 faaf 	bl	8002f98 <HAL_HCD_HC_Init>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 f8b5 	bl	800abb0 <USBH_Get_USB_Status>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd90      	pop	{r4, r7, pc}

0800aa54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa6e:	78fa      	ldrb	r2, [r7, #3]
 800aa70:	4611      	mov	r1, r2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7f8 fb48 	bl	8003108 <HAL_HCD_HC_Halt>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 f896 	bl	800abb0 <USBH_Get_USB_Status>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa88:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aa92:	b590      	push	{r4, r7, lr}
 800aa94:	b089      	sub	sp, #36	; 0x24
 800aa96:	af04      	add	r7, sp, #16
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	70fb      	strb	r3, [r7, #3]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	70bb      	strb	r3, [r7, #2]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aaba:	787c      	ldrb	r4, [r7, #1]
 800aabc:	78ba      	ldrb	r2, [r7, #2]
 800aabe:	78f9      	ldrb	r1, [r7, #3]
 800aac0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aac4:	9303      	str	r3, [sp, #12]
 800aac6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aac8:	9302      	str	r3, [sp, #8]
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	9301      	str	r3, [sp, #4]
 800aace:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	4623      	mov	r3, r4
 800aad6:	f7f8 fb3b 	bl	8003150 <HAL_HCD_HC_SubmitRequest>
 800aada:	4603      	mov	r3, r0
 800aadc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aade:	7bfb      	ldrb	r3, [r7, #15]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 f865 	bl	800abb0 <USBH_Get_USB_Status>
 800aae6:	4603      	mov	r3, r0
 800aae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd90      	pop	{r4, r7, pc}

0800aaf4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab06:	78fa      	ldrb	r2, [r7, #3]
 800ab08:	4611      	mov	r1, r2
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7f8 fe0e 	bl	800372c <HAL_HCD_HC_GetURBState>
 800ab10:	4603      	mov	r3, r0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	460b      	mov	r3, r1
 800ab24:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d103      	bne.n	800ab38 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 f868 	bl	800ac08 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ab38:	20c8      	movs	r0, #200	; 0xc8
 800ab3a:	f7f7 fad9 	bl	80020f0 <HAL_Delay>
  return USBH_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	70fb      	strb	r3, [r7, #3]
 800ab54:	4613      	mov	r3, r2
 800ab56:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ab60:	78fa      	ldrb	r2, [r7, #3]
 800ab62:	68f9      	ldr	r1, [r7, #12]
 800ab64:	4613      	mov	r3, r2
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	1a9b      	subs	r3, r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	440b      	add	r3, r1
 800ab6e:	3317      	adds	r3, #23
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00a      	beq.n	800ab8c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ab76:	78fa      	ldrb	r2, [r7, #3]
 800ab78:	68f9      	ldr	r1, [r7, #12]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	011b      	lsls	r3, r3, #4
 800ab7e:	1a9b      	subs	r3, r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	440b      	add	r3, r1
 800ab84:	333c      	adds	r3, #60	; 0x3c
 800ab86:	78ba      	ldrb	r2, [r7, #2]
 800ab88:	701a      	strb	r2, [r3, #0]
 800ab8a:	e009      	b.n	800aba0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ab8c:	78fa      	ldrb	r2, [r7, #3]
 800ab8e:	68f9      	ldr	r1, [r7, #12]
 800ab90:	4613      	mov	r3, r2
 800ab92:	011b      	lsls	r3, r3, #4
 800ab94:	1a9b      	subs	r3, r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	440b      	add	r3, r1
 800ab9a:	333d      	adds	r3, #61	; 0x3d
 800ab9c:	78ba      	ldrb	r2, [r7, #2]
 800ab9e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
	...

0800abb0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	4603      	mov	r3, r0
 800abb8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abbe:	79fb      	ldrb	r3, [r7, #7]
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d817      	bhi.n	800abf4 <USBH_Get_USB_Status+0x44>
 800abc4:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <USBH_Get_USB_Status+0x1c>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800abdd 	.word	0x0800abdd
 800abd0:	0800abe3 	.word	0x0800abe3
 800abd4:	0800abe9 	.word	0x0800abe9
 800abd8:	0800abef 	.word	0x0800abef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	73fb      	strb	r3, [r7, #15]
    break;
 800abe0:	e00b      	b.n	800abfa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800abe2:	2302      	movs	r3, #2
 800abe4:	73fb      	strb	r3, [r7, #15]
    break;
 800abe6:	e008      	b.n	800abfa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800abe8:	2301      	movs	r3, #1
 800abea:	73fb      	strb	r3, [r7, #15]
    break;
 800abec:	e005      	b.n	800abfa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800abee:	2302      	movs	r3, #2
 800abf0:	73fb      	strb	r3, [r7, #15]
    break;
 800abf2:	e002      	b.n	800abfa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800abf4:	2302      	movs	r3, #2
 800abf6:	73fb      	strb	r3, [r7, #15]
    break;
 800abf8:	bf00      	nop
  }
  return usb_status;
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ac12:	79fb      	ldrb	r3, [r7, #7]
 800ac14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ac16:	79fb      	ldrb	r3, [r7, #7]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73fb      	strb	r3, [r7, #15]
 800ac20:	e001      	b.n	800ac26 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ac22:	2301      	movs	r3, #1
 800ac24:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ac26:	7bfb      	ldrb	r3, [r7, #15]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	4803      	ldr	r0, [pc, #12]	; (800ac3c <MX_DriverVbusFS+0x34>)
 800ac2e:	f7f8 f933 	bl	8002e98 <HAL_GPIO_WritePin>
}
 800ac32:	bf00      	nop
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	40020800 	.word	0x40020800

0800ac40 <malloc>:
 800ac40:	4b02      	ldr	r3, [pc, #8]	; (800ac4c <malloc+0xc>)
 800ac42:	4601      	mov	r1, r0
 800ac44:	6818      	ldr	r0, [r3, #0]
 800ac46:	f000 b82b 	b.w	800aca0 <_malloc_r>
 800ac4a:	bf00      	nop
 800ac4c:	20000084 	.word	0x20000084

0800ac50 <free>:
 800ac50:	4b02      	ldr	r3, [pc, #8]	; (800ac5c <free+0xc>)
 800ac52:	4601      	mov	r1, r0
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	f001 bd79 	b.w	800c74c <_free_r>
 800ac5a:	bf00      	nop
 800ac5c:	20000084 	.word	0x20000084

0800ac60 <sbrk_aligned>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	4e0e      	ldr	r6, [pc, #56]	; (800ac9c <sbrk_aligned+0x3c>)
 800ac64:	460c      	mov	r4, r1
 800ac66:	6831      	ldr	r1, [r6, #0]
 800ac68:	4605      	mov	r5, r0
 800ac6a:	b911      	cbnz	r1, 800ac72 <sbrk_aligned+0x12>
 800ac6c:	f000 fea4 	bl	800b9b8 <_sbrk_r>
 800ac70:	6030      	str	r0, [r6, #0]
 800ac72:	4621      	mov	r1, r4
 800ac74:	4628      	mov	r0, r5
 800ac76:	f000 fe9f 	bl	800b9b8 <_sbrk_r>
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	d00a      	beq.n	800ac94 <sbrk_aligned+0x34>
 800ac7e:	1cc4      	adds	r4, r0, #3
 800ac80:	f024 0403 	bic.w	r4, r4, #3
 800ac84:	42a0      	cmp	r0, r4
 800ac86:	d007      	beq.n	800ac98 <sbrk_aligned+0x38>
 800ac88:	1a21      	subs	r1, r4, r0
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f000 fe94 	bl	800b9b8 <_sbrk_r>
 800ac90:	3001      	adds	r0, #1
 800ac92:	d101      	bne.n	800ac98 <sbrk_aligned+0x38>
 800ac94:	f04f 34ff 	mov.w	r4, #4294967295
 800ac98:	4620      	mov	r0, r4
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	20000bbc 	.word	0x20000bbc

0800aca0 <_malloc_r>:
 800aca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca4:	1ccd      	adds	r5, r1, #3
 800aca6:	f025 0503 	bic.w	r5, r5, #3
 800acaa:	3508      	adds	r5, #8
 800acac:	2d0c      	cmp	r5, #12
 800acae:	bf38      	it	cc
 800acb0:	250c      	movcc	r5, #12
 800acb2:	2d00      	cmp	r5, #0
 800acb4:	4607      	mov	r7, r0
 800acb6:	db01      	blt.n	800acbc <_malloc_r+0x1c>
 800acb8:	42a9      	cmp	r1, r5
 800acba:	d905      	bls.n	800acc8 <_malloc_r+0x28>
 800acbc:	230c      	movs	r3, #12
 800acbe:	603b      	str	r3, [r7, #0]
 800acc0:	2600      	movs	r6, #0
 800acc2:	4630      	mov	r0, r6
 800acc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad9c <_malloc_r+0xfc>
 800accc:	f000 f868 	bl	800ada0 <__malloc_lock>
 800acd0:	f8d8 3000 	ldr.w	r3, [r8]
 800acd4:	461c      	mov	r4, r3
 800acd6:	bb5c      	cbnz	r4, 800ad30 <_malloc_r+0x90>
 800acd8:	4629      	mov	r1, r5
 800acda:	4638      	mov	r0, r7
 800acdc:	f7ff ffc0 	bl	800ac60 <sbrk_aligned>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	4604      	mov	r4, r0
 800ace4:	d155      	bne.n	800ad92 <_malloc_r+0xf2>
 800ace6:	f8d8 4000 	ldr.w	r4, [r8]
 800acea:	4626      	mov	r6, r4
 800acec:	2e00      	cmp	r6, #0
 800acee:	d145      	bne.n	800ad7c <_malloc_r+0xdc>
 800acf0:	2c00      	cmp	r4, #0
 800acf2:	d048      	beq.n	800ad86 <_malloc_r+0xe6>
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	4631      	mov	r1, r6
 800acf8:	4638      	mov	r0, r7
 800acfa:	eb04 0903 	add.w	r9, r4, r3
 800acfe:	f000 fe5b 	bl	800b9b8 <_sbrk_r>
 800ad02:	4581      	cmp	r9, r0
 800ad04:	d13f      	bne.n	800ad86 <_malloc_r+0xe6>
 800ad06:	6821      	ldr	r1, [r4, #0]
 800ad08:	1a6d      	subs	r5, r5, r1
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	f7ff ffa7 	bl	800ac60 <sbrk_aligned>
 800ad12:	3001      	adds	r0, #1
 800ad14:	d037      	beq.n	800ad86 <_malloc_r+0xe6>
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	442b      	add	r3, r5
 800ad1a:	6023      	str	r3, [r4, #0]
 800ad1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d038      	beq.n	800ad96 <_malloc_r+0xf6>
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	42a2      	cmp	r2, r4
 800ad28:	d12b      	bne.n	800ad82 <_malloc_r+0xe2>
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	605a      	str	r2, [r3, #4]
 800ad2e:	e00f      	b.n	800ad50 <_malloc_r+0xb0>
 800ad30:	6822      	ldr	r2, [r4, #0]
 800ad32:	1b52      	subs	r2, r2, r5
 800ad34:	d41f      	bmi.n	800ad76 <_malloc_r+0xd6>
 800ad36:	2a0b      	cmp	r2, #11
 800ad38:	d917      	bls.n	800ad6a <_malloc_r+0xca>
 800ad3a:	1961      	adds	r1, r4, r5
 800ad3c:	42a3      	cmp	r3, r4
 800ad3e:	6025      	str	r5, [r4, #0]
 800ad40:	bf18      	it	ne
 800ad42:	6059      	strne	r1, [r3, #4]
 800ad44:	6863      	ldr	r3, [r4, #4]
 800ad46:	bf08      	it	eq
 800ad48:	f8c8 1000 	streq.w	r1, [r8]
 800ad4c:	5162      	str	r2, [r4, r5]
 800ad4e:	604b      	str	r3, [r1, #4]
 800ad50:	4638      	mov	r0, r7
 800ad52:	f104 060b 	add.w	r6, r4, #11
 800ad56:	f000 f829 	bl	800adac <__malloc_unlock>
 800ad5a:	f026 0607 	bic.w	r6, r6, #7
 800ad5e:	1d23      	adds	r3, r4, #4
 800ad60:	1af2      	subs	r2, r6, r3
 800ad62:	d0ae      	beq.n	800acc2 <_malloc_r+0x22>
 800ad64:	1b9b      	subs	r3, r3, r6
 800ad66:	50a3      	str	r3, [r4, r2]
 800ad68:	e7ab      	b.n	800acc2 <_malloc_r+0x22>
 800ad6a:	42a3      	cmp	r3, r4
 800ad6c:	6862      	ldr	r2, [r4, #4]
 800ad6e:	d1dd      	bne.n	800ad2c <_malloc_r+0x8c>
 800ad70:	f8c8 2000 	str.w	r2, [r8]
 800ad74:	e7ec      	b.n	800ad50 <_malloc_r+0xb0>
 800ad76:	4623      	mov	r3, r4
 800ad78:	6864      	ldr	r4, [r4, #4]
 800ad7a:	e7ac      	b.n	800acd6 <_malloc_r+0x36>
 800ad7c:	4634      	mov	r4, r6
 800ad7e:	6876      	ldr	r6, [r6, #4]
 800ad80:	e7b4      	b.n	800acec <_malloc_r+0x4c>
 800ad82:	4613      	mov	r3, r2
 800ad84:	e7cc      	b.n	800ad20 <_malloc_r+0x80>
 800ad86:	230c      	movs	r3, #12
 800ad88:	603b      	str	r3, [r7, #0]
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	f000 f80e 	bl	800adac <__malloc_unlock>
 800ad90:	e797      	b.n	800acc2 <_malloc_r+0x22>
 800ad92:	6025      	str	r5, [r4, #0]
 800ad94:	e7dc      	b.n	800ad50 <_malloc_r+0xb0>
 800ad96:	605b      	str	r3, [r3, #4]
 800ad98:	deff      	udf	#255	; 0xff
 800ad9a:	bf00      	nop
 800ad9c:	20000bb8 	.word	0x20000bb8

0800ada0 <__malloc_lock>:
 800ada0:	4801      	ldr	r0, [pc, #4]	; (800ada8 <__malloc_lock+0x8>)
 800ada2:	f000 be56 	b.w	800ba52 <__retarget_lock_acquire_recursive>
 800ada6:	bf00      	nop
 800ada8:	20000d00 	.word	0x20000d00

0800adac <__malloc_unlock>:
 800adac:	4801      	ldr	r0, [pc, #4]	; (800adb4 <__malloc_unlock+0x8>)
 800adae:	f000 be51 	b.w	800ba54 <__retarget_lock_release_recursive>
 800adb2:	bf00      	nop
 800adb4:	20000d00 	.word	0x20000d00

0800adb8 <__cvt>:
 800adb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adbc:	ec55 4b10 	vmov	r4, r5, d0
 800adc0:	2d00      	cmp	r5, #0
 800adc2:	460e      	mov	r6, r1
 800adc4:	4619      	mov	r1, r3
 800adc6:	462b      	mov	r3, r5
 800adc8:	bfbb      	ittet	lt
 800adca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800adce:	461d      	movlt	r5, r3
 800add0:	2300      	movge	r3, #0
 800add2:	232d      	movlt	r3, #45	; 0x2d
 800add4:	700b      	strb	r3, [r1, #0]
 800add6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800add8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800addc:	4691      	mov	r9, r2
 800adde:	f023 0820 	bic.w	r8, r3, #32
 800ade2:	bfbc      	itt	lt
 800ade4:	4622      	movlt	r2, r4
 800ade6:	4614      	movlt	r4, r2
 800ade8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800adec:	d005      	beq.n	800adfa <__cvt+0x42>
 800adee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800adf2:	d100      	bne.n	800adf6 <__cvt+0x3e>
 800adf4:	3601      	adds	r6, #1
 800adf6:	2102      	movs	r1, #2
 800adf8:	e000      	b.n	800adfc <__cvt+0x44>
 800adfa:	2103      	movs	r1, #3
 800adfc:	ab03      	add	r3, sp, #12
 800adfe:	9301      	str	r3, [sp, #4]
 800ae00:	ab02      	add	r3, sp, #8
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	ec45 4b10 	vmov	d0, r4, r5
 800ae08:	4653      	mov	r3, sl
 800ae0a:	4632      	mov	r2, r6
 800ae0c:	f000 feac 	bl	800bb68 <_dtoa_r>
 800ae10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae14:	4607      	mov	r7, r0
 800ae16:	d102      	bne.n	800ae1e <__cvt+0x66>
 800ae18:	f019 0f01 	tst.w	r9, #1
 800ae1c:	d022      	beq.n	800ae64 <__cvt+0xac>
 800ae1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae22:	eb07 0906 	add.w	r9, r7, r6
 800ae26:	d110      	bne.n	800ae4a <__cvt+0x92>
 800ae28:	783b      	ldrb	r3, [r7, #0]
 800ae2a:	2b30      	cmp	r3, #48	; 0x30
 800ae2c:	d10a      	bne.n	800ae44 <__cvt+0x8c>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7f5 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae3a:	b918      	cbnz	r0, 800ae44 <__cvt+0x8c>
 800ae3c:	f1c6 0601 	rsb	r6, r6, #1
 800ae40:	f8ca 6000 	str.w	r6, [sl]
 800ae44:	f8da 3000 	ldr.w	r3, [sl]
 800ae48:	4499      	add	r9, r3
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4620      	mov	r0, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7f5 fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae56:	b108      	cbz	r0, 800ae5c <__cvt+0xa4>
 800ae58:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae5c:	2230      	movs	r2, #48	; 0x30
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	454b      	cmp	r3, r9
 800ae62:	d307      	bcc.n	800ae74 <__cvt+0xbc>
 800ae64:	9b03      	ldr	r3, [sp, #12]
 800ae66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae68:	1bdb      	subs	r3, r3, r7
 800ae6a:	4638      	mov	r0, r7
 800ae6c:	6013      	str	r3, [r2, #0]
 800ae6e:	b004      	add	sp, #16
 800ae70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae74:	1c59      	adds	r1, r3, #1
 800ae76:	9103      	str	r1, [sp, #12]
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	e7f0      	b.n	800ae5e <__cvt+0xa6>

0800ae7c <__exponent>:
 800ae7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2900      	cmp	r1, #0
 800ae82:	bfb8      	it	lt
 800ae84:	4249      	neglt	r1, r1
 800ae86:	f803 2b02 	strb.w	r2, [r3], #2
 800ae8a:	bfb4      	ite	lt
 800ae8c:	222d      	movlt	r2, #45	; 0x2d
 800ae8e:	222b      	movge	r2, #43	; 0x2b
 800ae90:	2909      	cmp	r1, #9
 800ae92:	7042      	strb	r2, [r0, #1]
 800ae94:	dd2a      	ble.n	800aeec <__exponent+0x70>
 800ae96:	f10d 0207 	add.w	r2, sp, #7
 800ae9a:	4617      	mov	r7, r2
 800ae9c:	260a      	movs	r6, #10
 800ae9e:	4694      	mov	ip, r2
 800aea0:	fb91 f5f6 	sdiv	r5, r1, r6
 800aea4:	fb06 1415 	mls	r4, r6, r5, r1
 800aea8:	3430      	adds	r4, #48	; 0x30
 800aeaa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800aeae:	460c      	mov	r4, r1
 800aeb0:	2c63      	cmp	r4, #99	; 0x63
 800aeb2:	f102 32ff 	add.w	r2, r2, #4294967295
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	dcf1      	bgt.n	800ae9e <__exponent+0x22>
 800aeba:	3130      	adds	r1, #48	; 0x30
 800aebc:	f1ac 0402 	sub.w	r4, ip, #2
 800aec0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aec4:	1c41      	adds	r1, r0, #1
 800aec6:	4622      	mov	r2, r4
 800aec8:	42ba      	cmp	r2, r7
 800aeca:	d30a      	bcc.n	800aee2 <__exponent+0x66>
 800aecc:	f10d 0209 	add.w	r2, sp, #9
 800aed0:	eba2 020c 	sub.w	r2, r2, ip
 800aed4:	42bc      	cmp	r4, r7
 800aed6:	bf88      	it	hi
 800aed8:	2200      	movhi	r2, #0
 800aeda:	4413      	add	r3, r2
 800aedc:	1a18      	subs	r0, r3, r0
 800aede:	b003      	add	sp, #12
 800aee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aee2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aee6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800aeea:	e7ed      	b.n	800aec8 <__exponent+0x4c>
 800aeec:	2330      	movs	r3, #48	; 0x30
 800aeee:	3130      	adds	r1, #48	; 0x30
 800aef0:	7083      	strb	r3, [r0, #2]
 800aef2:	70c1      	strb	r1, [r0, #3]
 800aef4:	1d03      	adds	r3, r0, #4
 800aef6:	e7f1      	b.n	800aedc <__exponent+0x60>

0800aef8 <_printf_float>:
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	ed2d 8b02 	vpush	{d8}
 800af00:	b08d      	sub	sp, #52	; 0x34
 800af02:	460c      	mov	r4, r1
 800af04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af08:	4616      	mov	r6, r2
 800af0a:	461f      	mov	r7, r3
 800af0c:	4605      	mov	r5, r0
 800af0e:	f000 fd1b 	bl	800b948 <_localeconv_r>
 800af12:	f8d0 a000 	ldr.w	sl, [r0]
 800af16:	4650      	mov	r0, sl
 800af18:	f7f5 f9aa 	bl	8000270 <strlen>
 800af1c:	2300      	movs	r3, #0
 800af1e:	930a      	str	r3, [sp, #40]	; 0x28
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	9305      	str	r3, [sp, #20]
 800af24:	f8d8 3000 	ldr.w	r3, [r8]
 800af28:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af2c:	3307      	adds	r3, #7
 800af2e:	f023 0307 	bic.w	r3, r3, #7
 800af32:	f103 0208 	add.w	r2, r3, #8
 800af36:	f8c8 2000 	str.w	r2, [r8]
 800af3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af42:	9307      	str	r3, [sp, #28]
 800af44:	f8cd 8018 	str.w	r8, [sp, #24]
 800af48:	ee08 0a10 	vmov	s16, r0
 800af4c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800af50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af54:	4b9e      	ldr	r3, [pc, #632]	; (800b1d0 <_printf_float+0x2d8>)
 800af56:	f04f 32ff 	mov.w	r2, #4294967295
 800af5a:	f7f5 fde7 	bl	8000b2c <__aeabi_dcmpun>
 800af5e:	bb88      	cbnz	r0, 800afc4 <_printf_float+0xcc>
 800af60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af64:	4b9a      	ldr	r3, [pc, #616]	; (800b1d0 <_printf_float+0x2d8>)
 800af66:	f04f 32ff 	mov.w	r2, #4294967295
 800af6a:	f7f5 fdc1 	bl	8000af0 <__aeabi_dcmple>
 800af6e:	bb48      	cbnz	r0, 800afc4 <_printf_float+0xcc>
 800af70:	2200      	movs	r2, #0
 800af72:	2300      	movs	r3, #0
 800af74:	4640      	mov	r0, r8
 800af76:	4649      	mov	r1, r9
 800af78:	f7f5 fdb0 	bl	8000adc <__aeabi_dcmplt>
 800af7c:	b110      	cbz	r0, 800af84 <_printf_float+0x8c>
 800af7e:	232d      	movs	r3, #45	; 0x2d
 800af80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af84:	4a93      	ldr	r2, [pc, #588]	; (800b1d4 <_printf_float+0x2dc>)
 800af86:	4b94      	ldr	r3, [pc, #592]	; (800b1d8 <_printf_float+0x2e0>)
 800af88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800af8c:	bf94      	ite	ls
 800af8e:	4690      	movls	r8, r2
 800af90:	4698      	movhi	r8, r3
 800af92:	2303      	movs	r3, #3
 800af94:	6123      	str	r3, [r4, #16]
 800af96:	9b05      	ldr	r3, [sp, #20]
 800af98:	f023 0304 	bic.w	r3, r3, #4
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	f04f 0900 	mov.w	r9, #0
 800afa2:	9700      	str	r7, [sp, #0]
 800afa4:	4633      	mov	r3, r6
 800afa6:	aa0b      	add	r2, sp, #44	; 0x2c
 800afa8:	4621      	mov	r1, r4
 800afaa:	4628      	mov	r0, r5
 800afac:	f000 f9da 	bl	800b364 <_printf_common>
 800afb0:	3001      	adds	r0, #1
 800afb2:	f040 8090 	bne.w	800b0d6 <_printf_float+0x1de>
 800afb6:	f04f 30ff 	mov.w	r0, #4294967295
 800afba:	b00d      	add	sp, #52	; 0x34
 800afbc:	ecbd 8b02 	vpop	{d8}
 800afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc4:	4642      	mov	r2, r8
 800afc6:	464b      	mov	r3, r9
 800afc8:	4640      	mov	r0, r8
 800afca:	4649      	mov	r1, r9
 800afcc:	f7f5 fdae 	bl	8000b2c <__aeabi_dcmpun>
 800afd0:	b140      	cbz	r0, 800afe4 <_printf_float+0xec>
 800afd2:	464b      	mov	r3, r9
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bfbc      	itt	lt
 800afd8:	232d      	movlt	r3, #45	; 0x2d
 800afda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800afde:	4a7f      	ldr	r2, [pc, #508]	; (800b1dc <_printf_float+0x2e4>)
 800afe0:	4b7f      	ldr	r3, [pc, #508]	; (800b1e0 <_printf_float+0x2e8>)
 800afe2:	e7d1      	b.n	800af88 <_printf_float+0x90>
 800afe4:	6863      	ldr	r3, [r4, #4]
 800afe6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800afea:	9206      	str	r2, [sp, #24]
 800afec:	1c5a      	adds	r2, r3, #1
 800afee:	d13f      	bne.n	800b070 <_printf_float+0x178>
 800aff0:	2306      	movs	r3, #6
 800aff2:	6063      	str	r3, [r4, #4]
 800aff4:	9b05      	ldr	r3, [sp, #20]
 800aff6:	6861      	ldr	r1, [r4, #4]
 800aff8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800affc:	2300      	movs	r3, #0
 800affe:	9303      	str	r3, [sp, #12]
 800b000:	ab0a      	add	r3, sp, #40	; 0x28
 800b002:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b006:	ab09      	add	r3, sp, #36	; 0x24
 800b008:	ec49 8b10 	vmov	d0, r8, r9
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	6022      	str	r2, [r4, #0]
 800b010:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b014:	4628      	mov	r0, r5
 800b016:	f7ff fecf 	bl	800adb8 <__cvt>
 800b01a:	9b06      	ldr	r3, [sp, #24]
 800b01c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b01e:	2b47      	cmp	r3, #71	; 0x47
 800b020:	4680      	mov	r8, r0
 800b022:	d108      	bne.n	800b036 <_printf_float+0x13e>
 800b024:	1cc8      	adds	r0, r1, #3
 800b026:	db02      	blt.n	800b02e <_printf_float+0x136>
 800b028:	6863      	ldr	r3, [r4, #4]
 800b02a:	4299      	cmp	r1, r3
 800b02c:	dd41      	ble.n	800b0b2 <_printf_float+0x1ba>
 800b02e:	f1ab 0302 	sub.w	r3, fp, #2
 800b032:	fa5f fb83 	uxtb.w	fp, r3
 800b036:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b03a:	d820      	bhi.n	800b07e <_printf_float+0x186>
 800b03c:	3901      	subs	r1, #1
 800b03e:	465a      	mov	r2, fp
 800b040:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b044:	9109      	str	r1, [sp, #36]	; 0x24
 800b046:	f7ff ff19 	bl	800ae7c <__exponent>
 800b04a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b04c:	1813      	adds	r3, r2, r0
 800b04e:	2a01      	cmp	r2, #1
 800b050:	4681      	mov	r9, r0
 800b052:	6123      	str	r3, [r4, #16]
 800b054:	dc02      	bgt.n	800b05c <_printf_float+0x164>
 800b056:	6822      	ldr	r2, [r4, #0]
 800b058:	07d2      	lsls	r2, r2, #31
 800b05a:	d501      	bpl.n	800b060 <_printf_float+0x168>
 800b05c:	3301      	adds	r3, #1
 800b05e:	6123      	str	r3, [r4, #16]
 800b060:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b064:	2b00      	cmp	r3, #0
 800b066:	d09c      	beq.n	800afa2 <_printf_float+0xaa>
 800b068:	232d      	movs	r3, #45	; 0x2d
 800b06a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b06e:	e798      	b.n	800afa2 <_printf_float+0xaa>
 800b070:	9a06      	ldr	r2, [sp, #24]
 800b072:	2a47      	cmp	r2, #71	; 0x47
 800b074:	d1be      	bne.n	800aff4 <_printf_float+0xfc>
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1bc      	bne.n	800aff4 <_printf_float+0xfc>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e7b9      	b.n	800aff2 <_printf_float+0xfa>
 800b07e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b082:	d118      	bne.n	800b0b6 <_printf_float+0x1be>
 800b084:	2900      	cmp	r1, #0
 800b086:	6863      	ldr	r3, [r4, #4]
 800b088:	dd0b      	ble.n	800b0a2 <_printf_float+0x1aa>
 800b08a:	6121      	str	r1, [r4, #16]
 800b08c:	b913      	cbnz	r3, 800b094 <_printf_float+0x19c>
 800b08e:	6822      	ldr	r2, [r4, #0]
 800b090:	07d0      	lsls	r0, r2, #31
 800b092:	d502      	bpl.n	800b09a <_printf_float+0x1a2>
 800b094:	3301      	adds	r3, #1
 800b096:	440b      	add	r3, r1
 800b098:	6123      	str	r3, [r4, #16]
 800b09a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b09c:	f04f 0900 	mov.w	r9, #0
 800b0a0:	e7de      	b.n	800b060 <_printf_float+0x168>
 800b0a2:	b913      	cbnz	r3, 800b0aa <_printf_float+0x1b2>
 800b0a4:	6822      	ldr	r2, [r4, #0]
 800b0a6:	07d2      	lsls	r2, r2, #31
 800b0a8:	d501      	bpl.n	800b0ae <_printf_float+0x1b6>
 800b0aa:	3302      	adds	r3, #2
 800b0ac:	e7f4      	b.n	800b098 <_printf_float+0x1a0>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e7f2      	b.n	800b098 <_printf_float+0x1a0>
 800b0b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0b8:	4299      	cmp	r1, r3
 800b0ba:	db05      	blt.n	800b0c8 <_printf_float+0x1d0>
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	6121      	str	r1, [r4, #16]
 800b0c0:	07d8      	lsls	r0, r3, #31
 800b0c2:	d5ea      	bpl.n	800b09a <_printf_float+0x1a2>
 800b0c4:	1c4b      	adds	r3, r1, #1
 800b0c6:	e7e7      	b.n	800b098 <_printf_float+0x1a0>
 800b0c8:	2900      	cmp	r1, #0
 800b0ca:	bfd4      	ite	le
 800b0cc:	f1c1 0202 	rsble	r2, r1, #2
 800b0d0:	2201      	movgt	r2, #1
 800b0d2:	4413      	add	r3, r2
 800b0d4:	e7e0      	b.n	800b098 <_printf_float+0x1a0>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	055a      	lsls	r2, r3, #21
 800b0da:	d407      	bmi.n	800b0ec <_printf_float+0x1f4>
 800b0dc:	6923      	ldr	r3, [r4, #16]
 800b0de:	4642      	mov	r2, r8
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	47b8      	blx	r7
 800b0e6:	3001      	adds	r0, #1
 800b0e8:	d12c      	bne.n	800b144 <_printf_float+0x24c>
 800b0ea:	e764      	b.n	800afb6 <_printf_float+0xbe>
 800b0ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0f0:	f240 80e0 	bls.w	800b2b4 <_printf_float+0x3bc>
 800b0f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f7f5 fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b100:	2800      	cmp	r0, #0
 800b102:	d034      	beq.n	800b16e <_printf_float+0x276>
 800b104:	4a37      	ldr	r2, [pc, #220]	; (800b1e4 <_printf_float+0x2ec>)
 800b106:	2301      	movs	r3, #1
 800b108:	4631      	mov	r1, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b8      	blx	r7
 800b10e:	3001      	adds	r0, #1
 800b110:	f43f af51 	beq.w	800afb6 <_printf_float+0xbe>
 800b114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b118:	429a      	cmp	r2, r3
 800b11a:	db02      	blt.n	800b122 <_printf_float+0x22a>
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	07d8      	lsls	r0, r3, #31
 800b120:	d510      	bpl.n	800b144 <_printf_float+0x24c>
 800b122:	ee18 3a10 	vmov	r3, s16
 800b126:	4652      	mov	r2, sl
 800b128:	4631      	mov	r1, r6
 800b12a:	4628      	mov	r0, r5
 800b12c:	47b8      	blx	r7
 800b12e:	3001      	adds	r0, #1
 800b130:	f43f af41 	beq.w	800afb6 <_printf_float+0xbe>
 800b134:	f04f 0800 	mov.w	r8, #0
 800b138:	f104 091a 	add.w	r9, r4, #26
 800b13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b13e:	3b01      	subs	r3, #1
 800b140:	4543      	cmp	r3, r8
 800b142:	dc09      	bgt.n	800b158 <_printf_float+0x260>
 800b144:	6823      	ldr	r3, [r4, #0]
 800b146:	079b      	lsls	r3, r3, #30
 800b148:	f100 8107 	bmi.w	800b35a <_printf_float+0x462>
 800b14c:	68e0      	ldr	r0, [r4, #12]
 800b14e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b150:	4298      	cmp	r0, r3
 800b152:	bfb8      	it	lt
 800b154:	4618      	movlt	r0, r3
 800b156:	e730      	b.n	800afba <_printf_float+0xc2>
 800b158:	2301      	movs	r3, #1
 800b15a:	464a      	mov	r2, r9
 800b15c:	4631      	mov	r1, r6
 800b15e:	4628      	mov	r0, r5
 800b160:	47b8      	blx	r7
 800b162:	3001      	adds	r0, #1
 800b164:	f43f af27 	beq.w	800afb6 <_printf_float+0xbe>
 800b168:	f108 0801 	add.w	r8, r8, #1
 800b16c:	e7e6      	b.n	800b13c <_printf_float+0x244>
 800b16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b170:	2b00      	cmp	r3, #0
 800b172:	dc39      	bgt.n	800b1e8 <_printf_float+0x2f0>
 800b174:	4a1b      	ldr	r2, [pc, #108]	; (800b1e4 <_printf_float+0x2ec>)
 800b176:	2301      	movs	r3, #1
 800b178:	4631      	mov	r1, r6
 800b17a:	4628      	mov	r0, r5
 800b17c:	47b8      	blx	r7
 800b17e:	3001      	adds	r0, #1
 800b180:	f43f af19 	beq.w	800afb6 <_printf_float+0xbe>
 800b184:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b188:	4313      	orrs	r3, r2
 800b18a:	d102      	bne.n	800b192 <_printf_float+0x29a>
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	07d9      	lsls	r1, r3, #31
 800b190:	d5d8      	bpl.n	800b144 <_printf_float+0x24c>
 800b192:	ee18 3a10 	vmov	r3, s16
 800b196:	4652      	mov	r2, sl
 800b198:	4631      	mov	r1, r6
 800b19a:	4628      	mov	r0, r5
 800b19c:	47b8      	blx	r7
 800b19e:	3001      	adds	r0, #1
 800b1a0:	f43f af09 	beq.w	800afb6 <_printf_float+0xbe>
 800b1a4:	f04f 0900 	mov.w	r9, #0
 800b1a8:	f104 0a1a 	add.w	sl, r4, #26
 800b1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ae:	425b      	negs	r3, r3
 800b1b0:	454b      	cmp	r3, r9
 800b1b2:	dc01      	bgt.n	800b1b8 <_printf_float+0x2c0>
 800b1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b6:	e792      	b.n	800b0de <_printf_float+0x1e6>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	4652      	mov	r2, sl
 800b1bc:	4631      	mov	r1, r6
 800b1be:	4628      	mov	r0, r5
 800b1c0:	47b8      	blx	r7
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	f43f aef7 	beq.w	800afb6 <_printf_float+0xbe>
 800b1c8:	f109 0901 	add.w	r9, r9, #1
 800b1cc:	e7ee      	b.n	800b1ac <_printf_float+0x2b4>
 800b1ce:	bf00      	nop
 800b1d0:	7fefffff 	.word	0x7fefffff
 800b1d4:	0800dadc 	.word	0x0800dadc
 800b1d8:	0800dae0 	.word	0x0800dae0
 800b1dc:	0800dae4 	.word	0x0800dae4
 800b1e0:	0800dae8 	.word	0x0800dae8
 800b1e4:	0800daec 	.word	0x0800daec
 800b1e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	bfa8      	it	ge
 800b1f0:	461a      	movge	r2, r3
 800b1f2:	2a00      	cmp	r2, #0
 800b1f4:	4691      	mov	r9, r2
 800b1f6:	dc37      	bgt.n	800b268 <_printf_float+0x370>
 800b1f8:	f04f 0b00 	mov.w	fp, #0
 800b1fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b200:	f104 021a 	add.w	r2, r4, #26
 800b204:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b206:	9305      	str	r3, [sp, #20]
 800b208:	eba3 0309 	sub.w	r3, r3, r9
 800b20c:	455b      	cmp	r3, fp
 800b20e:	dc33      	bgt.n	800b278 <_printf_float+0x380>
 800b210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b214:	429a      	cmp	r2, r3
 800b216:	db3b      	blt.n	800b290 <_printf_float+0x398>
 800b218:	6823      	ldr	r3, [r4, #0]
 800b21a:	07da      	lsls	r2, r3, #31
 800b21c:	d438      	bmi.n	800b290 <_printf_float+0x398>
 800b21e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b222:	eba2 0903 	sub.w	r9, r2, r3
 800b226:	9b05      	ldr	r3, [sp, #20]
 800b228:	1ad2      	subs	r2, r2, r3
 800b22a:	4591      	cmp	r9, r2
 800b22c:	bfa8      	it	ge
 800b22e:	4691      	movge	r9, r2
 800b230:	f1b9 0f00 	cmp.w	r9, #0
 800b234:	dc35      	bgt.n	800b2a2 <_printf_float+0x3aa>
 800b236:	f04f 0800 	mov.w	r8, #0
 800b23a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b23e:	f104 0a1a 	add.w	sl, r4, #26
 800b242:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b246:	1a9b      	subs	r3, r3, r2
 800b248:	eba3 0309 	sub.w	r3, r3, r9
 800b24c:	4543      	cmp	r3, r8
 800b24e:	f77f af79 	ble.w	800b144 <_printf_float+0x24c>
 800b252:	2301      	movs	r3, #1
 800b254:	4652      	mov	r2, sl
 800b256:	4631      	mov	r1, r6
 800b258:	4628      	mov	r0, r5
 800b25a:	47b8      	blx	r7
 800b25c:	3001      	adds	r0, #1
 800b25e:	f43f aeaa 	beq.w	800afb6 <_printf_float+0xbe>
 800b262:	f108 0801 	add.w	r8, r8, #1
 800b266:	e7ec      	b.n	800b242 <_printf_float+0x34a>
 800b268:	4613      	mov	r3, r2
 800b26a:	4631      	mov	r1, r6
 800b26c:	4642      	mov	r2, r8
 800b26e:	4628      	mov	r0, r5
 800b270:	47b8      	blx	r7
 800b272:	3001      	adds	r0, #1
 800b274:	d1c0      	bne.n	800b1f8 <_printf_float+0x300>
 800b276:	e69e      	b.n	800afb6 <_printf_float+0xbe>
 800b278:	2301      	movs	r3, #1
 800b27a:	4631      	mov	r1, r6
 800b27c:	4628      	mov	r0, r5
 800b27e:	9205      	str	r2, [sp, #20]
 800b280:	47b8      	blx	r7
 800b282:	3001      	adds	r0, #1
 800b284:	f43f ae97 	beq.w	800afb6 <_printf_float+0xbe>
 800b288:	9a05      	ldr	r2, [sp, #20]
 800b28a:	f10b 0b01 	add.w	fp, fp, #1
 800b28e:	e7b9      	b.n	800b204 <_printf_float+0x30c>
 800b290:	ee18 3a10 	vmov	r3, s16
 800b294:	4652      	mov	r2, sl
 800b296:	4631      	mov	r1, r6
 800b298:	4628      	mov	r0, r5
 800b29a:	47b8      	blx	r7
 800b29c:	3001      	adds	r0, #1
 800b29e:	d1be      	bne.n	800b21e <_printf_float+0x326>
 800b2a0:	e689      	b.n	800afb6 <_printf_float+0xbe>
 800b2a2:	9a05      	ldr	r2, [sp, #20]
 800b2a4:	464b      	mov	r3, r9
 800b2a6:	4442      	add	r2, r8
 800b2a8:	4631      	mov	r1, r6
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	47b8      	blx	r7
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	d1c1      	bne.n	800b236 <_printf_float+0x33e>
 800b2b2:	e680      	b.n	800afb6 <_printf_float+0xbe>
 800b2b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2b6:	2a01      	cmp	r2, #1
 800b2b8:	dc01      	bgt.n	800b2be <_printf_float+0x3c6>
 800b2ba:	07db      	lsls	r3, r3, #31
 800b2bc:	d53a      	bpl.n	800b334 <_printf_float+0x43c>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	4642      	mov	r2, r8
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b8      	blx	r7
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	f43f ae74 	beq.w	800afb6 <_printf_float+0xbe>
 800b2ce:	ee18 3a10 	vmov	r3, s16
 800b2d2:	4652      	mov	r2, sl
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	f43f ae6b 	beq.w	800afb6 <_printf_float+0xbe>
 800b2e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b2ec:	f7f5 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2f0:	b9d8      	cbnz	r0, 800b32a <_printf_float+0x432>
 800b2f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b2f6:	f108 0201 	add.w	r2, r8, #1
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	47b8      	blx	r7
 800b300:	3001      	adds	r0, #1
 800b302:	d10e      	bne.n	800b322 <_printf_float+0x42a>
 800b304:	e657      	b.n	800afb6 <_printf_float+0xbe>
 800b306:	2301      	movs	r3, #1
 800b308:	4652      	mov	r2, sl
 800b30a:	4631      	mov	r1, r6
 800b30c:	4628      	mov	r0, r5
 800b30e:	47b8      	blx	r7
 800b310:	3001      	adds	r0, #1
 800b312:	f43f ae50 	beq.w	800afb6 <_printf_float+0xbe>
 800b316:	f108 0801 	add.w	r8, r8, #1
 800b31a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b31c:	3b01      	subs	r3, #1
 800b31e:	4543      	cmp	r3, r8
 800b320:	dcf1      	bgt.n	800b306 <_printf_float+0x40e>
 800b322:	464b      	mov	r3, r9
 800b324:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b328:	e6da      	b.n	800b0e0 <_printf_float+0x1e8>
 800b32a:	f04f 0800 	mov.w	r8, #0
 800b32e:	f104 0a1a 	add.w	sl, r4, #26
 800b332:	e7f2      	b.n	800b31a <_printf_float+0x422>
 800b334:	2301      	movs	r3, #1
 800b336:	4642      	mov	r2, r8
 800b338:	e7df      	b.n	800b2fa <_printf_float+0x402>
 800b33a:	2301      	movs	r3, #1
 800b33c:	464a      	mov	r2, r9
 800b33e:	4631      	mov	r1, r6
 800b340:	4628      	mov	r0, r5
 800b342:	47b8      	blx	r7
 800b344:	3001      	adds	r0, #1
 800b346:	f43f ae36 	beq.w	800afb6 <_printf_float+0xbe>
 800b34a:	f108 0801 	add.w	r8, r8, #1
 800b34e:	68e3      	ldr	r3, [r4, #12]
 800b350:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b352:	1a5b      	subs	r3, r3, r1
 800b354:	4543      	cmp	r3, r8
 800b356:	dcf0      	bgt.n	800b33a <_printf_float+0x442>
 800b358:	e6f8      	b.n	800b14c <_printf_float+0x254>
 800b35a:	f04f 0800 	mov.w	r8, #0
 800b35e:	f104 0919 	add.w	r9, r4, #25
 800b362:	e7f4      	b.n	800b34e <_printf_float+0x456>

0800b364 <_printf_common>:
 800b364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b368:	4616      	mov	r6, r2
 800b36a:	4699      	mov	r9, r3
 800b36c:	688a      	ldr	r2, [r1, #8]
 800b36e:	690b      	ldr	r3, [r1, #16]
 800b370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b374:	4293      	cmp	r3, r2
 800b376:	bfb8      	it	lt
 800b378:	4613      	movlt	r3, r2
 800b37a:	6033      	str	r3, [r6, #0]
 800b37c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b380:	4607      	mov	r7, r0
 800b382:	460c      	mov	r4, r1
 800b384:	b10a      	cbz	r2, 800b38a <_printf_common+0x26>
 800b386:	3301      	adds	r3, #1
 800b388:	6033      	str	r3, [r6, #0]
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	0699      	lsls	r1, r3, #26
 800b38e:	bf42      	ittt	mi
 800b390:	6833      	ldrmi	r3, [r6, #0]
 800b392:	3302      	addmi	r3, #2
 800b394:	6033      	strmi	r3, [r6, #0]
 800b396:	6825      	ldr	r5, [r4, #0]
 800b398:	f015 0506 	ands.w	r5, r5, #6
 800b39c:	d106      	bne.n	800b3ac <_printf_common+0x48>
 800b39e:	f104 0a19 	add.w	sl, r4, #25
 800b3a2:	68e3      	ldr	r3, [r4, #12]
 800b3a4:	6832      	ldr	r2, [r6, #0]
 800b3a6:	1a9b      	subs	r3, r3, r2
 800b3a8:	42ab      	cmp	r3, r5
 800b3aa:	dc26      	bgt.n	800b3fa <_printf_common+0x96>
 800b3ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3b0:	1e13      	subs	r3, r2, #0
 800b3b2:	6822      	ldr	r2, [r4, #0]
 800b3b4:	bf18      	it	ne
 800b3b6:	2301      	movne	r3, #1
 800b3b8:	0692      	lsls	r2, r2, #26
 800b3ba:	d42b      	bmi.n	800b414 <_printf_common+0xb0>
 800b3bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	4638      	mov	r0, r7
 800b3c4:	47c0      	blx	r8
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	d01e      	beq.n	800b408 <_printf_common+0xa4>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	6922      	ldr	r2, [r4, #16]
 800b3ce:	f003 0306 	and.w	r3, r3, #6
 800b3d2:	2b04      	cmp	r3, #4
 800b3d4:	bf02      	ittt	eq
 800b3d6:	68e5      	ldreq	r5, [r4, #12]
 800b3d8:	6833      	ldreq	r3, [r6, #0]
 800b3da:	1aed      	subeq	r5, r5, r3
 800b3dc:	68a3      	ldr	r3, [r4, #8]
 800b3de:	bf0c      	ite	eq
 800b3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3e4:	2500      	movne	r5, #0
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	bfc4      	itt	gt
 800b3ea:	1a9b      	subgt	r3, r3, r2
 800b3ec:	18ed      	addgt	r5, r5, r3
 800b3ee:	2600      	movs	r6, #0
 800b3f0:	341a      	adds	r4, #26
 800b3f2:	42b5      	cmp	r5, r6
 800b3f4:	d11a      	bne.n	800b42c <_printf_common+0xc8>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	e008      	b.n	800b40c <_printf_common+0xa8>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	4652      	mov	r2, sl
 800b3fe:	4649      	mov	r1, r9
 800b400:	4638      	mov	r0, r7
 800b402:	47c0      	blx	r8
 800b404:	3001      	adds	r0, #1
 800b406:	d103      	bne.n	800b410 <_printf_common+0xac>
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b410:	3501      	adds	r5, #1
 800b412:	e7c6      	b.n	800b3a2 <_printf_common+0x3e>
 800b414:	18e1      	adds	r1, r4, r3
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	2030      	movs	r0, #48	; 0x30
 800b41a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b41e:	4422      	add	r2, r4
 800b420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b428:	3302      	adds	r3, #2
 800b42a:	e7c7      	b.n	800b3bc <_printf_common+0x58>
 800b42c:	2301      	movs	r3, #1
 800b42e:	4622      	mov	r2, r4
 800b430:	4649      	mov	r1, r9
 800b432:	4638      	mov	r0, r7
 800b434:	47c0      	blx	r8
 800b436:	3001      	adds	r0, #1
 800b438:	d0e6      	beq.n	800b408 <_printf_common+0xa4>
 800b43a:	3601      	adds	r6, #1
 800b43c:	e7d9      	b.n	800b3f2 <_printf_common+0x8e>
	...

0800b440 <_printf_i>:
 800b440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b444:	7e0f      	ldrb	r7, [r1, #24]
 800b446:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b448:	2f78      	cmp	r7, #120	; 0x78
 800b44a:	4691      	mov	r9, r2
 800b44c:	4680      	mov	r8, r0
 800b44e:	460c      	mov	r4, r1
 800b450:	469a      	mov	sl, r3
 800b452:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b456:	d807      	bhi.n	800b468 <_printf_i+0x28>
 800b458:	2f62      	cmp	r7, #98	; 0x62
 800b45a:	d80a      	bhi.n	800b472 <_printf_i+0x32>
 800b45c:	2f00      	cmp	r7, #0
 800b45e:	f000 80d4 	beq.w	800b60a <_printf_i+0x1ca>
 800b462:	2f58      	cmp	r7, #88	; 0x58
 800b464:	f000 80c0 	beq.w	800b5e8 <_printf_i+0x1a8>
 800b468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b46c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b470:	e03a      	b.n	800b4e8 <_printf_i+0xa8>
 800b472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b476:	2b15      	cmp	r3, #21
 800b478:	d8f6      	bhi.n	800b468 <_printf_i+0x28>
 800b47a:	a101      	add	r1, pc, #4	; (adr r1, 800b480 <_printf_i+0x40>)
 800b47c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b480:	0800b4d9 	.word	0x0800b4d9
 800b484:	0800b4ed 	.word	0x0800b4ed
 800b488:	0800b469 	.word	0x0800b469
 800b48c:	0800b469 	.word	0x0800b469
 800b490:	0800b469 	.word	0x0800b469
 800b494:	0800b469 	.word	0x0800b469
 800b498:	0800b4ed 	.word	0x0800b4ed
 800b49c:	0800b469 	.word	0x0800b469
 800b4a0:	0800b469 	.word	0x0800b469
 800b4a4:	0800b469 	.word	0x0800b469
 800b4a8:	0800b469 	.word	0x0800b469
 800b4ac:	0800b5f1 	.word	0x0800b5f1
 800b4b0:	0800b519 	.word	0x0800b519
 800b4b4:	0800b5ab 	.word	0x0800b5ab
 800b4b8:	0800b469 	.word	0x0800b469
 800b4bc:	0800b469 	.word	0x0800b469
 800b4c0:	0800b613 	.word	0x0800b613
 800b4c4:	0800b469 	.word	0x0800b469
 800b4c8:	0800b519 	.word	0x0800b519
 800b4cc:	0800b469 	.word	0x0800b469
 800b4d0:	0800b469 	.word	0x0800b469
 800b4d4:	0800b5b3 	.word	0x0800b5b3
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	1d1a      	adds	r2, r3, #4
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	602a      	str	r2, [r5, #0]
 800b4e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e09f      	b.n	800b62c <_printf_i+0x1ec>
 800b4ec:	6820      	ldr	r0, [r4, #0]
 800b4ee:	682b      	ldr	r3, [r5, #0]
 800b4f0:	0607      	lsls	r7, r0, #24
 800b4f2:	f103 0104 	add.w	r1, r3, #4
 800b4f6:	6029      	str	r1, [r5, #0]
 800b4f8:	d501      	bpl.n	800b4fe <_printf_i+0xbe>
 800b4fa:	681e      	ldr	r6, [r3, #0]
 800b4fc:	e003      	b.n	800b506 <_printf_i+0xc6>
 800b4fe:	0646      	lsls	r6, r0, #25
 800b500:	d5fb      	bpl.n	800b4fa <_printf_i+0xba>
 800b502:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b506:	2e00      	cmp	r6, #0
 800b508:	da03      	bge.n	800b512 <_printf_i+0xd2>
 800b50a:	232d      	movs	r3, #45	; 0x2d
 800b50c:	4276      	negs	r6, r6
 800b50e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b512:	485a      	ldr	r0, [pc, #360]	; (800b67c <_printf_i+0x23c>)
 800b514:	230a      	movs	r3, #10
 800b516:	e012      	b.n	800b53e <_printf_i+0xfe>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	6820      	ldr	r0, [r4, #0]
 800b51c:	1d19      	adds	r1, r3, #4
 800b51e:	6029      	str	r1, [r5, #0]
 800b520:	0605      	lsls	r5, r0, #24
 800b522:	d501      	bpl.n	800b528 <_printf_i+0xe8>
 800b524:	681e      	ldr	r6, [r3, #0]
 800b526:	e002      	b.n	800b52e <_printf_i+0xee>
 800b528:	0641      	lsls	r1, r0, #25
 800b52a:	d5fb      	bpl.n	800b524 <_printf_i+0xe4>
 800b52c:	881e      	ldrh	r6, [r3, #0]
 800b52e:	4853      	ldr	r0, [pc, #332]	; (800b67c <_printf_i+0x23c>)
 800b530:	2f6f      	cmp	r7, #111	; 0x6f
 800b532:	bf0c      	ite	eq
 800b534:	2308      	moveq	r3, #8
 800b536:	230a      	movne	r3, #10
 800b538:	2100      	movs	r1, #0
 800b53a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b53e:	6865      	ldr	r5, [r4, #4]
 800b540:	60a5      	str	r5, [r4, #8]
 800b542:	2d00      	cmp	r5, #0
 800b544:	bfa2      	ittt	ge
 800b546:	6821      	ldrge	r1, [r4, #0]
 800b548:	f021 0104 	bicge.w	r1, r1, #4
 800b54c:	6021      	strge	r1, [r4, #0]
 800b54e:	b90e      	cbnz	r6, 800b554 <_printf_i+0x114>
 800b550:	2d00      	cmp	r5, #0
 800b552:	d04b      	beq.n	800b5ec <_printf_i+0x1ac>
 800b554:	4615      	mov	r5, r2
 800b556:	fbb6 f1f3 	udiv	r1, r6, r3
 800b55a:	fb03 6711 	mls	r7, r3, r1, r6
 800b55e:	5dc7      	ldrb	r7, [r0, r7]
 800b560:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b564:	4637      	mov	r7, r6
 800b566:	42bb      	cmp	r3, r7
 800b568:	460e      	mov	r6, r1
 800b56a:	d9f4      	bls.n	800b556 <_printf_i+0x116>
 800b56c:	2b08      	cmp	r3, #8
 800b56e:	d10b      	bne.n	800b588 <_printf_i+0x148>
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	07de      	lsls	r6, r3, #31
 800b574:	d508      	bpl.n	800b588 <_printf_i+0x148>
 800b576:	6923      	ldr	r3, [r4, #16]
 800b578:	6861      	ldr	r1, [r4, #4]
 800b57a:	4299      	cmp	r1, r3
 800b57c:	bfde      	ittt	le
 800b57e:	2330      	movle	r3, #48	; 0x30
 800b580:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b584:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b588:	1b52      	subs	r2, r2, r5
 800b58a:	6122      	str	r2, [r4, #16]
 800b58c:	f8cd a000 	str.w	sl, [sp]
 800b590:	464b      	mov	r3, r9
 800b592:	aa03      	add	r2, sp, #12
 800b594:	4621      	mov	r1, r4
 800b596:	4640      	mov	r0, r8
 800b598:	f7ff fee4 	bl	800b364 <_printf_common>
 800b59c:	3001      	adds	r0, #1
 800b59e:	d14a      	bne.n	800b636 <_printf_i+0x1f6>
 800b5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a4:	b004      	add	sp, #16
 800b5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	f043 0320 	orr.w	r3, r3, #32
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	4833      	ldr	r0, [pc, #204]	; (800b680 <_printf_i+0x240>)
 800b5b4:	2778      	movs	r7, #120	; 0x78
 800b5b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	6829      	ldr	r1, [r5, #0]
 800b5be:	061f      	lsls	r7, r3, #24
 800b5c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5c4:	d402      	bmi.n	800b5cc <_printf_i+0x18c>
 800b5c6:	065f      	lsls	r7, r3, #25
 800b5c8:	bf48      	it	mi
 800b5ca:	b2b6      	uxthmi	r6, r6
 800b5cc:	07df      	lsls	r7, r3, #31
 800b5ce:	bf48      	it	mi
 800b5d0:	f043 0320 	orrmi.w	r3, r3, #32
 800b5d4:	6029      	str	r1, [r5, #0]
 800b5d6:	bf48      	it	mi
 800b5d8:	6023      	strmi	r3, [r4, #0]
 800b5da:	b91e      	cbnz	r6, 800b5e4 <_printf_i+0x1a4>
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	f023 0320 	bic.w	r3, r3, #32
 800b5e2:	6023      	str	r3, [r4, #0]
 800b5e4:	2310      	movs	r3, #16
 800b5e6:	e7a7      	b.n	800b538 <_printf_i+0xf8>
 800b5e8:	4824      	ldr	r0, [pc, #144]	; (800b67c <_printf_i+0x23c>)
 800b5ea:	e7e4      	b.n	800b5b6 <_printf_i+0x176>
 800b5ec:	4615      	mov	r5, r2
 800b5ee:	e7bd      	b.n	800b56c <_printf_i+0x12c>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	6826      	ldr	r6, [r4, #0]
 800b5f4:	6961      	ldr	r1, [r4, #20]
 800b5f6:	1d18      	adds	r0, r3, #4
 800b5f8:	6028      	str	r0, [r5, #0]
 800b5fa:	0635      	lsls	r5, r6, #24
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	d501      	bpl.n	800b604 <_printf_i+0x1c4>
 800b600:	6019      	str	r1, [r3, #0]
 800b602:	e002      	b.n	800b60a <_printf_i+0x1ca>
 800b604:	0670      	lsls	r0, r6, #25
 800b606:	d5fb      	bpl.n	800b600 <_printf_i+0x1c0>
 800b608:	8019      	strh	r1, [r3, #0]
 800b60a:	2300      	movs	r3, #0
 800b60c:	6123      	str	r3, [r4, #16]
 800b60e:	4615      	mov	r5, r2
 800b610:	e7bc      	b.n	800b58c <_printf_i+0x14c>
 800b612:	682b      	ldr	r3, [r5, #0]
 800b614:	1d1a      	adds	r2, r3, #4
 800b616:	602a      	str	r2, [r5, #0]
 800b618:	681d      	ldr	r5, [r3, #0]
 800b61a:	6862      	ldr	r2, [r4, #4]
 800b61c:	2100      	movs	r1, #0
 800b61e:	4628      	mov	r0, r5
 800b620:	f7f4 fdd6 	bl	80001d0 <memchr>
 800b624:	b108      	cbz	r0, 800b62a <_printf_i+0x1ea>
 800b626:	1b40      	subs	r0, r0, r5
 800b628:	6060      	str	r0, [r4, #4]
 800b62a:	6863      	ldr	r3, [r4, #4]
 800b62c:	6123      	str	r3, [r4, #16]
 800b62e:	2300      	movs	r3, #0
 800b630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b634:	e7aa      	b.n	800b58c <_printf_i+0x14c>
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	462a      	mov	r2, r5
 800b63a:	4649      	mov	r1, r9
 800b63c:	4640      	mov	r0, r8
 800b63e:	47d0      	blx	sl
 800b640:	3001      	adds	r0, #1
 800b642:	d0ad      	beq.n	800b5a0 <_printf_i+0x160>
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	079b      	lsls	r3, r3, #30
 800b648:	d413      	bmi.n	800b672 <_printf_i+0x232>
 800b64a:	68e0      	ldr	r0, [r4, #12]
 800b64c:	9b03      	ldr	r3, [sp, #12]
 800b64e:	4298      	cmp	r0, r3
 800b650:	bfb8      	it	lt
 800b652:	4618      	movlt	r0, r3
 800b654:	e7a6      	b.n	800b5a4 <_printf_i+0x164>
 800b656:	2301      	movs	r3, #1
 800b658:	4632      	mov	r2, r6
 800b65a:	4649      	mov	r1, r9
 800b65c:	4640      	mov	r0, r8
 800b65e:	47d0      	blx	sl
 800b660:	3001      	adds	r0, #1
 800b662:	d09d      	beq.n	800b5a0 <_printf_i+0x160>
 800b664:	3501      	adds	r5, #1
 800b666:	68e3      	ldr	r3, [r4, #12]
 800b668:	9903      	ldr	r1, [sp, #12]
 800b66a:	1a5b      	subs	r3, r3, r1
 800b66c:	42ab      	cmp	r3, r5
 800b66e:	dcf2      	bgt.n	800b656 <_printf_i+0x216>
 800b670:	e7eb      	b.n	800b64a <_printf_i+0x20a>
 800b672:	2500      	movs	r5, #0
 800b674:	f104 0619 	add.w	r6, r4, #25
 800b678:	e7f5      	b.n	800b666 <_printf_i+0x226>
 800b67a:	bf00      	nop
 800b67c:	0800daee 	.word	0x0800daee
 800b680:	0800daff 	.word	0x0800daff

0800b684 <std>:
 800b684:	2300      	movs	r3, #0
 800b686:	b510      	push	{r4, lr}
 800b688:	4604      	mov	r4, r0
 800b68a:	e9c0 3300 	strd	r3, r3, [r0]
 800b68e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b692:	6083      	str	r3, [r0, #8]
 800b694:	8181      	strh	r1, [r0, #12]
 800b696:	6643      	str	r3, [r0, #100]	; 0x64
 800b698:	81c2      	strh	r2, [r0, #14]
 800b69a:	6183      	str	r3, [r0, #24]
 800b69c:	4619      	mov	r1, r3
 800b69e:	2208      	movs	r2, #8
 800b6a0:	305c      	adds	r0, #92	; 0x5c
 800b6a2:	f000 f948 	bl	800b936 <memset>
 800b6a6:	4b0d      	ldr	r3, [pc, #52]	; (800b6dc <std+0x58>)
 800b6a8:	6263      	str	r3, [r4, #36]	; 0x24
 800b6aa:	4b0d      	ldr	r3, [pc, #52]	; (800b6e0 <std+0x5c>)
 800b6ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6ae:	4b0d      	ldr	r3, [pc, #52]	; (800b6e4 <std+0x60>)
 800b6b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6b2:	4b0d      	ldr	r3, [pc, #52]	; (800b6e8 <std+0x64>)
 800b6b4:	6323      	str	r3, [r4, #48]	; 0x30
 800b6b6:	4b0d      	ldr	r3, [pc, #52]	; (800b6ec <std+0x68>)
 800b6b8:	6224      	str	r4, [r4, #32]
 800b6ba:	429c      	cmp	r4, r3
 800b6bc:	d006      	beq.n	800b6cc <std+0x48>
 800b6be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b6c2:	4294      	cmp	r4, r2
 800b6c4:	d002      	beq.n	800b6cc <std+0x48>
 800b6c6:	33d0      	adds	r3, #208	; 0xd0
 800b6c8:	429c      	cmp	r4, r3
 800b6ca:	d105      	bne.n	800b6d8 <std+0x54>
 800b6cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6d4:	f000 b9bc 	b.w	800ba50 <__retarget_lock_init_recursive>
 800b6d8:	bd10      	pop	{r4, pc}
 800b6da:	bf00      	nop
 800b6dc:	0800b8b1 	.word	0x0800b8b1
 800b6e0:	0800b8d3 	.word	0x0800b8d3
 800b6e4:	0800b90b 	.word	0x0800b90b
 800b6e8:	0800b92f 	.word	0x0800b92f
 800b6ec:	20000bc0 	.word	0x20000bc0

0800b6f0 <stdio_exit_handler>:
 800b6f0:	4a02      	ldr	r2, [pc, #8]	; (800b6fc <stdio_exit_handler+0xc>)
 800b6f2:	4903      	ldr	r1, [pc, #12]	; (800b700 <stdio_exit_handler+0x10>)
 800b6f4:	4803      	ldr	r0, [pc, #12]	; (800b704 <stdio_exit_handler+0x14>)
 800b6f6:	f000 b869 	b.w	800b7cc <_fwalk_sglue>
 800b6fa:	bf00      	nop
 800b6fc:	2000002c 	.word	0x2000002c
 800b700:	0800d299 	.word	0x0800d299
 800b704:	20000038 	.word	0x20000038

0800b708 <cleanup_stdio>:
 800b708:	6841      	ldr	r1, [r0, #4]
 800b70a:	4b0c      	ldr	r3, [pc, #48]	; (800b73c <cleanup_stdio+0x34>)
 800b70c:	4299      	cmp	r1, r3
 800b70e:	b510      	push	{r4, lr}
 800b710:	4604      	mov	r4, r0
 800b712:	d001      	beq.n	800b718 <cleanup_stdio+0x10>
 800b714:	f001 fdc0 	bl	800d298 <_fflush_r>
 800b718:	68a1      	ldr	r1, [r4, #8]
 800b71a:	4b09      	ldr	r3, [pc, #36]	; (800b740 <cleanup_stdio+0x38>)
 800b71c:	4299      	cmp	r1, r3
 800b71e:	d002      	beq.n	800b726 <cleanup_stdio+0x1e>
 800b720:	4620      	mov	r0, r4
 800b722:	f001 fdb9 	bl	800d298 <_fflush_r>
 800b726:	68e1      	ldr	r1, [r4, #12]
 800b728:	4b06      	ldr	r3, [pc, #24]	; (800b744 <cleanup_stdio+0x3c>)
 800b72a:	4299      	cmp	r1, r3
 800b72c:	d004      	beq.n	800b738 <cleanup_stdio+0x30>
 800b72e:	4620      	mov	r0, r4
 800b730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b734:	f001 bdb0 	b.w	800d298 <_fflush_r>
 800b738:	bd10      	pop	{r4, pc}
 800b73a:	bf00      	nop
 800b73c:	20000bc0 	.word	0x20000bc0
 800b740:	20000c28 	.word	0x20000c28
 800b744:	20000c90 	.word	0x20000c90

0800b748 <global_stdio_init.part.0>:
 800b748:	b510      	push	{r4, lr}
 800b74a:	4b0b      	ldr	r3, [pc, #44]	; (800b778 <global_stdio_init.part.0+0x30>)
 800b74c:	4c0b      	ldr	r4, [pc, #44]	; (800b77c <global_stdio_init.part.0+0x34>)
 800b74e:	4a0c      	ldr	r2, [pc, #48]	; (800b780 <global_stdio_init.part.0+0x38>)
 800b750:	601a      	str	r2, [r3, #0]
 800b752:	4620      	mov	r0, r4
 800b754:	2200      	movs	r2, #0
 800b756:	2104      	movs	r1, #4
 800b758:	f7ff ff94 	bl	800b684 <std>
 800b75c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b760:	2201      	movs	r2, #1
 800b762:	2109      	movs	r1, #9
 800b764:	f7ff ff8e 	bl	800b684 <std>
 800b768:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b76c:	2202      	movs	r2, #2
 800b76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b772:	2112      	movs	r1, #18
 800b774:	f7ff bf86 	b.w	800b684 <std>
 800b778:	20000cf8 	.word	0x20000cf8
 800b77c:	20000bc0 	.word	0x20000bc0
 800b780:	0800b6f1 	.word	0x0800b6f1

0800b784 <__sfp_lock_acquire>:
 800b784:	4801      	ldr	r0, [pc, #4]	; (800b78c <__sfp_lock_acquire+0x8>)
 800b786:	f000 b964 	b.w	800ba52 <__retarget_lock_acquire_recursive>
 800b78a:	bf00      	nop
 800b78c:	20000d01 	.word	0x20000d01

0800b790 <__sfp_lock_release>:
 800b790:	4801      	ldr	r0, [pc, #4]	; (800b798 <__sfp_lock_release+0x8>)
 800b792:	f000 b95f 	b.w	800ba54 <__retarget_lock_release_recursive>
 800b796:	bf00      	nop
 800b798:	20000d01 	.word	0x20000d01

0800b79c <__sinit>:
 800b79c:	b510      	push	{r4, lr}
 800b79e:	4604      	mov	r4, r0
 800b7a0:	f7ff fff0 	bl	800b784 <__sfp_lock_acquire>
 800b7a4:	6a23      	ldr	r3, [r4, #32]
 800b7a6:	b11b      	cbz	r3, 800b7b0 <__sinit+0x14>
 800b7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7ac:	f7ff bff0 	b.w	800b790 <__sfp_lock_release>
 800b7b0:	4b04      	ldr	r3, [pc, #16]	; (800b7c4 <__sinit+0x28>)
 800b7b2:	6223      	str	r3, [r4, #32]
 800b7b4:	4b04      	ldr	r3, [pc, #16]	; (800b7c8 <__sinit+0x2c>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1f5      	bne.n	800b7a8 <__sinit+0xc>
 800b7bc:	f7ff ffc4 	bl	800b748 <global_stdio_init.part.0>
 800b7c0:	e7f2      	b.n	800b7a8 <__sinit+0xc>
 800b7c2:	bf00      	nop
 800b7c4:	0800b709 	.word	0x0800b709
 800b7c8:	20000cf8 	.word	0x20000cf8

0800b7cc <_fwalk_sglue>:
 800b7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	4688      	mov	r8, r1
 800b7d4:	4614      	mov	r4, r2
 800b7d6:	2600      	movs	r6, #0
 800b7d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b7e0:	d505      	bpl.n	800b7ee <_fwalk_sglue+0x22>
 800b7e2:	6824      	ldr	r4, [r4, #0]
 800b7e4:	2c00      	cmp	r4, #0
 800b7e6:	d1f7      	bne.n	800b7d8 <_fwalk_sglue+0xc>
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ee:	89ab      	ldrh	r3, [r5, #12]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d907      	bls.n	800b804 <_fwalk_sglue+0x38>
 800b7f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	d003      	beq.n	800b804 <_fwalk_sglue+0x38>
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	4638      	mov	r0, r7
 800b800:	47c0      	blx	r8
 800b802:	4306      	orrs	r6, r0
 800b804:	3568      	adds	r5, #104	; 0x68
 800b806:	e7e9      	b.n	800b7dc <_fwalk_sglue+0x10>

0800b808 <sniprintf>:
 800b808:	b40c      	push	{r2, r3}
 800b80a:	b530      	push	{r4, r5, lr}
 800b80c:	4b17      	ldr	r3, [pc, #92]	; (800b86c <sniprintf+0x64>)
 800b80e:	1e0c      	subs	r4, r1, #0
 800b810:	681d      	ldr	r5, [r3, #0]
 800b812:	b09d      	sub	sp, #116	; 0x74
 800b814:	da08      	bge.n	800b828 <sniprintf+0x20>
 800b816:	238b      	movs	r3, #139	; 0x8b
 800b818:	602b      	str	r3, [r5, #0]
 800b81a:	f04f 30ff 	mov.w	r0, #4294967295
 800b81e:	b01d      	add	sp, #116	; 0x74
 800b820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b824:	b002      	add	sp, #8
 800b826:	4770      	bx	lr
 800b828:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b82c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b830:	bf14      	ite	ne
 800b832:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b836:	4623      	moveq	r3, r4
 800b838:	9304      	str	r3, [sp, #16]
 800b83a:	9307      	str	r3, [sp, #28]
 800b83c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b840:	9002      	str	r0, [sp, #8]
 800b842:	9006      	str	r0, [sp, #24]
 800b844:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b848:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b84a:	ab21      	add	r3, sp, #132	; 0x84
 800b84c:	a902      	add	r1, sp, #8
 800b84e:	4628      	mov	r0, r5
 800b850:	9301      	str	r3, [sp, #4]
 800b852:	f001 fb9d 	bl	800cf90 <_svfiprintf_r>
 800b856:	1c43      	adds	r3, r0, #1
 800b858:	bfbc      	itt	lt
 800b85a:	238b      	movlt	r3, #139	; 0x8b
 800b85c:	602b      	strlt	r3, [r5, #0]
 800b85e:	2c00      	cmp	r4, #0
 800b860:	d0dd      	beq.n	800b81e <sniprintf+0x16>
 800b862:	9b02      	ldr	r3, [sp, #8]
 800b864:	2200      	movs	r2, #0
 800b866:	701a      	strb	r2, [r3, #0]
 800b868:	e7d9      	b.n	800b81e <sniprintf+0x16>
 800b86a:	bf00      	nop
 800b86c:	20000084 	.word	0x20000084

0800b870 <siprintf>:
 800b870:	b40e      	push	{r1, r2, r3}
 800b872:	b500      	push	{lr}
 800b874:	b09c      	sub	sp, #112	; 0x70
 800b876:	ab1d      	add	r3, sp, #116	; 0x74
 800b878:	9002      	str	r0, [sp, #8]
 800b87a:	9006      	str	r0, [sp, #24]
 800b87c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b880:	4809      	ldr	r0, [pc, #36]	; (800b8a8 <siprintf+0x38>)
 800b882:	9107      	str	r1, [sp, #28]
 800b884:	9104      	str	r1, [sp, #16]
 800b886:	4909      	ldr	r1, [pc, #36]	; (800b8ac <siprintf+0x3c>)
 800b888:	f853 2b04 	ldr.w	r2, [r3], #4
 800b88c:	9105      	str	r1, [sp, #20]
 800b88e:	6800      	ldr	r0, [r0, #0]
 800b890:	9301      	str	r3, [sp, #4]
 800b892:	a902      	add	r1, sp, #8
 800b894:	f001 fb7c 	bl	800cf90 <_svfiprintf_r>
 800b898:	9b02      	ldr	r3, [sp, #8]
 800b89a:	2200      	movs	r2, #0
 800b89c:	701a      	strb	r2, [r3, #0]
 800b89e:	b01c      	add	sp, #112	; 0x70
 800b8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8a4:	b003      	add	sp, #12
 800b8a6:	4770      	bx	lr
 800b8a8:	20000084 	.word	0x20000084
 800b8ac:	ffff0208 	.word	0xffff0208

0800b8b0 <__sread>:
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b8:	f000 f86c 	bl	800b994 <_read_r>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	bfab      	itete	ge
 800b8c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b8c4:	181b      	addge	r3, r3, r0
 800b8c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8ca:	bfac      	ite	ge
 800b8cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8ce:	81a3      	strhlt	r3, [r4, #12]
 800b8d0:	bd10      	pop	{r4, pc}

0800b8d2 <__swrite>:
 800b8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d6:	461f      	mov	r7, r3
 800b8d8:	898b      	ldrh	r3, [r1, #12]
 800b8da:	05db      	lsls	r3, r3, #23
 800b8dc:	4605      	mov	r5, r0
 800b8de:	460c      	mov	r4, r1
 800b8e0:	4616      	mov	r6, r2
 800b8e2:	d505      	bpl.n	800b8f0 <__swrite+0x1e>
 800b8e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f000 f840 	bl	800b970 <_lseek_r>
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8fa:	81a3      	strh	r3, [r4, #12]
 800b8fc:	4632      	mov	r2, r6
 800b8fe:	463b      	mov	r3, r7
 800b900:	4628      	mov	r0, r5
 800b902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b906:	f000 b867 	b.w	800b9d8 <_write_r>

0800b90a <__sseek>:
 800b90a:	b510      	push	{r4, lr}
 800b90c:	460c      	mov	r4, r1
 800b90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b912:	f000 f82d 	bl	800b970 <_lseek_r>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	bf15      	itete	ne
 800b91c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b91e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b926:	81a3      	strheq	r3, [r4, #12]
 800b928:	bf18      	it	ne
 800b92a:	81a3      	strhne	r3, [r4, #12]
 800b92c:	bd10      	pop	{r4, pc}

0800b92e <__sclose>:
 800b92e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b932:	f000 b80d 	b.w	800b950 <_close_r>

0800b936 <memset>:
 800b936:	4402      	add	r2, r0
 800b938:	4603      	mov	r3, r0
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d100      	bne.n	800b940 <memset+0xa>
 800b93e:	4770      	bx	lr
 800b940:	f803 1b01 	strb.w	r1, [r3], #1
 800b944:	e7f9      	b.n	800b93a <memset+0x4>
	...

0800b948 <_localeconv_r>:
 800b948:	4800      	ldr	r0, [pc, #0]	; (800b94c <_localeconv_r+0x4>)
 800b94a:	4770      	bx	lr
 800b94c:	20000178 	.word	0x20000178

0800b950 <_close_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4d06      	ldr	r5, [pc, #24]	; (800b96c <_close_r+0x1c>)
 800b954:	2300      	movs	r3, #0
 800b956:	4604      	mov	r4, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	602b      	str	r3, [r5, #0]
 800b95c:	f7f6 faaf 	bl	8001ebe <_close>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	d102      	bne.n	800b96a <_close_r+0x1a>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	b103      	cbz	r3, 800b96a <_close_r+0x1a>
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	20000cfc 	.word	0x20000cfc

0800b970 <_lseek_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4d07      	ldr	r5, [pc, #28]	; (800b990 <_lseek_r+0x20>)
 800b974:	4604      	mov	r4, r0
 800b976:	4608      	mov	r0, r1
 800b978:	4611      	mov	r1, r2
 800b97a:	2200      	movs	r2, #0
 800b97c:	602a      	str	r2, [r5, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	f7f6 fac4 	bl	8001f0c <_lseek>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d102      	bne.n	800b98e <_lseek_r+0x1e>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	b103      	cbz	r3, 800b98e <_lseek_r+0x1e>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	20000cfc 	.word	0x20000cfc

0800b994 <_read_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d07      	ldr	r5, [pc, #28]	; (800b9b4 <_read_r+0x20>)
 800b998:	4604      	mov	r4, r0
 800b99a:	4608      	mov	r0, r1
 800b99c:	4611      	mov	r1, r2
 800b99e:	2200      	movs	r2, #0
 800b9a0:	602a      	str	r2, [r5, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	f7f6 fa52 	bl	8001e4c <_read>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d102      	bne.n	800b9b2 <_read_r+0x1e>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	b103      	cbz	r3, 800b9b2 <_read_r+0x1e>
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	20000cfc 	.word	0x20000cfc

0800b9b8 <_sbrk_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d06      	ldr	r5, [pc, #24]	; (800b9d4 <_sbrk_r+0x1c>)
 800b9bc:	2300      	movs	r3, #0
 800b9be:	4604      	mov	r4, r0
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	602b      	str	r3, [r5, #0]
 800b9c4:	f7f6 fab0 	bl	8001f28 <_sbrk>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d102      	bne.n	800b9d2 <_sbrk_r+0x1a>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b103      	cbz	r3, 800b9d2 <_sbrk_r+0x1a>
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	20000cfc 	.word	0x20000cfc

0800b9d8 <_write_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4d07      	ldr	r5, [pc, #28]	; (800b9f8 <_write_r+0x20>)
 800b9dc:	4604      	mov	r4, r0
 800b9de:	4608      	mov	r0, r1
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	602a      	str	r2, [r5, #0]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	f7f6 fa4d 	bl	8001e86 <_write>
 800b9ec:	1c43      	adds	r3, r0, #1
 800b9ee:	d102      	bne.n	800b9f6 <_write_r+0x1e>
 800b9f0:	682b      	ldr	r3, [r5, #0]
 800b9f2:	b103      	cbz	r3, 800b9f6 <_write_r+0x1e>
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	bd38      	pop	{r3, r4, r5, pc}
 800b9f8:	20000cfc 	.word	0x20000cfc

0800b9fc <__errno>:
 800b9fc:	4b01      	ldr	r3, [pc, #4]	; (800ba04 <__errno+0x8>)
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	20000084 	.word	0x20000084

0800ba08 <__libc_init_array>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	4d0d      	ldr	r5, [pc, #52]	; (800ba40 <__libc_init_array+0x38>)
 800ba0c:	4c0d      	ldr	r4, [pc, #52]	; (800ba44 <__libc_init_array+0x3c>)
 800ba0e:	1b64      	subs	r4, r4, r5
 800ba10:	10a4      	asrs	r4, r4, #2
 800ba12:	2600      	movs	r6, #0
 800ba14:	42a6      	cmp	r6, r4
 800ba16:	d109      	bne.n	800ba2c <__libc_init_array+0x24>
 800ba18:	4d0b      	ldr	r5, [pc, #44]	; (800ba48 <__libc_init_array+0x40>)
 800ba1a:	4c0c      	ldr	r4, [pc, #48]	; (800ba4c <__libc_init_array+0x44>)
 800ba1c:	f001 ffd0 	bl	800d9c0 <_init>
 800ba20:	1b64      	subs	r4, r4, r5
 800ba22:	10a4      	asrs	r4, r4, #2
 800ba24:	2600      	movs	r6, #0
 800ba26:	42a6      	cmp	r6, r4
 800ba28:	d105      	bne.n	800ba36 <__libc_init_array+0x2e>
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}
 800ba2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba30:	4798      	blx	r3
 800ba32:	3601      	adds	r6, #1
 800ba34:	e7ee      	b.n	800ba14 <__libc_init_array+0xc>
 800ba36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba3a:	4798      	blx	r3
 800ba3c:	3601      	adds	r6, #1
 800ba3e:	e7f2      	b.n	800ba26 <__libc_init_array+0x1e>
 800ba40:	0800de54 	.word	0x0800de54
 800ba44:	0800de54 	.word	0x0800de54
 800ba48:	0800de54 	.word	0x0800de54
 800ba4c:	0800de58 	.word	0x0800de58

0800ba50 <__retarget_lock_init_recursive>:
 800ba50:	4770      	bx	lr

0800ba52 <__retarget_lock_acquire_recursive>:
 800ba52:	4770      	bx	lr

0800ba54 <__retarget_lock_release_recursive>:
 800ba54:	4770      	bx	lr

0800ba56 <quorem>:
 800ba56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5a:	6903      	ldr	r3, [r0, #16]
 800ba5c:	690c      	ldr	r4, [r1, #16]
 800ba5e:	42a3      	cmp	r3, r4
 800ba60:	4607      	mov	r7, r0
 800ba62:	db7e      	blt.n	800bb62 <quorem+0x10c>
 800ba64:	3c01      	subs	r4, #1
 800ba66:	f101 0814 	add.w	r8, r1, #20
 800ba6a:	f100 0514 	add.w	r5, r0, #20
 800ba6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba88:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba8c:	d331      	bcc.n	800baf2 <quorem+0x9c>
 800ba8e:	f04f 0e00 	mov.w	lr, #0
 800ba92:	4640      	mov	r0, r8
 800ba94:	46ac      	mov	ip, r5
 800ba96:	46f2      	mov	sl, lr
 800ba98:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba9c:	b293      	uxth	r3, r2
 800ba9e:	fb06 e303 	mla	r3, r6, r3, lr
 800baa2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800baa6:	0c1a      	lsrs	r2, r3, #16
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	ebaa 0303 	sub.w	r3, sl, r3
 800baae:	f8dc a000 	ldr.w	sl, [ip]
 800bab2:	fa13 f38a 	uxtah	r3, r3, sl
 800bab6:	fb06 220e 	mla	r2, r6, lr, r2
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	9b00      	ldr	r3, [sp, #0]
 800babe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bac2:	b292      	uxth	r2, r2
 800bac4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bac8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bacc:	f8bd 3000 	ldrh.w	r3, [sp]
 800bad0:	4581      	cmp	r9, r0
 800bad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bad6:	f84c 3b04 	str.w	r3, [ip], #4
 800bada:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bade:	d2db      	bcs.n	800ba98 <quorem+0x42>
 800bae0:	f855 300b 	ldr.w	r3, [r5, fp]
 800bae4:	b92b      	cbnz	r3, 800baf2 <quorem+0x9c>
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	3b04      	subs	r3, #4
 800baea:	429d      	cmp	r5, r3
 800baec:	461a      	mov	r2, r3
 800baee:	d32c      	bcc.n	800bb4a <quorem+0xf4>
 800baf0:	613c      	str	r4, [r7, #16]
 800baf2:	4638      	mov	r0, r7
 800baf4:	f001 f8f2 	bl	800ccdc <__mcmp>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	db22      	blt.n	800bb42 <quorem+0xec>
 800bafc:	3601      	adds	r6, #1
 800bafe:	4629      	mov	r1, r5
 800bb00:	2000      	movs	r0, #0
 800bb02:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb06:	f8d1 c000 	ldr.w	ip, [r1]
 800bb0a:	b293      	uxth	r3, r2
 800bb0c:	1ac3      	subs	r3, r0, r3
 800bb0e:	0c12      	lsrs	r2, r2, #16
 800bb10:	fa13 f38c 	uxtah	r3, r3, ip
 800bb14:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bb18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb22:	45c1      	cmp	r9, r8
 800bb24:	f841 3b04 	str.w	r3, [r1], #4
 800bb28:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb2c:	d2e9      	bcs.n	800bb02 <quorem+0xac>
 800bb2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb36:	b922      	cbnz	r2, 800bb42 <quorem+0xec>
 800bb38:	3b04      	subs	r3, #4
 800bb3a:	429d      	cmp	r5, r3
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	d30a      	bcc.n	800bb56 <quorem+0x100>
 800bb40:	613c      	str	r4, [r7, #16]
 800bb42:	4630      	mov	r0, r6
 800bb44:	b003      	add	sp, #12
 800bb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4a:	6812      	ldr	r2, [r2, #0]
 800bb4c:	3b04      	subs	r3, #4
 800bb4e:	2a00      	cmp	r2, #0
 800bb50:	d1ce      	bne.n	800baf0 <quorem+0x9a>
 800bb52:	3c01      	subs	r4, #1
 800bb54:	e7c9      	b.n	800baea <quorem+0x94>
 800bb56:	6812      	ldr	r2, [r2, #0]
 800bb58:	3b04      	subs	r3, #4
 800bb5a:	2a00      	cmp	r2, #0
 800bb5c:	d1f0      	bne.n	800bb40 <quorem+0xea>
 800bb5e:	3c01      	subs	r4, #1
 800bb60:	e7eb      	b.n	800bb3a <quorem+0xe4>
 800bb62:	2000      	movs	r0, #0
 800bb64:	e7ee      	b.n	800bb44 <quorem+0xee>
	...

0800bb68 <_dtoa_r>:
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	ed2d 8b04 	vpush	{d8-d9}
 800bb70:	69c5      	ldr	r5, [r0, #28]
 800bb72:	b093      	sub	sp, #76	; 0x4c
 800bb74:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb78:	ec57 6b10 	vmov	r6, r7, d0
 800bb7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bb80:	9107      	str	r1, [sp, #28]
 800bb82:	4604      	mov	r4, r0
 800bb84:	920a      	str	r2, [sp, #40]	; 0x28
 800bb86:	930d      	str	r3, [sp, #52]	; 0x34
 800bb88:	b975      	cbnz	r5, 800bba8 <_dtoa_r+0x40>
 800bb8a:	2010      	movs	r0, #16
 800bb8c:	f7ff f858 	bl	800ac40 <malloc>
 800bb90:	4602      	mov	r2, r0
 800bb92:	61e0      	str	r0, [r4, #28]
 800bb94:	b920      	cbnz	r0, 800bba0 <_dtoa_r+0x38>
 800bb96:	4bae      	ldr	r3, [pc, #696]	; (800be50 <_dtoa_r+0x2e8>)
 800bb98:	21ef      	movs	r1, #239	; 0xef
 800bb9a:	48ae      	ldr	r0, [pc, #696]	; (800be54 <_dtoa_r+0x2ec>)
 800bb9c:	f001 fbcc 	bl	800d338 <__assert_func>
 800bba0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bba4:	6005      	str	r5, [r0, #0]
 800bba6:	60c5      	str	r5, [r0, #12]
 800bba8:	69e3      	ldr	r3, [r4, #28]
 800bbaa:	6819      	ldr	r1, [r3, #0]
 800bbac:	b151      	cbz	r1, 800bbc4 <_dtoa_r+0x5c>
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	604a      	str	r2, [r1, #4]
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	4093      	lsls	r3, r2
 800bbb6:	608b      	str	r3, [r1, #8]
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f000 fe53 	bl	800c864 <_Bfree>
 800bbbe:	69e3      	ldr	r3, [r4, #28]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	601a      	str	r2, [r3, #0]
 800bbc4:	1e3b      	subs	r3, r7, #0
 800bbc6:	bfbb      	ittet	lt
 800bbc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bbcc:	9303      	strlt	r3, [sp, #12]
 800bbce:	2300      	movge	r3, #0
 800bbd0:	2201      	movlt	r2, #1
 800bbd2:	bfac      	ite	ge
 800bbd4:	f8c8 3000 	strge.w	r3, [r8]
 800bbd8:	f8c8 2000 	strlt.w	r2, [r8]
 800bbdc:	4b9e      	ldr	r3, [pc, #632]	; (800be58 <_dtoa_r+0x2f0>)
 800bbde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bbe2:	ea33 0308 	bics.w	r3, r3, r8
 800bbe6:	d11b      	bne.n	800bc20 <_dtoa_r+0xb8>
 800bbe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbea:	f242 730f 	movw	r3, #9999	; 0x270f
 800bbee:	6013      	str	r3, [r2, #0]
 800bbf0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bbf4:	4333      	orrs	r3, r6
 800bbf6:	f000 8593 	beq.w	800c720 <_dtoa_r+0xbb8>
 800bbfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbfc:	b963      	cbnz	r3, 800bc18 <_dtoa_r+0xb0>
 800bbfe:	4b97      	ldr	r3, [pc, #604]	; (800be5c <_dtoa_r+0x2f4>)
 800bc00:	e027      	b.n	800bc52 <_dtoa_r+0xea>
 800bc02:	4b97      	ldr	r3, [pc, #604]	; (800be60 <_dtoa_r+0x2f8>)
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	3308      	adds	r3, #8
 800bc08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	9800      	ldr	r0, [sp, #0]
 800bc0e:	b013      	add	sp, #76	; 0x4c
 800bc10:	ecbd 8b04 	vpop	{d8-d9}
 800bc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc18:	4b90      	ldr	r3, [pc, #576]	; (800be5c <_dtoa_r+0x2f4>)
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	3303      	adds	r3, #3
 800bc1e:	e7f3      	b.n	800bc08 <_dtoa_r+0xa0>
 800bc20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc24:	2200      	movs	r2, #0
 800bc26:	ec51 0b17 	vmov	r0, r1, d7
 800bc2a:	eeb0 8a47 	vmov.f32	s16, s14
 800bc2e:	eef0 8a67 	vmov.f32	s17, s15
 800bc32:	2300      	movs	r3, #0
 800bc34:	f7f4 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc38:	4681      	mov	r9, r0
 800bc3a:	b160      	cbz	r0, 800bc56 <_dtoa_r+0xee>
 800bc3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc3e:	2301      	movs	r3, #1
 800bc40:	6013      	str	r3, [r2, #0]
 800bc42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 8568 	beq.w	800c71a <_dtoa_r+0xbb2>
 800bc4a:	4b86      	ldr	r3, [pc, #536]	; (800be64 <_dtoa_r+0x2fc>)
 800bc4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	e7da      	b.n	800bc0c <_dtoa_r+0xa4>
 800bc56:	aa10      	add	r2, sp, #64	; 0x40
 800bc58:	a911      	add	r1, sp, #68	; 0x44
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc60:	eef0 0a68 	vmov.f32	s1, s17
 800bc64:	f001 f8e0 	bl	800ce28 <__d2b>
 800bc68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bc6c:	4682      	mov	sl, r0
 800bc6e:	2d00      	cmp	r5, #0
 800bc70:	d07f      	beq.n	800bd72 <_dtoa_r+0x20a>
 800bc72:	ee18 3a90 	vmov	r3, s17
 800bc76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bc7e:	ec51 0b18 	vmov	r0, r1, d8
 800bc82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bc8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bc8e:	4619      	mov	r1, r3
 800bc90:	2200      	movs	r2, #0
 800bc92:	4b75      	ldr	r3, [pc, #468]	; (800be68 <_dtoa_r+0x300>)
 800bc94:	f7f4 faf8 	bl	8000288 <__aeabi_dsub>
 800bc98:	a367      	add	r3, pc, #412	; (adr r3, 800be38 <_dtoa_r+0x2d0>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f7f4 fcab 	bl	80005f8 <__aeabi_dmul>
 800bca2:	a367      	add	r3, pc, #412	; (adr r3, 800be40 <_dtoa_r+0x2d8>)
 800bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca8:	f7f4 faf0 	bl	800028c <__adddf3>
 800bcac:	4606      	mov	r6, r0
 800bcae:	4628      	mov	r0, r5
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	f7f4 fc37 	bl	8000524 <__aeabi_i2d>
 800bcb6:	a364      	add	r3, pc, #400	; (adr r3, 800be48 <_dtoa_r+0x2e0>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	f7f4 fc9c 	bl	80005f8 <__aeabi_dmul>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	4639      	mov	r1, r7
 800bcc8:	f7f4 fae0 	bl	800028c <__adddf3>
 800bccc:	4606      	mov	r6, r0
 800bcce:	460f      	mov	r7, r1
 800bcd0:	f7f4 ff42 	bl	8000b58 <__aeabi_d2iz>
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4683      	mov	fp, r0
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4630      	mov	r0, r6
 800bcdc:	4639      	mov	r1, r7
 800bcde:	f7f4 fefd 	bl	8000adc <__aeabi_dcmplt>
 800bce2:	b148      	cbz	r0, 800bcf8 <_dtoa_r+0x190>
 800bce4:	4658      	mov	r0, fp
 800bce6:	f7f4 fc1d 	bl	8000524 <__aeabi_i2d>
 800bcea:	4632      	mov	r2, r6
 800bcec:	463b      	mov	r3, r7
 800bcee:	f7f4 feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcf2:	b908      	cbnz	r0, 800bcf8 <_dtoa_r+0x190>
 800bcf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcf8:	f1bb 0f16 	cmp.w	fp, #22
 800bcfc:	d857      	bhi.n	800bdae <_dtoa_r+0x246>
 800bcfe:	4b5b      	ldr	r3, [pc, #364]	; (800be6c <_dtoa_r+0x304>)
 800bd00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	ec51 0b18 	vmov	r0, r1, d8
 800bd0c:	f7f4 fee6 	bl	8000adc <__aeabi_dcmplt>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d04e      	beq.n	800bdb2 <_dtoa_r+0x24a>
 800bd14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd18:	2300      	movs	r3, #0
 800bd1a:	930c      	str	r3, [sp, #48]	; 0x30
 800bd1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd1e:	1b5b      	subs	r3, r3, r5
 800bd20:	1e5a      	subs	r2, r3, #1
 800bd22:	bf45      	ittet	mi
 800bd24:	f1c3 0301 	rsbmi	r3, r3, #1
 800bd28:	9305      	strmi	r3, [sp, #20]
 800bd2a:	2300      	movpl	r3, #0
 800bd2c:	2300      	movmi	r3, #0
 800bd2e:	9206      	str	r2, [sp, #24]
 800bd30:	bf54      	ite	pl
 800bd32:	9305      	strpl	r3, [sp, #20]
 800bd34:	9306      	strmi	r3, [sp, #24]
 800bd36:	f1bb 0f00 	cmp.w	fp, #0
 800bd3a:	db3c      	blt.n	800bdb6 <_dtoa_r+0x24e>
 800bd3c:	9b06      	ldr	r3, [sp, #24]
 800bd3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bd42:	445b      	add	r3, fp
 800bd44:	9306      	str	r3, [sp, #24]
 800bd46:	2300      	movs	r3, #0
 800bd48:	9308      	str	r3, [sp, #32]
 800bd4a:	9b07      	ldr	r3, [sp, #28]
 800bd4c:	2b09      	cmp	r3, #9
 800bd4e:	d868      	bhi.n	800be22 <_dtoa_r+0x2ba>
 800bd50:	2b05      	cmp	r3, #5
 800bd52:	bfc4      	itt	gt
 800bd54:	3b04      	subgt	r3, #4
 800bd56:	9307      	strgt	r3, [sp, #28]
 800bd58:	9b07      	ldr	r3, [sp, #28]
 800bd5a:	f1a3 0302 	sub.w	r3, r3, #2
 800bd5e:	bfcc      	ite	gt
 800bd60:	2500      	movgt	r5, #0
 800bd62:	2501      	movle	r5, #1
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	f200 8085 	bhi.w	800be74 <_dtoa_r+0x30c>
 800bd6a:	e8df f003 	tbb	[pc, r3]
 800bd6e:	3b2e      	.short	0x3b2e
 800bd70:	5839      	.short	0x5839
 800bd72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bd76:	441d      	add	r5, r3
 800bd78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bd7c:	2b20      	cmp	r3, #32
 800bd7e:	bfc1      	itttt	gt
 800bd80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd84:	fa08 f803 	lslgt.w	r8, r8, r3
 800bd88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bd8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bd90:	bfd6      	itet	le
 800bd92:	f1c3 0320 	rsble	r3, r3, #32
 800bd96:	ea48 0003 	orrgt.w	r0, r8, r3
 800bd9a:	fa06 f003 	lslle.w	r0, r6, r3
 800bd9e:	f7f4 fbb1 	bl	8000504 <__aeabi_ui2d>
 800bda2:	2201      	movs	r2, #1
 800bda4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bda8:	3d01      	subs	r5, #1
 800bdaa:	920e      	str	r2, [sp, #56]	; 0x38
 800bdac:	e76f      	b.n	800bc8e <_dtoa_r+0x126>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e7b3      	b.n	800bd1a <_dtoa_r+0x1b2>
 800bdb2:	900c      	str	r0, [sp, #48]	; 0x30
 800bdb4:	e7b2      	b.n	800bd1c <_dtoa_r+0x1b4>
 800bdb6:	9b05      	ldr	r3, [sp, #20]
 800bdb8:	eba3 030b 	sub.w	r3, r3, fp
 800bdbc:	9305      	str	r3, [sp, #20]
 800bdbe:	f1cb 0300 	rsb	r3, fp, #0
 800bdc2:	9308      	str	r3, [sp, #32]
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdc8:	e7bf      	b.n	800bd4a <_dtoa_r+0x1e2>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	dc52      	bgt.n	800be7a <_dtoa_r+0x312>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	9301      	str	r3, [sp, #4]
 800bdd8:	9304      	str	r3, [sp, #16]
 800bdda:	461a      	mov	r2, r3
 800bddc:	920a      	str	r2, [sp, #40]	; 0x28
 800bdde:	e00b      	b.n	800bdf8 <_dtoa_r+0x290>
 800bde0:	2301      	movs	r3, #1
 800bde2:	e7f3      	b.n	800bdcc <_dtoa_r+0x264>
 800bde4:	2300      	movs	r3, #0
 800bde6:	9309      	str	r3, [sp, #36]	; 0x24
 800bde8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdea:	445b      	add	r3, fp
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	9304      	str	r3, [sp, #16]
 800bdf4:	bfb8      	it	lt
 800bdf6:	2301      	movlt	r3, #1
 800bdf8:	69e0      	ldr	r0, [r4, #28]
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	2204      	movs	r2, #4
 800bdfe:	f102 0614 	add.w	r6, r2, #20
 800be02:	429e      	cmp	r6, r3
 800be04:	d93d      	bls.n	800be82 <_dtoa_r+0x31a>
 800be06:	6041      	str	r1, [r0, #4]
 800be08:	4620      	mov	r0, r4
 800be0a:	f000 fceb 	bl	800c7e4 <_Balloc>
 800be0e:	9000      	str	r0, [sp, #0]
 800be10:	2800      	cmp	r0, #0
 800be12:	d139      	bne.n	800be88 <_dtoa_r+0x320>
 800be14:	4b16      	ldr	r3, [pc, #88]	; (800be70 <_dtoa_r+0x308>)
 800be16:	4602      	mov	r2, r0
 800be18:	f240 11af 	movw	r1, #431	; 0x1af
 800be1c:	e6bd      	b.n	800bb9a <_dtoa_r+0x32>
 800be1e:	2301      	movs	r3, #1
 800be20:	e7e1      	b.n	800bde6 <_dtoa_r+0x27e>
 800be22:	2501      	movs	r5, #1
 800be24:	2300      	movs	r3, #0
 800be26:	9307      	str	r3, [sp, #28]
 800be28:	9509      	str	r5, [sp, #36]	; 0x24
 800be2a:	f04f 33ff 	mov.w	r3, #4294967295
 800be2e:	9301      	str	r3, [sp, #4]
 800be30:	9304      	str	r3, [sp, #16]
 800be32:	2200      	movs	r2, #0
 800be34:	2312      	movs	r3, #18
 800be36:	e7d1      	b.n	800bddc <_dtoa_r+0x274>
 800be38:	636f4361 	.word	0x636f4361
 800be3c:	3fd287a7 	.word	0x3fd287a7
 800be40:	8b60c8b3 	.word	0x8b60c8b3
 800be44:	3fc68a28 	.word	0x3fc68a28
 800be48:	509f79fb 	.word	0x509f79fb
 800be4c:	3fd34413 	.word	0x3fd34413
 800be50:	0800db1d 	.word	0x0800db1d
 800be54:	0800db34 	.word	0x0800db34
 800be58:	7ff00000 	.word	0x7ff00000
 800be5c:	0800db19 	.word	0x0800db19
 800be60:	0800db10 	.word	0x0800db10
 800be64:	0800daed 	.word	0x0800daed
 800be68:	3ff80000 	.word	0x3ff80000
 800be6c:	0800dc20 	.word	0x0800dc20
 800be70:	0800db8c 	.word	0x0800db8c
 800be74:	2301      	movs	r3, #1
 800be76:	9309      	str	r3, [sp, #36]	; 0x24
 800be78:	e7d7      	b.n	800be2a <_dtoa_r+0x2c2>
 800be7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be7c:	9301      	str	r3, [sp, #4]
 800be7e:	9304      	str	r3, [sp, #16]
 800be80:	e7ba      	b.n	800bdf8 <_dtoa_r+0x290>
 800be82:	3101      	adds	r1, #1
 800be84:	0052      	lsls	r2, r2, #1
 800be86:	e7ba      	b.n	800bdfe <_dtoa_r+0x296>
 800be88:	69e3      	ldr	r3, [r4, #28]
 800be8a:	9a00      	ldr	r2, [sp, #0]
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	9b04      	ldr	r3, [sp, #16]
 800be90:	2b0e      	cmp	r3, #14
 800be92:	f200 80a8 	bhi.w	800bfe6 <_dtoa_r+0x47e>
 800be96:	2d00      	cmp	r5, #0
 800be98:	f000 80a5 	beq.w	800bfe6 <_dtoa_r+0x47e>
 800be9c:	f1bb 0f00 	cmp.w	fp, #0
 800bea0:	dd38      	ble.n	800bf14 <_dtoa_r+0x3ac>
 800bea2:	4bc0      	ldr	r3, [pc, #768]	; (800c1a4 <_dtoa_r+0x63c>)
 800bea4:	f00b 020f 	and.w	r2, fp, #15
 800bea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800beb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800beb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800beb8:	d019      	beq.n	800beee <_dtoa_r+0x386>
 800beba:	4bbb      	ldr	r3, [pc, #748]	; (800c1a8 <_dtoa_r+0x640>)
 800bebc:	ec51 0b18 	vmov	r0, r1, d8
 800bec0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bec4:	f7f4 fcc2 	bl	800084c <__aeabi_ddiv>
 800bec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800becc:	f008 080f 	and.w	r8, r8, #15
 800bed0:	2503      	movs	r5, #3
 800bed2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c1a8 <_dtoa_r+0x640>
 800bed6:	f1b8 0f00 	cmp.w	r8, #0
 800beda:	d10a      	bne.n	800bef2 <_dtoa_r+0x38a>
 800bedc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bee0:	4632      	mov	r2, r6
 800bee2:	463b      	mov	r3, r7
 800bee4:	f7f4 fcb2 	bl	800084c <__aeabi_ddiv>
 800bee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beec:	e02b      	b.n	800bf46 <_dtoa_r+0x3de>
 800beee:	2502      	movs	r5, #2
 800bef0:	e7ef      	b.n	800bed2 <_dtoa_r+0x36a>
 800bef2:	f018 0f01 	tst.w	r8, #1
 800bef6:	d008      	beq.n	800bf0a <_dtoa_r+0x3a2>
 800bef8:	4630      	mov	r0, r6
 800befa:	4639      	mov	r1, r7
 800befc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bf00:	f7f4 fb7a 	bl	80005f8 <__aeabi_dmul>
 800bf04:	3501      	adds	r5, #1
 800bf06:	4606      	mov	r6, r0
 800bf08:	460f      	mov	r7, r1
 800bf0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf0e:	f109 0908 	add.w	r9, r9, #8
 800bf12:	e7e0      	b.n	800bed6 <_dtoa_r+0x36e>
 800bf14:	f000 809f 	beq.w	800c056 <_dtoa_r+0x4ee>
 800bf18:	f1cb 0600 	rsb	r6, fp, #0
 800bf1c:	4ba1      	ldr	r3, [pc, #644]	; (800c1a4 <_dtoa_r+0x63c>)
 800bf1e:	4fa2      	ldr	r7, [pc, #648]	; (800c1a8 <_dtoa_r+0x640>)
 800bf20:	f006 020f 	and.w	r2, r6, #15
 800bf24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	ec51 0b18 	vmov	r0, r1, d8
 800bf30:	f7f4 fb62 	bl	80005f8 <__aeabi_dmul>
 800bf34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf38:	1136      	asrs	r6, r6, #4
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2502      	movs	r5, #2
 800bf3e:	2e00      	cmp	r6, #0
 800bf40:	d17e      	bne.n	800c040 <_dtoa_r+0x4d8>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1d0      	bne.n	800bee8 <_dtoa_r+0x380>
 800bf46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f000 8084 	beq.w	800c05a <_dtoa_r+0x4f2>
 800bf52:	4b96      	ldr	r3, [pc, #600]	; (800c1ac <_dtoa_r+0x644>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	4640      	mov	r0, r8
 800bf58:	4649      	mov	r1, r9
 800bf5a:	f7f4 fdbf 	bl	8000adc <__aeabi_dcmplt>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d07b      	beq.n	800c05a <_dtoa_r+0x4f2>
 800bf62:	9b04      	ldr	r3, [sp, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d078      	beq.n	800c05a <_dtoa_r+0x4f2>
 800bf68:	9b01      	ldr	r3, [sp, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	dd39      	ble.n	800bfe2 <_dtoa_r+0x47a>
 800bf6e:	4b90      	ldr	r3, [pc, #576]	; (800c1b0 <_dtoa_r+0x648>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	4640      	mov	r0, r8
 800bf74:	4649      	mov	r1, r9
 800bf76:	f7f4 fb3f 	bl	80005f8 <__aeabi_dmul>
 800bf7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf7e:	9e01      	ldr	r6, [sp, #4]
 800bf80:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bf84:	3501      	adds	r5, #1
 800bf86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f7f4 faca 	bl	8000524 <__aeabi_i2d>
 800bf90:	4642      	mov	r2, r8
 800bf92:	464b      	mov	r3, r9
 800bf94:	f7f4 fb30 	bl	80005f8 <__aeabi_dmul>
 800bf98:	4b86      	ldr	r3, [pc, #536]	; (800c1b4 <_dtoa_r+0x64c>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f7f4 f976 	bl	800028c <__adddf3>
 800bfa0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bfa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfa8:	9303      	str	r3, [sp, #12]
 800bfaa:	2e00      	cmp	r6, #0
 800bfac:	d158      	bne.n	800c060 <_dtoa_r+0x4f8>
 800bfae:	4b82      	ldr	r3, [pc, #520]	; (800c1b8 <_dtoa_r+0x650>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	4649      	mov	r1, r9
 800bfb6:	f7f4 f967 	bl	8000288 <__aeabi_dsub>
 800bfba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfbe:	4680      	mov	r8, r0
 800bfc0:	4689      	mov	r9, r1
 800bfc2:	f7f4 fda9 	bl	8000b18 <__aeabi_dcmpgt>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	f040 8296 	bne.w	800c4f8 <_dtoa_r+0x990>
 800bfcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bfd0:	4640      	mov	r0, r8
 800bfd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	f7f4 fd80 	bl	8000adc <__aeabi_dcmplt>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	f040 8289 	bne.w	800c4f4 <_dtoa_r+0x98c>
 800bfe2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bfe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f2c0 814e 	blt.w	800c28a <_dtoa_r+0x722>
 800bfee:	f1bb 0f0e 	cmp.w	fp, #14
 800bff2:	f300 814a 	bgt.w	800c28a <_dtoa_r+0x722>
 800bff6:	4b6b      	ldr	r3, [pc, #428]	; (800c1a4 <_dtoa_r+0x63c>)
 800bff8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c002:	2b00      	cmp	r3, #0
 800c004:	f280 80dc 	bge.w	800c1c0 <_dtoa_r+0x658>
 800c008:	9b04      	ldr	r3, [sp, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f300 80d8 	bgt.w	800c1c0 <_dtoa_r+0x658>
 800c010:	f040 826f 	bne.w	800c4f2 <_dtoa_r+0x98a>
 800c014:	4b68      	ldr	r3, [pc, #416]	; (800c1b8 <_dtoa_r+0x650>)
 800c016:	2200      	movs	r2, #0
 800c018:	4640      	mov	r0, r8
 800c01a:	4649      	mov	r1, r9
 800c01c:	f7f4 faec 	bl	80005f8 <__aeabi_dmul>
 800c020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c024:	f7f4 fd6e 	bl	8000b04 <__aeabi_dcmpge>
 800c028:	9e04      	ldr	r6, [sp, #16]
 800c02a:	4637      	mov	r7, r6
 800c02c:	2800      	cmp	r0, #0
 800c02e:	f040 8245 	bne.w	800c4bc <_dtoa_r+0x954>
 800c032:	9d00      	ldr	r5, [sp, #0]
 800c034:	2331      	movs	r3, #49	; 0x31
 800c036:	f805 3b01 	strb.w	r3, [r5], #1
 800c03a:	f10b 0b01 	add.w	fp, fp, #1
 800c03e:	e241      	b.n	800c4c4 <_dtoa_r+0x95c>
 800c040:	07f2      	lsls	r2, r6, #31
 800c042:	d505      	bpl.n	800c050 <_dtoa_r+0x4e8>
 800c044:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c048:	f7f4 fad6 	bl	80005f8 <__aeabi_dmul>
 800c04c:	3501      	adds	r5, #1
 800c04e:	2301      	movs	r3, #1
 800c050:	1076      	asrs	r6, r6, #1
 800c052:	3708      	adds	r7, #8
 800c054:	e773      	b.n	800bf3e <_dtoa_r+0x3d6>
 800c056:	2502      	movs	r5, #2
 800c058:	e775      	b.n	800bf46 <_dtoa_r+0x3de>
 800c05a:	9e04      	ldr	r6, [sp, #16]
 800c05c:	465f      	mov	r7, fp
 800c05e:	e792      	b.n	800bf86 <_dtoa_r+0x41e>
 800c060:	9900      	ldr	r1, [sp, #0]
 800c062:	4b50      	ldr	r3, [pc, #320]	; (800c1a4 <_dtoa_r+0x63c>)
 800c064:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c068:	4431      	add	r1, r6
 800c06a:	9102      	str	r1, [sp, #8]
 800c06c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c06e:	eeb0 9a47 	vmov.f32	s18, s14
 800c072:	eef0 9a67 	vmov.f32	s19, s15
 800c076:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c07a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c07e:	2900      	cmp	r1, #0
 800c080:	d044      	beq.n	800c10c <_dtoa_r+0x5a4>
 800c082:	494e      	ldr	r1, [pc, #312]	; (800c1bc <_dtoa_r+0x654>)
 800c084:	2000      	movs	r0, #0
 800c086:	f7f4 fbe1 	bl	800084c <__aeabi_ddiv>
 800c08a:	ec53 2b19 	vmov	r2, r3, d9
 800c08e:	f7f4 f8fb 	bl	8000288 <__aeabi_dsub>
 800c092:	9d00      	ldr	r5, [sp, #0]
 800c094:	ec41 0b19 	vmov	d9, r0, r1
 800c098:	4649      	mov	r1, r9
 800c09a:	4640      	mov	r0, r8
 800c09c:	f7f4 fd5c 	bl	8000b58 <__aeabi_d2iz>
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	f7f4 fa3f 	bl	8000524 <__aeabi_i2d>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	f7f4 f8eb 	bl	8000288 <__aeabi_dsub>
 800c0b2:	3630      	adds	r6, #48	; 0x30
 800c0b4:	f805 6b01 	strb.w	r6, [r5], #1
 800c0b8:	ec53 2b19 	vmov	r2, r3, d9
 800c0bc:	4680      	mov	r8, r0
 800c0be:	4689      	mov	r9, r1
 800c0c0:	f7f4 fd0c 	bl	8000adc <__aeabi_dcmplt>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d164      	bne.n	800c192 <_dtoa_r+0x62a>
 800c0c8:	4642      	mov	r2, r8
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	4937      	ldr	r1, [pc, #220]	; (800c1ac <_dtoa_r+0x644>)
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	f7f4 f8da 	bl	8000288 <__aeabi_dsub>
 800c0d4:	ec53 2b19 	vmov	r2, r3, d9
 800c0d8:	f7f4 fd00 	bl	8000adc <__aeabi_dcmplt>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	f040 80b6 	bne.w	800c24e <_dtoa_r+0x6e6>
 800c0e2:	9b02      	ldr	r3, [sp, #8]
 800c0e4:	429d      	cmp	r5, r3
 800c0e6:	f43f af7c 	beq.w	800bfe2 <_dtoa_r+0x47a>
 800c0ea:	4b31      	ldr	r3, [pc, #196]	; (800c1b0 <_dtoa_r+0x648>)
 800c0ec:	ec51 0b19 	vmov	r0, r1, d9
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f7f4 fa81 	bl	80005f8 <__aeabi_dmul>
 800c0f6:	4b2e      	ldr	r3, [pc, #184]	; (800c1b0 <_dtoa_r+0x648>)
 800c0f8:	ec41 0b19 	vmov	d9, r0, r1
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	4640      	mov	r0, r8
 800c100:	4649      	mov	r1, r9
 800c102:	f7f4 fa79 	bl	80005f8 <__aeabi_dmul>
 800c106:	4680      	mov	r8, r0
 800c108:	4689      	mov	r9, r1
 800c10a:	e7c5      	b.n	800c098 <_dtoa_r+0x530>
 800c10c:	ec51 0b17 	vmov	r0, r1, d7
 800c110:	f7f4 fa72 	bl	80005f8 <__aeabi_dmul>
 800c114:	9b02      	ldr	r3, [sp, #8]
 800c116:	9d00      	ldr	r5, [sp, #0]
 800c118:	930f      	str	r3, [sp, #60]	; 0x3c
 800c11a:	ec41 0b19 	vmov	d9, r0, r1
 800c11e:	4649      	mov	r1, r9
 800c120:	4640      	mov	r0, r8
 800c122:	f7f4 fd19 	bl	8000b58 <__aeabi_d2iz>
 800c126:	4606      	mov	r6, r0
 800c128:	f7f4 f9fc 	bl	8000524 <__aeabi_i2d>
 800c12c:	3630      	adds	r6, #48	; 0x30
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4640      	mov	r0, r8
 800c134:	4649      	mov	r1, r9
 800c136:	f7f4 f8a7 	bl	8000288 <__aeabi_dsub>
 800c13a:	f805 6b01 	strb.w	r6, [r5], #1
 800c13e:	9b02      	ldr	r3, [sp, #8]
 800c140:	429d      	cmp	r5, r3
 800c142:	4680      	mov	r8, r0
 800c144:	4689      	mov	r9, r1
 800c146:	f04f 0200 	mov.w	r2, #0
 800c14a:	d124      	bne.n	800c196 <_dtoa_r+0x62e>
 800c14c:	4b1b      	ldr	r3, [pc, #108]	; (800c1bc <_dtoa_r+0x654>)
 800c14e:	ec51 0b19 	vmov	r0, r1, d9
 800c152:	f7f4 f89b 	bl	800028c <__adddf3>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4640      	mov	r0, r8
 800c15c:	4649      	mov	r1, r9
 800c15e:	f7f4 fcdb 	bl	8000b18 <__aeabi_dcmpgt>
 800c162:	2800      	cmp	r0, #0
 800c164:	d173      	bne.n	800c24e <_dtoa_r+0x6e6>
 800c166:	ec53 2b19 	vmov	r2, r3, d9
 800c16a:	4914      	ldr	r1, [pc, #80]	; (800c1bc <_dtoa_r+0x654>)
 800c16c:	2000      	movs	r0, #0
 800c16e:	f7f4 f88b 	bl	8000288 <__aeabi_dsub>
 800c172:	4602      	mov	r2, r0
 800c174:	460b      	mov	r3, r1
 800c176:	4640      	mov	r0, r8
 800c178:	4649      	mov	r1, r9
 800c17a:	f7f4 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800c17e:	2800      	cmp	r0, #0
 800c180:	f43f af2f 	beq.w	800bfe2 <_dtoa_r+0x47a>
 800c184:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c186:	1e6b      	subs	r3, r5, #1
 800c188:	930f      	str	r3, [sp, #60]	; 0x3c
 800c18a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c18e:	2b30      	cmp	r3, #48	; 0x30
 800c190:	d0f8      	beq.n	800c184 <_dtoa_r+0x61c>
 800c192:	46bb      	mov	fp, r7
 800c194:	e04a      	b.n	800c22c <_dtoa_r+0x6c4>
 800c196:	4b06      	ldr	r3, [pc, #24]	; (800c1b0 <_dtoa_r+0x648>)
 800c198:	f7f4 fa2e 	bl	80005f8 <__aeabi_dmul>
 800c19c:	4680      	mov	r8, r0
 800c19e:	4689      	mov	r9, r1
 800c1a0:	e7bd      	b.n	800c11e <_dtoa_r+0x5b6>
 800c1a2:	bf00      	nop
 800c1a4:	0800dc20 	.word	0x0800dc20
 800c1a8:	0800dbf8 	.word	0x0800dbf8
 800c1ac:	3ff00000 	.word	0x3ff00000
 800c1b0:	40240000 	.word	0x40240000
 800c1b4:	401c0000 	.word	0x401c0000
 800c1b8:	40140000 	.word	0x40140000
 800c1bc:	3fe00000 	.word	0x3fe00000
 800c1c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c1c4:	9d00      	ldr	r5, [sp, #0]
 800c1c6:	4642      	mov	r2, r8
 800c1c8:	464b      	mov	r3, r9
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	4639      	mov	r1, r7
 800c1ce:	f7f4 fb3d 	bl	800084c <__aeabi_ddiv>
 800c1d2:	f7f4 fcc1 	bl	8000b58 <__aeabi_d2iz>
 800c1d6:	9001      	str	r0, [sp, #4]
 800c1d8:	f7f4 f9a4 	bl	8000524 <__aeabi_i2d>
 800c1dc:	4642      	mov	r2, r8
 800c1de:	464b      	mov	r3, r9
 800c1e0:	f7f4 fa0a 	bl	80005f8 <__aeabi_dmul>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	4639      	mov	r1, r7
 800c1ec:	f7f4 f84c 	bl	8000288 <__aeabi_dsub>
 800c1f0:	9e01      	ldr	r6, [sp, #4]
 800c1f2:	9f04      	ldr	r7, [sp, #16]
 800c1f4:	3630      	adds	r6, #48	; 0x30
 800c1f6:	f805 6b01 	strb.w	r6, [r5], #1
 800c1fa:	9e00      	ldr	r6, [sp, #0]
 800c1fc:	1bae      	subs	r6, r5, r6
 800c1fe:	42b7      	cmp	r7, r6
 800c200:	4602      	mov	r2, r0
 800c202:	460b      	mov	r3, r1
 800c204:	d134      	bne.n	800c270 <_dtoa_r+0x708>
 800c206:	f7f4 f841 	bl	800028c <__adddf3>
 800c20a:	4642      	mov	r2, r8
 800c20c:	464b      	mov	r3, r9
 800c20e:	4606      	mov	r6, r0
 800c210:	460f      	mov	r7, r1
 800c212:	f7f4 fc81 	bl	8000b18 <__aeabi_dcmpgt>
 800c216:	b9c8      	cbnz	r0, 800c24c <_dtoa_r+0x6e4>
 800c218:	4642      	mov	r2, r8
 800c21a:	464b      	mov	r3, r9
 800c21c:	4630      	mov	r0, r6
 800c21e:	4639      	mov	r1, r7
 800c220:	f7f4 fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 800c224:	b110      	cbz	r0, 800c22c <_dtoa_r+0x6c4>
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	07db      	lsls	r3, r3, #31
 800c22a:	d40f      	bmi.n	800c24c <_dtoa_r+0x6e4>
 800c22c:	4651      	mov	r1, sl
 800c22e:	4620      	mov	r0, r4
 800c230:	f000 fb18 	bl	800c864 <_Bfree>
 800c234:	2300      	movs	r3, #0
 800c236:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c238:	702b      	strb	r3, [r5, #0]
 800c23a:	f10b 0301 	add.w	r3, fp, #1
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c242:	2b00      	cmp	r3, #0
 800c244:	f43f ace2 	beq.w	800bc0c <_dtoa_r+0xa4>
 800c248:	601d      	str	r5, [r3, #0]
 800c24a:	e4df      	b.n	800bc0c <_dtoa_r+0xa4>
 800c24c:	465f      	mov	r7, fp
 800c24e:	462b      	mov	r3, r5
 800c250:	461d      	mov	r5, r3
 800c252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c256:	2a39      	cmp	r2, #57	; 0x39
 800c258:	d106      	bne.n	800c268 <_dtoa_r+0x700>
 800c25a:	9a00      	ldr	r2, [sp, #0]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d1f7      	bne.n	800c250 <_dtoa_r+0x6e8>
 800c260:	9900      	ldr	r1, [sp, #0]
 800c262:	2230      	movs	r2, #48	; 0x30
 800c264:	3701      	adds	r7, #1
 800c266:	700a      	strb	r2, [r1, #0]
 800c268:	781a      	ldrb	r2, [r3, #0]
 800c26a:	3201      	adds	r2, #1
 800c26c:	701a      	strb	r2, [r3, #0]
 800c26e:	e790      	b.n	800c192 <_dtoa_r+0x62a>
 800c270:	4ba3      	ldr	r3, [pc, #652]	; (800c500 <_dtoa_r+0x998>)
 800c272:	2200      	movs	r2, #0
 800c274:	f7f4 f9c0 	bl	80005f8 <__aeabi_dmul>
 800c278:	2200      	movs	r2, #0
 800c27a:	2300      	movs	r3, #0
 800c27c:	4606      	mov	r6, r0
 800c27e:	460f      	mov	r7, r1
 800c280:	f7f4 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 800c284:	2800      	cmp	r0, #0
 800c286:	d09e      	beq.n	800c1c6 <_dtoa_r+0x65e>
 800c288:	e7d0      	b.n	800c22c <_dtoa_r+0x6c4>
 800c28a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c28c:	2a00      	cmp	r2, #0
 800c28e:	f000 80ca 	beq.w	800c426 <_dtoa_r+0x8be>
 800c292:	9a07      	ldr	r2, [sp, #28]
 800c294:	2a01      	cmp	r2, #1
 800c296:	f300 80ad 	bgt.w	800c3f4 <_dtoa_r+0x88c>
 800c29a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c29c:	2a00      	cmp	r2, #0
 800c29e:	f000 80a5 	beq.w	800c3ec <_dtoa_r+0x884>
 800c2a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2a6:	9e08      	ldr	r6, [sp, #32]
 800c2a8:	9d05      	ldr	r5, [sp, #20]
 800c2aa:	9a05      	ldr	r2, [sp, #20]
 800c2ac:	441a      	add	r2, r3
 800c2ae:	9205      	str	r2, [sp, #20]
 800c2b0:	9a06      	ldr	r2, [sp, #24]
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	441a      	add	r2, r3
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	9206      	str	r2, [sp, #24]
 800c2ba:	f000 fb89 	bl	800c9d0 <__i2b>
 800c2be:	4607      	mov	r7, r0
 800c2c0:	b165      	cbz	r5, 800c2dc <_dtoa_r+0x774>
 800c2c2:	9b06      	ldr	r3, [sp, #24]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	dd09      	ble.n	800c2dc <_dtoa_r+0x774>
 800c2c8:	42ab      	cmp	r3, r5
 800c2ca:	9a05      	ldr	r2, [sp, #20]
 800c2cc:	bfa8      	it	ge
 800c2ce:	462b      	movge	r3, r5
 800c2d0:	1ad2      	subs	r2, r2, r3
 800c2d2:	9205      	str	r2, [sp, #20]
 800c2d4:	9a06      	ldr	r2, [sp, #24]
 800c2d6:	1aed      	subs	r5, r5, r3
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	9306      	str	r3, [sp, #24]
 800c2dc:	9b08      	ldr	r3, [sp, #32]
 800c2de:	b1f3      	cbz	r3, 800c31e <_dtoa_r+0x7b6>
 800c2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 80a3 	beq.w	800c42e <_dtoa_r+0x8c6>
 800c2e8:	2e00      	cmp	r6, #0
 800c2ea:	dd10      	ble.n	800c30e <_dtoa_r+0x7a6>
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	4632      	mov	r2, r6
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f000 fc2d 	bl	800cb50 <__pow5mult>
 800c2f6:	4652      	mov	r2, sl
 800c2f8:	4601      	mov	r1, r0
 800c2fa:	4607      	mov	r7, r0
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f000 fb7d 	bl	800c9fc <__multiply>
 800c302:	4651      	mov	r1, sl
 800c304:	4680      	mov	r8, r0
 800c306:	4620      	mov	r0, r4
 800c308:	f000 faac 	bl	800c864 <_Bfree>
 800c30c:	46c2      	mov	sl, r8
 800c30e:	9b08      	ldr	r3, [sp, #32]
 800c310:	1b9a      	subs	r2, r3, r6
 800c312:	d004      	beq.n	800c31e <_dtoa_r+0x7b6>
 800c314:	4651      	mov	r1, sl
 800c316:	4620      	mov	r0, r4
 800c318:	f000 fc1a 	bl	800cb50 <__pow5mult>
 800c31c:	4682      	mov	sl, r0
 800c31e:	2101      	movs	r1, #1
 800c320:	4620      	mov	r0, r4
 800c322:	f000 fb55 	bl	800c9d0 <__i2b>
 800c326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	4606      	mov	r6, r0
 800c32c:	f340 8081 	ble.w	800c432 <_dtoa_r+0x8ca>
 800c330:	461a      	mov	r2, r3
 800c332:	4601      	mov	r1, r0
 800c334:	4620      	mov	r0, r4
 800c336:	f000 fc0b 	bl	800cb50 <__pow5mult>
 800c33a:	9b07      	ldr	r3, [sp, #28]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	4606      	mov	r6, r0
 800c340:	dd7a      	ble.n	800c438 <_dtoa_r+0x8d0>
 800c342:	f04f 0800 	mov.w	r8, #0
 800c346:	6933      	ldr	r3, [r6, #16]
 800c348:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c34c:	6918      	ldr	r0, [r3, #16]
 800c34e:	f000 faf1 	bl	800c934 <__hi0bits>
 800c352:	f1c0 0020 	rsb	r0, r0, #32
 800c356:	9b06      	ldr	r3, [sp, #24]
 800c358:	4418      	add	r0, r3
 800c35a:	f010 001f 	ands.w	r0, r0, #31
 800c35e:	f000 8094 	beq.w	800c48a <_dtoa_r+0x922>
 800c362:	f1c0 0320 	rsb	r3, r0, #32
 800c366:	2b04      	cmp	r3, #4
 800c368:	f340 8085 	ble.w	800c476 <_dtoa_r+0x90e>
 800c36c:	9b05      	ldr	r3, [sp, #20]
 800c36e:	f1c0 001c 	rsb	r0, r0, #28
 800c372:	4403      	add	r3, r0
 800c374:	9305      	str	r3, [sp, #20]
 800c376:	9b06      	ldr	r3, [sp, #24]
 800c378:	4403      	add	r3, r0
 800c37a:	4405      	add	r5, r0
 800c37c:	9306      	str	r3, [sp, #24]
 800c37e:	9b05      	ldr	r3, [sp, #20]
 800c380:	2b00      	cmp	r3, #0
 800c382:	dd05      	ble.n	800c390 <_dtoa_r+0x828>
 800c384:	4651      	mov	r1, sl
 800c386:	461a      	mov	r2, r3
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 fc3b 	bl	800cc04 <__lshift>
 800c38e:	4682      	mov	sl, r0
 800c390:	9b06      	ldr	r3, [sp, #24]
 800c392:	2b00      	cmp	r3, #0
 800c394:	dd05      	ble.n	800c3a2 <_dtoa_r+0x83a>
 800c396:	4631      	mov	r1, r6
 800c398:	461a      	mov	r2, r3
 800c39a:	4620      	mov	r0, r4
 800c39c:	f000 fc32 	bl	800cc04 <__lshift>
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d072      	beq.n	800c48e <_dtoa_r+0x926>
 800c3a8:	4631      	mov	r1, r6
 800c3aa:	4650      	mov	r0, sl
 800c3ac:	f000 fc96 	bl	800ccdc <__mcmp>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	da6c      	bge.n	800c48e <_dtoa_r+0x926>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	4651      	mov	r1, sl
 800c3b8:	220a      	movs	r2, #10
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 fa74 	bl	800c8a8 <__multadd>
 800c3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3c6:	4682      	mov	sl, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f000 81b0 	beq.w	800c72e <_dtoa_r+0xbc6>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	220a      	movs	r2, #10
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	f000 fa67 	bl	800c8a8 <__multadd>
 800c3da:	9b01      	ldr	r3, [sp, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	4607      	mov	r7, r0
 800c3e0:	f300 8096 	bgt.w	800c510 <_dtoa_r+0x9a8>
 800c3e4:	9b07      	ldr	r3, [sp, #28]
 800c3e6:	2b02      	cmp	r3, #2
 800c3e8:	dc59      	bgt.n	800c49e <_dtoa_r+0x936>
 800c3ea:	e091      	b.n	800c510 <_dtoa_r+0x9a8>
 800c3ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c3f2:	e758      	b.n	800c2a6 <_dtoa_r+0x73e>
 800c3f4:	9b04      	ldr	r3, [sp, #16]
 800c3f6:	1e5e      	subs	r6, r3, #1
 800c3f8:	9b08      	ldr	r3, [sp, #32]
 800c3fa:	42b3      	cmp	r3, r6
 800c3fc:	bfbf      	itttt	lt
 800c3fe:	9b08      	ldrlt	r3, [sp, #32]
 800c400:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c402:	9608      	strlt	r6, [sp, #32]
 800c404:	1af3      	sublt	r3, r6, r3
 800c406:	bfb4      	ite	lt
 800c408:	18d2      	addlt	r2, r2, r3
 800c40a:	1b9e      	subge	r6, r3, r6
 800c40c:	9b04      	ldr	r3, [sp, #16]
 800c40e:	bfbc      	itt	lt
 800c410:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c412:	2600      	movlt	r6, #0
 800c414:	2b00      	cmp	r3, #0
 800c416:	bfb7      	itett	lt
 800c418:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c41c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c420:	1a9d      	sublt	r5, r3, r2
 800c422:	2300      	movlt	r3, #0
 800c424:	e741      	b.n	800c2aa <_dtoa_r+0x742>
 800c426:	9e08      	ldr	r6, [sp, #32]
 800c428:	9d05      	ldr	r5, [sp, #20]
 800c42a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c42c:	e748      	b.n	800c2c0 <_dtoa_r+0x758>
 800c42e:	9a08      	ldr	r2, [sp, #32]
 800c430:	e770      	b.n	800c314 <_dtoa_r+0x7ac>
 800c432:	9b07      	ldr	r3, [sp, #28]
 800c434:	2b01      	cmp	r3, #1
 800c436:	dc19      	bgt.n	800c46c <_dtoa_r+0x904>
 800c438:	9b02      	ldr	r3, [sp, #8]
 800c43a:	b9bb      	cbnz	r3, 800c46c <_dtoa_r+0x904>
 800c43c:	9b03      	ldr	r3, [sp, #12]
 800c43e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c442:	b99b      	cbnz	r3, 800c46c <_dtoa_r+0x904>
 800c444:	9b03      	ldr	r3, [sp, #12]
 800c446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c44a:	0d1b      	lsrs	r3, r3, #20
 800c44c:	051b      	lsls	r3, r3, #20
 800c44e:	b183      	cbz	r3, 800c472 <_dtoa_r+0x90a>
 800c450:	9b05      	ldr	r3, [sp, #20]
 800c452:	3301      	adds	r3, #1
 800c454:	9305      	str	r3, [sp, #20]
 800c456:	9b06      	ldr	r3, [sp, #24]
 800c458:	3301      	adds	r3, #1
 800c45a:	9306      	str	r3, [sp, #24]
 800c45c:	f04f 0801 	mov.w	r8, #1
 800c460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c462:	2b00      	cmp	r3, #0
 800c464:	f47f af6f 	bne.w	800c346 <_dtoa_r+0x7de>
 800c468:	2001      	movs	r0, #1
 800c46a:	e774      	b.n	800c356 <_dtoa_r+0x7ee>
 800c46c:	f04f 0800 	mov.w	r8, #0
 800c470:	e7f6      	b.n	800c460 <_dtoa_r+0x8f8>
 800c472:	4698      	mov	r8, r3
 800c474:	e7f4      	b.n	800c460 <_dtoa_r+0x8f8>
 800c476:	d082      	beq.n	800c37e <_dtoa_r+0x816>
 800c478:	9a05      	ldr	r2, [sp, #20]
 800c47a:	331c      	adds	r3, #28
 800c47c:	441a      	add	r2, r3
 800c47e:	9205      	str	r2, [sp, #20]
 800c480:	9a06      	ldr	r2, [sp, #24]
 800c482:	441a      	add	r2, r3
 800c484:	441d      	add	r5, r3
 800c486:	9206      	str	r2, [sp, #24]
 800c488:	e779      	b.n	800c37e <_dtoa_r+0x816>
 800c48a:	4603      	mov	r3, r0
 800c48c:	e7f4      	b.n	800c478 <_dtoa_r+0x910>
 800c48e:	9b04      	ldr	r3, [sp, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	dc37      	bgt.n	800c504 <_dtoa_r+0x99c>
 800c494:	9b07      	ldr	r3, [sp, #28]
 800c496:	2b02      	cmp	r3, #2
 800c498:	dd34      	ble.n	800c504 <_dtoa_r+0x99c>
 800c49a:	9b04      	ldr	r3, [sp, #16]
 800c49c:	9301      	str	r3, [sp, #4]
 800c49e:	9b01      	ldr	r3, [sp, #4]
 800c4a0:	b963      	cbnz	r3, 800c4bc <_dtoa_r+0x954>
 800c4a2:	4631      	mov	r1, r6
 800c4a4:	2205      	movs	r2, #5
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f000 f9fe 	bl	800c8a8 <__multadd>
 800c4ac:	4601      	mov	r1, r0
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	4650      	mov	r0, sl
 800c4b2:	f000 fc13 	bl	800ccdc <__mcmp>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	f73f adbb 	bgt.w	800c032 <_dtoa_r+0x4ca>
 800c4bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4be:	9d00      	ldr	r5, [sp, #0]
 800c4c0:	ea6f 0b03 	mvn.w	fp, r3
 800c4c4:	f04f 0800 	mov.w	r8, #0
 800c4c8:	4631      	mov	r1, r6
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 f9ca 	bl	800c864 <_Bfree>
 800c4d0:	2f00      	cmp	r7, #0
 800c4d2:	f43f aeab 	beq.w	800c22c <_dtoa_r+0x6c4>
 800c4d6:	f1b8 0f00 	cmp.w	r8, #0
 800c4da:	d005      	beq.n	800c4e8 <_dtoa_r+0x980>
 800c4dc:	45b8      	cmp	r8, r7
 800c4de:	d003      	beq.n	800c4e8 <_dtoa_r+0x980>
 800c4e0:	4641      	mov	r1, r8
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f000 f9be 	bl	800c864 <_Bfree>
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 f9ba 	bl	800c864 <_Bfree>
 800c4f0:	e69c      	b.n	800c22c <_dtoa_r+0x6c4>
 800c4f2:	2600      	movs	r6, #0
 800c4f4:	4637      	mov	r7, r6
 800c4f6:	e7e1      	b.n	800c4bc <_dtoa_r+0x954>
 800c4f8:	46bb      	mov	fp, r7
 800c4fa:	4637      	mov	r7, r6
 800c4fc:	e599      	b.n	800c032 <_dtoa_r+0x4ca>
 800c4fe:	bf00      	nop
 800c500:	40240000 	.word	0x40240000
 800c504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c506:	2b00      	cmp	r3, #0
 800c508:	f000 80c8 	beq.w	800c69c <_dtoa_r+0xb34>
 800c50c:	9b04      	ldr	r3, [sp, #16]
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	2d00      	cmp	r5, #0
 800c512:	dd05      	ble.n	800c520 <_dtoa_r+0x9b8>
 800c514:	4639      	mov	r1, r7
 800c516:	462a      	mov	r2, r5
 800c518:	4620      	mov	r0, r4
 800c51a:	f000 fb73 	bl	800cc04 <__lshift>
 800c51e:	4607      	mov	r7, r0
 800c520:	f1b8 0f00 	cmp.w	r8, #0
 800c524:	d05b      	beq.n	800c5de <_dtoa_r+0xa76>
 800c526:	6879      	ldr	r1, [r7, #4]
 800c528:	4620      	mov	r0, r4
 800c52a:	f000 f95b 	bl	800c7e4 <_Balloc>
 800c52e:	4605      	mov	r5, r0
 800c530:	b928      	cbnz	r0, 800c53e <_dtoa_r+0x9d6>
 800c532:	4b83      	ldr	r3, [pc, #524]	; (800c740 <_dtoa_r+0xbd8>)
 800c534:	4602      	mov	r2, r0
 800c536:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c53a:	f7ff bb2e 	b.w	800bb9a <_dtoa_r+0x32>
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	3202      	adds	r2, #2
 800c542:	0092      	lsls	r2, r2, #2
 800c544:	f107 010c 	add.w	r1, r7, #12
 800c548:	300c      	adds	r0, #12
 800c54a:	f000 fee7 	bl	800d31c <memcpy>
 800c54e:	2201      	movs	r2, #1
 800c550:	4629      	mov	r1, r5
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fb56 	bl	800cc04 <__lshift>
 800c558:	9b00      	ldr	r3, [sp, #0]
 800c55a:	3301      	adds	r3, #1
 800c55c:	9304      	str	r3, [sp, #16]
 800c55e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c562:	4413      	add	r3, r2
 800c564:	9308      	str	r3, [sp, #32]
 800c566:	9b02      	ldr	r3, [sp, #8]
 800c568:	f003 0301 	and.w	r3, r3, #1
 800c56c:	46b8      	mov	r8, r7
 800c56e:	9306      	str	r3, [sp, #24]
 800c570:	4607      	mov	r7, r0
 800c572:	9b04      	ldr	r3, [sp, #16]
 800c574:	4631      	mov	r1, r6
 800c576:	3b01      	subs	r3, #1
 800c578:	4650      	mov	r0, sl
 800c57a:	9301      	str	r3, [sp, #4]
 800c57c:	f7ff fa6b 	bl	800ba56 <quorem>
 800c580:	4641      	mov	r1, r8
 800c582:	9002      	str	r0, [sp, #8]
 800c584:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c588:	4650      	mov	r0, sl
 800c58a:	f000 fba7 	bl	800ccdc <__mcmp>
 800c58e:	463a      	mov	r2, r7
 800c590:	9005      	str	r0, [sp, #20]
 800c592:	4631      	mov	r1, r6
 800c594:	4620      	mov	r0, r4
 800c596:	f000 fbbd 	bl	800cd14 <__mdiff>
 800c59a:	68c2      	ldr	r2, [r0, #12]
 800c59c:	4605      	mov	r5, r0
 800c59e:	bb02      	cbnz	r2, 800c5e2 <_dtoa_r+0xa7a>
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	f000 fb9a 	bl	800ccdc <__mcmp>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c5b0:	f000 f958 	bl	800c864 <_Bfree>
 800c5b4:	9b07      	ldr	r3, [sp, #28]
 800c5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b8:	9d04      	ldr	r5, [sp, #16]
 800c5ba:	ea43 0102 	orr.w	r1, r3, r2
 800c5be:	9b06      	ldr	r3, [sp, #24]
 800c5c0:	4319      	orrs	r1, r3
 800c5c2:	d110      	bne.n	800c5e6 <_dtoa_r+0xa7e>
 800c5c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c5c8:	d029      	beq.n	800c61e <_dtoa_r+0xab6>
 800c5ca:	9b05      	ldr	r3, [sp, #20]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	dd02      	ble.n	800c5d6 <_dtoa_r+0xa6e>
 800c5d0:	9b02      	ldr	r3, [sp, #8]
 800c5d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c5d6:	9b01      	ldr	r3, [sp, #4]
 800c5d8:	f883 9000 	strb.w	r9, [r3]
 800c5dc:	e774      	b.n	800c4c8 <_dtoa_r+0x960>
 800c5de:	4638      	mov	r0, r7
 800c5e0:	e7ba      	b.n	800c558 <_dtoa_r+0x9f0>
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	e7e1      	b.n	800c5aa <_dtoa_r+0xa42>
 800c5e6:	9b05      	ldr	r3, [sp, #20]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	db04      	blt.n	800c5f6 <_dtoa_r+0xa8e>
 800c5ec:	9907      	ldr	r1, [sp, #28]
 800c5ee:	430b      	orrs	r3, r1
 800c5f0:	9906      	ldr	r1, [sp, #24]
 800c5f2:	430b      	orrs	r3, r1
 800c5f4:	d120      	bne.n	800c638 <_dtoa_r+0xad0>
 800c5f6:	2a00      	cmp	r2, #0
 800c5f8:	dded      	ble.n	800c5d6 <_dtoa_r+0xa6e>
 800c5fa:	4651      	mov	r1, sl
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	4620      	mov	r0, r4
 800c600:	f000 fb00 	bl	800cc04 <__lshift>
 800c604:	4631      	mov	r1, r6
 800c606:	4682      	mov	sl, r0
 800c608:	f000 fb68 	bl	800ccdc <__mcmp>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	dc03      	bgt.n	800c618 <_dtoa_r+0xab0>
 800c610:	d1e1      	bne.n	800c5d6 <_dtoa_r+0xa6e>
 800c612:	f019 0f01 	tst.w	r9, #1
 800c616:	d0de      	beq.n	800c5d6 <_dtoa_r+0xa6e>
 800c618:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c61c:	d1d8      	bne.n	800c5d0 <_dtoa_r+0xa68>
 800c61e:	9a01      	ldr	r2, [sp, #4]
 800c620:	2339      	movs	r3, #57	; 0x39
 800c622:	7013      	strb	r3, [r2, #0]
 800c624:	462b      	mov	r3, r5
 800c626:	461d      	mov	r5, r3
 800c628:	3b01      	subs	r3, #1
 800c62a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c62e:	2a39      	cmp	r2, #57	; 0x39
 800c630:	d06c      	beq.n	800c70c <_dtoa_r+0xba4>
 800c632:	3201      	adds	r2, #1
 800c634:	701a      	strb	r2, [r3, #0]
 800c636:	e747      	b.n	800c4c8 <_dtoa_r+0x960>
 800c638:	2a00      	cmp	r2, #0
 800c63a:	dd07      	ble.n	800c64c <_dtoa_r+0xae4>
 800c63c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c640:	d0ed      	beq.n	800c61e <_dtoa_r+0xab6>
 800c642:	9a01      	ldr	r2, [sp, #4]
 800c644:	f109 0301 	add.w	r3, r9, #1
 800c648:	7013      	strb	r3, [r2, #0]
 800c64a:	e73d      	b.n	800c4c8 <_dtoa_r+0x960>
 800c64c:	9b04      	ldr	r3, [sp, #16]
 800c64e:	9a08      	ldr	r2, [sp, #32]
 800c650:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c654:	4293      	cmp	r3, r2
 800c656:	d043      	beq.n	800c6e0 <_dtoa_r+0xb78>
 800c658:	4651      	mov	r1, sl
 800c65a:	2300      	movs	r3, #0
 800c65c:	220a      	movs	r2, #10
 800c65e:	4620      	mov	r0, r4
 800c660:	f000 f922 	bl	800c8a8 <__multadd>
 800c664:	45b8      	cmp	r8, r7
 800c666:	4682      	mov	sl, r0
 800c668:	f04f 0300 	mov.w	r3, #0
 800c66c:	f04f 020a 	mov.w	r2, #10
 800c670:	4641      	mov	r1, r8
 800c672:	4620      	mov	r0, r4
 800c674:	d107      	bne.n	800c686 <_dtoa_r+0xb1e>
 800c676:	f000 f917 	bl	800c8a8 <__multadd>
 800c67a:	4680      	mov	r8, r0
 800c67c:	4607      	mov	r7, r0
 800c67e:	9b04      	ldr	r3, [sp, #16]
 800c680:	3301      	adds	r3, #1
 800c682:	9304      	str	r3, [sp, #16]
 800c684:	e775      	b.n	800c572 <_dtoa_r+0xa0a>
 800c686:	f000 f90f 	bl	800c8a8 <__multadd>
 800c68a:	4639      	mov	r1, r7
 800c68c:	4680      	mov	r8, r0
 800c68e:	2300      	movs	r3, #0
 800c690:	220a      	movs	r2, #10
 800c692:	4620      	mov	r0, r4
 800c694:	f000 f908 	bl	800c8a8 <__multadd>
 800c698:	4607      	mov	r7, r0
 800c69a:	e7f0      	b.n	800c67e <_dtoa_r+0xb16>
 800c69c:	9b04      	ldr	r3, [sp, #16]
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	9d00      	ldr	r5, [sp, #0]
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	4650      	mov	r0, sl
 800c6a6:	f7ff f9d6 	bl	800ba56 <quorem>
 800c6aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c6ae:	9b00      	ldr	r3, [sp, #0]
 800c6b0:	f805 9b01 	strb.w	r9, [r5], #1
 800c6b4:	1aea      	subs	r2, r5, r3
 800c6b6:	9b01      	ldr	r3, [sp, #4]
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	dd07      	ble.n	800c6cc <_dtoa_r+0xb64>
 800c6bc:	4651      	mov	r1, sl
 800c6be:	2300      	movs	r3, #0
 800c6c0:	220a      	movs	r2, #10
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 f8f0 	bl	800c8a8 <__multadd>
 800c6c8:	4682      	mov	sl, r0
 800c6ca:	e7ea      	b.n	800c6a2 <_dtoa_r+0xb3a>
 800c6cc:	9b01      	ldr	r3, [sp, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	bfc8      	it	gt
 800c6d2:	461d      	movgt	r5, r3
 800c6d4:	9b00      	ldr	r3, [sp, #0]
 800c6d6:	bfd8      	it	le
 800c6d8:	2501      	movle	r5, #1
 800c6da:	441d      	add	r5, r3
 800c6dc:	f04f 0800 	mov.w	r8, #0
 800c6e0:	4651      	mov	r1, sl
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	f000 fa8d 	bl	800cc04 <__lshift>
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4682      	mov	sl, r0
 800c6ee:	f000 faf5 	bl	800ccdc <__mcmp>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	dc96      	bgt.n	800c624 <_dtoa_r+0xabc>
 800c6f6:	d102      	bne.n	800c6fe <_dtoa_r+0xb96>
 800c6f8:	f019 0f01 	tst.w	r9, #1
 800c6fc:	d192      	bne.n	800c624 <_dtoa_r+0xabc>
 800c6fe:	462b      	mov	r3, r5
 800c700:	461d      	mov	r5, r3
 800c702:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c706:	2a30      	cmp	r2, #48	; 0x30
 800c708:	d0fa      	beq.n	800c700 <_dtoa_r+0xb98>
 800c70a:	e6dd      	b.n	800c4c8 <_dtoa_r+0x960>
 800c70c:	9a00      	ldr	r2, [sp, #0]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d189      	bne.n	800c626 <_dtoa_r+0xabe>
 800c712:	f10b 0b01 	add.w	fp, fp, #1
 800c716:	2331      	movs	r3, #49	; 0x31
 800c718:	e796      	b.n	800c648 <_dtoa_r+0xae0>
 800c71a:	4b0a      	ldr	r3, [pc, #40]	; (800c744 <_dtoa_r+0xbdc>)
 800c71c:	f7ff ba99 	b.w	800bc52 <_dtoa_r+0xea>
 800c720:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c722:	2b00      	cmp	r3, #0
 800c724:	f47f aa6d 	bne.w	800bc02 <_dtoa_r+0x9a>
 800c728:	4b07      	ldr	r3, [pc, #28]	; (800c748 <_dtoa_r+0xbe0>)
 800c72a:	f7ff ba92 	b.w	800bc52 <_dtoa_r+0xea>
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	dcb5      	bgt.n	800c6a0 <_dtoa_r+0xb38>
 800c734:	9b07      	ldr	r3, [sp, #28]
 800c736:	2b02      	cmp	r3, #2
 800c738:	f73f aeb1 	bgt.w	800c49e <_dtoa_r+0x936>
 800c73c:	e7b0      	b.n	800c6a0 <_dtoa_r+0xb38>
 800c73e:	bf00      	nop
 800c740:	0800db8c 	.word	0x0800db8c
 800c744:	0800daec 	.word	0x0800daec
 800c748:	0800db10 	.word	0x0800db10

0800c74c <_free_r>:
 800c74c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c74e:	2900      	cmp	r1, #0
 800c750:	d044      	beq.n	800c7dc <_free_r+0x90>
 800c752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c756:	9001      	str	r0, [sp, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f1a1 0404 	sub.w	r4, r1, #4
 800c75e:	bfb8      	it	lt
 800c760:	18e4      	addlt	r4, r4, r3
 800c762:	f7fe fb1d 	bl	800ada0 <__malloc_lock>
 800c766:	4a1e      	ldr	r2, [pc, #120]	; (800c7e0 <_free_r+0x94>)
 800c768:	9801      	ldr	r0, [sp, #4]
 800c76a:	6813      	ldr	r3, [r2, #0]
 800c76c:	b933      	cbnz	r3, 800c77c <_free_r+0x30>
 800c76e:	6063      	str	r3, [r4, #4]
 800c770:	6014      	str	r4, [r2, #0]
 800c772:	b003      	add	sp, #12
 800c774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c778:	f7fe bb18 	b.w	800adac <__malloc_unlock>
 800c77c:	42a3      	cmp	r3, r4
 800c77e:	d908      	bls.n	800c792 <_free_r+0x46>
 800c780:	6825      	ldr	r5, [r4, #0]
 800c782:	1961      	adds	r1, r4, r5
 800c784:	428b      	cmp	r3, r1
 800c786:	bf01      	itttt	eq
 800c788:	6819      	ldreq	r1, [r3, #0]
 800c78a:	685b      	ldreq	r3, [r3, #4]
 800c78c:	1949      	addeq	r1, r1, r5
 800c78e:	6021      	streq	r1, [r4, #0]
 800c790:	e7ed      	b.n	800c76e <_free_r+0x22>
 800c792:	461a      	mov	r2, r3
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	b10b      	cbz	r3, 800c79c <_free_r+0x50>
 800c798:	42a3      	cmp	r3, r4
 800c79a:	d9fa      	bls.n	800c792 <_free_r+0x46>
 800c79c:	6811      	ldr	r1, [r2, #0]
 800c79e:	1855      	adds	r5, r2, r1
 800c7a0:	42a5      	cmp	r5, r4
 800c7a2:	d10b      	bne.n	800c7bc <_free_r+0x70>
 800c7a4:	6824      	ldr	r4, [r4, #0]
 800c7a6:	4421      	add	r1, r4
 800c7a8:	1854      	adds	r4, r2, r1
 800c7aa:	42a3      	cmp	r3, r4
 800c7ac:	6011      	str	r1, [r2, #0]
 800c7ae:	d1e0      	bne.n	800c772 <_free_r+0x26>
 800c7b0:	681c      	ldr	r4, [r3, #0]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	6053      	str	r3, [r2, #4]
 800c7b6:	440c      	add	r4, r1
 800c7b8:	6014      	str	r4, [r2, #0]
 800c7ba:	e7da      	b.n	800c772 <_free_r+0x26>
 800c7bc:	d902      	bls.n	800c7c4 <_free_r+0x78>
 800c7be:	230c      	movs	r3, #12
 800c7c0:	6003      	str	r3, [r0, #0]
 800c7c2:	e7d6      	b.n	800c772 <_free_r+0x26>
 800c7c4:	6825      	ldr	r5, [r4, #0]
 800c7c6:	1961      	adds	r1, r4, r5
 800c7c8:	428b      	cmp	r3, r1
 800c7ca:	bf04      	itt	eq
 800c7cc:	6819      	ldreq	r1, [r3, #0]
 800c7ce:	685b      	ldreq	r3, [r3, #4]
 800c7d0:	6063      	str	r3, [r4, #4]
 800c7d2:	bf04      	itt	eq
 800c7d4:	1949      	addeq	r1, r1, r5
 800c7d6:	6021      	streq	r1, [r4, #0]
 800c7d8:	6054      	str	r4, [r2, #4]
 800c7da:	e7ca      	b.n	800c772 <_free_r+0x26>
 800c7dc:	b003      	add	sp, #12
 800c7de:	bd30      	pop	{r4, r5, pc}
 800c7e0:	20000bb8 	.word	0x20000bb8

0800c7e4 <_Balloc>:
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	69c6      	ldr	r6, [r0, #28]
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	b976      	cbnz	r6, 800c80c <_Balloc+0x28>
 800c7ee:	2010      	movs	r0, #16
 800c7f0:	f7fe fa26 	bl	800ac40 <malloc>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	61e0      	str	r0, [r4, #28]
 800c7f8:	b920      	cbnz	r0, 800c804 <_Balloc+0x20>
 800c7fa:	4b18      	ldr	r3, [pc, #96]	; (800c85c <_Balloc+0x78>)
 800c7fc:	4818      	ldr	r0, [pc, #96]	; (800c860 <_Balloc+0x7c>)
 800c7fe:	216b      	movs	r1, #107	; 0x6b
 800c800:	f000 fd9a 	bl	800d338 <__assert_func>
 800c804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c808:	6006      	str	r6, [r0, #0]
 800c80a:	60c6      	str	r6, [r0, #12]
 800c80c:	69e6      	ldr	r6, [r4, #28]
 800c80e:	68f3      	ldr	r3, [r6, #12]
 800c810:	b183      	cbz	r3, 800c834 <_Balloc+0x50>
 800c812:	69e3      	ldr	r3, [r4, #28]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c81a:	b9b8      	cbnz	r0, 800c84c <_Balloc+0x68>
 800c81c:	2101      	movs	r1, #1
 800c81e:	fa01 f605 	lsl.w	r6, r1, r5
 800c822:	1d72      	adds	r2, r6, #5
 800c824:	0092      	lsls	r2, r2, #2
 800c826:	4620      	mov	r0, r4
 800c828:	f000 fda4 	bl	800d374 <_calloc_r>
 800c82c:	b160      	cbz	r0, 800c848 <_Balloc+0x64>
 800c82e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c832:	e00e      	b.n	800c852 <_Balloc+0x6e>
 800c834:	2221      	movs	r2, #33	; 0x21
 800c836:	2104      	movs	r1, #4
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 fd9b 	bl	800d374 <_calloc_r>
 800c83e:	69e3      	ldr	r3, [r4, #28]
 800c840:	60f0      	str	r0, [r6, #12]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1e4      	bne.n	800c812 <_Balloc+0x2e>
 800c848:	2000      	movs	r0, #0
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	6802      	ldr	r2, [r0, #0]
 800c84e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c852:	2300      	movs	r3, #0
 800c854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c858:	e7f7      	b.n	800c84a <_Balloc+0x66>
 800c85a:	bf00      	nop
 800c85c:	0800db1d 	.word	0x0800db1d
 800c860:	0800db9d 	.word	0x0800db9d

0800c864 <_Bfree>:
 800c864:	b570      	push	{r4, r5, r6, lr}
 800c866:	69c6      	ldr	r6, [r0, #28]
 800c868:	4605      	mov	r5, r0
 800c86a:	460c      	mov	r4, r1
 800c86c:	b976      	cbnz	r6, 800c88c <_Bfree+0x28>
 800c86e:	2010      	movs	r0, #16
 800c870:	f7fe f9e6 	bl	800ac40 <malloc>
 800c874:	4602      	mov	r2, r0
 800c876:	61e8      	str	r0, [r5, #28]
 800c878:	b920      	cbnz	r0, 800c884 <_Bfree+0x20>
 800c87a:	4b09      	ldr	r3, [pc, #36]	; (800c8a0 <_Bfree+0x3c>)
 800c87c:	4809      	ldr	r0, [pc, #36]	; (800c8a4 <_Bfree+0x40>)
 800c87e:	218f      	movs	r1, #143	; 0x8f
 800c880:	f000 fd5a 	bl	800d338 <__assert_func>
 800c884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c888:	6006      	str	r6, [r0, #0]
 800c88a:	60c6      	str	r6, [r0, #12]
 800c88c:	b13c      	cbz	r4, 800c89e <_Bfree+0x3a>
 800c88e:	69eb      	ldr	r3, [r5, #28]
 800c890:	6862      	ldr	r2, [r4, #4]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c898:	6021      	str	r1, [r4, #0]
 800c89a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c89e:	bd70      	pop	{r4, r5, r6, pc}
 800c8a0:	0800db1d 	.word	0x0800db1d
 800c8a4:	0800db9d 	.word	0x0800db9d

0800c8a8 <__multadd>:
 800c8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ac:	690d      	ldr	r5, [r1, #16]
 800c8ae:	4607      	mov	r7, r0
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	461e      	mov	r6, r3
 800c8b4:	f101 0c14 	add.w	ip, r1, #20
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	f8dc 3000 	ldr.w	r3, [ip]
 800c8be:	b299      	uxth	r1, r3
 800c8c0:	fb02 6101 	mla	r1, r2, r1, r6
 800c8c4:	0c1e      	lsrs	r6, r3, #16
 800c8c6:	0c0b      	lsrs	r3, r1, #16
 800c8c8:	fb02 3306 	mla	r3, r2, r6, r3
 800c8cc:	b289      	uxth	r1, r1
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c8d4:	4285      	cmp	r5, r0
 800c8d6:	f84c 1b04 	str.w	r1, [ip], #4
 800c8da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8de:	dcec      	bgt.n	800c8ba <__multadd+0x12>
 800c8e0:	b30e      	cbz	r6, 800c926 <__multadd+0x7e>
 800c8e2:	68a3      	ldr	r3, [r4, #8]
 800c8e4:	42ab      	cmp	r3, r5
 800c8e6:	dc19      	bgt.n	800c91c <__multadd+0x74>
 800c8e8:	6861      	ldr	r1, [r4, #4]
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	3101      	adds	r1, #1
 800c8ee:	f7ff ff79 	bl	800c7e4 <_Balloc>
 800c8f2:	4680      	mov	r8, r0
 800c8f4:	b928      	cbnz	r0, 800c902 <__multadd+0x5a>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	4b0c      	ldr	r3, [pc, #48]	; (800c92c <__multadd+0x84>)
 800c8fa:	480d      	ldr	r0, [pc, #52]	; (800c930 <__multadd+0x88>)
 800c8fc:	21ba      	movs	r1, #186	; 0xba
 800c8fe:	f000 fd1b 	bl	800d338 <__assert_func>
 800c902:	6922      	ldr	r2, [r4, #16]
 800c904:	3202      	adds	r2, #2
 800c906:	f104 010c 	add.w	r1, r4, #12
 800c90a:	0092      	lsls	r2, r2, #2
 800c90c:	300c      	adds	r0, #12
 800c90e:	f000 fd05 	bl	800d31c <memcpy>
 800c912:	4621      	mov	r1, r4
 800c914:	4638      	mov	r0, r7
 800c916:	f7ff ffa5 	bl	800c864 <_Bfree>
 800c91a:	4644      	mov	r4, r8
 800c91c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c920:	3501      	adds	r5, #1
 800c922:	615e      	str	r6, [r3, #20]
 800c924:	6125      	str	r5, [r4, #16]
 800c926:	4620      	mov	r0, r4
 800c928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c92c:	0800db8c 	.word	0x0800db8c
 800c930:	0800db9d 	.word	0x0800db9d

0800c934 <__hi0bits>:
 800c934:	0c03      	lsrs	r3, r0, #16
 800c936:	041b      	lsls	r3, r3, #16
 800c938:	b9d3      	cbnz	r3, 800c970 <__hi0bits+0x3c>
 800c93a:	0400      	lsls	r0, r0, #16
 800c93c:	2310      	movs	r3, #16
 800c93e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c942:	bf04      	itt	eq
 800c944:	0200      	lsleq	r0, r0, #8
 800c946:	3308      	addeq	r3, #8
 800c948:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c94c:	bf04      	itt	eq
 800c94e:	0100      	lsleq	r0, r0, #4
 800c950:	3304      	addeq	r3, #4
 800c952:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c956:	bf04      	itt	eq
 800c958:	0080      	lsleq	r0, r0, #2
 800c95a:	3302      	addeq	r3, #2
 800c95c:	2800      	cmp	r0, #0
 800c95e:	db05      	blt.n	800c96c <__hi0bits+0x38>
 800c960:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c964:	f103 0301 	add.w	r3, r3, #1
 800c968:	bf08      	it	eq
 800c96a:	2320      	moveq	r3, #32
 800c96c:	4618      	mov	r0, r3
 800c96e:	4770      	bx	lr
 800c970:	2300      	movs	r3, #0
 800c972:	e7e4      	b.n	800c93e <__hi0bits+0xa>

0800c974 <__lo0bits>:
 800c974:	6803      	ldr	r3, [r0, #0]
 800c976:	f013 0207 	ands.w	r2, r3, #7
 800c97a:	d00c      	beq.n	800c996 <__lo0bits+0x22>
 800c97c:	07d9      	lsls	r1, r3, #31
 800c97e:	d422      	bmi.n	800c9c6 <__lo0bits+0x52>
 800c980:	079a      	lsls	r2, r3, #30
 800c982:	bf49      	itett	mi
 800c984:	085b      	lsrmi	r3, r3, #1
 800c986:	089b      	lsrpl	r3, r3, #2
 800c988:	6003      	strmi	r3, [r0, #0]
 800c98a:	2201      	movmi	r2, #1
 800c98c:	bf5c      	itt	pl
 800c98e:	6003      	strpl	r3, [r0, #0]
 800c990:	2202      	movpl	r2, #2
 800c992:	4610      	mov	r0, r2
 800c994:	4770      	bx	lr
 800c996:	b299      	uxth	r1, r3
 800c998:	b909      	cbnz	r1, 800c99e <__lo0bits+0x2a>
 800c99a:	0c1b      	lsrs	r3, r3, #16
 800c99c:	2210      	movs	r2, #16
 800c99e:	b2d9      	uxtb	r1, r3
 800c9a0:	b909      	cbnz	r1, 800c9a6 <__lo0bits+0x32>
 800c9a2:	3208      	adds	r2, #8
 800c9a4:	0a1b      	lsrs	r3, r3, #8
 800c9a6:	0719      	lsls	r1, r3, #28
 800c9a8:	bf04      	itt	eq
 800c9aa:	091b      	lsreq	r3, r3, #4
 800c9ac:	3204      	addeq	r2, #4
 800c9ae:	0799      	lsls	r1, r3, #30
 800c9b0:	bf04      	itt	eq
 800c9b2:	089b      	lsreq	r3, r3, #2
 800c9b4:	3202      	addeq	r2, #2
 800c9b6:	07d9      	lsls	r1, r3, #31
 800c9b8:	d403      	bmi.n	800c9c2 <__lo0bits+0x4e>
 800c9ba:	085b      	lsrs	r3, r3, #1
 800c9bc:	f102 0201 	add.w	r2, r2, #1
 800c9c0:	d003      	beq.n	800c9ca <__lo0bits+0x56>
 800c9c2:	6003      	str	r3, [r0, #0]
 800c9c4:	e7e5      	b.n	800c992 <__lo0bits+0x1e>
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	e7e3      	b.n	800c992 <__lo0bits+0x1e>
 800c9ca:	2220      	movs	r2, #32
 800c9cc:	e7e1      	b.n	800c992 <__lo0bits+0x1e>
	...

0800c9d0 <__i2b>:
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	2101      	movs	r1, #1
 800c9d6:	f7ff ff05 	bl	800c7e4 <_Balloc>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	b928      	cbnz	r0, 800c9ea <__i2b+0x1a>
 800c9de:	4b05      	ldr	r3, [pc, #20]	; (800c9f4 <__i2b+0x24>)
 800c9e0:	4805      	ldr	r0, [pc, #20]	; (800c9f8 <__i2b+0x28>)
 800c9e2:	f240 1145 	movw	r1, #325	; 0x145
 800c9e6:	f000 fca7 	bl	800d338 <__assert_func>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	6144      	str	r4, [r0, #20]
 800c9ee:	6103      	str	r3, [r0, #16]
 800c9f0:	bd10      	pop	{r4, pc}
 800c9f2:	bf00      	nop
 800c9f4:	0800db8c 	.word	0x0800db8c
 800c9f8:	0800db9d 	.word	0x0800db9d

0800c9fc <__multiply>:
 800c9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	4691      	mov	r9, r2
 800ca02:	690a      	ldr	r2, [r1, #16]
 800ca04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	bfb8      	it	lt
 800ca0c:	460b      	movlt	r3, r1
 800ca0e:	460c      	mov	r4, r1
 800ca10:	bfbc      	itt	lt
 800ca12:	464c      	movlt	r4, r9
 800ca14:	4699      	movlt	r9, r3
 800ca16:	6927      	ldr	r7, [r4, #16]
 800ca18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca1c:	68a3      	ldr	r3, [r4, #8]
 800ca1e:	6861      	ldr	r1, [r4, #4]
 800ca20:	eb07 060a 	add.w	r6, r7, sl
 800ca24:	42b3      	cmp	r3, r6
 800ca26:	b085      	sub	sp, #20
 800ca28:	bfb8      	it	lt
 800ca2a:	3101      	addlt	r1, #1
 800ca2c:	f7ff feda 	bl	800c7e4 <_Balloc>
 800ca30:	b930      	cbnz	r0, 800ca40 <__multiply+0x44>
 800ca32:	4602      	mov	r2, r0
 800ca34:	4b44      	ldr	r3, [pc, #272]	; (800cb48 <__multiply+0x14c>)
 800ca36:	4845      	ldr	r0, [pc, #276]	; (800cb4c <__multiply+0x150>)
 800ca38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ca3c:	f000 fc7c 	bl	800d338 <__assert_func>
 800ca40:	f100 0514 	add.w	r5, r0, #20
 800ca44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca48:	462b      	mov	r3, r5
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	4543      	cmp	r3, r8
 800ca4e:	d321      	bcc.n	800ca94 <__multiply+0x98>
 800ca50:	f104 0314 	add.w	r3, r4, #20
 800ca54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ca58:	f109 0314 	add.w	r3, r9, #20
 800ca5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ca60:	9202      	str	r2, [sp, #8]
 800ca62:	1b3a      	subs	r2, r7, r4
 800ca64:	3a15      	subs	r2, #21
 800ca66:	f022 0203 	bic.w	r2, r2, #3
 800ca6a:	3204      	adds	r2, #4
 800ca6c:	f104 0115 	add.w	r1, r4, #21
 800ca70:	428f      	cmp	r7, r1
 800ca72:	bf38      	it	cc
 800ca74:	2204      	movcc	r2, #4
 800ca76:	9201      	str	r2, [sp, #4]
 800ca78:	9a02      	ldr	r2, [sp, #8]
 800ca7a:	9303      	str	r3, [sp, #12]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d80c      	bhi.n	800ca9a <__multiply+0x9e>
 800ca80:	2e00      	cmp	r6, #0
 800ca82:	dd03      	ble.n	800ca8c <__multiply+0x90>
 800ca84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d05b      	beq.n	800cb44 <__multiply+0x148>
 800ca8c:	6106      	str	r6, [r0, #16]
 800ca8e:	b005      	add	sp, #20
 800ca90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca94:	f843 2b04 	str.w	r2, [r3], #4
 800ca98:	e7d8      	b.n	800ca4c <__multiply+0x50>
 800ca9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca9e:	f1ba 0f00 	cmp.w	sl, #0
 800caa2:	d024      	beq.n	800caee <__multiply+0xf2>
 800caa4:	f104 0e14 	add.w	lr, r4, #20
 800caa8:	46a9      	mov	r9, r5
 800caaa:	f04f 0c00 	mov.w	ip, #0
 800caae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cab2:	f8d9 1000 	ldr.w	r1, [r9]
 800cab6:	fa1f fb82 	uxth.w	fp, r2
 800caba:	b289      	uxth	r1, r1
 800cabc:	fb0a 110b 	mla	r1, sl, fp, r1
 800cac0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cac4:	f8d9 2000 	ldr.w	r2, [r9]
 800cac8:	4461      	add	r1, ip
 800caca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cace:	fb0a c20b 	mla	r2, sl, fp, ip
 800cad2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cad6:	b289      	uxth	r1, r1
 800cad8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cadc:	4577      	cmp	r7, lr
 800cade:	f849 1b04 	str.w	r1, [r9], #4
 800cae2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cae6:	d8e2      	bhi.n	800caae <__multiply+0xb2>
 800cae8:	9a01      	ldr	r2, [sp, #4]
 800caea:	f845 c002 	str.w	ip, [r5, r2]
 800caee:	9a03      	ldr	r2, [sp, #12]
 800caf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800caf4:	3304      	adds	r3, #4
 800caf6:	f1b9 0f00 	cmp.w	r9, #0
 800cafa:	d021      	beq.n	800cb40 <__multiply+0x144>
 800cafc:	6829      	ldr	r1, [r5, #0]
 800cafe:	f104 0c14 	add.w	ip, r4, #20
 800cb02:	46ae      	mov	lr, r5
 800cb04:	f04f 0a00 	mov.w	sl, #0
 800cb08:	f8bc b000 	ldrh.w	fp, [ip]
 800cb0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cb10:	fb09 220b 	mla	r2, r9, fp, r2
 800cb14:	4452      	add	r2, sl
 800cb16:	b289      	uxth	r1, r1
 800cb18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb1c:	f84e 1b04 	str.w	r1, [lr], #4
 800cb20:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cb24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb28:	f8be 1000 	ldrh.w	r1, [lr]
 800cb2c:	fb09 110a 	mla	r1, r9, sl, r1
 800cb30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cb34:	4567      	cmp	r7, ip
 800cb36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb3a:	d8e5      	bhi.n	800cb08 <__multiply+0x10c>
 800cb3c:	9a01      	ldr	r2, [sp, #4]
 800cb3e:	50a9      	str	r1, [r5, r2]
 800cb40:	3504      	adds	r5, #4
 800cb42:	e799      	b.n	800ca78 <__multiply+0x7c>
 800cb44:	3e01      	subs	r6, #1
 800cb46:	e79b      	b.n	800ca80 <__multiply+0x84>
 800cb48:	0800db8c 	.word	0x0800db8c
 800cb4c:	0800db9d 	.word	0x0800db9d

0800cb50 <__pow5mult>:
 800cb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb54:	4615      	mov	r5, r2
 800cb56:	f012 0203 	ands.w	r2, r2, #3
 800cb5a:	4606      	mov	r6, r0
 800cb5c:	460f      	mov	r7, r1
 800cb5e:	d007      	beq.n	800cb70 <__pow5mult+0x20>
 800cb60:	4c25      	ldr	r4, [pc, #148]	; (800cbf8 <__pow5mult+0xa8>)
 800cb62:	3a01      	subs	r2, #1
 800cb64:	2300      	movs	r3, #0
 800cb66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb6a:	f7ff fe9d 	bl	800c8a8 <__multadd>
 800cb6e:	4607      	mov	r7, r0
 800cb70:	10ad      	asrs	r5, r5, #2
 800cb72:	d03d      	beq.n	800cbf0 <__pow5mult+0xa0>
 800cb74:	69f4      	ldr	r4, [r6, #28]
 800cb76:	b97c      	cbnz	r4, 800cb98 <__pow5mult+0x48>
 800cb78:	2010      	movs	r0, #16
 800cb7a:	f7fe f861 	bl	800ac40 <malloc>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	61f0      	str	r0, [r6, #28]
 800cb82:	b928      	cbnz	r0, 800cb90 <__pow5mult+0x40>
 800cb84:	4b1d      	ldr	r3, [pc, #116]	; (800cbfc <__pow5mult+0xac>)
 800cb86:	481e      	ldr	r0, [pc, #120]	; (800cc00 <__pow5mult+0xb0>)
 800cb88:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cb8c:	f000 fbd4 	bl	800d338 <__assert_func>
 800cb90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb94:	6004      	str	r4, [r0, #0]
 800cb96:	60c4      	str	r4, [r0, #12]
 800cb98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cb9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cba0:	b94c      	cbnz	r4, 800cbb6 <__pow5mult+0x66>
 800cba2:	f240 2171 	movw	r1, #625	; 0x271
 800cba6:	4630      	mov	r0, r6
 800cba8:	f7ff ff12 	bl	800c9d0 <__i2b>
 800cbac:	2300      	movs	r3, #0
 800cbae:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	6003      	str	r3, [r0, #0]
 800cbb6:	f04f 0900 	mov.w	r9, #0
 800cbba:	07eb      	lsls	r3, r5, #31
 800cbbc:	d50a      	bpl.n	800cbd4 <__pow5mult+0x84>
 800cbbe:	4639      	mov	r1, r7
 800cbc0:	4622      	mov	r2, r4
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	f7ff ff1a 	bl	800c9fc <__multiply>
 800cbc8:	4639      	mov	r1, r7
 800cbca:	4680      	mov	r8, r0
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f7ff fe49 	bl	800c864 <_Bfree>
 800cbd2:	4647      	mov	r7, r8
 800cbd4:	106d      	asrs	r5, r5, #1
 800cbd6:	d00b      	beq.n	800cbf0 <__pow5mult+0xa0>
 800cbd8:	6820      	ldr	r0, [r4, #0]
 800cbda:	b938      	cbnz	r0, 800cbec <__pow5mult+0x9c>
 800cbdc:	4622      	mov	r2, r4
 800cbde:	4621      	mov	r1, r4
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f7ff ff0b 	bl	800c9fc <__multiply>
 800cbe6:	6020      	str	r0, [r4, #0]
 800cbe8:	f8c0 9000 	str.w	r9, [r0]
 800cbec:	4604      	mov	r4, r0
 800cbee:	e7e4      	b.n	800cbba <__pow5mult+0x6a>
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbf6:	bf00      	nop
 800cbf8:	0800dce8 	.word	0x0800dce8
 800cbfc:	0800db1d 	.word	0x0800db1d
 800cc00:	0800db9d 	.word	0x0800db9d

0800cc04 <__lshift>:
 800cc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc08:	460c      	mov	r4, r1
 800cc0a:	6849      	ldr	r1, [r1, #4]
 800cc0c:	6923      	ldr	r3, [r4, #16]
 800cc0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc12:	68a3      	ldr	r3, [r4, #8]
 800cc14:	4607      	mov	r7, r0
 800cc16:	4691      	mov	r9, r2
 800cc18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc1c:	f108 0601 	add.w	r6, r8, #1
 800cc20:	42b3      	cmp	r3, r6
 800cc22:	db0b      	blt.n	800cc3c <__lshift+0x38>
 800cc24:	4638      	mov	r0, r7
 800cc26:	f7ff fddd 	bl	800c7e4 <_Balloc>
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	b948      	cbnz	r0, 800cc42 <__lshift+0x3e>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	4b28      	ldr	r3, [pc, #160]	; (800ccd4 <__lshift+0xd0>)
 800cc32:	4829      	ldr	r0, [pc, #164]	; (800ccd8 <__lshift+0xd4>)
 800cc34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cc38:	f000 fb7e 	bl	800d338 <__assert_func>
 800cc3c:	3101      	adds	r1, #1
 800cc3e:	005b      	lsls	r3, r3, #1
 800cc40:	e7ee      	b.n	800cc20 <__lshift+0x1c>
 800cc42:	2300      	movs	r3, #0
 800cc44:	f100 0114 	add.w	r1, r0, #20
 800cc48:	f100 0210 	add.w	r2, r0, #16
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	4553      	cmp	r3, sl
 800cc50:	db33      	blt.n	800ccba <__lshift+0xb6>
 800cc52:	6920      	ldr	r0, [r4, #16]
 800cc54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc58:	f104 0314 	add.w	r3, r4, #20
 800cc5c:	f019 091f 	ands.w	r9, r9, #31
 800cc60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc68:	d02b      	beq.n	800ccc2 <__lshift+0xbe>
 800cc6a:	f1c9 0e20 	rsb	lr, r9, #32
 800cc6e:	468a      	mov	sl, r1
 800cc70:	2200      	movs	r2, #0
 800cc72:	6818      	ldr	r0, [r3, #0]
 800cc74:	fa00 f009 	lsl.w	r0, r0, r9
 800cc78:	4310      	orrs	r0, r2
 800cc7a:	f84a 0b04 	str.w	r0, [sl], #4
 800cc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc82:	459c      	cmp	ip, r3
 800cc84:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc88:	d8f3      	bhi.n	800cc72 <__lshift+0x6e>
 800cc8a:	ebac 0304 	sub.w	r3, ip, r4
 800cc8e:	3b15      	subs	r3, #21
 800cc90:	f023 0303 	bic.w	r3, r3, #3
 800cc94:	3304      	adds	r3, #4
 800cc96:	f104 0015 	add.w	r0, r4, #21
 800cc9a:	4584      	cmp	ip, r0
 800cc9c:	bf38      	it	cc
 800cc9e:	2304      	movcc	r3, #4
 800cca0:	50ca      	str	r2, [r1, r3]
 800cca2:	b10a      	cbz	r2, 800cca8 <__lshift+0xa4>
 800cca4:	f108 0602 	add.w	r6, r8, #2
 800cca8:	3e01      	subs	r6, #1
 800ccaa:	4638      	mov	r0, r7
 800ccac:	612e      	str	r6, [r5, #16]
 800ccae:	4621      	mov	r1, r4
 800ccb0:	f7ff fdd8 	bl	800c864 <_Bfree>
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccba:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	e7c5      	b.n	800cc4e <__lshift+0x4a>
 800ccc2:	3904      	subs	r1, #4
 800ccc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cccc:	459c      	cmp	ip, r3
 800ccce:	d8f9      	bhi.n	800ccc4 <__lshift+0xc0>
 800ccd0:	e7ea      	b.n	800cca8 <__lshift+0xa4>
 800ccd2:	bf00      	nop
 800ccd4:	0800db8c 	.word	0x0800db8c
 800ccd8:	0800db9d 	.word	0x0800db9d

0800ccdc <__mcmp>:
 800ccdc:	b530      	push	{r4, r5, lr}
 800ccde:	6902      	ldr	r2, [r0, #16]
 800cce0:	690c      	ldr	r4, [r1, #16]
 800cce2:	1b12      	subs	r2, r2, r4
 800cce4:	d10e      	bne.n	800cd04 <__mcmp+0x28>
 800cce6:	f100 0314 	add.w	r3, r0, #20
 800ccea:	3114      	adds	r1, #20
 800ccec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ccf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ccf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ccf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ccfc:	42a5      	cmp	r5, r4
 800ccfe:	d003      	beq.n	800cd08 <__mcmp+0x2c>
 800cd00:	d305      	bcc.n	800cd0e <__mcmp+0x32>
 800cd02:	2201      	movs	r2, #1
 800cd04:	4610      	mov	r0, r2
 800cd06:	bd30      	pop	{r4, r5, pc}
 800cd08:	4283      	cmp	r3, r0
 800cd0a:	d3f3      	bcc.n	800ccf4 <__mcmp+0x18>
 800cd0c:	e7fa      	b.n	800cd04 <__mcmp+0x28>
 800cd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd12:	e7f7      	b.n	800cd04 <__mcmp+0x28>

0800cd14 <__mdiff>:
 800cd14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd18:	460c      	mov	r4, r1
 800cd1a:	4606      	mov	r6, r0
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	4620      	mov	r0, r4
 800cd20:	4690      	mov	r8, r2
 800cd22:	f7ff ffdb 	bl	800ccdc <__mcmp>
 800cd26:	1e05      	subs	r5, r0, #0
 800cd28:	d110      	bne.n	800cd4c <__mdiff+0x38>
 800cd2a:	4629      	mov	r1, r5
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f7ff fd59 	bl	800c7e4 <_Balloc>
 800cd32:	b930      	cbnz	r0, 800cd42 <__mdiff+0x2e>
 800cd34:	4b3a      	ldr	r3, [pc, #232]	; (800ce20 <__mdiff+0x10c>)
 800cd36:	4602      	mov	r2, r0
 800cd38:	f240 2137 	movw	r1, #567	; 0x237
 800cd3c:	4839      	ldr	r0, [pc, #228]	; (800ce24 <__mdiff+0x110>)
 800cd3e:	f000 fafb 	bl	800d338 <__assert_func>
 800cd42:	2301      	movs	r3, #1
 800cd44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd4c:	bfa4      	itt	ge
 800cd4e:	4643      	movge	r3, r8
 800cd50:	46a0      	movge	r8, r4
 800cd52:	4630      	mov	r0, r6
 800cd54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd58:	bfa6      	itte	ge
 800cd5a:	461c      	movge	r4, r3
 800cd5c:	2500      	movge	r5, #0
 800cd5e:	2501      	movlt	r5, #1
 800cd60:	f7ff fd40 	bl	800c7e4 <_Balloc>
 800cd64:	b920      	cbnz	r0, 800cd70 <__mdiff+0x5c>
 800cd66:	4b2e      	ldr	r3, [pc, #184]	; (800ce20 <__mdiff+0x10c>)
 800cd68:	4602      	mov	r2, r0
 800cd6a:	f240 2145 	movw	r1, #581	; 0x245
 800cd6e:	e7e5      	b.n	800cd3c <__mdiff+0x28>
 800cd70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd74:	6926      	ldr	r6, [r4, #16]
 800cd76:	60c5      	str	r5, [r0, #12]
 800cd78:	f104 0914 	add.w	r9, r4, #20
 800cd7c:	f108 0514 	add.w	r5, r8, #20
 800cd80:	f100 0e14 	add.w	lr, r0, #20
 800cd84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd8c:	f108 0210 	add.w	r2, r8, #16
 800cd90:	46f2      	mov	sl, lr
 800cd92:	2100      	movs	r1, #0
 800cd94:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd9c:	fa11 f88b 	uxtah	r8, r1, fp
 800cda0:	b299      	uxth	r1, r3
 800cda2:	0c1b      	lsrs	r3, r3, #16
 800cda4:	eba8 0801 	sub.w	r8, r8, r1
 800cda8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cdac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cdb0:	fa1f f888 	uxth.w	r8, r8
 800cdb4:	1419      	asrs	r1, r3, #16
 800cdb6:	454e      	cmp	r6, r9
 800cdb8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cdbc:	f84a 3b04 	str.w	r3, [sl], #4
 800cdc0:	d8e8      	bhi.n	800cd94 <__mdiff+0x80>
 800cdc2:	1b33      	subs	r3, r6, r4
 800cdc4:	3b15      	subs	r3, #21
 800cdc6:	f023 0303 	bic.w	r3, r3, #3
 800cdca:	3304      	adds	r3, #4
 800cdcc:	3415      	adds	r4, #21
 800cdce:	42a6      	cmp	r6, r4
 800cdd0:	bf38      	it	cc
 800cdd2:	2304      	movcc	r3, #4
 800cdd4:	441d      	add	r5, r3
 800cdd6:	4473      	add	r3, lr
 800cdd8:	469e      	mov	lr, r3
 800cdda:	462e      	mov	r6, r5
 800cddc:	4566      	cmp	r6, ip
 800cdde:	d30e      	bcc.n	800cdfe <__mdiff+0xea>
 800cde0:	f10c 0203 	add.w	r2, ip, #3
 800cde4:	1b52      	subs	r2, r2, r5
 800cde6:	f022 0203 	bic.w	r2, r2, #3
 800cdea:	3d03      	subs	r5, #3
 800cdec:	45ac      	cmp	ip, r5
 800cdee:	bf38      	it	cc
 800cdf0:	2200      	movcc	r2, #0
 800cdf2:	4413      	add	r3, r2
 800cdf4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cdf8:	b17a      	cbz	r2, 800ce1a <__mdiff+0x106>
 800cdfa:	6107      	str	r7, [r0, #16]
 800cdfc:	e7a4      	b.n	800cd48 <__mdiff+0x34>
 800cdfe:	f856 8b04 	ldr.w	r8, [r6], #4
 800ce02:	fa11 f288 	uxtah	r2, r1, r8
 800ce06:	1414      	asrs	r4, r2, #16
 800ce08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ce0c:	b292      	uxth	r2, r2
 800ce0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ce12:	f84e 2b04 	str.w	r2, [lr], #4
 800ce16:	1421      	asrs	r1, r4, #16
 800ce18:	e7e0      	b.n	800cddc <__mdiff+0xc8>
 800ce1a:	3f01      	subs	r7, #1
 800ce1c:	e7ea      	b.n	800cdf4 <__mdiff+0xe0>
 800ce1e:	bf00      	nop
 800ce20:	0800db8c 	.word	0x0800db8c
 800ce24:	0800db9d 	.word	0x0800db9d

0800ce28 <__d2b>:
 800ce28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce2c:	460f      	mov	r7, r1
 800ce2e:	2101      	movs	r1, #1
 800ce30:	ec59 8b10 	vmov	r8, r9, d0
 800ce34:	4616      	mov	r6, r2
 800ce36:	f7ff fcd5 	bl	800c7e4 <_Balloc>
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	b930      	cbnz	r0, 800ce4c <__d2b+0x24>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	4b24      	ldr	r3, [pc, #144]	; (800ced4 <__d2b+0xac>)
 800ce42:	4825      	ldr	r0, [pc, #148]	; (800ced8 <__d2b+0xb0>)
 800ce44:	f240 310f 	movw	r1, #783	; 0x30f
 800ce48:	f000 fa76 	bl	800d338 <__assert_func>
 800ce4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce54:	bb2d      	cbnz	r5, 800cea2 <__d2b+0x7a>
 800ce56:	9301      	str	r3, [sp, #4]
 800ce58:	f1b8 0300 	subs.w	r3, r8, #0
 800ce5c:	d026      	beq.n	800ceac <__d2b+0x84>
 800ce5e:	4668      	mov	r0, sp
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	f7ff fd87 	bl	800c974 <__lo0bits>
 800ce66:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce6a:	b1e8      	cbz	r0, 800cea8 <__d2b+0x80>
 800ce6c:	f1c0 0320 	rsb	r3, r0, #32
 800ce70:	fa02 f303 	lsl.w	r3, r2, r3
 800ce74:	430b      	orrs	r3, r1
 800ce76:	40c2      	lsrs	r2, r0
 800ce78:	6163      	str	r3, [r4, #20]
 800ce7a:	9201      	str	r2, [sp, #4]
 800ce7c:	9b01      	ldr	r3, [sp, #4]
 800ce7e:	61a3      	str	r3, [r4, #24]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	bf14      	ite	ne
 800ce84:	2202      	movne	r2, #2
 800ce86:	2201      	moveq	r2, #1
 800ce88:	6122      	str	r2, [r4, #16]
 800ce8a:	b1bd      	cbz	r5, 800cebc <__d2b+0x94>
 800ce8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce90:	4405      	add	r5, r0
 800ce92:	603d      	str	r5, [r7, #0]
 800ce94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce98:	6030      	str	r0, [r6, #0]
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	b003      	add	sp, #12
 800ce9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cea6:	e7d6      	b.n	800ce56 <__d2b+0x2e>
 800cea8:	6161      	str	r1, [r4, #20]
 800ceaa:	e7e7      	b.n	800ce7c <__d2b+0x54>
 800ceac:	a801      	add	r0, sp, #4
 800ceae:	f7ff fd61 	bl	800c974 <__lo0bits>
 800ceb2:	9b01      	ldr	r3, [sp, #4]
 800ceb4:	6163      	str	r3, [r4, #20]
 800ceb6:	3020      	adds	r0, #32
 800ceb8:	2201      	movs	r2, #1
 800ceba:	e7e5      	b.n	800ce88 <__d2b+0x60>
 800cebc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cec0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cec4:	6038      	str	r0, [r7, #0]
 800cec6:	6918      	ldr	r0, [r3, #16]
 800cec8:	f7ff fd34 	bl	800c934 <__hi0bits>
 800cecc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ced0:	e7e2      	b.n	800ce98 <__d2b+0x70>
 800ced2:	bf00      	nop
 800ced4:	0800db8c 	.word	0x0800db8c
 800ced8:	0800db9d 	.word	0x0800db9d

0800cedc <__ssputs_r>:
 800cedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee0:	688e      	ldr	r6, [r1, #8]
 800cee2:	461f      	mov	r7, r3
 800cee4:	42be      	cmp	r6, r7
 800cee6:	680b      	ldr	r3, [r1, #0]
 800cee8:	4682      	mov	sl, r0
 800ceea:	460c      	mov	r4, r1
 800ceec:	4690      	mov	r8, r2
 800ceee:	d82c      	bhi.n	800cf4a <__ssputs_r+0x6e>
 800cef0:	898a      	ldrh	r2, [r1, #12]
 800cef2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cef6:	d026      	beq.n	800cf46 <__ssputs_r+0x6a>
 800cef8:	6965      	ldr	r5, [r4, #20]
 800cefa:	6909      	ldr	r1, [r1, #16]
 800cefc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf00:	eba3 0901 	sub.w	r9, r3, r1
 800cf04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf08:	1c7b      	adds	r3, r7, #1
 800cf0a:	444b      	add	r3, r9
 800cf0c:	106d      	asrs	r5, r5, #1
 800cf0e:	429d      	cmp	r5, r3
 800cf10:	bf38      	it	cc
 800cf12:	461d      	movcc	r5, r3
 800cf14:	0553      	lsls	r3, r2, #21
 800cf16:	d527      	bpl.n	800cf68 <__ssputs_r+0x8c>
 800cf18:	4629      	mov	r1, r5
 800cf1a:	f7fd fec1 	bl	800aca0 <_malloc_r>
 800cf1e:	4606      	mov	r6, r0
 800cf20:	b360      	cbz	r0, 800cf7c <__ssputs_r+0xa0>
 800cf22:	6921      	ldr	r1, [r4, #16]
 800cf24:	464a      	mov	r2, r9
 800cf26:	f000 f9f9 	bl	800d31c <memcpy>
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf34:	81a3      	strh	r3, [r4, #12]
 800cf36:	6126      	str	r6, [r4, #16]
 800cf38:	6165      	str	r5, [r4, #20]
 800cf3a:	444e      	add	r6, r9
 800cf3c:	eba5 0509 	sub.w	r5, r5, r9
 800cf40:	6026      	str	r6, [r4, #0]
 800cf42:	60a5      	str	r5, [r4, #8]
 800cf44:	463e      	mov	r6, r7
 800cf46:	42be      	cmp	r6, r7
 800cf48:	d900      	bls.n	800cf4c <__ssputs_r+0x70>
 800cf4a:	463e      	mov	r6, r7
 800cf4c:	6820      	ldr	r0, [r4, #0]
 800cf4e:	4632      	mov	r2, r6
 800cf50:	4641      	mov	r1, r8
 800cf52:	f000 f9c9 	bl	800d2e8 <memmove>
 800cf56:	68a3      	ldr	r3, [r4, #8]
 800cf58:	1b9b      	subs	r3, r3, r6
 800cf5a:	60a3      	str	r3, [r4, #8]
 800cf5c:	6823      	ldr	r3, [r4, #0]
 800cf5e:	4433      	add	r3, r6
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	2000      	movs	r0, #0
 800cf64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf68:	462a      	mov	r2, r5
 800cf6a:	f000 fa2b 	bl	800d3c4 <_realloc_r>
 800cf6e:	4606      	mov	r6, r0
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d1e0      	bne.n	800cf36 <__ssputs_r+0x5a>
 800cf74:	6921      	ldr	r1, [r4, #16]
 800cf76:	4650      	mov	r0, sl
 800cf78:	f7ff fbe8 	bl	800c74c <_free_r>
 800cf7c:	230c      	movs	r3, #12
 800cf7e:	f8ca 3000 	str.w	r3, [sl]
 800cf82:	89a3      	ldrh	r3, [r4, #12]
 800cf84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf88:	81a3      	strh	r3, [r4, #12]
 800cf8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8e:	e7e9      	b.n	800cf64 <__ssputs_r+0x88>

0800cf90 <_svfiprintf_r>:
 800cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf94:	4698      	mov	r8, r3
 800cf96:	898b      	ldrh	r3, [r1, #12]
 800cf98:	061b      	lsls	r3, r3, #24
 800cf9a:	b09d      	sub	sp, #116	; 0x74
 800cf9c:	4607      	mov	r7, r0
 800cf9e:	460d      	mov	r5, r1
 800cfa0:	4614      	mov	r4, r2
 800cfa2:	d50e      	bpl.n	800cfc2 <_svfiprintf_r+0x32>
 800cfa4:	690b      	ldr	r3, [r1, #16]
 800cfa6:	b963      	cbnz	r3, 800cfc2 <_svfiprintf_r+0x32>
 800cfa8:	2140      	movs	r1, #64	; 0x40
 800cfaa:	f7fd fe79 	bl	800aca0 <_malloc_r>
 800cfae:	6028      	str	r0, [r5, #0]
 800cfb0:	6128      	str	r0, [r5, #16]
 800cfb2:	b920      	cbnz	r0, 800cfbe <_svfiprintf_r+0x2e>
 800cfb4:	230c      	movs	r3, #12
 800cfb6:	603b      	str	r3, [r7, #0]
 800cfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbc:	e0d0      	b.n	800d160 <_svfiprintf_r+0x1d0>
 800cfbe:	2340      	movs	r3, #64	; 0x40
 800cfc0:	616b      	str	r3, [r5, #20]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc6:	2320      	movs	r3, #32
 800cfc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfd0:	2330      	movs	r3, #48	; 0x30
 800cfd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d178 <_svfiprintf_r+0x1e8>
 800cfd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfda:	f04f 0901 	mov.w	r9, #1
 800cfde:	4623      	mov	r3, r4
 800cfe0:	469a      	mov	sl, r3
 800cfe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfe6:	b10a      	cbz	r2, 800cfec <_svfiprintf_r+0x5c>
 800cfe8:	2a25      	cmp	r2, #37	; 0x25
 800cfea:	d1f9      	bne.n	800cfe0 <_svfiprintf_r+0x50>
 800cfec:	ebba 0b04 	subs.w	fp, sl, r4
 800cff0:	d00b      	beq.n	800d00a <_svfiprintf_r+0x7a>
 800cff2:	465b      	mov	r3, fp
 800cff4:	4622      	mov	r2, r4
 800cff6:	4629      	mov	r1, r5
 800cff8:	4638      	mov	r0, r7
 800cffa:	f7ff ff6f 	bl	800cedc <__ssputs_r>
 800cffe:	3001      	adds	r0, #1
 800d000:	f000 80a9 	beq.w	800d156 <_svfiprintf_r+0x1c6>
 800d004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d006:	445a      	add	r2, fp
 800d008:	9209      	str	r2, [sp, #36]	; 0x24
 800d00a:	f89a 3000 	ldrb.w	r3, [sl]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f000 80a1 	beq.w	800d156 <_svfiprintf_r+0x1c6>
 800d014:	2300      	movs	r3, #0
 800d016:	f04f 32ff 	mov.w	r2, #4294967295
 800d01a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d01e:	f10a 0a01 	add.w	sl, sl, #1
 800d022:	9304      	str	r3, [sp, #16]
 800d024:	9307      	str	r3, [sp, #28]
 800d026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d02a:	931a      	str	r3, [sp, #104]	; 0x68
 800d02c:	4654      	mov	r4, sl
 800d02e:	2205      	movs	r2, #5
 800d030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d034:	4850      	ldr	r0, [pc, #320]	; (800d178 <_svfiprintf_r+0x1e8>)
 800d036:	f7f3 f8cb 	bl	80001d0 <memchr>
 800d03a:	9a04      	ldr	r2, [sp, #16]
 800d03c:	b9d8      	cbnz	r0, 800d076 <_svfiprintf_r+0xe6>
 800d03e:	06d0      	lsls	r0, r2, #27
 800d040:	bf44      	itt	mi
 800d042:	2320      	movmi	r3, #32
 800d044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d048:	0711      	lsls	r1, r2, #28
 800d04a:	bf44      	itt	mi
 800d04c:	232b      	movmi	r3, #43	; 0x2b
 800d04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d052:	f89a 3000 	ldrb.w	r3, [sl]
 800d056:	2b2a      	cmp	r3, #42	; 0x2a
 800d058:	d015      	beq.n	800d086 <_svfiprintf_r+0xf6>
 800d05a:	9a07      	ldr	r2, [sp, #28]
 800d05c:	4654      	mov	r4, sl
 800d05e:	2000      	movs	r0, #0
 800d060:	f04f 0c0a 	mov.w	ip, #10
 800d064:	4621      	mov	r1, r4
 800d066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d06a:	3b30      	subs	r3, #48	; 0x30
 800d06c:	2b09      	cmp	r3, #9
 800d06e:	d94d      	bls.n	800d10c <_svfiprintf_r+0x17c>
 800d070:	b1b0      	cbz	r0, 800d0a0 <_svfiprintf_r+0x110>
 800d072:	9207      	str	r2, [sp, #28]
 800d074:	e014      	b.n	800d0a0 <_svfiprintf_r+0x110>
 800d076:	eba0 0308 	sub.w	r3, r0, r8
 800d07a:	fa09 f303 	lsl.w	r3, r9, r3
 800d07e:	4313      	orrs	r3, r2
 800d080:	9304      	str	r3, [sp, #16]
 800d082:	46a2      	mov	sl, r4
 800d084:	e7d2      	b.n	800d02c <_svfiprintf_r+0x9c>
 800d086:	9b03      	ldr	r3, [sp, #12]
 800d088:	1d19      	adds	r1, r3, #4
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	9103      	str	r1, [sp, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	bfbb      	ittet	lt
 800d092:	425b      	neglt	r3, r3
 800d094:	f042 0202 	orrlt.w	r2, r2, #2
 800d098:	9307      	strge	r3, [sp, #28]
 800d09a:	9307      	strlt	r3, [sp, #28]
 800d09c:	bfb8      	it	lt
 800d09e:	9204      	strlt	r2, [sp, #16]
 800d0a0:	7823      	ldrb	r3, [r4, #0]
 800d0a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d0a4:	d10c      	bne.n	800d0c0 <_svfiprintf_r+0x130>
 800d0a6:	7863      	ldrb	r3, [r4, #1]
 800d0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0aa:	d134      	bne.n	800d116 <_svfiprintf_r+0x186>
 800d0ac:	9b03      	ldr	r3, [sp, #12]
 800d0ae:	1d1a      	adds	r2, r3, #4
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	9203      	str	r2, [sp, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	bfb8      	it	lt
 800d0b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0bc:	3402      	adds	r4, #2
 800d0be:	9305      	str	r3, [sp, #20]
 800d0c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d188 <_svfiprintf_r+0x1f8>
 800d0c4:	7821      	ldrb	r1, [r4, #0]
 800d0c6:	2203      	movs	r2, #3
 800d0c8:	4650      	mov	r0, sl
 800d0ca:	f7f3 f881 	bl	80001d0 <memchr>
 800d0ce:	b138      	cbz	r0, 800d0e0 <_svfiprintf_r+0x150>
 800d0d0:	9b04      	ldr	r3, [sp, #16]
 800d0d2:	eba0 000a 	sub.w	r0, r0, sl
 800d0d6:	2240      	movs	r2, #64	; 0x40
 800d0d8:	4082      	lsls	r2, r0
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	3401      	adds	r4, #1
 800d0de:	9304      	str	r3, [sp, #16]
 800d0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0e4:	4825      	ldr	r0, [pc, #148]	; (800d17c <_svfiprintf_r+0x1ec>)
 800d0e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0ea:	2206      	movs	r2, #6
 800d0ec:	f7f3 f870 	bl	80001d0 <memchr>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d038      	beq.n	800d166 <_svfiprintf_r+0x1d6>
 800d0f4:	4b22      	ldr	r3, [pc, #136]	; (800d180 <_svfiprintf_r+0x1f0>)
 800d0f6:	bb1b      	cbnz	r3, 800d140 <_svfiprintf_r+0x1b0>
 800d0f8:	9b03      	ldr	r3, [sp, #12]
 800d0fa:	3307      	adds	r3, #7
 800d0fc:	f023 0307 	bic.w	r3, r3, #7
 800d100:	3308      	adds	r3, #8
 800d102:	9303      	str	r3, [sp, #12]
 800d104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d106:	4433      	add	r3, r6
 800d108:	9309      	str	r3, [sp, #36]	; 0x24
 800d10a:	e768      	b.n	800cfde <_svfiprintf_r+0x4e>
 800d10c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d110:	460c      	mov	r4, r1
 800d112:	2001      	movs	r0, #1
 800d114:	e7a6      	b.n	800d064 <_svfiprintf_r+0xd4>
 800d116:	2300      	movs	r3, #0
 800d118:	3401      	adds	r4, #1
 800d11a:	9305      	str	r3, [sp, #20]
 800d11c:	4619      	mov	r1, r3
 800d11e:	f04f 0c0a 	mov.w	ip, #10
 800d122:	4620      	mov	r0, r4
 800d124:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d128:	3a30      	subs	r2, #48	; 0x30
 800d12a:	2a09      	cmp	r2, #9
 800d12c:	d903      	bls.n	800d136 <_svfiprintf_r+0x1a6>
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d0c6      	beq.n	800d0c0 <_svfiprintf_r+0x130>
 800d132:	9105      	str	r1, [sp, #20]
 800d134:	e7c4      	b.n	800d0c0 <_svfiprintf_r+0x130>
 800d136:	fb0c 2101 	mla	r1, ip, r1, r2
 800d13a:	4604      	mov	r4, r0
 800d13c:	2301      	movs	r3, #1
 800d13e:	e7f0      	b.n	800d122 <_svfiprintf_r+0x192>
 800d140:	ab03      	add	r3, sp, #12
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	462a      	mov	r2, r5
 800d146:	4b0f      	ldr	r3, [pc, #60]	; (800d184 <_svfiprintf_r+0x1f4>)
 800d148:	a904      	add	r1, sp, #16
 800d14a:	4638      	mov	r0, r7
 800d14c:	f7fd fed4 	bl	800aef8 <_printf_float>
 800d150:	1c42      	adds	r2, r0, #1
 800d152:	4606      	mov	r6, r0
 800d154:	d1d6      	bne.n	800d104 <_svfiprintf_r+0x174>
 800d156:	89ab      	ldrh	r3, [r5, #12]
 800d158:	065b      	lsls	r3, r3, #25
 800d15a:	f53f af2d 	bmi.w	800cfb8 <_svfiprintf_r+0x28>
 800d15e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d160:	b01d      	add	sp, #116	; 0x74
 800d162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d166:	ab03      	add	r3, sp, #12
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	462a      	mov	r2, r5
 800d16c:	4b05      	ldr	r3, [pc, #20]	; (800d184 <_svfiprintf_r+0x1f4>)
 800d16e:	a904      	add	r1, sp, #16
 800d170:	4638      	mov	r0, r7
 800d172:	f7fe f965 	bl	800b440 <_printf_i>
 800d176:	e7eb      	b.n	800d150 <_svfiprintf_r+0x1c0>
 800d178:	0800dcf4 	.word	0x0800dcf4
 800d17c:	0800dcfe 	.word	0x0800dcfe
 800d180:	0800aef9 	.word	0x0800aef9
 800d184:	0800cedd 	.word	0x0800cedd
 800d188:	0800dcfa 	.word	0x0800dcfa

0800d18c <__sflush_r>:
 800d18c:	898a      	ldrh	r2, [r1, #12]
 800d18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d192:	4605      	mov	r5, r0
 800d194:	0710      	lsls	r0, r2, #28
 800d196:	460c      	mov	r4, r1
 800d198:	d458      	bmi.n	800d24c <__sflush_r+0xc0>
 800d19a:	684b      	ldr	r3, [r1, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dc05      	bgt.n	800d1ac <__sflush_r+0x20>
 800d1a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	dc02      	bgt.n	800d1ac <__sflush_r+0x20>
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1ae:	2e00      	cmp	r6, #0
 800d1b0:	d0f9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1b8:	682f      	ldr	r7, [r5, #0]
 800d1ba:	6a21      	ldr	r1, [r4, #32]
 800d1bc:	602b      	str	r3, [r5, #0]
 800d1be:	d032      	beq.n	800d226 <__sflush_r+0x9a>
 800d1c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1c2:	89a3      	ldrh	r3, [r4, #12]
 800d1c4:	075a      	lsls	r2, r3, #29
 800d1c6:	d505      	bpl.n	800d1d4 <__sflush_r+0x48>
 800d1c8:	6863      	ldr	r3, [r4, #4]
 800d1ca:	1ac0      	subs	r0, r0, r3
 800d1cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1ce:	b10b      	cbz	r3, 800d1d4 <__sflush_r+0x48>
 800d1d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1d2:	1ac0      	subs	r0, r0, r3
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1da:	6a21      	ldr	r1, [r4, #32]
 800d1dc:	4628      	mov	r0, r5
 800d1de:	47b0      	blx	r6
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	89a3      	ldrh	r3, [r4, #12]
 800d1e4:	d106      	bne.n	800d1f4 <__sflush_r+0x68>
 800d1e6:	6829      	ldr	r1, [r5, #0]
 800d1e8:	291d      	cmp	r1, #29
 800d1ea:	d82b      	bhi.n	800d244 <__sflush_r+0xb8>
 800d1ec:	4a29      	ldr	r2, [pc, #164]	; (800d294 <__sflush_r+0x108>)
 800d1ee:	410a      	asrs	r2, r1
 800d1f0:	07d6      	lsls	r6, r2, #31
 800d1f2:	d427      	bmi.n	800d244 <__sflush_r+0xb8>
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	6062      	str	r2, [r4, #4]
 800d1f8:	04d9      	lsls	r1, r3, #19
 800d1fa:	6922      	ldr	r2, [r4, #16]
 800d1fc:	6022      	str	r2, [r4, #0]
 800d1fe:	d504      	bpl.n	800d20a <__sflush_r+0x7e>
 800d200:	1c42      	adds	r2, r0, #1
 800d202:	d101      	bne.n	800d208 <__sflush_r+0x7c>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b903      	cbnz	r3, 800d20a <__sflush_r+0x7e>
 800d208:	6560      	str	r0, [r4, #84]	; 0x54
 800d20a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d20c:	602f      	str	r7, [r5, #0]
 800d20e:	2900      	cmp	r1, #0
 800d210:	d0c9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d216:	4299      	cmp	r1, r3
 800d218:	d002      	beq.n	800d220 <__sflush_r+0x94>
 800d21a:	4628      	mov	r0, r5
 800d21c:	f7ff fa96 	bl	800c74c <_free_r>
 800d220:	2000      	movs	r0, #0
 800d222:	6360      	str	r0, [r4, #52]	; 0x34
 800d224:	e7c0      	b.n	800d1a8 <__sflush_r+0x1c>
 800d226:	2301      	movs	r3, #1
 800d228:	4628      	mov	r0, r5
 800d22a:	47b0      	blx	r6
 800d22c:	1c41      	adds	r1, r0, #1
 800d22e:	d1c8      	bne.n	800d1c2 <__sflush_r+0x36>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0c5      	beq.n	800d1c2 <__sflush_r+0x36>
 800d236:	2b1d      	cmp	r3, #29
 800d238:	d001      	beq.n	800d23e <__sflush_r+0xb2>
 800d23a:	2b16      	cmp	r3, #22
 800d23c:	d101      	bne.n	800d242 <__sflush_r+0xb6>
 800d23e:	602f      	str	r7, [r5, #0]
 800d240:	e7b1      	b.n	800d1a6 <__sflush_r+0x1a>
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d248:	81a3      	strh	r3, [r4, #12]
 800d24a:	e7ad      	b.n	800d1a8 <__sflush_r+0x1c>
 800d24c:	690f      	ldr	r7, [r1, #16]
 800d24e:	2f00      	cmp	r7, #0
 800d250:	d0a9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d252:	0793      	lsls	r3, r2, #30
 800d254:	680e      	ldr	r6, [r1, #0]
 800d256:	bf08      	it	eq
 800d258:	694b      	ldreq	r3, [r1, #20]
 800d25a:	600f      	str	r7, [r1, #0]
 800d25c:	bf18      	it	ne
 800d25e:	2300      	movne	r3, #0
 800d260:	eba6 0807 	sub.w	r8, r6, r7
 800d264:	608b      	str	r3, [r1, #8]
 800d266:	f1b8 0f00 	cmp.w	r8, #0
 800d26a:	dd9c      	ble.n	800d1a6 <__sflush_r+0x1a>
 800d26c:	6a21      	ldr	r1, [r4, #32]
 800d26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d270:	4643      	mov	r3, r8
 800d272:	463a      	mov	r2, r7
 800d274:	4628      	mov	r0, r5
 800d276:	47b0      	blx	r6
 800d278:	2800      	cmp	r0, #0
 800d27a:	dc06      	bgt.n	800d28a <__sflush_r+0xfe>
 800d27c:	89a3      	ldrh	r3, [r4, #12]
 800d27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d282:	81a3      	strh	r3, [r4, #12]
 800d284:	f04f 30ff 	mov.w	r0, #4294967295
 800d288:	e78e      	b.n	800d1a8 <__sflush_r+0x1c>
 800d28a:	4407      	add	r7, r0
 800d28c:	eba8 0800 	sub.w	r8, r8, r0
 800d290:	e7e9      	b.n	800d266 <__sflush_r+0xda>
 800d292:	bf00      	nop
 800d294:	dfbffffe 	.word	0xdfbffffe

0800d298 <_fflush_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	690b      	ldr	r3, [r1, #16]
 800d29c:	4605      	mov	r5, r0
 800d29e:	460c      	mov	r4, r1
 800d2a0:	b913      	cbnz	r3, 800d2a8 <_fflush_r+0x10>
 800d2a2:	2500      	movs	r5, #0
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	b118      	cbz	r0, 800d2b2 <_fflush_r+0x1a>
 800d2aa:	6a03      	ldr	r3, [r0, #32]
 800d2ac:	b90b      	cbnz	r3, 800d2b2 <_fflush_r+0x1a>
 800d2ae:	f7fe fa75 	bl	800b79c <__sinit>
 800d2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d0f3      	beq.n	800d2a2 <_fflush_r+0xa>
 800d2ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2bc:	07d0      	lsls	r0, r2, #31
 800d2be:	d404      	bmi.n	800d2ca <_fflush_r+0x32>
 800d2c0:	0599      	lsls	r1, r3, #22
 800d2c2:	d402      	bmi.n	800d2ca <_fflush_r+0x32>
 800d2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2c6:	f7fe fbc4 	bl	800ba52 <__retarget_lock_acquire_recursive>
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	4621      	mov	r1, r4
 800d2ce:	f7ff ff5d 	bl	800d18c <__sflush_r>
 800d2d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2d4:	07da      	lsls	r2, r3, #31
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	d4e4      	bmi.n	800d2a4 <_fflush_r+0xc>
 800d2da:	89a3      	ldrh	r3, [r4, #12]
 800d2dc:	059b      	lsls	r3, r3, #22
 800d2de:	d4e1      	bmi.n	800d2a4 <_fflush_r+0xc>
 800d2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2e2:	f7fe fbb7 	bl	800ba54 <__retarget_lock_release_recursive>
 800d2e6:	e7dd      	b.n	800d2a4 <_fflush_r+0xc>

0800d2e8 <memmove>:
 800d2e8:	4288      	cmp	r0, r1
 800d2ea:	b510      	push	{r4, lr}
 800d2ec:	eb01 0402 	add.w	r4, r1, r2
 800d2f0:	d902      	bls.n	800d2f8 <memmove+0x10>
 800d2f2:	4284      	cmp	r4, r0
 800d2f4:	4623      	mov	r3, r4
 800d2f6:	d807      	bhi.n	800d308 <memmove+0x20>
 800d2f8:	1e43      	subs	r3, r0, #1
 800d2fa:	42a1      	cmp	r1, r4
 800d2fc:	d008      	beq.n	800d310 <memmove+0x28>
 800d2fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d302:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d306:	e7f8      	b.n	800d2fa <memmove+0x12>
 800d308:	4402      	add	r2, r0
 800d30a:	4601      	mov	r1, r0
 800d30c:	428a      	cmp	r2, r1
 800d30e:	d100      	bne.n	800d312 <memmove+0x2a>
 800d310:	bd10      	pop	{r4, pc}
 800d312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d31a:	e7f7      	b.n	800d30c <memmove+0x24>

0800d31c <memcpy>:
 800d31c:	440a      	add	r2, r1
 800d31e:	4291      	cmp	r1, r2
 800d320:	f100 33ff 	add.w	r3, r0, #4294967295
 800d324:	d100      	bne.n	800d328 <memcpy+0xc>
 800d326:	4770      	bx	lr
 800d328:	b510      	push	{r4, lr}
 800d32a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d32e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d332:	4291      	cmp	r1, r2
 800d334:	d1f9      	bne.n	800d32a <memcpy+0xe>
 800d336:	bd10      	pop	{r4, pc}

0800d338 <__assert_func>:
 800d338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d33a:	4614      	mov	r4, r2
 800d33c:	461a      	mov	r2, r3
 800d33e:	4b09      	ldr	r3, [pc, #36]	; (800d364 <__assert_func+0x2c>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4605      	mov	r5, r0
 800d344:	68d8      	ldr	r0, [r3, #12]
 800d346:	b14c      	cbz	r4, 800d35c <__assert_func+0x24>
 800d348:	4b07      	ldr	r3, [pc, #28]	; (800d368 <__assert_func+0x30>)
 800d34a:	9100      	str	r1, [sp, #0]
 800d34c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d350:	4906      	ldr	r1, [pc, #24]	; (800d36c <__assert_func+0x34>)
 800d352:	462b      	mov	r3, r5
 800d354:	f000 f872 	bl	800d43c <fiprintf>
 800d358:	f000 f882 	bl	800d460 <abort>
 800d35c:	4b04      	ldr	r3, [pc, #16]	; (800d370 <__assert_func+0x38>)
 800d35e:	461c      	mov	r4, r3
 800d360:	e7f3      	b.n	800d34a <__assert_func+0x12>
 800d362:	bf00      	nop
 800d364:	20000084 	.word	0x20000084
 800d368:	0800dd0f 	.word	0x0800dd0f
 800d36c:	0800dd1c 	.word	0x0800dd1c
 800d370:	0800dd4a 	.word	0x0800dd4a

0800d374 <_calloc_r>:
 800d374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d376:	fba1 2402 	umull	r2, r4, r1, r2
 800d37a:	b94c      	cbnz	r4, 800d390 <_calloc_r+0x1c>
 800d37c:	4611      	mov	r1, r2
 800d37e:	9201      	str	r2, [sp, #4]
 800d380:	f7fd fc8e 	bl	800aca0 <_malloc_r>
 800d384:	9a01      	ldr	r2, [sp, #4]
 800d386:	4605      	mov	r5, r0
 800d388:	b930      	cbnz	r0, 800d398 <_calloc_r+0x24>
 800d38a:	4628      	mov	r0, r5
 800d38c:	b003      	add	sp, #12
 800d38e:	bd30      	pop	{r4, r5, pc}
 800d390:	220c      	movs	r2, #12
 800d392:	6002      	str	r2, [r0, #0]
 800d394:	2500      	movs	r5, #0
 800d396:	e7f8      	b.n	800d38a <_calloc_r+0x16>
 800d398:	4621      	mov	r1, r4
 800d39a:	f7fe facc 	bl	800b936 <memset>
 800d39e:	e7f4      	b.n	800d38a <_calloc_r+0x16>

0800d3a0 <__ascii_mbtowc>:
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	b901      	cbnz	r1, 800d3a6 <__ascii_mbtowc+0x6>
 800d3a4:	a901      	add	r1, sp, #4
 800d3a6:	b142      	cbz	r2, 800d3ba <__ascii_mbtowc+0x1a>
 800d3a8:	b14b      	cbz	r3, 800d3be <__ascii_mbtowc+0x1e>
 800d3aa:	7813      	ldrb	r3, [r2, #0]
 800d3ac:	600b      	str	r3, [r1, #0]
 800d3ae:	7812      	ldrb	r2, [r2, #0]
 800d3b0:	1e10      	subs	r0, r2, #0
 800d3b2:	bf18      	it	ne
 800d3b4:	2001      	movne	r0, #1
 800d3b6:	b002      	add	sp, #8
 800d3b8:	4770      	bx	lr
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	e7fb      	b.n	800d3b6 <__ascii_mbtowc+0x16>
 800d3be:	f06f 0001 	mvn.w	r0, #1
 800d3c2:	e7f8      	b.n	800d3b6 <__ascii_mbtowc+0x16>

0800d3c4 <_realloc_r>:
 800d3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c8:	4680      	mov	r8, r0
 800d3ca:	4614      	mov	r4, r2
 800d3cc:	460e      	mov	r6, r1
 800d3ce:	b921      	cbnz	r1, 800d3da <_realloc_r+0x16>
 800d3d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d4:	4611      	mov	r1, r2
 800d3d6:	f7fd bc63 	b.w	800aca0 <_malloc_r>
 800d3da:	b92a      	cbnz	r2, 800d3e8 <_realloc_r+0x24>
 800d3dc:	f7ff f9b6 	bl	800c74c <_free_r>
 800d3e0:	4625      	mov	r5, r4
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e8:	f000 f841 	bl	800d46e <_malloc_usable_size_r>
 800d3ec:	4284      	cmp	r4, r0
 800d3ee:	4607      	mov	r7, r0
 800d3f0:	d802      	bhi.n	800d3f8 <_realloc_r+0x34>
 800d3f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3f6:	d812      	bhi.n	800d41e <_realloc_r+0x5a>
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	4640      	mov	r0, r8
 800d3fc:	f7fd fc50 	bl	800aca0 <_malloc_r>
 800d400:	4605      	mov	r5, r0
 800d402:	2800      	cmp	r0, #0
 800d404:	d0ed      	beq.n	800d3e2 <_realloc_r+0x1e>
 800d406:	42bc      	cmp	r4, r7
 800d408:	4622      	mov	r2, r4
 800d40a:	4631      	mov	r1, r6
 800d40c:	bf28      	it	cs
 800d40e:	463a      	movcs	r2, r7
 800d410:	f7ff ff84 	bl	800d31c <memcpy>
 800d414:	4631      	mov	r1, r6
 800d416:	4640      	mov	r0, r8
 800d418:	f7ff f998 	bl	800c74c <_free_r>
 800d41c:	e7e1      	b.n	800d3e2 <_realloc_r+0x1e>
 800d41e:	4635      	mov	r5, r6
 800d420:	e7df      	b.n	800d3e2 <_realloc_r+0x1e>

0800d422 <__ascii_wctomb>:
 800d422:	b149      	cbz	r1, 800d438 <__ascii_wctomb+0x16>
 800d424:	2aff      	cmp	r2, #255	; 0xff
 800d426:	bf85      	ittet	hi
 800d428:	238a      	movhi	r3, #138	; 0x8a
 800d42a:	6003      	strhi	r3, [r0, #0]
 800d42c:	700a      	strbls	r2, [r1, #0]
 800d42e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d432:	bf98      	it	ls
 800d434:	2001      	movls	r0, #1
 800d436:	4770      	bx	lr
 800d438:	4608      	mov	r0, r1
 800d43a:	4770      	bx	lr

0800d43c <fiprintf>:
 800d43c:	b40e      	push	{r1, r2, r3}
 800d43e:	b503      	push	{r0, r1, lr}
 800d440:	4601      	mov	r1, r0
 800d442:	ab03      	add	r3, sp, #12
 800d444:	4805      	ldr	r0, [pc, #20]	; (800d45c <fiprintf+0x20>)
 800d446:	f853 2b04 	ldr.w	r2, [r3], #4
 800d44a:	6800      	ldr	r0, [r0, #0]
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	f000 f83f 	bl	800d4d0 <_vfiprintf_r>
 800d452:	b002      	add	sp, #8
 800d454:	f85d eb04 	ldr.w	lr, [sp], #4
 800d458:	b003      	add	sp, #12
 800d45a:	4770      	bx	lr
 800d45c:	20000084 	.word	0x20000084

0800d460 <abort>:
 800d460:	b508      	push	{r3, lr}
 800d462:	2006      	movs	r0, #6
 800d464:	f000 fa0c 	bl	800d880 <raise>
 800d468:	2001      	movs	r0, #1
 800d46a:	f7f4 fce5 	bl	8001e38 <_exit>

0800d46e <_malloc_usable_size_r>:
 800d46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d472:	1f18      	subs	r0, r3, #4
 800d474:	2b00      	cmp	r3, #0
 800d476:	bfbc      	itt	lt
 800d478:	580b      	ldrlt	r3, [r1, r0]
 800d47a:	18c0      	addlt	r0, r0, r3
 800d47c:	4770      	bx	lr

0800d47e <__sfputc_r>:
 800d47e:	6893      	ldr	r3, [r2, #8]
 800d480:	3b01      	subs	r3, #1
 800d482:	2b00      	cmp	r3, #0
 800d484:	b410      	push	{r4}
 800d486:	6093      	str	r3, [r2, #8]
 800d488:	da08      	bge.n	800d49c <__sfputc_r+0x1e>
 800d48a:	6994      	ldr	r4, [r2, #24]
 800d48c:	42a3      	cmp	r3, r4
 800d48e:	db01      	blt.n	800d494 <__sfputc_r+0x16>
 800d490:	290a      	cmp	r1, #10
 800d492:	d103      	bne.n	800d49c <__sfputc_r+0x1e>
 800d494:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d498:	f000 b934 	b.w	800d704 <__swbuf_r>
 800d49c:	6813      	ldr	r3, [r2, #0]
 800d49e:	1c58      	adds	r0, r3, #1
 800d4a0:	6010      	str	r0, [r2, #0]
 800d4a2:	7019      	strb	r1, [r3, #0]
 800d4a4:	4608      	mov	r0, r1
 800d4a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <__sfputs_r>:
 800d4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	460f      	mov	r7, r1
 800d4b2:	4614      	mov	r4, r2
 800d4b4:	18d5      	adds	r5, r2, r3
 800d4b6:	42ac      	cmp	r4, r5
 800d4b8:	d101      	bne.n	800d4be <__sfputs_r+0x12>
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	e007      	b.n	800d4ce <__sfputs_r+0x22>
 800d4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4c2:	463a      	mov	r2, r7
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	f7ff ffda 	bl	800d47e <__sfputc_r>
 800d4ca:	1c43      	adds	r3, r0, #1
 800d4cc:	d1f3      	bne.n	800d4b6 <__sfputs_r+0xa>
 800d4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4d0 <_vfiprintf_r>:
 800d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d4:	460d      	mov	r5, r1
 800d4d6:	b09d      	sub	sp, #116	; 0x74
 800d4d8:	4614      	mov	r4, r2
 800d4da:	4698      	mov	r8, r3
 800d4dc:	4606      	mov	r6, r0
 800d4de:	b118      	cbz	r0, 800d4e8 <_vfiprintf_r+0x18>
 800d4e0:	6a03      	ldr	r3, [r0, #32]
 800d4e2:	b90b      	cbnz	r3, 800d4e8 <_vfiprintf_r+0x18>
 800d4e4:	f7fe f95a 	bl	800b79c <__sinit>
 800d4e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4ea:	07d9      	lsls	r1, r3, #31
 800d4ec:	d405      	bmi.n	800d4fa <_vfiprintf_r+0x2a>
 800d4ee:	89ab      	ldrh	r3, [r5, #12]
 800d4f0:	059a      	lsls	r2, r3, #22
 800d4f2:	d402      	bmi.n	800d4fa <_vfiprintf_r+0x2a>
 800d4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4f6:	f7fe faac 	bl	800ba52 <__retarget_lock_acquire_recursive>
 800d4fa:	89ab      	ldrh	r3, [r5, #12]
 800d4fc:	071b      	lsls	r3, r3, #28
 800d4fe:	d501      	bpl.n	800d504 <_vfiprintf_r+0x34>
 800d500:	692b      	ldr	r3, [r5, #16]
 800d502:	b99b      	cbnz	r3, 800d52c <_vfiprintf_r+0x5c>
 800d504:	4629      	mov	r1, r5
 800d506:	4630      	mov	r0, r6
 800d508:	f000 f93a 	bl	800d780 <__swsetup_r>
 800d50c:	b170      	cbz	r0, 800d52c <_vfiprintf_r+0x5c>
 800d50e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d510:	07dc      	lsls	r4, r3, #31
 800d512:	d504      	bpl.n	800d51e <_vfiprintf_r+0x4e>
 800d514:	f04f 30ff 	mov.w	r0, #4294967295
 800d518:	b01d      	add	sp, #116	; 0x74
 800d51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51e:	89ab      	ldrh	r3, [r5, #12]
 800d520:	0598      	lsls	r0, r3, #22
 800d522:	d4f7      	bmi.n	800d514 <_vfiprintf_r+0x44>
 800d524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d526:	f7fe fa95 	bl	800ba54 <__retarget_lock_release_recursive>
 800d52a:	e7f3      	b.n	800d514 <_vfiprintf_r+0x44>
 800d52c:	2300      	movs	r3, #0
 800d52e:	9309      	str	r3, [sp, #36]	; 0x24
 800d530:	2320      	movs	r3, #32
 800d532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d536:	f8cd 800c 	str.w	r8, [sp, #12]
 800d53a:	2330      	movs	r3, #48	; 0x30
 800d53c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d6f0 <_vfiprintf_r+0x220>
 800d540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d544:	f04f 0901 	mov.w	r9, #1
 800d548:	4623      	mov	r3, r4
 800d54a:	469a      	mov	sl, r3
 800d54c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d550:	b10a      	cbz	r2, 800d556 <_vfiprintf_r+0x86>
 800d552:	2a25      	cmp	r2, #37	; 0x25
 800d554:	d1f9      	bne.n	800d54a <_vfiprintf_r+0x7a>
 800d556:	ebba 0b04 	subs.w	fp, sl, r4
 800d55a:	d00b      	beq.n	800d574 <_vfiprintf_r+0xa4>
 800d55c:	465b      	mov	r3, fp
 800d55e:	4622      	mov	r2, r4
 800d560:	4629      	mov	r1, r5
 800d562:	4630      	mov	r0, r6
 800d564:	f7ff ffa2 	bl	800d4ac <__sfputs_r>
 800d568:	3001      	adds	r0, #1
 800d56a:	f000 80a9 	beq.w	800d6c0 <_vfiprintf_r+0x1f0>
 800d56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d570:	445a      	add	r2, fp
 800d572:	9209      	str	r2, [sp, #36]	; 0x24
 800d574:	f89a 3000 	ldrb.w	r3, [sl]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 80a1 	beq.w	800d6c0 <_vfiprintf_r+0x1f0>
 800d57e:	2300      	movs	r3, #0
 800d580:	f04f 32ff 	mov.w	r2, #4294967295
 800d584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d588:	f10a 0a01 	add.w	sl, sl, #1
 800d58c:	9304      	str	r3, [sp, #16]
 800d58e:	9307      	str	r3, [sp, #28]
 800d590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d594:	931a      	str	r3, [sp, #104]	; 0x68
 800d596:	4654      	mov	r4, sl
 800d598:	2205      	movs	r2, #5
 800d59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d59e:	4854      	ldr	r0, [pc, #336]	; (800d6f0 <_vfiprintf_r+0x220>)
 800d5a0:	f7f2 fe16 	bl	80001d0 <memchr>
 800d5a4:	9a04      	ldr	r2, [sp, #16]
 800d5a6:	b9d8      	cbnz	r0, 800d5e0 <_vfiprintf_r+0x110>
 800d5a8:	06d1      	lsls	r1, r2, #27
 800d5aa:	bf44      	itt	mi
 800d5ac:	2320      	movmi	r3, #32
 800d5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5b2:	0713      	lsls	r3, r2, #28
 800d5b4:	bf44      	itt	mi
 800d5b6:	232b      	movmi	r3, #43	; 0x2b
 800d5b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5c2:	d015      	beq.n	800d5f0 <_vfiprintf_r+0x120>
 800d5c4:	9a07      	ldr	r2, [sp, #28]
 800d5c6:	4654      	mov	r4, sl
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	f04f 0c0a 	mov.w	ip, #10
 800d5ce:	4621      	mov	r1, r4
 800d5d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5d4:	3b30      	subs	r3, #48	; 0x30
 800d5d6:	2b09      	cmp	r3, #9
 800d5d8:	d94d      	bls.n	800d676 <_vfiprintf_r+0x1a6>
 800d5da:	b1b0      	cbz	r0, 800d60a <_vfiprintf_r+0x13a>
 800d5dc:	9207      	str	r2, [sp, #28]
 800d5de:	e014      	b.n	800d60a <_vfiprintf_r+0x13a>
 800d5e0:	eba0 0308 	sub.w	r3, r0, r8
 800d5e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	9304      	str	r3, [sp, #16]
 800d5ec:	46a2      	mov	sl, r4
 800d5ee:	e7d2      	b.n	800d596 <_vfiprintf_r+0xc6>
 800d5f0:	9b03      	ldr	r3, [sp, #12]
 800d5f2:	1d19      	adds	r1, r3, #4
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	9103      	str	r1, [sp, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	bfbb      	ittet	lt
 800d5fc:	425b      	neglt	r3, r3
 800d5fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d602:	9307      	strge	r3, [sp, #28]
 800d604:	9307      	strlt	r3, [sp, #28]
 800d606:	bfb8      	it	lt
 800d608:	9204      	strlt	r2, [sp, #16]
 800d60a:	7823      	ldrb	r3, [r4, #0]
 800d60c:	2b2e      	cmp	r3, #46	; 0x2e
 800d60e:	d10c      	bne.n	800d62a <_vfiprintf_r+0x15a>
 800d610:	7863      	ldrb	r3, [r4, #1]
 800d612:	2b2a      	cmp	r3, #42	; 0x2a
 800d614:	d134      	bne.n	800d680 <_vfiprintf_r+0x1b0>
 800d616:	9b03      	ldr	r3, [sp, #12]
 800d618:	1d1a      	adds	r2, r3, #4
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	9203      	str	r2, [sp, #12]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	bfb8      	it	lt
 800d622:	f04f 33ff 	movlt.w	r3, #4294967295
 800d626:	3402      	adds	r4, #2
 800d628:	9305      	str	r3, [sp, #20]
 800d62a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d700 <_vfiprintf_r+0x230>
 800d62e:	7821      	ldrb	r1, [r4, #0]
 800d630:	2203      	movs	r2, #3
 800d632:	4650      	mov	r0, sl
 800d634:	f7f2 fdcc 	bl	80001d0 <memchr>
 800d638:	b138      	cbz	r0, 800d64a <_vfiprintf_r+0x17a>
 800d63a:	9b04      	ldr	r3, [sp, #16]
 800d63c:	eba0 000a 	sub.w	r0, r0, sl
 800d640:	2240      	movs	r2, #64	; 0x40
 800d642:	4082      	lsls	r2, r0
 800d644:	4313      	orrs	r3, r2
 800d646:	3401      	adds	r4, #1
 800d648:	9304      	str	r3, [sp, #16]
 800d64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d64e:	4829      	ldr	r0, [pc, #164]	; (800d6f4 <_vfiprintf_r+0x224>)
 800d650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d654:	2206      	movs	r2, #6
 800d656:	f7f2 fdbb 	bl	80001d0 <memchr>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d03f      	beq.n	800d6de <_vfiprintf_r+0x20e>
 800d65e:	4b26      	ldr	r3, [pc, #152]	; (800d6f8 <_vfiprintf_r+0x228>)
 800d660:	bb1b      	cbnz	r3, 800d6aa <_vfiprintf_r+0x1da>
 800d662:	9b03      	ldr	r3, [sp, #12]
 800d664:	3307      	adds	r3, #7
 800d666:	f023 0307 	bic.w	r3, r3, #7
 800d66a:	3308      	adds	r3, #8
 800d66c:	9303      	str	r3, [sp, #12]
 800d66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d670:	443b      	add	r3, r7
 800d672:	9309      	str	r3, [sp, #36]	; 0x24
 800d674:	e768      	b.n	800d548 <_vfiprintf_r+0x78>
 800d676:	fb0c 3202 	mla	r2, ip, r2, r3
 800d67a:	460c      	mov	r4, r1
 800d67c:	2001      	movs	r0, #1
 800d67e:	e7a6      	b.n	800d5ce <_vfiprintf_r+0xfe>
 800d680:	2300      	movs	r3, #0
 800d682:	3401      	adds	r4, #1
 800d684:	9305      	str	r3, [sp, #20]
 800d686:	4619      	mov	r1, r3
 800d688:	f04f 0c0a 	mov.w	ip, #10
 800d68c:	4620      	mov	r0, r4
 800d68e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d692:	3a30      	subs	r2, #48	; 0x30
 800d694:	2a09      	cmp	r2, #9
 800d696:	d903      	bls.n	800d6a0 <_vfiprintf_r+0x1d0>
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d0c6      	beq.n	800d62a <_vfiprintf_r+0x15a>
 800d69c:	9105      	str	r1, [sp, #20]
 800d69e:	e7c4      	b.n	800d62a <_vfiprintf_r+0x15a>
 800d6a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e7f0      	b.n	800d68c <_vfiprintf_r+0x1bc>
 800d6aa:	ab03      	add	r3, sp, #12
 800d6ac:	9300      	str	r3, [sp, #0]
 800d6ae:	462a      	mov	r2, r5
 800d6b0:	4b12      	ldr	r3, [pc, #72]	; (800d6fc <_vfiprintf_r+0x22c>)
 800d6b2:	a904      	add	r1, sp, #16
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	f7fd fc1f 	bl	800aef8 <_printf_float>
 800d6ba:	4607      	mov	r7, r0
 800d6bc:	1c78      	adds	r0, r7, #1
 800d6be:	d1d6      	bne.n	800d66e <_vfiprintf_r+0x19e>
 800d6c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6c2:	07d9      	lsls	r1, r3, #31
 800d6c4:	d405      	bmi.n	800d6d2 <_vfiprintf_r+0x202>
 800d6c6:	89ab      	ldrh	r3, [r5, #12]
 800d6c8:	059a      	lsls	r2, r3, #22
 800d6ca:	d402      	bmi.n	800d6d2 <_vfiprintf_r+0x202>
 800d6cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ce:	f7fe f9c1 	bl	800ba54 <__retarget_lock_release_recursive>
 800d6d2:	89ab      	ldrh	r3, [r5, #12]
 800d6d4:	065b      	lsls	r3, r3, #25
 800d6d6:	f53f af1d 	bmi.w	800d514 <_vfiprintf_r+0x44>
 800d6da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6dc:	e71c      	b.n	800d518 <_vfiprintf_r+0x48>
 800d6de:	ab03      	add	r3, sp, #12
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	462a      	mov	r2, r5
 800d6e4:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <_vfiprintf_r+0x22c>)
 800d6e6:	a904      	add	r1, sp, #16
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	f7fd fea9 	bl	800b440 <_printf_i>
 800d6ee:	e7e4      	b.n	800d6ba <_vfiprintf_r+0x1ea>
 800d6f0:	0800dcf4 	.word	0x0800dcf4
 800d6f4:	0800dcfe 	.word	0x0800dcfe
 800d6f8:	0800aef9 	.word	0x0800aef9
 800d6fc:	0800d4ad 	.word	0x0800d4ad
 800d700:	0800dcfa 	.word	0x0800dcfa

0800d704 <__swbuf_r>:
 800d704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d706:	460e      	mov	r6, r1
 800d708:	4614      	mov	r4, r2
 800d70a:	4605      	mov	r5, r0
 800d70c:	b118      	cbz	r0, 800d716 <__swbuf_r+0x12>
 800d70e:	6a03      	ldr	r3, [r0, #32]
 800d710:	b90b      	cbnz	r3, 800d716 <__swbuf_r+0x12>
 800d712:	f7fe f843 	bl	800b79c <__sinit>
 800d716:	69a3      	ldr	r3, [r4, #24]
 800d718:	60a3      	str	r3, [r4, #8]
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	071a      	lsls	r2, r3, #28
 800d71e:	d525      	bpl.n	800d76c <__swbuf_r+0x68>
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	b31b      	cbz	r3, 800d76c <__swbuf_r+0x68>
 800d724:	6823      	ldr	r3, [r4, #0]
 800d726:	6922      	ldr	r2, [r4, #16]
 800d728:	1a98      	subs	r0, r3, r2
 800d72a:	6963      	ldr	r3, [r4, #20]
 800d72c:	b2f6      	uxtb	r6, r6
 800d72e:	4283      	cmp	r3, r0
 800d730:	4637      	mov	r7, r6
 800d732:	dc04      	bgt.n	800d73e <__swbuf_r+0x3a>
 800d734:	4621      	mov	r1, r4
 800d736:	4628      	mov	r0, r5
 800d738:	f7ff fdae 	bl	800d298 <_fflush_r>
 800d73c:	b9e0      	cbnz	r0, 800d778 <__swbuf_r+0x74>
 800d73e:	68a3      	ldr	r3, [r4, #8]
 800d740:	3b01      	subs	r3, #1
 800d742:	60a3      	str	r3, [r4, #8]
 800d744:	6823      	ldr	r3, [r4, #0]
 800d746:	1c5a      	adds	r2, r3, #1
 800d748:	6022      	str	r2, [r4, #0]
 800d74a:	701e      	strb	r6, [r3, #0]
 800d74c:	6962      	ldr	r2, [r4, #20]
 800d74e:	1c43      	adds	r3, r0, #1
 800d750:	429a      	cmp	r2, r3
 800d752:	d004      	beq.n	800d75e <__swbuf_r+0x5a>
 800d754:	89a3      	ldrh	r3, [r4, #12]
 800d756:	07db      	lsls	r3, r3, #31
 800d758:	d506      	bpl.n	800d768 <__swbuf_r+0x64>
 800d75a:	2e0a      	cmp	r6, #10
 800d75c:	d104      	bne.n	800d768 <__swbuf_r+0x64>
 800d75e:	4621      	mov	r1, r4
 800d760:	4628      	mov	r0, r5
 800d762:	f7ff fd99 	bl	800d298 <_fflush_r>
 800d766:	b938      	cbnz	r0, 800d778 <__swbuf_r+0x74>
 800d768:	4638      	mov	r0, r7
 800d76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d76c:	4621      	mov	r1, r4
 800d76e:	4628      	mov	r0, r5
 800d770:	f000 f806 	bl	800d780 <__swsetup_r>
 800d774:	2800      	cmp	r0, #0
 800d776:	d0d5      	beq.n	800d724 <__swbuf_r+0x20>
 800d778:	f04f 37ff 	mov.w	r7, #4294967295
 800d77c:	e7f4      	b.n	800d768 <__swbuf_r+0x64>
	...

0800d780 <__swsetup_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	4b2a      	ldr	r3, [pc, #168]	; (800d82c <__swsetup_r+0xac>)
 800d784:	4605      	mov	r5, r0
 800d786:	6818      	ldr	r0, [r3, #0]
 800d788:	460c      	mov	r4, r1
 800d78a:	b118      	cbz	r0, 800d794 <__swsetup_r+0x14>
 800d78c:	6a03      	ldr	r3, [r0, #32]
 800d78e:	b90b      	cbnz	r3, 800d794 <__swsetup_r+0x14>
 800d790:	f7fe f804 	bl	800b79c <__sinit>
 800d794:	89a3      	ldrh	r3, [r4, #12]
 800d796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d79a:	0718      	lsls	r0, r3, #28
 800d79c:	d422      	bmi.n	800d7e4 <__swsetup_r+0x64>
 800d79e:	06d9      	lsls	r1, r3, #27
 800d7a0:	d407      	bmi.n	800d7b2 <__swsetup_r+0x32>
 800d7a2:	2309      	movs	r3, #9
 800d7a4:	602b      	str	r3, [r5, #0]
 800d7a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d7aa:	81a3      	strh	r3, [r4, #12]
 800d7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b0:	e034      	b.n	800d81c <__swsetup_r+0x9c>
 800d7b2:	0758      	lsls	r0, r3, #29
 800d7b4:	d512      	bpl.n	800d7dc <__swsetup_r+0x5c>
 800d7b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7b8:	b141      	cbz	r1, 800d7cc <__swsetup_r+0x4c>
 800d7ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7be:	4299      	cmp	r1, r3
 800d7c0:	d002      	beq.n	800d7c8 <__swsetup_r+0x48>
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f7fe ffc2 	bl	800c74c <_free_r>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	6363      	str	r3, [r4, #52]	; 0x34
 800d7cc:	89a3      	ldrh	r3, [r4, #12]
 800d7ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d7d2:	81a3      	strh	r3, [r4, #12]
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6063      	str	r3, [r4, #4]
 800d7d8:	6923      	ldr	r3, [r4, #16]
 800d7da:	6023      	str	r3, [r4, #0]
 800d7dc:	89a3      	ldrh	r3, [r4, #12]
 800d7de:	f043 0308 	orr.w	r3, r3, #8
 800d7e2:	81a3      	strh	r3, [r4, #12]
 800d7e4:	6923      	ldr	r3, [r4, #16]
 800d7e6:	b94b      	cbnz	r3, 800d7fc <__swsetup_r+0x7c>
 800d7e8:	89a3      	ldrh	r3, [r4, #12]
 800d7ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7f2:	d003      	beq.n	800d7fc <__swsetup_r+0x7c>
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f000 f884 	bl	800d904 <__smakebuf_r>
 800d7fc:	89a0      	ldrh	r0, [r4, #12]
 800d7fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d802:	f010 0301 	ands.w	r3, r0, #1
 800d806:	d00a      	beq.n	800d81e <__swsetup_r+0x9e>
 800d808:	2300      	movs	r3, #0
 800d80a:	60a3      	str	r3, [r4, #8]
 800d80c:	6963      	ldr	r3, [r4, #20]
 800d80e:	425b      	negs	r3, r3
 800d810:	61a3      	str	r3, [r4, #24]
 800d812:	6923      	ldr	r3, [r4, #16]
 800d814:	b943      	cbnz	r3, 800d828 <__swsetup_r+0xa8>
 800d816:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d81a:	d1c4      	bne.n	800d7a6 <__swsetup_r+0x26>
 800d81c:	bd38      	pop	{r3, r4, r5, pc}
 800d81e:	0781      	lsls	r1, r0, #30
 800d820:	bf58      	it	pl
 800d822:	6963      	ldrpl	r3, [r4, #20]
 800d824:	60a3      	str	r3, [r4, #8]
 800d826:	e7f4      	b.n	800d812 <__swsetup_r+0x92>
 800d828:	2000      	movs	r0, #0
 800d82a:	e7f7      	b.n	800d81c <__swsetup_r+0x9c>
 800d82c:	20000084 	.word	0x20000084

0800d830 <_raise_r>:
 800d830:	291f      	cmp	r1, #31
 800d832:	b538      	push	{r3, r4, r5, lr}
 800d834:	4604      	mov	r4, r0
 800d836:	460d      	mov	r5, r1
 800d838:	d904      	bls.n	800d844 <_raise_r+0x14>
 800d83a:	2316      	movs	r3, #22
 800d83c:	6003      	str	r3, [r0, #0]
 800d83e:	f04f 30ff 	mov.w	r0, #4294967295
 800d842:	bd38      	pop	{r3, r4, r5, pc}
 800d844:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d846:	b112      	cbz	r2, 800d84e <_raise_r+0x1e>
 800d848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d84c:	b94b      	cbnz	r3, 800d862 <_raise_r+0x32>
 800d84e:	4620      	mov	r0, r4
 800d850:	f000 f830 	bl	800d8b4 <_getpid_r>
 800d854:	462a      	mov	r2, r5
 800d856:	4601      	mov	r1, r0
 800d858:	4620      	mov	r0, r4
 800d85a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d85e:	f000 b817 	b.w	800d890 <_kill_r>
 800d862:	2b01      	cmp	r3, #1
 800d864:	d00a      	beq.n	800d87c <_raise_r+0x4c>
 800d866:	1c59      	adds	r1, r3, #1
 800d868:	d103      	bne.n	800d872 <_raise_r+0x42>
 800d86a:	2316      	movs	r3, #22
 800d86c:	6003      	str	r3, [r0, #0]
 800d86e:	2001      	movs	r0, #1
 800d870:	e7e7      	b.n	800d842 <_raise_r+0x12>
 800d872:	2400      	movs	r4, #0
 800d874:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d878:	4628      	mov	r0, r5
 800d87a:	4798      	blx	r3
 800d87c:	2000      	movs	r0, #0
 800d87e:	e7e0      	b.n	800d842 <_raise_r+0x12>

0800d880 <raise>:
 800d880:	4b02      	ldr	r3, [pc, #8]	; (800d88c <raise+0xc>)
 800d882:	4601      	mov	r1, r0
 800d884:	6818      	ldr	r0, [r3, #0]
 800d886:	f7ff bfd3 	b.w	800d830 <_raise_r>
 800d88a:	bf00      	nop
 800d88c:	20000084 	.word	0x20000084

0800d890 <_kill_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	4d07      	ldr	r5, [pc, #28]	; (800d8b0 <_kill_r+0x20>)
 800d894:	2300      	movs	r3, #0
 800d896:	4604      	mov	r4, r0
 800d898:	4608      	mov	r0, r1
 800d89a:	4611      	mov	r1, r2
 800d89c:	602b      	str	r3, [r5, #0]
 800d89e:	f7f4 fabb 	bl	8001e18 <_kill>
 800d8a2:	1c43      	adds	r3, r0, #1
 800d8a4:	d102      	bne.n	800d8ac <_kill_r+0x1c>
 800d8a6:	682b      	ldr	r3, [r5, #0]
 800d8a8:	b103      	cbz	r3, 800d8ac <_kill_r+0x1c>
 800d8aa:	6023      	str	r3, [r4, #0]
 800d8ac:	bd38      	pop	{r3, r4, r5, pc}
 800d8ae:	bf00      	nop
 800d8b0:	20000cfc 	.word	0x20000cfc

0800d8b4 <_getpid_r>:
 800d8b4:	f7f4 baa8 	b.w	8001e08 <_getpid>

0800d8b8 <__swhatbuf_r>:
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	460c      	mov	r4, r1
 800d8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c0:	2900      	cmp	r1, #0
 800d8c2:	b096      	sub	sp, #88	; 0x58
 800d8c4:	4615      	mov	r5, r2
 800d8c6:	461e      	mov	r6, r3
 800d8c8:	da0d      	bge.n	800d8e6 <__swhatbuf_r+0x2e>
 800d8ca:	89a3      	ldrh	r3, [r4, #12]
 800d8cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d8d0:	f04f 0100 	mov.w	r1, #0
 800d8d4:	bf0c      	ite	eq
 800d8d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d8da:	2340      	movne	r3, #64	; 0x40
 800d8dc:	2000      	movs	r0, #0
 800d8de:	6031      	str	r1, [r6, #0]
 800d8e0:	602b      	str	r3, [r5, #0]
 800d8e2:	b016      	add	sp, #88	; 0x58
 800d8e4:	bd70      	pop	{r4, r5, r6, pc}
 800d8e6:	466a      	mov	r2, sp
 800d8e8:	f000 f848 	bl	800d97c <_fstat_r>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	dbec      	blt.n	800d8ca <__swhatbuf_r+0x12>
 800d8f0:	9901      	ldr	r1, [sp, #4]
 800d8f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d8f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d8fa:	4259      	negs	r1, r3
 800d8fc:	4159      	adcs	r1, r3
 800d8fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d902:	e7eb      	b.n	800d8dc <__swhatbuf_r+0x24>

0800d904 <__smakebuf_r>:
 800d904:	898b      	ldrh	r3, [r1, #12]
 800d906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d908:	079d      	lsls	r5, r3, #30
 800d90a:	4606      	mov	r6, r0
 800d90c:	460c      	mov	r4, r1
 800d90e:	d507      	bpl.n	800d920 <__smakebuf_r+0x1c>
 800d910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d914:	6023      	str	r3, [r4, #0]
 800d916:	6123      	str	r3, [r4, #16]
 800d918:	2301      	movs	r3, #1
 800d91a:	6163      	str	r3, [r4, #20]
 800d91c:	b002      	add	sp, #8
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	ab01      	add	r3, sp, #4
 800d922:	466a      	mov	r2, sp
 800d924:	f7ff ffc8 	bl	800d8b8 <__swhatbuf_r>
 800d928:	9900      	ldr	r1, [sp, #0]
 800d92a:	4605      	mov	r5, r0
 800d92c:	4630      	mov	r0, r6
 800d92e:	f7fd f9b7 	bl	800aca0 <_malloc_r>
 800d932:	b948      	cbnz	r0, 800d948 <__smakebuf_r+0x44>
 800d934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d938:	059a      	lsls	r2, r3, #22
 800d93a:	d4ef      	bmi.n	800d91c <__smakebuf_r+0x18>
 800d93c:	f023 0303 	bic.w	r3, r3, #3
 800d940:	f043 0302 	orr.w	r3, r3, #2
 800d944:	81a3      	strh	r3, [r4, #12]
 800d946:	e7e3      	b.n	800d910 <__smakebuf_r+0xc>
 800d948:	89a3      	ldrh	r3, [r4, #12]
 800d94a:	6020      	str	r0, [r4, #0]
 800d94c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d950:	81a3      	strh	r3, [r4, #12]
 800d952:	9b00      	ldr	r3, [sp, #0]
 800d954:	6163      	str	r3, [r4, #20]
 800d956:	9b01      	ldr	r3, [sp, #4]
 800d958:	6120      	str	r0, [r4, #16]
 800d95a:	b15b      	cbz	r3, 800d974 <__smakebuf_r+0x70>
 800d95c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d960:	4630      	mov	r0, r6
 800d962:	f000 f81d 	bl	800d9a0 <_isatty_r>
 800d966:	b128      	cbz	r0, 800d974 <__smakebuf_r+0x70>
 800d968:	89a3      	ldrh	r3, [r4, #12]
 800d96a:	f023 0303 	bic.w	r3, r3, #3
 800d96e:	f043 0301 	orr.w	r3, r3, #1
 800d972:	81a3      	strh	r3, [r4, #12]
 800d974:	89a3      	ldrh	r3, [r4, #12]
 800d976:	431d      	orrs	r5, r3
 800d978:	81a5      	strh	r5, [r4, #12]
 800d97a:	e7cf      	b.n	800d91c <__smakebuf_r+0x18>

0800d97c <_fstat_r>:
 800d97c:	b538      	push	{r3, r4, r5, lr}
 800d97e:	4d07      	ldr	r5, [pc, #28]	; (800d99c <_fstat_r+0x20>)
 800d980:	2300      	movs	r3, #0
 800d982:	4604      	mov	r4, r0
 800d984:	4608      	mov	r0, r1
 800d986:	4611      	mov	r1, r2
 800d988:	602b      	str	r3, [r5, #0]
 800d98a:	f7f4 faa4 	bl	8001ed6 <_fstat>
 800d98e:	1c43      	adds	r3, r0, #1
 800d990:	d102      	bne.n	800d998 <_fstat_r+0x1c>
 800d992:	682b      	ldr	r3, [r5, #0]
 800d994:	b103      	cbz	r3, 800d998 <_fstat_r+0x1c>
 800d996:	6023      	str	r3, [r4, #0]
 800d998:	bd38      	pop	{r3, r4, r5, pc}
 800d99a:	bf00      	nop
 800d99c:	20000cfc 	.word	0x20000cfc

0800d9a0 <_isatty_r>:
 800d9a0:	b538      	push	{r3, r4, r5, lr}
 800d9a2:	4d06      	ldr	r5, [pc, #24]	; (800d9bc <_isatty_r+0x1c>)
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	4608      	mov	r0, r1
 800d9aa:	602b      	str	r3, [r5, #0]
 800d9ac:	f7f4 faa3 	bl	8001ef6 <_isatty>
 800d9b0:	1c43      	adds	r3, r0, #1
 800d9b2:	d102      	bne.n	800d9ba <_isatty_r+0x1a>
 800d9b4:	682b      	ldr	r3, [r5, #0]
 800d9b6:	b103      	cbz	r3, 800d9ba <_isatty_r+0x1a>
 800d9b8:	6023      	str	r3, [r4, #0]
 800d9ba:	bd38      	pop	{r3, r4, r5, pc}
 800d9bc:	20000cfc 	.word	0x20000cfc

0800d9c0 <_init>:
 800d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c2:	bf00      	nop
 800d9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9c6:	bc08      	pop	{r3}
 800d9c8:	469e      	mov	lr, r3
 800d9ca:	4770      	bx	lr

0800d9cc <_fini>:
 800d9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ce:	bf00      	nop
 800d9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d2:	bc08      	pop	{r3}
 800d9d4:	469e      	mov	lr, r3
 800d9d6:	4770      	bx	lr
