
h7_handheld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800e120  0800e120  0001e120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e574  0800e574  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e574  0800e574  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e57c  0800e57c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e57c  0800e57c  0001e57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e580  0800e580  0001e580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000a8c  200001f8  200001f8  000201f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000c84  20000c84  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019c8d  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004064  00000000  00000000  00039ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014c0  00000000  00000000  0003df58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ff7  00000000  00000000  0003f418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002512d  00000000  00000000  0004040f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c844  00000000  00000000  0006553c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfdd4  00000000  00000000  00081d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000685c  00000000  00000000  00151b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001583b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e108 	.word	0x0800e108

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800e108 	.word	0x0800e108

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <printData>:
//int validateCRC(const SensorDataPacket *packet) {
    // Placeholder function to validate CRC - replace with actual CRC calculation
////    return packet->crc == crc_calculated;
//}

void printData(const SensorDataPacket *packet) {
 8000ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ea8:	b0c0      	sub	sp, #256	; 0x100
 8000eaa:	af04      	add	r7, sp, #16
 8000eac:	6078      	str	r0, [r7, #4]
    char buffer[100]; // Ensure the buffer is large enough for all the data
    char buffer2[100]; // Ensure the buffer is large enough for all the data
    double data;
    // Assuming the data field is treated as fixed-point and needs to be converted back to float
    if(packet->datatype != VIBRATION){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d00f      	beq.n	8000ed6 <printData+0x32>
        data = packet->data / 100.0;  // Convert fixed-point back to double
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fb6c 	bl	800059c <__aeabi_l2d>
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	4b8c      	ldr	r3, [pc, #560]	; (80010fc <printData+0x258>)
 8000eca:	f7ff fcbf 	bl	800084c <__aeabi_ddiv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }

    // Start of Packet (SOP) - Hexadecimal
    sprintf(buffer, "SOP: 0x%02X\r\n", packet->sop);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000ee0:	4987      	ldr	r1, [pc, #540]	; (8001100 <printData+0x25c>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00b f866 	bl	800bfb4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8000ee8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff f9bf 	bl	8000270 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000efa:	2364      	movs	r3, #100	; 0x64
 8000efc:	4881      	ldr	r0, [pc, #516]	; (8001104 <printData+0x260>)
 8000efe:	f005 fdbc 	bl	8006a7a <HAL_UART_Transmit>

    // Data Type - Binary
    sprintf(buffer, "Data Type: %u\r\n", packet->datatype);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	785b      	ldrb	r3, [r3, #1]
 8000f06:	461a      	mov	r2, r3
 8000f08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f0c:	497e      	ldr	r1, [pc, #504]	; (8001108 <printData+0x264>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f00b f850 	bl	800bfb4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8000f14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f9a9 	bl	8000270 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000f26:	2364      	movs	r3, #100	; 0x64
 8000f28:	4876      	ldr	r0, [pc, #472]	; (8001104 <printData+0x260>)
 8000f2a:	f005 fda6 	bl	8006a7a <HAL_UART_Transmit>

    // Sensor ID - Binary
    sprintf(buffer, "Sensor ID: %u\r\n", packet->sensorId);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	789b      	ldrb	r3, [r3, #2]
 8000f32:	461a      	mov	r2, r3
 8000f34:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f38:	4974      	ldr	r1, [pc, #464]	; (800110c <printData+0x268>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f00b f83a 	bl	800bfb4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8000f40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff f993 	bl	8000270 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	486b      	ldr	r0, [pc, #428]	; (8001104 <printData+0x260>)
 8000f56:	f005 fd90 	bl	8006a7a <HAL_UART_Transmit>

    // Timestamp - Decimal
    sprintf(buffer, "Timestamp: %lu\r\n", packet->timestamp);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f62:	496b      	ldr	r1, [pc, #428]	; (8001110 <printData+0x26c>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00b f825 	bl	800bfb4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8000f6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff f97e 	bl	8000270 <strlen>
 8000f74:	4603      	mov	r3, r0
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000f7c:	2364      	movs	r3, #100	; 0x64
 8000f7e:	4861      	ldr	r0, [pc, #388]	; (8001104 <printData+0x260>)
 8000f80:	f005 fd7b 	bl	8006a7a <HAL_UART_Transmit>

//    // Data - Decimal
//    sprintf(buffer, "Data: %lu\r\n", packet->data);
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);

    if(packet->datatype == TEMPERATURE) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	785b      	ldrb	r3, [r3, #1]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d107      	bne.n	8000f9c <printData+0xf8>
        // For non-vibration data, print as before
    	sprintf(buffer, "Temp: %.2f C\r\n", data);
 8000f8c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000f90:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8000f94:	495f      	ldr	r1, [pc, #380]	; (8001114 <printData+0x270>)
 8000f96:	f00b f80d 	bl	800bfb4 <siprintf>
 8000f9a:	e06b      	b.n	8001074 <printData+0x1d0>
    }
    else if(packet->datatype == HUMIDITY){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	785b      	ldrb	r3, [r3, #1]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d107      	bne.n	8000fb4 <printData+0x110>
    	sprintf(buffer, "Hum: %.2f %%\r\n", data);
 8000fa4:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000fa8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8000fac:	495a      	ldr	r1, [pc, #360]	; (8001118 <printData+0x274>)
 8000fae:	f00b f801 	bl	800bfb4 <siprintf>
 8000fb2:	e05f      	b.n	8001074 <printData+0x1d0>
    }
    else if(packet->datatype == SOUND){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d107      	bne.n	8000fcc <printData+0x128>
    	sprintf(buffer, "Sound: %.2f dB\r\n", data);
 8000fbc:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000fc0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8000fc4:	4955      	ldr	r1, [pc, #340]	; (800111c <printData+0x278>)
 8000fc6:	f00a fff5 	bl	800bfb4 <siprintf>
 8000fca:	e053      	b.n	8001074 <printData+0x1d0>
    }
    else if (packet->datatype == VIBRATION) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	785b      	ldrb	r3, [r3, #1]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d14f      	bne.n	8001074 <printData+0x1d0>
        int16_t x, y, z;
        unpackData(packet->data, &x, &y, &z);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f107 0410 	add.w	r4, r7, #16
 8000fe2:	f107 0212 	add.w	r2, r7, #18
 8000fe6:	f107 030e 	add.w	r3, r7, #14
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	4623      	mov	r3, r4
 8000fee:	f000 f8a1 	bl	8001134 <unpackData>
        // Display the scaled values with two decimal places as floating points
        float x_float = x / 100.0f;
 8000ff2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001120 <printData+0x27c>
 8001002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001006:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
        float y_float = y / 100.0f;
 800100a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001016:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001120 <printData+0x27c>
 800101a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101e:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
        float z_float = z / 100.0f;
 8001022:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102e:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001120 <printData+0x27c>
 8001032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001036:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
//        sprintf(buffer2, "Data: %lu\r\n", packet->data);
        sprintf(buffer, "X: %.2f G\tY: %.2f G\tZ: %.2f G\r\n", x_float, y_float, z_float);
 800103a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800103e:	f7ff fa83 	bl	8000548 <__aeabi_f2d>
 8001042:	4680      	mov	r8, r0
 8001044:	4689      	mov	r9, r1
 8001046:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800104a:	f7ff fa7d 	bl	8000548 <__aeabi_f2d>
 800104e:	4604      	mov	r4, r0
 8001050:	460d      	mov	r5, r1
 8001052:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001062:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001066:	e9cd 4500 	strd	r4, r5, [sp]
 800106a:	4642      	mov	r2, r8
 800106c:	464b      	mov	r3, r9
 800106e:	492d      	ldr	r1, [pc, #180]	; (8001124 <printData+0x280>)
 8001070:	f00a ffa0 	bl	800bfb4 <siprintf>
    }
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer2, strlen(buffer), 100);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8001074:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f8f9 	bl	8000270 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <printData+0x260>)
 800108a:	f005 fcf6 	bl	8006a7a <HAL_UART_Transmit>

    // CRC - Hexadecimal
    sprintf(buffer, "CRC: 0x%02X\r\n", packet->crc);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7c1b      	ldrb	r3, [r3, #16]
 8001092:	461a      	mov	r2, r3
 8001094:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001098:	4923      	ldr	r1, [pc, #140]	; (8001128 <printData+0x284>)
 800109a:	4618      	mov	r0, r3
 800109c:	f00a ff8a 	bl	800bfb4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80010a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f8e3 	bl	8000270 <strlen>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	4813      	ldr	r0, [pc, #76]	; (8001104 <printData+0x260>)
 80010b6:	f005 fce0 	bl	8006a7a <HAL_UART_Transmit>

    // End of Packet (EOP) - Hexadecimal
    sprintf(buffer, "EOP: 0x%02X\r\n", packet->eop);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7c5b      	ldrb	r3, [r3, #17]
 80010be:	461a      	mov	r2, r3
 80010c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010c4:	4919      	ldr	r1, [pc, #100]	; (800112c <printData+0x288>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00a ff74 	bl	800bfb4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80010cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f8cd 	bl	8000270 <strlen>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29a      	uxth	r2, r3
 80010da:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80010de:	2364      	movs	r3, #100	; 0x64
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <printData+0x260>)
 80010e2:	f005 fcca 	bl	8006a7a <HAL_UART_Transmit>

    // Separator
    HAL_UART_Transmit(&huart3, (uint8_t*)"--------\r\n", 10, 100);
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	220a      	movs	r2, #10
 80010ea:	4911      	ldr	r1, [pc, #68]	; (8001130 <printData+0x28c>)
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <printData+0x260>)
 80010ee:	f005 fcc4 	bl	8006a7a <HAL_UART_Transmit>
}
 80010f2:	bf00      	nop
 80010f4:	37f0      	adds	r7, #240	; 0xf0
 80010f6:	46bd      	mov	sp, r7
 80010f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010fc:	40590000 	.word	0x40590000
 8001100:	0800e120 	.word	0x0800e120
 8001104:	20000308 	.word	0x20000308
 8001108:	0800e130 	.word	0x0800e130
 800110c:	0800e140 	.word	0x0800e140
 8001110:	0800e150 	.word	0x0800e150
 8001114:	0800e164 	.word	0x0800e164
 8001118:	0800e174 	.word	0x0800e174
 800111c:	0800e184 	.word	0x0800e184
 8001120:	42c80000 	.word	0x42c80000
 8001124:	0800e198 	.word	0x0800e198
 8001128:	0800e1b8 	.word	0x0800e1b8
 800112c:	0800e1c8 	.word	0x0800e1c8
 8001130:	0800e1d8 	.word	0x0800e1d8

08001134 <unpackData>:

void unpackData(uint64_t packedData, int16_t* x, int16_t* y, int16_t* z) {
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]
    *x = (int16_t)((packedData >> 32) & 0xFFFF);
 8001142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	000a      	movs	r2, r1
 8001150:	2300      	movs	r3, #0
 8001152:	b212      	sxth	r2, r2
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((packedData >> 16) & 0xFFFF);
 8001158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	0c02      	lsrs	r2, r0, #16
 8001166:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800116a:	0c0b      	lsrs	r3, r1, #16
 800116c:	b212      	sxth	r2, r2
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(packedData & 0xFFFF);
 8001172:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	801a      	strh	r2, [r3, #0]
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118c:	f000 fd70 	bl	8001c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001190:	f000 f818 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001194:	f000 f93a 	bl	800140c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001198:	f000 f87e 	bl	8001298 <MX_I2C1_Init>
  MX_I2S3_Init();
 800119c:	f000 f8aa 	bl	80012f4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80011a0:	f000 f8d8 	bl	8001354 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80011a4:	f009 fe18 	bl	800add8 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 80011a8:	f000 f906 	bl	80013b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_SPI_Receive_IT(&hspi1, rx_data1, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	4903      	ldr	r1, [pc, #12]	; (80011bc <main+0x34>)
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <main+0x38>)
 80011b2:	f004 fec9 	bl	8005f48 <HAL_SPI_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80011b6:	f009 fe35 	bl	800ae24 <MX_USB_HOST_Process>
 80011ba:	e7fc      	b.n	80011b6 <main+0x2e>
 80011bc:	20000350 	.word	0x20000350
 80011c0:	200002b0 	.word	0x200002b0

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2230      	movs	r2, #48	; 0x30
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00a ff51 	bl	800c07a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <SystemClock_Config+0xcc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a27      	ldr	r2, [pc, #156]	; (8001290 <SystemClock_Config+0xcc>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <SystemClock_Config+0xcc>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <SystemClock_Config+0xd0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a21      	ldr	r2, [pc, #132]	; (8001294 <SystemClock_Config+0xd0>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <SystemClock_Config+0xd0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122a:	2302      	movs	r3, #2
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001234:	2308      	movs	r3, #8
 8001236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001238:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800123e:	2302      	movs	r3, #2
 8001240:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001242:	2307      	movs	r3, #7
 8001244:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	4618      	mov	r0, r3
 800124c:	f004 f818 	bl	8005280 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001256:	f000 fa09 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2302      	movs	r3, #2
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001266:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800126a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800126c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001270:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2105      	movs	r1, #5
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fa79 	bl	8005770 <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001284:	f000 f9f2 	bl	800166c <Error_Handler>
  }
}
 8001288:	bf00      	nop
 800128a:	3750      	adds	r7, #80	; 0x50
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_I2C1_Init+0x50>)
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <MX_I2C1_Init+0x54>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <MX_I2C1_Init+0x58>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012d6:	f003 f9ef 	bl	80046b8 <HAL_I2C_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e0:	f000 f9c4 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000214 	.word	0x20000214
 80012ec:	40005400 	.word	0x40005400
 80012f0:	000186a0 	.word	0x000186a0

080012f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <MX_I2S3_Init+0x54>)
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <MX_I2S3_Init+0x58>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_I2S3_Init+0x54>)
 8001300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001304:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_I2S3_Init+0x54>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_I2S3_Init+0x54>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <MX_I2S3_Init+0x54>)
 8001314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001318:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_I2S3_Init+0x54>)
 800131c:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <MX_I2S3_Init+0x5c>)
 800131e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_I2S3_Init+0x54>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_I2S3_Init+0x54>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_I2S3_Init+0x54>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_I2S3_Init+0x54>)
 8001334:	f003 fb04 	bl	8004940 <HAL_I2S_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800133e:	f000 f995 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000268 	.word	0x20000268
 800134c:	40003c00 	.word	0x40003c00
 8001350:	00017700 	.word	0x00017700

08001354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_SPI1_Init+0x5c>)
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <MX_SPI1_Init+0x60>)
 800135c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_SPI1_Init+0x5c>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_SPI1_Init+0x5c>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_SPI1_Init+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_SPI1_Init+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_SPI1_Init+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_SPI1_Init+0x5c>)
 800137e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001382:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <MX_SPI1_Init+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_SPI1_Init+0x5c>)
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <MX_SPI1_Init+0x5c>)
 8001392:	2200      	movs	r2, #0
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_SPI1_Init+0x5c>)
 8001398:	220a      	movs	r2, #10
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_SPI1_Init+0x5c>)
 800139e:	f004 fd49 	bl	8005e34 <HAL_SPI_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80013a8:	f000 f960 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002b0 	.word	0x200002b0
 80013b4:	40013000 	.word	0x40013000

080013b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <MX_USART3_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013f0:	f005 faf3 	bl	80069da <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f000 f937 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000308 	.word	0x20000308
 8001408:	40004800 	.word	0x40004800

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	4b72      	ldr	r3, [pc, #456]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a71      	ldr	r2, [pc, #452]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 800142c:	f043 0310 	orr.w	r3, r3, #16
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a6a      	ldr	r2, [pc, #424]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b64      	ldr	r3, [pc, #400]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a63      	ldr	r2, [pc, #396]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b5d      	ldr	r3, [pc, #372]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a5c      	ldr	r2, [pc, #368]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a55      	ldr	r2, [pc, #340]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a4e      	ldr	r2, [pc, #312]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <MX_GPIO_Init+0x1e4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2108      	movs	r1, #8
 80014ce:	4849      	ldr	r0, [pc, #292]	; (80015f4 <MX_GPIO_Init+0x1e8>)
 80014d0:	f000 ffa4 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2101      	movs	r1, #1
 80014d8:	4847      	ldr	r0, [pc, #284]	; (80015f8 <MX_GPIO_Init+0x1ec>)
 80014da:	f000 ff9f 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014de:	2200      	movs	r2, #0
 80014e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014e4:	4845      	ldr	r0, [pc, #276]	; (80015fc <MX_GPIO_Init+0x1f0>)
 80014e6:	f000 ff99 	bl	800241c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014ea:	2308      	movs	r3, #8
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	483c      	ldr	r0, [pc, #240]	; (80015f4 <MX_GPIO_Init+0x1e8>)
 8001502:	f000 fdef 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001506:	2301      	movs	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4836      	ldr	r0, [pc, #216]	; (80015f8 <MX_GPIO_Init+0x1ec>)
 800151e:	f000 fde1 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001522:	2308      	movs	r3, #8
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001532:	2305      	movs	r3, #5
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	482e      	ldr	r0, [pc, #184]	; (80015f8 <MX_GPIO_Init+0x1ec>)
 800153e:	f000 fdd1 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001542:	2301      	movs	r3, #1
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001546:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	482a      	ldr	r0, [pc, #168]	; (8001600 <MX_GPIO_Init+0x1f4>)
 8001558:	f000 fdc4 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800155c:	2304      	movs	r3, #4
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4825      	ldr	r0, [pc, #148]	; (8001604 <MX_GPIO_Init+0x1f8>)
 8001570:	f000 fdb8 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001586:	2305      	movs	r3, #5
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	481c      	ldr	r0, [pc, #112]	; (8001604 <MX_GPIO_Init+0x1f8>)
 8001592:	f000 fda7 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001596:	f24f 0310 	movw	r3, #61456	; 0xf010
 800159a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4813      	ldr	r0, [pc, #76]	; (80015fc <MX_GPIO_Init+0x1f0>)
 80015b0:	f000 fd98 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015b4:	2320      	movs	r3, #32
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <MX_GPIO_Init+0x1f0>)
 80015c8:	f000 fd8c 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_GPIO_Init+0x1e8>)
 80015e2:	f000 fd7f 	bl	80020e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e6:	bf00      	nop
 80015e8:	3730      	adds	r7, #48	; 0x30
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_SPI_RxCpltCallback+0x50>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d102      	bne.n	8001620 <HAL_SPI_RxCpltCallback+0x18>
        // Process data from USART1
    	printData(&sensorData1);
 800161a:	4810      	ldr	r0, [pc, #64]	; (800165c <HAL_SPI_RxCpltCallback+0x54>)
 800161c:	f7ff fc42 	bl	8000ea4 <printData>
    	//processSPIData(hspi, &sensorData1, rx_data1, &uartState1, &timestampBuffer1, &dataBuffer1, &dataIndex1);
    }

    test_data_count++;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_SPI_RxCpltCallback+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_SPI_RxCpltCallback+0x58>)
 800162a:	701a      	strb	r2, [r3, #0]
    if(test_data_count == 1){
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_SPI_RxCpltCallback+0x58>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d107      	bne.n	8001644 <HAL_SPI_RxCpltCallback+0x3c>
    	test_data_count = 0;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_SPI_RxCpltCallback+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); //orange
 800163a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <HAL_SPI_RxCpltCallback+0x5c>)
 8001640:	f000 ff05 	bl	800244e <HAL_GPIO_TogglePin>

    }


    HAL_SPI_Receive_IT(&hspi1, (uint8_t*)&sensorData1, sizeof(sensorData1));
 8001644:	2218      	movs	r2, #24
 8001646:	4905      	ldr	r1, [pc, #20]	; (800165c <HAL_SPI_RxCpltCallback+0x54>)
 8001648:	4807      	ldr	r0, [pc, #28]	; (8001668 <HAL_SPI_RxCpltCallback+0x60>)
 800164a:	f004 fc7d 	bl	8005f48 <HAL_SPI_Receive_IT>



}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40013000 	.word	0x40013000
 800165c:	20000358 	.word	0x20000358
 8001660:	20000370 	.word	0x20000370
 8001664:	40020c00 	.word	0x40020c00
 8001668:	200002b0 	.word	0x200002b0

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_MspInit+0x4c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016b6:	2007      	movs	r0, #7
 80016b8:	f000 fc40 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_I2C_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12c      	bne.n	8001744 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001706:	f44f 7310 	mov.w	r3, #576	; 0x240
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001710:	2301      	movs	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001718:	2304      	movs	r3, #4
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <HAL_I2C_MspInit+0x8c>)
 8001724:	f000 fcde 	bl	80020e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_I2C_MspInit+0x88>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_I2C_MspInit+0x88>)
 8001732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_I2C_MspInit+0x88>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40005400 	.word	0x40005400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400

08001758 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a31      	ldr	r2, [pc, #196]	; (8001848 <HAL_I2S_MspInit+0xf0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d15a      	bne.n	800183e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001788:	2301      	movs	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800178c:	23c0      	movs	r3, #192	; 0xc0
 800178e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4618      	mov	r0, r3
 800179a:	f004 fa09 	bl	8005bb0 <HAL_RCCEx_PeriphCLKConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80017a4:	f7ff ff62 	bl	800166c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a26      	ldr	r2, [pc, #152]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	4a1f      	ldr	r2, [pc, #124]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6313      	str	r3, [r2, #48]	; 0x30
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6313      	str	r3, [r2, #48]	; 0x30
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017fc:	2310      	movs	r3, #16
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800180c:	2306      	movs	r3, #6
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	480e      	ldr	r0, [pc, #56]	; (8001850 <HAL_I2S_MspInit+0xf8>)
 8001818:	f000 fc64 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800181c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800182e:	2306      	movs	r3, #6
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	4806      	ldr	r0, [pc, #24]	; (8001854 <HAL_I2S_MspInit+0xfc>)
 800183a:	f000 fc53 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3738      	adds	r7, #56	; 0x38
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40003c00 	.word	0x40003c00
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020800 	.word	0x40020800

08001858 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_SPI_MspInit+0x94>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d133      	bne.n	80018e2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_SPI_MspInit+0x98>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_SPI_MspInit+0x98>)
 8001884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_SPI_MspInit+0x98>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_SPI_MspInit+0x98>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <HAL_SPI_MspInit+0x98>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_SPI_MspInit+0x98>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018b2:	23e0      	movs	r3, #224	; 0xe0
 80018b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018c2:	2305      	movs	r3, #5
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_SPI_MspInit+0x9c>)
 80018ce:	f000 fc09 	bl	80020e4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2023      	movs	r0, #35	; 0x23
 80018d8:	f000 fb3b 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018dc:	2023      	movs	r0, #35	; 0x23
 80018de:	f000 fb54 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40013000 	.word	0x40013000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000

080018f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2d      	ldr	r2, [pc, #180]	; (80019cc <HAL_UART_MspInit+0xd4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d153      	bne.n	80019c2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <HAL_UART_MspInit+0xd8>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a2b      	ldr	r2, [pc, #172]	; (80019d0 <HAL_UART_MspInit+0xd8>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <HAL_UART_MspInit+0xd8>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_UART_MspInit+0xd8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a24      	ldr	r2, [pc, #144]	; (80019d0 <HAL_UART_MspInit+0xd8>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_UART_MspInit+0xd8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_UART_MspInit+0xd8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <HAL_UART_MspInit+0xd8>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_UART_MspInit+0xd8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800196e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001980:	2307      	movs	r3, #7
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	4812      	ldr	r0, [pc, #72]	; (80019d4 <HAL_UART_MspInit+0xdc>)
 800198c:	f000 fbaa 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019a2:	2307      	movs	r3, #7
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	480a      	ldr	r0, [pc, #40]	; (80019d8 <HAL_UART_MspInit+0xe0>)
 80019ae:	f000 fb99 	bl	80020e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2027      	movs	r0, #39	; 0x27
 80019b8:	f000 facb 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019bc:	2027      	movs	r0, #39	; 0x27
 80019be:	f000 fae4 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40004800 	.word	0x40004800
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020c00 	.word	0x40020c00

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a28:	f000 f974 	bl	8001d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <SPI1_IRQHandler+0x10>)
 8001a36:	f004 fbb5 	bl	80061a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002b0 	.word	0x200002b0

08001a44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <USART3_IRQHandler+0x10>)
 8001a4a:	f005 f8a1 	bl	8006b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000308 	.word	0x20000308

08001a58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <OTG_FS_IRQHandler+0x10>)
 8001a5e:	f000 fff1 	bl	8002a44 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000758 	.word	0x20000758

08001a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return 1;
 8001a70:	2301      	movs	r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_kill>:

int _kill(int pid, int sig)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a86:	f00a fb5b 	bl	800c140 <__errno>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2216      	movs	r2, #22
 8001a8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_exit>:

void _exit (int status)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ffe7 	bl	8001a7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aae:	e7fe      	b.n	8001aae <_exit+0x12>

08001ab0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e00a      	b.n	8001ad8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ac2:	f3af 8000 	nop.w
 8001ac6:	4601      	mov	r1, r0
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	60ba      	str	r2, [r7, #8]
 8001ace:	b2ca      	uxtb	r2, r1
 8001ad0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dbf0      	blt.n	8001ac2 <_read+0x12>
  }

  return len;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e009      	b.n	8001b10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	60ba      	str	r2, [r7, #8]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbf1      	blt.n	8001afc <_write+0x12>
  }
  return len;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_close>:

int _close(int file)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_isatty>:

int _isatty(int file)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <_sbrk+0x5c>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_sbrk+0x60>)
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_sbrk+0x64>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <_sbrk+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bbc:	f00a fac0 	bl	800c140 <__errno>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	e009      	b.n	8001be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <_sbrk+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20020000 	.word	0x20020000
 8001bec:	00000400 	.word	0x00000400
 8001bf0:	20000374 	.word	0x20000374
 8001bf4:	20000c88 	.word	0x20000c88

08001bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <SystemInit+0x20>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <SystemInit+0x20>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c20:	f7ff ffea 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c26:	490d      	ldr	r1, [pc, #52]	; (8001c5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c3c:	4c0a      	ldr	r4, [pc, #40]	; (8001c68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f00a fa7f 	bl	800c14c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4e:	f7ff fa9b 	bl	8001188 <main>
  bx  lr    
 8001c52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c5c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001c60:	0800e584 	.word	0x0800e584
  ldr r2, =_sbss
 8001c64:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001c68:	20000c84 	.word	0x20000c84

08001c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC_IRQHandler>
	...

08001c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <HAL_Init+0x40>)
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_Init+0x40>)
 8001c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <HAL_Init+0x40>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f000 f94f 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 f808 	bl	8001cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca4:	f7ff fce8 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023c00 	.word	0x40023c00

08001cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_InitTick+0x54>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_InitTick+0x58>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f967 	bl	8001fa6 <HAL_SYSTICK_Config>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00e      	b.n	8001d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b0f      	cmp	r3, #15
 8001ce6:	d80a      	bhi.n	8001cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f000 f92f 	bl	8001f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf4:	4a06      	ldr	r2, [pc, #24]	; (8001d10 <HAL_InitTick+0x5c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000004 	.word	0x20000004

08001d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x20>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_IncTick+0x24>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_IncTick+0x24>)
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000378 	.word	0x20000378

08001d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_GetTick+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000378 	.word	0x20000378

08001d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff ffee 	bl	8001d3c <HAL_GetTick>
 8001d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d005      	beq.n	8001d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_Delay+0x44>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7a:	bf00      	nop
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d8f7      	bhi.n	8001d7c <HAL_Delay+0x28>
  {
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000008 	.word	0x20000008

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff29 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff3e 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff8e 	bl	8001e90 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5d 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff31 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffa2 	bl	8001ef8 <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff feb6 	bl	8001d3c <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d008      	beq.n	8001ff0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e052      	b.n	8002096 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0216 	bic.w	r2, r2, #22
 8001ffe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800200e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <HAL_DMA_Abort+0x62>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0208 	bic.w	r2, r2, #8
 800202e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002040:	e013      	b.n	800206a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002042:	f7ff fe7b 	bl	8001d3c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b05      	cmp	r3, #5
 800204e:	d90c      	bls.n	800206a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2203      	movs	r2, #3
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e015      	b.n	8002096 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e4      	bne.n	8002042 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	223f      	movs	r2, #63	; 0x3f
 800207e:	409a      	lsls	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d004      	beq.n	80020bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e00c      	b.n	80020d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2205      	movs	r2, #5
 80020c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e16b      	b.n	80023d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 815a 	bne.w	80023d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d005      	beq.n	8002136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	2b02      	cmp	r3, #2
 8002134:	d130      	bne.n	8002198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0201 	and.w	r2, r3, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d017      	beq.n	80021d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d123      	bne.n	8002228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80b4 	beq.w	80023d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b60      	ldr	r3, [pc, #384]	; (80023f0 <HAL_GPIO_Init+0x30c>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a5f      	ldr	r2, [pc, #380]	; (80023f0 <HAL_GPIO_Init+0x30c>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b5d      	ldr	r3, [pc, #372]	; (80023f0 <HAL_GPIO_Init+0x30c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002286:	4a5b      	ldr	r2, [pc, #364]	; (80023f4 <HAL_GPIO_Init+0x310>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a52      	ldr	r2, [pc, #328]	; (80023f8 <HAL_GPIO_Init+0x314>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02b      	beq.n	800230a <HAL_GPIO_Init+0x226>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a51      	ldr	r2, [pc, #324]	; (80023fc <HAL_GPIO_Init+0x318>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d025      	beq.n	8002306 <HAL_GPIO_Init+0x222>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a50      	ldr	r2, [pc, #320]	; (8002400 <HAL_GPIO_Init+0x31c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01f      	beq.n	8002302 <HAL_GPIO_Init+0x21e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4f      	ldr	r2, [pc, #316]	; (8002404 <HAL_GPIO_Init+0x320>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d019      	beq.n	80022fe <HAL_GPIO_Init+0x21a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4e      	ldr	r2, [pc, #312]	; (8002408 <HAL_GPIO_Init+0x324>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0x216>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4d      	ldr	r2, [pc, #308]	; (800240c <HAL_GPIO_Init+0x328>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <HAL_GPIO_Init+0x212>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4c      	ldr	r2, [pc, #304]	; (8002410 <HAL_GPIO_Init+0x32c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_Init+0x20e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4b      	ldr	r2, [pc, #300]	; (8002414 <HAL_GPIO_Init+0x330>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_GPIO_Init+0x20a>
 80022ea:	2307      	movs	r3, #7
 80022ec:	e00e      	b.n	800230c <HAL_GPIO_Init+0x228>
 80022ee:	2308      	movs	r3, #8
 80022f0:	e00c      	b.n	800230c <HAL_GPIO_Init+0x228>
 80022f2:	2306      	movs	r3, #6
 80022f4:	e00a      	b.n	800230c <HAL_GPIO_Init+0x228>
 80022f6:	2305      	movs	r3, #5
 80022f8:	e008      	b.n	800230c <HAL_GPIO_Init+0x228>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x228>
 80022fe:	2303      	movs	r3, #3
 8002300:	e004      	b.n	800230c <HAL_GPIO_Init+0x228>
 8002302:	2302      	movs	r3, #2
 8002304:	e002      	b.n	800230c <HAL_GPIO_Init+0x228>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x228>
 800230a:	2300      	movs	r3, #0
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f002 0203 	and.w	r2, r2, #3
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	4093      	lsls	r3, r2
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231c:	4935      	ldr	r1, [pc, #212]	; (80023f4 <HAL_GPIO_Init+0x310>)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_GPIO_Init+0x334>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234e:	4a32      	ldr	r2, [pc, #200]	; (8002418 <HAL_GPIO_Init+0x334>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002354:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_GPIO_Init+0x334>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <HAL_GPIO_Init+0x334>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <HAL_GPIO_Init+0x334>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a2:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_GPIO_Init+0x334>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_GPIO_Init+0x334>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <HAL_GPIO_Init+0x334>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	f67f ae90 	bls.w	8002100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40013800 	.word	0x40013800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40020400 	.word	0x40020400
 8002400:	40020800 	.word	0x40020800
 8002404:	40020c00 	.word	0x40020c00
 8002408:	40021000 	.word	0x40021000
 800240c:	40021400 	.word	0x40021400
 8002410:	40021800 	.word	0x40021800
 8002414:	40021c00 	.word	0x40021c00
 8002418:	40013c00 	.word	0x40013c00

0800241c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
 8002428:	4613      	mov	r3, r2
 800242a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800242c:	787b      	ldrb	r3, [r7, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002438:	e003      	b.n	8002442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	041a      	lsls	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002460:	887a      	ldrh	r2, [r7, #2]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	041a      	lsls	r2, r3, #16
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43d9      	mvns	r1, r3
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	400b      	ands	r3, r1
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af02      	add	r7, sp, #8
 8002488:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e059      	b.n	8002548 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f008 fcf0 	bl	800ae94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2203      	movs	r2, #3
 80024b8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c2:	d102      	bne.n	80024ca <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f005 faf9 	bl	8007ac6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7c1a      	ldrb	r2, [r3, #16]
 80024dc:	f88d 2000 	strb.w	r2, [sp]
 80024e0:	3304      	adds	r3, #4
 80024e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e4:	f005 fa7a 	bl	80079dc <USB_CoreInit>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e026      	b.n	8002548 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2101      	movs	r1, #1
 8002500:	4618      	mov	r0, r3
 8002502:	f005 faf1 	bl	8007ae8 <USB_SetCurrentMode>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e017      	b.n	8002548 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7c1a      	ldrb	r2, [r3, #16]
 8002520:	f88d 2000 	strb.w	r2, [sp]
 8002524:	3304      	adds	r3, #4
 8002526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002528:	f005 fc94 	bl	8007e54 <USB_HostInit>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e004      	b.n	8002548 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b08b      	sub	sp, #44	; 0x2c
 8002554:	af04      	add	r7, sp, #16
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	4608      	mov	r0, r1
 800255a:	4611      	mov	r1, r2
 800255c:	461a      	mov	r2, r3
 800255e:	4603      	mov	r3, r0
 8002560:	70fb      	strb	r3, [r7, #3]
 8002562:	460b      	mov	r3, r1
 8002564:	70bb      	strb	r3, [r7, #2]
 8002566:	4613      	mov	r3, r2
 8002568:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800256a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800256c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_HCD_HC_Init+0x2c>
 8002578:	2302      	movs	r3, #2
 800257a:	e09d      	b.n	80026b8 <HAL_HCD_HC_Init+0x168>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3319      	adds	r3, #25
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3314      	adds	r3, #20
 80025a8:	787a      	ldrb	r2, [r7, #1]
 80025aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3315      	adds	r3, #21
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3326      	adds	r3, #38	; 0x26
 80025d0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80025d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	78bb      	ldrb	r3, [r7, #2]
 80025da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025de:	b2d8      	uxtb	r0, r3
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3316      	adds	r3, #22
 80025ee:	4602      	mov	r2, r0
 80025f0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fbc8 	bl	8002d8c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80025fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002600:	2b00      	cmp	r3, #0
 8002602:	da0a      	bge.n	800261a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3317      	adds	r3, #23
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e009      	b.n	800262e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	3317      	adds	r3, #23
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f005 fd72 	bl	800811c <USB_GetHostSpeed>
 8002638:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800263a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d10b      	bne.n	800265a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_HCD_HC_Init+0x10a>
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2bbc      	cmp	r3, #188	; 0xbc
 8002654:	d901      	bls.n	800265a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002656:	23bc      	movs	r3, #188	; 0xbc
 8002658:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	3318      	adds	r3, #24
 800266a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800266e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	b298      	uxth	r0, r3
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3328      	adds	r3, #40	; 0x28
 8002684:	4602      	mov	r2, r0
 8002686:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	b29b      	uxth	r3, r3
 8002690:	787c      	ldrb	r4, [r7, #1]
 8002692:	78ba      	ldrb	r2, [r7, #2]
 8002694:	78f9      	ldrb	r1, [r7, #3]
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4623      	mov	r3, r4
 80026a6:	f005 fd61 	bl	800816c <USB_HC_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	371c      	adds	r7, #28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd90      	pop	{r4, r7, pc}

080026c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_HCD_HC_Halt+0x1e>
 80026da:	2302      	movs	r3, #2
 80026dc:	e00f      	b.n	80026fe <HAL_HCD_HC_Halt+0x3e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f006 f8f3 	bl	80088da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4603      	mov	r3, r0
 8002718:	70fb      	strb	r3, [r7, #3]
 800271a:	460b      	mov	r3, r1
 800271c:	70bb      	strb	r3, [r7, #2]
 800271e:	4613      	mov	r3, r2
 8002720:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3317      	adds	r3, #23
 8002732:	78ba      	ldrb	r2, [r7, #2]
 8002734:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	3326      	adds	r3, #38	; 0x26
 8002746:	787a      	ldrb	r2, [r7, #1]
 8002748:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800274a:	7c3b      	ldrb	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d114      	bne.n	800277a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	332a      	adds	r3, #42	; 0x2a
 8002760:	2203      	movs	r2, #3
 8002762:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3319      	adds	r3, #25
 8002774:	7f3a      	ldrb	r2, [r7, #28]
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e009      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	332a      	adds	r3, #42	; 0x2a
 800278a:	2202      	movs	r2, #2
 800278c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800278e:	787b      	ldrb	r3, [r7, #1]
 8002790:	2b03      	cmp	r3, #3
 8002792:	f200 8102 	bhi.w	800299a <HAL_HCD_HC_SubmitRequest+0x292>
 8002796:	a201      	add	r2, pc, #4	; (adr r2, 800279c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	08002985 	.word	0x08002985
 80027a4:	08002871 	.word	0x08002871
 80027a8:	080028fb 	.word	0x080028fb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80027ac:	7c3b      	ldrb	r3, [r7, #16]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	f040 80f5 	bne.w	800299e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80027b4:	78bb      	ldrb	r3, [r7, #2]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d12d      	bne.n	8002816 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80027ba:	8b3b      	ldrh	r3, [r7, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	333d      	adds	r3, #61	; 0x3d
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	333d      	adds	r3, #61	; 0x3d
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	332a      	adds	r3, #42	; 0x2a
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80027fe:	e0ce      	b.n	800299e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	332a      	adds	r3, #42	; 0x2a
 8002810:	2202      	movs	r2, #2
 8002812:	701a      	strb	r2, [r3, #0]
      break;
 8002814:	e0c3      	b.n	800299e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	331a      	adds	r3, #26
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	f040 80b8 	bne.w	800299e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	333c      	adds	r3, #60	; 0x3c
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	332a      	adds	r3, #42	; 0x2a
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
      break;
 8002858:	e0a1      	b.n	800299e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	332a      	adds	r3, #42	; 0x2a
 800286a:	2202      	movs	r2, #2
 800286c:	701a      	strb	r2, [r3, #0]
      break;
 800286e:	e096      	b.n	800299e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002870:	78bb      	ldrb	r3, [r7, #2]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d120      	bne.n	80028b8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	333d      	adds	r3, #61	; 0x3d
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	332a      	adds	r3, #42	; 0x2a
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80028a0:	e07e      	b.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	332a      	adds	r3, #42	; 0x2a
 80028b2:	2202      	movs	r2, #2
 80028b4:	701a      	strb	r2, [r3, #0]
      break;
 80028b6:	e073      	b.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	333c      	adds	r3, #60	; 0x3c
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10a      	bne.n	80028e4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	332a      	adds	r3, #42	; 0x2a
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
      break;
 80028e2:	e05d      	b.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	332a      	adds	r3, #42	; 0x2a
 80028f4:	2202      	movs	r2, #2
 80028f6:	701a      	strb	r2, [r3, #0]
      break;
 80028f8:	e052      	b.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028fa:	78bb      	ldrb	r3, [r7, #2]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d120      	bne.n	8002942 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	333d      	adds	r3, #61	; 0x3d
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	332a      	adds	r3, #42	; 0x2a
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800292a:	e039      	b.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	332a      	adds	r3, #42	; 0x2a
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]
      break;
 8002940:	e02e      	b.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	333c      	adds	r3, #60	; 0x3c
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	332a      	adds	r3, #42	; 0x2a
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
      break;
 800296c:	e018      	b.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	332a      	adds	r3, #42	; 0x2a
 800297e:	2202      	movs	r2, #2
 8002980:	701a      	strb	r2, [r3, #0]
      break;
 8002982:	e00d      	b.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	332a      	adds	r3, #42	; 0x2a
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
      break;
 8002998:	e002      	b.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800299e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	332c      	adds	r3, #44	; 0x2c
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	8b39      	ldrh	r1, [r7, #24]
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4403      	add	r3, r0
 80029c4:	3334      	adds	r3, #52	; 0x34
 80029c6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334c      	adds	r3, #76	; 0x4c
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3338      	adds	r3, #56	; 0x38
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	3315      	adds	r3, #21
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	334d      	adds	r3, #77	; 0x4d
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3310      	adds	r3, #16
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	1d19      	adds	r1, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	799b      	ldrb	r3, [r3, #6]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f005 fcc6 	bl	80083c4 <USB_HC_StartXfer>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop

08002a44 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f005 f9ba 	bl	8007dd4 <USB_GetMode>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	f040 80fb 	bne.w	8002c5e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f005 f97d 	bl	8007d6c <USB_ReadInterrupts>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80f1 	beq.w	8002c5c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f005 f974 	bl	8007d6c <USB_ReadInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a8e:	d104      	bne.n	8002a9a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f005 f964 	bl	8007d6c <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aae:	d104      	bne.n	8002aba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ab8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f005 f954 	bl	8007d6c <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ace:	d104      	bne.n	8002ada <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ad8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f005 f944 	bl	8007d6c <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d103      	bne.n	8002af6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2202      	movs	r2, #2
 8002af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f005 f936 	bl	8007d6c <USB_ReadInterrupts>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b0a:	d120      	bne.n	8002b4e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b14:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d113      	bne.n	8002b4e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b26:	2110      	movs	r1, #16
 8002b28:	6938      	ldr	r0, [r7, #16]
 8002b2a:	f005 f829 	bl	8007b80 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b2e:	6938      	ldr	r0, [r7, #16]
 8002b30:	f005 f858 	bl	8007be4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7a5b      	ldrb	r3, [r3, #9]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d105      	bne.n	8002b48 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2101      	movs	r1, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f005 fa4a 	bl	8007fdc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f008 fa21 	bl	800af90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f005 f90a 	bl	8007d6c <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b62:	d102      	bne.n	8002b6a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f001 fd33 	bl	80045d0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f005 f8fc 	bl	8007d6c <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d106      	bne.n	8002b8c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f008 f9ea 	bl	800af58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2208      	movs	r2, #8
 8002b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f005 f8eb 	bl	8007d6c <USB_ReadInterrupts>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ba0:	d139      	bne.n	8002c16 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f005 fe86 	bl	80088b8 <USB_HC_ReadInterrupt>
 8002bac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	e025      	b.n	8002c00 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d018      	beq.n	8002bfa <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bde:	d106      	bne.n	8002bee <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	4619      	mov	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f905 	bl	8002df6 <HCD_HC_IN_IRQHandler>
 8002bec:	e005      	b.n	8002bfa <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 ff67 	bl	8003ac8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	795b      	ldrb	r3, [r3, #5]
 8002c04:	461a      	mov	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d3d3      	bcc.n	8002bb4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f005 f8a6 	bl	8007d6c <USB_ReadInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d101      	bne.n	8002c2e <HAL_HCD_IRQHandler+0x1ea>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_HCD_IRQHandler+0x1ec>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d014      	beq.n	8002c5e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0210 	bic.w	r2, r2, #16
 8002c42:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f001 fbe4 	bl	8004412 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0210 	orr.w	r2, r2, #16
 8002c58:	619a      	str	r2, [r3, #24]
 8002c5a:	e000      	b.n	8002c5e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002c5c:	bf00      	nop
    }
  }
}
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_HCD_Start+0x16>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e013      	b.n	8002ca2 <HAL_HCD_Start+0x3e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2101      	movs	r1, #1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f005 fa0e 	bl	80080aa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f004 ff06 	bl	8007aa4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_HCD_Stop+0x16>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e00d      	b.n	8002cdc <HAL_HCD_Stop+0x32>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f005 ff61 	bl	8008b94 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f005 f9b0 	bl	8008056 <USB_ResetPort>
 8002cf6:	4603      	mov	r3, r0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	334c      	adds	r3, #76	; 0x4c
 8002d1c:	781b      	ldrb	r3, [r3, #0]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3338      	adds	r3, #56	; 0x38
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f005 f9f2 	bl	800814a <USB_GetCurrentFrame>
 8002d66:	4603      	mov	r3, r0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f005 f9cd 	bl	800811c <USB_GetHostSpeed>
 8002d82:	4603      	mov	r3, r0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	331a      	adds	r3, #26
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	331b      	adds	r3, #27
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	3325      	adds	r3, #37	; 0x25
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 ffbc 	bl	8007d92 <USB_ReadChInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d11a      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	461a      	mov	r2, r3
 8002e32:	2304      	movs	r3, #4
 8002e34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	334d      	adds	r3, #77	; 0x4d
 8002e46:	2207      	movs	r2, #7
 8002e48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 fd41 	bl	80088da <USB_HC_Halt>
 8002e58:	e09e      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 ff95 	bl	8007d92 <USB_ReadChInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e72:	d11b      	bne.n	8002eac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	334d      	adds	r3, #77	; 0x4d
 8002e98:	2208      	movs	r2, #8
 8002e9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f005 fd18 	bl	80088da <USB_HC_Halt>
 8002eaa:	e075      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 ff6c 	bl	8007d92 <USB_ReadChInterrupts>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d11a      	bne.n	8002efa <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	334d      	adds	r3, #77	; 0x4d
 8002ee6:	2206      	movs	r2, #6
 8002ee8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f005 fcf1 	bl	80088da <USB_HC_Halt>
 8002ef8:	e04e      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f004 ff45 	bl	8007d92 <USB_ReadChInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d11b      	bne.n	8002f4c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	334d      	adds	r3, #77	; 0x4d
 8002f38:	2209      	movs	r2, #9
 8002f3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f005 fcc8 	bl	80088da <USB_HC_Halt>
 8002f4a:	e025      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f004 ff1c 	bl	8007d92 <USB_ReadChInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d119      	bne.n	8002f98 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	334d      	adds	r3, #77	; 0x4d
 8002f86:	2207      	movs	r2, #7
 8002f88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f005 fca1 	bl	80088da <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f004 fef6 	bl	8007d92 <USB_ReadChInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb0:	d112      	bne.n	8002fd8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f005 fc8d 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd2:	6093      	str	r3, [r2, #8]
 8002fd4:	f000 bd75 	b.w	8003ac2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f004 fed6 	bl	8007d92 <USB_ReadChInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f040 8128 	bne.w	8003242 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffe:	461a      	mov	r2, r3
 8003000:	2320      	movs	r3, #32
 8003002:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	331b      	adds	r3, #27
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d119      	bne.n	800304e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	331b      	adds	r3, #27
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	0151      	lsls	r1, r2, #5
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	440a      	add	r2, r1
 8003044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	799b      	ldrb	r3, [r3, #6]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d01b      	beq.n	800308e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3330      	adds	r3, #48	; 0x30
 8003066:	6819      	ldr	r1, [r3, #0]
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	1ac9      	subs	r1, r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4403      	add	r3, r0
 800308a:	3338      	adds	r3, #56	; 0x38
 800308c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	334d      	adds	r3, #77	; 0x4d
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3344      	adds	r3, #68	; 0x44
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	461a      	mov	r2, r3
 80030c4:	2301      	movs	r3, #1
 80030c6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3326      	adds	r3, #38	; 0x26
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3326      	adds	r3, #38	; 0x26
 80030ee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d110      	bne.n	8003116 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f005 fbec 	bl	80088da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	2310      	movs	r3, #16
 8003112:	6093      	str	r3, [r2, #8]
 8003114:	e03d      	b.n	8003192 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3326      	adds	r3, #38	; 0x26
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d00a      	beq.n	8003142 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	3326      	adds	r3, #38	; 0x26
 800313c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800313e:	2b01      	cmp	r3, #1
 8003140:	d127      	bne.n	8003192 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	0151      	lsls	r1, r2, #5
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	440a      	add	r2, r1
 8003158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003160:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334c      	adds	r3, #76	; 0x4c
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334c      	adds	r3, #76	; 0x4c
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f007 ff0d 	bl	800afac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	799b      	ldrb	r3, [r3, #6]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d13b      	bne.n	8003212 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3338      	adds	r3, #56	; 0x38
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4403      	add	r3, r0
 80031ba:	3328      	adds	r3, #40	; 0x28
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	440b      	add	r3, r1
 80031c0:	1e59      	subs	r1, r3, #1
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4403      	add	r3, r0
 80031d0:	3328      	adds	r3, #40	; 0x28
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8470 	beq.w	8003ac2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	333c      	adds	r3, #60	; 0x3c
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	f083 0301 	eor.w	r3, r3, #1
 80031fa:	b2d8      	uxtb	r0, r3
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	333c      	adds	r3, #60	; 0x3c
 800320a:	4602      	mov	r2, r0
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	f000 bc58 	b.w	8003ac2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	333c      	adds	r3, #60	; 0x3c
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	f083 0301 	eor.w	r3, r3, #1
 800322a:	b2d8      	uxtb	r0, r3
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	333c      	adds	r3, #60	; 0x3c
 800323a:	4602      	mov	r2, r0
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	f000 bc40 	b.w	8003ac2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f004 fda1 	bl	8007d92 <USB_ReadChInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b20      	cmp	r3, #32
 8003258:	d131      	bne.n	80032be <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	461a      	mov	r2, r3
 8003268:	2320      	movs	r3, #32
 800326a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	331a      	adds	r3, #26
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	f040 841f 	bne.w	8003ac2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	331b      	adds	r3, #27
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334d      	adds	r3, #77	; 0x4d
 80032a8:	2203      	movs	r2, #3
 80032aa:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f005 fb10 	bl	80088da <USB_HC_Halt>
 80032ba:	f000 bc02 	b.w	8003ac2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f004 fd63 	bl	8007d92 <USB_ReadChInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	f040 8305 	bne.w	80038e2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	2302      	movs	r3, #2
 80032e8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334d      	adds	r3, #77	; 0x4d
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d114      	bne.n	800332a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	334d      	adds	r3, #77	; 0x4d
 8003310:	2202      	movs	r2, #2
 8003312:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	334c      	adds	r3, #76	; 0x4c
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e2cc      	b.n	80038c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	334d      	adds	r3, #77	; 0x4d
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b06      	cmp	r3, #6
 800333e:	d114      	bne.n	800336a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	334d      	adds	r3, #77	; 0x4d
 8003350:	2202      	movs	r2, #2
 8003352:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	334c      	adds	r3, #76	; 0x4c
 8003364:	2205      	movs	r2, #5
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e2ac      	b.n	80038c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	334d      	adds	r3, #77	; 0x4d
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b07      	cmp	r3, #7
 800337e:	d00b      	beq.n	8003398 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	334d      	adds	r3, #77	; 0x4d
 8003390:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003392:	2b09      	cmp	r3, #9
 8003394:	f040 80a6 	bne.w	80034e4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	334d      	adds	r3, #77	; 0x4d
 80033a8:	2202      	movs	r2, #2
 80033aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3344      	adds	r3, #68	; 0x44
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	1c59      	adds	r1, r3, #1
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4403      	add	r3, r0
 80033cc:	3344      	adds	r3, #68	; 0x44
 80033ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	3344      	adds	r3, #68	; 0x44
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d943      	bls.n	800346e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3344      	adds	r3, #68	; 0x44
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	331a      	adds	r3, #26
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d123      	bne.n	8003458 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	331b      	adds	r3, #27
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	331c      	adds	r3, #28
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	0151      	lsls	r1, r2, #5
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	440a      	add	r2, r1
 800344e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	334c      	adds	r3, #76	; 0x4c
 8003468:	2204      	movs	r2, #4
 800346a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800346c:	e229      	b.n	80038c2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	334c      	adds	r3, #76	; 0x4c
 800347e:	2202      	movs	r2, #2
 8003480:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	3326      	adds	r3, #38	; 0x26
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3326      	adds	r3, #38	; 0x26
 80034a8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	f040 8209 	bne.w	80038c2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034c6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034ce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034e2:	e1ee      	b.n	80038c2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	334d      	adds	r3, #77	; 0x4d
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b05      	cmp	r3, #5
 80034f8:	f040 80c8 	bne.w	800368c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	334d      	adds	r3, #77	; 0x4d
 800350c:	2202      	movs	r2, #2
 800350e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	331b      	adds	r3, #27
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	f040 81ce 	bne.w	80038c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	3326      	adds	r3, #38	; 0x26
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d16b      	bne.n	8003616 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3348      	adds	r3, #72	; 0x48
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	1c59      	adds	r1, r3, #1
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4403      	add	r3, r0
 800355e:	3348      	adds	r3, #72	; 0x48
 8003560:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3348      	adds	r3, #72	; 0x48
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d943      	bls.n	8003600 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3348      	adds	r3, #72	; 0x48
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	331b      	adds	r3, #27
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3344      	adds	r3, #68	; 0x44
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d809      	bhi.n	80035ca <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	331c      	adds	r3, #28
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	0151      	lsls	r1, r2, #5
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	440a      	add	r2, r1
 80035e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	334c      	adds	r3, #76	; 0x4c
 80035fa:	2204      	movs	r2, #4
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e014      	b.n	800362a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	334c      	adds	r3, #76	; 0x4c
 8003610:	2202      	movs	r2, #2
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e009      	b.n	800362a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	334c      	adds	r3, #76	; 0x4c
 8003626:	2202      	movs	r2, #2
 8003628:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3326      	adds	r3, #38	; 0x26
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3326      	adds	r3, #38	; 0x26
 8003650:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003652:	2b02      	cmp	r3, #2
 8003654:	f040 8136 	bne.w	80038c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800366e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003676:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e11b      	b.n	80038c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	; 0x4d
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	f040 8081 	bne.w	80037a6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	334d      	adds	r3, #77	; 0x4d
 80036b4:	2202      	movs	r2, #2
 80036b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	331b      	adds	r3, #27
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	f040 80fa 	bne.w	80038c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	334c      	adds	r3, #76	; 0x4c
 80036e0:	2202      	movs	r2, #2
 80036e2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	0151      	lsls	r1, r2, #5
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	440a      	add	r2, r1
 80036fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003702:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	0151      	lsls	r1, r2, #5
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	440a      	add	r2, r1
 800371a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800371e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003722:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	0151      	lsls	r1, r2, #5
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	440a      	add	r2, r1
 800373a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800373e:	f023 0320 	bic.w	r3, r3, #32
 8003742:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3326      	adds	r3, #38	; 0x26
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	3326      	adds	r3, #38	; 0x26
 800376a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800376c:	2b02      	cmp	r3, #2
 800376e:	f040 80a9 	bne.w	80038c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003788:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003790:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	461a      	mov	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e08e      	b.n	80038c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	334d      	adds	r3, #77	; 0x4d
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d143      	bne.n	8003844 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	334d      	adds	r3, #77	; 0x4d
 80037cc:	2202      	movs	r2, #2
 80037ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	334c      	adds	r3, #76	; 0x4c
 80037e0:	2202      	movs	r2, #2
 80037e2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	3326      	adds	r3, #38	; 0x26
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3326      	adds	r3, #38	; 0x26
 800380a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800380c:	2b02      	cmp	r3, #2
 800380e:	d159      	bne.n	80038c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003826:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800382e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	461a      	mov	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e03f      	b.n	80038c4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	334d      	adds	r3, #77	; 0x4d
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d126      	bne.n	80038a8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	334d      	adds	r3, #77	; 0x4d
 800386a:	2202      	movs	r2, #2
 800386c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	3344      	adds	r3, #68	; 0x44
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	1c59      	adds	r1, r3, #1
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4403      	add	r3, r0
 800388e:	3344      	adds	r3, #68	; 0x44
 8003890:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	334c      	adds	r3, #76	; 0x4c
 80038a2:	2204      	movs	r2, #4
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e00d      	b.n	80038c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	334d      	adds	r3, #77	; 0x4d
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	f000 8100 	beq.w	8003ac0 <HCD_HC_IN_IRQHandler+0xcca>
 80038c0:	e000      	b.n	80038c4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038c2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	334c      	adds	r3, #76	; 0x4c
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f007 fb66 	bl	800afac <HAL_HCD_HC_NotifyURBChange_Callback>
 80038e0:	e0ef      	b.n	8003ac2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f004 fa51 	bl	8007d92 <USB_ReadChInterrupts>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d12f      	bne.n	800395a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4413      	add	r3, r2
 8003902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003906:	461a      	mov	r2, r3
 8003908:	2340      	movs	r3, #64	; 0x40
 800390a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	334d      	adds	r3, #77	; 0x4d
 800391c:	2205      	movs	r2, #5
 800391e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	331a      	adds	r3, #26
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	3344      	adds	r3, #68	; 0x44
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f004 ffc1 	bl	80088da <USB_HC_Halt>
 8003958:	e0b3      	b.n	8003ac2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f004 fa15 	bl	8007d92 <USB_ReadChInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b10      	cmp	r3, #16
 8003970:	f040 80a7 	bne.w	8003ac2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3326      	adds	r3, #38	; 0x26
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d11b      	bne.n	80039c2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	3344      	adds	r3, #68	; 0x44
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	334d      	adds	r3, #77	; 0x4d
 80039ae:	2204      	movs	r2, #4
 80039b0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f004 ff8d 	bl	80088da <USB_HC_Halt>
 80039c0:	e03f      	b.n	8003a42 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	3326      	adds	r3, #38	; 0x26
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3326      	adds	r3, #38	; 0x26
 80039e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d129      	bne.n	8003a42 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3344      	adds	r3, #68	; 0x44
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	799b      	ldrb	r3, [r3, #6]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HCD_HC_IN_IRQHandler+0xc2a>
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	331b      	adds	r3, #27
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d110      	bne.n	8003a42 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	334d      	adds	r3, #77	; 0x4d
 8003a30:	2204      	movs	r2, #4
 8003a32:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f004 ff4c 	bl	80088da <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	331b      	adds	r3, #27
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d129      	bne.n	8003aac <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	331b      	adds	r3, #27
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	0151      	lsls	r1, r2, #5
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	440a      	add	r2, r1
 8003a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	0151      	lsls	r1, r2, #5
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aa6:	f043 0320 	orr.w	r3, r3, #32
 8003aaa:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2310      	movs	r3, #16
 8003abc:	6093      	str	r3, [r2, #8]
 8003abe:	e000      	b.n	8003ac2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ac0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f004 f953 	bl	8007d92 <USB_ReadChInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d11b      	bne.n	8003b2e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b02:	461a      	mov	r2, r3
 8003b04:	2304      	movs	r3, #4
 8003b06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	334d      	adds	r3, #77	; 0x4d
 8003b18:	2207      	movs	r2, #7
 8003b1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f004 fed8 	bl	80088da <USB_HC_Halt>
 8003b2a:	f000 bc6f 	b.w	800440c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 f92b 	bl	8007d92 <USB_ReadChInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	f040 8082 	bne.w	8003c4c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b54:	461a      	mov	r2, r3
 8003b56:	2320      	movs	r3, #32
 8003b58:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	3319      	adds	r3, #25
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d124      	bne.n	8003bba <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3319      	adds	r3, #25
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	334c      	adds	r3, #76	; 0x4c
 8003b94:	2202      	movs	r2, #2
 8003b96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	334d      	adds	r3, #77	; 0x4d
 8003ba8:	2203      	movs	r2, #3
 8003baa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f004 fe90 	bl	80088da <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	331a      	adds	r3, #26
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	f040 841d 	bne.w	800440c <HCD_HC_OUT_IRQHandler+0x944>
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	331b      	adds	r3, #27
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f040 8411 	bne.w	800440c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3326      	adds	r3, #38	; 0x26
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d009      	beq.n	8003c14 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	331b      	adds	r3, #27
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	334d      	adds	r3, #77	; 0x4d
 8003c24:	2203      	movs	r2, #3
 8003c26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f004 fe52 	bl	80088da <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	3344      	adds	r3, #68	; 0x44
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e3df      	b.n	800440c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f004 f89c 	bl	8007d92 <USB_ReadChInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c64:	d111      	bne.n	8003c8a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c72:	461a      	mov	r2, r3
 8003c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c78:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f004 fe29 	bl	80088da <USB_HC_Halt>
 8003c88:	e3c0      	b.n	800440c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 f87d 	bl	8007d92 <USB_ReadChInterrupts>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d168      	bne.n	8003d74 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3344      	adds	r3, #68	; 0x44
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f004 f867 	bl	8007d92 <USB_ReadChInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d112      	bne.n	8003cf4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3319      	adds	r3, #25
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2340      	movs	r3, #64	; 0x40
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	331b      	adds	r3, #27
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d019      	beq.n	8003d3e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	331b      	adds	r3, #27
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	334d      	adds	r3, #77	; 0x4d
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f004 fdb4 	bl	80088da <USB_HC_Halt>
 8003d72:	e34b      	b.n	800440c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f004 f808 	bl	8007d92 <USB_ReadChInterrupts>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d139      	bne.n	8003e00 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	334d      	adds	r3, #77	; 0x4d
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	331a      	adds	r3, #26
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3319      	adds	r3, #25
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3344      	adds	r3, #68	; 0x44
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f004 fd77 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2340      	movs	r3, #64	; 0x40
 8003dfc:	6093      	str	r3, [r2, #8]
 8003dfe:	e305      	b.n	800440c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f003 ffc2 	bl	8007d92 <USB_ReadChInterrupts>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d11a      	bne.n	8003e4e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	461a      	mov	r2, r3
 8003e26:	2308      	movs	r3, #8
 8003e28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	334d      	adds	r3, #77	; 0x4d
 8003e3a:	2206      	movs	r2, #6
 8003e3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f004 fd47 	bl	80088da <USB_HC_Halt>
 8003e4c:	e2de      	b.n	800440c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f003 ff9b 	bl	8007d92 <USB_ReadChInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d144      	bne.n	8003ef0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3344      	adds	r3, #68	; 0x44
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	334d      	adds	r3, #77	; 0x4d
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3319      	adds	r3, #25
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d114      	bne.n	8003ece <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3318      	adds	r3, #24
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3319      	adds	r3, #25
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 fcff 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2310      	movs	r3, #16
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	e28d      	b.n	800440c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 ff4a 	bl	8007d92 <USB_ReadChInterrupts>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d169      	bne.n	8003fdc <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	799b      	ldrb	r3, [r3, #6]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d111      	bne.n	8003f34 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	334d      	adds	r3, #77	; 0x4d
 8003f20:	2207      	movs	r2, #7
 8003f22:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f004 fcd4 	bl	80088da <USB_HC_Halt>
 8003f32:	e049      	b.n	8003fc8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	3344      	adds	r3, #68	; 0x44
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	1c59      	adds	r1, r3, #1
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4403      	add	r3, r0
 8003f54:	3344      	adds	r3, #68	; 0x44
 8003f56:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	3344      	adds	r3, #68	; 0x44
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d922      	bls.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3344      	adds	r3, #68	; 0x44
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	334c      	adds	r3, #76	; 0x4c
 8003f92:	2204      	movs	r2, #4
 8003f94:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	334c      	adds	r3, #76	; 0x4c
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f006 fffd 	bl	800afac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003fb2:	e009      	b.n	8003fc8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	334c      	adds	r3, #76	; 0x4c
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	6093      	str	r3, [r2, #8]
 8003fda:	e217      	b.n	800440c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f003 fed4 	bl	8007d92 <USB_ReadChInterrupts>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff4:	d11b      	bne.n	800402e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	334d      	adds	r3, #77	; 0x4d
 8004006:	2209      	movs	r2, #9
 8004008:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f004 fc61 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004024:	461a      	mov	r2, r3
 8004026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800402a:	6093      	str	r3, [r2, #8]
 800402c:	e1ee      	b.n	800440c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f003 feab 	bl	8007d92 <USB_ReadChInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	f040 81df 	bne.w	8004406 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004054:	461a      	mov	r2, r3
 8004056:	2302      	movs	r3, #2
 8004058:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	334d      	adds	r3, #77	; 0x4d
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	f040 8093 	bne.w	8004198 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	334d      	adds	r3, #77	; 0x4d
 8004082:	2202      	movs	r2, #2
 8004084:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	334c      	adds	r3, #76	; 0x4c
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3326      	adds	r3, #38	; 0x26
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d00b      	beq.n	80040c8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	3326      	adds	r3, #38	; 0x26
 80040c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	f040 8190 	bne.w	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	799b      	ldrb	r3, [r3, #6]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d115      	bne.n	80040fc <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	333d      	adds	r3, #61	; 0x3d
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	f083 0301 	eor.w	r3, r3, #1
 80040e8:	b2d8      	uxtb	r0, r3
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	333d      	adds	r3, #61	; 0x3d
 80040f8:	4602      	mov	r2, r0
 80040fa:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	799b      	ldrb	r3, [r3, #6]
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 8171 	bne.w	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	3334      	adds	r3, #52	; 0x34
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8165 	beq.w	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	3334      	adds	r3, #52	; 0x34
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4403      	add	r3, r0
 800413e:	3328      	adds	r3, #40	; 0x28
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	440b      	add	r3, r1
 8004144:	1e59      	subs	r1, r3, #1
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4403      	add	r3, r0
 8004154:	3328      	adds	r3, #40	; 0x28
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	fbb1 f3f3 	udiv	r3, r1, r3
 800415c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 813f 	beq.w	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	333d      	adds	r3, #61	; 0x3d
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	f083 0301 	eor.w	r3, r3, #1
 8004182:	b2d8      	uxtb	r0, r3
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	333d      	adds	r3, #61	; 0x3d
 8004192:	4602      	mov	r2, r0
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e127      	b.n	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	334d      	adds	r3, #77	; 0x4d
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d120      	bne.n	80041f0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	334d      	adds	r3, #77	; 0x4d
 80041be:	2202      	movs	r2, #2
 80041c0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	331b      	adds	r3, #27
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	f040 8107 	bne.w	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	334c      	adds	r3, #76	; 0x4c
 80041ea:	2202      	movs	r2, #2
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e0fb      	b.n	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	334d      	adds	r3, #77	; 0x4d
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b04      	cmp	r3, #4
 8004204:	d13a      	bne.n	800427c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	334d      	adds	r3, #77	; 0x4d
 8004216:	2202      	movs	r2, #2
 8004218:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	334c      	adds	r3, #76	; 0x4c
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	331b      	adds	r3, #27
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	f040 80d1 	bne.w	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	331b      	adds	r3, #27
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	440a      	add	r2, r1
 8004270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004278:	6053      	str	r3, [r2, #4]
 800427a:	e0b5      	b.n	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	334d      	adds	r3, #77	; 0x4d
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b05      	cmp	r3, #5
 8004290:	d114      	bne.n	80042bc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	334d      	adds	r3, #77	; 0x4d
 80042a2:	2202      	movs	r2, #2
 80042a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	334c      	adds	r3, #76	; 0x4c
 80042b6:	2202      	movs	r2, #2
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e095      	b.n	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	334d      	adds	r3, #77	; 0x4d
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d114      	bne.n	80042fc <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	334d      	adds	r3, #77	; 0x4d
 80042e2:	2202      	movs	r2, #2
 80042e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	334c      	adds	r3, #76	; 0x4c
 80042f6:	2205      	movs	r2, #5
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e075      	b.n	80043e8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	334d      	adds	r3, #77	; 0x4d
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b07      	cmp	r3, #7
 8004310:	d00a      	beq.n	8004328 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004312:	78fa      	ldrb	r2, [r7, #3]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	334d      	adds	r3, #77	; 0x4d
 8004322:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004324:	2b09      	cmp	r3, #9
 8004326:	d170      	bne.n	800440a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	334d      	adds	r3, #77	; 0x4d
 8004338:	2202      	movs	r2, #2
 800433a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	3344      	adds	r3, #68	; 0x44
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	1c59      	adds	r1, r3, #1
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4403      	add	r3, r0
 800435c:	3344      	adds	r3, #68	; 0x44
 800435e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	3344      	adds	r3, #68	; 0x44
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d914      	bls.n	80043a0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	3344      	adds	r3, #68	; 0x44
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	334c      	adds	r3, #76	; 0x4c
 800439a:	2204      	movs	r2, #4
 800439c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800439e:	e022      	b.n	80043e6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	334c      	adds	r3, #76	; 0x4c
 80043b0:	2202      	movs	r2, #2
 80043b2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043ca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043d2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e0:	461a      	mov	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043e6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	334c      	adds	r3, #76	; 0x4c
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f006 fdd4 	bl	800afac <HAL_HCD_HC_NotifyURBChange_Callback>
 8004404:	e002      	b.n	800440c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800440a:	bf00      	nop
  }
}
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b08a      	sub	sp, #40	; 0x28
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	0c5b      	lsrs	r3, r3, #17
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004446:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d004      	beq.n	8004458 <HCD_RXQLVL_IRQHandler+0x46>
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b05      	cmp	r3, #5
 8004452:	f000 80b6 	beq.w	80045c2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004456:	e0b7      	b.n	80045c8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80b3 	beq.w	80045c6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4613      	mov	r3, r2
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	332c      	adds	r3, #44	; 0x2c
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80a7 	beq.w	80045c6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	3338      	adds	r3, #56	; 0x38
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	18d1      	adds	r1, r2, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4403      	add	r3, r0
 800449c:	3334      	adds	r3, #52	; 0x34
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4299      	cmp	r1, r3
 80044a2:	f200 8083 	bhi.w	80045ac <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4613      	mov	r3, r2
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	332c      	adds	r3, #44	; 0x2c
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	b292      	uxth	r2, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	f003 fbfb 	bl	8007cbc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4613      	mov	r3, r2
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	332c      	adds	r3, #44	; 0x2c
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	18d1      	adds	r1, r2, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4403      	add	r3, r0
 80044ea:	332c      	adds	r3, #44	; 0x2c
 80044ec:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	3338      	adds	r3, #56	; 0x38
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	18d1      	adds	r1, r2, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4403      	add	r3, r0
 8004512:	3338      	adds	r3, #56	; 0x38
 8004514:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	4413      	add	r3, r2
 800451e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	0cdb      	lsrs	r3, r3, #19
 8004526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800452a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	3328      	adds	r3, #40	; 0x28
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4293      	cmp	r3, r2
 8004544:	d13f      	bne.n	80045c6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d03c      	beq.n	80045c6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	4413      	add	r3, r2
 8004554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004562:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800456a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	4413      	add	r3, r2
 8004574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004578:	461a      	mov	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4613      	mov	r3, r2
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	333c      	adds	r3, #60	; 0x3c
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	f083 0301 	eor.w	r3, r3, #1
 8004594:	b2d8      	uxtb	r0, r3
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	333c      	adds	r3, #60	; 0x3c
 80045a6:	4602      	mov	r2, r0
 80045a8:	701a      	strb	r2, [r3, #0]
      break;
 80045aa:	e00c      	b.n	80045c6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	334c      	adds	r3, #76	; 0x4c
 80045bc:	2204      	movs	r2, #4
 80045be:	701a      	strb	r2, [r3, #0]
      break;
 80045c0:	e001      	b.n	80045c6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80045c6:	bf00      	nop
  }
}
 80045c8:	bf00      	nop
 80045ca:	3728      	adds	r7, #40	; 0x28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80045fc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b02      	cmp	r3, #2
 8004606:	d10b      	bne.n	8004620 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d102      	bne.n	8004618 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f006 fcae 	bl	800af74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f043 0302 	orr.w	r3, r3, #2
 800461e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b08      	cmp	r3, #8
 8004628:	d132      	bne.n	8004690 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f043 0308 	orr.w	r3, r3, #8
 8004630:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d126      	bne.n	800468a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7a5b      	ldrb	r3, [r3, #9]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d113      	bne.n	800466c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800464a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800464e:	d106      	bne.n	800465e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2102      	movs	r1, #2
 8004656:	4618      	mov	r0, r3
 8004658:	f003 fcc0 	bl	8007fdc <USB_InitFSLSPClkSel>
 800465c:	e011      	b.n	8004682 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2101      	movs	r1, #1
 8004664:	4618      	mov	r0, r3
 8004666:	f003 fcb9 	bl	8007fdc <USB_InitFSLSPClkSel>
 800466a:	e00a      	b.n	8004682 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	79db      	ldrb	r3, [r3, #7]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d106      	bne.n	8004682 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800467a:	461a      	mov	r2, r3
 800467c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004680:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f006 fca0 	bl	800afc8 <HAL_HCD_PortEnabled_Callback>
 8004688:	e002      	b.n	8004690 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f006 fcaa 	bl	800afe4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b20      	cmp	r3, #32
 8004698:	d103      	bne.n	80046a2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f043 0320 	orr.w	r3, r3, #32
 80046a0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046a8:	461a      	mov	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	6013      	str	r3, [r2, #0]
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e12b      	b.n	8004922 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc fff2 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2224      	movs	r2, #36	; 0x24
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800471a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800471c:	f001 fa20 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8004720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4a81      	ldr	r2, [pc, #516]	; (800492c <HAL_I2C_Init+0x274>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d807      	bhi.n	800473c <HAL_I2C_Init+0x84>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a80      	ldr	r2, [pc, #512]	; (8004930 <HAL_I2C_Init+0x278>)
 8004730:	4293      	cmp	r3, r2
 8004732:	bf94      	ite	ls
 8004734:	2301      	movls	r3, #1
 8004736:	2300      	movhi	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e006      	b.n	800474a <HAL_I2C_Init+0x92>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4a7d      	ldr	r2, [pc, #500]	; (8004934 <HAL_I2C_Init+0x27c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	bf94      	ite	ls
 8004744:	2301      	movls	r3, #1
 8004746:	2300      	movhi	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e0e7      	b.n	8004922 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4a78      	ldr	r2, [pc, #480]	; (8004938 <HAL_I2C_Init+0x280>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	0c9b      	lsrs	r3, r3, #18
 800475c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a6a      	ldr	r2, [pc, #424]	; (800492c <HAL_I2C_Init+0x274>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d802      	bhi.n	800478c <HAL_I2C_Init+0xd4>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3301      	adds	r3, #1
 800478a:	e009      	b.n	80047a0 <HAL_I2C_Init+0xe8>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	4a69      	ldr	r2, [pc, #420]	; (800493c <HAL_I2C_Init+0x284>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	099b      	lsrs	r3, r3, #6
 800479e:	3301      	adds	r3, #1
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	495c      	ldr	r1, [pc, #368]	; (800492c <HAL_I2C_Init+0x274>)
 80047bc:	428b      	cmp	r3, r1
 80047be:	d819      	bhi.n	80047f4 <HAL_I2C_Init+0x13c>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1e59      	subs	r1, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ce:	1c59      	adds	r1, r3, #1
 80047d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047d4:	400b      	ands	r3, r1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_I2C_Init+0x138>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1e59      	subs	r1, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047e8:	3301      	adds	r3, #1
 80047ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ee:	e051      	b.n	8004894 <HAL_I2C_Init+0x1dc>
 80047f0:	2304      	movs	r3, #4
 80047f2:	e04f      	b.n	8004894 <HAL_I2C_Init+0x1dc>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d111      	bne.n	8004820 <HAL_I2C_Init+0x168>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1e58      	subs	r0, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	440b      	add	r3, r1
 800480a:	fbb0 f3f3 	udiv	r3, r0, r3
 800480e:	3301      	adds	r3, #1
 8004810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e012      	b.n	8004846 <HAL_I2C_Init+0x18e>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1e58      	subs	r0, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6859      	ldr	r1, [r3, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	0099      	lsls	r1, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	fbb0 f3f3 	udiv	r3, r0, r3
 8004836:	3301      	adds	r3, #1
 8004838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_I2C_Init+0x196>
 800484a:	2301      	movs	r3, #1
 800484c:	e022      	b.n	8004894 <HAL_I2C_Init+0x1dc>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10e      	bne.n	8004874 <HAL_I2C_Init+0x1bc>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1e58      	subs	r0, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6859      	ldr	r1, [r3, #4]
 800485e:	460b      	mov	r3, r1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	440b      	add	r3, r1
 8004864:	fbb0 f3f3 	udiv	r3, r0, r3
 8004868:	3301      	adds	r3, #1
 800486a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004872:	e00f      	b.n	8004894 <HAL_I2C_Init+0x1dc>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1e58      	subs	r0, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6859      	ldr	r1, [r3, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	0099      	lsls	r1, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	fbb0 f3f3 	udiv	r3, r0, r3
 800488a:	3301      	adds	r3, #1
 800488c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	6809      	ldr	r1, [r1, #0]
 8004898:	4313      	orrs	r3, r2
 800489a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6911      	ldr	r1, [r2, #16]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68d2      	ldr	r2, [r2, #12]
 80048ce:	4311      	orrs	r1, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695a      	ldr	r2, [r3, #20]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	000186a0 	.word	0x000186a0
 8004930:	001e847f 	.word	0x001e847f
 8004934:	003d08ff 	.word	0x003d08ff
 8004938:	431bde83 	.word	0x431bde83
 800493c:	10624dd3 	.word	0x10624dd3

08004940 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e128      	b.n	8004ba4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a90      	ldr	r2, [pc, #576]	; (8004bac <HAL_I2S_Init+0x26c>)
 800496a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fc fef3 	bl	8001758 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004988:	f023 030f 	bic.w	r3, r3, #15
 800498c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2202      	movs	r2, #2
 8004994:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d060      	beq.n	8004a60 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80049a6:	2310      	movs	r3, #16
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e001      	b.n	80049b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80049ac:	2320      	movs	r3, #32
 80049ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d802      	bhi.n	80049be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80049be:	2001      	movs	r0, #1
 80049c0:	f001 f9d8 	bl	8005d74 <HAL_RCCEx_GetPeriphCLKFreq>
 80049c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ce:	d125      	bne.n	8004a1c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d010      	beq.n	80049fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	fbb2 f2f3 	udiv	r2, r2, r3
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	461a      	mov	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	3305      	adds	r3, #5
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	e01f      	b.n	8004a3a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	3305      	adds	r3, #5
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	e00e      	b.n	8004a3a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	3305      	adds	r3, #5
 8004a38:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4a5c      	ldr	r2, [pc, #368]	; (8004bb0 <HAL_I2S_Init+0x270>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	08db      	lsrs	r3, r3, #3
 8004a44:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	085b      	lsrs	r3, r3, #1
 8004a56:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	e003      	b.n	8004a68 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004a60:	2302      	movs	r3, #2
 8004a62:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d902      	bls.n	8004a74 <HAL_I2S_Init+0x134>
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	2bff      	cmp	r3, #255	; 0xff
 8004a72:	d907      	bls.n	8004a84 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	f043 0210 	orr.w	r2, r3, #16
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e08f      	b.n	8004ba4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	ea42 0103 	orr.w	r1, r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004aa2:	f023 030f 	bic.w	r3, r3, #15
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6851      	ldr	r1, [r2, #4]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6892      	ldr	r2, [r2, #8]
 8004aae:	4311      	orrs	r1, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	68d2      	ldr	r2, [r2, #12]
 8004ab4:	4311      	orrs	r1, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6992      	ldr	r2, [r2, #24]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d161      	bne.n	8004b94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a38      	ldr	r2, [pc, #224]	; (8004bb4 <HAL_I2S_Init+0x274>)
 8004ad4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a37      	ldr	r2, [pc, #220]	; (8004bb8 <HAL_I2S_Init+0x278>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d101      	bne.n	8004ae4 <HAL_I2S_Init+0x1a4>
 8004ae0:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_I2S_Init+0x27c>)
 8004ae2:	e001      	b.n	8004ae8 <HAL_I2S_Init+0x1a8>
 8004ae4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	4932      	ldr	r1, [pc, #200]	; (8004bb8 <HAL_I2S_Init+0x278>)
 8004af0:	428a      	cmp	r2, r1
 8004af2:	d101      	bne.n	8004af8 <HAL_I2S_Init+0x1b8>
 8004af4:	4a31      	ldr	r2, [pc, #196]	; (8004bbc <HAL_I2S_Init+0x27c>)
 8004af6:	e001      	b.n	8004afc <HAL_I2S_Init+0x1bc>
 8004af8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004afc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b00:	f023 030f 	bic.w	r3, r3, #15
 8004b04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2b      	ldr	r2, [pc, #172]	; (8004bb8 <HAL_I2S_Init+0x278>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d101      	bne.n	8004b14 <HAL_I2S_Init+0x1d4>
 8004b10:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <HAL_I2S_Init+0x27c>)
 8004b12:	e001      	b.n	8004b18 <HAL_I2S_Init+0x1d8>
 8004b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b18:	2202      	movs	r2, #2
 8004b1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a25      	ldr	r2, [pc, #148]	; (8004bb8 <HAL_I2S_Init+0x278>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d101      	bne.n	8004b2a <HAL_I2S_Init+0x1ea>
 8004b26:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_I2S_Init+0x27c>)
 8004b28:	e001      	b.n	8004b2e <HAL_I2S_Init+0x1ee>
 8004b2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3a:	d003      	beq.n	8004b44 <HAL_I2S_Init+0x204>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d103      	bne.n	8004b4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	e001      	b.n	8004b50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b64:	4313      	orrs	r3, r2
 8004b66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	897b      	ldrh	r3, [r7, #10]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a0d      	ldr	r2, [pc, #52]	; (8004bb8 <HAL_I2S_Init+0x278>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d101      	bne.n	8004b8c <HAL_I2S_Init+0x24c>
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <HAL_I2S_Init+0x27c>)
 8004b8a:	e001      	b.n	8004b90 <HAL_I2S_Init+0x250>
 8004b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b90:	897a      	ldrh	r2, [r7, #10]
 8004b92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	08004cb7 	.word	0x08004cb7
 8004bb0:	cccccccd 	.word	0xcccccccd
 8004bb4:	08004dcd 	.word	0x08004dcd
 8004bb8:	40003800 	.word	0x40003800
 8004bbc:	40003400 	.word	0x40003400

08004bc0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	881a      	ldrh	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c9a      	adds	r2, r3, #2
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10e      	bne.n	8004c50 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff ffb8 	bl	8004bc0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10e      	bne.n	8004cae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c9e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff ff93 	bl	8004bd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d13a      	bne.n	8004d48 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d109      	bne.n	8004cf0 <I2S_IRQHandler+0x3a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d102      	bne.n	8004cf0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ffb4 	bl	8004c58 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d126      	bne.n	8004d48 <I2S_IRQHandler+0x92>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d11f      	bne.n	8004d48 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	f043 0202 	orr.w	r2, r3, #2
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff ff50 	bl	8004be8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d136      	bne.n	8004dc2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d109      	bne.n	8004d72 <I2S_IRQHandler+0xbc>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b80      	cmp	r3, #128	; 0x80
 8004d6a:	d102      	bne.n	8004d72 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff45 	bl	8004bfc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d122      	bne.n	8004dc2 <I2S_IRQHandler+0x10c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d11b      	bne.n	8004dc2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d98:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff13 	bl	8004be8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a92      	ldr	r2, [pc, #584]	; (800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d101      	bne.n	8004dea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004de6:	4b92      	ldr	r3, [pc, #584]	; (8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004de8:	e001      	b.n	8004dee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a8b      	ldr	r2, [pc, #556]	; (800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004e04:	4b8a      	ldr	r3, [pc, #552]	; (8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e06:	e001      	b.n	8004e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e18:	d004      	beq.n	8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f040 8099 	bne.w	8004f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d107      	bne.n	8004e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f925 	bl	8005088 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d107      	bne.n	8004e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f9c8 	bl	80051e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d13a      	bne.n	8004ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d035      	beq.n	8004ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a6e      	ldr	r2, [pc, #440]	; (800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d101      	bne.n	8004e7a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004e76:	4b6e      	ldr	r3, [pc, #440]	; (8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e78:	e001      	b.n	8004e7e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4969      	ldr	r1, [pc, #420]	; (800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e86:	428b      	cmp	r3, r1
 8004e88:	d101      	bne.n	8004e8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004e8a:	4b69      	ldr	r3, [pc, #420]	; (8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e8c:	e001      	b.n	8004e92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e96:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ea6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	f043 0202 	orr.w	r2, r3, #2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fe88 	bl	8004be8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	f040 80c3 	bne.w	800506a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80bd 	beq.w	800506a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004efe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a49      	ldr	r2, [pc, #292]	; (800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004f0a:	4b49      	ldr	r3, [pc, #292]	; (8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f0c:	e001      	b.n	8004f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004f0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4944      	ldr	r1, [pc, #272]	; (800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f1a:	428b      	cmp	r3, r1
 8004f1c:	d101      	bne.n	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f1e:	4b44      	ldr	r3, [pc, #272]	; (8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f20:	e001      	b.n	8004f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f2a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	f043 0204 	orr.w	r2, r3, #4
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fe4a 	bl	8004be8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f54:	e089      	b.n	800506a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d107      	bne.n	8004f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f8be 	bl	80050ec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d107      	bne.n	8004f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f8fd 	bl	8005184 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d12f      	bne.n	8004ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d02a      	beq.n	8004ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	; (800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fba:	e001      	b.n	8004fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4919      	ldr	r1, [pc, #100]	; (800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fc8:	428b      	cmp	r3, r1
 8004fca:	d101      	bne.n	8004fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004fcc:	4b18      	ldr	r3, [pc, #96]	; (8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fce:	e001      	b.n	8004fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004fd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	f043 0202 	orr.w	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fdfa 	bl	8004be8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d136      	bne.n	800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d031      	beq.n	800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a07      	ldr	r2, [pc, #28]	; (800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d101      	bne.n	8005016 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005012:	4b07      	ldr	r3, [pc, #28]	; (8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005014:	e001      	b.n	800501a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005016:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4902      	ldr	r1, [pc, #8]	; (800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005022:	428b      	cmp	r3, r1
 8005024:	d106      	bne.n	8005034 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005026:	4b02      	ldr	r3, [pc, #8]	; (8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005028:	e006      	b.n	8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800502a:	bf00      	nop
 800502c:	40003800 	.word	0x40003800
 8005030:	40003400 	.word	0x40003400
 8005034:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005038:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800503c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800504c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff fdc0 	bl	8004be8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005068:	e000      	b.n	800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800506a:	bf00      	nop
}
 800506c:	bf00      	nop
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	1c99      	adds	r1, r3, #2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6251      	str	r1, [r2, #36]	; 0x24
 800509a:	881a      	ldrh	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d113      	bne.n	80050e2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d106      	bne.n	80050e2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff ffc9 	bl	8005074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	1c99      	adds	r1, r3, #2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6251      	str	r1, [r2, #36]	; 0x24
 80050fe:	8819      	ldrh	r1, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1d      	ldr	r2, [pc, #116]	; (800517c <I2SEx_TxISR_I2SExt+0x90>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <I2SEx_TxISR_I2SExt+0x22>
 800510a:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <I2SEx_TxISR_I2SExt+0x94>)
 800510c:	e001      	b.n	8005112 <I2SEx_TxISR_I2SExt+0x26>
 800510e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005112:	460a      	mov	r2, r1
 8005114:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d121      	bne.n	8005172 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a12      	ldr	r2, [pc, #72]	; (800517c <I2SEx_TxISR_I2SExt+0x90>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <I2SEx_TxISR_I2SExt+0x50>
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <I2SEx_TxISR_I2SExt+0x94>)
 800513a:	e001      	b.n	8005140 <I2SEx_TxISR_I2SExt+0x54>
 800513c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	490d      	ldr	r1, [pc, #52]	; (800517c <I2SEx_TxISR_I2SExt+0x90>)
 8005148:	428b      	cmp	r3, r1
 800514a:	d101      	bne.n	8005150 <I2SEx_TxISR_I2SExt+0x64>
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <I2SEx_TxISR_I2SExt+0x94>)
 800514e:	e001      	b.n	8005154 <I2SEx_TxISR_I2SExt+0x68>
 8005150:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005154:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005158:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff ff81 	bl	8005074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40003800 	.word	0x40003800
 8005180:	40003400 	.word	0x40003400

08005184 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68d8      	ldr	r0, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	1c99      	adds	r1, r3, #2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800519c:	b282      	uxth	r2, r0
 800519e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d113      	bne.n	80051e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff ff4a 	bl	8005074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a20      	ldr	r2, [pc, #128]	; (8005278 <I2SEx_RxISR_I2SExt+0x90>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d101      	bne.n	80051fe <I2SEx_RxISR_I2SExt+0x16>
 80051fa:	4b20      	ldr	r3, [pc, #128]	; (800527c <I2SEx_RxISR_I2SExt+0x94>)
 80051fc:	e001      	b.n	8005202 <I2SEx_RxISR_I2SExt+0x1a>
 80051fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005202:	68d8      	ldr	r0, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	1c99      	adds	r1, r3, #2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800520e:	b282      	uxth	r2, r0
 8005210:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d121      	bne.n	800526e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a12      	ldr	r2, [pc, #72]	; (8005278 <I2SEx_RxISR_I2SExt+0x90>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <I2SEx_RxISR_I2SExt+0x50>
 8005234:	4b11      	ldr	r3, [pc, #68]	; (800527c <I2SEx_RxISR_I2SExt+0x94>)
 8005236:	e001      	b.n	800523c <I2SEx_RxISR_I2SExt+0x54>
 8005238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	490d      	ldr	r1, [pc, #52]	; (8005278 <I2SEx_RxISR_I2SExt+0x90>)
 8005244:	428b      	cmp	r3, r1
 8005246:	d101      	bne.n	800524c <I2SEx_RxISR_I2SExt+0x64>
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <I2SEx_RxISR_I2SExt+0x94>)
 800524a:	e001      	b.n	8005250 <I2SEx_RxISR_I2SExt+0x68>
 800524c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005250:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005254:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff ff03 	bl	8005074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800526e:	bf00      	nop
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40003800 	.word	0x40003800
 800527c:	40003400 	.word	0x40003400

08005280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e267      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d075      	beq.n	800538a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800529e:	4b88      	ldr	r3, [pc, #544]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 030c 	and.w	r3, r3, #12
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d00c      	beq.n	80052c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052aa:	4b85      	ldr	r3, [pc, #532]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d112      	bne.n	80052dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052b6:	4b82      	ldr	r3, [pc, #520]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c2:	d10b      	bne.n	80052dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c4:	4b7e      	ldr	r3, [pc, #504]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d05b      	beq.n	8005388 <HAL_RCC_OscConfig+0x108>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d157      	bne.n	8005388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e242      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e4:	d106      	bne.n	80052f4 <HAL_RCC_OscConfig+0x74>
 80052e6:	4b76      	ldr	r3, [pc, #472]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a75      	ldr	r2, [pc, #468]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e01d      	b.n	8005330 <HAL_RCC_OscConfig+0xb0>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052fc:	d10c      	bne.n	8005318 <HAL_RCC_OscConfig+0x98>
 80052fe:	4b70      	ldr	r3, [pc, #448]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a6f      	ldr	r2, [pc, #444]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 8005304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	4b6d      	ldr	r3, [pc, #436]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a6c      	ldr	r2, [pc, #432]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 8005310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	e00b      	b.n	8005330 <HAL_RCC_OscConfig+0xb0>
 8005318:	4b69      	ldr	r3, [pc, #420]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a68      	ldr	r2, [pc, #416]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 800531e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	4b66      	ldr	r3, [pc, #408]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a65      	ldr	r2, [pc, #404]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 800532a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800532e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d013      	beq.n	8005360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005338:	f7fc fd00 	bl	8001d3c <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005340:	f7fc fcfc 	bl	8001d3c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b64      	cmp	r3, #100	; 0x64
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e207      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005352:	4b5b      	ldr	r3, [pc, #364]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0xc0>
 800535e:	e014      	b.n	800538a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fc fcec 	bl	8001d3c <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005368:	f7fc fce8 	bl	8001d3c <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b64      	cmp	r3, #100	; 0x64
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e1f3      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537a:	4b51      	ldr	r3, [pc, #324]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f0      	bne.n	8005368 <HAL_RCC_OscConfig+0xe8>
 8005386:	e000      	b.n	800538a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d063      	beq.n	800545e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005396:	4b4a      	ldr	r3, [pc, #296]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 030c 	and.w	r3, r3, #12
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053a2:	4b47      	ldr	r3, [pc, #284]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d11c      	bne.n	80053e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ae:	4b44      	ldr	r3, [pc, #272]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d116      	bne.n	80053e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ba:	4b41      	ldr	r3, [pc, #260]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_RCC_OscConfig+0x152>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d001      	beq.n	80053d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e1c7      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d2:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4937      	ldr	r1, [pc, #220]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053e6:	e03a      	b.n	800545e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d020      	beq.n	8005432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053f0:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <HAL_RCC_OscConfig+0x244>)
 80053f2:	2201      	movs	r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fc fca1 	bl	8001d3c <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053fe:	f7fc fc9d 	bl	8001d3c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e1a8      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005410:	4b2b      	ldr	r3, [pc, #172]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541c:	4b28      	ldr	r3, [pc, #160]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	4925      	ldr	r1, [pc, #148]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 800542c:	4313      	orrs	r3, r2
 800542e:	600b      	str	r3, [r1, #0]
 8005430:	e015      	b.n	800545e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <HAL_RCC_OscConfig+0x244>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fc fc80 	bl	8001d3c <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005440:	f7fc fc7c 	bl	8001d3c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e187      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005452:	4b1b      	ldr	r3, [pc, #108]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d036      	beq.n	80054d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <HAL_RCC_OscConfig+0x248>)
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005478:	f7fc fc60 	bl	8001d3c <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005480:	f7fc fc5c 	bl	8001d3c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e167      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005492:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <HAL_RCC_OscConfig+0x240>)
 8005494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0x200>
 800549e:	e01b      	b.n	80054d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <HAL_RCC_OscConfig+0x248>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a6:	f7fc fc49 	bl	8001d3c <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ac:	e00e      	b.n	80054cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ae:	f7fc fc45 	bl	8001d3c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d907      	bls.n	80054cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e150      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
 80054c0:	40023800 	.word	0x40023800
 80054c4:	42470000 	.word	0x42470000
 80054c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054cc:	4b88      	ldr	r3, [pc, #544]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 80054ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1ea      	bne.n	80054ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8097 	beq.w	8005614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ea:	4b81      	ldr	r3, [pc, #516]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10f      	bne.n	8005516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	4b7d      	ldr	r3, [pc, #500]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	4a7c      	ldr	r2, [pc, #496]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005504:	6413      	str	r3, [r2, #64]	; 0x40
 8005506:	4b7a      	ldr	r3, [pc, #488]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005512:	2301      	movs	r3, #1
 8005514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005516:	4b77      	ldr	r3, [pc, #476]	; (80056f4 <HAL_RCC_OscConfig+0x474>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d118      	bne.n	8005554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005522:	4b74      	ldr	r3, [pc, #464]	; (80056f4 <HAL_RCC_OscConfig+0x474>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a73      	ldr	r2, [pc, #460]	; (80056f4 <HAL_RCC_OscConfig+0x474>)
 8005528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800552e:	f7fc fc05 	bl	8001d3c <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005536:	f7fc fc01 	bl	8001d3c <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e10c      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005548:	4b6a      	ldr	r3, [pc, #424]	; (80056f4 <HAL_RCC_OscConfig+0x474>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d106      	bne.n	800556a <HAL_RCC_OscConfig+0x2ea>
 800555c:	4b64      	ldr	r3, [pc, #400]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	4a63      	ldr	r2, [pc, #396]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	6713      	str	r3, [r2, #112]	; 0x70
 8005568:	e01c      	b.n	80055a4 <HAL_RCC_OscConfig+0x324>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2b05      	cmp	r3, #5
 8005570:	d10c      	bne.n	800558c <HAL_RCC_OscConfig+0x30c>
 8005572:	4b5f      	ldr	r3, [pc, #380]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	4a5e      	ldr	r2, [pc, #376]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005578:	f043 0304 	orr.w	r3, r3, #4
 800557c:	6713      	str	r3, [r2, #112]	; 0x70
 800557e:	4b5c      	ldr	r3, [pc, #368]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	4a5b      	ldr	r2, [pc, #364]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	6713      	str	r3, [r2, #112]	; 0x70
 800558a:	e00b      	b.n	80055a4 <HAL_RCC_OscConfig+0x324>
 800558c:	4b58      	ldr	r3, [pc, #352]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	4a57      	ldr	r2, [pc, #348]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005592:	f023 0301 	bic.w	r3, r3, #1
 8005596:	6713      	str	r3, [r2, #112]	; 0x70
 8005598:	4b55      	ldr	r3, [pc, #340]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	4a54      	ldr	r2, [pc, #336]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 800559e:	f023 0304 	bic.w	r3, r3, #4
 80055a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d015      	beq.n	80055d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ac:	f7fc fbc6 	bl	8001d3c <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b4:	f7fc fbc2 	bl	8001d3c <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e0cb      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ca:	4b49      	ldr	r3, [pc, #292]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0ee      	beq.n	80055b4 <HAL_RCC_OscConfig+0x334>
 80055d6:	e014      	b.n	8005602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d8:	f7fc fbb0 	bl	8001d3c <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055de:	e00a      	b.n	80055f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e0:	f7fc fbac 	bl	8001d3c <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e0b5      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f6:	4b3e      	ldr	r3, [pc, #248]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1ee      	bne.n	80055e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005602:	7dfb      	ldrb	r3, [r7, #23]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d105      	bne.n	8005614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005608:	4b39      	ldr	r3, [pc, #228]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	4a38      	ldr	r2, [pc, #224]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 800560e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005612:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80a1 	beq.w	8005760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800561e:	4b34      	ldr	r3, [pc, #208]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b08      	cmp	r3, #8
 8005628:	d05c      	beq.n	80056e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d141      	bne.n	80056b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005632:	4b31      	ldr	r3, [pc, #196]	; (80056f8 <HAL_RCC_OscConfig+0x478>)
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005638:	f7fc fb80 	bl	8001d3c <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005640:	f7fc fb7c 	bl	8001d3c <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e087      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005652:	4b27      	ldr	r3, [pc, #156]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f0      	bne.n	8005640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	019b      	lsls	r3, r3, #6
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	085b      	lsrs	r3, r3, #1
 8005676:	3b01      	subs	r3, #1
 8005678:	041b      	lsls	r3, r3, #16
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	061b      	lsls	r3, r3, #24
 8005682:	491b      	ldr	r1, [pc, #108]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 8005684:	4313      	orrs	r3, r2
 8005686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005688:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <HAL_RCC_OscConfig+0x478>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568e:	f7fc fb55 	bl	8001d3c <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005696:	f7fc fb51 	bl	8001d3c <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e05c      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a8:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x416>
 80056b4:	e054      	b.n	8005760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b6:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <HAL_RCC_OscConfig+0x478>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056bc:	f7fc fb3e 	bl	8001d3c <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c4:	f7fc fb3a 	bl	8001d3c <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e045      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d6:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <HAL_RCC_OscConfig+0x470>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f0      	bne.n	80056c4 <HAL_RCC_OscConfig+0x444>
 80056e2:	e03d      	b.n	8005760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d107      	bne.n	80056fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e038      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
 80056f0:	40023800 	.word	0x40023800
 80056f4:	40007000 	.word	0x40007000
 80056f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056fc:	4b1b      	ldr	r3, [pc, #108]	; (800576c <HAL_RCC_OscConfig+0x4ec>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d028      	beq.n	800575c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005714:	429a      	cmp	r2, r3
 8005716:	d121      	bne.n	800575c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d11a      	bne.n	800575c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800572c:	4013      	ands	r3, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005734:	4293      	cmp	r3, r2
 8005736:	d111      	bne.n	800575c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	085b      	lsrs	r3, r3, #1
 8005744:	3b01      	subs	r3, #1
 8005746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d107      	bne.n	800575c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d001      	beq.n	8005760 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40023800 	.word	0x40023800

08005770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0cc      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005784:	4b68      	ldr	r3, [pc, #416]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d90c      	bls.n	80057ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005792:	4b65      	ldr	r3, [pc, #404]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800579a:	4b63      	ldr	r3, [pc, #396]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d001      	beq.n	80057ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0b8      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d020      	beq.n	80057fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057c4:	4b59      	ldr	r3, [pc, #356]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4a58      	ldr	r2, [pc, #352]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057dc:	4b53      	ldr	r3, [pc, #332]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4a52      	ldr	r2, [pc, #328]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e8:	4b50      	ldr	r3, [pc, #320]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	494d      	ldr	r1, [pc, #308]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d044      	beq.n	8005890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d107      	bne.n	800581e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580e:	4b47      	ldr	r3, [pc, #284]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d119      	bne.n	800584e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e07f      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d003      	beq.n	800582e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800582a:	2b03      	cmp	r3, #3
 800582c:	d107      	bne.n	800583e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800582e:	4b3f      	ldr	r3, [pc, #252]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e06f      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800583e:	4b3b      	ldr	r3, [pc, #236]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e067      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800584e:	4b37      	ldr	r3, [pc, #220]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f023 0203 	bic.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4934      	ldr	r1, [pc, #208]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	4313      	orrs	r3, r2
 800585e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005860:	f7fc fa6c 	bl	8001d3c <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	e00a      	b.n	800587e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005868:	f7fc fa68 	bl	8001d3c <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	; 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e04f      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587e:	4b2b      	ldr	r3, [pc, #172]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 020c 	and.w	r2, r3, #12
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	429a      	cmp	r2, r3
 800588e:	d1eb      	bne.n	8005868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005890:	4b25      	ldr	r3, [pc, #148]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d20c      	bcs.n	80058b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589e:	4b22      	ldr	r3, [pc, #136]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b20      	ldr	r3, [pc, #128]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e032      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058c4:	4b19      	ldr	r3, [pc, #100]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4916      	ldr	r1, [pc, #88]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	490e      	ldr	r1, [pc, #56]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058f6:	f000 f821 	bl	800593c <HAL_RCC_GetSysClockFreq>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4b0b      	ldr	r3, [pc, #44]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	091b      	lsrs	r3, r3, #4
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	490a      	ldr	r1, [pc, #40]	; (8005930 <HAL_RCC_ClockConfig+0x1c0>)
 8005908:	5ccb      	ldrb	r3, [r1, r3]
 800590a:	fa22 f303 	lsr.w	r3, r2, r3
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <HAL_RCC_ClockConfig+0x1c4>)
 8005910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <HAL_RCC_ClockConfig+0x1c8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f7fc f9cc 	bl	8001cb4 <HAL_InitTick>

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40023c00 	.word	0x40023c00
 800592c:	40023800 	.word	0x40023800
 8005930:	0800e1e8 	.word	0x0800e1e8
 8005934:	20000000 	.word	0x20000000
 8005938:	20000004 	.word	0x20000004

0800593c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800593c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005940:	b094      	sub	sp, #80	; 0x50
 8005942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	647b      	str	r3, [r7, #68]	; 0x44
 8005948:	2300      	movs	r3, #0
 800594a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800594c:	2300      	movs	r3, #0
 800594e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005954:	4b79      	ldr	r3, [pc, #484]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 030c 	and.w	r3, r3, #12
 800595c:	2b08      	cmp	r3, #8
 800595e:	d00d      	beq.n	800597c <HAL_RCC_GetSysClockFreq+0x40>
 8005960:	2b08      	cmp	r3, #8
 8005962:	f200 80e1 	bhi.w	8005b28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_RCC_GetSysClockFreq+0x34>
 800596a:	2b04      	cmp	r3, #4
 800596c:	d003      	beq.n	8005976 <HAL_RCC_GetSysClockFreq+0x3a>
 800596e:	e0db      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005970:	4b73      	ldr	r3, [pc, #460]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005972:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005974:	e0db      	b.n	8005b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005976:	4b73      	ldr	r3, [pc, #460]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x208>)
 8005978:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800597a:	e0d8      	b.n	8005b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800597c:	4b6f      	ldr	r3, [pc, #444]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x200>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005984:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005986:	4b6d      	ldr	r3, [pc, #436]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d063      	beq.n	8005a5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005992:	4b6a      	ldr	r3, [pc, #424]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	099b      	lsrs	r3, r3, #6
 8005998:	2200      	movs	r2, #0
 800599a:	63bb      	str	r3, [r7, #56]	; 0x38
 800599c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a4:	633b      	str	r3, [r7, #48]	; 0x30
 80059a6:	2300      	movs	r3, #0
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
 80059aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059ae:	4622      	mov	r2, r4
 80059b0:	462b      	mov	r3, r5
 80059b2:	f04f 0000 	mov.w	r0, #0
 80059b6:	f04f 0100 	mov.w	r1, #0
 80059ba:	0159      	lsls	r1, r3, #5
 80059bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059c0:	0150      	lsls	r0, r2, #5
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4621      	mov	r1, r4
 80059c8:	1a51      	subs	r1, r2, r1
 80059ca:	6139      	str	r1, [r7, #16]
 80059cc:	4629      	mov	r1, r5
 80059ce:	eb63 0301 	sbc.w	r3, r3, r1
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059e0:	4659      	mov	r1, fp
 80059e2:	018b      	lsls	r3, r1, #6
 80059e4:	4651      	mov	r1, sl
 80059e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059ea:	4651      	mov	r1, sl
 80059ec:	018a      	lsls	r2, r1, #6
 80059ee:	4651      	mov	r1, sl
 80059f0:	ebb2 0801 	subs.w	r8, r2, r1
 80059f4:	4659      	mov	r1, fp
 80059f6:	eb63 0901 	sbc.w	r9, r3, r1
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a0e:	4690      	mov	r8, r2
 8005a10:	4699      	mov	r9, r3
 8005a12:	4623      	mov	r3, r4
 8005a14:	eb18 0303 	adds.w	r3, r8, r3
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	462b      	mov	r3, r5
 8005a1c:	eb49 0303 	adc.w	r3, r9, r3
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a2e:	4629      	mov	r1, r5
 8005a30:	024b      	lsls	r3, r1, #9
 8005a32:	4621      	mov	r1, r4
 8005a34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a38:	4621      	mov	r1, r4
 8005a3a:	024a      	lsls	r2, r1, #9
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a42:	2200      	movs	r2, #0
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a4c:	f7fb f8ac 	bl	8000ba8 <__aeabi_uldivmod>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4613      	mov	r3, r2
 8005a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a58:	e058      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a5a:	4b38      	ldr	r3, [pc, #224]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	099b      	lsrs	r3, r3, #6
 8005a60:	2200      	movs	r2, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	4611      	mov	r1, r2
 8005a66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a6a:	623b      	str	r3, [r7, #32]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a74:	4642      	mov	r2, r8
 8005a76:	464b      	mov	r3, r9
 8005a78:	f04f 0000 	mov.w	r0, #0
 8005a7c:	f04f 0100 	mov.w	r1, #0
 8005a80:	0159      	lsls	r1, r3, #5
 8005a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a86:	0150      	lsls	r0, r2, #5
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4641      	mov	r1, r8
 8005a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a92:	4649      	mov	r1, r9
 8005a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	f04f 0300 	mov.w	r3, #0
 8005aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005aac:	ebb2 040a 	subs.w	r4, r2, sl
 8005ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	00eb      	lsls	r3, r5, #3
 8005abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ac2:	00e2      	lsls	r2, r4, #3
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	461d      	mov	r5, r3
 8005ac8:	4643      	mov	r3, r8
 8005aca:	18e3      	adds	r3, r4, r3
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	464b      	mov	r3, r9
 8005ad0:	eb45 0303 	adc.w	r3, r5, r3
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	028b      	lsls	r3, r1, #10
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005aec:	4621      	mov	r1, r4
 8005aee:	028a      	lsls	r2, r1, #10
 8005af0:	4610      	mov	r0, r2
 8005af2:	4619      	mov	r1, r3
 8005af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af6:	2200      	movs	r2, #0
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	61fa      	str	r2, [r7, #28]
 8005afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b00:	f7fb f852 	bl	8000ba8 <__aeabi_uldivmod>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4613      	mov	r3, r2
 8005b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	0c1b      	lsrs	r3, r3, #16
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	3301      	adds	r3, #1
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b26:	e002      	b.n	8005b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3750      	adds	r7, #80	; 0x50
 8005b34:	46bd      	mov	sp, r7
 8005b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	00f42400 	.word	0x00f42400
 8005b44:	007a1200 	.word	0x007a1200

08005b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b4c:	4b03      	ldr	r3, [pc, #12]	; (8005b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20000000 	.word	0x20000000

08005b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b64:	f7ff fff0 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	0a9b      	lsrs	r3, r3, #10
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	4903      	ldr	r1, [pc, #12]	; (8005b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40023800 	.word	0x40023800
 8005b84:	0800e1f8 	.word	0x0800e1f8

08005b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b8c:	f7ff ffdc 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b90:	4602      	mov	r2, r0
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	0b5b      	lsrs	r3, r3, #13
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	4903      	ldr	r1, [pc, #12]	; (8005bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	0800e1f8 	.word	0x0800e1f8

08005bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d105      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d035      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bd8:	4b62      	ldr	r3, [pc, #392]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bde:	f7fc f8ad 	bl	8001d3c <HAL_GetTick>
 8005be2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005be6:	f7fc f8a9 	bl	8001d3c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e0b0      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bf8:	4b5b      	ldr	r3, [pc, #364]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1f0      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	019a      	lsls	r2, r3, #6
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	071b      	lsls	r3, r3, #28
 8005c10:	4955      	ldr	r1, [pc, #340]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c18:	4b52      	ldr	r3, [pc, #328]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c1e:	f7fc f88d 	bl	8001d3c <HAL_GetTick>
 8005c22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c24:	e008      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c26:	f7fc f889 	bl	8001d3c <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e090      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c38:	4b4b      	ldr	r3, [pc, #300]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0f0      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8083 	beq.w	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	4b44      	ldr	r3, [pc, #272]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	4a43      	ldr	r2, [pc, #268]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c60:	6413      	str	r3, [r2, #64]	; 0x40
 8005c62:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a3e      	ldr	r2, [pc, #248]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c7a:	f7fc f85f 	bl	8001d3c <HAL_GetTick>
 8005c7e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c82:	f7fc f85b 	bl	8001d3c <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e062      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c94:	4b35      	ldr	r3, [pc, #212]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f0      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ca0:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02f      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d028      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cbe:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cc8:	4b29      	ldr	r3, [pc, #164]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cce:	4b28      	ldr	r3, [pc, #160]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005cd4:	4a24      	ldr	r2, [pc, #144]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cda:	4b23      	ldr	r3, [pc, #140]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d114      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ce6:	f7fc f829 	bl	8001d3c <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cec:	e00a      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cee:	f7fc f825 	bl	8001d3c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e02a      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d04:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0ee      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d1c:	d10d      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d1e:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d32:	490d      	ldr	r1, [pc, #52]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	608b      	str	r3, [r1, #8]
 8005d38:	e005      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d44:	6093      	str	r3, [r2, #8]
 8005d46:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d52:	4905      	ldr	r1, [pc, #20]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	42470068 	.word	0x42470068
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	40007000 	.word	0x40007000
 8005d70:	42470e40 	.word	0x42470e40

08005d74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d13f      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005d92:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d006      	beq.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005da8:	d12f      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005daa:	4b1f      	ldr	r3, [pc, #124]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005dac:	617b      	str	r3, [r7, #20]
          break;
 8005dae:	e02f      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005db0:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dbc:	d108      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005dbe:	4b19      	ldr	r3, [pc, #100]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dc6:	4a19      	ldr	r2, [pc, #100]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	e007      	b.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005dd0:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd8:	4a15      	ldr	r2, [pc, #84]	; (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dde:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005de0:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	fb02 f303 	mul.w	r3, r2, r3
 8005df2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005df4:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfa:	0f1b      	lsrs	r3, r3, #28
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e06:	617b      	str	r3, [r7, #20]
          break;
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
          break;
 8005e0e:	bf00      	nop
        }
      }
      break;
 8005e10:	e000      	b.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005e12:	bf00      	nop
    }
  }
  return frequency;
 8005e14:	697b      	ldr	r3, [r7, #20]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40023800 	.word	0x40023800
 8005e28:	00bb8000 	.word	0x00bb8000
 8005e2c:	007a1200 	.word	0x007a1200
 8005e30:	00f42400 	.word	0x00f42400

08005e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e07b      	b.n	8005f3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d108      	bne.n	8005e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e56:	d009      	beq.n	8005e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	61da      	str	r2, [r3, #28]
 8005e5e:	e005      	b.n	8005e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fb fce6 	bl	8001858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	ea42 0103 	orr.w	r1, r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	f003 0104 	and.w	r1, r3, #4
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	f003 0210 	and.w	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4613      	mov	r3, r2
 8005f54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d002      	beq.n	8005f6c <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8005f66:	2302      	movs	r3, #2
 8005f68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f6a:	e07f      	b.n	800606c <HAL_SPI_Receive_IT+0x124>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d110      	bne.n	8005f96 <HAL_SPI_Receive_IT+0x4e>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f7c:	d10b      	bne.n	8005f96 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2204      	movs	r2, #4
 8005f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f877 	bl	8006080 <HAL_SPI_TransmitReceive_IT>
 8005f92:	4603      	mov	r3, r0
 8005f94:	e06b      	b.n	800606e <HAL_SPI_Receive_IT+0x126>
  }


  if ((pData == NULL) || (Size == 0U))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <HAL_SPI_Receive_IT+0x5a>
 8005f9c:	88fb      	ldrh	r3, [r7, #6]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fa6:	e061      	b.n	800606c <HAL_SPI_Receive_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_SPI_Receive_IT+0x6e>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e05b      	b.n	800606e <HAL_SPI_Receive_IT+0x126>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	88fa      	ldrh	r2, [r7, #6]
 8005fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4a1d      	ldr	r2, [pc, #116]	; (8006078 <HAL_SPI_Receive_IT+0x130>)
 8006002:	641a      	str	r2, [r3, #64]	; 0x40
 8006004:	e002      	b.n	800600c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4a1c      	ldr	r2, [pc, #112]	; (800607c <HAL_SPI_Receive_IT+0x134>)
 800600a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006014:	d10f      	bne.n	8006036 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006034:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b40      	cmp	r3, #64	; 0x40
 8006042:	d007      	beq.n	8006054 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006052:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800606a:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	080065a9 	.word	0x080065a9
 800607c:	0800655f 	.word	0x0800655f

08006080 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006098:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060a0:	7dbb      	ldrb	r3, [r7, #22]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d00d      	beq.n	80060c2 <HAL_SPI_TransmitReceive_IT+0x42>
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ac:	d106      	bne.n	80060bc <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_SPI_TransmitReceive_IT+0x3c>
 80060b6:	7dbb      	ldrb	r3, [r7, #22]
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d002      	beq.n	80060c2 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
 80060be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060c0:	e061      	b.n	8006186 <HAL_SPI_TransmitReceive_IT+0x106>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <HAL_SPI_TransmitReceive_IT+0x54>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_SPI_TransmitReceive_IT+0x54>
 80060ce:	887b      	ldrh	r3, [r7, #2]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060d8:	e055      	b.n	8006186 <HAL_SPI_TransmitReceive_IT+0x106>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_SPI_TransmitReceive_IT+0x68>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e04f      	b.n	8006188 <HAL_SPI_TransmitReceive_IT+0x108>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d003      	beq.n	8006104 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2205      	movs	r2, #5
 8006100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	887a      	ldrh	r2, [r7, #2]
 8006114:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	887a      	ldrh	r2, [r7, #2]
 800611a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	887a      	ldrh	r2, [r7, #2]
 8006126:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	887a      	ldrh	r2, [r7, #2]
 800612c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d006      	beq.n	8006144 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a16      	ldr	r2, [pc, #88]	; (8006194 <HAL_SPI_TransmitReceive_IT+0x114>)
 800613a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4a16      	ldr	r2, [pc, #88]	; (8006198 <HAL_SPI_TransmitReceive_IT+0x118>)
 8006140:	645a      	str	r2, [r3, #68]	; 0x44
 8006142:	e005      	b.n	8006150 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a15      	ldr	r2, [pc, #84]	; (800619c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <HAL_SPI_TransmitReceive_IT+0x120>)
 800614e:	645a      	str	r2, [r3, #68]	; 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d007      	beq.n	800616e <HAL_SPI_TransmitReceive_IT+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800616c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006184:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006186:	7dfb      	ldrb	r3, [r7, #23]
}
 8006188:	4618      	mov	r0, r3
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	080064a1 	.word	0x080064a1
 8006198:	08006501 	.word	0x08006501
 800619c:	080063dd 	.word	0x080063dd
 80061a0:	08006441 	.word	0x08006441

080061a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10e      	bne.n	80061e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d004      	beq.n	80061e4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
    return;
 80061e2:	e0ce      	b.n	8006382 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <HAL_SPI_IRQHandler+0x5e>
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	4798      	blx	r3
    return;
 8006200:	e0bf      	b.n	8006382 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <HAL_SPI_IRQHandler+0x7e>
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d105      	bne.n	8006222 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80b0 	beq.w	8006382 <HAL_SPI_IRQHandler+0x1de>
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80aa 	beq.w	8006382 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d023      	beq.n	8006280 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b03      	cmp	r3, #3
 8006242:	d011      	beq.n	8006268 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006248:	f043 0204 	orr.w	r2, r3, #4
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	e00b      	b.n	8006280 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	693b      	ldr	r3, [r7, #16]
        return;
 800627e:	e080      	b.n	8006382 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d014      	beq.n	80062b4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628e:	f043 0201 	orr.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c2:	f043 0208 	orr.w	r2, r3, #8
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062ca:	2300      	movs	r3, #0
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d04f      	beq.n	8006380 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062ee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <HAL_SPI_IRQHandler+0x168>
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d034      	beq.n	8006376 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0203 	bic.w	r2, r2, #3
 800631a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d011      	beq.n	8006348 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006328:	4a17      	ldr	r2, [pc, #92]	; (8006388 <HAL_SPI_IRQHandler+0x1e4>)
 800632a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006330:	4618      	mov	r0, r3
 8006332:	f7fb feb4 	bl	800209e <HAL_DMA_Abort_IT>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634c:	2b00      	cmp	r3, #0
 800634e:	d016      	beq.n	800637e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006354:	4a0c      	ldr	r2, [pc, #48]	; (8006388 <HAL_SPI_IRQHandler+0x1e4>)
 8006356:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635c:	4618      	mov	r0, r3
 800635e:	f7fb fe9e 	bl	800209e <HAL_DMA_Abort_IT>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006374:	e003      	b.n	800637e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f812 	bl	80063a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800637c:	e000      	b.n	8006380 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800637e:	bf00      	nop
    return;
 8006380:	bf00      	nop
  }
}
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	080063b5 	.word	0x080063b5

0800638c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7ff ffe6 	bl	80063a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f103 020c 	add.w	r2, r3, #12
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	7812      	ldrb	r2, [r2, #0]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006412:	b29b      	uxth	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10f      	bne.n	8006438 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006426:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fa1e 	bl	8006874 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	7812      	ldrb	r2, [r2, #0]
 8006454:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006464:	b29b      	uxth	r3, r3
 8006466:	3b01      	subs	r3, #1
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10f      	bne.n	8006498 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006486:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d102      	bne.n	8006498 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9ee 	bl	8006874 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	b292      	uxth	r2, r2
 80064b4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	1c9a      	adds	r2, r3, #2
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10f      	bne.n	80064f8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f9be 	bl	8006874 <SPI_CloseRxTx_ISR>
    }
  }
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650c:	881a      	ldrh	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	1c9a      	adds	r2, r3, #2
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10f      	bne.n	8006556 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006544:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f98f 	bl	8006874 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f103 020c 	add.w	r2, r3, #12
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	7812      	ldrb	r2, [r2, #0]
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f9de 	bl	800695c <SPI_CloseRx_ISR>
  }
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	b292      	uxth	r2, r2
 80065bc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	1c9a      	adds	r2, r3, #2
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d102      	bne.n	80065e6 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f9bb 	bl	800695c <SPI_CloseRx_ISR>
  }
}
 80065e6:	bf00      	nop
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	4613      	mov	r3, r2
 80065fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006600:	f7fb fb9c 	bl	8001d3c <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	1a9b      	subs	r3, r3, r2
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	4413      	add	r3, r2
 800660e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006610:	f7fb fb94 	bl	8001d3c <HAL_GetTick>
 8006614:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006616:	4b39      	ldr	r3, [pc, #228]	; (80066fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	015b      	lsls	r3, r3, #5
 800661c:	0d1b      	lsrs	r3, r3, #20
 800661e:	69fa      	ldr	r2, [r7, #28]
 8006620:	fb02 f303 	mul.w	r3, r2, r3
 8006624:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006626:	e054      	b.n	80066d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d050      	beq.n	80066d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006630:	f7fb fb84 	bl	8001d3c <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	429a      	cmp	r2, r3
 800663e:	d902      	bls.n	8006646 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d13d      	bne.n	80066c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006654:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800665e:	d111      	bne.n	8006684 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006668:	d004      	beq.n	8006674 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006672:	d107      	bne.n	8006684 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006682:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800668c:	d10f      	bne.n	80066ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e017      	b.n	80066f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4013      	ands	r3, r2
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	429a      	cmp	r2, r3
 80066e0:	bf0c      	ite	eq
 80066e2:	2301      	moveq	r3, #1
 80066e4:	2300      	movne	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d19b      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000000 	.word	0x20000000

08006700 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af02      	add	r7, sp, #8
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006714:	d111      	bne.n	800673a <SPI_EndRxTransaction+0x3a>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800671e:	d004      	beq.n	800672a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006728:	d107      	bne.n	800673a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006738:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006742:	d12a      	bne.n	800679a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674c:	d012      	beq.n	8006774 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2200      	movs	r2, #0
 8006756:	2180      	movs	r1, #128	; 0x80
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f7ff ff49 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d02d      	beq.n	80067c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	f043 0220 	orr.w	r2, r3, #32
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e026      	b.n	80067c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2200      	movs	r2, #0
 800677c:	2101      	movs	r1, #1
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff ff36 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01a      	beq.n	80067c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	f043 0220 	orr.w	r2, r3, #32
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e013      	b.n	80067c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2200      	movs	r2, #0
 80067a2:	2101      	movs	r1, #1
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7ff ff23 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d007      	beq.n	80067c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b4:	f043 0220 	orr.w	r2, r3, #32
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e000      	b.n	80067c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2201      	movs	r2, #1
 80067e0:	2102      	movs	r1, #2
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff ff04 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e032      	b.n	8006864 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067fe:	4b1b      	ldr	r3, [pc, #108]	; (800686c <SPI_EndRxTxTransaction+0xa0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1b      	ldr	r2, [pc, #108]	; (8006870 <SPI_EndRxTxTransaction+0xa4>)
 8006804:	fba2 2303 	umull	r2, r3, r2, r3
 8006808:	0d5b      	lsrs	r3, r3, #21
 800680a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800680e:	fb02 f303 	mul.w	r3, r2, r3
 8006812:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800681c:	d112      	bne.n	8006844 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2200      	movs	r2, #0
 8006826:	2180      	movs	r1, #128	; 0x80
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff fee1 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d016      	beq.n	8006862 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006838:	f043 0220 	orr.w	r2, r3, #32
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e00f      	b.n	8006864 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	3b01      	subs	r3, #1
 800684e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	2b80      	cmp	r3, #128	; 0x80
 800685c:	d0f2      	beq.n	8006844 <SPI_EndRxTxTransaction+0x78>
 800685e:	e000      	b.n	8006862 <SPI_EndRxTxTransaction+0x96>
        break;
 8006860:	bf00      	nop
  }

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000000 	.word	0x20000000
 8006870:	165e9f81 	.word	0x165e9f81

08006874 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800687c:	4b35      	ldr	r3, [pc, #212]	; (8006954 <SPI_CloseRxTx_ISR+0xe0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a35      	ldr	r2, [pc, #212]	; (8006958 <SPI_CloseRxTx_ISR+0xe4>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	0a5b      	lsrs	r3, r3, #9
 8006888:	2264      	movs	r2, #100	; 0x64
 800688a:	fb02 f303 	mul.w	r3, r2, r3
 800688e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006890:	f7fb fa54 	bl	8001d3c <HAL_GetTick>
 8006894:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0220 	bic.w	r2, r2, #32
 80068a4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d106      	bne.n	80068ba <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b0:	f043 0220 	orr.w	r2, r3, #32
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068b8:	e009      	b.n	80068ce <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	3b01      	subs	r3, #1
 80068be:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0eb      	beq.n	80068a6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	2164      	movs	r1, #100	; 0x64
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff ff7a 	bl	80067cc <SPI_EndRxTxTransaction>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e2:	f043 0220 	orr.w	r2, r3, #32
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690c:	2b00      	cmp	r3, #0
 800690e:	d115      	bne.n	800693c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b04      	cmp	r3, #4
 800691a:	d107      	bne.n	800692c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7fa fe6f 	bl	8001608 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800692a:	e00e      	b.n	800694a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff fd29 	bl	800638c <HAL_SPI_TxRxCpltCallback>
}
 800693a:	e006      	b.n	800694a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff fd2b 	bl	80063a0 <HAL_SPI_ErrorCallback>
}
 800694a:	bf00      	nop
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20000000 	.word	0x20000000
 8006958:	057619f1 	.word	0x057619f1

0800695c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006972:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006974:	f7fb f9e2 	bl	8001d3c <HAL_GetTick>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	2164      	movs	r1, #100	; 0x64
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff febe 	bl	8006700 <SPI_EndRxTransaction>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698e:	f043 0220 	orr.w	r2, r3, #32
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fa fe1f 	bl	8001608 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80069ca:	e002      	b.n	80069d2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff fce7 	bl	80063a0 <HAL_SPI_ErrorCallback>
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e042      	b.n	8006a72 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7fa ff79 	bl	80018f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2224      	movs	r2, #36	; 0x24
 8006a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a1c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fd68 	bl	80074f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b08a      	sub	sp, #40	; 0x28
 8006a7e:	af02      	add	r7, sp, #8
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d175      	bne.n	8006b86 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_UART_Transmit+0x2c>
 8006aa0:	88fb      	ldrh	r3, [r7, #6]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e06e      	b.n	8006b88 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2221      	movs	r2, #33	; 0x21
 8006ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ab8:	f7fb f940 	bl	8001d3c <HAL_GetTick>
 8006abc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	88fa      	ldrh	r2, [r7, #6]
 8006ac2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	88fa      	ldrh	r2, [r7, #6]
 8006ac8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad2:	d108      	bne.n	8006ae6 <HAL_UART_Transmit+0x6c>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	e003      	b.n	8006aee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006aee:	e02e      	b.n	8006b4e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2200      	movs	r2, #0
 8006af8:	2180      	movs	r1, #128	; 0x80
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fb04 	bl	8007108 <UART_WaitOnFlagUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e03a      	b.n	8006b88 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10b      	bne.n	8006b30 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	3302      	adds	r3, #2
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	e007      	b.n	8006b40 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	781a      	ldrb	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1cb      	bne.n	8006af0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2140      	movs	r1, #64	; 0x40
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 fad0 	bl	8007108 <UART_WaitOnFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e006      	b.n	8006b88 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	e000      	b.n	8006b88 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006b86:	2302      	movs	r3, #2
  }
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b0ba      	sub	sp, #232	; 0xe8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x66>
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fbc2 	bl	8007378 <UART_Receive_IT>
      return;
 8006bf4:	e25b      	b.n	80070ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80de 	beq.w	8006dbc <HAL_UART_IRQHandler+0x22c>
 8006c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80d1 	beq.w	8006dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <HAL_UART_IRQHandler+0xae>
 8006c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	f043 0201 	orr.w	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <HAL_UART_IRQHandler+0xd2>
 8006c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5a:	f043 0202 	orr.w	r2, r3, #2
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <HAL_UART_IRQHandler+0xf6>
 8006c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	f043 0204 	orr.w	r2, r3, #4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d011      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x126>
 8006c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d105      	bne.n	8006caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cae:	f043 0208 	orr.w	r2, r3, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 81f2 	beq.w	80070a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_UART_IRQHandler+0x14e>
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fb4d 	bl	8007378 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <HAL_UART_IRQHandler+0x17a>
 8006d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d04f      	beq.n	8006daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fa55 	bl	80071ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b40      	cmp	r3, #64	; 0x40
 8006d1c:	d141      	bne.n	8006da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3314      	adds	r3, #20
 8006d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3314      	adds	r3, #20
 8006d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1d9      	bne.n	8006d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d013      	beq.n	8006d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d76:	4a7e      	ldr	r2, [pc, #504]	; (8006f70 <HAL_UART_IRQHandler+0x3e0>)
 8006d78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fb f98d 	bl	800209e <HAL_DMA_Abort_IT>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d016      	beq.n	8006db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d98:	e00e      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f99e 	bl	80070dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da0:	e00a      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f99a 	bl	80070dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da8:	e006      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f996 	bl	80070dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006db6:	e175      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db8:	bf00      	nop
    return;
 8006dba:	e173      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	f040 814f 	bne.w	8007064 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8148 	beq.w	8007064 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8141 	beq.w	8007064 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	f040 80b6 	bne.w	8006f74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 8145 	beq.w	80070a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e26:	429a      	cmp	r2, r3
 8006e28:	f080 813e 	bcs.w	80070a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3e:	f000 8088 	beq.w	8006f52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1d9      	bne.n	8006e42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3314      	adds	r3, #20
 8006e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3314      	adds	r3, #20
 8006eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e1      	bne.n	8006e8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3314      	adds	r3, #20
 8006eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e3      	bne.n	8006eca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f22:	f023 0310 	bic.w	r3, r3, #16
 8006f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	330c      	adds	r3, #12
 8006f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f34:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e3      	bne.n	8006f10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fb f836 	bl	8001fbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2202      	movs	r2, #2
 8006f56:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f8c1 	bl	80070f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f6e:	e09b      	b.n	80070a8 <HAL_UART_IRQHandler+0x518>
 8006f70:	08007281 	.word	0x08007281
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 808e 	beq.w	80070ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8089 	beq.w	80070ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	330c      	adds	r3, #12
 8006fba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006fbe:	647a      	str	r2, [r7, #68]	; 0x44
 8006fc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e3      	bne.n	8006f9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3314      	adds	r3, #20
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	f023 0301 	bic.w	r3, r3, #1
 8006fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3314      	adds	r3, #20
 8006ff2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ff6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e3      	bne.n	8006fd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330c      	adds	r3, #12
 800701e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	60fb      	str	r3, [r7, #12]
   return(result);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0310 	bic.w	r3, r3, #16
 800702e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800703c:	61fa      	str	r2, [r7, #28]
 800703e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	69b9      	ldr	r1, [r7, #24]
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	617b      	str	r3, [r7, #20]
   return(result);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e3      	bne.n	8007018 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007056:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f847 	bl	80070f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007062:	e023      	b.n	80070ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <HAL_UART_IRQHandler+0x4f4>
 8007070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f913 	bl	80072a8 <UART_Transmit_IT>
    return;
 8007082:	e014      	b.n	80070ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00e      	beq.n	80070ae <HAL_UART_IRQHandler+0x51e>
 8007090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f953 	bl	8007348 <UART_EndTransmit_IT>
    return;
 80070a2:	e004      	b.n	80070ae <HAL_UART_IRQHandler+0x51e>
    return;
 80070a4:	bf00      	nop
 80070a6:	e002      	b.n	80070ae <HAL_UART_IRQHandler+0x51e>
      return;
 80070a8:	bf00      	nop
 80070aa:	e000      	b.n	80070ae <HAL_UART_IRQHandler+0x51e>
      return;
 80070ac:	bf00      	nop
  }
}
 80070ae:	37e8      	adds	r7, #232	; 0xe8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007118:	e03b      	b.n	8007192 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007120:	d037      	beq.n	8007192 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007122:	f7fa fe0b 	bl	8001d3c <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	6a3a      	ldr	r2, [r7, #32]
 800712e:	429a      	cmp	r2, r3
 8007130:	d302      	bcc.n	8007138 <UART_WaitOnFlagUntilTimeout+0x30>
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e03a      	b.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d023      	beq.n	8007192 <UART_WaitOnFlagUntilTimeout+0x8a>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b80      	cmp	r3, #128	; 0x80
 800714e:	d020      	beq.n	8007192 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b40      	cmp	r3, #64	; 0x40
 8007154:	d01d      	beq.n	8007192 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b08      	cmp	r3, #8
 8007162:	d116      	bne.n	8007192 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f81d 	bl	80071ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2208      	movs	r2, #8
 8007184:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e00f      	b.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	4013      	ands	r3, r2
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	429a      	cmp	r2, r3
 80071a0:	bf0c      	ite	eq
 80071a2:	2301      	moveq	r3, #1
 80071a4:	2300      	movne	r3, #0
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d0b4      	beq.n	800711a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b095      	sub	sp, #84	; 0x54
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	330c      	adds	r3, #12
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	330c      	adds	r3, #12
 80071e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071e2:	643a      	str	r2, [r7, #64]	; 0x40
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e5      	bne.n	80071c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3314      	adds	r3, #20
 80071fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	61fb      	str	r3, [r7, #28]
   return(result);
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	64bb      	str	r3, [r7, #72]	; 0x48
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3314      	adds	r3, #20
 8007214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007218:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800721c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e5      	bne.n	80071f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	2b01      	cmp	r3, #1
 8007230:	d119      	bne.n	8007266 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	60bb      	str	r3, [r7, #8]
   return(result);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f023 0310 	bic.w	r3, r3, #16
 8007248:	647b      	str	r3, [r7, #68]	; 0x44
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	330c      	adds	r3, #12
 8007250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007252:	61ba      	str	r2, [r7, #24]
 8007254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6979      	ldr	r1, [r7, #20]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	613b      	str	r3, [r7, #16]
   return(result);
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e5      	bne.n	8007232 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007274:	bf00      	nop
 8007276:	3754      	adds	r7, #84	; 0x54
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff ff1e 	bl	80070dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072a0:	bf00      	nop
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b21      	cmp	r3, #33	; 0x21
 80072ba:	d13e      	bne.n	800733a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c4:	d114      	bne.n	80072f0 <UART_Transmit_IT+0x48>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d110      	bne.n	80072f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	1c9a      	adds	r2, r3, #2
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	621a      	str	r2, [r3, #32]
 80072ee:	e008      	b.n	8007302 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	1c59      	adds	r1, r3, #1
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6211      	str	r1, [r2, #32]
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29b      	uxth	r3, r3
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	4619      	mov	r1, r3
 8007310:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10f      	bne.n	8007336 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007324:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007334:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	e000      	b.n	800733c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800733a:	2302      	movs	r3, #2
  }
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800735e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff fea3 	bl	80070b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08c      	sub	sp, #48	; 0x30
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b22      	cmp	r3, #34	; 0x22
 800738a:	f040 80ae 	bne.w	80074ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007396:	d117      	bne.n	80073c8 <UART_Receive_IT+0x50>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d113      	bne.n	80073c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c0:	1c9a      	adds	r2, r3, #2
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	629a      	str	r2, [r3, #40]	; 0x28
 80073c6:	e026      	b.n	8007416 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073da:	d007      	beq.n	80073ec <UART_Receive_IT+0x74>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <UART_Receive_IT+0x82>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d106      	bne.n	80073fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	e008      	b.n	800740c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007406:	b2da      	uxtb	r2, r3
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29b      	uxth	r3, r3
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	4619      	mov	r1, r3
 8007424:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007426:	2b00      	cmp	r3, #0
 8007428:	d15d      	bne.n	80074e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0220 	bic.w	r2, r2, #32
 8007438:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007448:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	695a      	ldr	r2, [r3, #20]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746c:	2b01      	cmp	r3, #1
 800746e:	d135      	bne.n	80074dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	330c      	adds	r3, #12
 800747c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	613b      	str	r3, [r7, #16]
   return(result);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f023 0310 	bic.w	r3, r3, #16
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	330c      	adds	r3, #12
 8007494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007496:	623a      	str	r2, [r7, #32]
 8007498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	69f9      	ldr	r1, [r7, #28]
 800749c:	6a3a      	ldr	r2, [r7, #32]
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e5      	bne.n	8007476 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2b10      	cmp	r3, #16
 80074b6:	d10a      	bne.n	80074ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff fe0b 	bl	80070f0 <HAL_UARTEx_RxEventCallback>
 80074da:	e002      	b.n	80074e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff fdf3 	bl	80070c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e002      	b.n	80074ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e000      	b.n	80074ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80074ea:	2302      	movs	r3, #2
  }
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3730      	adds	r7, #48	; 0x30
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074f8:	b0c0      	sub	sp, #256	; 0x100
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	68d9      	ldr	r1, [r3, #12]
 8007512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	ea40 0301 	orr.w	r3, r0, r1
 800751c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	431a      	orrs	r2, r3
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	431a      	orrs	r2, r3
 8007534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	4313      	orrs	r3, r2
 800753c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800754c:	f021 010c 	bic.w	r1, r1, #12
 8007550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800755a:	430b      	orrs	r3, r1
 800755c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800755e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756e:	6999      	ldr	r1, [r3, #24]
 8007570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	ea40 0301 	orr.w	r3, r0, r1
 800757a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4b8f      	ldr	r3, [pc, #572]	; (80077c0 <UART_SetConfig+0x2cc>)
 8007584:	429a      	cmp	r2, r3
 8007586:	d005      	beq.n	8007594 <UART_SetConfig+0xa0>
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b8d      	ldr	r3, [pc, #564]	; (80077c4 <UART_SetConfig+0x2d0>)
 8007590:	429a      	cmp	r2, r3
 8007592:	d104      	bne.n	800759e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007594:	f7fe faf8 	bl	8005b88 <HAL_RCC_GetPCLK2Freq>
 8007598:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800759c:	e003      	b.n	80075a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800759e:	f7fe fadf 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 80075a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b0:	f040 810c 	bne.w	80077cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075c6:	4622      	mov	r2, r4
 80075c8:	462b      	mov	r3, r5
 80075ca:	1891      	adds	r1, r2, r2
 80075cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80075ce:	415b      	adcs	r3, r3
 80075d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075d6:	4621      	mov	r1, r4
 80075d8:	eb12 0801 	adds.w	r8, r2, r1
 80075dc:	4629      	mov	r1, r5
 80075de:	eb43 0901 	adc.w	r9, r3, r1
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	f04f 0300 	mov.w	r3, #0
 80075ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075f6:	4690      	mov	r8, r2
 80075f8:	4699      	mov	r9, r3
 80075fa:	4623      	mov	r3, r4
 80075fc:	eb18 0303 	adds.w	r3, r8, r3
 8007600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007604:	462b      	mov	r3, r5
 8007606:	eb49 0303 	adc.w	r3, r9, r3
 800760a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800760e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800761a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800761e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007622:	460b      	mov	r3, r1
 8007624:	18db      	adds	r3, r3, r3
 8007626:	653b      	str	r3, [r7, #80]	; 0x50
 8007628:	4613      	mov	r3, r2
 800762a:	eb42 0303 	adc.w	r3, r2, r3
 800762e:	657b      	str	r3, [r7, #84]	; 0x54
 8007630:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007634:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007638:	f7f9 fab6 	bl	8000ba8 <__aeabi_uldivmod>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4b61      	ldr	r3, [pc, #388]	; (80077c8 <UART_SetConfig+0x2d4>)
 8007642:	fba3 2302 	umull	r2, r3, r3, r2
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	011c      	lsls	r4, r3, #4
 800764a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800764e:	2200      	movs	r2, #0
 8007650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007654:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007658:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800765c:	4642      	mov	r2, r8
 800765e:	464b      	mov	r3, r9
 8007660:	1891      	adds	r1, r2, r2
 8007662:	64b9      	str	r1, [r7, #72]	; 0x48
 8007664:	415b      	adcs	r3, r3
 8007666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800766c:	4641      	mov	r1, r8
 800766e:	eb12 0a01 	adds.w	sl, r2, r1
 8007672:	4649      	mov	r1, r9
 8007674:	eb43 0b01 	adc.w	fp, r3, r1
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007684:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800768c:	4692      	mov	sl, r2
 800768e:	469b      	mov	fp, r3
 8007690:	4643      	mov	r3, r8
 8007692:	eb1a 0303 	adds.w	r3, sl, r3
 8007696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800769a:	464b      	mov	r3, r9
 800769c:	eb4b 0303 	adc.w	r3, fp, r3
 80076a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076b8:	460b      	mov	r3, r1
 80076ba:	18db      	adds	r3, r3, r3
 80076bc:	643b      	str	r3, [r7, #64]	; 0x40
 80076be:	4613      	mov	r3, r2
 80076c0:	eb42 0303 	adc.w	r3, r2, r3
 80076c4:	647b      	str	r3, [r7, #68]	; 0x44
 80076c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076ce:	f7f9 fa6b 	bl	8000ba8 <__aeabi_uldivmod>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	4b3b      	ldr	r3, [pc, #236]	; (80077c8 <UART_SetConfig+0x2d4>)
 80076da:	fba3 2301 	umull	r2, r3, r3, r1
 80076de:	095b      	lsrs	r3, r3, #5
 80076e0:	2264      	movs	r2, #100	; 0x64
 80076e2:	fb02 f303 	mul.w	r3, r2, r3
 80076e6:	1acb      	subs	r3, r1, r3
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076ee:	4b36      	ldr	r3, [pc, #216]	; (80077c8 <UART_SetConfig+0x2d4>)
 80076f0:	fba3 2302 	umull	r2, r3, r3, r2
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076fc:	441c      	add	r4, r3
 80076fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007702:	2200      	movs	r2, #0
 8007704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007708:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800770c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007710:	4642      	mov	r2, r8
 8007712:	464b      	mov	r3, r9
 8007714:	1891      	adds	r1, r2, r2
 8007716:	63b9      	str	r1, [r7, #56]	; 0x38
 8007718:	415b      	adcs	r3, r3
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800771c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007720:	4641      	mov	r1, r8
 8007722:	1851      	adds	r1, r2, r1
 8007724:	6339      	str	r1, [r7, #48]	; 0x30
 8007726:	4649      	mov	r1, r9
 8007728:	414b      	adcs	r3, r1
 800772a:	637b      	str	r3, [r7, #52]	; 0x34
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007738:	4659      	mov	r1, fp
 800773a:	00cb      	lsls	r3, r1, #3
 800773c:	4651      	mov	r1, sl
 800773e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007742:	4651      	mov	r1, sl
 8007744:	00ca      	lsls	r2, r1, #3
 8007746:	4610      	mov	r0, r2
 8007748:	4619      	mov	r1, r3
 800774a:	4603      	mov	r3, r0
 800774c:	4642      	mov	r2, r8
 800774e:	189b      	adds	r3, r3, r2
 8007750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007754:	464b      	mov	r3, r9
 8007756:	460a      	mov	r2, r1
 8007758:	eb42 0303 	adc.w	r3, r2, r3
 800775c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800776c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007774:	460b      	mov	r3, r1
 8007776:	18db      	adds	r3, r3, r3
 8007778:	62bb      	str	r3, [r7, #40]	; 0x28
 800777a:	4613      	mov	r3, r2
 800777c:	eb42 0303 	adc.w	r3, r2, r3
 8007780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007786:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800778a:	f7f9 fa0d 	bl	8000ba8 <__aeabi_uldivmod>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <UART_SetConfig+0x2d4>)
 8007794:	fba3 1302 	umull	r1, r3, r3, r2
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	2164      	movs	r1, #100	; 0x64
 800779c:	fb01 f303 	mul.w	r3, r1, r3
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	3332      	adds	r3, #50	; 0x32
 80077a6:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <UART_SetConfig+0x2d4>)
 80077a8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	f003 0207 	and.w	r2, r3, #7
 80077b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4422      	add	r2, r4
 80077ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077bc:	e106      	b.n	80079cc <UART_SetConfig+0x4d8>
 80077be:	bf00      	nop
 80077c0:	40011000 	.word	0x40011000
 80077c4:	40011400 	.word	0x40011400
 80077c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077d0:	2200      	movs	r2, #0
 80077d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077de:	4642      	mov	r2, r8
 80077e0:	464b      	mov	r3, r9
 80077e2:	1891      	adds	r1, r2, r2
 80077e4:	6239      	str	r1, [r7, #32]
 80077e6:	415b      	adcs	r3, r3
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
 80077ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077ee:	4641      	mov	r1, r8
 80077f0:	1854      	adds	r4, r2, r1
 80077f2:	4649      	mov	r1, r9
 80077f4:	eb43 0501 	adc.w	r5, r3, r1
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	00eb      	lsls	r3, r5, #3
 8007802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007806:	00e2      	lsls	r2, r4, #3
 8007808:	4614      	mov	r4, r2
 800780a:	461d      	mov	r5, r3
 800780c:	4643      	mov	r3, r8
 800780e:	18e3      	adds	r3, r4, r3
 8007810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007814:	464b      	mov	r3, r9
 8007816:	eb45 0303 	adc.w	r3, r5, r3
 800781a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800781e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800782a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	f04f 0300 	mov.w	r3, #0
 8007836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800783a:	4629      	mov	r1, r5
 800783c:	008b      	lsls	r3, r1, #2
 800783e:	4621      	mov	r1, r4
 8007840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007844:	4621      	mov	r1, r4
 8007846:	008a      	lsls	r2, r1, #2
 8007848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800784c:	f7f9 f9ac 	bl	8000ba8 <__aeabi_uldivmod>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4b60      	ldr	r3, [pc, #384]	; (80079d8 <UART_SetConfig+0x4e4>)
 8007856:	fba3 2302 	umull	r2, r3, r3, r2
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	011c      	lsls	r4, r3, #4
 800785e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007862:	2200      	movs	r2, #0
 8007864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007868:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800786c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007870:	4642      	mov	r2, r8
 8007872:	464b      	mov	r3, r9
 8007874:	1891      	adds	r1, r2, r2
 8007876:	61b9      	str	r1, [r7, #24]
 8007878:	415b      	adcs	r3, r3
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007880:	4641      	mov	r1, r8
 8007882:	1851      	adds	r1, r2, r1
 8007884:	6139      	str	r1, [r7, #16]
 8007886:	4649      	mov	r1, r9
 8007888:	414b      	adcs	r3, r1
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007898:	4659      	mov	r1, fp
 800789a:	00cb      	lsls	r3, r1, #3
 800789c:	4651      	mov	r1, sl
 800789e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078a2:	4651      	mov	r1, sl
 80078a4:	00ca      	lsls	r2, r1, #3
 80078a6:	4610      	mov	r0, r2
 80078a8:	4619      	mov	r1, r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	4642      	mov	r2, r8
 80078ae:	189b      	adds	r3, r3, r2
 80078b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078b4:	464b      	mov	r3, r9
 80078b6:	460a      	mov	r2, r1
 80078b8:	eb42 0303 	adc.w	r3, r2, r3
 80078bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80078ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	f04f 0300 	mov.w	r3, #0
 80078d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078d8:	4649      	mov	r1, r9
 80078da:	008b      	lsls	r3, r1, #2
 80078dc:	4641      	mov	r1, r8
 80078de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078e2:	4641      	mov	r1, r8
 80078e4:	008a      	lsls	r2, r1, #2
 80078e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078ea:	f7f9 f95d 	bl	8000ba8 <__aeabi_uldivmod>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4611      	mov	r1, r2
 80078f4:	4b38      	ldr	r3, [pc, #224]	; (80079d8 <UART_SetConfig+0x4e4>)
 80078f6:	fba3 2301 	umull	r2, r3, r3, r1
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	2264      	movs	r2, #100	; 0x64
 80078fe:	fb02 f303 	mul.w	r3, r2, r3
 8007902:	1acb      	subs	r3, r1, r3
 8007904:	011b      	lsls	r3, r3, #4
 8007906:	3332      	adds	r3, #50	; 0x32
 8007908:	4a33      	ldr	r2, [pc, #204]	; (80079d8 <UART_SetConfig+0x4e4>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	095b      	lsrs	r3, r3, #5
 8007910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007914:	441c      	add	r4, r3
 8007916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800791a:	2200      	movs	r2, #0
 800791c:	673b      	str	r3, [r7, #112]	; 0x70
 800791e:	677a      	str	r2, [r7, #116]	; 0x74
 8007920:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007924:	4642      	mov	r2, r8
 8007926:	464b      	mov	r3, r9
 8007928:	1891      	adds	r1, r2, r2
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	415b      	adcs	r3, r3
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007934:	4641      	mov	r1, r8
 8007936:	1851      	adds	r1, r2, r1
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	4649      	mov	r1, r9
 800793c:	414b      	adcs	r3, r1
 800793e:	607b      	str	r3, [r7, #4]
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800794c:	4659      	mov	r1, fp
 800794e:	00cb      	lsls	r3, r1, #3
 8007950:	4651      	mov	r1, sl
 8007952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007956:	4651      	mov	r1, sl
 8007958:	00ca      	lsls	r2, r1, #3
 800795a:	4610      	mov	r0, r2
 800795c:	4619      	mov	r1, r3
 800795e:	4603      	mov	r3, r0
 8007960:	4642      	mov	r2, r8
 8007962:	189b      	adds	r3, r3, r2
 8007964:	66bb      	str	r3, [r7, #104]	; 0x68
 8007966:	464b      	mov	r3, r9
 8007968:	460a      	mov	r2, r1
 800796a:	eb42 0303 	adc.w	r3, r2, r3
 800796e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	663b      	str	r3, [r7, #96]	; 0x60
 800797a:	667a      	str	r2, [r7, #100]	; 0x64
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007988:	4649      	mov	r1, r9
 800798a:	008b      	lsls	r3, r1, #2
 800798c:	4641      	mov	r1, r8
 800798e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007992:	4641      	mov	r1, r8
 8007994:	008a      	lsls	r2, r1, #2
 8007996:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800799a:	f7f9 f905 	bl	8000ba8 <__aeabi_uldivmod>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4b0d      	ldr	r3, [pc, #52]	; (80079d8 <UART_SetConfig+0x4e4>)
 80079a4:	fba3 1302 	umull	r1, r3, r3, r2
 80079a8:	095b      	lsrs	r3, r3, #5
 80079aa:	2164      	movs	r1, #100	; 0x64
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	3332      	adds	r3, #50	; 0x32
 80079b6:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <UART_SetConfig+0x4e4>)
 80079b8:	fba2 2303 	umull	r2, r3, r2, r3
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	f003 020f 	and.w	r2, r3, #15
 80079c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4422      	add	r2, r4
 80079ca:	609a      	str	r2, [r3, #8]
}
 80079cc:	bf00      	nop
 80079ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079d2:	46bd      	mov	sp, r7
 80079d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079d8:	51eb851f 	.word	0x51eb851f

080079dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079dc:	b084      	sub	sp, #16
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	f107 001c 	add.w	r0, r7, #28
 80079ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079ee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d123      	bne.n	8007a3e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d105      	bne.n	8007a32 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f9dc 	bl	8007df0 <USB_CoreReset>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73fb      	strb	r3, [r7, #15]
 8007a3c:	e01b      	b.n	8007a76 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f9d0 	bl	8007df0 <USB_CoreReset>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38
 8007a68:	e005      	b.n	8007a76 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a76:	7fbb      	ldrb	r3, [r7, #30]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d10b      	bne.n	8007a94 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f043 0206 	orr.w	r2, r3, #6
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f043 0220 	orr.w	r2, r3, #32
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aa0:	b004      	add	sp, #16
 8007aa2:	4770      	bx	lr

08007aa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f043 0201 	orr.w	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f023 0201 	bic.w	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d115      	bne.n	8007b36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b16:	200a      	movs	r0, #10
 8007b18:	f7fa f91c 	bl	8001d54 <HAL_Delay>
      ms += 10U;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	330a      	adds	r3, #10
 8007b20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f956 	bl	8007dd4 <USB_GetMode>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d01e      	beq.n	8007b6c <USB_SetCurrentMode+0x84>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2bc7      	cmp	r3, #199	; 0xc7
 8007b32:	d9f0      	bls.n	8007b16 <USB_SetCurrentMode+0x2e>
 8007b34:	e01a      	b.n	8007b6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b36:	78fb      	ldrb	r3, [r7, #3]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d115      	bne.n	8007b68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b48:	200a      	movs	r0, #10
 8007b4a:	f7fa f903 	bl	8001d54 <HAL_Delay>
      ms += 10U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	330a      	adds	r3, #10
 8007b52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f93d 	bl	8007dd4 <USB_GetMode>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d005      	beq.n	8007b6c <USB_SetCurrentMode+0x84>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2bc7      	cmp	r3, #199	; 0xc7
 8007b64:	d9f0      	bls.n	8007b48 <USB_SetCurrentMode+0x60>
 8007b66:	e001      	b.n	8007b6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e005      	b.n	8007b78 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2bc8      	cmp	r3, #200	; 0xc8
 8007b70:	d101      	bne.n	8007b76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3301      	adds	r3, #1
 8007b92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007b9a:	d901      	bls.n	8007ba0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e01b      	b.n	8007bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	daf2      	bge.n	8007b8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	019b      	lsls	r3, r3, #6
 8007bb0:	f043 0220 	orr.w	r2, r3, #32
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007bc4:	d901      	bls.n	8007bca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e006      	b.n	8007bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d0f0      	beq.n	8007bb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007bfc:	d901      	bls.n	8007c02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e018      	b.n	8007c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	daf2      	bge.n	8007bf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2210      	movs	r2, #16
 8007c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3301      	adds	r3, #1
 8007c18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007c20:	d901      	bls.n	8007c26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e006      	b.n	8007c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b10      	cmp	r3, #16
 8007c30:	d0f0      	beq.n	8007c14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b089      	sub	sp, #36	; 0x24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	460b      	mov	r3, r1
 8007c50:	71fb      	strb	r3, [r7, #7]
 8007c52:	4613      	mov	r3, r2
 8007c54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d123      	bne.n	8007cae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c66:	88bb      	ldrh	r3, [r7, #4]
 8007c68:	3303      	adds	r3, #3
 8007c6a:	089b      	lsrs	r3, r3, #2
 8007c6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61bb      	str	r3, [r7, #24]
 8007c72:	e018      	b.n	8007ca6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	031a      	lsls	r2, r3, #12
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c80:	461a      	mov	r2, r3
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3301      	adds	r3, #1
 8007c92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	3301      	adds	r3, #1
 8007c98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d3e2      	bcc.n	8007c74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3724      	adds	r7, #36	; 0x24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b08b      	sub	sp, #44	; 0x2c
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007cd2:	88fb      	ldrh	r3, [r7, #6]
 8007cd4:	089b      	lsrs	r3, r3, #2
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	f003 0303 	and.w	r3, r3, #3
 8007ce0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	623b      	str	r3, [r7, #32]
 8007ce6:	e014      	b.n	8007d12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	3301      	adds	r3, #1
 8007d04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	3301      	adds	r3, #1
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	623b      	str	r3, [r7, #32]
 8007d12:	6a3a      	ldr	r2, [r7, #32]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d3e6      	bcc.n	8007ce8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d1a:	8bfb      	ldrh	r3, [r7, #30]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01e      	beq.n	8007d5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f107 0310 	add.w	r3, r7, #16
 8007d30:	6812      	ldr	r2, [r2, #0]
 8007d32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	701a      	strb	r2, [r3, #0]
      i++;
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	3301      	adds	r3, #1
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d52:	8bfb      	ldrh	r3, [r7, #30]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d58:	8bfb      	ldrh	r3, [r7, #30]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1ea      	bne.n	8007d34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	372c      	adds	r7, #44	; 0x2c
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4013      	ands	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d84:	68fb      	ldr	r3, [r7, #12]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b085      	sub	sp, #20
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	f003 0301 	and.w	r3, r3, #1
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007e08:	d901      	bls.n	8007e0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e01b      	b.n	8007e46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	daf2      	bge.n	8007dfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f043 0201 	orr.w	r2, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007e32:	d901      	bls.n	8007e38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e006      	b.n	8007e46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d0f0      	beq.n	8007e26 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e54:	b084      	sub	sp, #16
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b086      	sub	sp, #24
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e74:	461a      	mov	r2, r3
 8007e76:	2300      	movs	r3, #0
 8007e78:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e96:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d119      	bne.n	8007ede <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d10a      	bne.n	8007ec8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ec0:	f043 0304 	orr.w	r3, r3, #4
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	e014      	b.n	8007ef2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ed6:	f023 0304 	bic.w	r3, r3, #4
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	e009      	b.n	8007ef2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007eec:	f023 0304 	bic.w	r3, r3, #4
 8007ef0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ef2:	2110      	movs	r1, #16
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7ff fe43 	bl	8007b80 <USB_FlushTxFifo>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff fe6d 	bl	8007be4 <USB_FlushRxFifo>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f14:	2300      	movs	r3, #0
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	e015      	b.n	8007f46 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f26:	461a      	mov	r2, r3
 8007f28:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	3301      	adds	r3, #1
 8007f44:	613b      	str	r3, [r7, #16]
 8007f46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d3e3      	bcc.n	8007f1a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a18      	ldr	r2, [pc, #96]	; (8007fc4 <USB_HostInit+0x170>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d10b      	bne.n	8007f80 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f6e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a15      	ldr	r2, [pc, #84]	; (8007fc8 <USB_HostInit+0x174>)
 8007f74:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a14      	ldr	r2, [pc, #80]	; (8007fcc <USB_HostInit+0x178>)
 8007f7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007f7e:	e009      	b.n	8007f94 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2280      	movs	r2, #128	; 0x80
 8007f84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a11      	ldr	r2, [pc, #68]	; (8007fd0 <USB_HostInit+0x17c>)
 8007f8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a11      	ldr	r2, [pc, #68]	; (8007fd4 <USB_HostInit+0x180>)
 8007f90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d105      	bne.n	8007fa8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	f043 0210 	orr.w	r2, r3, #16
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	699a      	ldr	r2, [r3, #24]
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <USB_HostInit+0x184>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fc0:	b004      	add	sp, #16
 8007fc2:	4770      	bx	lr
 8007fc4:	40040000 	.word	0x40040000
 8007fc8:	01000200 	.word	0x01000200
 8007fcc:	00e00300 	.word	0x00e00300
 8007fd0:	00600080 	.word	0x00600080
 8007fd4:	004000e0 	.word	0x004000e0
 8007fd8:	a3200008 	.word	0xa3200008

08007fdc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ffa:	f023 0303 	bic.w	r3, r3, #3
 8007ffe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	f003 0303 	and.w	r3, r3, #3
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008014:	4313      	orrs	r3, r2
 8008016:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d107      	bne.n	800802e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008024:	461a      	mov	r2, r3
 8008026:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800802a:	6053      	str	r3, [r2, #4]
 800802c:	e00c      	b.n	8008048 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800802e:	78fb      	ldrb	r3, [r7, #3]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d107      	bne.n	8008044 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800803a:	461a      	mov	r2, r3
 800803c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008040:	6053      	str	r3, [r2, #4]
 8008042:	e001      	b.n	8008048 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e000      	b.n	800804a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008076:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008084:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008086:	2064      	movs	r0, #100	; 0x64
 8008088:	f7f9 fe64 	bl	8001d54 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008098:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800809a:	200a      	movs	r0, #10
 800809c:	f7f9 fe5a 	bl	8001d54 <HAL_Delay>

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80080ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d109      	bne.n	80080ee <USB_DriveVbus+0x44>
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d106      	bne.n	80080ee <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080ec:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f8:	d109      	bne.n	800810e <USB_DriveVbus+0x64>
 80080fa:	78fb      	ldrb	r3, [r7, #3]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d106      	bne.n	800810e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800810c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	0c5b      	lsrs	r3, r3, #17
 800813a:	f003 0303 	and.w	r3, r3, #3
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	b29b      	uxth	r3, r3
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	4608      	mov	r0, r1
 8008176:	4611      	mov	r1, r2
 8008178:	461a      	mov	r2, r3
 800817a:	4603      	mov	r3, r0
 800817c:	70fb      	strb	r3, [r7, #3]
 800817e:	460b      	mov	r3, r1
 8008180:	70bb      	strb	r3, [r7, #2]
 8008182:	4613      	mov	r3, r2
 8008184:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	4413      	add	r3, r2
 8008196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819a:	461a      	mov	r2, r3
 800819c:	f04f 33ff 	mov.w	r3, #4294967295
 80081a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80081a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d87c      	bhi.n	80082a4 <USB_HC_Init+0x138>
 80081aa:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <USB_HC_Init+0x44>)
 80081ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b0:	080081c1 	.word	0x080081c1
 80081b4:	08008267 	.word	0x08008267
 80081b8:	080081c1 	.word	0x080081c1
 80081bc:	08008229 	.word	0x08008229
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081cc:	461a      	mov	r2, r3
 80081ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80081d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80081d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	da10      	bge.n	80081fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	0151      	lsls	r1, r2, #5
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	440a      	add	r2, r1
 80081f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081fa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80081fc:	e055      	b.n	80082aa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a6f      	ldr	r2, [pc, #444]	; (80083c0 <USB_HC_Init+0x254>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d151      	bne.n	80082aa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008206:	78fb      	ldrb	r3, [r7, #3]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	4413      	add	r3, r2
 800820e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	78fa      	ldrb	r2, [r7, #3]
 8008216:	0151      	lsls	r1, r2, #5
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	440a      	add	r2, r1
 800821c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008220:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008224:	60d3      	str	r3, [r2, #12]
      break;
 8008226:	e040      	b.n	80082aa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	4413      	add	r3, r2
 8008230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008234:	461a      	mov	r2, r3
 8008236:	f240 639d 	movw	r3, #1693	; 0x69d
 800823a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800823c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008240:	2b00      	cmp	r3, #0
 8008242:	da34      	bge.n	80082ae <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	4413      	add	r3, r2
 800824c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	78fa      	ldrb	r2, [r7, #3]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	440a      	add	r2, r1
 800825a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800825e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008262:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008264:	e023      	b.n	80082ae <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	4413      	add	r3, r2
 800826e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008272:	461a      	mov	r2, r3
 8008274:	f240 2325 	movw	r3, #549	; 0x225
 8008278:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800827a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800827e:	2b00      	cmp	r3, #0
 8008280:	da17      	bge.n	80082b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008282:	78fb      	ldrb	r3, [r7, #3]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	4413      	add	r3, r2
 800828a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	78fa      	ldrb	r2, [r7, #3]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	440a      	add	r2, r1
 8008298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800829c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80082a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80082a2:	e006      	b.n	80082b2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	77fb      	strb	r3, [r7, #31]
      break;
 80082a8:	e004      	b.n	80082b4 <USB_HC_Init+0x148>
      break;
 80082aa:	bf00      	nop
 80082ac:	e002      	b.n	80082b4 <USB_HC_Init+0x148>
      break;
 80082ae:	bf00      	nop
 80082b0:	e000      	b.n	80082b4 <USB_HC_Init+0x148>
      break;
 80082b2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c0:	461a      	mov	r2, r3
 80082c2:	2300      	movs	r3, #0
 80082c4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	78fa      	ldrb	r2, [r7, #3]
 80082d6:	0151      	lsls	r1, r2, #5
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	440a      	add	r2, r1
 80082dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082e0:	f043 0302 	orr.w	r3, r3, #2
 80082e4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	f003 030f 	and.w	r3, r3, #15
 80082f4:	2101      	movs	r1, #1
 80082f6:	fa01 f303 	lsl.w	r3, r1, r3
 80082fa:	6939      	ldr	r1, [r7, #16]
 80082fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008300:	4313      	orrs	r3, r2
 8008302:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008310:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008314:	2b00      	cmp	r3, #0
 8008316:	da03      	bge.n	8008320 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800831c:	61bb      	str	r3, [r7, #24]
 800831e:	e001      	b.n	8008324 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff fef9 	bl	800811c <USB_GetHostSpeed>
 800832a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800832c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008330:	2b02      	cmp	r3, #2
 8008332:	d106      	bne.n	8008342 <USB_HC_Init+0x1d6>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d003      	beq.n	8008342 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800833a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	e001      	b.n	8008346 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008346:	787b      	ldrb	r3, [r7, #1]
 8008348:	059b      	lsls	r3, r3, #22
 800834a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800834e:	78bb      	ldrb	r3, [r7, #2]
 8008350:	02db      	lsls	r3, r3, #11
 8008352:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008356:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008358:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800835c:	049b      	lsls	r3, r3, #18
 800835e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008362:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008366:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800836a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	431a      	orrs	r2, r3
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008374:	78fa      	ldrb	r2, [r7, #3]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	440a      	add	r2, r1
 800837c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008384:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008386:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800838a:	2b03      	cmp	r3, #3
 800838c:	d003      	beq.n	8008396 <USB_HC_Init+0x22a>
 800838e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008392:	2b01      	cmp	r3, #1
 8008394:	d10f      	bne.n	80083b6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	4413      	add	r3, r2
 800839e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	78fa      	ldrb	r2, [r7, #3]
 80083a6:	0151      	lsls	r1, r2, #5
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	440a      	add	r2, r1
 80083ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80083b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3720      	adds	r7, #32
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	40040000 	.word	0x40040000

080083c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08c      	sub	sp, #48	; 0x30
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80083dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083e0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	4a5d      	ldr	r2, [pc, #372]	; (800855c <USB_HC_StartXfer+0x198>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d12f      	bne.n	800844a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d11c      	bne.n	800842a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	7c9b      	ldrb	r3, [r3, #18]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <USB_HC_StartXfer+0x3c>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	7c9b      	ldrb	r3, [r3, #18]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d124      	bne.n	800844a <USB_HC_StartXfer+0x86>
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	799b      	ldrb	r3, [r3, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d120      	bne.n	800844a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	4413      	add	r3, r2
 8008410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	6a3a      	ldr	r2, [r7, #32]
 800841c:	440a      	add	r2, r1
 800841e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008426:	60d3      	str	r3, [r2, #12]
 8008428:	e00f      	b.n	800844a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	791b      	ldrb	r3, [r3, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10b      	bne.n	800844a <USB_HC_StartXfer+0x86>
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	795b      	ldrb	r3, [r3, #5]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d107      	bne.n	800844a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	4619      	mov	r1, r3
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fb6b 	bl	8008b1c <USB_DoPing>
        return HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	e232      	b.n	80088b0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	799b      	ldrb	r3, [r3, #6]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d158      	bne.n	8008504 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008452:	2301      	movs	r3, #1
 8008454:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	78db      	ldrb	r3, [r3, #3]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d007      	beq.n	800846e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800845e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	8a92      	ldrh	r2, [r2, #20]
 8008464:	fb03 f202 	mul.w	r2, r3, r2
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	61da      	str	r2, [r3, #28]
 800846c:	e07c      	b.n	8008568 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	7c9b      	ldrb	r3, [r3, #18]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d130      	bne.n	80084d8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	2bbc      	cmp	r3, #188	; 0xbc
 800847c:	d918      	bls.n	80084b0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	8a9b      	ldrh	r3, [r3, #20]
 8008482:	461a      	mov	r2, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d003      	beq.n	80084a0 <USB_HC_StartXfer+0xdc>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	2b02      	cmp	r3, #2
 800849e:	d103      	bne.n	80084a8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2202      	movs	r2, #2
 80084a4:	60da      	str	r2, [r3, #12]
 80084a6:	e05f      	b.n	8008568 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2201      	movs	r2, #1
 80084ac:	60da      	str	r2, [r3, #12]
 80084ae:	e05b      	b.n	8008568 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6a1a      	ldr	r2, [r3, #32]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d007      	beq.n	80084d0 <USB_HC_StartXfer+0x10c>
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d003      	beq.n	80084d0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2204      	movs	r2, #4
 80084cc:	60da      	str	r2, [r3, #12]
 80084ce:	e04b      	b.n	8008568 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2203      	movs	r2, #3
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	e047      	b.n	8008568 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d10d      	bne.n	80084fa <USB_HC_StartXfer+0x136>
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	8a92      	ldrh	r2, [r2, #20]
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d907      	bls.n	80084fa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	8a92      	ldrh	r2, [r2, #20]
 80084f0:	fb03 f202 	mul.w	r2, r3, r2
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	61da      	str	r2, [r3, #28]
 80084f8:	e036      	b.n	8008568 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6a1a      	ldr	r2, [r3, #32]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	61da      	str	r2, [r3, #28]
 8008502:	e031      	b.n	8008568 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d018      	beq.n	800853e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	8a92      	ldrh	r2, [r2, #20]
 8008514:	4413      	add	r3, r2
 8008516:	3b01      	subs	r3, #1
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	8a92      	ldrh	r2, [r2, #20]
 800851c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008520:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8008522:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008524:	8b7b      	ldrh	r3, [r7, #26]
 8008526:	429a      	cmp	r2, r3
 8008528:	d90b      	bls.n	8008542 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800852a:	8b7b      	ldrh	r3, [r7, #26]
 800852c:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800852e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	8a92      	ldrh	r2, [r2, #20]
 8008534:	fb03 f202 	mul.w	r2, r3, r2
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	61da      	str	r2, [r3, #28]
 800853c:	e001      	b.n	8008542 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800853e:	2301      	movs	r3, #1
 8008540:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	78db      	ldrb	r3, [r3, #3]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800854a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	8a92      	ldrh	r2, [r2, #20]
 8008550:	fb03 f202 	mul.w	r2, r3, r2
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	61da      	str	r2, [r3, #28]
 8008558:	e006      	b.n	8008568 <USB_HC_StartXfer+0x1a4>
 800855a:	bf00      	nop
 800855c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6a1a      	ldr	r2, [r3, #32]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008572:	04d9      	lsls	r1, r3, #19
 8008574:	4ba3      	ldr	r3, [pc, #652]	; (8008804 <USB_HC_StartXfer+0x440>)
 8008576:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008578:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	7d9b      	ldrb	r3, [r3, #22]
 800857e:	075b      	lsls	r3, r3, #29
 8008580:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008584:	69f9      	ldr	r1, [r7, #28]
 8008586:	0148      	lsls	r0, r1, #5
 8008588:	6a39      	ldr	r1, [r7, #32]
 800858a:	4401      	add	r1, r0
 800858c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008590:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008592:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6999      	ldr	r1, [r3, #24]
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085aa:	460a      	mov	r2, r1
 80085ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	bf0c      	ite	eq
 80085be:	2301      	moveq	r3, #1
 80085c0:	2300      	movne	r3, #0
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69fa      	ldr	r2, [r7, #28]
 80085d6:	0151      	lsls	r1, r2, #5
 80085d8:	6a3a      	ldr	r2, [r7, #32]
 80085da:	440a      	add	r2, r1
 80085dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80085e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	7e7b      	ldrb	r3, [r7, #25]
 80085f6:	075b      	lsls	r3, r3, #29
 80085f8:	69f9      	ldr	r1, [r7, #28]
 80085fa:	0148      	lsls	r0, r1, #5
 80085fc:	6a39      	ldr	r1, [r7, #32]
 80085fe:	4401      	add	r1, r0
 8008600:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008604:	4313      	orrs	r3, r2
 8008606:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	799b      	ldrb	r3, [r3, #6]
 800860c:	2b01      	cmp	r3, #1
 800860e:	f040 80c3 	bne.w	8008798 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	7c5b      	ldrb	r3, [r3, #17]
 8008616:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800861c:	4313      	orrs	r3, r2
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	0151      	lsls	r1, r2, #5
 8008622:	6a3a      	ldr	r2, [r7, #32]
 8008624:	440a      	add	r2, r1
 8008626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800862a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800862e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	4413      	add	r3, r2
 8008638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	6a3a      	ldr	r2, [r7, #32]
 8008644:	440a      	add	r2, r1
 8008646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800864a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800864e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	79db      	ldrb	r3, [r3, #7]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d123      	bne.n	80086a0 <USB_HC_StartXfer+0x2dc>
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	78db      	ldrb	r3, [r3, #3]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d11f      	bne.n	80086a0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	4413      	add	r3, r2
 8008668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	6a3a      	ldr	r2, [r7, #32]
 8008674:	440a      	add	r2, r1
 8008676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800867a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800867e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	4413      	add	r3, r2
 8008688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	0151      	lsls	r1, r2, #5
 8008692:	6a3a      	ldr	r2, [r7, #32]
 8008694:	440a      	add	r2, r1
 8008696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800869a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	7c9b      	ldrb	r3, [r3, #18]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d003      	beq.n	80086b0 <USB_HC_StartXfer+0x2ec>
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	7c9b      	ldrb	r3, [r3, #18]
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d117      	bne.n	80086e0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d113      	bne.n	80086e0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	78db      	ldrb	r3, [r3, #3]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d10f      	bne.n	80086e0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	6a3a      	ldr	r2, [r7, #32]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086de:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	7c9b      	ldrb	r3, [r3, #18]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d162      	bne.n	80087ae <USB_HC_StartXfer+0x3ea>
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	78db      	ldrb	r3, [r3, #3]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d15e      	bne.n	80087ae <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d858      	bhi.n	80087ac <USB_HC_StartXfer+0x3e8>
 80086fa:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <USB_HC_StartXfer+0x33c>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	08008711 	.word	0x08008711
 8008704:	08008733 	.word	0x08008733
 8008708:	08008755 	.word	0x08008755
 800870c:	08008777 	.word	0x08008777
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	4413      	add	r3, r2
 8008718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	0151      	lsls	r1, r2, #5
 8008722:	6a3a      	ldr	r2, [r7, #32]
 8008724:	440a      	add	r2, r1
 8008726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800872a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800872e:	6053      	str	r3, [r2, #4]
          break;
 8008730:	e03d      	b.n	80087ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	4413      	add	r3, r2
 800873a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	0151      	lsls	r1, r2, #5
 8008744:	6a3a      	ldr	r2, [r7, #32]
 8008746:	440a      	add	r2, r1
 8008748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800874c:	f043 030e 	orr.w	r3, r3, #14
 8008750:	6053      	str	r3, [r2, #4]
          break;
 8008752:	e02c      	b.n	80087ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	4413      	add	r3, r2
 800875c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	0151      	lsls	r1, r2, #5
 8008766:	6a3a      	ldr	r2, [r7, #32]
 8008768:	440a      	add	r2, r1
 800876a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800876e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008772:	6053      	str	r3, [r2, #4]
          break;
 8008774:	e01b      	b.n	80087ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	4413      	add	r3, r2
 800877e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	6a3a      	ldr	r2, [r7, #32]
 800878a:	440a      	add	r2, r1
 800878c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008794:	6053      	str	r3, [r2, #4]
          break;
 8008796:	e00a      	b.n	80087ae <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a4:	461a      	mov	r2, r3
 80087a6:	2300      	movs	r3, #0
 80087a8:	6053      	str	r3, [r2, #4]
 80087aa:	e000      	b.n	80087ae <USB_HC_StartXfer+0x3ea>
          break;
 80087ac:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087c4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	78db      	ldrb	r3, [r3, #3]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d004      	beq.n	80087d8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d4:	613b      	str	r3, [r7, #16]
 80087d6:	e003      	b.n	80087e0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087de:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087e6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f4:	461a      	mov	r2, r3
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	e055      	b.n	80088b0 <USB_HC_StartXfer+0x4ec>
 8008804:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	78db      	ldrb	r3, [r3, #3]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d14e      	bne.n	80088ae <USB_HC_StartXfer+0x4ea>
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d04a      	beq.n	80088ae <USB_HC_StartXfer+0x4ea>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	79db      	ldrb	r3, [r3, #7]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d146      	bne.n	80088ae <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	7c9b      	ldrb	r3, [r3, #18]
 8008824:	2b03      	cmp	r3, #3
 8008826:	d831      	bhi.n	800888c <USB_HC_StartXfer+0x4c8>
 8008828:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <USB_HC_StartXfer+0x46c>)
 800882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882e:	bf00      	nop
 8008830:	08008841 	.word	0x08008841
 8008834:	08008865 	.word	0x08008865
 8008838:	08008841 	.word	0x08008841
 800883c:	08008865 	.word	0x08008865
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	3303      	adds	r3, #3
 8008846:	089b      	lsrs	r3, r3, #2
 8008848:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800884a:	8afa      	ldrh	r2, [r7, #22]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	b29b      	uxth	r3, r3
 8008852:	429a      	cmp	r2, r3
 8008854:	d91c      	bls.n	8008890 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	f043 0220 	orr.w	r2, r3, #32
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	619a      	str	r2, [r3, #24]
        }
        break;
 8008862:	e015      	b.n	8008890 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	3303      	adds	r3, #3
 800886a:	089b      	lsrs	r3, r3, #2
 800886c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800886e:	8afa      	ldrh	r2, [r7, #22]
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	b29b      	uxth	r3, r3
 800887a:	429a      	cmp	r2, r3
 800887c:	d90a      	bls.n	8008894 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	619a      	str	r2, [r3, #24]
        }
        break;
 800888a:	e003      	b.n	8008894 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800888c:	bf00      	nop
 800888e:	e002      	b.n	8008896 <USB_HC_StartXfer+0x4d2>
        break;
 8008890:	bf00      	nop
 8008892:	e000      	b.n	8008896 <USB_HC_StartXfer+0x4d2>
        break;
 8008894:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6999      	ldr	r1, [r3, #24]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	785a      	ldrb	r2, [r3, #1]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	2000      	movs	r0, #0
 80088a6:	9000      	str	r0, [sp, #0]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7ff f9c9 	bl	8007c40 <USB_WritePacket>
  }

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3728      	adds	r7, #40	; 0x28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	b29b      	uxth	r3, r3
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80088da:	b480      	push	{r7}
 80088dc:	b089      	sub	sp, #36	; 0x24
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	0c9b      	lsrs	r3, r3, #18
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	0fdb      	lsrs	r3, r3, #31
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	0fdb      	lsrs	r3, r3, #31
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f003 0320 	and.w	r3, r3, #32
 800893c:	2b20      	cmp	r3, #32
 800893e:	d10d      	bne.n	800895c <USB_HC_Halt+0x82>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10a      	bne.n	800895c <USB_HC_Halt+0x82>
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d005      	beq.n	8008958 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d002      	beq.n	8008958 <USB_HC_Halt+0x7e>
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2b03      	cmp	r3, #3
 8008956:	d101      	bne.n	800895c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	e0d8      	b.n	8008b0e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <USB_HC_Halt+0x8e>
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b02      	cmp	r3, #2
 8008966:	d173      	bne.n	8008a50 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	4413      	add	r3, r2
 8008970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	0151      	lsls	r1, r2, #5
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	440a      	add	r2, r1
 800897e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008986:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f003 0320 	and.w	r3, r3, #32
 8008990:	2b00      	cmp	r3, #0
 8008992:	d14a      	bne.n	8008a2a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d133      	bne.n	8008a08 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	0151      	lsls	r1, r2, #5
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	440a      	add	r2, r1
 80089b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089be:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	0151      	lsls	r1, r2, #5
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	440a      	add	r2, r1
 80089d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089de:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	3301      	adds	r3, #1
 80089e4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089ec:	d82e      	bhi.n	8008a4c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a04:	d0ec      	beq.n	80089e0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a06:	e081      	b.n	8008b0c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	0151      	lsls	r1, r2, #5
 8008a1a:	69fa      	ldr	r2, [r7, #28]
 8008a1c:	440a      	add	r2, r1
 8008a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a26:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a28:	e070      	b.n	8008b0c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	0151      	lsls	r1, r2, #5
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	440a      	add	r2, r1
 8008a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a48:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a4a:	e05f      	b.n	8008b0c <USB_HC_Halt+0x232>
            break;
 8008a4c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a4e:	e05d      	b.n	8008b0c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	0151      	lsls	r1, r2, #5
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	440a      	add	r2, r1
 8008a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a6e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d133      	bne.n	8008ae8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	69fa      	ldr	r2, [r7, #28]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008abe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008acc:	d81d      	bhi.n	8008b0a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ae4:	d0ec      	beq.n	8008ac0 <USB_HC_Halt+0x1e6>
 8008ae6:	e011      	b.n	8008b0c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	0151      	lsls	r1, r2, #5
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	440a      	add	r2, r1
 8008afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	e000      	b.n	8008b0c <USB_HC_Halt+0x232>
          break;
 8008b0a:	bf00      	nop
    }
  }

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3724      	adds	r7, #36	; 0x24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
	...

08008b1c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008b30:	2301      	movs	r3, #1
 8008b32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	04da      	lsls	r2, r3, #19
 8008b38:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <USB_DoPing+0x74>)
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b4c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b64:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b6c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	1ff80000 	.word	0x1ff80000

08008b94 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7fe ff8c 	bl	8007ac6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bae:	2110      	movs	r1, #16
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7fe ffe5 	bl	8007b80 <USB_FlushTxFifo>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff f80f 	bl	8007be4 <USB_FlushRxFifo>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61bb      	str	r3, [r7, #24]
 8008bd4:	e01f      	b.n	8008c16 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bfc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	3301      	adds	r3, #1
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2b0f      	cmp	r3, #15
 8008c1a:	d9dc      	bls.n	8008bd6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61bb      	str	r3, [r7, #24]
 8008c20:	e034      	b.n	8008c8c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c38:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c48:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c56:	461a      	mov	r2, r3
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c68:	d80c      	bhi.n	8008c84 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c80:	d0ec      	beq.n	8008c5c <USB_StopHost+0xc8>
 8008c82:	e000      	b.n	8008c86 <USB_StopHost+0xf2>
        break;
 8008c84:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	61bb      	str	r3, [r7, #24]
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	2b0f      	cmp	r3, #15
 8008c90:	d9c7      	bls.n	8008c22 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7fe fefb 	bl	8007aa4 <USB_EnableGlobalInt>

  return ret;
 8008cae:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3720      	adds	r7, #32
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008cb8:	b590      	push	{r4, r7, lr}
 8008cba:	b089      	sub	sp, #36	; 0x24
 8008cbc:	af04      	add	r7, sp, #16
 8008cbe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	2102      	movs	r1, #2
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fc85 	bl	80095d6 <USBH_FindInterface>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	2bff      	cmp	r3, #255	; 0xff
 8008cd4:	d002      	beq.n	8008cdc <USBH_CDC_InterfaceInit+0x24>
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d901      	bls.n	8008ce0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008cdc:	2302      	movs	r3, #2
 8008cde:	e13d      	b.n	8008f5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fc5a 	bl	800959e <USBH_SelectInterface>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e131      	b.n	8008f5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008cfe:	2050      	movs	r0, #80	; 0x50
 8008d00:	f002 fb74 	bl	800b3ec <malloc>
 8008d04:	4603      	mov	r3, r0
 8008d06:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e11f      	b.n	8008f5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008d1c:	2250      	movs	r2, #80	; 0x50
 8008d1e:	2100      	movs	r1, #0
 8008d20:	68b8      	ldr	r0, [r7, #8]
 8008d22:	f003 f9aa 	bl	800c07a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	211a      	movs	r1, #26
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	4413      	add	r3, r2
 8008d32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	b25b      	sxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	da15      	bge.n	8008d6a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	211a      	movs	r1, #26
 8008d44:	fb01 f303 	mul.w	r3, r1, r3
 8008d48:	4413      	add	r3, r2
 8008d4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d4e:	781a      	ldrb	r2, [r3, #0]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	211a      	movs	r1, #26
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d64:	881a      	ldrh	r2, [r3, #0]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	785b      	ldrb	r3, [r3, #1]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 ffce 	bl	800ad12 <USBH_AllocPipe>
 8008d76:	4603      	mov	r3, r0
 8008d78:	461a      	mov	r2, r3
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	7819      	ldrb	r1, [r3, #0]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	7858      	ldrb	r0, [r3, #1]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	8952      	ldrh	r2, [r2, #10]
 8008d96:	9202      	str	r2, [sp, #8]
 8008d98:	2203      	movs	r2, #3
 8008d9a:	9201      	str	r2, [sp, #4]
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	4623      	mov	r3, r4
 8008da0:	4602      	mov	r2, r0
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 ff86 	bl	800acb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2200      	movs	r2, #0
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f002 fa95 	bl	800b2e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008db6:	2300      	movs	r3, #0
 8008db8:	2200      	movs	r2, #0
 8008dba:	210a      	movs	r1, #10
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fc0a 	bl	80095d6 <USBH_FindInterface>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	2bff      	cmp	r3, #255	; 0xff
 8008dca:	d002      	beq.n	8008dd2 <USBH_CDC_InterfaceInit+0x11a>
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d901      	bls.n	8008dd6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e0c2      	b.n	8008f5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	211a      	movs	r1, #26
 8008ddc:	fb01 f303 	mul.w	r3, r1, r3
 8008de0:	4413      	add	r3, r2
 8008de2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	b25b      	sxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	da16      	bge.n	8008e1c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	211a      	movs	r1, #26
 8008df4:	fb01 f303 	mul.w	r3, r1, r3
 8008df8:	4413      	add	r3, r2
 8008dfa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	211a      	movs	r1, #26
 8008e0a:	fb01 f303 	mul.w	r3, r1, r3
 8008e0e:	4413      	add	r3, r2
 8008e10:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e14:	881a      	ldrh	r2, [r3, #0]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	835a      	strh	r2, [r3, #26]
 8008e1a:	e015      	b.n	8008e48 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	211a      	movs	r1, #26
 8008e22:	fb01 f303 	mul.w	r3, r1, r3
 8008e26:	4413      	add	r3, r2
 8008e28:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e2c:	781a      	ldrb	r2, [r3, #0]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	211a      	movs	r1, #26
 8008e38:	fb01 f303 	mul.w	r3, r1, r3
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	211a      	movs	r1, #26
 8008e4e:	fb01 f303 	mul.w	r3, r1, r3
 8008e52:	4413      	add	r3, r2
 8008e54:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b25b      	sxtb	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	da16      	bge.n	8008e8e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	211a      	movs	r1, #26
 8008e66:	fb01 f303 	mul.w	r3, r1, r3
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e70:	781a      	ldrb	r2, [r3, #0]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	211a      	movs	r1, #26
 8008e7c:	fb01 f303 	mul.w	r3, r1, r3
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e86:	881a      	ldrh	r2, [r3, #0]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	835a      	strh	r2, [r3, #26]
 8008e8c:	e015      	b.n	8008eba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	211a      	movs	r1, #26
 8008e94:	fb01 f303 	mul.w	r3, r1, r3
 8008e98:	4413      	add	r3, r2
 8008e9a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e9e:	781a      	ldrb	r2, [r3, #0]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	211a      	movs	r1, #26
 8008eaa:	fb01 f303 	mul.w	r3, r1, r3
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008eb4:	881a      	ldrh	r2, [r3, #0]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	7b9b      	ldrb	r3, [r3, #14]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f001 ff26 	bl	800ad12 <USBH_AllocPipe>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	461a      	mov	r2, r3
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	7bdb      	ldrb	r3, [r3, #15]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 ff1c 	bl	800ad12 <USBH_AllocPipe>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461a      	mov	r2, r3
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	7b59      	ldrb	r1, [r3, #13]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	7b98      	ldrb	r0, [r3, #14]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	8b12      	ldrh	r2, [r2, #24]
 8008efa:	9202      	str	r2, [sp, #8]
 8008efc:	2202      	movs	r2, #2
 8008efe:	9201      	str	r2, [sp, #4]
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	4623      	mov	r3, r4
 8008f04:	4602      	mov	r2, r0
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f001 fed4 	bl	800acb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	7b19      	ldrb	r1, [r3, #12]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	7bd8      	ldrb	r0, [r3, #15]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	8b52      	ldrh	r2, [r2, #26]
 8008f24:	9202      	str	r2, [sp, #8]
 8008f26:	2202      	movs	r2, #2
 8008f28:	9201      	str	r2, [sp, #4]
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	4623      	mov	r3, r4
 8008f2e:	4602      	mov	r2, r0
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 febf 	bl	800acb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	7b5b      	ldrb	r3, [r3, #13]
 8008f42:	2200      	movs	r2, #0
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f002 f9ca 	bl	800b2e0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	7b1b      	ldrb	r3, [r3, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f002 f9c3 	bl	800b2e0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd90      	pop	{r4, r7, pc}

08008f64 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f72:	69db      	ldr	r3, [r3, #28]
 8008f74:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00e      	beq.n	8008f9c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 feb4 	bl	800acf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 fedf 	bl	800ad54 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	7b1b      	ldrb	r3, [r3, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00e      	beq.n	8008fc2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	7b1b      	ldrb	r3, [r3, #12]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 fea1 	bl	800acf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	7b1b      	ldrb	r3, [r3, #12]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 fecc 	bl	800ad54 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	7b5b      	ldrb	r3, [r3, #13]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00e      	beq.n	8008fe8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	7b5b      	ldrb	r3, [r3, #13]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 fe8e 	bl	800acf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	7b5b      	ldrb	r3, [r3, #13]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 feb9 	bl	800ad54 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f002 f9fd 	bl	800b3fc <free>
    phost->pActiveClass->pData = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009008:	2200      	movs	r2, #0
 800900a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3340      	adds	r3, #64	; 0x40
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f8b1 	bl	8009196 <GetLineCoding>
 8009034:	4603      	mov	r3, r0
 8009036:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009038:	7afb      	ldrb	r3, [r7, #11]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d105      	bne.n	800904a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009044:	2102      	movs	r1, #2
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800904a:	7afb      	ldrb	r3, [r7, #11]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800905c:	2301      	movs	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009074:	2b04      	cmp	r3, #4
 8009076:	d877      	bhi.n	8009168 <USBH_CDC_Process+0x114>
 8009078:	a201      	add	r2, pc, #4	; (adr r2, 8009080 <USBH_CDC_Process+0x2c>)
 800907a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907e:	bf00      	nop
 8009080:	08009095 	.word	0x08009095
 8009084:	0800909b 	.word	0x0800909b
 8009088:	080090cb 	.word	0x080090cb
 800908c:	0800913f 	.word	0x0800913f
 8009090:	0800914d 	.word	0x0800914d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]
      break;
 8009098:	e06d      	b.n	8009176 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f897 	bl	80091d4 <SetLineCoding>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d104      	bne.n	80090ba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80090b8:	e058      	b.n	800916c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d055      	beq.n	800916c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2204      	movs	r2, #4
 80090c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80090c8:	e050      	b.n	800916c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	3340      	adds	r3, #64	; 0x40
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f860 	bl	8009196 <GetLineCoding>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d126      	bne.n	800912e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090f2:	791b      	ldrb	r3, [r3, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d13b      	bne.n	8009170 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009102:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009104:	429a      	cmp	r2, r3
 8009106:	d133      	bne.n	8009170 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009112:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009114:	429a      	cmp	r2, r3
 8009116:	d12b      	bne.n	8009170 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009120:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009122:	429a      	cmp	r2, r3
 8009124:	d124      	bne.n	8009170 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f958 	bl	80093dc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800912c:	e020      	b.n	8009170 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d01d      	beq.n	8009170 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2204      	movs	r2, #4
 8009138:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800913c:	e018      	b.n	8009170 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f867 	bl	8009212 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f8da 	bl	80092fe <CDC_ProcessReception>
      break;
 800914a:	e014      	b.n	8009176 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800914c:	2100      	movs	r1, #0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 f822 	bl	800a198 <USBH_ClrFeature>
 8009154:	4603      	mov	r3, r0
 8009156:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009158:	7bbb      	ldrb	r3, [r7, #14]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10a      	bne.n	8009174 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009166:	e005      	b.n	8009174 <USBH_CDC_Process+0x120>

    default:
      break;
 8009168:	bf00      	nop
 800916a:	e004      	b.n	8009176 <USBH_CDC_Process+0x122>
      break;
 800916c:	bf00      	nop
 800916e:	e002      	b.n	8009176 <USBH_CDC_Process+0x122>
      break;
 8009170:	bf00      	nop
 8009172:	e000      	b.n	8009176 <USBH_CDC_Process+0x122>
      break;
 8009174:	bf00      	nop

  }

  return status;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	22a1      	movs	r2, #161	; 0xa1
 80091a4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2221      	movs	r2, #33	; 0x21
 80091aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2207      	movs	r2, #7
 80091bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2207      	movs	r2, #7
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fb23 	bl	800a810 <USBH_CtlReq>
 80091ca:	4603      	mov	r3, r0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2221      	movs	r2, #33	; 0x21
 80091e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2220      	movs	r2, #32
 80091e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2207      	movs	r2, #7
 80091fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2207      	movs	r2, #7
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 fb04 	bl	800a810 <USBH_CtlReq>
 8009208:	4603      	mov	r3, r0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b086      	sub	sp, #24
 8009216:	af02      	add	r7, sp, #8
 8009218:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009224:	2300      	movs	r3, #0
 8009226:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800922e:	2b01      	cmp	r3, #1
 8009230:	d002      	beq.n	8009238 <CDC_ProcessTransmission+0x26>
 8009232:	2b02      	cmp	r3, #2
 8009234:	d023      	beq.n	800927e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009236:	e05e      	b.n	80092f6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	8b12      	ldrh	r2, [r2, #24]
 8009240:	4293      	cmp	r3, r2
 8009242:	d90b      	bls.n	800925c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	69d9      	ldr	r1, [r3, #28]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	8b1a      	ldrh	r2, [r3, #24]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	7b5b      	ldrb	r3, [r3, #13]
 8009250:	2001      	movs	r0, #1
 8009252:	9000      	str	r0, [sp, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 fcea 	bl	800ac2e <USBH_BulkSendData>
 800925a:	e00b      	b.n	8009274 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009264:	b29a      	uxth	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	7b5b      	ldrb	r3, [r3, #13]
 800926a:	2001      	movs	r0, #1
 800926c:	9000      	str	r0, [sp, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 fcdd 	bl	800ac2e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2202      	movs	r2, #2
 8009278:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800927c:	e03b      	b.n	80092f6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	7b5b      	ldrb	r3, [r3, #13]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f002 f801 	bl	800b28c <USBH_LL_GetURBState>
 800928a:	4603      	mov	r3, r0
 800928c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800928e:	7afb      	ldrb	r3, [r7, #11]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d128      	bne.n	80092e6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	8b12      	ldrh	r2, [r2, #24]
 800929c:	4293      	cmp	r3, r2
 800929e:	d90e      	bls.n	80092be <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	8b12      	ldrh	r2, [r2, #24]
 80092a8:	1a9a      	subs	r2, r3, r2
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	8b12      	ldrh	r2, [r2, #24]
 80092b6:	441a      	add	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	61da      	str	r2, [r3, #28]
 80092bc:	e002      	b.n	80092c4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d004      	beq.n	80092d6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80092d4:	e00e      	b.n	80092f4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f868 	bl	80093b4 <USBH_CDC_TransmitCallback>
      break;
 80092e4:	e006      	b.n	80092f4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d103      	bne.n	80092f4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80092f4:	bf00      	nop
  }
}
 80092f6:	bf00      	nop
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b086      	sub	sp, #24
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009310:	2300      	movs	r3, #0
 8009312:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800931a:	2b03      	cmp	r3, #3
 800931c:	d002      	beq.n	8009324 <CDC_ProcessReception+0x26>
 800931e:	2b04      	cmp	r3, #4
 8009320:	d00e      	beq.n	8009340 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009322:	e043      	b.n	80093ac <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	6a19      	ldr	r1, [r3, #32]
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	8b5a      	ldrh	r2, [r3, #26]
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	7b1b      	ldrb	r3, [r3, #12]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 fca1 	bl	800ac78 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2204      	movs	r2, #4
 800933a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800933e:	e035      	b.n	80093ac <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	7b1b      	ldrb	r3, [r3, #12]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 ffa0 	bl	800b28c <USBH_LL_GetURBState>
 800934c:	4603      	mov	r3, r0
 800934e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009350:	7cfb      	ldrb	r3, [r7, #19]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d129      	bne.n	80093aa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	7b1b      	ldrb	r3, [r3, #12]
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 ff03 	bl	800b168 <USBH_LL_GetLastXferSize>
 8009362:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	429a      	cmp	r2, r3
 800936c:	d016      	beq.n	800939c <CDC_ProcessReception+0x9e>
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	8b5b      	ldrh	r3, [r3, #26]
 8009372:	461a      	mov	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4293      	cmp	r3, r2
 8009378:	d910      	bls.n	800939c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	1ad2      	subs	r2, r2, r3
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	6a1a      	ldr	r2, [r3, #32]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	441a      	add	r2, r3
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2203      	movs	r2, #3
 8009396:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800939a:	e006      	b.n	80093aa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f80f 	bl	80093c8 <USBH_CDC_ReceiveCallback>
      break;
 80093aa:	bf00      	nop
  }
}
 80093ac:	bf00      	nop
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	4613      	mov	r3, r2
 80093fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009404:	2302      	movs	r3, #2
 8009406:	e029      	b.n	800945c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	79fa      	ldrb	r2, [r7, #7]
 800940c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f000 f81f 	bl	8009464 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f001 fdd3 	bl	800b000 <USBH_LL_Init>

  return USBH_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009470:	2300      	movs	r3, #0
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e009      	b.n	800948a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	33e0      	adds	r3, #224	; 0xe0
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	2200      	movs	r2, #0
 8009482:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3301      	adds	r3, #1
 8009488:	60fb      	str	r3, [r7, #12]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b0f      	cmp	r3, #15
 800948e:	d9f2      	bls.n	8009476 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	e009      	b.n	80094aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4413      	add	r3, r2
 800949c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80094a0:	2200      	movs	r2, #0
 80094a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3301      	adds	r3, #1
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094b0:	d3f1      	bcc.n	8009496 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2240      	movs	r2, #64	; 0x40
 80094d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	331c      	adds	r3, #28
 8009502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009506:	2100      	movs	r1, #0
 8009508:	4618      	mov	r0, r3
 800950a:	f002 fdb6 	bl	800c07a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009518:	2100      	movs	r1, #0
 800951a:	4618      	mov	r0, r3
 800951c:	f002 fdad 	bl	800c07a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f203 3326 	addw	r3, r3, #806	; 0x326
 8009526:	2212      	movs	r2, #18
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f002 fda5 	bl	800c07a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009536:	223e      	movs	r2, #62	; 0x3e
 8009538:	2100      	movs	r1, #0
 800953a:	4618      	mov	r0, r3
 800953c:	f002 fd9d 	bl	800c07a <memset>

  return USBH_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800954a:	b480      	push	{r7}
 800954c:	b085      	sub	sp, #20
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d016      	beq.n	800958c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10e      	bne.n	8009586 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800956e:	1c59      	adds	r1, r3, #1
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	33de      	adds	r3, #222	; 0xde
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
 8009584:	e004      	b.n	8009590 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009586:	2302      	movs	r3, #2
 8009588:	73fb      	strb	r3, [r7, #15]
 800958a:	e001      	b.n	8009590 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800958c:	2302      	movs	r3, #2
 800958e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009590:	7bfb      	ldrb	r3, [r7, #15]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800959e:	b480      	push	{r7}
 80095a0:	b085      	sub	sp, #20
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	460b      	mov	r3, r1
 80095a8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d204      	bcs.n	80095c4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80095c2:	e001      	b.n	80095c8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80095c4:	2302      	movs	r3, #2
 80095c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b087      	sub	sp, #28
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	4608      	mov	r0, r1
 80095e0:	4611      	mov	r1, r2
 80095e2:	461a      	mov	r2, r3
 80095e4:	4603      	mov	r3, r0
 80095e6:	70fb      	strb	r3, [r7, #3]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70bb      	strb	r3, [r7, #2]
 80095ec:	4613      	mov	r3, r2
 80095ee:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80095f4:	2300      	movs	r3, #0
 80095f6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80095fe:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009600:	e025      	b.n	800964e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	221a      	movs	r2, #26
 8009606:	fb02 f303 	mul.w	r3, r2, r3
 800960a:	3308      	adds	r3, #8
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4413      	add	r3, r2
 8009610:	3302      	adds	r3, #2
 8009612:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	795b      	ldrb	r3, [r3, #5]
 8009618:	78fa      	ldrb	r2, [r7, #3]
 800961a:	429a      	cmp	r2, r3
 800961c:	d002      	beq.n	8009624 <USBH_FindInterface+0x4e>
 800961e:	78fb      	ldrb	r3, [r7, #3]
 8009620:	2bff      	cmp	r3, #255	; 0xff
 8009622:	d111      	bne.n	8009648 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009628:	78ba      	ldrb	r2, [r7, #2]
 800962a:	429a      	cmp	r2, r3
 800962c:	d002      	beq.n	8009634 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800962e:	78bb      	ldrb	r3, [r7, #2]
 8009630:	2bff      	cmp	r3, #255	; 0xff
 8009632:	d109      	bne.n	8009648 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009638:	787a      	ldrb	r2, [r7, #1]
 800963a:	429a      	cmp	r2, r3
 800963c:	d002      	beq.n	8009644 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800963e:	787b      	ldrb	r3, [r7, #1]
 8009640:	2bff      	cmp	r3, #255	; 0xff
 8009642:	d101      	bne.n	8009648 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	e006      	b.n	8009656 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	3301      	adds	r3, #1
 800964c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800964e:	7dfb      	ldrb	r3, [r7, #23]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d9d6      	bls.n	8009602 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009654:	23ff      	movs	r3, #255	; 0xff
}
 8009656:	4618      	mov	r0, r3
 8009658:	371c      	adds	r7, #28
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f001 fd04 	bl	800b078 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009670:	2101      	movs	r1, #1
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fe1d 	bl	800b2b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b088      	sub	sp, #32
 8009688:	af04      	add	r7, sp, #16
 800968a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800968c:	2302      	movs	r3, #2
 800968e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b01      	cmp	r3, #1
 800969e:	d102      	bne.n	80096a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2203      	movs	r2, #3
 80096a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b0b      	cmp	r3, #11
 80096ae:	f200 81be 	bhi.w	8009a2e <USBH_Process+0x3aa>
 80096b2:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <USBH_Process+0x34>)
 80096b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b8:	080096e9 	.word	0x080096e9
 80096bc:	0800971b 	.word	0x0800971b
 80096c0:	08009783 	.word	0x08009783
 80096c4:	080099c9 	.word	0x080099c9
 80096c8:	08009a2f 	.word	0x08009a2f
 80096cc:	08009827 	.word	0x08009827
 80096d0:	0800996f 	.word	0x0800996f
 80096d4:	0800985d 	.word	0x0800985d
 80096d8:	0800987d 	.word	0x0800987d
 80096dc:	0800989d 	.word	0x0800989d
 80096e0:	080098e1 	.word	0x080098e1
 80096e4:	080099b1 	.word	0x080099b1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 819e 	beq.w	8009a32 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80096fc:	20c8      	movs	r0, #200	; 0xc8
 80096fe:	f001 fe22 	bl	800b346 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f001 fd15 	bl	800b132 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009718:	e18b      	b.n	8009a32 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009720:	2b01      	cmp	r3, #1
 8009722:	d107      	bne.n	8009734 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2202      	movs	r2, #2
 8009730:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009732:	e18d      	b.n	8009a50 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800973a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800973e:	d914      	bls.n	800976a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009746:	3301      	adds	r3, #1
 8009748:	b2da      	uxtb	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009756:	2b03      	cmp	r3, #3
 8009758:	d903      	bls.n	8009762 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	220d      	movs	r2, #13
 800975e:	701a      	strb	r2, [r3, #0]
      break;
 8009760:	e176      	b.n	8009a50 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	701a      	strb	r2, [r3, #0]
      break;
 8009768:	e172      	b.n	8009a50 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009770:	f103 020a 	add.w	r2, r3, #10
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800977a:	200a      	movs	r0, #10
 800977c:	f001 fde3 	bl	800b346 <USBH_Delay>
      break;
 8009780:	e166      	b.n	8009a50 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009792:	2104      	movs	r1, #4
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009798:	2064      	movs	r0, #100	; 0x64
 800979a:	f001 fdd4 	bl	800b346 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f001 fca0 	bl	800b0e4 <USBH_LL_GetSpeed>
 80097a4:	4603      	mov	r3, r0
 80097a6:	461a      	mov	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2205      	movs	r2, #5
 80097b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80097b4:	2100      	movs	r1, #0
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f001 faab 	bl	800ad12 <USBH_AllocPipe>
 80097bc:	4603      	mov	r3, r0
 80097be:	461a      	mov	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80097c4:	2180      	movs	r1, #128	; 0x80
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f001 faa3 	bl	800ad12 <USBH_AllocPipe>
 80097cc:	4603      	mov	r3, r0
 80097ce:	461a      	mov	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	7919      	ldrb	r1, [r3, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80097e8:	b292      	uxth	r2, r2
 80097ea:	9202      	str	r2, [sp, #8]
 80097ec:	2200      	movs	r2, #0
 80097ee:	9201      	str	r2, [sp, #4]
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	4603      	mov	r3, r0
 80097f4:	2280      	movs	r2, #128	; 0x80
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 fa5c 	bl	800acb4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	7959      	ldrb	r1, [r3, #5]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009810:	b292      	uxth	r2, r2
 8009812:	9202      	str	r2, [sp, #8]
 8009814:	2200      	movs	r2, #0
 8009816:	9201      	str	r2, [sp, #4]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	4603      	mov	r3, r0
 800981c:	2200      	movs	r2, #0
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f001 fa48 	bl	800acb4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009824:	e114      	b.n	8009a50 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f918 	bl	8009a5c <USBH_HandleEnum>
 800982c:	4603      	mov	r3, r0
 800982e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009830:	7bbb      	ldrb	r3, [r7, #14]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b00      	cmp	r3, #0
 8009836:	f040 80fe 	bne.w	8009a36 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009848:	2b01      	cmp	r3, #1
 800984a:	d103      	bne.n	8009854 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2208      	movs	r2, #8
 8009850:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009852:	e0f0      	b.n	8009a36 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2207      	movs	r2, #7
 8009858:	701a      	strb	r2, [r3, #0]
      break;
 800985a:	e0ec      	b.n	8009a36 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 80e9 	beq.w	8009a3a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800986e:	2101      	movs	r1, #1
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2208      	movs	r2, #8
 8009878:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800987a:	e0de      	b.n	8009a3a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009882:	b29b      	uxth	r3, r3
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fc3f 	bl	800a10a <USBH_SetCfg>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	f040 80d5 	bne.w	8009a3e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2209      	movs	r2, #9
 8009898:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800989a:	e0d0      	b.n	8009a3e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d016      	beq.n	80098d8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80098aa:	2101      	movs	r1, #1
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fc4f 	bl	800a150 <USBH_SetFeature>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	220a      	movs	r2, #10
 80098c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098c4:	e0bd      	b.n	8009a42 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80098c6:	7bbb      	ldrb	r3, [r7, #14]
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	f040 80b9 	bne.w	8009a42 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	220a      	movs	r2, #10
 80098d4:	701a      	strb	r2, [r3, #0]
      break;
 80098d6:	e0b4      	b.n	8009a42 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	220a      	movs	r2, #10
 80098dc:	701a      	strb	r2, [r3, #0]
      break;
 80098de:	e0b0      	b.n	8009a42 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 80ad 	beq.w	8009a46 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
 80098f8:	e016      	b.n	8009928 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80098fa:	7bfa      	ldrb	r2, [r7, #15]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	32de      	adds	r2, #222	; 0xde
 8009900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009904:	791a      	ldrb	r2, [r3, #4]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800990c:	429a      	cmp	r2, r3
 800990e:	d108      	bne.n	8009922 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009910:	7bfa      	ldrb	r2, [r7, #15]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	32de      	adds	r2, #222	; 0xde
 8009916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009920:	e005      	b.n	800992e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	3301      	adds	r3, #1
 8009926:	73fb      	strb	r3, [r7, #15]
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0e5      	beq.n	80098fa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d016      	beq.n	8009966 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	4798      	blx	r3
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d109      	bne.n	800995e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2206      	movs	r2, #6
 800994e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009956:	2103      	movs	r1, #3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800995c:	e073      	b.n	8009a46 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	220d      	movs	r2, #13
 8009962:	701a      	strb	r2, [r3, #0]
      break;
 8009964:	e06f      	b.n	8009a46 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	220d      	movs	r2, #13
 800996a:	701a      	strb	r2, [r3, #0]
      break;
 800996c:	e06b      	b.n	8009a46 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d017      	beq.n	80099a8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
 8009984:	4603      	mov	r3, r0
 8009986:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d103      	bne.n	8009998 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	220b      	movs	r2, #11
 8009994:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009996:	e058      	b.n	8009a4a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b02      	cmp	r3, #2
 800999e:	d154      	bne.n	8009a4a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	220d      	movs	r2, #13
 80099a4:	701a      	strb	r2, [r3, #0]
      break;
 80099a6:	e050      	b.n	8009a4a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	220d      	movs	r2, #13
 80099ac:	701a      	strb	r2, [r3, #0]
      break;
 80099ae:	e04c      	b.n	8009a4a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d049      	beq.n	8009a4e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	4798      	blx	r3
      }
      break;
 80099c6:	e042      	b.n	8009a4e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7ff fd47 	bl	8009464 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d009      	beq.n	80099f4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d005      	beq.n	8009a0a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a04:	2105      	movs	r1, #5
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d107      	bne.n	8009a26 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff fe1f 	bl	8009662 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a24:	e014      	b.n	8009a50 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f001 fb26 	bl	800b078 <USBH_LL_Start>
      break;
 8009a2c:	e010      	b.n	8009a50 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009a2e:	bf00      	nop
 8009a30:	e00e      	b.n	8009a50 <USBH_Process+0x3cc>
      break;
 8009a32:	bf00      	nop
 8009a34:	e00c      	b.n	8009a50 <USBH_Process+0x3cc>
      break;
 8009a36:	bf00      	nop
 8009a38:	e00a      	b.n	8009a50 <USBH_Process+0x3cc>
    break;
 8009a3a:	bf00      	nop
 8009a3c:	e008      	b.n	8009a50 <USBH_Process+0x3cc>
      break;
 8009a3e:	bf00      	nop
 8009a40:	e006      	b.n	8009a50 <USBH_Process+0x3cc>
      break;
 8009a42:	bf00      	nop
 8009a44:	e004      	b.n	8009a50 <USBH_Process+0x3cc>
      break;
 8009a46:	bf00      	nop
 8009a48:	e002      	b.n	8009a50 <USBH_Process+0x3cc>
      break;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <USBH_Process+0x3cc>
      break;
 8009a4e:	bf00      	nop
  }
  return USBH_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop

08009a5c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af04      	add	r7, sp, #16
 8009a62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009a64:	2301      	movs	r3, #1
 8009a66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	2b07      	cmp	r3, #7
 8009a72:	f200 81c1 	bhi.w	8009df8 <USBH_HandleEnum+0x39c>
 8009a76:	a201      	add	r2, pc, #4	; (adr r2, 8009a7c <USBH_HandleEnum+0x20>)
 8009a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7c:	08009a9d 	.word	0x08009a9d
 8009a80:	08009b5b 	.word	0x08009b5b
 8009a84:	08009bc5 	.word	0x08009bc5
 8009a88:	08009c53 	.word	0x08009c53
 8009a8c:	08009cbd 	.word	0x08009cbd
 8009a90:	08009d2d 	.word	0x08009d2d
 8009a94:	08009d73 	.word	0x08009d73
 8009a98:	08009db9 	.word	0x08009db9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009a9c:	2108      	movs	r1, #8
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fa50 	bl	8009f44 <USBH_Get_DevDesc>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d130      	bne.n	8009b10 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	7919      	ldrb	r1, [r3, #4]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009ad2:	b292      	uxth	r2, r2
 8009ad4:	9202      	str	r2, [sp, #8]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	9201      	str	r2, [sp, #4]
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	4603      	mov	r3, r0
 8009ade:	2280      	movs	r2, #128	; 0x80
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 f8e7 	bl	800acb4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	7959      	ldrb	r1, [r3, #5]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009afa:	b292      	uxth	r2, r2
 8009afc:	9202      	str	r2, [sp, #8]
 8009afe:	2200      	movs	r2, #0
 8009b00:	9201      	str	r2, [sp, #4]
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	4603      	mov	r3, r0
 8009b06:	2200      	movs	r2, #0
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 f8d3 	bl	800acb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b0e:	e175      	b.n	8009dfc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	f040 8172 	bne.w	8009dfc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b1e:	3301      	adds	r3, #1
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d903      	bls.n	8009b3a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	220d      	movs	r2, #13
 8009b36:	701a      	strb	r2, [r3, #0]
      break;
 8009b38:	e160      	b.n	8009dfc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	795b      	ldrb	r3, [r3, #5]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 f907 	bl	800ad54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	791b      	ldrb	r3, [r3, #4]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f001 f901 	bl	800ad54 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	701a      	strb	r2, [r3, #0]
      break;
 8009b58:	e150      	b.n	8009dfc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009b5a:	2112      	movs	r1, #18
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f9f1 	bl	8009f44 <USBH_Get_DevDesc>
 8009b62:	4603      	mov	r3, r0
 8009b64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d103      	bne.n	8009b74 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b72:	e145      	b.n	8009e00 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	f040 8142 	bne.w	8009e00 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b82:	3301      	adds	r3, #1
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d903      	bls.n	8009b9e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	220d      	movs	r2, #13
 8009b9a:	701a      	strb	r2, [r3, #0]
      break;
 8009b9c:	e130      	b.n	8009e00 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	795b      	ldrb	r3, [r3, #5]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f001 f8d5 	bl	800ad54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	791b      	ldrb	r3, [r3, #4]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 f8cf 	bl	800ad54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	701a      	strb	r2, [r3, #0]
      break;
 8009bc2:	e11d      	b.n	8009e00 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fa7b 	bl	800a0c2 <USBH_SetAddress>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d132      	bne.n	8009c3c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009bd6:	2002      	movs	r0, #2
 8009bd8:	f001 fbb5 	bl	800b346 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2203      	movs	r2, #3
 8009be8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	7919      	ldrb	r1, [r3, #4]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009bfe:	b292      	uxth	r2, r2
 8009c00:	9202      	str	r2, [sp, #8]
 8009c02:	2200      	movs	r2, #0
 8009c04:	9201      	str	r2, [sp, #4]
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2280      	movs	r2, #128	; 0x80
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 f851 	bl	800acb4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	7959      	ldrb	r1, [r3, #5]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c26:	b292      	uxth	r2, r2
 8009c28:	9202      	str	r2, [sp, #8]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	9201      	str	r2, [sp, #4]
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4603      	mov	r3, r0
 8009c32:	2200      	movs	r2, #0
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 f83d 	bl	800acb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009c3a:	e0e3      	b.n	8009e04 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c3c:	7bbb      	ldrb	r3, [r7, #14]
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	f040 80e0 	bne.w	8009e04 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	220d      	movs	r2, #13
 8009c48:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	705a      	strb	r2, [r3, #1]
      break;
 8009c50:	e0d8      	b.n	8009e04 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009c52:	2109      	movs	r1, #9
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f9a1 	bl	8009f9c <USBH_Get_CfgDesc>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c5e:	7bbb      	ldrb	r3, [r7, #14]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d103      	bne.n	8009c6c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2204      	movs	r2, #4
 8009c68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009c6a:	e0cd      	b.n	8009e08 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	f040 80ca 	bne.w	8009e08 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d903      	bls.n	8009c96 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	220d      	movs	r2, #13
 8009c92:	701a      	strb	r2, [r3, #0]
      break;
 8009c94:	e0b8      	b.n	8009e08 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	795b      	ldrb	r3, [r3, #5]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 f859 	bl	800ad54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	791b      	ldrb	r3, [r3, #4]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 f853 	bl	800ad54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	701a      	strb	r2, [r3, #0]
      break;
 8009cba:	e0a5      	b.n	8009e08 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f969 	bl	8009f9c <USBH_Get_CfgDesc>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d103      	bne.n	8009cdc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2205      	movs	r2, #5
 8009cd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009cda:	e097      	b.n	8009e0c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	f040 8094 	bne.w	8009e0c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cea:	3301      	adds	r3, #1
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	d903      	bls.n	8009d06 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	220d      	movs	r2, #13
 8009d02:	701a      	strb	r2, [r3, #0]
      break;
 8009d04:	e082      	b.n	8009e0c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	795b      	ldrb	r3, [r3, #5]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f001 f821 	bl	800ad54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	791b      	ldrb	r3, [r3, #4]
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 f81b 	bl	800ad54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	701a      	strb	r2, [r3, #0]
      break;
 8009d2a:	e06f      	b.n	8009e0c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d019      	beq.n	8009d6a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d42:	23ff      	movs	r3, #255	; 0xff
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f953 	bl	8009ff0 <USBH_Get_StringDesc>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d103      	bne.n	8009d5c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2206      	movs	r2, #6
 8009d58:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009d5a:	e059      	b.n	8009e10 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d156      	bne.n	8009e10 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2206      	movs	r2, #6
 8009d66:	705a      	strb	r2, [r3, #1]
      break;
 8009d68:	e052      	b.n	8009e10 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2206      	movs	r2, #6
 8009d6e:	705a      	strb	r2, [r3, #1]
      break;
 8009d70:	e04e      	b.n	8009e10 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d019      	beq.n	8009db0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009d88:	23ff      	movs	r3, #255	; 0xff
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f930 	bl	8009ff0 <USBH_Get_StringDesc>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d103      	bne.n	8009da2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2207      	movs	r2, #7
 8009d9e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009da0:	e038      	b.n	8009e14 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d135      	bne.n	8009e14 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2207      	movs	r2, #7
 8009dac:	705a      	strb	r2, [r3, #1]
      break;
 8009dae:	e031      	b.n	8009e14 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2207      	movs	r2, #7
 8009db4:	705a      	strb	r2, [r3, #1]
      break;
 8009db6:	e02d      	b.n	8009e14 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d017      	beq.n	8009df2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009dce:	23ff      	movs	r3, #255	; 0xff
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f90d 	bl	8009ff0 <USBH_Get_StringDesc>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009dda:	7bbb      	ldrb	r3, [r7, #14]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d102      	bne.n	8009de6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009de4:	e018      	b.n	8009e18 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d115      	bne.n	8009e18 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73fb      	strb	r3, [r7, #15]
      break;
 8009df0:	e012      	b.n	8009e18 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]
      break;
 8009df6:	e00f      	b.n	8009e18 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009df8:	bf00      	nop
 8009dfa:	e00e      	b.n	8009e1a <USBH_HandleEnum+0x3be>
      break;
 8009dfc:	bf00      	nop
 8009dfe:	e00c      	b.n	8009e1a <USBH_HandleEnum+0x3be>
      break;
 8009e00:	bf00      	nop
 8009e02:	e00a      	b.n	8009e1a <USBH_HandleEnum+0x3be>
      break;
 8009e04:	bf00      	nop
 8009e06:	e008      	b.n	8009e1a <USBH_HandleEnum+0x3be>
      break;
 8009e08:	bf00      	nop
 8009e0a:	e006      	b.n	8009e1a <USBH_HandleEnum+0x3be>
      break;
 8009e0c:	bf00      	nop
 8009e0e:	e004      	b.n	8009e1a <USBH_HandleEnum+0x3be>
      break;
 8009e10:	bf00      	nop
 8009e12:	e002      	b.n	8009e1a <USBH_HandleEnum+0x3be>
      break;
 8009e14:	bf00      	nop
 8009e16:	e000      	b.n	8009e1a <USBH_HandleEnum+0x3be>
      break;
 8009e18:	bf00      	nop
  }
  return Status;
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b082      	sub	sp, #8
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f804 	bl	8009e66 <USBH_HandleSof>
}
 8009e5e:	bf00      	nop
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b0b      	cmp	r3, #11
 8009e76:	d10a      	bne.n	8009e8e <USBH_HandleSof+0x28>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d005      	beq.n	8009e8e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	4798      	blx	r3
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009ea6:	bf00      	nop
}
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b083      	sub	sp, #12
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009ec2:	bf00      	nop
}
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b083      	sub	sp, #12
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f001 f8c6 	bl	800b0ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	791b      	ldrb	r3, [r3, #4]
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 ff13 	bl	800ad54 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	795b      	ldrb	r3, [r3, #5]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 ff0d 	bl	800ad54 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009f50:	887b      	ldrh	r3, [r7, #2]
 8009f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f56:	d901      	bls.n	8009f5c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e01b      	b.n	8009f94 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009f62:	887b      	ldrh	r3, [r7, #2]
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	4613      	mov	r3, r2
 8009f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f872 	bl	800a058 <USBH_GetDescriptor>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d109      	bne.n	8009f92 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f84:	887a      	ldrh	r2, [r7, #2]
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f929 	bl	800a1e0 <USBH_ParseDevDesc>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	331c      	adds	r3, #28
 8009fac:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009fae:	887b      	ldrh	r3, [r7, #2]
 8009fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb4:	d901      	bls.n	8009fba <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e016      	b.n	8009fe8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009fba:	887b      	ldrh	r3, [r7, #2]
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f846 	bl	800a058 <USBH_GetDescriptor>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d107      	bne.n	8009fe6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009fd6:	887b      	ldrh	r3, [r7, #2]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	68b9      	ldr	r1, [r7, #8]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f9b3 	bl	800a348 <USBH_ParseCfgDesc>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af02      	add	r7, sp, #8
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	607a      	str	r2, [r7, #4]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	72fb      	strb	r3, [r7, #11]
 800a000:	4613      	mov	r3, r2
 800a002:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a004:	893b      	ldrh	r3, [r7, #8]
 800a006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a00a:	d802      	bhi.n	800a012 <USBH_Get_StringDesc+0x22>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a012:	2303      	movs	r3, #3
 800a014:	e01c      	b.n	800a050 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a016:	7afb      	ldrb	r3, [r7, #11]
 800a018:	b29b      	uxth	r3, r3
 800a01a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a01e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a026:	893b      	ldrh	r3, [r7, #8]
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	460b      	mov	r3, r1
 800a02c:	2100      	movs	r1, #0
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 f812 	bl	800a058 <USBH_GetDescriptor>
 800a034:	4603      	mov	r3, r0
 800a036:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d107      	bne.n	800a04e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a044:	893a      	ldrh	r2, [r7, #8]
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fb93 	bl	800a774 <USBH_ParseStringDesc>
  }

  return status;
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	607b      	str	r3, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	72fb      	strb	r3, [r7, #11]
 800a066:	4613      	mov	r3, r2
 800a068:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	789b      	ldrb	r3, [r3, #2]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d11c      	bne.n	800a0ac <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a072:	7afb      	ldrb	r3, [r7, #11]
 800a074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2206      	movs	r2, #6
 800a082:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	893a      	ldrh	r2, [r7, #8]
 800a088:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a08a:	893b      	ldrh	r3, [r7, #8]
 800a08c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a094:	d104      	bne.n	800a0a0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f240 4209 	movw	r2, #1033	; 0x409
 800a09c:	829a      	strh	r2, [r3, #20]
 800a09e:	e002      	b.n	800a0a6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	8b3a      	ldrh	r2, [r7, #24]
 800a0aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a0ac:	8b3b      	ldrh	r3, [r7, #24]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	6879      	ldr	r1, [r7, #4]
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 fbac 	bl	800a810 <USBH_CtlReq>
 800a0b8:	4603      	mov	r3, r0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	789b      	ldrb	r3, [r3, #2]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d10f      	bne.n	800a0f6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2205      	movs	r2, #5
 800a0e0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a0e2:	78fb      	ldrb	r3, [r7, #3]
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fb88 	bl	800a810 <USBH_CtlReq>
 800a100:	4603      	mov	r3, r0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	460b      	mov	r3, r1
 800a114:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	789b      	ldrb	r3, [r3, #2]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d10e      	bne.n	800a13c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2209      	movs	r2, #9
 800a128:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	887a      	ldrh	r2, [r7, #2]
 800a12e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a13c:	2200      	movs	r2, #0
 800a13e:	2100      	movs	r1, #0
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fb65 	bl	800a810 <USBH_CtlReq>
 800a146:	4603      	mov	r3, r0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	789b      	ldrb	r3, [r3, #2]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d10f      	bne.n	800a184 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2203      	movs	r2, #3
 800a16e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a184:	2200      	movs	r2, #0
 800a186:	2100      	movs	r1, #0
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fb41 	bl	800a810 <USBH_CtlReq>
 800a18e:	4603      	mov	r3, r0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	789b      	ldrb	r3, [r3, #2]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d10f      	bne.n	800a1cc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a1be:	78fb      	ldrb	r3, [r7, #3]
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fb1d 	bl	800a810 <USBH_CtlReq>
 800a1d6:	4603      	mov	r3, r0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f203 3326 	addw	r3, r3, #806	; 0x326
 800a1f4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a200:	2302      	movs	r3, #2
 800a202:	e098      	b.n	800a336 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	781a      	ldrb	r2, [r3, #0]
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	785a      	ldrb	r2, [r3, #1]
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	3302      	adds	r3, #2
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	3303      	adds	r3, #3
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	b29b      	uxth	r3, r3
 800a224:	021b      	lsls	r3, r3, #8
 800a226:	b29b      	uxth	r3, r3
 800a228:	4313      	orrs	r3, r2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	791a      	ldrb	r2, [r3, #4]
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	795a      	ldrb	r2, [r3, #5]
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	799a      	ldrb	r2, [r3, #6]
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	79da      	ldrb	r2, [r3, #7]
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a256:	2b00      	cmp	r3, #0
 800a258:	d004      	beq.n	800a264 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a260:	2b01      	cmp	r3, #1
 800a262:	d11b      	bne.n	800a29c <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	79db      	ldrb	r3, [r3, #7]
 800a268:	2b20      	cmp	r3, #32
 800a26a:	dc0f      	bgt.n	800a28c <USBH_ParseDevDesc+0xac>
 800a26c:	2b08      	cmp	r3, #8
 800a26e:	db0f      	blt.n	800a290 <USBH_ParseDevDesc+0xb0>
 800a270:	3b08      	subs	r3, #8
 800a272:	4a34      	ldr	r2, [pc, #208]	; (800a344 <USBH_ParseDevDesc+0x164>)
 800a274:	fa22 f303 	lsr.w	r3, r2, r3
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	bf14      	ite	ne
 800a280:	2301      	movne	r3, #1
 800a282:	2300      	moveq	r3, #0
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d106      	bne.n	800a298 <USBH_ParseDevDesc+0xb8>
 800a28a:	e001      	b.n	800a290 <USBH_ParseDevDesc+0xb0>
 800a28c:	2b40      	cmp	r3, #64	; 0x40
 800a28e:	d003      	beq.n	800a298 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2208      	movs	r2, #8
 800a294:	71da      	strb	r2, [r3, #7]
        break;
 800a296:	e000      	b.n	800a29a <USBH_ParseDevDesc+0xba>
        break;
 800a298:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a29a:	e00e      	b.n	800a2ba <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d107      	bne.n	800a2b6 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	79db      	ldrb	r3, [r3, #7]
 800a2aa:	2b08      	cmp	r3, #8
 800a2ac:	d005      	beq.n	800a2ba <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	71da      	strb	r2, [r3, #7]
 800a2b4:	e001      	b.n	800a2ba <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a2ba:	88fb      	ldrh	r3, [r7, #6]
 800a2bc:	2b08      	cmp	r3, #8
 800a2be:	d939      	bls.n	800a334 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	3309      	adds	r3, #9
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	021b      	lsls	r3, r3, #8
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	330a      	adds	r3, #10
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	330b      	adds	r3, #11
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	021b      	lsls	r3, r3, #8
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	330c      	adds	r3, #12
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	330d      	adds	r3, #13
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	b29b      	uxth	r3, r3
 800a308:	021b      	lsls	r3, r3, #8
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	4313      	orrs	r3, r2
 800a30e:	b29a      	uxth	r2, r3
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	7b9a      	ldrb	r2, [r3, #14]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	7bda      	ldrb	r2, [r3, #15]
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	7c1a      	ldrb	r2, [r3, #16]
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	7c5a      	ldrb	r2, [r3, #17]
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a334:	7dfb      	ldrb	r3, [r7, #23]
}
 800a336:	4618      	mov	r0, r3
 800a338:	371c      	adds	r7, #28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	01000101 	.word	0x01000101

0800a348 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08c      	sub	sp, #48	; 0x30
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a35c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a364:	2300      	movs	r3, #0
 800a366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a36a:	2300      	movs	r3, #0
 800a36c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a376:	2302      	movs	r3, #2
 800a378:	e0db      	b.n	800a532 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	781a      	ldrb	r2, [r3, #0]
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	785a      	ldrb	r2, [r3, #1]
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	3302      	adds	r3, #2
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	b29a      	uxth	r2, r3
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	3303      	adds	r3, #3
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3aa:	bf28      	it	cs
 800a3ac:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	791a      	ldrb	r2, [r3, #4]
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	795a      	ldrb	r2, [r3, #5]
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	799a      	ldrb	r2, [r3, #6]
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	79da      	ldrb	r2, [r3, #7]
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	7a1a      	ldrb	r2, [r3, #8]
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b09      	cmp	r3, #9
 800a3e4:	d002      	beq.n	800a3ec <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	2209      	movs	r2, #9
 800a3ea:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a3ec:	88fb      	ldrh	r3, [r7, #6]
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	f240 809d 	bls.w	800a52e <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800a3f4:	2309      	movs	r3, #9
 800a3f6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a3fc:	e081      	b.n	800a502 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a3fe:	f107 0316 	add.w	r3, r7, #22
 800a402:	4619      	mov	r1, r3
 800a404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a406:	f000 f9e8 	bl	800a7da <USBH_GetNextDesc>
 800a40a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	2b04      	cmp	r3, #4
 800a412:	d176      	bne.n	800a502 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b09      	cmp	r3, #9
 800a41a:	d002      	beq.n	800a422 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	2209      	movs	r2, #9
 800a420:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a426:	221a      	movs	r2, #26
 800a428:	fb02 f303 	mul.w	r3, r2, r3
 800a42c:	3308      	adds	r3, #8
 800a42e:	6a3a      	ldr	r2, [r7, #32]
 800a430:	4413      	add	r3, r2
 800a432:	3302      	adds	r3, #2
 800a434:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a438:	69f8      	ldr	r0, [r7, #28]
 800a43a:	f000 f87e 	bl	800a53a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a43e:	2300      	movs	r3, #0
 800a440:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a444:	2300      	movs	r3, #0
 800a446:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a448:	e043      	b.n	800a4d2 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a44a:	f107 0316 	add.w	r3, r7, #22
 800a44e:	4619      	mov	r1, r3
 800a450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a452:	f000 f9c2 	bl	800a7da <USBH_GetNextDesc>
 800a456:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	785b      	ldrb	r3, [r3, #1]
 800a45c:	2b05      	cmp	r3, #5
 800a45e:	d138      	bne.n	800a4d2 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	795b      	ldrb	r3, [r3, #5]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d113      	bne.n	800a490 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d003      	beq.n	800a478 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	799b      	ldrb	r3, [r3, #6]
 800a474:	2b03      	cmp	r3, #3
 800a476:	d10b      	bne.n	800a490 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	79db      	ldrb	r3, [r3, #7]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10b      	bne.n	800a498 <USBH_ParseCfgDesc+0x150>
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	2b09      	cmp	r3, #9
 800a486:	d007      	beq.n	800a498 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	2209      	movs	r2, #9
 800a48c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a48e:	e003      	b.n	800a498 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a492:	2207      	movs	r2, #7
 800a494:	701a      	strb	r2, [r3, #0]
 800a496:	e000      	b.n	800a49a <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a498:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a49a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a49e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a4a2:	3201      	adds	r2, #1
 800a4a4:	00d2      	lsls	r2, r2, #3
 800a4a6:	211a      	movs	r1, #26
 800a4a8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ac:	4413      	add	r3, r2
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	6a3a      	ldr	r2, [r7, #32]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a4b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4ba:	69b9      	ldr	r1, [r7, #24]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f870 	bl	800a5a2 <USBH_ParseEPDesc>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a4c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	791b      	ldrb	r3, [r3, #4]
 800a4d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d204      	bcs.n	800a4e8 <USBH_ParseCfgDesc+0x1a0>
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	885a      	ldrh	r2, [r3, #2]
 800a4e2:	8afb      	ldrh	r3, [r7, #22]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d8b0      	bhi.n	800a44a <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	791b      	ldrb	r3, [r3, #4]
 800a4ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d201      	bcs.n	800a4f8 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e01c      	b.n	800a532 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800a4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a506:	2b01      	cmp	r3, #1
 800a508:	d805      	bhi.n	800a516 <USBH_ParseCfgDesc+0x1ce>
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	885a      	ldrh	r2, [r3, #2]
 800a50e:	8afb      	ldrh	r3, [r7, #22]
 800a510:	429a      	cmp	r2, r3
 800a512:	f63f af74 	bhi.w	800a3fe <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	791b      	ldrb	r3, [r3, #4]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	bf28      	it	cs
 800a51e:	2302      	movcs	r3, #2
 800a520:	b2db      	uxtb	r3, r3
 800a522:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a526:	429a      	cmp	r2, r3
 800a528:	d201      	bcs.n	800a52e <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e001      	b.n	800a532 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800a52e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a532:	4618      	mov	r0, r3
 800a534:	3730      	adds	r7, #48	; 0x30
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	781a      	ldrb	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	785a      	ldrb	r2, [r3, #1]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	789a      	ldrb	r2, [r3, #2]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	78da      	ldrb	r2, [r3, #3]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	3304      	adds	r3, #4
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	bf28      	it	cs
 800a56e:	2302      	movcs	r3, #2
 800a570:	b2da      	uxtb	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	795a      	ldrb	r2, [r3, #5]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	799a      	ldrb	r2, [r3, #6]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	79da      	ldrb	r2, [r3, #7]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	7a1a      	ldrb	r2, [r3, #8]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	721a      	strb	r2, [r3, #8]
}
 800a596:	bf00      	nop
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b087      	sub	sp, #28
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	60b9      	str	r1, [r7, #8]
 800a5ac:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	781a      	ldrb	r2, [r3, #0]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	785a      	ldrb	r2, [r3, #1]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	789a      	ldrb	r2, [r3, #2]
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	78da      	ldrb	r2, [r3, #3]
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3305      	adds	r3, #5
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	799a      	ldrb	r2, [r3, #6]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	889b      	ldrh	r3, [r3, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d009      	beq.n	800a612 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a606:	d804      	bhi.n	800a612 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a60c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a610:	d901      	bls.n	800a616 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800a612:	2303      	movs	r3, #3
 800a614:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d136      	bne.n	800a68e <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	78db      	ldrb	r3, [r3, #3]
 800a624:	f003 0303 	and.w	r3, r3, #3
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d108      	bne.n	800a63e <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	889b      	ldrh	r3, [r3, #4]
 800a630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a634:	f240 8097 	bls.w	800a766 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a638:	2303      	movs	r3, #3
 800a63a:	75fb      	strb	r3, [r7, #23]
 800a63c:	e093      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	78db      	ldrb	r3, [r3, #3]
 800a642:	f003 0303 	and.w	r3, r3, #3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d107      	bne.n	800a65a <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	889b      	ldrh	r3, [r3, #4]
 800a64e:	2b40      	cmp	r3, #64	; 0x40
 800a650:	f240 8089 	bls.w	800a766 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a654:	2303      	movs	r3, #3
 800a656:	75fb      	strb	r3, [r7, #23]
 800a658:	e085      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	78db      	ldrb	r3, [r3, #3]
 800a65e:	f003 0303 	and.w	r3, r3, #3
 800a662:	2b01      	cmp	r3, #1
 800a664:	d005      	beq.n	800a672 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	78db      	ldrb	r3, [r3, #3]
 800a66a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d10a      	bne.n	800a688 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	799b      	ldrb	r3, [r3, #6]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <USBH_ParseEPDesc+0xe0>
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	799b      	ldrb	r3, [r3, #6]
 800a67e:	2b10      	cmp	r3, #16
 800a680:	d970      	bls.n	800a764 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a682:	2303      	movs	r3, #3
 800a684:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a686:	e06d      	b.n	800a764 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a688:	2303      	movs	r3, #3
 800a68a:	75fb      	strb	r3, [r7, #23]
 800a68c:	e06b      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a694:	2b01      	cmp	r3, #1
 800a696:	d13c      	bne.n	800a712 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	78db      	ldrb	r3, [r3, #3]
 800a69c:	f003 0303 	and.w	r3, r3, #3
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d005      	beq.n	800a6b0 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	78db      	ldrb	r3, [r3, #3]
 800a6a8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d106      	bne.n	800a6be <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	889b      	ldrh	r3, [r3, #4]
 800a6b4:	2b40      	cmp	r3, #64	; 0x40
 800a6b6:	d956      	bls.n	800a766 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a6bc:	e053      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	78db      	ldrb	r3, [r3, #3]
 800a6c2:	f003 0303 	and.w	r3, r3, #3
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d10e      	bne.n	800a6e8 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	799b      	ldrb	r3, [r3, #6]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d007      	beq.n	800a6e2 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a6d6:	2b10      	cmp	r3, #16
 800a6d8:	d803      	bhi.n	800a6e2 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a6de:	2b40      	cmp	r3, #64	; 0x40
 800a6e0:	d941      	bls.n	800a766 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	75fb      	strb	r3, [r7, #23]
 800a6e6:	e03e      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	78db      	ldrb	r3, [r3, #3]
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	d10b      	bne.n	800a70c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	799b      	ldrb	r3, [r3, #6]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d004      	beq.n	800a706 <USBH_ParseEPDesc+0x164>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	889b      	ldrh	r3, [r3, #4]
 800a700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a704:	d32f      	bcc.n	800a766 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a706:	2303      	movs	r3, #3
 800a708:	75fb      	strb	r3, [r7, #23]
 800a70a:	e02c      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a70c:	2303      	movs	r3, #3
 800a70e:	75fb      	strb	r3, [r7, #23]
 800a710:	e029      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d120      	bne.n	800a75e <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	78db      	ldrb	r3, [r3, #3]
 800a720:	f003 0303 	and.w	r3, r3, #3
 800a724:	2b00      	cmp	r3, #0
 800a726:	d106      	bne.n	800a736 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	889b      	ldrh	r3, [r3, #4]
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d01a      	beq.n	800a766 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a730:	2303      	movs	r3, #3
 800a732:	75fb      	strb	r3, [r7, #23]
 800a734:	e017      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	78db      	ldrb	r3, [r3, #3]
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d10a      	bne.n	800a758 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	799b      	ldrb	r3, [r3, #6]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <USBH_ParseEPDesc+0x1b0>
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	889b      	ldrh	r3, [r3, #4]
 800a74e:	2b08      	cmp	r3, #8
 800a750:	d909      	bls.n	800a766 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a752:	2303      	movs	r3, #3
 800a754:	75fb      	strb	r3, [r7, #23]
 800a756:	e006      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a758:	2303      	movs	r3, #3
 800a75a:	75fb      	strb	r3, [r7, #23]
 800a75c:	e003      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a75e:	2303      	movs	r3, #3
 800a760:	75fb      	strb	r3, [r7, #23]
 800a762:	e000      	b.n	800a766 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a764:	bf00      	nop
  }

  return status;
 800a766:	7dfb      	ldrb	r3, [r7, #23]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	371c      	adds	r7, #28
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a774:	b480      	push	{r7}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	4613      	mov	r3, r2
 800a780:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3301      	adds	r3, #1
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d120      	bne.n	800a7ce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	1e9a      	subs	r2, r3, #2
 800a792:	88fb      	ldrh	r3, [r7, #6]
 800a794:	4293      	cmp	r3, r2
 800a796:	bf28      	it	cs
 800a798:	4613      	movcs	r3, r2
 800a79a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3302      	adds	r3, #2
 800a7a0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	82fb      	strh	r3, [r7, #22]
 800a7a6:	e00b      	b.n	800a7c0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a7a8:	8afb      	ldrh	r3, [r7, #22]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	781a      	ldrb	r2, [r3, #0]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a7ba:	8afb      	ldrh	r3, [r7, #22]
 800a7bc:	3302      	adds	r3, #2
 800a7be:	82fb      	strh	r3, [r7, #22]
 800a7c0:	8afa      	ldrh	r2, [r7, #22]
 800a7c2:	8abb      	ldrh	r3, [r7, #20]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d3ef      	bcc.n	800a7a8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	701a      	strb	r2, [r3, #0]
  }
}
 800a7ce:	bf00      	nop
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b085      	sub	sp, #20
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	881a      	ldrh	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	4413      	add	r3, r2
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4413      	add	r3, r2
 800a800:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a802:	68fb      	ldr	r3, [r7, #12]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4613      	mov	r3, r2
 800a81c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a81e:	2301      	movs	r3, #1
 800a820:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	789b      	ldrb	r3, [r3, #2]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d002      	beq.n	800a830 <USBH_CtlReq+0x20>
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d00f      	beq.n	800a84e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a82e:	e027      	b.n	800a880 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	88fa      	ldrh	r2, [r7, #6]
 800a83a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2201      	movs	r2, #1
 800a840:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2202      	movs	r2, #2
 800a846:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a848:	2301      	movs	r3, #1
 800a84a:	75fb      	strb	r3, [r7, #23]
      break;
 800a84c:	e018      	b.n	800a880 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 f81c 	bl	800a88c <USBH_HandleControl>
 800a854:	4603      	mov	r3, r0
 800a856:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <USBH_CtlReq+0x54>
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	2b03      	cmp	r3, #3
 800a862:	d106      	bne.n	800a872 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2201      	movs	r2, #1
 800a868:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	761a      	strb	r2, [r3, #24]
      break;
 800a870:	e005      	b.n	800a87e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	2b02      	cmp	r3, #2
 800a876:	d102      	bne.n	800a87e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2201      	movs	r2, #1
 800a87c:	709a      	strb	r2, [r3, #2]
      break;
 800a87e:	bf00      	nop
  }
  return status;
 800a880:	7dfb      	ldrb	r3, [r7, #23]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
	...

0800a88c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af02      	add	r7, sp, #8
 800a892:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a894:	2301      	movs	r3, #1
 800a896:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a898:	2300      	movs	r3, #0
 800a89a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	7e1b      	ldrb	r3, [r3, #24]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	2b0a      	cmp	r3, #10
 800a8a4:	f200 8156 	bhi.w	800ab54 <USBH_HandleControl+0x2c8>
 800a8a8:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <USBH_HandleControl+0x24>)
 800a8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ae:	bf00      	nop
 800a8b0:	0800a8dd 	.word	0x0800a8dd
 800a8b4:	0800a8f7 	.word	0x0800a8f7
 800a8b8:	0800a961 	.word	0x0800a961
 800a8bc:	0800a987 	.word	0x0800a987
 800a8c0:	0800a9bf 	.word	0x0800a9bf
 800a8c4:	0800a9e9 	.word	0x0800a9e9
 800a8c8:	0800aa3b 	.word	0x0800aa3b
 800a8cc:	0800aa5d 	.word	0x0800aa5d
 800a8d0:	0800aa99 	.word	0x0800aa99
 800a8d4:	0800aabf 	.word	0x0800aabf
 800a8d8:	0800aafd 	.word	0x0800aafd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f103 0110 	add.w	r1, r3, #16
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	795b      	ldrb	r3, [r3, #5]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f943 	bl	800ab74 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	761a      	strb	r2, [r3, #24]
      break;
 800a8f4:	e139      	b.n	800ab6a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	795b      	ldrb	r3, [r3, #5]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fcc5 	bl	800b28c <USBH_LL_GetURBState>
 800a902:	4603      	mov	r3, r0
 800a904:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d11e      	bne.n	800a94a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	7c1b      	ldrb	r3, [r3, #16]
 800a910:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a914:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	8adb      	ldrh	r3, [r3, #22]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00a      	beq.n	800a934 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a91e:	7b7b      	ldrb	r3, [r7, #13]
 800a920:	2b80      	cmp	r3, #128	; 0x80
 800a922:	d103      	bne.n	800a92c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2203      	movs	r2, #3
 800a928:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a92a:	e115      	b.n	800ab58 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2205      	movs	r2, #5
 800a930:	761a      	strb	r2, [r3, #24]
      break;
 800a932:	e111      	b.n	800ab58 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a934:	7b7b      	ldrb	r3, [r7, #13]
 800a936:	2b80      	cmp	r3, #128	; 0x80
 800a938:	d103      	bne.n	800a942 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2209      	movs	r2, #9
 800a93e:	761a      	strb	r2, [r3, #24]
      break;
 800a940:	e10a      	b.n	800ab58 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2207      	movs	r2, #7
 800a946:	761a      	strb	r2, [r3, #24]
      break;
 800a948:	e106      	b.n	800ab58 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	2b04      	cmp	r3, #4
 800a94e:	d003      	beq.n	800a958 <USBH_HandleControl+0xcc>
 800a950:	7bbb      	ldrb	r3, [r7, #14]
 800a952:	2b02      	cmp	r3, #2
 800a954:	f040 8100 	bne.w	800ab58 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	220b      	movs	r2, #11
 800a95c:	761a      	strb	r2, [r3, #24]
      break;
 800a95e:	e0fb      	b.n	800ab58 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a966:	b29a      	uxth	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6899      	ldr	r1, [r3, #8]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	899a      	ldrh	r2, [r3, #12]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	791b      	ldrb	r3, [r3, #4]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f93a 	bl	800abf2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2204      	movs	r2, #4
 800a982:	761a      	strb	r2, [r3, #24]
      break;
 800a984:	e0f1      	b.n	800ab6a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	791b      	ldrb	r3, [r3, #4]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fc7d 	bl	800b28c <USBH_LL_GetURBState>
 800a992:	4603      	mov	r3, r0
 800a994:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d102      	bne.n	800a9a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2209      	movs	r2, #9
 800a9a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	2b05      	cmp	r3, #5
 800a9a6:	d102      	bne.n	800a9ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a9ac:	e0d6      	b.n	800ab5c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a9ae:	7bbb      	ldrb	r3, [r7, #14]
 800a9b0:	2b04      	cmp	r3, #4
 800a9b2:	f040 80d3 	bne.w	800ab5c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	220b      	movs	r2, #11
 800a9ba:	761a      	strb	r2, [r3, #24]
      break;
 800a9bc:	e0ce      	b.n	800ab5c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6899      	ldr	r1, [r3, #8]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	899a      	ldrh	r2, [r3, #12]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	795b      	ldrb	r3, [r3, #5]
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	9000      	str	r0, [sp, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f8ea 	bl	800aba8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2206      	movs	r2, #6
 800a9e4:	761a      	strb	r2, [r3, #24]
      break;
 800a9e6:	e0c0      	b.n	800ab6a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	795b      	ldrb	r3, [r3, #5]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fc4c 	bl	800b28c <USBH_LL_GetURBState>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d103      	bne.n	800aa06 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2207      	movs	r2, #7
 800aa02:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa04:	e0ac      	b.n	800ab60 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	2b05      	cmp	r3, #5
 800aa0a:	d105      	bne.n	800aa18 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	220c      	movs	r2, #12
 800aa10:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800aa12:	2303      	movs	r3, #3
 800aa14:	73fb      	strb	r3, [r7, #15]
      break;
 800aa16:	e0a3      	b.n	800ab60 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d103      	bne.n	800aa26 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2205      	movs	r2, #5
 800aa22:	761a      	strb	r2, [r3, #24]
      break;
 800aa24:	e09c      	b.n	800ab60 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800aa26:	7bbb      	ldrb	r3, [r7, #14]
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	f040 8099 	bne.w	800ab60 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	220b      	movs	r2, #11
 800aa32:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800aa34:	2302      	movs	r3, #2
 800aa36:	73fb      	strb	r3, [r7, #15]
      break;
 800aa38:	e092      	b.n	800ab60 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	791b      	ldrb	r3, [r3, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	2100      	movs	r1, #0
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f8d5 	bl	800abf2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2208      	movs	r2, #8
 800aa58:	761a      	strb	r2, [r3, #24]

      break;
 800aa5a:	e086      	b.n	800ab6a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	791b      	ldrb	r3, [r3, #4]
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fc12 	bl	800b28c <USBH_LL_GetURBState>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d105      	bne.n	800aa7e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	220d      	movs	r2, #13
 800aa76:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa7c:	e072      	b.n	800ab64 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800aa7e:	7bbb      	ldrb	r3, [r7, #14]
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	d103      	bne.n	800aa8c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	220b      	movs	r2, #11
 800aa88:	761a      	strb	r2, [r3, #24]
      break;
 800aa8a:	e06b      	b.n	800ab64 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
 800aa8e:	2b05      	cmp	r3, #5
 800aa90:	d168      	bne.n	800ab64 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800aa92:	2303      	movs	r3, #3
 800aa94:	73fb      	strb	r3, [r7, #15]
      break;
 800aa96:	e065      	b.n	800ab64 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	795b      	ldrb	r3, [r3, #5]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	9200      	str	r2, [sp, #0]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f87f 	bl	800aba8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	220a      	movs	r2, #10
 800aaba:	761a      	strb	r2, [r3, #24]
      break;
 800aabc:	e055      	b.n	800ab6a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	795b      	ldrb	r3, [r3, #5]
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fbe1 	bl	800b28c <USBH_LL_GetURBState>
 800aaca:	4603      	mov	r3, r0
 800aacc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d105      	bne.n	800aae0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aad4:	2300      	movs	r3, #0
 800aad6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	220d      	movs	r2, #13
 800aadc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aade:	e043      	b.n	800ab68 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d103      	bne.n	800aaee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2209      	movs	r2, #9
 800aaea:	761a      	strb	r2, [r3, #24]
      break;
 800aaec:	e03c      	b.n	800ab68 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800aaee:	7bbb      	ldrb	r3, [r7, #14]
 800aaf0:	2b04      	cmp	r3, #4
 800aaf2:	d139      	bne.n	800ab68 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	220b      	movs	r2, #11
 800aaf8:	761a      	strb	r2, [r3, #24]
      break;
 800aafa:	e035      	b.n	800ab68 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	7e5b      	ldrb	r3, [r3, #25]
 800ab00:	3301      	adds	r3, #1
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	765a      	strb	r2, [r3, #25]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	7e5b      	ldrb	r3, [r3, #25]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d806      	bhi.n	800ab1e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ab1c:	e025      	b.n	800ab6a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab24:	2106      	movs	r1, #6
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	795b      	ldrb	r3, [r3, #5]
 800ab34:	4619      	mov	r1, r3
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f90c 	bl	800ad54 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	791b      	ldrb	r3, [r3, #4]
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f906 	bl	800ad54 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ab4e:	2302      	movs	r3, #2
 800ab50:	73fb      	strb	r3, [r7, #15]
      break;
 800ab52:	e00a      	b.n	800ab6a <USBH_HandleControl+0x2de>

    default:
      break;
 800ab54:	bf00      	nop
 800ab56:	e008      	b.n	800ab6a <USBH_HandleControl+0x2de>
      break;
 800ab58:	bf00      	nop
 800ab5a:	e006      	b.n	800ab6a <USBH_HandleControl+0x2de>
      break;
 800ab5c:	bf00      	nop
 800ab5e:	e004      	b.n	800ab6a <USBH_HandleControl+0x2de>
      break;
 800ab60:	bf00      	nop
 800ab62:	e002      	b.n	800ab6a <USBH_HandleControl+0x2de>
      break;
 800ab64:	bf00      	nop
 800ab66:	e000      	b.n	800ab6a <USBH_HandleControl+0x2de>
      break;
 800ab68:	bf00      	nop
  }

  return status;
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af04      	add	r7, sp, #16
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab82:	79f9      	ldrb	r1, [r7, #7]
 800ab84:	2300      	movs	r3, #0
 800ab86:	9303      	str	r3, [sp, #12]
 800ab88:	2308      	movs	r3, #8
 800ab8a:	9302      	str	r3, [sp, #8]
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	2300      	movs	r3, #0
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	2300      	movs	r3, #0
 800ab96:	2200      	movs	r2, #0
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f000 fb46 	bl	800b22a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af04      	add	r7, sp, #16
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	4611      	mov	r1, r2
 800abb4:	461a      	mov	r2, r3
 800abb6:	460b      	mov	r3, r1
 800abb8:	80fb      	strh	r3, [r7, #6]
 800abba:	4613      	mov	r3, r2
 800abbc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800abcc:	7979      	ldrb	r1, [r7, #5]
 800abce:	7e3b      	ldrb	r3, [r7, #24]
 800abd0:	9303      	str	r3, [sp, #12]
 800abd2:	88fb      	ldrh	r3, [r7, #6]
 800abd4:	9302      	str	r3, [sp, #8]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	2301      	movs	r3, #1
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	2300      	movs	r3, #0
 800abe0:	2200      	movs	r2, #0
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 fb21 	bl	800b22a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b088      	sub	sp, #32
 800abf6:	af04      	add	r7, sp, #16
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	4611      	mov	r1, r2
 800abfe:	461a      	mov	r2, r3
 800ac00:	460b      	mov	r3, r1
 800ac02:	80fb      	strh	r3, [r7, #6]
 800ac04:	4613      	mov	r3, r2
 800ac06:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac08:	7979      	ldrb	r1, [r7, #5]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	9303      	str	r3, [sp, #12]
 800ac0e:	88fb      	ldrh	r3, [r7, #6]
 800ac10:	9302      	str	r3, [sp, #8]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	2301      	movs	r3, #1
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f000 fb03 	bl	800b22a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ac24:	2300      	movs	r3, #0

}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b088      	sub	sp, #32
 800ac32:	af04      	add	r7, sp, #16
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	60b9      	str	r1, [r7, #8]
 800ac38:	4611      	mov	r1, r2
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	80fb      	strh	r3, [r7, #6]
 800ac40:	4613      	mov	r3, r2
 800ac42:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac52:	7979      	ldrb	r1, [r7, #5]
 800ac54:	7e3b      	ldrb	r3, [r7, #24]
 800ac56:	9303      	str	r3, [sp, #12]
 800ac58:	88fb      	ldrh	r3, [r7, #6]
 800ac5a:	9302      	str	r3, [sp, #8]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	2301      	movs	r3, #1
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	2302      	movs	r3, #2
 800ac66:	2200      	movs	r2, #0
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 fade 	bl	800b22a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b088      	sub	sp, #32
 800ac7c:	af04      	add	r7, sp, #16
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	4611      	mov	r1, r2
 800ac84:	461a      	mov	r2, r3
 800ac86:	460b      	mov	r3, r1
 800ac88:	80fb      	strh	r3, [r7, #6]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac8e:	7979      	ldrb	r1, [r7, #5]
 800ac90:	2300      	movs	r3, #0
 800ac92:	9303      	str	r3, [sp, #12]
 800ac94:	88fb      	ldrh	r3, [r7, #6]
 800ac96:	9302      	str	r3, [sp, #8]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	2302      	movs	r3, #2
 800aca2:	2201      	movs	r2, #1
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 fac0 	bl	800b22a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af04      	add	r7, sp, #16
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	4608      	mov	r0, r1
 800acbe:	4611      	mov	r1, r2
 800acc0:	461a      	mov	r2, r3
 800acc2:	4603      	mov	r3, r0
 800acc4:	70fb      	strb	r3, [r7, #3]
 800acc6:	460b      	mov	r3, r1
 800acc8:	70bb      	strb	r3, [r7, #2]
 800acca:	4613      	mov	r3, r2
 800accc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800acce:	7878      	ldrb	r0, [r7, #1]
 800acd0:	78ba      	ldrb	r2, [r7, #2]
 800acd2:	78f9      	ldrb	r1, [r7, #3]
 800acd4:	8b3b      	ldrh	r3, [r7, #24]
 800acd6:	9302      	str	r3, [sp, #8]
 800acd8:	7d3b      	ldrb	r3, [r7, #20]
 800acda:	9301      	str	r3, [sp, #4]
 800acdc:	7c3b      	ldrb	r3, [r7, #16]
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	4603      	mov	r3, r0
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fa53 	bl	800b18e <USBH_LL_OpenPipe>

  return USBH_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	460b      	mov	r3, r1
 800acfc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800acfe:	78fb      	ldrb	r3, [r7, #3]
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fa72 	bl	800b1ec <USBH_LL_ClosePipe>

  return USBH_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f836 	bl	800ad90 <USBH_GetFreePipe>
 800ad24:	4603      	mov	r3, r0
 800ad26:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ad28:	89fb      	ldrh	r3, [r7, #14]
 800ad2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d00a      	beq.n	800ad48 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ad32:	78fa      	ldrb	r2, [r7, #3]
 800ad34:	89fb      	ldrh	r3, [r7, #14]
 800ad36:	f003 030f 	and.w	r3, r3, #15
 800ad3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad3e:	6879      	ldr	r1, [r7, #4]
 800ad40:	33e0      	adds	r3, #224	; 0xe0
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	440b      	add	r3, r1
 800ad46:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ad48:	89fb      	ldrh	r3, [r7, #14]
 800ad4a:	b2db      	uxtb	r3, r3
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	2b0f      	cmp	r3, #15
 800ad64:	d80d      	bhi.n	800ad82 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ad66:	78fb      	ldrb	r3, [r7, #3]
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	33e0      	adds	r3, #224	; 0xe0
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	4413      	add	r3, r2
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	78fb      	ldrb	r3, [r7, #3]
 800ad74:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ad78:	6879      	ldr	r1, [r7, #4]
 800ad7a:	33e0      	adds	r3, #224	; 0xe0
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	440b      	add	r3, r1
 800ad80:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	73fb      	strb	r3, [r7, #15]
 800ada0:	e00f      	b.n	800adc2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	33e0      	adds	r3, #224	; 0xe0
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d102      	bne.n	800adbc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	e007      	b.n	800adcc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	3301      	adds	r3, #1
 800adc0:	73fb      	strb	r3, [r7, #15]
 800adc2:	7bfb      	ldrb	r3, [r7, #15]
 800adc4:	2b0f      	cmp	r3, #15
 800adc6:	d9ec      	bls.n	800ada2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800adc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800addc:	2201      	movs	r2, #1
 800adde:	490e      	ldr	r1, [pc, #56]	; (800ae18 <MX_USB_HOST_Init+0x40>)
 800ade0:	480e      	ldr	r0, [pc, #56]	; (800ae1c <MX_USB_HOST_Init+0x44>)
 800ade2:	f7fe fb05 	bl	80093f0 <USBH_Init>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800adec:	f7f6 fc3e 	bl	800166c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800adf0:	490b      	ldr	r1, [pc, #44]	; (800ae20 <MX_USB_HOST_Init+0x48>)
 800adf2:	480a      	ldr	r0, [pc, #40]	; (800ae1c <MX_USB_HOST_Init+0x44>)
 800adf4:	f7fe fba9 	bl	800954a <USBH_RegisterClass>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800adfe:	f7f6 fc35 	bl	800166c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ae02:	4806      	ldr	r0, [pc, #24]	; (800ae1c <MX_USB_HOST_Init+0x44>)
 800ae04:	f7fe fc2d 	bl	8009662 <USBH_Start>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ae0e:	f7f6 fc2d 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ae12:	bf00      	nop
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	0800ae39 	.word	0x0800ae39
 800ae1c:	2000037c 	.word	0x2000037c
 800ae20:	2000000c 	.word	0x2000000c

0800ae24 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ae28:	4802      	ldr	r0, [pc, #8]	; (800ae34 <MX_USB_HOST_Process+0x10>)
 800ae2a:	f7fe fc2b 	bl	8009684 <USBH_Process>
}
 800ae2e:	bf00      	nop
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	2000037c 	.word	0x2000037c

0800ae38 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ae44:	78fb      	ldrb	r3, [r7, #3]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d819      	bhi.n	800ae80 <USBH_UserProcess+0x48>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <USBH_UserProcess+0x1c>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae81 	.word	0x0800ae81
 800ae58:	0800ae71 	.word	0x0800ae71
 800ae5c:	0800ae81 	.word	0x0800ae81
 800ae60:	0800ae79 	.word	0x0800ae79
 800ae64:	0800ae69 	.word	0x0800ae69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ae68:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <USBH_UserProcess+0x58>)
 800ae6a:	2203      	movs	r2, #3
 800ae6c:	701a      	strb	r2, [r3, #0]
  break;
 800ae6e:	e008      	b.n	800ae82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ae70:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <USBH_UserProcess+0x58>)
 800ae72:	2202      	movs	r2, #2
 800ae74:	701a      	strb	r2, [r3, #0]
  break;
 800ae76:	e004      	b.n	800ae82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ae78:	4b05      	ldr	r3, [pc, #20]	; (800ae90 <USBH_UserProcess+0x58>)
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	701a      	strb	r2, [r3, #0]
  break;
 800ae7e:	e000      	b.n	800ae82 <USBH_UserProcess+0x4a>

  default:
  break;
 800ae80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	20000754 	.word	0x20000754

0800ae94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08a      	sub	sp, #40	; 0x28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	605a      	str	r2, [r3, #4]
 800aea6:	609a      	str	r2, [r3, #8]
 800aea8:	60da      	str	r2, [r3, #12]
 800aeaa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeb4:	d147      	bne.n	800af46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	613b      	str	r3, [r7, #16]
 800aeba:	4b25      	ldr	r3, [pc, #148]	; (800af50 <HAL_HCD_MspInit+0xbc>)
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	4a24      	ldr	r2, [pc, #144]	; (800af50 <HAL_HCD_MspInit+0xbc>)
 800aec0:	f043 0301 	orr.w	r3, r3, #1
 800aec4:	6313      	str	r3, [r2, #48]	; 0x30
 800aec6:	4b22      	ldr	r3, [pc, #136]	; (800af50 <HAL_HCD_MspInit+0xbc>)
 800aec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	613b      	str	r3, [r7, #16]
 800aed0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aed8:	2300      	movs	r3, #0
 800aeda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aedc:	2300      	movs	r3, #0
 800aede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800aee0:	f107 0314 	add.w	r3, r7, #20
 800aee4:	4619      	mov	r1, r3
 800aee6:	481b      	ldr	r0, [pc, #108]	; (800af54 <HAL_HCD_MspInit+0xc0>)
 800aee8:	f7f7 f8fc 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800aeec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800aef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aef2:	2302      	movs	r3, #2
 800aef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aef6:	2300      	movs	r3, #0
 800aef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aefa:	2300      	movs	r3, #0
 800aefc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aefe:	230a      	movs	r3, #10
 800af00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af02:	f107 0314 	add.w	r3, r7, #20
 800af06:	4619      	mov	r1, r3
 800af08:	4812      	ldr	r0, [pc, #72]	; (800af54 <HAL_HCD_MspInit+0xc0>)
 800af0a:	f7f7 f8eb 	bl	80020e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af0e:	4b10      	ldr	r3, [pc, #64]	; (800af50 <HAL_HCD_MspInit+0xbc>)
 800af10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af12:	4a0f      	ldr	r2, [pc, #60]	; (800af50 <HAL_HCD_MspInit+0xbc>)
 800af14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af18:	6353      	str	r3, [r2, #52]	; 0x34
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
 800af1e:	4b0c      	ldr	r3, [pc, #48]	; (800af50 <HAL_HCD_MspInit+0xbc>)
 800af20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af22:	4a0b      	ldr	r2, [pc, #44]	; (800af50 <HAL_HCD_MspInit+0xbc>)
 800af24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af28:	6453      	str	r3, [r2, #68]	; 0x44
 800af2a:	4b09      	ldr	r3, [pc, #36]	; (800af50 <HAL_HCD_MspInit+0xbc>)
 800af2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800af36:	2200      	movs	r2, #0
 800af38:	2100      	movs	r1, #0
 800af3a:	2043      	movs	r0, #67	; 0x43
 800af3c:	f7f7 f809 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af40:	2043      	movs	r0, #67	; 0x43
 800af42:	f7f7 f822 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800af46:	bf00      	nop
 800af48:	3728      	adds	r7, #40	; 0x28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	40023800 	.word	0x40023800
 800af54:	40020000 	.word	0x40020000

0800af58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe ff6b 	bl	8009e42 <USBH_LL_IncTimer>
}
 800af6c:	bf00      	nop
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800af82:	4618      	mov	r0, r3
 800af84:	f7fe ffa3 	bl	8009ece <USBH_LL_Connect>
}
 800af88:	bf00      	nop
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fe ffac 	bl	8009efc <USBH_LL_Disconnect>
}
 800afa4:	bf00      	nop
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	70fb      	strb	r3, [r7, #3]
 800afb8:	4613      	mov	r3, r2
 800afba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe ff5d 	bl	8009e96 <USBH_LL_PortEnabled>
}
 800afdc:	bf00      	nop
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fe ff5d 	bl	8009eb2 <USBH_LL_PortDisabled>
}
 800aff8:	bf00      	nop
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d12a      	bne.n	800b068 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b012:	4a18      	ldr	r2, [pc, #96]	; (800b074 <USBH_LL_Init+0x74>)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a15      	ldr	r2, [pc, #84]	; (800b074 <USBH_LL_Init+0x74>)
 800b01e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b022:	4b14      	ldr	r3, [pc, #80]	; (800b074 <USBH_LL_Init+0x74>)
 800b024:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b028:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b02a:	4b12      	ldr	r3, [pc, #72]	; (800b074 <USBH_LL_Init+0x74>)
 800b02c:	2208      	movs	r2, #8
 800b02e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b030:	4b10      	ldr	r3, [pc, #64]	; (800b074 <USBH_LL_Init+0x74>)
 800b032:	2201      	movs	r2, #1
 800b034:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b036:	4b0f      	ldr	r3, [pc, #60]	; (800b074 <USBH_LL_Init+0x74>)
 800b038:	2200      	movs	r2, #0
 800b03a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b03c:	4b0d      	ldr	r3, [pc, #52]	; (800b074 <USBH_LL_Init+0x74>)
 800b03e:	2202      	movs	r2, #2
 800b040:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b042:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <USBH_LL_Init+0x74>)
 800b044:	2200      	movs	r2, #0
 800b046:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b048:	480a      	ldr	r0, [pc, #40]	; (800b074 <USBH_LL_Init+0x74>)
 800b04a:	f7f7 fa1a 	bl	8002482 <HAL_HCD_Init>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b054:	f7f6 fb0a 	bl	800166c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b058:	4806      	ldr	r0, [pc, #24]	; (800b074 <USBH_LL_Init+0x74>)
 800b05a:	f7f7 fe7b 	bl	8002d54 <HAL_HCD_GetCurrentFrame>
 800b05e:	4603      	mov	r3, r0
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7fe fede 	bl	8009e24 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	20000758 	.word	0x20000758

0800b078 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b08e:	4618      	mov	r0, r3
 800b090:	f7f7 fde8 	bl	8002c64 <HAL_HCD_Start>
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 f95e 	bl	800b35c <USBH_Get_USB_Status>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7f7 fdf0 	bl	8002caa <HAL_HCD_Stop>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f000 f943 	bl	800b35c <USBH_Get_USB_Status>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7f7 fe3a 	bl	8002d70 <HAL_HCD_GetCurrentSpeed>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d00c      	beq.n	800b11c <USBH_LL_GetSpeed+0x38>
 800b102:	2b02      	cmp	r3, #2
 800b104:	d80d      	bhi.n	800b122 <USBH_LL_GetSpeed+0x3e>
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <USBH_LL_GetSpeed+0x2c>
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d003      	beq.n	800b116 <USBH_LL_GetSpeed+0x32>
 800b10e:	e008      	b.n	800b122 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b110:	2300      	movs	r3, #0
 800b112:	73fb      	strb	r3, [r7, #15]
    break;
 800b114:	e008      	b.n	800b128 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b116:	2301      	movs	r3, #1
 800b118:	73fb      	strb	r3, [r7, #15]
    break;
 800b11a:	e005      	b.n	800b128 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b11c:	2302      	movs	r3, #2
 800b11e:	73fb      	strb	r3, [r7, #15]
    break;
 800b120:	e002      	b.n	800b128 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b122:	2301      	movs	r3, #1
 800b124:	73fb      	strb	r3, [r7, #15]
    break;
 800b126:	bf00      	nop
  }
  return  speed;
 800b128:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b084      	sub	sp, #16
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b148:	4618      	mov	r0, r3
 800b14a:	f7f7 fdcb 	bl	8002ce4 <HAL_HCD_ResetPort>
 800b14e:	4603      	mov	r3, r0
 800b150:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	4618      	mov	r0, r3
 800b156:	f000 f901 	bl	800b35c <USBH_Get_USB_Status>
 800b15a:	4603      	mov	r3, r0
 800b15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	460b      	mov	r3, r1
 800b172:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b17a:	78fa      	ldrb	r2, [r7, #3]
 800b17c:	4611      	mov	r1, r2
 800b17e:	4618      	mov	r0, r3
 800b180:	f7f7 fdd3 	bl	8002d2a <HAL_HCD_HC_GetXferCount>
 800b184:	4603      	mov	r3, r0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b18e:	b590      	push	{r4, r7, lr}
 800b190:	b089      	sub	sp, #36	; 0x24
 800b192:	af04      	add	r7, sp, #16
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	4608      	mov	r0, r1
 800b198:	4611      	mov	r1, r2
 800b19a:	461a      	mov	r2, r3
 800b19c:	4603      	mov	r3, r0
 800b19e:	70fb      	strb	r3, [r7, #3]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70bb      	strb	r3, [r7, #2]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b1b6:	787c      	ldrb	r4, [r7, #1]
 800b1b8:	78ba      	ldrb	r2, [r7, #2]
 800b1ba:	78f9      	ldrb	r1, [r7, #3]
 800b1bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1be:	9302      	str	r3, [sp, #8]
 800b1c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	f7f7 f9bf 	bl	8002550 <HAL_HCD_HC_Init>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 f8bf 	bl	800b35c <USBH_Get_USB_Status>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd90      	pop	{r4, r7, pc}

0800b1ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	4611      	mov	r1, r2
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7f7 fa58 	bl	80026c0 <HAL_HCD_HC_Halt>
 800b210:	4603      	mov	r3, r0
 800b212:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b214:	7bfb      	ldrb	r3, [r7, #15]
 800b216:	4618      	mov	r0, r3
 800b218:	f000 f8a0 	bl	800b35c <USBH_Get_USB_Status>
 800b21c:	4603      	mov	r3, r0
 800b21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b220:	7bbb      	ldrb	r3, [r7, #14]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b22a:	b590      	push	{r4, r7, lr}
 800b22c:	b089      	sub	sp, #36	; 0x24
 800b22e:	af04      	add	r7, sp, #16
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	4608      	mov	r0, r1
 800b234:	4611      	mov	r1, r2
 800b236:	461a      	mov	r2, r3
 800b238:	4603      	mov	r3, r0
 800b23a:	70fb      	strb	r3, [r7, #3]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70bb      	strb	r3, [r7, #2]
 800b240:	4613      	mov	r3, r2
 800b242:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b248:	2300      	movs	r3, #0
 800b24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b252:	787c      	ldrb	r4, [r7, #1]
 800b254:	78ba      	ldrb	r2, [r7, #2]
 800b256:	78f9      	ldrb	r1, [r7, #3]
 800b258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b25c:	9303      	str	r3, [sp, #12]
 800b25e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b260:	9302      	str	r3, [sp, #8]
 800b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b264:	9301      	str	r3, [sp, #4]
 800b266:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	4623      	mov	r3, r4
 800b26e:	f7f7 fa4b 	bl	8002708 <HAL_HCD_HC_SubmitRequest>
 800b272:	4603      	mov	r3, r0
 800b274:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b276:	7bfb      	ldrb	r3, [r7, #15]
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 f86f 	bl	800b35c <USBH_Get_USB_Status>
 800b27e:	4603      	mov	r3, r0
 800b280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b282:	7bbb      	ldrb	r3, [r7, #14]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd90      	pop	{r4, r7, pc}

0800b28c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b29e:	78fa      	ldrb	r2, [r7, #3]
 800b2a0:	4611      	mov	r1, r2
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7f7 fd2c 	bl	8002d00 <HAL_HCD_HC_GetURBState>
 800b2a8:	4603      	mov	r3, r0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d103      	bne.n	800b2d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b2c8:	78fb      	ldrb	r3, [r7, #3]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f000 f872 	bl	800b3b4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b2d0:	20c8      	movs	r0, #200	; 0xc8
 800b2d2:	f7f6 fd3f 	bl	8001d54 <HAL_Delay>
  return USBH_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	70fb      	strb	r3, [r7, #3]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b2f8:	78fa      	ldrb	r2, [r7, #3]
 800b2fa:	68f9      	ldr	r1, [r7, #12]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	011b      	lsls	r3, r3, #4
 800b300:	1a9b      	subs	r3, r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	440b      	add	r3, r1
 800b306:	3317      	adds	r3, #23
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00a      	beq.n	800b324 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b30e:	78fa      	ldrb	r2, [r7, #3]
 800b310:	68f9      	ldr	r1, [r7, #12]
 800b312:	4613      	mov	r3, r2
 800b314:	011b      	lsls	r3, r3, #4
 800b316:	1a9b      	subs	r3, r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	440b      	add	r3, r1
 800b31c:	333c      	adds	r3, #60	; 0x3c
 800b31e:	78ba      	ldrb	r2, [r7, #2]
 800b320:	701a      	strb	r2, [r3, #0]
 800b322:	e009      	b.n	800b338 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b324:	78fa      	ldrb	r2, [r7, #3]
 800b326:	68f9      	ldr	r1, [r7, #12]
 800b328:	4613      	mov	r3, r2
 800b32a:	011b      	lsls	r3, r3, #4
 800b32c:	1a9b      	subs	r3, r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	440b      	add	r3, r1
 800b332:	333d      	adds	r3, #61	; 0x3d
 800b334:	78ba      	ldrb	r2, [r7, #2]
 800b336:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7f6 fd00 	bl	8001d54 <HAL_Delay>
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b36a:	79fb      	ldrb	r3, [r7, #7]
 800b36c:	2b03      	cmp	r3, #3
 800b36e:	d817      	bhi.n	800b3a0 <USBH_Get_USB_Status+0x44>
 800b370:	a201      	add	r2, pc, #4	; (adr r2, 800b378 <USBH_Get_USB_Status+0x1c>)
 800b372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b376:	bf00      	nop
 800b378:	0800b389 	.word	0x0800b389
 800b37c:	0800b38f 	.word	0x0800b38f
 800b380:	0800b395 	.word	0x0800b395
 800b384:	0800b39b 	.word	0x0800b39b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b388:	2300      	movs	r3, #0
 800b38a:	73fb      	strb	r3, [r7, #15]
    break;
 800b38c:	e00b      	b.n	800b3a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b38e:	2302      	movs	r3, #2
 800b390:	73fb      	strb	r3, [r7, #15]
    break;
 800b392:	e008      	b.n	800b3a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b394:	2301      	movs	r3, #1
 800b396:	73fb      	strb	r3, [r7, #15]
    break;
 800b398:	e005      	b.n	800b3a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b39a:	2302      	movs	r3, #2
 800b39c:	73fb      	strb	r3, [r7, #15]
    break;
 800b39e:	e002      	b.n	800b3a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a4:	bf00      	nop
  }
  return usb_status;
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b3c2:	79fb      	ldrb	r3, [r7, #7]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d102      	bne.n	800b3ce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	73fb      	strb	r3, [r7, #15]
 800b3cc:	e001      	b.n	800b3d2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	4803      	ldr	r0, [pc, #12]	; (800b3e8 <MX_DriverVbusFS+0x34>)
 800b3da:	f7f7 f81f 	bl	800241c <HAL_GPIO_WritePin>
}
 800b3de:	bf00      	nop
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	40020800 	.word	0x40020800

0800b3ec <malloc>:
 800b3ec:	4b02      	ldr	r3, [pc, #8]	; (800b3f8 <malloc+0xc>)
 800b3ee:	4601      	mov	r1, r0
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	f000 b82b 	b.w	800b44c <_malloc_r>
 800b3f6:	bf00      	nop
 800b3f8:	20000084 	.word	0x20000084

0800b3fc <free>:
 800b3fc:	4b02      	ldr	r3, [pc, #8]	; (800b408 <free+0xc>)
 800b3fe:	4601      	mov	r1, r0
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	f001 bd47 	b.w	800ce94 <_free_r>
 800b406:	bf00      	nop
 800b408:	20000084 	.word	0x20000084

0800b40c <sbrk_aligned>:
 800b40c:	b570      	push	{r4, r5, r6, lr}
 800b40e:	4e0e      	ldr	r6, [pc, #56]	; (800b448 <sbrk_aligned+0x3c>)
 800b410:	460c      	mov	r4, r1
 800b412:	6831      	ldr	r1, [r6, #0]
 800b414:	4605      	mov	r5, r0
 800b416:	b911      	cbnz	r1, 800b41e <sbrk_aligned+0x12>
 800b418:	f000 fe70 	bl	800c0fc <_sbrk_r>
 800b41c:	6030      	str	r0, [r6, #0]
 800b41e:	4621      	mov	r1, r4
 800b420:	4628      	mov	r0, r5
 800b422:	f000 fe6b 	bl	800c0fc <_sbrk_r>
 800b426:	1c43      	adds	r3, r0, #1
 800b428:	d00a      	beq.n	800b440 <sbrk_aligned+0x34>
 800b42a:	1cc4      	adds	r4, r0, #3
 800b42c:	f024 0403 	bic.w	r4, r4, #3
 800b430:	42a0      	cmp	r0, r4
 800b432:	d007      	beq.n	800b444 <sbrk_aligned+0x38>
 800b434:	1a21      	subs	r1, r4, r0
 800b436:	4628      	mov	r0, r5
 800b438:	f000 fe60 	bl	800c0fc <_sbrk_r>
 800b43c:	3001      	adds	r0, #1
 800b43e:	d101      	bne.n	800b444 <sbrk_aligned+0x38>
 800b440:	f04f 34ff 	mov.w	r4, #4294967295
 800b444:	4620      	mov	r0, r4
 800b446:	bd70      	pop	{r4, r5, r6, pc}
 800b448:	20000b3c 	.word	0x20000b3c

0800b44c <_malloc_r>:
 800b44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b450:	1ccd      	adds	r5, r1, #3
 800b452:	f025 0503 	bic.w	r5, r5, #3
 800b456:	3508      	adds	r5, #8
 800b458:	2d0c      	cmp	r5, #12
 800b45a:	bf38      	it	cc
 800b45c:	250c      	movcc	r5, #12
 800b45e:	2d00      	cmp	r5, #0
 800b460:	4607      	mov	r7, r0
 800b462:	db01      	blt.n	800b468 <_malloc_r+0x1c>
 800b464:	42a9      	cmp	r1, r5
 800b466:	d905      	bls.n	800b474 <_malloc_r+0x28>
 800b468:	230c      	movs	r3, #12
 800b46a:	603b      	str	r3, [r7, #0]
 800b46c:	2600      	movs	r6, #0
 800b46e:	4630      	mov	r0, r6
 800b470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b474:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b548 <_malloc_r+0xfc>
 800b478:	f000 f868 	bl	800b54c <__malloc_lock>
 800b47c:	f8d8 3000 	ldr.w	r3, [r8]
 800b480:	461c      	mov	r4, r3
 800b482:	bb5c      	cbnz	r4, 800b4dc <_malloc_r+0x90>
 800b484:	4629      	mov	r1, r5
 800b486:	4638      	mov	r0, r7
 800b488:	f7ff ffc0 	bl	800b40c <sbrk_aligned>
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	4604      	mov	r4, r0
 800b490:	d155      	bne.n	800b53e <_malloc_r+0xf2>
 800b492:	f8d8 4000 	ldr.w	r4, [r8]
 800b496:	4626      	mov	r6, r4
 800b498:	2e00      	cmp	r6, #0
 800b49a:	d145      	bne.n	800b528 <_malloc_r+0xdc>
 800b49c:	2c00      	cmp	r4, #0
 800b49e:	d048      	beq.n	800b532 <_malloc_r+0xe6>
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	4631      	mov	r1, r6
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	eb04 0903 	add.w	r9, r4, r3
 800b4aa:	f000 fe27 	bl	800c0fc <_sbrk_r>
 800b4ae:	4581      	cmp	r9, r0
 800b4b0:	d13f      	bne.n	800b532 <_malloc_r+0xe6>
 800b4b2:	6821      	ldr	r1, [r4, #0]
 800b4b4:	1a6d      	subs	r5, r5, r1
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	f7ff ffa7 	bl	800b40c <sbrk_aligned>
 800b4be:	3001      	adds	r0, #1
 800b4c0:	d037      	beq.n	800b532 <_malloc_r+0xe6>
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	442b      	add	r3, r5
 800b4c6:	6023      	str	r3, [r4, #0]
 800b4c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d038      	beq.n	800b542 <_malloc_r+0xf6>
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	42a2      	cmp	r2, r4
 800b4d4:	d12b      	bne.n	800b52e <_malloc_r+0xe2>
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	605a      	str	r2, [r3, #4]
 800b4da:	e00f      	b.n	800b4fc <_malloc_r+0xb0>
 800b4dc:	6822      	ldr	r2, [r4, #0]
 800b4de:	1b52      	subs	r2, r2, r5
 800b4e0:	d41f      	bmi.n	800b522 <_malloc_r+0xd6>
 800b4e2:	2a0b      	cmp	r2, #11
 800b4e4:	d917      	bls.n	800b516 <_malloc_r+0xca>
 800b4e6:	1961      	adds	r1, r4, r5
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	6025      	str	r5, [r4, #0]
 800b4ec:	bf18      	it	ne
 800b4ee:	6059      	strne	r1, [r3, #4]
 800b4f0:	6863      	ldr	r3, [r4, #4]
 800b4f2:	bf08      	it	eq
 800b4f4:	f8c8 1000 	streq.w	r1, [r8]
 800b4f8:	5162      	str	r2, [r4, r5]
 800b4fa:	604b      	str	r3, [r1, #4]
 800b4fc:	4638      	mov	r0, r7
 800b4fe:	f104 060b 	add.w	r6, r4, #11
 800b502:	f000 f829 	bl	800b558 <__malloc_unlock>
 800b506:	f026 0607 	bic.w	r6, r6, #7
 800b50a:	1d23      	adds	r3, r4, #4
 800b50c:	1af2      	subs	r2, r6, r3
 800b50e:	d0ae      	beq.n	800b46e <_malloc_r+0x22>
 800b510:	1b9b      	subs	r3, r3, r6
 800b512:	50a3      	str	r3, [r4, r2]
 800b514:	e7ab      	b.n	800b46e <_malloc_r+0x22>
 800b516:	42a3      	cmp	r3, r4
 800b518:	6862      	ldr	r2, [r4, #4]
 800b51a:	d1dd      	bne.n	800b4d8 <_malloc_r+0x8c>
 800b51c:	f8c8 2000 	str.w	r2, [r8]
 800b520:	e7ec      	b.n	800b4fc <_malloc_r+0xb0>
 800b522:	4623      	mov	r3, r4
 800b524:	6864      	ldr	r4, [r4, #4]
 800b526:	e7ac      	b.n	800b482 <_malloc_r+0x36>
 800b528:	4634      	mov	r4, r6
 800b52a:	6876      	ldr	r6, [r6, #4]
 800b52c:	e7b4      	b.n	800b498 <_malloc_r+0x4c>
 800b52e:	4613      	mov	r3, r2
 800b530:	e7cc      	b.n	800b4cc <_malloc_r+0x80>
 800b532:	230c      	movs	r3, #12
 800b534:	603b      	str	r3, [r7, #0]
 800b536:	4638      	mov	r0, r7
 800b538:	f000 f80e 	bl	800b558 <__malloc_unlock>
 800b53c:	e797      	b.n	800b46e <_malloc_r+0x22>
 800b53e:	6025      	str	r5, [r4, #0]
 800b540:	e7dc      	b.n	800b4fc <_malloc_r+0xb0>
 800b542:	605b      	str	r3, [r3, #4]
 800b544:	deff      	udf	#255	; 0xff
 800b546:	bf00      	nop
 800b548:	20000b38 	.word	0x20000b38

0800b54c <__malloc_lock>:
 800b54c:	4801      	ldr	r0, [pc, #4]	; (800b554 <__malloc_lock+0x8>)
 800b54e:	f000 be22 	b.w	800c196 <__retarget_lock_acquire_recursive>
 800b552:	bf00      	nop
 800b554:	20000c80 	.word	0x20000c80

0800b558 <__malloc_unlock>:
 800b558:	4801      	ldr	r0, [pc, #4]	; (800b560 <__malloc_unlock+0x8>)
 800b55a:	f000 be1d 	b.w	800c198 <__retarget_lock_release_recursive>
 800b55e:	bf00      	nop
 800b560:	20000c80 	.word	0x20000c80

0800b564 <__cvt>:
 800b564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b568:	ec55 4b10 	vmov	r4, r5, d0
 800b56c:	2d00      	cmp	r5, #0
 800b56e:	460e      	mov	r6, r1
 800b570:	4619      	mov	r1, r3
 800b572:	462b      	mov	r3, r5
 800b574:	bfbb      	ittet	lt
 800b576:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b57a:	461d      	movlt	r5, r3
 800b57c:	2300      	movge	r3, #0
 800b57e:	232d      	movlt	r3, #45	; 0x2d
 800b580:	700b      	strb	r3, [r1, #0]
 800b582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b584:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b588:	4691      	mov	r9, r2
 800b58a:	f023 0820 	bic.w	r8, r3, #32
 800b58e:	bfbc      	itt	lt
 800b590:	4622      	movlt	r2, r4
 800b592:	4614      	movlt	r4, r2
 800b594:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b598:	d005      	beq.n	800b5a6 <__cvt+0x42>
 800b59a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b59e:	d100      	bne.n	800b5a2 <__cvt+0x3e>
 800b5a0:	3601      	adds	r6, #1
 800b5a2:	2102      	movs	r1, #2
 800b5a4:	e000      	b.n	800b5a8 <__cvt+0x44>
 800b5a6:	2103      	movs	r1, #3
 800b5a8:	ab03      	add	r3, sp, #12
 800b5aa:	9301      	str	r3, [sp, #4]
 800b5ac:	ab02      	add	r3, sp, #8
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	ec45 4b10 	vmov	d0, r4, r5
 800b5b4:	4653      	mov	r3, sl
 800b5b6:	4632      	mov	r2, r6
 800b5b8:	f000 fe7a 	bl	800c2b0 <_dtoa_r>
 800b5bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b5c0:	4607      	mov	r7, r0
 800b5c2:	d102      	bne.n	800b5ca <__cvt+0x66>
 800b5c4:	f019 0f01 	tst.w	r9, #1
 800b5c8:	d022      	beq.n	800b610 <__cvt+0xac>
 800b5ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b5ce:	eb07 0906 	add.w	r9, r7, r6
 800b5d2:	d110      	bne.n	800b5f6 <__cvt+0x92>
 800b5d4:	783b      	ldrb	r3, [r7, #0]
 800b5d6:	2b30      	cmp	r3, #48	; 0x30
 800b5d8:	d10a      	bne.n	800b5f0 <__cvt+0x8c>
 800b5da:	2200      	movs	r2, #0
 800b5dc:	2300      	movs	r3, #0
 800b5de:	4620      	mov	r0, r4
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	f7f5 fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5e6:	b918      	cbnz	r0, 800b5f0 <__cvt+0x8c>
 800b5e8:	f1c6 0601 	rsb	r6, r6, #1
 800b5ec:	f8ca 6000 	str.w	r6, [sl]
 800b5f0:	f8da 3000 	ldr.w	r3, [sl]
 800b5f4:	4499      	add	r9, r3
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	f7f5 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 800b602:	b108      	cbz	r0, 800b608 <__cvt+0xa4>
 800b604:	f8cd 900c 	str.w	r9, [sp, #12]
 800b608:	2230      	movs	r2, #48	; 0x30
 800b60a:	9b03      	ldr	r3, [sp, #12]
 800b60c:	454b      	cmp	r3, r9
 800b60e:	d307      	bcc.n	800b620 <__cvt+0xbc>
 800b610:	9b03      	ldr	r3, [sp, #12]
 800b612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b614:	1bdb      	subs	r3, r3, r7
 800b616:	4638      	mov	r0, r7
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	b004      	add	sp, #16
 800b61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b620:	1c59      	adds	r1, r3, #1
 800b622:	9103      	str	r1, [sp, #12]
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	e7f0      	b.n	800b60a <__cvt+0xa6>

0800b628 <__exponent>:
 800b628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b62a:	4603      	mov	r3, r0
 800b62c:	2900      	cmp	r1, #0
 800b62e:	bfb8      	it	lt
 800b630:	4249      	neglt	r1, r1
 800b632:	f803 2b02 	strb.w	r2, [r3], #2
 800b636:	bfb4      	ite	lt
 800b638:	222d      	movlt	r2, #45	; 0x2d
 800b63a:	222b      	movge	r2, #43	; 0x2b
 800b63c:	2909      	cmp	r1, #9
 800b63e:	7042      	strb	r2, [r0, #1]
 800b640:	dd2a      	ble.n	800b698 <__exponent+0x70>
 800b642:	f10d 0207 	add.w	r2, sp, #7
 800b646:	4617      	mov	r7, r2
 800b648:	260a      	movs	r6, #10
 800b64a:	4694      	mov	ip, r2
 800b64c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b650:	fb06 1415 	mls	r4, r6, r5, r1
 800b654:	3430      	adds	r4, #48	; 0x30
 800b656:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b65a:	460c      	mov	r4, r1
 800b65c:	2c63      	cmp	r4, #99	; 0x63
 800b65e:	f102 32ff 	add.w	r2, r2, #4294967295
 800b662:	4629      	mov	r1, r5
 800b664:	dcf1      	bgt.n	800b64a <__exponent+0x22>
 800b666:	3130      	adds	r1, #48	; 0x30
 800b668:	f1ac 0402 	sub.w	r4, ip, #2
 800b66c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b670:	1c41      	adds	r1, r0, #1
 800b672:	4622      	mov	r2, r4
 800b674:	42ba      	cmp	r2, r7
 800b676:	d30a      	bcc.n	800b68e <__exponent+0x66>
 800b678:	f10d 0209 	add.w	r2, sp, #9
 800b67c:	eba2 020c 	sub.w	r2, r2, ip
 800b680:	42bc      	cmp	r4, r7
 800b682:	bf88      	it	hi
 800b684:	2200      	movhi	r2, #0
 800b686:	4413      	add	r3, r2
 800b688:	1a18      	subs	r0, r3, r0
 800b68a:	b003      	add	sp, #12
 800b68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b68e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b692:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b696:	e7ed      	b.n	800b674 <__exponent+0x4c>
 800b698:	2330      	movs	r3, #48	; 0x30
 800b69a:	3130      	adds	r1, #48	; 0x30
 800b69c:	7083      	strb	r3, [r0, #2]
 800b69e:	70c1      	strb	r1, [r0, #3]
 800b6a0:	1d03      	adds	r3, r0, #4
 800b6a2:	e7f1      	b.n	800b688 <__exponent+0x60>

0800b6a4 <_printf_float>:
 800b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a8:	ed2d 8b02 	vpush	{d8}
 800b6ac:	b08d      	sub	sp, #52	; 0x34
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b6b4:	4616      	mov	r6, r2
 800b6b6:	461f      	mov	r7, r3
 800b6b8:	4605      	mov	r5, r0
 800b6ba:	f000 fce7 	bl	800c08c <_localeconv_r>
 800b6be:	f8d0 a000 	ldr.w	sl, [r0]
 800b6c2:	4650      	mov	r0, sl
 800b6c4:	f7f4 fdd4 	bl	8000270 <strlen>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	9305      	str	r3, [sp, #20]
 800b6d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b6d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b6d8:	3307      	adds	r3, #7
 800b6da:	f023 0307 	bic.w	r3, r3, #7
 800b6de:	f103 0208 	add.w	r2, r3, #8
 800b6e2:	f8c8 2000 	str.w	r2, [r8]
 800b6e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6ee:	9307      	str	r3, [sp, #28]
 800b6f0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b6f4:	ee08 0a10 	vmov	s16, r0
 800b6f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b6fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b700:	4b9e      	ldr	r3, [pc, #632]	; (800b97c <_printf_float+0x2d8>)
 800b702:	f04f 32ff 	mov.w	r2, #4294967295
 800b706:	f7f5 fa11 	bl	8000b2c <__aeabi_dcmpun>
 800b70a:	bb88      	cbnz	r0, 800b770 <_printf_float+0xcc>
 800b70c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b710:	4b9a      	ldr	r3, [pc, #616]	; (800b97c <_printf_float+0x2d8>)
 800b712:	f04f 32ff 	mov.w	r2, #4294967295
 800b716:	f7f5 f9eb 	bl	8000af0 <__aeabi_dcmple>
 800b71a:	bb48      	cbnz	r0, 800b770 <_printf_float+0xcc>
 800b71c:	2200      	movs	r2, #0
 800b71e:	2300      	movs	r3, #0
 800b720:	4640      	mov	r0, r8
 800b722:	4649      	mov	r1, r9
 800b724:	f7f5 f9da 	bl	8000adc <__aeabi_dcmplt>
 800b728:	b110      	cbz	r0, 800b730 <_printf_float+0x8c>
 800b72a:	232d      	movs	r3, #45	; 0x2d
 800b72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b730:	4a93      	ldr	r2, [pc, #588]	; (800b980 <_printf_float+0x2dc>)
 800b732:	4b94      	ldr	r3, [pc, #592]	; (800b984 <_printf_float+0x2e0>)
 800b734:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b738:	bf94      	ite	ls
 800b73a:	4690      	movls	r8, r2
 800b73c:	4698      	movhi	r8, r3
 800b73e:	2303      	movs	r3, #3
 800b740:	6123      	str	r3, [r4, #16]
 800b742:	9b05      	ldr	r3, [sp, #20]
 800b744:	f023 0304 	bic.w	r3, r3, #4
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	f04f 0900 	mov.w	r9, #0
 800b74e:	9700      	str	r7, [sp, #0]
 800b750:	4633      	mov	r3, r6
 800b752:	aa0b      	add	r2, sp, #44	; 0x2c
 800b754:	4621      	mov	r1, r4
 800b756:	4628      	mov	r0, r5
 800b758:	f000 f9da 	bl	800bb10 <_printf_common>
 800b75c:	3001      	adds	r0, #1
 800b75e:	f040 8090 	bne.w	800b882 <_printf_float+0x1de>
 800b762:	f04f 30ff 	mov.w	r0, #4294967295
 800b766:	b00d      	add	sp, #52	; 0x34
 800b768:	ecbd 8b02 	vpop	{d8}
 800b76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b770:	4642      	mov	r2, r8
 800b772:	464b      	mov	r3, r9
 800b774:	4640      	mov	r0, r8
 800b776:	4649      	mov	r1, r9
 800b778:	f7f5 f9d8 	bl	8000b2c <__aeabi_dcmpun>
 800b77c:	b140      	cbz	r0, 800b790 <_printf_float+0xec>
 800b77e:	464b      	mov	r3, r9
 800b780:	2b00      	cmp	r3, #0
 800b782:	bfbc      	itt	lt
 800b784:	232d      	movlt	r3, #45	; 0x2d
 800b786:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b78a:	4a7f      	ldr	r2, [pc, #508]	; (800b988 <_printf_float+0x2e4>)
 800b78c:	4b7f      	ldr	r3, [pc, #508]	; (800b98c <_printf_float+0x2e8>)
 800b78e:	e7d1      	b.n	800b734 <_printf_float+0x90>
 800b790:	6863      	ldr	r3, [r4, #4]
 800b792:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b796:	9206      	str	r2, [sp, #24]
 800b798:	1c5a      	adds	r2, r3, #1
 800b79a:	d13f      	bne.n	800b81c <_printf_float+0x178>
 800b79c:	2306      	movs	r3, #6
 800b79e:	6063      	str	r3, [r4, #4]
 800b7a0:	9b05      	ldr	r3, [sp, #20]
 800b7a2:	6861      	ldr	r1, [r4, #4]
 800b7a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	9303      	str	r3, [sp, #12]
 800b7ac:	ab0a      	add	r3, sp, #40	; 0x28
 800b7ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b7b2:	ab09      	add	r3, sp, #36	; 0x24
 800b7b4:	ec49 8b10 	vmov	d0, r8, r9
 800b7b8:	9300      	str	r3, [sp, #0]
 800b7ba:	6022      	str	r2, [r4, #0]
 800b7bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f7ff fecf 	bl	800b564 <__cvt>
 800b7c6:	9b06      	ldr	r3, [sp, #24]
 800b7c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7ca:	2b47      	cmp	r3, #71	; 0x47
 800b7cc:	4680      	mov	r8, r0
 800b7ce:	d108      	bne.n	800b7e2 <_printf_float+0x13e>
 800b7d0:	1cc8      	adds	r0, r1, #3
 800b7d2:	db02      	blt.n	800b7da <_printf_float+0x136>
 800b7d4:	6863      	ldr	r3, [r4, #4]
 800b7d6:	4299      	cmp	r1, r3
 800b7d8:	dd41      	ble.n	800b85e <_printf_float+0x1ba>
 800b7da:	f1ab 0302 	sub.w	r3, fp, #2
 800b7de:	fa5f fb83 	uxtb.w	fp, r3
 800b7e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b7e6:	d820      	bhi.n	800b82a <_printf_float+0x186>
 800b7e8:	3901      	subs	r1, #1
 800b7ea:	465a      	mov	r2, fp
 800b7ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b7f0:	9109      	str	r1, [sp, #36]	; 0x24
 800b7f2:	f7ff ff19 	bl	800b628 <__exponent>
 800b7f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7f8:	1813      	adds	r3, r2, r0
 800b7fa:	2a01      	cmp	r2, #1
 800b7fc:	4681      	mov	r9, r0
 800b7fe:	6123      	str	r3, [r4, #16]
 800b800:	dc02      	bgt.n	800b808 <_printf_float+0x164>
 800b802:	6822      	ldr	r2, [r4, #0]
 800b804:	07d2      	lsls	r2, r2, #31
 800b806:	d501      	bpl.n	800b80c <_printf_float+0x168>
 800b808:	3301      	adds	r3, #1
 800b80a:	6123      	str	r3, [r4, #16]
 800b80c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b810:	2b00      	cmp	r3, #0
 800b812:	d09c      	beq.n	800b74e <_printf_float+0xaa>
 800b814:	232d      	movs	r3, #45	; 0x2d
 800b816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b81a:	e798      	b.n	800b74e <_printf_float+0xaa>
 800b81c:	9a06      	ldr	r2, [sp, #24]
 800b81e:	2a47      	cmp	r2, #71	; 0x47
 800b820:	d1be      	bne.n	800b7a0 <_printf_float+0xfc>
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1bc      	bne.n	800b7a0 <_printf_float+0xfc>
 800b826:	2301      	movs	r3, #1
 800b828:	e7b9      	b.n	800b79e <_printf_float+0xfa>
 800b82a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b82e:	d118      	bne.n	800b862 <_printf_float+0x1be>
 800b830:	2900      	cmp	r1, #0
 800b832:	6863      	ldr	r3, [r4, #4]
 800b834:	dd0b      	ble.n	800b84e <_printf_float+0x1aa>
 800b836:	6121      	str	r1, [r4, #16]
 800b838:	b913      	cbnz	r3, 800b840 <_printf_float+0x19c>
 800b83a:	6822      	ldr	r2, [r4, #0]
 800b83c:	07d0      	lsls	r0, r2, #31
 800b83e:	d502      	bpl.n	800b846 <_printf_float+0x1a2>
 800b840:	3301      	adds	r3, #1
 800b842:	440b      	add	r3, r1
 800b844:	6123      	str	r3, [r4, #16]
 800b846:	65a1      	str	r1, [r4, #88]	; 0x58
 800b848:	f04f 0900 	mov.w	r9, #0
 800b84c:	e7de      	b.n	800b80c <_printf_float+0x168>
 800b84e:	b913      	cbnz	r3, 800b856 <_printf_float+0x1b2>
 800b850:	6822      	ldr	r2, [r4, #0]
 800b852:	07d2      	lsls	r2, r2, #31
 800b854:	d501      	bpl.n	800b85a <_printf_float+0x1b6>
 800b856:	3302      	adds	r3, #2
 800b858:	e7f4      	b.n	800b844 <_printf_float+0x1a0>
 800b85a:	2301      	movs	r3, #1
 800b85c:	e7f2      	b.n	800b844 <_printf_float+0x1a0>
 800b85e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b864:	4299      	cmp	r1, r3
 800b866:	db05      	blt.n	800b874 <_printf_float+0x1d0>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	6121      	str	r1, [r4, #16]
 800b86c:	07d8      	lsls	r0, r3, #31
 800b86e:	d5ea      	bpl.n	800b846 <_printf_float+0x1a2>
 800b870:	1c4b      	adds	r3, r1, #1
 800b872:	e7e7      	b.n	800b844 <_printf_float+0x1a0>
 800b874:	2900      	cmp	r1, #0
 800b876:	bfd4      	ite	le
 800b878:	f1c1 0202 	rsble	r2, r1, #2
 800b87c:	2201      	movgt	r2, #1
 800b87e:	4413      	add	r3, r2
 800b880:	e7e0      	b.n	800b844 <_printf_float+0x1a0>
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	055a      	lsls	r2, r3, #21
 800b886:	d407      	bmi.n	800b898 <_printf_float+0x1f4>
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	4642      	mov	r2, r8
 800b88c:	4631      	mov	r1, r6
 800b88e:	4628      	mov	r0, r5
 800b890:	47b8      	blx	r7
 800b892:	3001      	adds	r0, #1
 800b894:	d12c      	bne.n	800b8f0 <_printf_float+0x24c>
 800b896:	e764      	b.n	800b762 <_printf_float+0xbe>
 800b898:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b89c:	f240 80e0 	bls.w	800ba60 <_printf_float+0x3bc>
 800b8a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f7f5 f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d034      	beq.n	800b91a <_printf_float+0x276>
 800b8b0:	4a37      	ldr	r2, [pc, #220]	; (800b990 <_printf_float+0x2ec>)
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	47b8      	blx	r7
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	f43f af51 	beq.w	800b762 <_printf_float+0xbe>
 800b8c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	db02      	blt.n	800b8ce <_printf_float+0x22a>
 800b8c8:	6823      	ldr	r3, [r4, #0]
 800b8ca:	07d8      	lsls	r0, r3, #31
 800b8cc:	d510      	bpl.n	800b8f0 <_printf_float+0x24c>
 800b8ce:	ee18 3a10 	vmov	r3, s16
 800b8d2:	4652      	mov	r2, sl
 800b8d4:	4631      	mov	r1, r6
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	47b8      	blx	r7
 800b8da:	3001      	adds	r0, #1
 800b8dc:	f43f af41 	beq.w	800b762 <_printf_float+0xbe>
 800b8e0:	f04f 0800 	mov.w	r8, #0
 800b8e4:	f104 091a 	add.w	r9, r4, #26
 800b8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	4543      	cmp	r3, r8
 800b8ee:	dc09      	bgt.n	800b904 <_printf_float+0x260>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	079b      	lsls	r3, r3, #30
 800b8f4:	f100 8107 	bmi.w	800bb06 <_printf_float+0x462>
 800b8f8:	68e0      	ldr	r0, [r4, #12]
 800b8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8fc:	4298      	cmp	r0, r3
 800b8fe:	bfb8      	it	lt
 800b900:	4618      	movlt	r0, r3
 800b902:	e730      	b.n	800b766 <_printf_float+0xc2>
 800b904:	2301      	movs	r3, #1
 800b906:	464a      	mov	r2, r9
 800b908:	4631      	mov	r1, r6
 800b90a:	4628      	mov	r0, r5
 800b90c:	47b8      	blx	r7
 800b90e:	3001      	adds	r0, #1
 800b910:	f43f af27 	beq.w	800b762 <_printf_float+0xbe>
 800b914:	f108 0801 	add.w	r8, r8, #1
 800b918:	e7e6      	b.n	800b8e8 <_printf_float+0x244>
 800b91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	dc39      	bgt.n	800b994 <_printf_float+0x2f0>
 800b920:	4a1b      	ldr	r2, [pc, #108]	; (800b990 <_printf_float+0x2ec>)
 800b922:	2301      	movs	r3, #1
 800b924:	4631      	mov	r1, r6
 800b926:	4628      	mov	r0, r5
 800b928:	47b8      	blx	r7
 800b92a:	3001      	adds	r0, #1
 800b92c:	f43f af19 	beq.w	800b762 <_printf_float+0xbe>
 800b930:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b934:	4313      	orrs	r3, r2
 800b936:	d102      	bne.n	800b93e <_printf_float+0x29a>
 800b938:	6823      	ldr	r3, [r4, #0]
 800b93a:	07d9      	lsls	r1, r3, #31
 800b93c:	d5d8      	bpl.n	800b8f0 <_printf_float+0x24c>
 800b93e:	ee18 3a10 	vmov	r3, s16
 800b942:	4652      	mov	r2, sl
 800b944:	4631      	mov	r1, r6
 800b946:	4628      	mov	r0, r5
 800b948:	47b8      	blx	r7
 800b94a:	3001      	adds	r0, #1
 800b94c:	f43f af09 	beq.w	800b762 <_printf_float+0xbe>
 800b950:	f04f 0900 	mov.w	r9, #0
 800b954:	f104 0a1a 	add.w	sl, r4, #26
 800b958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95a:	425b      	negs	r3, r3
 800b95c:	454b      	cmp	r3, r9
 800b95e:	dc01      	bgt.n	800b964 <_printf_float+0x2c0>
 800b960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b962:	e792      	b.n	800b88a <_printf_float+0x1e6>
 800b964:	2301      	movs	r3, #1
 800b966:	4652      	mov	r2, sl
 800b968:	4631      	mov	r1, r6
 800b96a:	4628      	mov	r0, r5
 800b96c:	47b8      	blx	r7
 800b96e:	3001      	adds	r0, #1
 800b970:	f43f aef7 	beq.w	800b762 <_printf_float+0xbe>
 800b974:	f109 0901 	add.w	r9, r9, #1
 800b978:	e7ee      	b.n	800b958 <_printf_float+0x2b4>
 800b97a:	bf00      	nop
 800b97c:	7fefffff 	.word	0x7fefffff
 800b980:	0800e200 	.word	0x0800e200
 800b984:	0800e204 	.word	0x0800e204
 800b988:	0800e208 	.word	0x0800e208
 800b98c:	0800e20c 	.word	0x0800e20c
 800b990:	0800e210 	.word	0x0800e210
 800b994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b998:	429a      	cmp	r2, r3
 800b99a:	bfa8      	it	ge
 800b99c:	461a      	movge	r2, r3
 800b99e:	2a00      	cmp	r2, #0
 800b9a0:	4691      	mov	r9, r2
 800b9a2:	dc37      	bgt.n	800ba14 <_printf_float+0x370>
 800b9a4:	f04f 0b00 	mov.w	fp, #0
 800b9a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9ac:	f104 021a 	add.w	r2, r4, #26
 800b9b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9b2:	9305      	str	r3, [sp, #20]
 800b9b4:	eba3 0309 	sub.w	r3, r3, r9
 800b9b8:	455b      	cmp	r3, fp
 800b9ba:	dc33      	bgt.n	800ba24 <_printf_float+0x380>
 800b9bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	db3b      	blt.n	800ba3c <_printf_float+0x398>
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	07da      	lsls	r2, r3, #31
 800b9c8:	d438      	bmi.n	800ba3c <_printf_float+0x398>
 800b9ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b9ce:	eba2 0903 	sub.w	r9, r2, r3
 800b9d2:	9b05      	ldr	r3, [sp, #20]
 800b9d4:	1ad2      	subs	r2, r2, r3
 800b9d6:	4591      	cmp	r9, r2
 800b9d8:	bfa8      	it	ge
 800b9da:	4691      	movge	r9, r2
 800b9dc:	f1b9 0f00 	cmp.w	r9, #0
 800b9e0:	dc35      	bgt.n	800ba4e <_printf_float+0x3aa>
 800b9e2:	f04f 0800 	mov.w	r8, #0
 800b9e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9ea:	f104 0a1a 	add.w	sl, r4, #26
 800b9ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9f2:	1a9b      	subs	r3, r3, r2
 800b9f4:	eba3 0309 	sub.w	r3, r3, r9
 800b9f8:	4543      	cmp	r3, r8
 800b9fa:	f77f af79 	ble.w	800b8f0 <_printf_float+0x24c>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	4652      	mov	r2, sl
 800ba02:	4631      	mov	r1, r6
 800ba04:	4628      	mov	r0, r5
 800ba06:	47b8      	blx	r7
 800ba08:	3001      	adds	r0, #1
 800ba0a:	f43f aeaa 	beq.w	800b762 <_printf_float+0xbe>
 800ba0e:	f108 0801 	add.w	r8, r8, #1
 800ba12:	e7ec      	b.n	800b9ee <_printf_float+0x34a>
 800ba14:	4613      	mov	r3, r2
 800ba16:	4631      	mov	r1, r6
 800ba18:	4642      	mov	r2, r8
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	47b8      	blx	r7
 800ba1e:	3001      	adds	r0, #1
 800ba20:	d1c0      	bne.n	800b9a4 <_printf_float+0x300>
 800ba22:	e69e      	b.n	800b762 <_printf_float+0xbe>
 800ba24:	2301      	movs	r3, #1
 800ba26:	4631      	mov	r1, r6
 800ba28:	4628      	mov	r0, r5
 800ba2a:	9205      	str	r2, [sp, #20]
 800ba2c:	47b8      	blx	r7
 800ba2e:	3001      	adds	r0, #1
 800ba30:	f43f ae97 	beq.w	800b762 <_printf_float+0xbe>
 800ba34:	9a05      	ldr	r2, [sp, #20]
 800ba36:	f10b 0b01 	add.w	fp, fp, #1
 800ba3a:	e7b9      	b.n	800b9b0 <_printf_float+0x30c>
 800ba3c:	ee18 3a10 	vmov	r3, s16
 800ba40:	4652      	mov	r2, sl
 800ba42:	4631      	mov	r1, r6
 800ba44:	4628      	mov	r0, r5
 800ba46:	47b8      	blx	r7
 800ba48:	3001      	adds	r0, #1
 800ba4a:	d1be      	bne.n	800b9ca <_printf_float+0x326>
 800ba4c:	e689      	b.n	800b762 <_printf_float+0xbe>
 800ba4e:	9a05      	ldr	r2, [sp, #20]
 800ba50:	464b      	mov	r3, r9
 800ba52:	4442      	add	r2, r8
 800ba54:	4631      	mov	r1, r6
 800ba56:	4628      	mov	r0, r5
 800ba58:	47b8      	blx	r7
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	d1c1      	bne.n	800b9e2 <_printf_float+0x33e>
 800ba5e:	e680      	b.n	800b762 <_printf_float+0xbe>
 800ba60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba62:	2a01      	cmp	r2, #1
 800ba64:	dc01      	bgt.n	800ba6a <_printf_float+0x3c6>
 800ba66:	07db      	lsls	r3, r3, #31
 800ba68:	d53a      	bpl.n	800bae0 <_printf_float+0x43c>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	4642      	mov	r2, r8
 800ba6e:	4631      	mov	r1, r6
 800ba70:	4628      	mov	r0, r5
 800ba72:	47b8      	blx	r7
 800ba74:	3001      	adds	r0, #1
 800ba76:	f43f ae74 	beq.w	800b762 <_printf_float+0xbe>
 800ba7a:	ee18 3a10 	vmov	r3, s16
 800ba7e:	4652      	mov	r2, sl
 800ba80:	4631      	mov	r1, r6
 800ba82:	4628      	mov	r0, r5
 800ba84:	47b8      	blx	r7
 800ba86:	3001      	adds	r0, #1
 800ba88:	f43f ae6b 	beq.w	800b762 <_printf_float+0xbe>
 800ba8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba90:	2200      	movs	r2, #0
 800ba92:	2300      	movs	r3, #0
 800ba94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ba98:	f7f5 f816 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba9c:	b9d8      	cbnz	r0, 800bad6 <_printf_float+0x432>
 800ba9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800baa2:	f108 0201 	add.w	r2, r8, #1
 800baa6:	4631      	mov	r1, r6
 800baa8:	4628      	mov	r0, r5
 800baaa:	47b8      	blx	r7
 800baac:	3001      	adds	r0, #1
 800baae:	d10e      	bne.n	800bace <_printf_float+0x42a>
 800bab0:	e657      	b.n	800b762 <_printf_float+0xbe>
 800bab2:	2301      	movs	r3, #1
 800bab4:	4652      	mov	r2, sl
 800bab6:	4631      	mov	r1, r6
 800bab8:	4628      	mov	r0, r5
 800baba:	47b8      	blx	r7
 800babc:	3001      	adds	r0, #1
 800babe:	f43f ae50 	beq.w	800b762 <_printf_float+0xbe>
 800bac2:	f108 0801 	add.w	r8, r8, #1
 800bac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bac8:	3b01      	subs	r3, #1
 800baca:	4543      	cmp	r3, r8
 800bacc:	dcf1      	bgt.n	800bab2 <_printf_float+0x40e>
 800bace:	464b      	mov	r3, r9
 800bad0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bad4:	e6da      	b.n	800b88c <_printf_float+0x1e8>
 800bad6:	f04f 0800 	mov.w	r8, #0
 800bada:	f104 0a1a 	add.w	sl, r4, #26
 800bade:	e7f2      	b.n	800bac6 <_printf_float+0x422>
 800bae0:	2301      	movs	r3, #1
 800bae2:	4642      	mov	r2, r8
 800bae4:	e7df      	b.n	800baa6 <_printf_float+0x402>
 800bae6:	2301      	movs	r3, #1
 800bae8:	464a      	mov	r2, r9
 800baea:	4631      	mov	r1, r6
 800baec:	4628      	mov	r0, r5
 800baee:	47b8      	blx	r7
 800baf0:	3001      	adds	r0, #1
 800baf2:	f43f ae36 	beq.w	800b762 <_printf_float+0xbe>
 800baf6:	f108 0801 	add.w	r8, r8, #1
 800bafa:	68e3      	ldr	r3, [r4, #12]
 800bafc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bafe:	1a5b      	subs	r3, r3, r1
 800bb00:	4543      	cmp	r3, r8
 800bb02:	dcf0      	bgt.n	800bae6 <_printf_float+0x442>
 800bb04:	e6f8      	b.n	800b8f8 <_printf_float+0x254>
 800bb06:	f04f 0800 	mov.w	r8, #0
 800bb0a:	f104 0919 	add.w	r9, r4, #25
 800bb0e:	e7f4      	b.n	800bafa <_printf_float+0x456>

0800bb10 <_printf_common>:
 800bb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb14:	4616      	mov	r6, r2
 800bb16:	4699      	mov	r9, r3
 800bb18:	688a      	ldr	r2, [r1, #8]
 800bb1a:	690b      	ldr	r3, [r1, #16]
 800bb1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb20:	4293      	cmp	r3, r2
 800bb22:	bfb8      	it	lt
 800bb24:	4613      	movlt	r3, r2
 800bb26:	6033      	str	r3, [r6, #0]
 800bb28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	460c      	mov	r4, r1
 800bb30:	b10a      	cbz	r2, 800bb36 <_printf_common+0x26>
 800bb32:	3301      	adds	r3, #1
 800bb34:	6033      	str	r3, [r6, #0]
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	0699      	lsls	r1, r3, #26
 800bb3a:	bf42      	ittt	mi
 800bb3c:	6833      	ldrmi	r3, [r6, #0]
 800bb3e:	3302      	addmi	r3, #2
 800bb40:	6033      	strmi	r3, [r6, #0]
 800bb42:	6825      	ldr	r5, [r4, #0]
 800bb44:	f015 0506 	ands.w	r5, r5, #6
 800bb48:	d106      	bne.n	800bb58 <_printf_common+0x48>
 800bb4a:	f104 0a19 	add.w	sl, r4, #25
 800bb4e:	68e3      	ldr	r3, [r4, #12]
 800bb50:	6832      	ldr	r2, [r6, #0]
 800bb52:	1a9b      	subs	r3, r3, r2
 800bb54:	42ab      	cmp	r3, r5
 800bb56:	dc26      	bgt.n	800bba6 <_printf_common+0x96>
 800bb58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb5c:	1e13      	subs	r3, r2, #0
 800bb5e:	6822      	ldr	r2, [r4, #0]
 800bb60:	bf18      	it	ne
 800bb62:	2301      	movne	r3, #1
 800bb64:	0692      	lsls	r2, r2, #26
 800bb66:	d42b      	bmi.n	800bbc0 <_printf_common+0xb0>
 800bb68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	4638      	mov	r0, r7
 800bb70:	47c0      	blx	r8
 800bb72:	3001      	adds	r0, #1
 800bb74:	d01e      	beq.n	800bbb4 <_printf_common+0xa4>
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	6922      	ldr	r2, [r4, #16]
 800bb7a:	f003 0306 	and.w	r3, r3, #6
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	bf02      	ittt	eq
 800bb82:	68e5      	ldreq	r5, [r4, #12]
 800bb84:	6833      	ldreq	r3, [r6, #0]
 800bb86:	1aed      	subeq	r5, r5, r3
 800bb88:	68a3      	ldr	r3, [r4, #8]
 800bb8a:	bf0c      	ite	eq
 800bb8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb90:	2500      	movne	r5, #0
 800bb92:	4293      	cmp	r3, r2
 800bb94:	bfc4      	itt	gt
 800bb96:	1a9b      	subgt	r3, r3, r2
 800bb98:	18ed      	addgt	r5, r5, r3
 800bb9a:	2600      	movs	r6, #0
 800bb9c:	341a      	adds	r4, #26
 800bb9e:	42b5      	cmp	r5, r6
 800bba0:	d11a      	bne.n	800bbd8 <_printf_common+0xc8>
 800bba2:	2000      	movs	r0, #0
 800bba4:	e008      	b.n	800bbb8 <_printf_common+0xa8>
 800bba6:	2301      	movs	r3, #1
 800bba8:	4652      	mov	r2, sl
 800bbaa:	4649      	mov	r1, r9
 800bbac:	4638      	mov	r0, r7
 800bbae:	47c0      	blx	r8
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d103      	bne.n	800bbbc <_printf_common+0xac>
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbbc:	3501      	adds	r5, #1
 800bbbe:	e7c6      	b.n	800bb4e <_printf_common+0x3e>
 800bbc0:	18e1      	adds	r1, r4, r3
 800bbc2:	1c5a      	adds	r2, r3, #1
 800bbc4:	2030      	movs	r0, #48	; 0x30
 800bbc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbca:	4422      	add	r2, r4
 800bbcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbd4:	3302      	adds	r3, #2
 800bbd6:	e7c7      	b.n	800bb68 <_printf_common+0x58>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	4622      	mov	r2, r4
 800bbdc:	4649      	mov	r1, r9
 800bbde:	4638      	mov	r0, r7
 800bbe0:	47c0      	blx	r8
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	d0e6      	beq.n	800bbb4 <_printf_common+0xa4>
 800bbe6:	3601      	adds	r6, #1
 800bbe8:	e7d9      	b.n	800bb9e <_printf_common+0x8e>
	...

0800bbec <_printf_i>:
 800bbec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf0:	7e0f      	ldrb	r7, [r1, #24]
 800bbf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbf4:	2f78      	cmp	r7, #120	; 0x78
 800bbf6:	4691      	mov	r9, r2
 800bbf8:	4680      	mov	r8, r0
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	469a      	mov	sl, r3
 800bbfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc02:	d807      	bhi.n	800bc14 <_printf_i+0x28>
 800bc04:	2f62      	cmp	r7, #98	; 0x62
 800bc06:	d80a      	bhi.n	800bc1e <_printf_i+0x32>
 800bc08:	2f00      	cmp	r7, #0
 800bc0a:	f000 80d4 	beq.w	800bdb6 <_printf_i+0x1ca>
 800bc0e:	2f58      	cmp	r7, #88	; 0x58
 800bc10:	f000 80c0 	beq.w	800bd94 <_printf_i+0x1a8>
 800bc14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc1c:	e03a      	b.n	800bc94 <_printf_i+0xa8>
 800bc1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc22:	2b15      	cmp	r3, #21
 800bc24:	d8f6      	bhi.n	800bc14 <_printf_i+0x28>
 800bc26:	a101      	add	r1, pc, #4	; (adr r1, 800bc2c <_printf_i+0x40>)
 800bc28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc2c:	0800bc85 	.word	0x0800bc85
 800bc30:	0800bc99 	.word	0x0800bc99
 800bc34:	0800bc15 	.word	0x0800bc15
 800bc38:	0800bc15 	.word	0x0800bc15
 800bc3c:	0800bc15 	.word	0x0800bc15
 800bc40:	0800bc15 	.word	0x0800bc15
 800bc44:	0800bc99 	.word	0x0800bc99
 800bc48:	0800bc15 	.word	0x0800bc15
 800bc4c:	0800bc15 	.word	0x0800bc15
 800bc50:	0800bc15 	.word	0x0800bc15
 800bc54:	0800bc15 	.word	0x0800bc15
 800bc58:	0800bd9d 	.word	0x0800bd9d
 800bc5c:	0800bcc5 	.word	0x0800bcc5
 800bc60:	0800bd57 	.word	0x0800bd57
 800bc64:	0800bc15 	.word	0x0800bc15
 800bc68:	0800bc15 	.word	0x0800bc15
 800bc6c:	0800bdbf 	.word	0x0800bdbf
 800bc70:	0800bc15 	.word	0x0800bc15
 800bc74:	0800bcc5 	.word	0x0800bcc5
 800bc78:	0800bc15 	.word	0x0800bc15
 800bc7c:	0800bc15 	.word	0x0800bc15
 800bc80:	0800bd5f 	.word	0x0800bd5f
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	1d1a      	adds	r2, r3, #4
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	602a      	str	r2, [r5, #0]
 800bc8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc94:	2301      	movs	r3, #1
 800bc96:	e09f      	b.n	800bdd8 <_printf_i+0x1ec>
 800bc98:	6820      	ldr	r0, [r4, #0]
 800bc9a:	682b      	ldr	r3, [r5, #0]
 800bc9c:	0607      	lsls	r7, r0, #24
 800bc9e:	f103 0104 	add.w	r1, r3, #4
 800bca2:	6029      	str	r1, [r5, #0]
 800bca4:	d501      	bpl.n	800bcaa <_printf_i+0xbe>
 800bca6:	681e      	ldr	r6, [r3, #0]
 800bca8:	e003      	b.n	800bcb2 <_printf_i+0xc6>
 800bcaa:	0646      	lsls	r6, r0, #25
 800bcac:	d5fb      	bpl.n	800bca6 <_printf_i+0xba>
 800bcae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bcb2:	2e00      	cmp	r6, #0
 800bcb4:	da03      	bge.n	800bcbe <_printf_i+0xd2>
 800bcb6:	232d      	movs	r3, #45	; 0x2d
 800bcb8:	4276      	negs	r6, r6
 800bcba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcbe:	485a      	ldr	r0, [pc, #360]	; (800be28 <_printf_i+0x23c>)
 800bcc0:	230a      	movs	r3, #10
 800bcc2:	e012      	b.n	800bcea <_printf_i+0xfe>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	6820      	ldr	r0, [r4, #0]
 800bcc8:	1d19      	adds	r1, r3, #4
 800bcca:	6029      	str	r1, [r5, #0]
 800bccc:	0605      	lsls	r5, r0, #24
 800bcce:	d501      	bpl.n	800bcd4 <_printf_i+0xe8>
 800bcd0:	681e      	ldr	r6, [r3, #0]
 800bcd2:	e002      	b.n	800bcda <_printf_i+0xee>
 800bcd4:	0641      	lsls	r1, r0, #25
 800bcd6:	d5fb      	bpl.n	800bcd0 <_printf_i+0xe4>
 800bcd8:	881e      	ldrh	r6, [r3, #0]
 800bcda:	4853      	ldr	r0, [pc, #332]	; (800be28 <_printf_i+0x23c>)
 800bcdc:	2f6f      	cmp	r7, #111	; 0x6f
 800bcde:	bf0c      	ite	eq
 800bce0:	2308      	moveq	r3, #8
 800bce2:	230a      	movne	r3, #10
 800bce4:	2100      	movs	r1, #0
 800bce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcea:	6865      	ldr	r5, [r4, #4]
 800bcec:	60a5      	str	r5, [r4, #8]
 800bcee:	2d00      	cmp	r5, #0
 800bcf0:	bfa2      	ittt	ge
 800bcf2:	6821      	ldrge	r1, [r4, #0]
 800bcf4:	f021 0104 	bicge.w	r1, r1, #4
 800bcf8:	6021      	strge	r1, [r4, #0]
 800bcfa:	b90e      	cbnz	r6, 800bd00 <_printf_i+0x114>
 800bcfc:	2d00      	cmp	r5, #0
 800bcfe:	d04b      	beq.n	800bd98 <_printf_i+0x1ac>
 800bd00:	4615      	mov	r5, r2
 800bd02:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd06:	fb03 6711 	mls	r7, r3, r1, r6
 800bd0a:	5dc7      	ldrb	r7, [r0, r7]
 800bd0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd10:	4637      	mov	r7, r6
 800bd12:	42bb      	cmp	r3, r7
 800bd14:	460e      	mov	r6, r1
 800bd16:	d9f4      	bls.n	800bd02 <_printf_i+0x116>
 800bd18:	2b08      	cmp	r3, #8
 800bd1a:	d10b      	bne.n	800bd34 <_printf_i+0x148>
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	07de      	lsls	r6, r3, #31
 800bd20:	d508      	bpl.n	800bd34 <_printf_i+0x148>
 800bd22:	6923      	ldr	r3, [r4, #16]
 800bd24:	6861      	ldr	r1, [r4, #4]
 800bd26:	4299      	cmp	r1, r3
 800bd28:	bfde      	ittt	le
 800bd2a:	2330      	movle	r3, #48	; 0x30
 800bd2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd34:	1b52      	subs	r2, r2, r5
 800bd36:	6122      	str	r2, [r4, #16]
 800bd38:	f8cd a000 	str.w	sl, [sp]
 800bd3c:	464b      	mov	r3, r9
 800bd3e:	aa03      	add	r2, sp, #12
 800bd40:	4621      	mov	r1, r4
 800bd42:	4640      	mov	r0, r8
 800bd44:	f7ff fee4 	bl	800bb10 <_printf_common>
 800bd48:	3001      	adds	r0, #1
 800bd4a:	d14a      	bne.n	800bde2 <_printf_i+0x1f6>
 800bd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd50:	b004      	add	sp, #16
 800bd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	f043 0320 	orr.w	r3, r3, #32
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	4833      	ldr	r0, [pc, #204]	; (800be2c <_printf_i+0x240>)
 800bd60:	2778      	movs	r7, #120	; 0x78
 800bd62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	6829      	ldr	r1, [r5, #0]
 800bd6a:	061f      	lsls	r7, r3, #24
 800bd6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd70:	d402      	bmi.n	800bd78 <_printf_i+0x18c>
 800bd72:	065f      	lsls	r7, r3, #25
 800bd74:	bf48      	it	mi
 800bd76:	b2b6      	uxthmi	r6, r6
 800bd78:	07df      	lsls	r7, r3, #31
 800bd7a:	bf48      	it	mi
 800bd7c:	f043 0320 	orrmi.w	r3, r3, #32
 800bd80:	6029      	str	r1, [r5, #0]
 800bd82:	bf48      	it	mi
 800bd84:	6023      	strmi	r3, [r4, #0]
 800bd86:	b91e      	cbnz	r6, 800bd90 <_printf_i+0x1a4>
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	f023 0320 	bic.w	r3, r3, #32
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	2310      	movs	r3, #16
 800bd92:	e7a7      	b.n	800bce4 <_printf_i+0xf8>
 800bd94:	4824      	ldr	r0, [pc, #144]	; (800be28 <_printf_i+0x23c>)
 800bd96:	e7e4      	b.n	800bd62 <_printf_i+0x176>
 800bd98:	4615      	mov	r5, r2
 800bd9a:	e7bd      	b.n	800bd18 <_printf_i+0x12c>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	6826      	ldr	r6, [r4, #0]
 800bda0:	6961      	ldr	r1, [r4, #20]
 800bda2:	1d18      	adds	r0, r3, #4
 800bda4:	6028      	str	r0, [r5, #0]
 800bda6:	0635      	lsls	r5, r6, #24
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	d501      	bpl.n	800bdb0 <_printf_i+0x1c4>
 800bdac:	6019      	str	r1, [r3, #0]
 800bdae:	e002      	b.n	800bdb6 <_printf_i+0x1ca>
 800bdb0:	0670      	lsls	r0, r6, #25
 800bdb2:	d5fb      	bpl.n	800bdac <_printf_i+0x1c0>
 800bdb4:	8019      	strh	r1, [r3, #0]
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	6123      	str	r3, [r4, #16]
 800bdba:	4615      	mov	r5, r2
 800bdbc:	e7bc      	b.n	800bd38 <_printf_i+0x14c>
 800bdbe:	682b      	ldr	r3, [r5, #0]
 800bdc0:	1d1a      	adds	r2, r3, #4
 800bdc2:	602a      	str	r2, [r5, #0]
 800bdc4:	681d      	ldr	r5, [r3, #0]
 800bdc6:	6862      	ldr	r2, [r4, #4]
 800bdc8:	2100      	movs	r1, #0
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f7f4 fa00 	bl	80001d0 <memchr>
 800bdd0:	b108      	cbz	r0, 800bdd6 <_printf_i+0x1ea>
 800bdd2:	1b40      	subs	r0, r0, r5
 800bdd4:	6060      	str	r0, [r4, #4]
 800bdd6:	6863      	ldr	r3, [r4, #4]
 800bdd8:	6123      	str	r3, [r4, #16]
 800bdda:	2300      	movs	r3, #0
 800bddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bde0:	e7aa      	b.n	800bd38 <_printf_i+0x14c>
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	462a      	mov	r2, r5
 800bde6:	4649      	mov	r1, r9
 800bde8:	4640      	mov	r0, r8
 800bdea:	47d0      	blx	sl
 800bdec:	3001      	adds	r0, #1
 800bdee:	d0ad      	beq.n	800bd4c <_printf_i+0x160>
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	079b      	lsls	r3, r3, #30
 800bdf4:	d413      	bmi.n	800be1e <_printf_i+0x232>
 800bdf6:	68e0      	ldr	r0, [r4, #12]
 800bdf8:	9b03      	ldr	r3, [sp, #12]
 800bdfa:	4298      	cmp	r0, r3
 800bdfc:	bfb8      	it	lt
 800bdfe:	4618      	movlt	r0, r3
 800be00:	e7a6      	b.n	800bd50 <_printf_i+0x164>
 800be02:	2301      	movs	r3, #1
 800be04:	4632      	mov	r2, r6
 800be06:	4649      	mov	r1, r9
 800be08:	4640      	mov	r0, r8
 800be0a:	47d0      	blx	sl
 800be0c:	3001      	adds	r0, #1
 800be0e:	d09d      	beq.n	800bd4c <_printf_i+0x160>
 800be10:	3501      	adds	r5, #1
 800be12:	68e3      	ldr	r3, [r4, #12]
 800be14:	9903      	ldr	r1, [sp, #12]
 800be16:	1a5b      	subs	r3, r3, r1
 800be18:	42ab      	cmp	r3, r5
 800be1a:	dcf2      	bgt.n	800be02 <_printf_i+0x216>
 800be1c:	e7eb      	b.n	800bdf6 <_printf_i+0x20a>
 800be1e:	2500      	movs	r5, #0
 800be20:	f104 0619 	add.w	r6, r4, #25
 800be24:	e7f5      	b.n	800be12 <_printf_i+0x226>
 800be26:	bf00      	nop
 800be28:	0800e212 	.word	0x0800e212
 800be2c:	0800e223 	.word	0x0800e223

0800be30 <std>:
 800be30:	2300      	movs	r3, #0
 800be32:	b510      	push	{r4, lr}
 800be34:	4604      	mov	r4, r0
 800be36:	e9c0 3300 	strd	r3, r3, [r0]
 800be3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be3e:	6083      	str	r3, [r0, #8]
 800be40:	8181      	strh	r1, [r0, #12]
 800be42:	6643      	str	r3, [r0, #100]	; 0x64
 800be44:	81c2      	strh	r2, [r0, #14]
 800be46:	6183      	str	r3, [r0, #24]
 800be48:	4619      	mov	r1, r3
 800be4a:	2208      	movs	r2, #8
 800be4c:	305c      	adds	r0, #92	; 0x5c
 800be4e:	f000 f914 	bl	800c07a <memset>
 800be52:	4b0d      	ldr	r3, [pc, #52]	; (800be88 <std+0x58>)
 800be54:	6263      	str	r3, [r4, #36]	; 0x24
 800be56:	4b0d      	ldr	r3, [pc, #52]	; (800be8c <std+0x5c>)
 800be58:	62a3      	str	r3, [r4, #40]	; 0x28
 800be5a:	4b0d      	ldr	r3, [pc, #52]	; (800be90 <std+0x60>)
 800be5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be5e:	4b0d      	ldr	r3, [pc, #52]	; (800be94 <std+0x64>)
 800be60:	6323      	str	r3, [r4, #48]	; 0x30
 800be62:	4b0d      	ldr	r3, [pc, #52]	; (800be98 <std+0x68>)
 800be64:	6224      	str	r4, [r4, #32]
 800be66:	429c      	cmp	r4, r3
 800be68:	d006      	beq.n	800be78 <std+0x48>
 800be6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800be6e:	4294      	cmp	r4, r2
 800be70:	d002      	beq.n	800be78 <std+0x48>
 800be72:	33d0      	adds	r3, #208	; 0xd0
 800be74:	429c      	cmp	r4, r3
 800be76:	d105      	bne.n	800be84 <std+0x54>
 800be78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be80:	f000 b988 	b.w	800c194 <__retarget_lock_init_recursive>
 800be84:	bd10      	pop	{r4, pc}
 800be86:	bf00      	nop
 800be88:	0800bff5 	.word	0x0800bff5
 800be8c:	0800c017 	.word	0x0800c017
 800be90:	0800c04f 	.word	0x0800c04f
 800be94:	0800c073 	.word	0x0800c073
 800be98:	20000b40 	.word	0x20000b40

0800be9c <stdio_exit_handler>:
 800be9c:	4a02      	ldr	r2, [pc, #8]	; (800bea8 <stdio_exit_handler+0xc>)
 800be9e:	4903      	ldr	r1, [pc, #12]	; (800beac <stdio_exit_handler+0x10>)
 800bea0:	4803      	ldr	r0, [pc, #12]	; (800beb0 <stdio_exit_handler+0x14>)
 800bea2:	f000 b869 	b.w	800bf78 <_fwalk_sglue>
 800bea6:	bf00      	nop
 800bea8:	2000002c 	.word	0x2000002c
 800beac:	0800d9e1 	.word	0x0800d9e1
 800beb0:	20000038 	.word	0x20000038

0800beb4 <cleanup_stdio>:
 800beb4:	6841      	ldr	r1, [r0, #4]
 800beb6:	4b0c      	ldr	r3, [pc, #48]	; (800bee8 <cleanup_stdio+0x34>)
 800beb8:	4299      	cmp	r1, r3
 800beba:	b510      	push	{r4, lr}
 800bebc:	4604      	mov	r4, r0
 800bebe:	d001      	beq.n	800bec4 <cleanup_stdio+0x10>
 800bec0:	f001 fd8e 	bl	800d9e0 <_fflush_r>
 800bec4:	68a1      	ldr	r1, [r4, #8]
 800bec6:	4b09      	ldr	r3, [pc, #36]	; (800beec <cleanup_stdio+0x38>)
 800bec8:	4299      	cmp	r1, r3
 800beca:	d002      	beq.n	800bed2 <cleanup_stdio+0x1e>
 800becc:	4620      	mov	r0, r4
 800bece:	f001 fd87 	bl	800d9e0 <_fflush_r>
 800bed2:	68e1      	ldr	r1, [r4, #12]
 800bed4:	4b06      	ldr	r3, [pc, #24]	; (800bef0 <cleanup_stdio+0x3c>)
 800bed6:	4299      	cmp	r1, r3
 800bed8:	d004      	beq.n	800bee4 <cleanup_stdio+0x30>
 800beda:	4620      	mov	r0, r4
 800bedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bee0:	f001 bd7e 	b.w	800d9e0 <_fflush_r>
 800bee4:	bd10      	pop	{r4, pc}
 800bee6:	bf00      	nop
 800bee8:	20000b40 	.word	0x20000b40
 800beec:	20000ba8 	.word	0x20000ba8
 800bef0:	20000c10 	.word	0x20000c10

0800bef4 <global_stdio_init.part.0>:
 800bef4:	b510      	push	{r4, lr}
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <global_stdio_init.part.0+0x30>)
 800bef8:	4c0b      	ldr	r4, [pc, #44]	; (800bf28 <global_stdio_init.part.0+0x34>)
 800befa:	4a0c      	ldr	r2, [pc, #48]	; (800bf2c <global_stdio_init.part.0+0x38>)
 800befc:	601a      	str	r2, [r3, #0]
 800befe:	4620      	mov	r0, r4
 800bf00:	2200      	movs	r2, #0
 800bf02:	2104      	movs	r1, #4
 800bf04:	f7ff ff94 	bl	800be30 <std>
 800bf08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	2109      	movs	r1, #9
 800bf10:	f7ff ff8e 	bl	800be30 <std>
 800bf14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bf18:	2202      	movs	r2, #2
 800bf1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf1e:	2112      	movs	r1, #18
 800bf20:	f7ff bf86 	b.w	800be30 <std>
 800bf24:	20000c78 	.word	0x20000c78
 800bf28:	20000b40 	.word	0x20000b40
 800bf2c:	0800be9d 	.word	0x0800be9d

0800bf30 <__sfp_lock_acquire>:
 800bf30:	4801      	ldr	r0, [pc, #4]	; (800bf38 <__sfp_lock_acquire+0x8>)
 800bf32:	f000 b930 	b.w	800c196 <__retarget_lock_acquire_recursive>
 800bf36:	bf00      	nop
 800bf38:	20000c81 	.word	0x20000c81

0800bf3c <__sfp_lock_release>:
 800bf3c:	4801      	ldr	r0, [pc, #4]	; (800bf44 <__sfp_lock_release+0x8>)
 800bf3e:	f000 b92b 	b.w	800c198 <__retarget_lock_release_recursive>
 800bf42:	bf00      	nop
 800bf44:	20000c81 	.word	0x20000c81

0800bf48 <__sinit>:
 800bf48:	b510      	push	{r4, lr}
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	f7ff fff0 	bl	800bf30 <__sfp_lock_acquire>
 800bf50:	6a23      	ldr	r3, [r4, #32]
 800bf52:	b11b      	cbz	r3, 800bf5c <__sinit+0x14>
 800bf54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf58:	f7ff bff0 	b.w	800bf3c <__sfp_lock_release>
 800bf5c:	4b04      	ldr	r3, [pc, #16]	; (800bf70 <__sinit+0x28>)
 800bf5e:	6223      	str	r3, [r4, #32]
 800bf60:	4b04      	ldr	r3, [pc, #16]	; (800bf74 <__sinit+0x2c>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1f5      	bne.n	800bf54 <__sinit+0xc>
 800bf68:	f7ff ffc4 	bl	800bef4 <global_stdio_init.part.0>
 800bf6c:	e7f2      	b.n	800bf54 <__sinit+0xc>
 800bf6e:	bf00      	nop
 800bf70:	0800beb5 	.word	0x0800beb5
 800bf74:	20000c78 	.word	0x20000c78

0800bf78 <_fwalk_sglue>:
 800bf78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	4688      	mov	r8, r1
 800bf80:	4614      	mov	r4, r2
 800bf82:	2600      	movs	r6, #0
 800bf84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf88:	f1b9 0901 	subs.w	r9, r9, #1
 800bf8c:	d505      	bpl.n	800bf9a <_fwalk_sglue+0x22>
 800bf8e:	6824      	ldr	r4, [r4, #0]
 800bf90:	2c00      	cmp	r4, #0
 800bf92:	d1f7      	bne.n	800bf84 <_fwalk_sglue+0xc>
 800bf94:	4630      	mov	r0, r6
 800bf96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf9a:	89ab      	ldrh	r3, [r5, #12]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d907      	bls.n	800bfb0 <_fwalk_sglue+0x38>
 800bfa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	d003      	beq.n	800bfb0 <_fwalk_sglue+0x38>
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	4638      	mov	r0, r7
 800bfac:	47c0      	blx	r8
 800bfae:	4306      	orrs	r6, r0
 800bfb0:	3568      	adds	r5, #104	; 0x68
 800bfb2:	e7e9      	b.n	800bf88 <_fwalk_sglue+0x10>

0800bfb4 <siprintf>:
 800bfb4:	b40e      	push	{r1, r2, r3}
 800bfb6:	b500      	push	{lr}
 800bfb8:	b09c      	sub	sp, #112	; 0x70
 800bfba:	ab1d      	add	r3, sp, #116	; 0x74
 800bfbc:	9002      	str	r0, [sp, #8]
 800bfbe:	9006      	str	r0, [sp, #24]
 800bfc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfc4:	4809      	ldr	r0, [pc, #36]	; (800bfec <siprintf+0x38>)
 800bfc6:	9107      	str	r1, [sp, #28]
 800bfc8:	9104      	str	r1, [sp, #16]
 800bfca:	4909      	ldr	r1, [pc, #36]	; (800bff0 <siprintf+0x3c>)
 800bfcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfd0:	9105      	str	r1, [sp, #20]
 800bfd2:	6800      	ldr	r0, [r0, #0]
 800bfd4:	9301      	str	r3, [sp, #4]
 800bfd6:	a902      	add	r1, sp, #8
 800bfd8:	f001 fb7e 	bl	800d6d8 <_svfiprintf_r>
 800bfdc:	9b02      	ldr	r3, [sp, #8]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	701a      	strb	r2, [r3, #0]
 800bfe2:	b01c      	add	sp, #112	; 0x70
 800bfe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfe8:	b003      	add	sp, #12
 800bfea:	4770      	bx	lr
 800bfec:	20000084 	.word	0x20000084
 800bff0:	ffff0208 	.word	0xffff0208

0800bff4 <__sread>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	460c      	mov	r4, r1
 800bff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffc:	f000 f86c 	bl	800c0d8 <_read_r>
 800c000:	2800      	cmp	r0, #0
 800c002:	bfab      	itete	ge
 800c004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c006:	89a3      	ldrhlt	r3, [r4, #12]
 800c008:	181b      	addge	r3, r3, r0
 800c00a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c00e:	bfac      	ite	ge
 800c010:	6563      	strge	r3, [r4, #84]	; 0x54
 800c012:	81a3      	strhlt	r3, [r4, #12]
 800c014:	bd10      	pop	{r4, pc}

0800c016 <__swrite>:
 800c016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c01a:	461f      	mov	r7, r3
 800c01c:	898b      	ldrh	r3, [r1, #12]
 800c01e:	05db      	lsls	r3, r3, #23
 800c020:	4605      	mov	r5, r0
 800c022:	460c      	mov	r4, r1
 800c024:	4616      	mov	r6, r2
 800c026:	d505      	bpl.n	800c034 <__swrite+0x1e>
 800c028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c02c:	2302      	movs	r3, #2
 800c02e:	2200      	movs	r2, #0
 800c030:	f000 f840 	bl	800c0b4 <_lseek_r>
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c03a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	4632      	mov	r2, r6
 800c042:	463b      	mov	r3, r7
 800c044:	4628      	mov	r0, r5
 800c046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c04a:	f000 b867 	b.w	800c11c <_write_r>

0800c04e <__sseek>:
 800c04e:	b510      	push	{r4, lr}
 800c050:	460c      	mov	r4, r1
 800c052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c056:	f000 f82d 	bl	800c0b4 <_lseek_r>
 800c05a:	1c43      	adds	r3, r0, #1
 800c05c:	89a3      	ldrh	r3, [r4, #12]
 800c05e:	bf15      	itete	ne
 800c060:	6560      	strne	r0, [r4, #84]	; 0x54
 800c062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c06a:	81a3      	strheq	r3, [r4, #12]
 800c06c:	bf18      	it	ne
 800c06e:	81a3      	strhne	r3, [r4, #12]
 800c070:	bd10      	pop	{r4, pc}

0800c072 <__sclose>:
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	f000 b80d 	b.w	800c094 <_close_r>

0800c07a <memset>:
 800c07a:	4402      	add	r2, r0
 800c07c:	4603      	mov	r3, r0
 800c07e:	4293      	cmp	r3, r2
 800c080:	d100      	bne.n	800c084 <memset+0xa>
 800c082:	4770      	bx	lr
 800c084:	f803 1b01 	strb.w	r1, [r3], #1
 800c088:	e7f9      	b.n	800c07e <memset+0x4>
	...

0800c08c <_localeconv_r>:
 800c08c:	4800      	ldr	r0, [pc, #0]	; (800c090 <_localeconv_r+0x4>)
 800c08e:	4770      	bx	lr
 800c090:	20000178 	.word	0x20000178

0800c094 <_close_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d06      	ldr	r5, [pc, #24]	; (800c0b0 <_close_r+0x1c>)
 800c098:	2300      	movs	r3, #0
 800c09a:	4604      	mov	r4, r0
 800c09c:	4608      	mov	r0, r1
 800c09e:	602b      	str	r3, [r5, #0]
 800c0a0:	f7f5 fd3f 	bl	8001b22 <_close>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d102      	bne.n	800c0ae <_close_r+0x1a>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	b103      	cbz	r3, 800c0ae <_close_r+0x1a>
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	20000c7c 	.word	0x20000c7c

0800c0b4 <_lseek_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4d07      	ldr	r5, [pc, #28]	; (800c0d4 <_lseek_r+0x20>)
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	4608      	mov	r0, r1
 800c0bc:	4611      	mov	r1, r2
 800c0be:	2200      	movs	r2, #0
 800c0c0:	602a      	str	r2, [r5, #0]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	f7f5 fd54 	bl	8001b70 <_lseek>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_lseek_r+0x1e>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_lseek_r+0x1e>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	20000c7c 	.word	0x20000c7c

0800c0d8 <_read_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d07      	ldr	r5, [pc, #28]	; (800c0f8 <_read_r+0x20>)
 800c0dc:	4604      	mov	r4, r0
 800c0de:	4608      	mov	r0, r1
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	602a      	str	r2, [r5, #0]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f7f5 fce2 	bl	8001ab0 <_read>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_read_r+0x1e>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_read_r+0x1e>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	20000c7c 	.word	0x20000c7c

0800c0fc <_sbrk_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	4d06      	ldr	r5, [pc, #24]	; (800c118 <_sbrk_r+0x1c>)
 800c100:	2300      	movs	r3, #0
 800c102:	4604      	mov	r4, r0
 800c104:	4608      	mov	r0, r1
 800c106:	602b      	str	r3, [r5, #0]
 800c108:	f7f5 fd40 	bl	8001b8c <_sbrk>
 800c10c:	1c43      	adds	r3, r0, #1
 800c10e:	d102      	bne.n	800c116 <_sbrk_r+0x1a>
 800c110:	682b      	ldr	r3, [r5, #0]
 800c112:	b103      	cbz	r3, 800c116 <_sbrk_r+0x1a>
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	bd38      	pop	{r3, r4, r5, pc}
 800c118:	20000c7c 	.word	0x20000c7c

0800c11c <_write_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d07      	ldr	r5, [pc, #28]	; (800c13c <_write_r+0x20>)
 800c120:	4604      	mov	r4, r0
 800c122:	4608      	mov	r0, r1
 800c124:	4611      	mov	r1, r2
 800c126:	2200      	movs	r2, #0
 800c128:	602a      	str	r2, [r5, #0]
 800c12a:	461a      	mov	r2, r3
 800c12c:	f7f5 fcdd 	bl	8001aea <_write>
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d102      	bne.n	800c13a <_write_r+0x1e>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	b103      	cbz	r3, 800c13a <_write_r+0x1e>
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	20000c7c 	.word	0x20000c7c

0800c140 <__errno>:
 800c140:	4b01      	ldr	r3, [pc, #4]	; (800c148 <__errno+0x8>)
 800c142:	6818      	ldr	r0, [r3, #0]
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	20000084 	.word	0x20000084

0800c14c <__libc_init_array>:
 800c14c:	b570      	push	{r4, r5, r6, lr}
 800c14e:	4d0d      	ldr	r5, [pc, #52]	; (800c184 <__libc_init_array+0x38>)
 800c150:	4c0d      	ldr	r4, [pc, #52]	; (800c188 <__libc_init_array+0x3c>)
 800c152:	1b64      	subs	r4, r4, r5
 800c154:	10a4      	asrs	r4, r4, #2
 800c156:	2600      	movs	r6, #0
 800c158:	42a6      	cmp	r6, r4
 800c15a:	d109      	bne.n	800c170 <__libc_init_array+0x24>
 800c15c:	4d0b      	ldr	r5, [pc, #44]	; (800c18c <__libc_init_array+0x40>)
 800c15e:	4c0c      	ldr	r4, [pc, #48]	; (800c190 <__libc_init_array+0x44>)
 800c160:	f001 ffd2 	bl	800e108 <_init>
 800c164:	1b64      	subs	r4, r4, r5
 800c166:	10a4      	asrs	r4, r4, #2
 800c168:	2600      	movs	r6, #0
 800c16a:	42a6      	cmp	r6, r4
 800c16c:	d105      	bne.n	800c17a <__libc_init_array+0x2e>
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
 800c170:	f855 3b04 	ldr.w	r3, [r5], #4
 800c174:	4798      	blx	r3
 800c176:	3601      	adds	r6, #1
 800c178:	e7ee      	b.n	800c158 <__libc_init_array+0xc>
 800c17a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c17e:	4798      	blx	r3
 800c180:	3601      	adds	r6, #1
 800c182:	e7f2      	b.n	800c16a <__libc_init_array+0x1e>
 800c184:	0800e57c 	.word	0x0800e57c
 800c188:	0800e57c 	.word	0x0800e57c
 800c18c:	0800e57c 	.word	0x0800e57c
 800c190:	0800e580 	.word	0x0800e580

0800c194 <__retarget_lock_init_recursive>:
 800c194:	4770      	bx	lr

0800c196 <__retarget_lock_acquire_recursive>:
 800c196:	4770      	bx	lr

0800c198 <__retarget_lock_release_recursive>:
 800c198:	4770      	bx	lr

0800c19a <quorem>:
 800c19a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19e:	6903      	ldr	r3, [r0, #16]
 800c1a0:	690c      	ldr	r4, [r1, #16]
 800c1a2:	42a3      	cmp	r3, r4
 800c1a4:	4607      	mov	r7, r0
 800c1a6:	db7e      	blt.n	800c2a6 <quorem+0x10c>
 800c1a8:	3c01      	subs	r4, #1
 800c1aa:	f101 0814 	add.w	r8, r1, #20
 800c1ae:	f100 0514 	add.w	r5, r0, #20
 800c1b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1b6:	9301      	str	r3, [sp, #4]
 800c1b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c1c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1d0:	d331      	bcc.n	800c236 <quorem+0x9c>
 800c1d2:	f04f 0e00 	mov.w	lr, #0
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	46ac      	mov	ip, r5
 800c1da:	46f2      	mov	sl, lr
 800c1dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1e0:	b293      	uxth	r3, r2
 800c1e2:	fb06 e303 	mla	r3, r6, r3, lr
 800c1e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c1ea:	0c1a      	lsrs	r2, r3, #16
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	ebaa 0303 	sub.w	r3, sl, r3
 800c1f2:	f8dc a000 	ldr.w	sl, [ip]
 800c1f6:	fa13 f38a 	uxtah	r3, r3, sl
 800c1fa:	fb06 220e 	mla	r2, r6, lr, r2
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	9b00      	ldr	r3, [sp, #0]
 800c202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c206:	b292      	uxth	r2, r2
 800c208:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c20c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c210:	f8bd 3000 	ldrh.w	r3, [sp]
 800c214:	4581      	cmp	r9, r0
 800c216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c21a:	f84c 3b04 	str.w	r3, [ip], #4
 800c21e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c222:	d2db      	bcs.n	800c1dc <quorem+0x42>
 800c224:	f855 300b 	ldr.w	r3, [r5, fp]
 800c228:	b92b      	cbnz	r3, 800c236 <quorem+0x9c>
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	3b04      	subs	r3, #4
 800c22e:	429d      	cmp	r5, r3
 800c230:	461a      	mov	r2, r3
 800c232:	d32c      	bcc.n	800c28e <quorem+0xf4>
 800c234:	613c      	str	r4, [r7, #16]
 800c236:	4638      	mov	r0, r7
 800c238:	f001 f8f4 	bl	800d424 <__mcmp>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	db22      	blt.n	800c286 <quorem+0xec>
 800c240:	3601      	adds	r6, #1
 800c242:	4629      	mov	r1, r5
 800c244:	2000      	movs	r0, #0
 800c246:	f858 2b04 	ldr.w	r2, [r8], #4
 800c24a:	f8d1 c000 	ldr.w	ip, [r1]
 800c24e:	b293      	uxth	r3, r2
 800c250:	1ac3      	subs	r3, r0, r3
 800c252:	0c12      	lsrs	r2, r2, #16
 800c254:	fa13 f38c 	uxtah	r3, r3, ip
 800c258:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c25c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c260:	b29b      	uxth	r3, r3
 800c262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c266:	45c1      	cmp	r9, r8
 800c268:	f841 3b04 	str.w	r3, [r1], #4
 800c26c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c270:	d2e9      	bcs.n	800c246 <quorem+0xac>
 800c272:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c27a:	b922      	cbnz	r2, 800c286 <quorem+0xec>
 800c27c:	3b04      	subs	r3, #4
 800c27e:	429d      	cmp	r5, r3
 800c280:	461a      	mov	r2, r3
 800c282:	d30a      	bcc.n	800c29a <quorem+0x100>
 800c284:	613c      	str	r4, [r7, #16]
 800c286:	4630      	mov	r0, r6
 800c288:	b003      	add	sp, #12
 800c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28e:	6812      	ldr	r2, [r2, #0]
 800c290:	3b04      	subs	r3, #4
 800c292:	2a00      	cmp	r2, #0
 800c294:	d1ce      	bne.n	800c234 <quorem+0x9a>
 800c296:	3c01      	subs	r4, #1
 800c298:	e7c9      	b.n	800c22e <quorem+0x94>
 800c29a:	6812      	ldr	r2, [r2, #0]
 800c29c:	3b04      	subs	r3, #4
 800c29e:	2a00      	cmp	r2, #0
 800c2a0:	d1f0      	bne.n	800c284 <quorem+0xea>
 800c2a2:	3c01      	subs	r4, #1
 800c2a4:	e7eb      	b.n	800c27e <quorem+0xe4>
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	e7ee      	b.n	800c288 <quorem+0xee>
 800c2aa:	0000      	movs	r0, r0
 800c2ac:	0000      	movs	r0, r0
	...

0800c2b0 <_dtoa_r>:
 800c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	ed2d 8b04 	vpush	{d8-d9}
 800c2b8:	69c5      	ldr	r5, [r0, #28]
 800c2ba:	b093      	sub	sp, #76	; 0x4c
 800c2bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c2c0:	ec57 6b10 	vmov	r6, r7, d0
 800c2c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c2c8:	9107      	str	r1, [sp, #28]
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	920a      	str	r2, [sp, #40]	; 0x28
 800c2ce:	930d      	str	r3, [sp, #52]	; 0x34
 800c2d0:	b975      	cbnz	r5, 800c2f0 <_dtoa_r+0x40>
 800c2d2:	2010      	movs	r0, #16
 800c2d4:	f7ff f88a 	bl	800b3ec <malloc>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	61e0      	str	r0, [r4, #28]
 800c2dc:	b920      	cbnz	r0, 800c2e8 <_dtoa_r+0x38>
 800c2de:	4bae      	ldr	r3, [pc, #696]	; (800c598 <_dtoa_r+0x2e8>)
 800c2e0:	21ef      	movs	r1, #239	; 0xef
 800c2e2:	48ae      	ldr	r0, [pc, #696]	; (800c59c <_dtoa_r+0x2ec>)
 800c2e4:	f001 fbcc 	bl	800da80 <__assert_func>
 800c2e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2ec:	6005      	str	r5, [r0, #0]
 800c2ee:	60c5      	str	r5, [r0, #12]
 800c2f0:	69e3      	ldr	r3, [r4, #28]
 800c2f2:	6819      	ldr	r1, [r3, #0]
 800c2f4:	b151      	cbz	r1, 800c30c <_dtoa_r+0x5c>
 800c2f6:	685a      	ldr	r2, [r3, #4]
 800c2f8:	604a      	str	r2, [r1, #4]
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4093      	lsls	r3, r2
 800c2fe:	608b      	str	r3, [r1, #8]
 800c300:	4620      	mov	r0, r4
 800c302:	f000 fe53 	bl	800cfac <_Bfree>
 800c306:	69e3      	ldr	r3, [r4, #28]
 800c308:	2200      	movs	r2, #0
 800c30a:	601a      	str	r2, [r3, #0]
 800c30c:	1e3b      	subs	r3, r7, #0
 800c30e:	bfbb      	ittet	lt
 800c310:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c314:	9303      	strlt	r3, [sp, #12]
 800c316:	2300      	movge	r3, #0
 800c318:	2201      	movlt	r2, #1
 800c31a:	bfac      	ite	ge
 800c31c:	f8c8 3000 	strge.w	r3, [r8]
 800c320:	f8c8 2000 	strlt.w	r2, [r8]
 800c324:	4b9e      	ldr	r3, [pc, #632]	; (800c5a0 <_dtoa_r+0x2f0>)
 800c326:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c32a:	ea33 0308 	bics.w	r3, r3, r8
 800c32e:	d11b      	bne.n	800c368 <_dtoa_r+0xb8>
 800c330:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c332:	f242 730f 	movw	r3, #9999	; 0x270f
 800c336:	6013      	str	r3, [r2, #0]
 800c338:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c33c:	4333      	orrs	r3, r6
 800c33e:	f000 8593 	beq.w	800ce68 <_dtoa_r+0xbb8>
 800c342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c344:	b963      	cbnz	r3, 800c360 <_dtoa_r+0xb0>
 800c346:	4b97      	ldr	r3, [pc, #604]	; (800c5a4 <_dtoa_r+0x2f4>)
 800c348:	e027      	b.n	800c39a <_dtoa_r+0xea>
 800c34a:	4b97      	ldr	r3, [pc, #604]	; (800c5a8 <_dtoa_r+0x2f8>)
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	3308      	adds	r3, #8
 800c350:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c352:	6013      	str	r3, [r2, #0]
 800c354:	9800      	ldr	r0, [sp, #0]
 800c356:	b013      	add	sp, #76	; 0x4c
 800c358:	ecbd 8b04 	vpop	{d8-d9}
 800c35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c360:	4b90      	ldr	r3, [pc, #576]	; (800c5a4 <_dtoa_r+0x2f4>)
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	3303      	adds	r3, #3
 800c366:	e7f3      	b.n	800c350 <_dtoa_r+0xa0>
 800c368:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c36c:	2200      	movs	r2, #0
 800c36e:	ec51 0b17 	vmov	r0, r1, d7
 800c372:	eeb0 8a47 	vmov.f32	s16, s14
 800c376:	eef0 8a67 	vmov.f32	s17, s15
 800c37a:	2300      	movs	r3, #0
 800c37c:	f7f4 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c380:	4681      	mov	r9, r0
 800c382:	b160      	cbz	r0, 800c39e <_dtoa_r+0xee>
 800c384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c386:	2301      	movs	r3, #1
 800c388:	6013      	str	r3, [r2, #0]
 800c38a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 8568 	beq.w	800ce62 <_dtoa_r+0xbb2>
 800c392:	4b86      	ldr	r3, [pc, #536]	; (800c5ac <_dtoa_r+0x2fc>)
 800c394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	3b01      	subs	r3, #1
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	e7da      	b.n	800c354 <_dtoa_r+0xa4>
 800c39e:	aa10      	add	r2, sp, #64	; 0x40
 800c3a0:	a911      	add	r1, sp, #68	; 0x44
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	eeb0 0a48 	vmov.f32	s0, s16
 800c3a8:	eef0 0a68 	vmov.f32	s1, s17
 800c3ac:	f001 f8e0 	bl	800d570 <__d2b>
 800c3b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c3b4:	4682      	mov	sl, r0
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	d07f      	beq.n	800c4ba <_dtoa_r+0x20a>
 800c3ba:	ee18 3a90 	vmov	r3, s17
 800c3be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c3c6:	ec51 0b18 	vmov	r0, r1, d8
 800c3ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c3ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c3d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	2200      	movs	r2, #0
 800c3da:	4b75      	ldr	r3, [pc, #468]	; (800c5b0 <_dtoa_r+0x300>)
 800c3dc:	f7f3 ff54 	bl	8000288 <__aeabi_dsub>
 800c3e0:	a367      	add	r3, pc, #412	; (adr r3, 800c580 <_dtoa_r+0x2d0>)
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	f7f4 f907 	bl	80005f8 <__aeabi_dmul>
 800c3ea:	a367      	add	r3, pc, #412	; (adr r3, 800c588 <_dtoa_r+0x2d8>)
 800c3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f0:	f7f3 ff4c 	bl	800028c <__adddf3>
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	460f      	mov	r7, r1
 800c3fa:	f7f4 f893 	bl	8000524 <__aeabi_i2d>
 800c3fe:	a364      	add	r3, pc, #400	; (adr r3, 800c590 <_dtoa_r+0x2e0>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f7f4 f8f8 	bl	80005f8 <__aeabi_dmul>
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	4630      	mov	r0, r6
 800c40e:	4639      	mov	r1, r7
 800c410:	f7f3 ff3c 	bl	800028c <__adddf3>
 800c414:	4606      	mov	r6, r0
 800c416:	460f      	mov	r7, r1
 800c418:	f7f4 fb9e 	bl	8000b58 <__aeabi_d2iz>
 800c41c:	2200      	movs	r2, #0
 800c41e:	4683      	mov	fp, r0
 800c420:	2300      	movs	r3, #0
 800c422:	4630      	mov	r0, r6
 800c424:	4639      	mov	r1, r7
 800c426:	f7f4 fb59 	bl	8000adc <__aeabi_dcmplt>
 800c42a:	b148      	cbz	r0, 800c440 <_dtoa_r+0x190>
 800c42c:	4658      	mov	r0, fp
 800c42e:	f7f4 f879 	bl	8000524 <__aeabi_i2d>
 800c432:	4632      	mov	r2, r6
 800c434:	463b      	mov	r3, r7
 800c436:	f7f4 fb47 	bl	8000ac8 <__aeabi_dcmpeq>
 800c43a:	b908      	cbnz	r0, 800c440 <_dtoa_r+0x190>
 800c43c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c440:	f1bb 0f16 	cmp.w	fp, #22
 800c444:	d857      	bhi.n	800c4f6 <_dtoa_r+0x246>
 800c446:	4b5b      	ldr	r3, [pc, #364]	; (800c5b4 <_dtoa_r+0x304>)
 800c448:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	ec51 0b18 	vmov	r0, r1, d8
 800c454:	f7f4 fb42 	bl	8000adc <__aeabi_dcmplt>
 800c458:	2800      	cmp	r0, #0
 800c45a:	d04e      	beq.n	800c4fa <_dtoa_r+0x24a>
 800c45c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c460:	2300      	movs	r3, #0
 800c462:	930c      	str	r3, [sp, #48]	; 0x30
 800c464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c466:	1b5b      	subs	r3, r3, r5
 800c468:	1e5a      	subs	r2, r3, #1
 800c46a:	bf45      	ittet	mi
 800c46c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c470:	9305      	strmi	r3, [sp, #20]
 800c472:	2300      	movpl	r3, #0
 800c474:	2300      	movmi	r3, #0
 800c476:	9206      	str	r2, [sp, #24]
 800c478:	bf54      	ite	pl
 800c47a:	9305      	strpl	r3, [sp, #20]
 800c47c:	9306      	strmi	r3, [sp, #24]
 800c47e:	f1bb 0f00 	cmp.w	fp, #0
 800c482:	db3c      	blt.n	800c4fe <_dtoa_r+0x24e>
 800c484:	9b06      	ldr	r3, [sp, #24]
 800c486:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c48a:	445b      	add	r3, fp
 800c48c:	9306      	str	r3, [sp, #24]
 800c48e:	2300      	movs	r3, #0
 800c490:	9308      	str	r3, [sp, #32]
 800c492:	9b07      	ldr	r3, [sp, #28]
 800c494:	2b09      	cmp	r3, #9
 800c496:	d868      	bhi.n	800c56a <_dtoa_r+0x2ba>
 800c498:	2b05      	cmp	r3, #5
 800c49a:	bfc4      	itt	gt
 800c49c:	3b04      	subgt	r3, #4
 800c49e:	9307      	strgt	r3, [sp, #28]
 800c4a0:	9b07      	ldr	r3, [sp, #28]
 800c4a2:	f1a3 0302 	sub.w	r3, r3, #2
 800c4a6:	bfcc      	ite	gt
 800c4a8:	2500      	movgt	r5, #0
 800c4aa:	2501      	movle	r5, #1
 800c4ac:	2b03      	cmp	r3, #3
 800c4ae:	f200 8085 	bhi.w	800c5bc <_dtoa_r+0x30c>
 800c4b2:	e8df f003 	tbb	[pc, r3]
 800c4b6:	3b2e      	.short	0x3b2e
 800c4b8:	5839      	.short	0x5839
 800c4ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c4be:	441d      	add	r5, r3
 800c4c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c4c4:	2b20      	cmp	r3, #32
 800c4c6:	bfc1      	itttt	gt
 800c4c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c4cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800c4d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c4d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c4d8:	bfd6      	itet	le
 800c4da:	f1c3 0320 	rsble	r3, r3, #32
 800c4de:	ea48 0003 	orrgt.w	r0, r8, r3
 800c4e2:	fa06 f003 	lslle.w	r0, r6, r3
 800c4e6:	f7f4 f80d 	bl	8000504 <__aeabi_ui2d>
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c4f0:	3d01      	subs	r5, #1
 800c4f2:	920e      	str	r2, [sp, #56]	; 0x38
 800c4f4:	e76f      	b.n	800c3d6 <_dtoa_r+0x126>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e7b3      	b.n	800c462 <_dtoa_r+0x1b2>
 800c4fa:	900c      	str	r0, [sp, #48]	; 0x30
 800c4fc:	e7b2      	b.n	800c464 <_dtoa_r+0x1b4>
 800c4fe:	9b05      	ldr	r3, [sp, #20]
 800c500:	eba3 030b 	sub.w	r3, r3, fp
 800c504:	9305      	str	r3, [sp, #20]
 800c506:	f1cb 0300 	rsb	r3, fp, #0
 800c50a:	9308      	str	r3, [sp, #32]
 800c50c:	2300      	movs	r3, #0
 800c50e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c510:	e7bf      	b.n	800c492 <_dtoa_r+0x1e2>
 800c512:	2300      	movs	r3, #0
 800c514:	9309      	str	r3, [sp, #36]	; 0x24
 800c516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c518:	2b00      	cmp	r3, #0
 800c51a:	dc52      	bgt.n	800c5c2 <_dtoa_r+0x312>
 800c51c:	2301      	movs	r3, #1
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	461a      	mov	r2, r3
 800c524:	920a      	str	r2, [sp, #40]	; 0x28
 800c526:	e00b      	b.n	800c540 <_dtoa_r+0x290>
 800c528:	2301      	movs	r3, #1
 800c52a:	e7f3      	b.n	800c514 <_dtoa_r+0x264>
 800c52c:	2300      	movs	r3, #0
 800c52e:	9309      	str	r3, [sp, #36]	; 0x24
 800c530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c532:	445b      	add	r3, fp
 800c534:	9301      	str	r3, [sp, #4]
 800c536:	3301      	adds	r3, #1
 800c538:	2b01      	cmp	r3, #1
 800c53a:	9304      	str	r3, [sp, #16]
 800c53c:	bfb8      	it	lt
 800c53e:	2301      	movlt	r3, #1
 800c540:	69e0      	ldr	r0, [r4, #28]
 800c542:	2100      	movs	r1, #0
 800c544:	2204      	movs	r2, #4
 800c546:	f102 0614 	add.w	r6, r2, #20
 800c54a:	429e      	cmp	r6, r3
 800c54c:	d93d      	bls.n	800c5ca <_dtoa_r+0x31a>
 800c54e:	6041      	str	r1, [r0, #4]
 800c550:	4620      	mov	r0, r4
 800c552:	f000 fceb 	bl	800cf2c <_Balloc>
 800c556:	9000      	str	r0, [sp, #0]
 800c558:	2800      	cmp	r0, #0
 800c55a:	d139      	bne.n	800c5d0 <_dtoa_r+0x320>
 800c55c:	4b16      	ldr	r3, [pc, #88]	; (800c5b8 <_dtoa_r+0x308>)
 800c55e:	4602      	mov	r2, r0
 800c560:	f240 11af 	movw	r1, #431	; 0x1af
 800c564:	e6bd      	b.n	800c2e2 <_dtoa_r+0x32>
 800c566:	2301      	movs	r3, #1
 800c568:	e7e1      	b.n	800c52e <_dtoa_r+0x27e>
 800c56a:	2501      	movs	r5, #1
 800c56c:	2300      	movs	r3, #0
 800c56e:	9307      	str	r3, [sp, #28]
 800c570:	9509      	str	r5, [sp, #36]	; 0x24
 800c572:	f04f 33ff 	mov.w	r3, #4294967295
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	9304      	str	r3, [sp, #16]
 800c57a:	2200      	movs	r2, #0
 800c57c:	2312      	movs	r3, #18
 800c57e:	e7d1      	b.n	800c524 <_dtoa_r+0x274>
 800c580:	636f4361 	.word	0x636f4361
 800c584:	3fd287a7 	.word	0x3fd287a7
 800c588:	8b60c8b3 	.word	0x8b60c8b3
 800c58c:	3fc68a28 	.word	0x3fc68a28
 800c590:	509f79fb 	.word	0x509f79fb
 800c594:	3fd34413 	.word	0x3fd34413
 800c598:	0800e241 	.word	0x0800e241
 800c59c:	0800e258 	.word	0x0800e258
 800c5a0:	7ff00000 	.word	0x7ff00000
 800c5a4:	0800e23d 	.word	0x0800e23d
 800c5a8:	0800e234 	.word	0x0800e234
 800c5ac:	0800e211 	.word	0x0800e211
 800c5b0:	3ff80000 	.word	0x3ff80000
 800c5b4:	0800e348 	.word	0x0800e348
 800c5b8:	0800e2b0 	.word	0x0800e2b0
 800c5bc:	2301      	movs	r3, #1
 800c5be:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c0:	e7d7      	b.n	800c572 <_dtoa_r+0x2c2>
 800c5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5c4:	9301      	str	r3, [sp, #4]
 800c5c6:	9304      	str	r3, [sp, #16]
 800c5c8:	e7ba      	b.n	800c540 <_dtoa_r+0x290>
 800c5ca:	3101      	adds	r1, #1
 800c5cc:	0052      	lsls	r2, r2, #1
 800c5ce:	e7ba      	b.n	800c546 <_dtoa_r+0x296>
 800c5d0:	69e3      	ldr	r3, [r4, #28]
 800c5d2:	9a00      	ldr	r2, [sp, #0]
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	9b04      	ldr	r3, [sp, #16]
 800c5d8:	2b0e      	cmp	r3, #14
 800c5da:	f200 80a8 	bhi.w	800c72e <_dtoa_r+0x47e>
 800c5de:	2d00      	cmp	r5, #0
 800c5e0:	f000 80a5 	beq.w	800c72e <_dtoa_r+0x47e>
 800c5e4:	f1bb 0f00 	cmp.w	fp, #0
 800c5e8:	dd38      	ble.n	800c65c <_dtoa_r+0x3ac>
 800c5ea:	4bc0      	ldr	r3, [pc, #768]	; (800c8ec <_dtoa_r+0x63c>)
 800c5ec:	f00b 020f 	and.w	r2, fp, #15
 800c5f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c5f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c5fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c600:	d019      	beq.n	800c636 <_dtoa_r+0x386>
 800c602:	4bbb      	ldr	r3, [pc, #748]	; (800c8f0 <_dtoa_r+0x640>)
 800c604:	ec51 0b18 	vmov	r0, r1, d8
 800c608:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c60c:	f7f4 f91e 	bl	800084c <__aeabi_ddiv>
 800c610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c614:	f008 080f 	and.w	r8, r8, #15
 800c618:	2503      	movs	r5, #3
 800c61a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c8f0 <_dtoa_r+0x640>
 800c61e:	f1b8 0f00 	cmp.w	r8, #0
 800c622:	d10a      	bne.n	800c63a <_dtoa_r+0x38a>
 800c624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c628:	4632      	mov	r2, r6
 800c62a:	463b      	mov	r3, r7
 800c62c:	f7f4 f90e 	bl	800084c <__aeabi_ddiv>
 800c630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c634:	e02b      	b.n	800c68e <_dtoa_r+0x3de>
 800c636:	2502      	movs	r5, #2
 800c638:	e7ef      	b.n	800c61a <_dtoa_r+0x36a>
 800c63a:	f018 0f01 	tst.w	r8, #1
 800c63e:	d008      	beq.n	800c652 <_dtoa_r+0x3a2>
 800c640:	4630      	mov	r0, r6
 800c642:	4639      	mov	r1, r7
 800c644:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c648:	f7f3 ffd6 	bl	80005f8 <__aeabi_dmul>
 800c64c:	3501      	adds	r5, #1
 800c64e:	4606      	mov	r6, r0
 800c650:	460f      	mov	r7, r1
 800c652:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c656:	f109 0908 	add.w	r9, r9, #8
 800c65a:	e7e0      	b.n	800c61e <_dtoa_r+0x36e>
 800c65c:	f000 809f 	beq.w	800c79e <_dtoa_r+0x4ee>
 800c660:	f1cb 0600 	rsb	r6, fp, #0
 800c664:	4ba1      	ldr	r3, [pc, #644]	; (800c8ec <_dtoa_r+0x63c>)
 800c666:	4fa2      	ldr	r7, [pc, #648]	; (800c8f0 <_dtoa_r+0x640>)
 800c668:	f006 020f 	and.w	r2, r6, #15
 800c66c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	ec51 0b18 	vmov	r0, r1, d8
 800c678:	f7f3 ffbe 	bl	80005f8 <__aeabi_dmul>
 800c67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c680:	1136      	asrs	r6, r6, #4
 800c682:	2300      	movs	r3, #0
 800c684:	2502      	movs	r5, #2
 800c686:	2e00      	cmp	r6, #0
 800c688:	d17e      	bne.n	800c788 <_dtoa_r+0x4d8>
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1d0      	bne.n	800c630 <_dtoa_r+0x380>
 800c68e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c690:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	f000 8084 	beq.w	800c7a2 <_dtoa_r+0x4f2>
 800c69a:	4b96      	ldr	r3, [pc, #600]	; (800c8f4 <_dtoa_r+0x644>)
 800c69c:	2200      	movs	r2, #0
 800c69e:	4640      	mov	r0, r8
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	f7f4 fa1b 	bl	8000adc <__aeabi_dcmplt>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d07b      	beq.n	800c7a2 <_dtoa_r+0x4f2>
 800c6aa:	9b04      	ldr	r3, [sp, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d078      	beq.n	800c7a2 <_dtoa_r+0x4f2>
 800c6b0:	9b01      	ldr	r3, [sp, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	dd39      	ble.n	800c72a <_dtoa_r+0x47a>
 800c6b6:	4b90      	ldr	r3, [pc, #576]	; (800c8f8 <_dtoa_r+0x648>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	4640      	mov	r0, r8
 800c6bc:	4649      	mov	r1, r9
 800c6be:	f7f3 ff9b 	bl	80005f8 <__aeabi_dmul>
 800c6c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6c6:	9e01      	ldr	r6, [sp, #4]
 800c6c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c6cc:	3501      	adds	r5, #1
 800c6ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	f7f3 ff26 	bl	8000524 <__aeabi_i2d>
 800c6d8:	4642      	mov	r2, r8
 800c6da:	464b      	mov	r3, r9
 800c6dc:	f7f3 ff8c 	bl	80005f8 <__aeabi_dmul>
 800c6e0:	4b86      	ldr	r3, [pc, #536]	; (800c8fc <_dtoa_r+0x64c>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f7f3 fdd2 	bl	800028c <__adddf3>
 800c6e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c6ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6f0:	9303      	str	r3, [sp, #12]
 800c6f2:	2e00      	cmp	r6, #0
 800c6f4:	d158      	bne.n	800c7a8 <_dtoa_r+0x4f8>
 800c6f6:	4b82      	ldr	r3, [pc, #520]	; (800c900 <_dtoa_r+0x650>)
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	4649      	mov	r1, r9
 800c6fe:	f7f3 fdc3 	bl	8000288 <__aeabi_dsub>
 800c702:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c706:	4680      	mov	r8, r0
 800c708:	4689      	mov	r9, r1
 800c70a:	f7f4 fa05 	bl	8000b18 <__aeabi_dcmpgt>
 800c70e:	2800      	cmp	r0, #0
 800c710:	f040 8296 	bne.w	800cc40 <_dtoa_r+0x990>
 800c714:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c718:	4640      	mov	r0, r8
 800c71a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c71e:	4649      	mov	r1, r9
 800c720:	f7f4 f9dc 	bl	8000adc <__aeabi_dcmplt>
 800c724:	2800      	cmp	r0, #0
 800c726:	f040 8289 	bne.w	800cc3c <_dtoa_r+0x98c>
 800c72a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c72e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c730:	2b00      	cmp	r3, #0
 800c732:	f2c0 814e 	blt.w	800c9d2 <_dtoa_r+0x722>
 800c736:	f1bb 0f0e 	cmp.w	fp, #14
 800c73a:	f300 814a 	bgt.w	800c9d2 <_dtoa_r+0x722>
 800c73e:	4b6b      	ldr	r3, [pc, #428]	; (800c8ec <_dtoa_r+0x63c>)
 800c740:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c744:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f280 80dc 	bge.w	800c908 <_dtoa_r+0x658>
 800c750:	9b04      	ldr	r3, [sp, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	f300 80d8 	bgt.w	800c908 <_dtoa_r+0x658>
 800c758:	f040 826f 	bne.w	800cc3a <_dtoa_r+0x98a>
 800c75c:	4b68      	ldr	r3, [pc, #416]	; (800c900 <_dtoa_r+0x650>)
 800c75e:	2200      	movs	r2, #0
 800c760:	4640      	mov	r0, r8
 800c762:	4649      	mov	r1, r9
 800c764:	f7f3 ff48 	bl	80005f8 <__aeabi_dmul>
 800c768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c76c:	f7f4 f9ca 	bl	8000b04 <__aeabi_dcmpge>
 800c770:	9e04      	ldr	r6, [sp, #16]
 800c772:	4637      	mov	r7, r6
 800c774:	2800      	cmp	r0, #0
 800c776:	f040 8245 	bne.w	800cc04 <_dtoa_r+0x954>
 800c77a:	9d00      	ldr	r5, [sp, #0]
 800c77c:	2331      	movs	r3, #49	; 0x31
 800c77e:	f805 3b01 	strb.w	r3, [r5], #1
 800c782:	f10b 0b01 	add.w	fp, fp, #1
 800c786:	e241      	b.n	800cc0c <_dtoa_r+0x95c>
 800c788:	07f2      	lsls	r2, r6, #31
 800c78a:	d505      	bpl.n	800c798 <_dtoa_r+0x4e8>
 800c78c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c790:	f7f3 ff32 	bl	80005f8 <__aeabi_dmul>
 800c794:	3501      	adds	r5, #1
 800c796:	2301      	movs	r3, #1
 800c798:	1076      	asrs	r6, r6, #1
 800c79a:	3708      	adds	r7, #8
 800c79c:	e773      	b.n	800c686 <_dtoa_r+0x3d6>
 800c79e:	2502      	movs	r5, #2
 800c7a0:	e775      	b.n	800c68e <_dtoa_r+0x3de>
 800c7a2:	9e04      	ldr	r6, [sp, #16]
 800c7a4:	465f      	mov	r7, fp
 800c7a6:	e792      	b.n	800c6ce <_dtoa_r+0x41e>
 800c7a8:	9900      	ldr	r1, [sp, #0]
 800c7aa:	4b50      	ldr	r3, [pc, #320]	; (800c8ec <_dtoa_r+0x63c>)
 800c7ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7b0:	4431      	add	r1, r6
 800c7b2:	9102      	str	r1, [sp, #8]
 800c7b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7b6:	eeb0 9a47 	vmov.f32	s18, s14
 800c7ba:	eef0 9a67 	vmov.f32	s19, s15
 800c7be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c7c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7c6:	2900      	cmp	r1, #0
 800c7c8:	d044      	beq.n	800c854 <_dtoa_r+0x5a4>
 800c7ca:	494e      	ldr	r1, [pc, #312]	; (800c904 <_dtoa_r+0x654>)
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	f7f4 f83d 	bl	800084c <__aeabi_ddiv>
 800c7d2:	ec53 2b19 	vmov	r2, r3, d9
 800c7d6:	f7f3 fd57 	bl	8000288 <__aeabi_dsub>
 800c7da:	9d00      	ldr	r5, [sp, #0]
 800c7dc:	ec41 0b19 	vmov	d9, r0, r1
 800c7e0:	4649      	mov	r1, r9
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	f7f4 f9b8 	bl	8000b58 <__aeabi_d2iz>
 800c7e8:	4606      	mov	r6, r0
 800c7ea:	f7f3 fe9b 	bl	8000524 <__aeabi_i2d>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4640      	mov	r0, r8
 800c7f4:	4649      	mov	r1, r9
 800c7f6:	f7f3 fd47 	bl	8000288 <__aeabi_dsub>
 800c7fa:	3630      	adds	r6, #48	; 0x30
 800c7fc:	f805 6b01 	strb.w	r6, [r5], #1
 800c800:	ec53 2b19 	vmov	r2, r3, d9
 800c804:	4680      	mov	r8, r0
 800c806:	4689      	mov	r9, r1
 800c808:	f7f4 f968 	bl	8000adc <__aeabi_dcmplt>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	d164      	bne.n	800c8da <_dtoa_r+0x62a>
 800c810:	4642      	mov	r2, r8
 800c812:	464b      	mov	r3, r9
 800c814:	4937      	ldr	r1, [pc, #220]	; (800c8f4 <_dtoa_r+0x644>)
 800c816:	2000      	movs	r0, #0
 800c818:	f7f3 fd36 	bl	8000288 <__aeabi_dsub>
 800c81c:	ec53 2b19 	vmov	r2, r3, d9
 800c820:	f7f4 f95c 	bl	8000adc <__aeabi_dcmplt>
 800c824:	2800      	cmp	r0, #0
 800c826:	f040 80b6 	bne.w	800c996 <_dtoa_r+0x6e6>
 800c82a:	9b02      	ldr	r3, [sp, #8]
 800c82c:	429d      	cmp	r5, r3
 800c82e:	f43f af7c 	beq.w	800c72a <_dtoa_r+0x47a>
 800c832:	4b31      	ldr	r3, [pc, #196]	; (800c8f8 <_dtoa_r+0x648>)
 800c834:	ec51 0b19 	vmov	r0, r1, d9
 800c838:	2200      	movs	r2, #0
 800c83a:	f7f3 fedd 	bl	80005f8 <__aeabi_dmul>
 800c83e:	4b2e      	ldr	r3, [pc, #184]	; (800c8f8 <_dtoa_r+0x648>)
 800c840:	ec41 0b19 	vmov	d9, r0, r1
 800c844:	2200      	movs	r2, #0
 800c846:	4640      	mov	r0, r8
 800c848:	4649      	mov	r1, r9
 800c84a:	f7f3 fed5 	bl	80005f8 <__aeabi_dmul>
 800c84e:	4680      	mov	r8, r0
 800c850:	4689      	mov	r9, r1
 800c852:	e7c5      	b.n	800c7e0 <_dtoa_r+0x530>
 800c854:	ec51 0b17 	vmov	r0, r1, d7
 800c858:	f7f3 fece 	bl	80005f8 <__aeabi_dmul>
 800c85c:	9b02      	ldr	r3, [sp, #8]
 800c85e:	9d00      	ldr	r5, [sp, #0]
 800c860:	930f      	str	r3, [sp, #60]	; 0x3c
 800c862:	ec41 0b19 	vmov	d9, r0, r1
 800c866:	4649      	mov	r1, r9
 800c868:	4640      	mov	r0, r8
 800c86a:	f7f4 f975 	bl	8000b58 <__aeabi_d2iz>
 800c86e:	4606      	mov	r6, r0
 800c870:	f7f3 fe58 	bl	8000524 <__aeabi_i2d>
 800c874:	3630      	adds	r6, #48	; 0x30
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4640      	mov	r0, r8
 800c87c:	4649      	mov	r1, r9
 800c87e:	f7f3 fd03 	bl	8000288 <__aeabi_dsub>
 800c882:	f805 6b01 	strb.w	r6, [r5], #1
 800c886:	9b02      	ldr	r3, [sp, #8]
 800c888:	429d      	cmp	r5, r3
 800c88a:	4680      	mov	r8, r0
 800c88c:	4689      	mov	r9, r1
 800c88e:	f04f 0200 	mov.w	r2, #0
 800c892:	d124      	bne.n	800c8de <_dtoa_r+0x62e>
 800c894:	4b1b      	ldr	r3, [pc, #108]	; (800c904 <_dtoa_r+0x654>)
 800c896:	ec51 0b19 	vmov	r0, r1, d9
 800c89a:	f7f3 fcf7 	bl	800028c <__adddf3>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	4640      	mov	r0, r8
 800c8a4:	4649      	mov	r1, r9
 800c8a6:	f7f4 f937 	bl	8000b18 <__aeabi_dcmpgt>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d173      	bne.n	800c996 <_dtoa_r+0x6e6>
 800c8ae:	ec53 2b19 	vmov	r2, r3, d9
 800c8b2:	4914      	ldr	r1, [pc, #80]	; (800c904 <_dtoa_r+0x654>)
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	f7f3 fce7 	bl	8000288 <__aeabi_dsub>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	4640      	mov	r0, r8
 800c8c0:	4649      	mov	r1, r9
 800c8c2:	f7f4 f90b 	bl	8000adc <__aeabi_dcmplt>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	f43f af2f 	beq.w	800c72a <_dtoa_r+0x47a>
 800c8cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c8ce:	1e6b      	subs	r3, r5, #1
 800c8d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8d6:	2b30      	cmp	r3, #48	; 0x30
 800c8d8:	d0f8      	beq.n	800c8cc <_dtoa_r+0x61c>
 800c8da:	46bb      	mov	fp, r7
 800c8dc:	e04a      	b.n	800c974 <_dtoa_r+0x6c4>
 800c8de:	4b06      	ldr	r3, [pc, #24]	; (800c8f8 <_dtoa_r+0x648>)
 800c8e0:	f7f3 fe8a 	bl	80005f8 <__aeabi_dmul>
 800c8e4:	4680      	mov	r8, r0
 800c8e6:	4689      	mov	r9, r1
 800c8e8:	e7bd      	b.n	800c866 <_dtoa_r+0x5b6>
 800c8ea:	bf00      	nop
 800c8ec:	0800e348 	.word	0x0800e348
 800c8f0:	0800e320 	.word	0x0800e320
 800c8f4:	3ff00000 	.word	0x3ff00000
 800c8f8:	40240000 	.word	0x40240000
 800c8fc:	401c0000 	.word	0x401c0000
 800c900:	40140000 	.word	0x40140000
 800c904:	3fe00000 	.word	0x3fe00000
 800c908:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c90c:	9d00      	ldr	r5, [sp, #0]
 800c90e:	4642      	mov	r2, r8
 800c910:	464b      	mov	r3, r9
 800c912:	4630      	mov	r0, r6
 800c914:	4639      	mov	r1, r7
 800c916:	f7f3 ff99 	bl	800084c <__aeabi_ddiv>
 800c91a:	f7f4 f91d 	bl	8000b58 <__aeabi_d2iz>
 800c91e:	9001      	str	r0, [sp, #4]
 800c920:	f7f3 fe00 	bl	8000524 <__aeabi_i2d>
 800c924:	4642      	mov	r2, r8
 800c926:	464b      	mov	r3, r9
 800c928:	f7f3 fe66 	bl	80005f8 <__aeabi_dmul>
 800c92c:	4602      	mov	r2, r0
 800c92e:	460b      	mov	r3, r1
 800c930:	4630      	mov	r0, r6
 800c932:	4639      	mov	r1, r7
 800c934:	f7f3 fca8 	bl	8000288 <__aeabi_dsub>
 800c938:	9e01      	ldr	r6, [sp, #4]
 800c93a:	9f04      	ldr	r7, [sp, #16]
 800c93c:	3630      	adds	r6, #48	; 0x30
 800c93e:	f805 6b01 	strb.w	r6, [r5], #1
 800c942:	9e00      	ldr	r6, [sp, #0]
 800c944:	1bae      	subs	r6, r5, r6
 800c946:	42b7      	cmp	r7, r6
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	d134      	bne.n	800c9b8 <_dtoa_r+0x708>
 800c94e:	f7f3 fc9d 	bl	800028c <__adddf3>
 800c952:	4642      	mov	r2, r8
 800c954:	464b      	mov	r3, r9
 800c956:	4606      	mov	r6, r0
 800c958:	460f      	mov	r7, r1
 800c95a:	f7f4 f8dd 	bl	8000b18 <__aeabi_dcmpgt>
 800c95e:	b9c8      	cbnz	r0, 800c994 <_dtoa_r+0x6e4>
 800c960:	4642      	mov	r2, r8
 800c962:	464b      	mov	r3, r9
 800c964:	4630      	mov	r0, r6
 800c966:	4639      	mov	r1, r7
 800c968:	f7f4 f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800c96c:	b110      	cbz	r0, 800c974 <_dtoa_r+0x6c4>
 800c96e:	9b01      	ldr	r3, [sp, #4]
 800c970:	07db      	lsls	r3, r3, #31
 800c972:	d40f      	bmi.n	800c994 <_dtoa_r+0x6e4>
 800c974:	4651      	mov	r1, sl
 800c976:	4620      	mov	r0, r4
 800c978:	f000 fb18 	bl	800cfac <_Bfree>
 800c97c:	2300      	movs	r3, #0
 800c97e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c980:	702b      	strb	r3, [r5, #0]
 800c982:	f10b 0301 	add.w	r3, fp, #1
 800c986:	6013      	str	r3, [r2, #0]
 800c988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f43f ace2 	beq.w	800c354 <_dtoa_r+0xa4>
 800c990:	601d      	str	r5, [r3, #0]
 800c992:	e4df      	b.n	800c354 <_dtoa_r+0xa4>
 800c994:	465f      	mov	r7, fp
 800c996:	462b      	mov	r3, r5
 800c998:	461d      	mov	r5, r3
 800c99a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c99e:	2a39      	cmp	r2, #57	; 0x39
 800c9a0:	d106      	bne.n	800c9b0 <_dtoa_r+0x700>
 800c9a2:	9a00      	ldr	r2, [sp, #0]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d1f7      	bne.n	800c998 <_dtoa_r+0x6e8>
 800c9a8:	9900      	ldr	r1, [sp, #0]
 800c9aa:	2230      	movs	r2, #48	; 0x30
 800c9ac:	3701      	adds	r7, #1
 800c9ae:	700a      	strb	r2, [r1, #0]
 800c9b0:	781a      	ldrb	r2, [r3, #0]
 800c9b2:	3201      	adds	r2, #1
 800c9b4:	701a      	strb	r2, [r3, #0]
 800c9b6:	e790      	b.n	800c8da <_dtoa_r+0x62a>
 800c9b8:	4ba3      	ldr	r3, [pc, #652]	; (800cc48 <_dtoa_r+0x998>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f7f3 fe1c 	bl	80005f8 <__aeabi_dmul>
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	4606      	mov	r6, r0
 800c9c6:	460f      	mov	r7, r1
 800c9c8:	f7f4 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	d09e      	beq.n	800c90e <_dtoa_r+0x65e>
 800c9d0:	e7d0      	b.n	800c974 <_dtoa_r+0x6c4>
 800c9d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9d4:	2a00      	cmp	r2, #0
 800c9d6:	f000 80ca 	beq.w	800cb6e <_dtoa_r+0x8be>
 800c9da:	9a07      	ldr	r2, [sp, #28]
 800c9dc:	2a01      	cmp	r2, #1
 800c9de:	f300 80ad 	bgt.w	800cb3c <_dtoa_r+0x88c>
 800c9e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9e4:	2a00      	cmp	r2, #0
 800c9e6:	f000 80a5 	beq.w	800cb34 <_dtoa_r+0x884>
 800c9ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c9ee:	9e08      	ldr	r6, [sp, #32]
 800c9f0:	9d05      	ldr	r5, [sp, #20]
 800c9f2:	9a05      	ldr	r2, [sp, #20]
 800c9f4:	441a      	add	r2, r3
 800c9f6:	9205      	str	r2, [sp, #20]
 800c9f8:	9a06      	ldr	r2, [sp, #24]
 800c9fa:	2101      	movs	r1, #1
 800c9fc:	441a      	add	r2, r3
 800c9fe:	4620      	mov	r0, r4
 800ca00:	9206      	str	r2, [sp, #24]
 800ca02:	f000 fb89 	bl	800d118 <__i2b>
 800ca06:	4607      	mov	r7, r0
 800ca08:	b165      	cbz	r5, 800ca24 <_dtoa_r+0x774>
 800ca0a:	9b06      	ldr	r3, [sp, #24]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	dd09      	ble.n	800ca24 <_dtoa_r+0x774>
 800ca10:	42ab      	cmp	r3, r5
 800ca12:	9a05      	ldr	r2, [sp, #20]
 800ca14:	bfa8      	it	ge
 800ca16:	462b      	movge	r3, r5
 800ca18:	1ad2      	subs	r2, r2, r3
 800ca1a:	9205      	str	r2, [sp, #20]
 800ca1c:	9a06      	ldr	r2, [sp, #24]
 800ca1e:	1aed      	subs	r5, r5, r3
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	9306      	str	r3, [sp, #24]
 800ca24:	9b08      	ldr	r3, [sp, #32]
 800ca26:	b1f3      	cbz	r3, 800ca66 <_dtoa_r+0x7b6>
 800ca28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f000 80a3 	beq.w	800cb76 <_dtoa_r+0x8c6>
 800ca30:	2e00      	cmp	r6, #0
 800ca32:	dd10      	ble.n	800ca56 <_dtoa_r+0x7a6>
 800ca34:	4639      	mov	r1, r7
 800ca36:	4632      	mov	r2, r6
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f000 fc2d 	bl	800d298 <__pow5mult>
 800ca3e:	4652      	mov	r2, sl
 800ca40:	4601      	mov	r1, r0
 800ca42:	4607      	mov	r7, r0
 800ca44:	4620      	mov	r0, r4
 800ca46:	f000 fb7d 	bl	800d144 <__multiply>
 800ca4a:	4651      	mov	r1, sl
 800ca4c:	4680      	mov	r8, r0
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 faac 	bl	800cfac <_Bfree>
 800ca54:	46c2      	mov	sl, r8
 800ca56:	9b08      	ldr	r3, [sp, #32]
 800ca58:	1b9a      	subs	r2, r3, r6
 800ca5a:	d004      	beq.n	800ca66 <_dtoa_r+0x7b6>
 800ca5c:	4651      	mov	r1, sl
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f000 fc1a 	bl	800d298 <__pow5mult>
 800ca64:	4682      	mov	sl, r0
 800ca66:	2101      	movs	r1, #1
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f000 fb55 	bl	800d118 <__i2b>
 800ca6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	4606      	mov	r6, r0
 800ca74:	f340 8081 	ble.w	800cb7a <_dtoa_r+0x8ca>
 800ca78:	461a      	mov	r2, r3
 800ca7a:	4601      	mov	r1, r0
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f000 fc0b 	bl	800d298 <__pow5mult>
 800ca82:	9b07      	ldr	r3, [sp, #28]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	4606      	mov	r6, r0
 800ca88:	dd7a      	ble.n	800cb80 <_dtoa_r+0x8d0>
 800ca8a:	f04f 0800 	mov.w	r8, #0
 800ca8e:	6933      	ldr	r3, [r6, #16]
 800ca90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ca94:	6918      	ldr	r0, [r3, #16]
 800ca96:	f000 faf1 	bl	800d07c <__hi0bits>
 800ca9a:	f1c0 0020 	rsb	r0, r0, #32
 800ca9e:	9b06      	ldr	r3, [sp, #24]
 800caa0:	4418      	add	r0, r3
 800caa2:	f010 001f 	ands.w	r0, r0, #31
 800caa6:	f000 8094 	beq.w	800cbd2 <_dtoa_r+0x922>
 800caaa:	f1c0 0320 	rsb	r3, r0, #32
 800caae:	2b04      	cmp	r3, #4
 800cab0:	f340 8085 	ble.w	800cbbe <_dtoa_r+0x90e>
 800cab4:	9b05      	ldr	r3, [sp, #20]
 800cab6:	f1c0 001c 	rsb	r0, r0, #28
 800caba:	4403      	add	r3, r0
 800cabc:	9305      	str	r3, [sp, #20]
 800cabe:	9b06      	ldr	r3, [sp, #24]
 800cac0:	4403      	add	r3, r0
 800cac2:	4405      	add	r5, r0
 800cac4:	9306      	str	r3, [sp, #24]
 800cac6:	9b05      	ldr	r3, [sp, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	dd05      	ble.n	800cad8 <_dtoa_r+0x828>
 800cacc:	4651      	mov	r1, sl
 800cace:	461a      	mov	r2, r3
 800cad0:	4620      	mov	r0, r4
 800cad2:	f000 fc3b 	bl	800d34c <__lshift>
 800cad6:	4682      	mov	sl, r0
 800cad8:	9b06      	ldr	r3, [sp, #24]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	dd05      	ble.n	800caea <_dtoa_r+0x83a>
 800cade:	4631      	mov	r1, r6
 800cae0:	461a      	mov	r2, r3
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 fc32 	bl	800d34c <__lshift>
 800cae8:	4606      	mov	r6, r0
 800caea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800caec:	2b00      	cmp	r3, #0
 800caee:	d072      	beq.n	800cbd6 <_dtoa_r+0x926>
 800caf0:	4631      	mov	r1, r6
 800caf2:	4650      	mov	r0, sl
 800caf4:	f000 fc96 	bl	800d424 <__mcmp>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	da6c      	bge.n	800cbd6 <_dtoa_r+0x926>
 800cafc:	2300      	movs	r3, #0
 800cafe:	4651      	mov	r1, sl
 800cb00:	220a      	movs	r2, #10
 800cb02:	4620      	mov	r0, r4
 800cb04:	f000 fa74 	bl	800cff0 <__multadd>
 800cb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb0e:	4682      	mov	sl, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 81b0 	beq.w	800ce76 <_dtoa_r+0xbc6>
 800cb16:	2300      	movs	r3, #0
 800cb18:	4639      	mov	r1, r7
 800cb1a:	220a      	movs	r2, #10
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f000 fa67 	bl	800cff0 <__multadd>
 800cb22:	9b01      	ldr	r3, [sp, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	4607      	mov	r7, r0
 800cb28:	f300 8096 	bgt.w	800cc58 <_dtoa_r+0x9a8>
 800cb2c:	9b07      	ldr	r3, [sp, #28]
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	dc59      	bgt.n	800cbe6 <_dtoa_r+0x936>
 800cb32:	e091      	b.n	800cc58 <_dtoa_r+0x9a8>
 800cb34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb3a:	e758      	b.n	800c9ee <_dtoa_r+0x73e>
 800cb3c:	9b04      	ldr	r3, [sp, #16]
 800cb3e:	1e5e      	subs	r6, r3, #1
 800cb40:	9b08      	ldr	r3, [sp, #32]
 800cb42:	42b3      	cmp	r3, r6
 800cb44:	bfbf      	itttt	lt
 800cb46:	9b08      	ldrlt	r3, [sp, #32]
 800cb48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cb4a:	9608      	strlt	r6, [sp, #32]
 800cb4c:	1af3      	sublt	r3, r6, r3
 800cb4e:	bfb4      	ite	lt
 800cb50:	18d2      	addlt	r2, r2, r3
 800cb52:	1b9e      	subge	r6, r3, r6
 800cb54:	9b04      	ldr	r3, [sp, #16]
 800cb56:	bfbc      	itt	lt
 800cb58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cb5a:	2600      	movlt	r6, #0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	bfb7      	itett	lt
 800cb60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cb64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cb68:	1a9d      	sublt	r5, r3, r2
 800cb6a:	2300      	movlt	r3, #0
 800cb6c:	e741      	b.n	800c9f2 <_dtoa_r+0x742>
 800cb6e:	9e08      	ldr	r6, [sp, #32]
 800cb70:	9d05      	ldr	r5, [sp, #20]
 800cb72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cb74:	e748      	b.n	800ca08 <_dtoa_r+0x758>
 800cb76:	9a08      	ldr	r2, [sp, #32]
 800cb78:	e770      	b.n	800ca5c <_dtoa_r+0x7ac>
 800cb7a:	9b07      	ldr	r3, [sp, #28]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	dc19      	bgt.n	800cbb4 <_dtoa_r+0x904>
 800cb80:	9b02      	ldr	r3, [sp, #8]
 800cb82:	b9bb      	cbnz	r3, 800cbb4 <_dtoa_r+0x904>
 800cb84:	9b03      	ldr	r3, [sp, #12]
 800cb86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb8a:	b99b      	cbnz	r3, 800cbb4 <_dtoa_r+0x904>
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb92:	0d1b      	lsrs	r3, r3, #20
 800cb94:	051b      	lsls	r3, r3, #20
 800cb96:	b183      	cbz	r3, 800cbba <_dtoa_r+0x90a>
 800cb98:	9b05      	ldr	r3, [sp, #20]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	9305      	str	r3, [sp, #20]
 800cb9e:	9b06      	ldr	r3, [sp, #24]
 800cba0:	3301      	adds	r3, #1
 800cba2:	9306      	str	r3, [sp, #24]
 800cba4:	f04f 0801 	mov.w	r8, #1
 800cba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f47f af6f 	bne.w	800ca8e <_dtoa_r+0x7de>
 800cbb0:	2001      	movs	r0, #1
 800cbb2:	e774      	b.n	800ca9e <_dtoa_r+0x7ee>
 800cbb4:	f04f 0800 	mov.w	r8, #0
 800cbb8:	e7f6      	b.n	800cba8 <_dtoa_r+0x8f8>
 800cbba:	4698      	mov	r8, r3
 800cbbc:	e7f4      	b.n	800cba8 <_dtoa_r+0x8f8>
 800cbbe:	d082      	beq.n	800cac6 <_dtoa_r+0x816>
 800cbc0:	9a05      	ldr	r2, [sp, #20]
 800cbc2:	331c      	adds	r3, #28
 800cbc4:	441a      	add	r2, r3
 800cbc6:	9205      	str	r2, [sp, #20]
 800cbc8:	9a06      	ldr	r2, [sp, #24]
 800cbca:	441a      	add	r2, r3
 800cbcc:	441d      	add	r5, r3
 800cbce:	9206      	str	r2, [sp, #24]
 800cbd0:	e779      	b.n	800cac6 <_dtoa_r+0x816>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	e7f4      	b.n	800cbc0 <_dtoa_r+0x910>
 800cbd6:	9b04      	ldr	r3, [sp, #16]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	dc37      	bgt.n	800cc4c <_dtoa_r+0x99c>
 800cbdc:	9b07      	ldr	r3, [sp, #28]
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	dd34      	ble.n	800cc4c <_dtoa_r+0x99c>
 800cbe2:	9b04      	ldr	r3, [sp, #16]
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	9b01      	ldr	r3, [sp, #4]
 800cbe8:	b963      	cbnz	r3, 800cc04 <_dtoa_r+0x954>
 800cbea:	4631      	mov	r1, r6
 800cbec:	2205      	movs	r2, #5
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f000 f9fe 	bl	800cff0 <__multadd>
 800cbf4:	4601      	mov	r1, r0
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	4650      	mov	r0, sl
 800cbfa:	f000 fc13 	bl	800d424 <__mcmp>
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	f73f adbb 	bgt.w	800c77a <_dtoa_r+0x4ca>
 800cc04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc06:	9d00      	ldr	r5, [sp, #0]
 800cc08:	ea6f 0b03 	mvn.w	fp, r3
 800cc0c:	f04f 0800 	mov.w	r8, #0
 800cc10:	4631      	mov	r1, r6
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 f9ca 	bl	800cfac <_Bfree>
 800cc18:	2f00      	cmp	r7, #0
 800cc1a:	f43f aeab 	beq.w	800c974 <_dtoa_r+0x6c4>
 800cc1e:	f1b8 0f00 	cmp.w	r8, #0
 800cc22:	d005      	beq.n	800cc30 <_dtoa_r+0x980>
 800cc24:	45b8      	cmp	r8, r7
 800cc26:	d003      	beq.n	800cc30 <_dtoa_r+0x980>
 800cc28:	4641      	mov	r1, r8
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 f9be 	bl	800cfac <_Bfree>
 800cc30:	4639      	mov	r1, r7
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 f9ba 	bl	800cfac <_Bfree>
 800cc38:	e69c      	b.n	800c974 <_dtoa_r+0x6c4>
 800cc3a:	2600      	movs	r6, #0
 800cc3c:	4637      	mov	r7, r6
 800cc3e:	e7e1      	b.n	800cc04 <_dtoa_r+0x954>
 800cc40:	46bb      	mov	fp, r7
 800cc42:	4637      	mov	r7, r6
 800cc44:	e599      	b.n	800c77a <_dtoa_r+0x4ca>
 800cc46:	bf00      	nop
 800cc48:	40240000 	.word	0x40240000
 800cc4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f000 80c8 	beq.w	800cde4 <_dtoa_r+0xb34>
 800cc54:	9b04      	ldr	r3, [sp, #16]
 800cc56:	9301      	str	r3, [sp, #4]
 800cc58:	2d00      	cmp	r5, #0
 800cc5a:	dd05      	ble.n	800cc68 <_dtoa_r+0x9b8>
 800cc5c:	4639      	mov	r1, r7
 800cc5e:	462a      	mov	r2, r5
 800cc60:	4620      	mov	r0, r4
 800cc62:	f000 fb73 	bl	800d34c <__lshift>
 800cc66:	4607      	mov	r7, r0
 800cc68:	f1b8 0f00 	cmp.w	r8, #0
 800cc6c:	d05b      	beq.n	800cd26 <_dtoa_r+0xa76>
 800cc6e:	6879      	ldr	r1, [r7, #4]
 800cc70:	4620      	mov	r0, r4
 800cc72:	f000 f95b 	bl	800cf2c <_Balloc>
 800cc76:	4605      	mov	r5, r0
 800cc78:	b928      	cbnz	r0, 800cc86 <_dtoa_r+0x9d6>
 800cc7a:	4b83      	ldr	r3, [pc, #524]	; (800ce88 <_dtoa_r+0xbd8>)
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cc82:	f7ff bb2e 	b.w	800c2e2 <_dtoa_r+0x32>
 800cc86:	693a      	ldr	r2, [r7, #16]
 800cc88:	3202      	adds	r2, #2
 800cc8a:	0092      	lsls	r2, r2, #2
 800cc8c:	f107 010c 	add.w	r1, r7, #12
 800cc90:	300c      	adds	r0, #12
 800cc92:	f000 fee7 	bl	800da64 <memcpy>
 800cc96:	2201      	movs	r2, #1
 800cc98:	4629      	mov	r1, r5
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f000 fb56 	bl	800d34c <__lshift>
 800cca0:	9b00      	ldr	r3, [sp, #0]
 800cca2:	3301      	adds	r3, #1
 800cca4:	9304      	str	r3, [sp, #16]
 800cca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccaa:	4413      	add	r3, r2
 800ccac:	9308      	str	r3, [sp, #32]
 800ccae:	9b02      	ldr	r3, [sp, #8]
 800ccb0:	f003 0301 	and.w	r3, r3, #1
 800ccb4:	46b8      	mov	r8, r7
 800ccb6:	9306      	str	r3, [sp, #24]
 800ccb8:	4607      	mov	r7, r0
 800ccba:	9b04      	ldr	r3, [sp, #16]
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	4650      	mov	r0, sl
 800ccc2:	9301      	str	r3, [sp, #4]
 800ccc4:	f7ff fa69 	bl	800c19a <quorem>
 800ccc8:	4641      	mov	r1, r8
 800ccca:	9002      	str	r0, [sp, #8]
 800cccc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ccd0:	4650      	mov	r0, sl
 800ccd2:	f000 fba7 	bl	800d424 <__mcmp>
 800ccd6:	463a      	mov	r2, r7
 800ccd8:	9005      	str	r0, [sp, #20]
 800ccda:	4631      	mov	r1, r6
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f000 fbbd 	bl	800d45c <__mdiff>
 800cce2:	68c2      	ldr	r2, [r0, #12]
 800cce4:	4605      	mov	r5, r0
 800cce6:	bb02      	cbnz	r2, 800cd2a <_dtoa_r+0xa7a>
 800cce8:	4601      	mov	r1, r0
 800ccea:	4650      	mov	r0, sl
 800ccec:	f000 fb9a 	bl	800d424 <__mcmp>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	9209      	str	r2, [sp, #36]	; 0x24
 800ccf8:	f000 f958 	bl	800cfac <_Bfree>
 800ccfc:	9b07      	ldr	r3, [sp, #28]
 800ccfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd00:	9d04      	ldr	r5, [sp, #16]
 800cd02:	ea43 0102 	orr.w	r1, r3, r2
 800cd06:	9b06      	ldr	r3, [sp, #24]
 800cd08:	4319      	orrs	r1, r3
 800cd0a:	d110      	bne.n	800cd2e <_dtoa_r+0xa7e>
 800cd0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd10:	d029      	beq.n	800cd66 <_dtoa_r+0xab6>
 800cd12:	9b05      	ldr	r3, [sp, #20]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	dd02      	ble.n	800cd1e <_dtoa_r+0xa6e>
 800cd18:	9b02      	ldr	r3, [sp, #8]
 800cd1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cd1e:	9b01      	ldr	r3, [sp, #4]
 800cd20:	f883 9000 	strb.w	r9, [r3]
 800cd24:	e774      	b.n	800cc10 <_dtoa_r+0x960>
 800cd26:	4638      	mov	r0, r7
 800cd28:	e7ba      	b.n	800cca0 <_dtoa_r+0x9f0>
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	e7e1      	b.n	800ccf2 <_dtoa_r+0xa42>
 800cd2e:	9b05      	ldr	r3, [sp, #20]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	db04      	blt.n	800cd3e <_dtoa_r+0xa8e>
 800cd34:	9907      	ldr	r1, [sp, #28]
 800cd36:	430b      	orrs	r3, r1
 800cd38:	9906      	ldr	r1, [sp, #24]
 800cd3a:	430b      	orrs	r3, r1
 800cd3c:	d120      	bne.n	800cd80 <_dtoa_r+0xad0>
 800cd3e:	2a00      	cmp	r2, #0
 800cd40:	dded      	ble.n	800cd1e <_dtoa_r+0xa6e>
 800cd42:	4651      	mov	r1, sl
 800cd44:	2201      	movs	r2, #1
 800cd46:	4620      	mov	r0, r4
 800cd48:	f000 fb00 	bl	800d34c <__lshift>
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4682      	mov	sl, r0
 800cd50:	f000 fb68 	bl	800d424 <__mcmp>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	dc03      	bgt.n	800cd60 <_dtoa_r+0xab0>
 800cd58:	d1e1      	bne.n	800cd1e <_dtoa_r+0xa6e>
 800cd5a:	f019 0f01 	tst.w	r9, #1
 800cd5e:	d0de      	beq.n	800cd1e <_dtoa_r+0xa6e>
 800cd60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd64:	d1d8      	bne.n	800cd18 <_dtoa_r+0xa68>
 800cd66:	9a01      	ldr	r2, [sp, #4]
 800cd68:	2339      	movs	r3, #57	; 0x39
 800cd6a:	7013      	strb	r3, [r2, #0]
 800cd6c:	462b      	mov	r3, r5
 800cd6e:	461d      	mov	r5, r3
 800cd70:	3b01      	subs	r3, #1
 800cd72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd76:	2a39      	cmp	r2, #57	; 0x39
 800cd78:	d06c      	beq.n	800ce54 <_dtoa_r+0xba4>
 800cd7a:	3201      	adds	r2, #1
 800cd7c:	701a      	strb	r2, [r3, #0]
 800cd7e:	e747      	b.n	800cc10 <_dtoa_r+0x960>
 800cd80:	2a00      	cmp	r2, #0
 800cd82:	dd07      	ble.n	800cd94 <_dtoa_r+0xae4>
 800cd84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd88:	d0ed      	beq.n	800cd66 <_dtoa_r+0xab6>
 800cd8a:	9a01      	ldr	r2, [sp, #4]
 800cd8c:	f109 0301 	add.w	r3, r9, #1
 800cd90:	7013      	strb	r3, [r2, #0]
 800cd92:	e73d      	b.n	800cc10 <_dtoa_r+0x960>
 800cd94:	9b04      	ldr	r3, [sp, #16]
 800cd96:	9a08      	ldr	r2, [sp, #32]
 800cd98:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d043      	beq.n	800ce28 <_dtoa_r+0xb78>
 800cda0:	4651      	mov	r1, sl
 800cda2:	2300      	movs	r3, #0
 800cda4:	220a      	movs	r2, #10
 800cda6:	4620      	mov	r0, r4
 800cda8:	f000 f922 	bl	800cff0 <__multadd>
 800cdac:	45b8      	cmp	r8, r7
 800cdae:	4682      	mov	sl, r0
 800cdb0:	f04f 0300 	mov.w	r3, #0
 800cdb4:	f04f 020a 	mov.w	r2, #10
 800cdb8:	4641      	mov	r1, r8
 800cdba:	4620      	mov	r0, r4
 800cdbc:	d107      	bne.n	800cdce <_dtoa_r+0xb1e>
 800cdbe:	f000 f917 	bl	800cff0 <__multadd>
 800cdc2:	4680      	mov	r8, r0
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	9b04      	ldr	r3, [sp, #16]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	9304      	str	r3, [sp, #16]
 800cdcc:	e775      	b.n	800ccba <_dtoa_r+0xa0a>
 800cdce:	f000 f90f 	bl	800cff0 <__multadd>
 800cdd2:	4639      	mov	r1, r7
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	220a      	movs	r2, #10
 800cdda:	4620      	mov	r0, r4
 800cddc:	f000 f908 	bl	800cff0 <__multadd>
 800cde0:	4607      	mov	r7, r0
 800cde2:	e7f0      	b.n	800cdc6 <_dtoa_r+0xb16>
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	9301      	str	r3, [sp, #4]
 800cde8:	9d00      	ldr	r5, [sp, #0]
 800cdea:	4631      	mov	r1, r6
 800cdec:	4650      	mov	r0, sl
 800cdee:	f7ff f9d4 	bl	800c19a <quorem>
 800cdf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cdf6:	9b00      	ldr	r3, [sp, #0]
 800cdf8:	f805 9b01 	strb.w	r9, [r5], #1
 800cdfc:	1aea      	subs	r2, r5, r3
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	4293      	cmp	r3, r2
 800ce02:	dd07      	ble.n	800ce14 <_dtoa_r+0xb64>
 800ce04:	4651      	mov	r1, sl
 800ce06:	2300      	movs	r3, #0
 800ce08:	220a      	movs	r2, #10
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f000 f8f0 	bl	800cff0 <__multadd>
 800ce10:	4682      	mov	sl, r0
 800ce12:	e7ea      	b.n	800cdea <_dtoa_r+0xb3a>
 800ce14:	9b01      	ldr	r3, [sp, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	bfc8      	it	gt
 800ce1a:	461d      	movgt	r5, r3
 800ce1c:	9b00      	ldr	r3, [sp, #0]
 800ce1e:	bfd8      	it	le
 800ce20:	2501      	movle	r5, #1
 800ce22:	441d      	add	r5, r3
 800ce24:	f04f 0800 	mov.w	r8, #0
 800ce28:	4651      	mov	r1, sl
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f000 fa8d 	bl	800d34c <__lshift>
 800ce32:	4631      	mov	r1, r6
 800ce34:	4682      	mov	sl, r0
 800ce36:	f000 faf5 	bl	800d424 <__mcmp>
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	dc96      	bgt.n	800cd6c <_dtoa_r+0xabc>
 800ce3e:	d102      	bne.n	800ce46 <_dtoa_r+0xb96>
 800ce40:	f019 0f01 	tst.w	r9, #1
 800ce44:	d192      	bne.n	800cd6c <_dtoa_r+0xabc>
 800ce46:	462b      	mov	r3, r5
 800ce48:	461d      	mov	r5, r3
 800ce4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce4e:	2a30      	cmp	r2, #48	; 0x30
 800ce50:	d0fa      	beq.n	800ce48 <_dtoa_r+0xb98>
 800ce52:	e6dd      	b.n	800cc10 <_dtoa_r+0x960>
 800ce54:	9a00      	ldr	r2, [sp, #0]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d189      	bne.n	800cd6e <_dtoa_r+0xabe>
 800ce5a:	f10b 0b01 	add.w	fp, fp, #1
 800ce5e:	2331      	movs	r3, #49	; 0x31
 800ce60:	e796      	b.n	800cd90 <_dtoa_r+0xae0>
 800ce62:	4b0a      	ldr	r3, [pc, #40]	; (800ce8c <_dtoa_r+0xbdc>)
 800ce64:	f7ff ba99 	b.w	800c39a <_dtoa_r+0xea>
 800ce68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f47f aa6d 	bne.w	800c34a <_dtoa_r+0x9a>
 800ce70:	4b07      	ldr	r3, [pc, #28]	; (800ce90 <_dtoa_r+0xbe0>)
 800ce72:	f7ff ba92 	b.w	800c39a <_dtoa_r+0xea>
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	dcb5      	bgt.n	800cde8 <_dtoa_r+0xb38>
 800ce7c:	9b07      	ldr	r3, [sp, #28]
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	f73f aeb1 	bgt.w	800cbe6 <_dtoa_r+0x936>
 800ce84:	e7b0      	b.n	800cde8 <_dtoa_r+0xb38>
 800ce86:	bf00      	nop
 800ce88:	0800e2b0 	.word	0x0800e2b0
 800ce8c:	0800e210 	.word	0x0800e210
 800ce90:	0800e234 	.word	0x0800e234

0800ce94 <_free_r>:
 800ce94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce96:	2900      	cmp	r1, #0
 800ce98:	d044      	beq.n	800cf24 <_free_r+0x90>
 800ce9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce9e:	9001      	str	r0, [sp, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f1a1 0404 	sub.w	r4, r1, #4
 800cea6:	bfb8      	it	lt
 800cea8:	18e4      	addlt	r4, r4, r3
 800ceaa:	f7fe fb4f 	bl	800b54c <__malloc_lock>
 800ceae:	4a1e      	ldr	r2, [pc, #120]	; (800cf28 <_free_r+0x94>)
 800ceb0:	9801      	ldr	r0, [sp, #4]
 800ceb2:	6813      	ldr	r3, [r2, #0]
 800ceb4:	b933      	cbnz	r3, 800cec4 <_free_r+0x30>
 800ceb6:	6063      	str	r3, [r4, #4]
 800ceb8:	6014      	str	r4, [r2, #0]
 800ceba:	b003      	add	sp, #12
 800cebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cec0:	f7fe bb4a 	b.w	800b558 <__malloc_unlock>
 800cec4:	42a3      	cmp	r3, r4
 800cec6:	d908      	bls.n	800ceda <_free_r+0x46>
 800cec8:	6825      	ldr	r5, [r4, #0]
 800ceca:	1961      	adds	r1, r4, r5
 800cecc:	428b      	cmp	r3, r1
 800cece:	bf01      	itttt	eq
 800ced0:	6819      	ldreq	r1, [r3, #0]
 800ced2:	685b      	ldreq	r3, [r3, #4]
 800ced4:	1949      	addeq	r1, r1, r5
 800ced6:	6021      	streq	r1, [r4, #0]
 800ced8:	e7ed      	b.n	800ceb6 <_free_r+0x22>
 800ceda:	461a      	mov	r2, r3
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	b10b      	cbz	r3, 800cee4 <_free_r+0x50>
 800cee0:	42a3      	cmp	r3, r4
 800cee2:	d9fa      	bls.n	800ceda <_free_r+0x46>
 800cee4:	6811      	ldr	r1, [r2, #0]
 800cee6:	1855      	adds	r5, r2, r1
 800cee8:	42a5      	cmp	r5, r4
 800ceea:	d10b      	bne.n	800cf04 <_free_r+0x70>
 800ceec:	6824      	ldr	r4, [r4, #0]
 800ceee:	4421      	add	r1, r4
 800cef0:	1854      	adds	r4, r2, r1
 800cef2:	42a3      	cmp	r3, r4
 800cef4:	6011      	str	r1, [r2, #0]
 800cef6:	d1e0      	bne.n	800ceba <_free_r+0x26>
 800cef8:	681c      	ldr	r4, [r3, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	6053      	str	r3, [r2, #4]
 800cefe:	440c      	add	r4, r1
 800cf00:	6014      	str	r4, [r2, #0]
 800cf02:	e7da      	b.n	800ceba <_free_r+0x26>
 800cf04:	d902      	bls.n	800cf0c <_free_r+0x78>
 800cf06:	230c      	movs	r3, #12
 800cf08:	6003      	str	r3, [r0, #0]
 800cf0a:	e7d6      	b.n	800ceba <_free_r+0x26>
 800cf0c:	6825      	ldr	r5, [r4, #0]
 800cf0e:	1961      	adds	r1, r4, r5
 800cf10:	428b      	cmp	r3, r1
 800cf12:	bf04      	itt	eq
 800cf14:	6819      	ldreq	r1, [r3, #0]
 800cf16:	685b      	ldreq	r3, [r3, #4]
 800cf18:	6063      	str	r3, [r4, #4]
 800cf1a:	bf04      	itt	eq
 800cf1c:	1949      	addeq	r1, r1, r5
 800cf1e:	6021      	streq	r1, [r4, #0]
 800cf20:	6054      	str	r4, [r2, #4]
 800cf22:	e7ca      	b.n	800ceba <_free_r+0x26>
 800cf24:	b003      	add	sp, #12
 800cf26:	bd30      	pop	{r4, r5, pc}
 800cf28:	20000b38 	.word	0x20000b38

0800cf2c <_Balloc>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	69c6      	ldr	r6, [r0, #28]
 800cf30:	4604      	mov	r4, r0
 800cf32:	460d      	mov	r5, r1
 800cf34:	b976      	cbnz	r6, 800cf54 <_Balloc+0x28>
 800cf36:	2010      	movs	r0, #16
 800cf38:	f7fe fa58 	bl	800b3ec <malloc>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	61e0      	str	r0, [r4, #28]
 800cf40:	b920      	cbnz	r0, 800cf4c <_Balloc+0x20>
 800cf42:	4b18      	ldr	r3, [pc, #96]	; (800cfa4 <_Balloc+0x78>)
 800cf44:	4818      	ldr	r0, [pc, #96]	; (800cfa8 <_Balloc+0x7c>)
 800cf46:	216b      	movs	r1, #107	; 0x6b
 800cf48:	f000 fd9a 	bl	800da80 <__assert_func>
 800cf4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf50:	6006      	str	r6, [r0, #0]
 800cf52:	60c6      	str	r6, [r0, #12]
 800cf54:	69e6      	ldr	r6, [r4, #28]
 800cf56:	68f3      	ldr	r3, [r6, #12]
 800cf58:	b183      	cbz	r3, 800cf7c <_Balloc+0x50>
 800cf5a:	69e3      	ldr	r3, [r4, #28]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf62:	b9b8      	cbnz	r0, 800cf94 <_Balloc+0x68>
 800cf64:	2101      	movs	r1, #1
 800cf66:	fa01 f605 	lsl.w	r6, r1, r5
 800cf6a:	1d72      	adds	r2, r6, #5
 800cf6c:	0092      	lsls	r2, r2, #2
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f000 fda4 	bl	800dabc <_calloc_r>
 800cf74:	b160      	cbz	r0, 800cf90 <_Balloc+0x64>
 800cf76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf7a:	e00e      	b.n	800cf9a <_Balloc+0x6e>
 800cf7c:	2221      	movs	r2, #33	; 0x21
 800cf7e:	2104      	movs	r1, #4
 800cf80:	4620      	mov	r0, r4
 800cf82:	f000 fd9b 	bl	800dabc <_calloc_r>
 800cf86:	69e3      	ldr	r3, [r4, #28]
 800cf88:	60f0      	str	r0, [r6, #12]
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1e4      	bne.n	800cf5a <_Balloc+0x2e>
 800cf90:	2000      	movs	r0, #0
 800cf92:	bd70      	pop	{r4, r5, r6, pc}
 800cf94:	6802      	ldr	r2, [r0, #0]
 800cf96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfa0:	e7f7      	b.n	800cf92 <_Balloc+0x66>
 800cfa2:	bf00      	nop
 800cfa4:	0800e241 	.word	0x0800e241
 800cfa8:	0800e2c1 	.word	0x0800e2c1

0800cfac <_Bfree>:
 800cfac:	b570      	push	{r4, r5, r6, lr}
 800cfae:	69c6      	ldr	r6, [r0, #28]
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	b976      	cbnz	r6, 800cfd4 <_Bfree+0x28>
 800cfb6:	2010      	movs	r0, #16
 800cfb8:	f7fe fa18 	bl	800b3ec <malloc>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	61e8      	str	r0, [r5, #28]
 800cfc0:	b920      	cbnz	r0, 800cfcc <_Bfree+0x20>
 800cfc2:	4b09      	ldr	r3, [pc, #36]	; (800cfe8 <_Bfree+0x3c>)
 800cfc4:	4809      	ldr	r0, [pc, #36]	; (800cfec <_Bfree+0x40>)
 800cfc6:	218f      	movs	r1, #143	; 0x8f
 800cfc8:	f000 fd5a 	bl	800da80 <__assert_func>
 800cfcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfd0:	6006      	str	r6, [r0, #0]
 800cfd2:	60c6      	str	r6, [r0, #12]
 800cfd4:	b13c      	cbz	r4, 800cfe6 <_Bfree+0x3a>
 800cfd6:	69eb      	ldr	r3, [r5, #28]
 800cfd8:	6862      	ldr	r2, [r4, #4]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfe0:	6021      	str	r1, [r4, #0]
 800cfe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfe6:	bd70      	pop	{r4, r5, r6, pc}
 800cfe8:	0800e241 	.word	0x0800e241
 800cfec:	0800e2c1 	.word	0x0800e2c1

0800cff0 <__multadd>:
 800cff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff4:	690d      	ldr	r5, [r1, #16]
 800cff6:	4607      	mov	r7, r0
 800cff8:	460c      	mov	r4, r1
 800cffa:	461e      	mov	r6, r3
 800cffc:	f101 0c14 	add.w	ip, r1, #20
 800d000:	2000      	movs	r0, #0
 800d002:	f8dc 3000 	ldr.w	r3, [ip]
 800d006:	b299      	uxth	r1, r3
 800d008:	fb02 6101 	mla	r1, r2, r1, r6
 800d00c:	0c1e      	lsrs	r6, r3, #16
 800d00e:	0c0b      	lsrs	r3, r1, #16
 800d010:	fb02 3306 	mla	r3, r2, r6, r3
 800d014:	b289      	uxth	r1, r1
 800d016:	3001      	adds	r0, #1
 800d018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d01c:	4285      	cmp	r5, r0
 800d01e:	f84c 1b04 	str.w	r1, [ip], #4
 800d022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d026:	dcec      	bgt.n	800d002 <__multadd+0x12>
 800d028:	b30e      	cbz	r6, 800d06e <__multadd+0x7e>
 800d02a:	68a3      	ldr	r3, [r4, #8]
 800d02c:	42ab      	cmp	r3, r5
 800d02e:	dc19      	bgt.n	800d064 <__multadd+0x74>
 800d030:	6861      	ldr	r1, [r4, #4]
 800d032:	4638      	mov	r0, r7
 800d034:	3101      	adds	r1, #1
 800d036:	f7ff ff79 	bl	800cf2c <_Balloc>
 800d03a:	4680      	mov	r8, r0
 800d03c:	b928      	cbnz	r0, 800d04a <__multadd+0x5a>
 800d03e:	4602      	mov	r2, r0
 800d040:	4b0c      	ldr	r3, [pc, #48]	; (800d074 <__multadd+0x84>)
 800d042:	480d      	ldr	r0, [pc, #52]	; (800d078 <__multadd+0x88>)
 800d044:	21ba      	movs	r1, #186	; 0xba
 800d046:	f000 fd1b 	bl	800da80 <__assert_func>
 800d04a:	6922      	ldr	r2, [r4, #16]
 800d04c:	3202      	adds	r2, #2
 800d04e:	f104 010c 	add.w	r1, r4, #12
 800d052:	0092      	lsls	r2, r2, #2
 800d054:	300c      	adds	r0, #12
 800d056:	f000 fd05 	bl	800da64 <memcpy>
 800d05a:	4621      	mov	r1, r4
 800d05c:	4638      	mov	r0, r7
 800d05e:	f7ff ffa5 	bl	800cfac <_Bfree>
 800d062:	4644      	mov	r4, r8
 800d064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d068:	3501      	adds	r5, #1
 800d06a:	615e      	str	r6, [r3, #20]
 800d06c:	6125      	str	r5, [r4, #16]
 800d06e:	4620      	mov	r0, r4
 800d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d074:	0800e2b0 	.word	0x0800e2b0
 800d078:	0800e2c1 	.word	0x0800e2c1

0800d07c <__hi0bits>:
 800d07c:	0c03      	lsrs	r3, r0, #16
 800d07e:	041b      	lsls	r3, r3, #16
 800d080:	b9d3      	cbnz	r3, 800d0b8 <__hi0bits+0x3c>
 800d082:	0400      	lsls	r0, r0, #16
 800d084:	2310      	movs	r3, #16
 800d086:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d08a:	bf04      	itt	eq
 800d08c:	0200      	lsleq	r0, r0, #8
 800d08e:	3308      	addeq	r3, #8
 800d090:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d094:	bf04      	itt	eq
 800d096:	0100      	lsleq	r0, r0, #4
 800d098:	3304      	addeq	r3, #4
 800d09a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d09e:	bf04      	itt	eq
 800d0a0:	0080      	lsleq	r0, r0, #2
 800d0a2:	3302      	addeq	r3, #2
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	db05      	blt.n	800d0b4 <__hi0bits+0x38>
 800d0a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d0ac:	f103 0301 	add.w	r3, r3, #1
 800d0b0:	bf08      	it	eq
 800d0b2:	2320      	moveq	r3, #32
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	4770      	bx	lr
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	e7e4      	b.n	800d086 <__hi0bits+0xa>

0800d0bc <__lo0bits>:
 800d0bc:	6803      	ldr	r3, [r0, #0]
 800d0be:	f013 0207 	ands.w	r2, r3, #7
 800d0c2:	d00c      	beq.n	800d0de <__lo0bits+0x22>
 800d0c4:	07d9      	lsls	r1, r3, #31
 800d0c6:	d422      	bmi.n	800d10e <__lo0bits+0x52>
 800d0c8:	079a      	lsls	r2, r3, #30
 800d0ca:	bf49      	itett	mi
 800d0cc:	085b      	lsrmi	r3, r3, #1
 800d0ce:	089b      	lsrpl	r3, r3, #2
 800d0d0:	6003      	strmi	r3, [r0, #0]
 800d0d2:	2201      	movmi	r2, #1
 800d0d4:	bf5c      	itt	pl
 800d0d6:	6003      	strpl	r3, [r0, #0]
 800d0d8:	2202      	movpl	r2, #2
 800d0da:	4610      	mov	r0, r2
 800d0dc:	4770      	bx	lr
 800d0de:	b299      	uxth	r1, r3
 800d0e0:	b909      	cbnz	r1, 800d0e6 <__lo0bits+0x2a>
 800d0e2:	0c1b      	lsrs	r3, r3, #16
 800d0e4:	2210      	movs	r2, #16
 800d0e6:	b2d9      	uxtb	r1, r3
 800d0e8:	b909      	cbnz	r1, 800d0ee <__lo0bits+0x32>
 800d0ea:	3208      	adds	r2, #8
 800d0ec:	0a1b      	lsrs	r3, r3, #8
 800d0ee:	0719      	lsls	r1, r3, #28
 800d0f0:	bf04      	itt	eq
 800d0f2:	091b      	lsreq	r3, r3, #4
 800d0f4:	3204      	addeq	r2, #4
 800d0f6:	0799      	lsls	r1, r3, #30
 800d0f8:	bf04      	itt	eq
 800d0fa:	089b      	lsreq	r3, r3, #2
 800d0fc:	3202      	addeq	r2, #2
 800d0fe:	07d9      	lsls	r1, r3, #31
 800d100:	d403      	bmi.n	800d10a <__lo0bits+0x4e>
 800d102:	085b      	lsrs	r3, r3, #1
 800d104:	f102 0201 	add.w	r2, r2, #1
 800d108:	d003      	beq.n	800d112 <__lo0bits+0x56>
 800d10a:	6003      	str	r3, [r0, #0]
 800d10c:	e7e5      	b.n	800d0da <__lo0bits+0x1e>
 800d10e:	2200      	movs	r2, #0
 800d110:	e7e3      	b.n	800d0da <__lo0bits+0x1e>
 800d112:	2220      	movs	r2, #32
 800d114:	e7e1      	b.n	800d0da <__lo0bits+0x1e>
	...

0800d118 <__i2b>:
 800d118:	b510      	push	{r4, lr}
 800d11a:	460c      	mov	r4, r1
 800d11c:	2101      	movs	r1, #1
 800d11e:	f7ff ff05 	bl	800cf2c <_Balloc>
 800d122:	4602      	mov	r2, r0
 800d124:	b928      	cbnz	r0, 800d132 <__i2b+0x1a>
 800d126:	4b05      	ldr	r3, [pc, #20]	; (800d13c <__i2b+0x24>)
 800d128:	4805      	ldr	r0, [pc, #20]	; (800d140 <__i2b+0x28>)
 800d12a:	f240 1145 	movw	r1, #325	; 0x145
 800d12e:	f000 fca7 	bl	800da80 <__assert_func>
 800d132:	2301      	movs	r3, #1
 800d134:	6144      	str	r4, [r0, #20]
 800d136:	6103      	str	r3, [r0, #16]
 800d138:	bd10      	pop	{r4, pc}
 800d13a:	bf00      	nop
 800d13c:	0800e2b0 	.word	0x0800e2b0
 800d140:	0800e2c1 	.word	0x0800e2c1

0800d144 <__multiply>:
 800d144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d148:	4691      	mov	r9, r2
 800d14a:	690a      	ldr	r2, [r1, #16]
 800d14c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d150:	429a      	cmp	r2, r3
 800d152:	bfb8      	it	lt
 800d154:	460b      	movlt	r3, r1
 800d156:	460c      	mov	r4, r1
 800d158:	bfbc      	itt	lt
 800d15a:	464c      	movlt	r4, r9
 800d15c:	4699      	movlt	r9, r3
 800d15e:	6927      	ldr	r7, [r4, #16]
 800d160:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d164:	68a3      	ldr	r3, [r4, #8]
 800d166:	6861      	ldr	r1, [r4, #4]
 800d168:	eb07 060a 	add.w	r6, r7, sl
 800d16c:	42b3      	cmp	r3, r6
 800d16e:	b085      	sub	sp, #20
 800d170:	bfb8      	it	lt
 800d172:	3101      	addlt	r1, #1
 800d174:	f7ff feda 	bl	800cf2c <_Balloc>
 800d178:	b930      	cbnz	r0, 800d188 <__multiply+0x44>
 800d17a:	4602      	mov	r2, r0
 800d17c:	4b44      	ldr	r3, [pc, #272]	; (800d290 <__multiply+0x14c>)
 800d17e:	4845      	ldr	r0, [pc, #276]	; (800d294 <__multiply+0x150>)
 800d180:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d184:	f000 fc7c 	bl	800da80 <__assert_func>
 800d188:	f100 0514 	add.w	r5, r0, #20
 800d18c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d190:	462b      	mov	r3, r5
 800d192:	2200      	movs	r2, #0
 800d194:	4543      	cmp	r3, r8
 800d196:	d321      	bcc.n	800d1dc <__multiply+0x98>
 800d198:	f104 0314 	add.w	r3, r4, #20
 800d19c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d1a0:	f109 0314 	add.w	r3, r9, #20
 800d1a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d1a8:	9202      	str	r2, [sp, #8]
 800d1aa:	1b3a      	subs	r2, r7, r4
 800d1ac:	3a15      	subs	r2, #21
 800d1ae:	f022 0203 	bic.w	r2, r2, #3
 800d1b2:	3204      	adds	r2, #4
 800d1b4:	f104 0115 	add.w	r1, r4, #21
 800d1b8:	428f      	cmp	r7, r1
 800d1ba:	bf38      	it	cc
 800d1bc:	2204      	movcc	r2, #4
 800d1be:	9201      	str	r2, [sp, #4]
 800d1c0:	9a02      	ldr	r2, [sp, #8]
 800d1c2:	9303      	str	r3, [sp, #12]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d80c      	bhi.n	800d1e2 <__multiply+0x9e>
 800d1c8:	2e00      	cmp	r6, #0
 800d1ca:	dd03      	ble.n	800d1d4 <__multiply+0x90>
 800d1cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d05b      	beq.n	800d28c <__multiply+0x148>
 800d1d4:	6106      	str	r6, [r0, #16]
 800d1d6:	b005      	add	sp, #20
 800d1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1dc:	f843 2b04 	str.w	r2, [r3], #4
 800d1e0:	e7d8      	b.n	800d194 <__multiply+0x50>
 800d1e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d1e6:	f1ba 0f00 	cmp.w	sl, #0
 800d1ea:	d024      	beq.n	800d236 <__multiply+0xf2>
 800d1ec:	f104 0e14 	add.w	lr, r4, #20
 800d1f0:	46a9      	mov	r9, r5
 800d1f2:	f04f 0c00 	mov.w	ip, #0
 800d1f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d1fa:	f8d9 1000 	ldr.w	r1, [r9]
 800d1fe:	fa1f fb82 	uxth.w	fp, r2
 800d202:	b289      	uxth	r1, r1
 800d204:	fb0a 110b 	mla	r1, sl, fp, r1
 800d208:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d20c:	f8d9 2000 	ldr.w	r2, [r9]
 800d210:	4461      	add	r1, ip
 800d212:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d216:	fb0a c20b 	mla	r2, sl, fp, ip
 800d21a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d21e:	b289      	uxth	r1, r1
 800d220:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d224:	4577      	cmp	r7, lr
 800d226:	f849 1b04 	str.w	r1, [r9], #4
 800d22a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d22e:	d8e2      	bhi.n	800d1f6 <__multiply+0xb2>
 800d230:	9a01      	ldr	r2, [sp, #4]
 800d232:	f845 c002 	str.w	ip, [r5, r2]
 800d236:	9a03      	ldr	r2, [sp, #12]
 800d238:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d23c:	3304      	adds	r3, #4
 800d23e:	f1b9 0f00 	cmp.w	r9, #0
 800d242:	d021      	beq.n	800d288 <__multiply+0x144>
 800d244:	6829      	ldr	r1, [r5, #0]
 800d246:	f104 0c14 	add.w	ip, r4, #20
 800d24a:	46ae      	mov	lr, r5
 800d24c:	f04f 0a00 	mov.w	sl, #0
 800d250:	f8bc b000 	ldrh.w	fp, [ip]
 800d254:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d258:	fb09 220b 	mla	r2, r9, fp, r2
 800d25c:	4452      	add	r2, sl
 800d25e:	b289      	uxth	r1, r1
 800d260:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d264:	f84e 1b04 	str.w	r1, [lr], #4
 800d268:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d26c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d270:	f8be 1000 	ldrh.w	r1, [lr]
 800d274:	fb09 110a 	mla	r1, r9, sl, r1
 800d278:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d27c:	4567      	cmp	r7, ip
 800d27e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d282:	d8e5      	bhi.n	800d250 <__multiply+0x10c>
 800d284:	9a01      	ldr	r2, [sp, #4]
 800d286:	50a9      	str	r1, [r5, r2]
 800d288:	3504      	adds	r5, #4
 800d28a:	e799      	b.n	800d1c0 <__multiply+0x7c>
 800d28c:	3e01      	subs	r6, #1
 800d28e:	e79b      	b.n	800d1c8 <__multiply+0x84>
 800d290:	0800e2b0 	.word	0x0800e2b0
 800d294:	0800e2c1 	.word	0x0800e2c1

0800d298 <__pow5mult>:
 800d298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d29c:	4615      	mov	r5, r2
 800d29e:	f012 0203 	ands.w	r2, r2, #3
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	d007      	beq.n	800d2b8 <__pow5mult+0x20>
 800d2a8:	4c25      	ldr	r4, [pc, #148]	; (800d340 <__pow5mult+0xa8>)
 800d2aa:	3a01      	subs	r2, #1
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2b2:	f7ff fe9d 	bl	800cff0 <__multadd>
 800d2b6:	4607      	mov	r7, r0
 800d2b8:	10ad      	asrs	r5, r5, #2
 800d2ba:	d03d      	beq.n	800d338 <__pow5mult+0xa0>
 800d2bc:	69f4      	ldr	r4, [r6, #28]
 800d2be:	b97c      	cbnz	r4, 800d2e0 <__pow5mult+0x48>
 800d2c0:	2010      	movs	r0, #16
 800d2c2:	f7fe f893 	bl	800b3ec <malloc>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	61f0      	str	r0, [r6, #28]
 800d2ca:	b928      	cbnz	r0, 800d2d8 <__pow5mult+0x40>
 800d2cc:	4b1d      	ldr	r3, [pc, #116]	; (800d344 <__pow5mult+0xac>)
 800d2ce:	481e      	ldr	r0, [pc, #120]	; (800d348 <__pow5mult+0xb0>)
 800d2d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d2d4:	f000 fbd4 	bl	800da80 <__assert_func>
 800d2d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2dc:	6004      	str	r4, [r0, #0]
 800d2de:	60c4      	str	r4, [r0, #12]
 800d2e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d2e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2e8:	b94c      	cbnz	r4, 800d2fe <__pow5mult+0x66>
 800d2ea:	f240 2171 	movw	r1, #625	; 0x271
 800d2ee:	4630      	mov	r0, r6
 800d2f0:	f7ff ff12 	bl	800d118 <__i2b>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	6003      	str	r3, [r0, #0]
 800d2fe:	f04f 0900 	mov.w	r9, #0
 800d302:	07eb      	lsls	r3, r5, #31
 800d304:	d50a      	bpl.n	800d31c <__pow5mult+0x84>
 800d306:	4639      	mov	r1, r7
 800d308:	4622      	mov	r2, r4
 800d30a:	4630      	mov	r0, r6
 800d30c:	f7ff ff1a 	bl	800d144 <__multiply>
 800d310:	4639      	mov	r1, r7
 800d312:	4680      	mov	r8, r0
 800d314:	4630      	mov	r0, r6
 800d316:	f7ff fe49 	bl	800cfac <_Bfree>
 800d31a:	4647      	mov	r7, r8
 800d31c:	106d      	asrs	r5, r5, #1
 800d31e:	d00b      	beq.n	800d338 <__pow5mult+0xa0>
 800d320:	6820      	ldr	r0, [r4, #0]
 800d322:	b938      	cbnz	r0, 800d334 <__pow5mult+0x9c>
 800d324:	4622      	mov	r2, r4
 800d326:	4621      	mov	r1, r4
 800d328:	4630      	mov	r0, r6
 800d32a:	f7ff ff0b 	bl	800d144 <__multiply>
 800d32e:	6020      	str	r0, [r4, #0]
 800d330:	f8c0 9000 	str.w	r9, [r0]
 800d334:	4604      	mov	r4, r0
 800d336:	e7e4      	b.n	800d302 <__pow5mult+0x6a>
 800d338:	4638      	mov	r0, r7
 800d33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d33e:	bf00      	nop
 800d340:	0800e410 	.word	0x0800e410
 800d344:	0800e241 	.word	0x0800e241
 800d348:	0800e2c1 	.word	0x0800e2c1

0800d34c <__lshift>:
 800d34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d350:	460c      	mov	r4, r1
 800d352:	6849      	ldr	r1, [r1, #4]
 800d354:	6923      	ldr	r3, [r4, #16]
 800d356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d35a:	68a3      	ldr	r3, [r4, #8]
 800d35c:	4607      	mov	r7, r0
 800d35e:	4691      	mov	r9, r2
 800d360:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d364:	f108 0601 	add.w	r6, r8, #1
 800d368:	42b3      	cmp	r3, r6
 800d36a:	db0b      	blt.n	800d384 <__lshift+0x38>
 800d36c:	4638      	mov	r0, r7
 800d36e:	f7ff fddd 	bl	800cf2c <_Balloc>
 800d372:	4605      	mov	r5, r0
 800d374:	b948      	cbnz	r0, 800d38a <__lshift+0x3e>
 800d376:	4602      	mov	r2, r0
 800d378:	4b28      	ldr	r3, [pc, #160]	; (800d41c <__lshift+0xd0>)
 800d37a:	4829      	ldr	r0, [pc, #164]	; (800d420 <__lshift+0xd4>)
 800d37c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d380:	f000 fb7e 	bl	800da80 <__assert_func>
 800d384:	3101      	adds	r1, #1
 800d386:	005b      	lsls	r3, r3, #1
 800d388:	e7ee      	b.n	800d368 <__lshift+0x1c>
 800d38a:	2300      	movs	r3, #0
 800d38c:	f100 0114 	add.w	r1, r0, #20
 800d390:	f100 0210 	add.w	r2, r0, #16
 800d394:	4618      	mov	r0, r3
 800d396:	4553      	cmp	r3, sl
 800d398:	db33      	blt.n	800d402 <__lshift+0xb6>
 800d39a:	6920      	ldr	r0, [r4, #16]
 800d39c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3a0:	f104 0314 	add.w	r3, r4, #20
 800d3a4:	f019 091f 	ands.w	r9, r9, #31
 800d3a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d3b0:	d02b      	beq.n	800d40a <__lshift+0xbe>
 800d3b2:	f1c9 0e20 	rsb	lr, r9, #32
 800d3b6:	468a      	mov	sl, r1
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	fa00 f009 	lsl.w	r0, r0, r9
 800d3c0:	4310      	orrs	r0, r2
 800d3c2:	f84a 0b04 	str.w	r0, [sl], #4
 800d3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ca:	459c      	cmp	ip, r3
 800d3cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3d0:	d8f3      	bhi.n	800d3ba <__lshift+0x6e>
 800d3d2:	ebac 0304 	sub.w	r3, ip, r4
 800d3d6:	3b15      	subs	r3, #21
 800d3d8:	f023 0303 	bic.w	r3, r3, #3
 800d3dc:	3304      	adds	r3, #4
 800d3de:	f104 0015 	add.w	r0, r4, #21
 800d3e2:	4584      	cmp	ip, r0
 800d3e4:	bf38      	it	cc
 800d3e6:	2304      	movcc	r3, #4
 800d3e8:	50ca      	str	r2, [r1, r3]
 800d3ea:	b10a      	cbz	r2, 800d3f0 <__lshift+0xa4>
 800d3ec:	f108 0602 	add.w	r6, r8, #2
 800d3f0:	3e01      	subs	r6, #1
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	612e      	str	r6, [r5, #16]
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	f7ff fdd8 	bl	800cfac <_Bfree>
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d402:	f842 0f04 	str.w	r0, [r2, #4]!
 800d406:	3301      	adds	r3, #1
 800d408:	e7c5      	b.n	800d396 <__lshift+0x4a>
 800d40a:	3904      	subs	r1, #4
 800d40c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d410:	f841 2f04 	str.w	r2, [r1, #4]!
 800d414:	459c      	cmp	ip, r3
 800d416:	d8f9      	bhi.n	800d40c <__lshift+0xc0>
 800d418:	e7ea      	b.n	800d3f0 <__lshift+0xa4>
 800d41a:	bf00      	nop
 800d41c:	0800e2b0 	.word	0x0800e2b0
 800d420:	0800e2c1 	.word	0x0800e2c1

0800d424 <__mcmp>:
 800d424:	b530      	push	{r4, r5, lr}
 800d426:	6902      	ldr	r2, [r0, #16]
 800d428:	690c      	ldr	r4, [r1, #16]
 800d42a:	1b12      	subs	r2, r2, r4
 800d42c:	d10e      	bne.n	800d44c <__mcmp+0x28>
 800d42e:	f100 0314 	add.w	r3, r0, #20
 800d432:	3114      	adds	r1, #20
 800d434:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d438:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d43c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d440:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d444:	42a5      	cmp	r5, r4
 800d446:	d003      	beq.n	800d450 <__mcmp+0x2c>
 800d448:	d305      	bcc.n	800d456 <__mcmp+0x32>
 800d44a:	2201      	movs	r2, #1
 800d44c:	4610      	mov	r0, r2
 800d44e:	bd30      	pop	{r4, r5, pc}
 800d450:	4283      	cmp	r3, r0
 800d452:	d3f3      	bcc.n	800d43c <__mcmp+0x18>
 800d454:	e7fa      	b.n	800d44c <__mcmp+0x28>
 800d456:	f04f 32ff 	mov.w	r2, #4294967295
 800d45a:	e7f7      	b.n	800d44c <__mcmp+0x28>

0800d45c <__mdiff>:
 800d45c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d460:	460c      	mov	r4, r1
 800d462:	4606      	mov	r6, r0
 800d464:	4611      	mov	r1, r2
 800d466:	4620      	mov	r0, r4
 800d468:	4690      	mov	r8, r2
 800d46a:	f7ff ffdb 	bl	800d424 <__mcmp>
 800d46e:	1e05      	subs	r5, r0, #0
 800d470:	d110      	bne.n	800d494 <__mdiff+0x38>
 800d472:	4629      	mov	r1, r5
 800d474:	4630      	mov	r0, r6
 800d476:	f7ff fd59 	bl	800cf2c <_Balloc>
 800d47a:	b930      	cbnz	r0, 800d48a <__mdiff+0x2e>
 800d47c:	4b3a      	ldr	r3, [pc, #232]	; (800d568 <__mdiff+0x10c>)
 800d47e:	4602      	mov	r2, r0
 800d480:	f240 2137 	movw	r1, #567	; 0x237
 800d484:	4839      	ldr	r0, [pc, #228]	; (800d56c <__mdiff+0x110>)
 800d486:	f000 fafb 	bl	800da80 <__assert_func>
 800d48a:	2301      	movs	r3, #1
 800d48c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d494:	bfa4      	itt	ge
 800d496:	4643      	movge	r3, r8
 800d498:	46a0      	movge	r8, r4
 800d49a:	4630      	mov	r0, r6
 800d49c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4a0:	bfa6      	itte	ge
 800d4a2:	461c      	movge	r4, r3
 800d4a4:	2500      	movge	r5, #0
 800d4a6:	2501      	movlt	r5, #1
 800d4a8:	f7ff fd40 	bl	800cf2c <_Balloc>
 800d4ac:	b920      	cbnz	r0, 800d4b8 <__mdiff+0x5c>
 800d4ae:	4b2e      	ldr	r3, [pc, #184]	; (800d568 <__mdiff+0x10c>)
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	f240 2145 	movw	r1, #581	; 0x245
 800d4b6:	e7e5      	b.n	800d484 <__mdiff+0x28>
 800d4b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d4bc:	6926      	ldr	r6, [r4, #16]
 800d4be:	60c5      	str	r5, [r0, #12]
 800d4c0:	f104 0914 	add.w	r9, r4, #20
 800d4c4:	f108 0514 	add.w	r5, r8, #20
 800d4c8:	f100 0e14 	add.w	lr, r0, #20
 800d4cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d4d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d4d4:	f108 0210 	add.w	r2, r8, #16
 800d4d8:	46f2      	mov	sl, lr
 800d4da:	2100      	movs	r1, #0
 800d4dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d4e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d4e4:	fa11 f88b 	uxtah	r8, r1, fp
 800d4e8:	b299      	uxth	r1, r3
 800d4ea:	0c1b      	lsrs	r3, r3, #16
 800d4ec:	eba8 0801 	sub.w	r8, r8, r1
 800d4f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d4f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d4f8:	fa1f f888 	uxth.w	r8, r8
 800d4fc:	1419      	asrs	r1, r3, #16
 800d4fe:	454e      	cmp	r6, r9
 800d500:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d504:	f84a 3b04 	str.w	r3, [sl], #4
 800d508:	d8e8      	bhi.n	800d4dc <__mdiff+0x80>
 800d50a:	1b33      	subs	r3, r6, r4
 800d50c:	3b15      	subs	r3, #21
 800d50e:	f023 0303 	bic.w	r3, r3, #3
 800d512:	3304      	adds	r3, #4
 800d514:	3415      	adds	r4, #21
 800d516:	42a6      	cmp	r6, r4
 800d518:	bf38      	it	cc
 800d51a:	2304      	movcc	r3, #4
 800d51c:	441d      	add	r5, r3
 800d51e:	4473      	add	r3, lr
 800d520:	469e      	mov	lr, r3
 800d522:	462e      	mov	r6, r5
 800d524:	4566      	cmp	r6, ip
 800d526:	d30e      	bcc.n	800d546 <__mdiff+0xea>
 800d528:	f10c 0203 	add.w	r2, ip, #3
 800d52c:	1b52      	subs	r2, r2, r5
 800d52e:	f022 0203 	bic.w	r2, r2, #3
 800d532:	3d03      	subs	r5, #3
 800d534:	45ac      	cmp	ip, r5
 800d536:	bf38      	it	cc
 800d538:	2200      	movcc	r2, #0
 800d53a:	4413      	add	r3, r2
 800d53c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d540:	b17a      	cbz	r2, 800d562 <__mdiff+0x106>
 800d542:	6107      	str	r7, [r0, #16]
 800d544:	e7a4      	b.n	800d490 <__mdiff+0x34>
 800d546:	f856 8b04 	ldr.w	r8, [r6], #4
 800d54a:	fa11 f288 	uxtah	r2, r1, r8
 800d54e:	1414      	asrs	r4, r2, #16
 800d550:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d554:	b292      	uxth	r2, r2
 800d556:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d55a:	f84e 2b04 	str.w	r2, [lr], #4
 800d55e:	1421      	asrs	r1, r4, #16
 800d560:	e7e0      	b.n	800d524 <__mdiff+0xc8>
 800d562:	3f01      	subs	r7, #1
 800d564:	e7ea      	b.n	800d53c <__mdiff+0xe0>
 800d566:	bf00      	nop
 800d568:	0800e2b0 	.word	0x0800e2b0
 800d56c:	0800e2c1 	.word	0x0800e2c1

0800d570 <__d2b>:
 800d570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d574:	460f      	mov	r7, r1
 800d576:	2101      	movs	r1, #1
 800d578:	ec59 8b10 	vmov	r8, r9, d0
 800d57c:	4616      	mov	r6, r2
 800d57e:	f7ff fcd5 	bl	800cf2c <_Balloc>
 800d582:	4604      	mov	r4, r0
 800d584:	b930      	cbnz	r0, 800d594 <__d2b+0x24>
 800d586:	4602      	mov	r2, r0
 800d588:	4b24      	ldr	r3, [pc, #144]	; (800d61c <__d2b+0xac>)
 800d58a:	4825      	ldr	r0, [pc, #148]	; (800d620 <__d2b+0xb0>)
 800d58c:	f240 310f 	movw	r1, #783	; 0x30f
 800d590:	f000 fa76 	bl	800da80 <__assert_func>
 800d594:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d59c:	bb2d      	cbnz	r5, 800d5ea <__d2b+0x7a>
 800d59e:	9301      	str	r3, [sp, #4]
 800d5a0:	f1b8 0300 	subs.w	r3, r8, #0
 800d5a4:	d026      	beq.n	800d5f4 <__d2b+0x84>
 800d5a6:	4668      	mov	r0, sp
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	f7ff fd87 	bl	800d0bc <__lo0bits>
 800d5ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5b2:	b1e8      	cbz	r0, 800d5f0 <__d2b+0x80>
 800d5b4:	f1c0 0320 	rsb	r3, r0, #32
 800d5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d5bc:	430b      	orrs	r3, r1
 800d5be:	40c2      	lsrs	r2, r0
 800d5c0:	6163      	str	r3, [r4, #20]
 800d5c2:	9201      	str	r2, [sp, #4]
 800d5c4:	9b01      	ldr	r3, [sp, #4]
 800d5c6:	61a3      	str	r3, [r4, #24]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	bf14      	ite	ne
 800d5cc:	2202      	movne	r2, #2
 800d5ce:	2201      	moveq	r2, #1
 800d5d0:	6122      	str	r2, [r4, #16]
 800d5d2:	b1bd      	cbz	r5, 800d604 <__d2b+0x94>
 800d5d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d5d8:	4405      	add	r5, r0
 800d5da:	603d      	str	r5, [r7, #0]
 800d5dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d5e0:	6030      	str	r0, [r6, #0]
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	b003      	add	sp, #12
 800d5e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5ee:	e7d6      	b.n	800d59e <__d2b+0x2e>
 800d5f0:	6161      	str	r1, [r4, #20]
 800d5f2:	e7e7      	b.n	800d5c4 <__d2b+0x54>
 800d5f4:	a801      	add	r0, sp, #4
 800d5f6:	f7ff fd61 	bl	800d0bc <__lo0bits>
 800d5fa:	9b01      	ldr	r3, [sp, #4]
 800d5fc:	6163      	str	r3, [r4, #20]
 800d5fe:	3020      	adds	r0, #32
 800d600:	2201      	movs	r2, #1
 800d602:	e7e5      	b.n	800d5d0 <__d2b+0x60>
 800d604:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d608:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d60c:	6038      	str	r0, [r7, #0]
 800d60e:	6918      	ldr	r0, [r3, #16]
 800d610:	f7ff fd34 	bl	800d07c <__hi0bits>
 800d614:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d618:	e7e2      	b.n	800d5e0 <__d2b+0x70>
 800d61a:	bf00      	nop
 800d61c:	0800e2b0 	.word	0x0800e2b0
 800d620:	0800e2c1 	.word	0x0800e2c1

0800d624 <__ssputs_r>:
 800d624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d628:	688e      	ldr	r6, [r1, #8]
 800d62a:	461f      	mov	r7, r3
 800d62c:	42be      	cmp	r6, r7
 800d62e:	680b      	ldr	r3, [r1, #0]
 800d630:	4682      	mov	sl, r0
 800d632:	460c      	mov	r4, r1
 800d634:	4690      	mov	r8, r2
 800d636:	d82c      	bhi.n	800d692 <__ssputs_r+0x6e>
 800d638:	898a      	ldrh	r2, [r1, #12]
 800d63a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d63e:	d026      	beq.n	800d68e <__ssputs_r+0x6a>
 800d640:	6965      	ldr	r5, [r4, #20]
 800d642:	6909      	ldr	r1, [r1, #16]
 800d644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d648:	eba3 0901 	sub.w	r9, r3, r1
 800d64c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d650:	1c7b      	adds	r3, r7, #1
 800d652:	444b      	add	r3, r9
 800d654:	106d      	asrs	r5, r5, #1
 800d656:	429d      	cmp	r5, r3
 800d658:	bf38      	it	cc
 800d65a:	461d      	movcc	r5, r3
 800d65c:	0553      	lsls	r3, r2, #21
 800d65e:	d527      	bpl.n	800d6b0 <__ssputs_r+0x8c>
 800d660:	4629      	mov	r1, r5
 800d662:	f7fd fef3 	bl	800b44c <_malloc_r>
 800d666:	4606      	mov	r6, r0
 800d668:	b360      	cbz	r0, 800d6c4 <__ssputs_r+0xa0>
 800d66a:	6921      	ldr	r1, [r4, #16]
 800d66c:	464a      	mov	r2, r9
 800d66e:	f000 f9f9 	bl	800da64 <memcpy>
 800d672:	89a3      	ldrh	r3, [r4, #12]
 800d674:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d67c:	81a3      	strh	r3, [r4, #12]
 800d67e:	6126      	str	r6, [r4, #16]
 800d680:	6165      	str	r5, [r4, #20]
 800d682:	444e      	add	r6, r9
 800d684:	eba5 0509 	sub.w	r5, r5, r9
 800d688:	6026      	str	r6, [r4, #0]
 800d68a:	60a5      	str	r5, [r4, #8]
 800d68c:	463e      	mov	r6, r7
 800d68e:	42be      	cmp	r6, r7
 800d690:	d900      	bls.n	800d694 <__ssputs_r+0x70>
 800d692:	463e      	mov	r6, r7
 800d694:	6820      	ldr	r0, [r4, #0]
 800d696:	4632      	mov	r2, r6
 800d698:	4641      	mov	r1, r8
 800d69a:	f000 f9c9 	bl	800da30 <memmove>
 800d69e:	68a3      	ldr	r3, [r4, #8]
 800d6a0:	1b9b      	subs	r3, r3, r6
 800d6a2:	60a3      	str	r3, [r4, #8]
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	4433      	add	r3, r6
 800d6a8:	6023      	str	r3, [r4, #0]
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b0:	462a      	mov	r2, r5
 800d6b2:	f000 fa2b 	bl	800db0c <_realloc_r>
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d1e0      	bne.n	800d67e <__ssputs_r+0x5a>
 800d6bc:	6921      	ldr	r1, [r4, #16]
 800d6be:	4650      	mov	r0, sl
 800d6c0:	f7ff fbe8 	bl	800ce94 <_free_r>
 800d6c4:	230c      	movs	r3, #12
 800d6c6:	f8ca 3000 	str.w	r3, [sl]
 800d6ca:	89a3      	ldrh	r3, [r4, #12]
 800d6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6d0:	81a3      	strh	r3, [r4, #12]
 800d6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d6:	e7e9      	b.n	800d6ac <__ssputs_r+0x88>

0800d6d8 <_svfiprintf_r>:
 800d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6dc:	4698      	mov	r8, r3
 800d6de:	898b      	ldrh	r3, [r1, #12]
 800d6e0:	061b      	lsls	r3, r3, #24
 800d6e2:	b09d      	sub	sp, #116	; 0x74
 800d6e4:	4607      	mov	r7, r0
 800d6e6:	460d      	mov	r5, r1
 800d6e8:	4614      	mov	r4, r2
 800d6ea:	d50e      	bpl.n	800d70a <_svfiprintf_r+0x32>
 800d6ec:	690b      	ldr	r3, [r1, #16]
 800d6ee:	b963      	cbnz	r3, 800d70a <_svfiprintf_r+0x32>
 800d6f0:	2140      	movs	r1, #64	; 0x40
 800d6f2:	f7fd feab 	bl	800b44c <_malloc_r>
 800d6f6:	6028      	str	r0, [r5, #0]
 800d6f8:	6128      	str	r0, [r5, #16]
 800d6fa:	b920      	cbnz	r0, 800d706 <_svfiprintf_r+0x2e>
 800d6fc:	230c      	movs	r3, #12
 800d6fe:	603b      	str	r3, [r7, #0]
 800d700:	f04f 30ff 	mov.w	r0, #4294967295
 800d704:	e0d0      	b.n	800d8a8 <_svfiprintf_r+0x1d0>
 800d706:	2340      	movs	r3, #64	; 0x40
 800d708:	616b      	str	r3, [r5, #20]
 800d70a:	2300      	movs	r3, #0
 800d70c:	9309      	str	r3, [sp, #36]	; 0x24
 800d70e:	2320      	movs	r3, #32
 800d710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d714:	f8cd 800c 	str.w	r8, [sp, #12]
 800d718:	2330      	movs	r3, #48	; 0x30
 800d71a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d8c0 <_svfiprintf_r+0x1e8>
 800d71e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d722:	f04f 0901 	mov.w	r9, #1
 800d726:	4623      	mov	r3, r4
 800d728:	469a      	mov	sl, r3
 800d72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d72e:	b10a      	cbz	r2, 800d734 <_svfiprintf_r+0x5c>
 800d730:	2a25      	cmp	r2, #37	; 0x25
 800d732:	d1f9      	bne.n	800d728 <_svfiprintf_r+0x50>
 800d734:	ebba 0b04 	subs.w	fp, sl, r4
 800d738:	d00b      	beq.n	800d752 <_svfiprintf_r+0x7a>
 800d73a:	465b      	mov	r3, fp
 800d73c:	4622      	mov	r2, r4
 800d73e:	4629      	mov	r1, r5
 800d740:	4638      	mov	r0, r7
 800d742:	f7ff ff6f 	bl	800d624 <__ssputs_r>
 800d746:	3001      	adds	r0, #1
 800d748:	f000 80a9 	beq.w	800d89e <_svfiprintf_r+0x1c6>
 800d74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d74e:	445a      	add	r2, fp
 800d750:	9209      	str	r2, [sp, #36]	; 0x24
 800d752:	f89a 3000 	ldrb.w	r3, [sl]
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 80a1 	beq.w	800d89e <_svfiprintf_r+0x1c6>
 800d75c:	2300      	movs	r3, #0
 800d75e:	f04f 32ff 	mov.w	r2, #4294967295
 800d762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d766:	f10a 0a01 	add.w	sl, sl, #1
 800d76a:	9304      	str	r3, [sp, #16]
 800d76c:	9307      	str	r3, [sp, #28]
 800d76e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d772:	931a      	str	r3, [sp, #104]	; 0x68
 800d774:	4654      	mov	r4, sl
 800d776:	2205      	movs	r2, #5
 800d778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d77c:	4850      	ldr	r0, [pc, #320]	; (800d8c0 <_svfiprintf_r+0x1e8>)
 800d77e:	f7f2 fd27 	bl	80001d0 <memchr>
 800d782:	9a04      	ldr	r2, [sp, #16]
 800d784:	b9d8      	cbnz	r0, 800d7be <_svfiprintf_r+0xe6>
 800d786:	06d0      	lsls	r0, r2, #27
 800d788:	bf44      	itt	mi
 800d78a:	2320      	movmi	r3, #32
 800d78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d790:	0711      	lsls	r1, r2, #28
 800d792:	bf44      	itt	mi
 800d794:	232b      	movmi	r3, #43	; 0x2b
 800d796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d79a:	f89a 3000 	ldrb.w	r3, [sl]
 800d79e:	2b2a      	cmp	r3, #42	; 0x2a
 800d7a0:	d015      	beq.n	800d7ce <_svfiprintf_r+0xf6>
 800d7a2:	9a07      	ldr	r2, [sp, #28]
 800d7a4:	4654      	mov	r4, sl
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	f04f 0c0a 	mov.w	ip, #10
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7b2:	3b30      	subs	r3, #48	; 0x30
 800d7b4:	2b09      	cmp	r3, #9
 800d7b6:	d94d      	bls.n	800d854 <_svfiprintf_r+0x17c>
 800d7b8:	b1b0      	cbz	r0, 800d7e8 <_svfiprintf_r+0x110>
 800d7ba:	9207      	str	r2, [sp, #28]
 800d7bc:	e014      	b.n	800d7e8 <_svfiprintf_r+0x110>
 800d7be:	eba0 0308 	sub.w	r3, r0, r8
 800d7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	9304      	str	r3, [sp, #16]
 800d7ca:	46a2      	mov	sl, r4
 800d7cc:	e7d2      	b.n	800d774 <_svfiprintf_r+0x9c>
 800d7ce:	9b03      	ldr	r3, [sp, #12]
 800d7d0:	1d19      	adds	r1, r3, #4
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	9103      	str	r1, [sp, #12]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bfbb      	ittet	lt
 800d7da:	425b      	neglt	r3, r3
 800d7dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d7e0:	9307      	strge	r3, [sp, #28]
 800d7e2:	9307      	strlt	r3, [sp, #28]
 800d7e4:	bfb8      	it	lt
 800d7e6:	9204      	strlt	r2, [sp, #16]
 800d7e8:	7823      	ldrb	r3, [r4, #0]
 800d7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800d7ec:	d10c      	bne.n	800d808 <_svfiprintf_r+0x130>
 800d7ee:	7863      	ldrb	r3, [r4, #1]
 800d7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d7f2:	d134      	bne.n	800d85e <_svfiprintf_r+0x186>
 800d7f4:	9b03      	ldr	r3, [sp, #12]
 800d7f6:	1d1a      	adds	r2, r3, #4
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	9203      	str	r2, [sp, #12]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	bfb8      	it	lt
 800d800:	f04f 33ff 	movlt.w	r3, #4294967295
 800d804:	3402      	adds	r4, #2
 800d806:	9305      	str	r3, [sp, #20]
 800d808:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d8d0 <_svfiprintf_r+0x1f8>
 800d80c:	7821      	ldrb	r1, [r4, #0]
 800d80e:	2203      	movs	r2, #3
 800d810:	4650      	mov	r0, sl
 800d812:	f7f2 fcdd 	bl	80001d0 <memchr>
 800d816:	b138      	cbz	r0, 800d828 <_svfiprintf_r+0x150>
 800d818:	9b04      	ldr	r3, [sp, #16]
 800d81a:	eba0 000a 	sub.w	r0, r0, sl
 800d81e:	2240      	movs	r2, #64	; 0x40
 800d820:	4082      	lsls	r2, r0
 800d822:	4313      	orrs	r3, r2
 800d824:	3401      	adds	r4, #1
 800d826:	9304      	str	r3, [sp, #16]
 800d828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d82c:	4825      	ldr	r0, [pc, #148]	; (800d8c4 <_svfiprintf_r+0x1ec>)
 800d82e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d832:	2206      	movs	r2, #6
 800d834:	f7f2 fccc 	bl	80001d0 <memchr>
 800d838:	2800      	cmp	r0, #0
 800d83a:	d038      	beq.n	800d8ae <_svfiprintf_r+0x1d6>
 800d83c:	4b22      	ldr	r3, [pc, #136]	; (800d8c8 <_svfiprintf_r+0x1f0>)
 800d83e:	bb1b      	cbnz	r3, 800d888 <_svfiprintf_r+0x1b0>
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	3307      	adds	r3, #7
 800d844:	f023 0307 	bic.w	r3, r3, #7
 800d848:	3308      	adds	r3, #8
 800d84a:	9303      	str	r3, [sp, #12]
 800d84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d84e:	4433      	add	r3, r6
 800d850:	9309      	str	r3, [sp, #36]	; 0x24
 800d852:	e768      	b.n	800d726 <_svfiprintf_r+0x4e>
 800d854:	fb0c 3202 	mla	r2, ip, r2, r3
 800d858:	460c      	mov	r4, r1
 800d85a:	2001      	movs	r0, #1
 800d85c:	e7a6      	b.n	800d7ac <_svfiprintf_r+0xd4>
 800d85e:	2300      	movs	r3, #0
 800d860:	3401      	adds	r4, #1
 800d862:	9305      	str	r3, [sp, #20]
 800d864:	4619      	mov	r1, r3
 800d866:	f04f 0c0a 	mov.w	ip, #10
 800d86a:	4620      	mov	r0, r4
 800d86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d870:	3a30      	subs	r2, #48	; 0x30
 800d872:	2a09      	cmp	r2, #9
 800d874:	d903      	bls.n	800d87e <_svfiprintf_r+0x1a6>
 800d876:	2b00      	cmp	r3, #0
 800d878:	d0c6      	beq.n	800d808 <_svfiprintf_r+0x130>
 800d87a:	9105      	str	r1, [sp, #20]
 800d87c:	e7c4      	b.n	800d808 <_svfiprintf_r+0x130>
 800d87e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d882:	4604      	mov	r4, r0
 800d884:	2301      	movs	r3, #1
 800d886:	e7f0      	b.n	800d86a <_svfiprintf_r+0x192>
 800d888:	ab03      	add	r3, sp, #12
 800d88a:	9300      	str	r3, [sp, #0]
 800d88c:	462a      	mov	r2, r5
 800d88e:	4b0f      	ldr	r3, [pc, #60]	; (800d8cc <_svfiprintf_r+0x1f4>)
 800d890:	a904      	add	r1, sp, #16
 800d892:	4638      	mov	r0, r7
 800d894:	f7fd ff06 	bl	800b6a4 <_printf_float>
 800d898:	1c42      	adds	r2, r0, #1
 800d89a:	4606      	mov	r6, r0
 800d89c:	d1d6      	bne.n	800d84c <_svfiprintf_r+0x174>
 800d89e:	89ab      	ldrh	r3, [r5, #12]
 800d8a0:	065b      	lsls	r3, r3, #25
 800d8a2:	f53f af2d 	bmi.w	800d700 <_svfiprintf_r+0x28>
 800d8a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8a8:	b01d      	add	sp, #116	; 0x74
 800d8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ae:	ab03      	add	r3, sp, #12
 800d8b0:	9300      	str	r3, [sp, #0]
 800d8b2:	462a      	mov	r2, r5
 800d8b4:	4b05      	ldr	r3, [pc, #20]	; (800d8cc <_svfiprintf_r+0x1f4>)
 800d8b6:	a904      	add	r1, sp, #16
 800d8b8:	4638      	mov	r0, r7
 800d8ba:	f7fe f997 	bl	800bbec <_printf_i>
 800d8be:	e7eb      	b.n	800d898 <_svfiprintf_r+0x1c0>
 800d8c0:	0800e41c 	.word	0x0800e41c
 800d8c4:	0800e426 	.word	0x0800e426
 800d8c8:	0800b6a5 	.word	0x0800b6a5
 800d8cc:	0800d625 	.word	0x0800d625
 800d8d0:	0800e422 	.word	0x0800e422

0800d8d4 <__sflush_r>:
 800d8d4:	898a      	ldrh	r2, [r1, #12]
 800d8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8da:	4605      	mov	r5, r0
 800d8dc:	0710      	lsls	r0, r2, #28
 800d8de:	460c      	mov	r4, r1
 800d8e0:	d458      	bmi.n	800d994 <__sflush_r+0xc0>
 800d8e2:	684b      	ldr	r3, [r1, #4]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	dc05      	bgt.n	800d8f4 <__sflush_r+0x20>
 800d8e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	dc02      	bgt.n	800d8f4 <__sflush_r+0x20>
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8f6:	2e00      	cmp	r6, #0
 800d8f8:	d0f9      	beq.n	800d8ee <__sflush_r+0x1a>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d900:	682f      	ldr	r7, [r5, #0]
 800d902:	6a21      	ldr	r1, [r4, #32]
 800d904:	602b      	str	r3, [r5, #0]
 800d906:	d032      	beq.n	800d96e <__sflush_r+0x9a>
 800d908:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d90a:	89a3      	ldrh	r3, [r4, #12]
 800d90c:	075a      	lsls	r2, r3, #29
 800d90e:	d505      	bpl.n	800d91c <__sflush_r+0x48>
 800d910:	6863      	ldr	r3, [r4, #4]
 800d912:	1ac0      	subs	r0, r0, r3
 800d914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d916:	b10b      	cbz	r3, 800d91c <__sflush_r+0x48>
 800d918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d91a:	1ac0      	subs	r0, r0, r3
 800d91c:	2300      	movs	r3, #0
 800d91e:	4602      	mov	r2, r0
 800d920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d922:	6a21      	ldr	r1, [r4, #32]
 800d924:	4628      	mov	r0, r5
 800d926:	47b0      	blx	r6
 800d928:	1c43      	adds	r3, r0, #1
 800d92a:	89a3      	ldrh	r3, [r4, #12]
 800d92c:	d106      	bne.n	800d93c <__sflush_r+0x68>
 800d92e:	6829      	ldr	r1, [r5, #0]
 800d930:	291d      	cmp	r1, #29
 800d932:	d82b      	bhi.n	800d98c <__sflush_r+0xb8>
 800d934:	4a29      	ldr	r2, [pc, #164]	; (800d9dc <__sflush_r+0x108>)
 800d936:	410a      	asrs	r2, r1
 800d938:	07d6      	lsls	r6, r2, #31
 800d93a:	d427      	bmi.n	800d98c <__sflush_r+0xb8>
 800d93c:	2200      	movs	r2, #0
 800d93e:	6062      	str	r2, [r4, #4]
 800d940:	04d9      	lsls	r1, r3, #19
 800d942:	6922      	ldr	r2, [r4, #16]
 800d944:	6022      	str	r2, [r4, #0]
 800d946:	d504      	bpl.n	800d952 <__sflush_r+0x7e>
 800d948:	1c42      	adds	r2, r0, #1
 800d94a:	d101      	bne.n	800d950 <__sflush_r+0x7c>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	b903      	cbnz	r3, 800d952 <__sflush_r+0x7e>
 800d950:	6560      	str	r0, [r4, #84]	; 0x54
 800d952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d954:	602f      	str	r7, [r5, #0]
 800d956:	2900      	cmp	r1, #0
 800d958:	d0c9      	beq.n	800d8ee <__sflush_r+0x1a>
 800d95a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d95e:	4299      	cmp	r1, r3
 800d960:	d002      	beq.n	800d968 <__sflush_r+0x94>
 800d962:	4628      	mov	r0, r5
 800d964:	f7ff fa96 	bl	800ce94 <_free_r>
 800d968:	2000      	movs	r0, #0
 800d96a:	6360      	str	r0, [r4, #52]	; 0x34
 800d96c:	e7c0      	b.n	800d8f0 <__sflush_r+0x1c>
 800d96e:	2301      	movs	r3, #1
 800d970:	4628      	mov	r0, r5
 800d972:	47b0      	blx	r6
 800d974:	1c41      	adds	r1, r0, #1
 800d976:	d1c8      	bne.n	800d90a <__sflush_r+0x36>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d0c5      	beq.n	800d90a <__sflush_r+0x36>
 800d97e:	2b1d      	cmp	r3, #29
 800d980:	d001      	beq.n	800d986 <__sflush_r+0xb2>
 800d982:	2b16      	cmp	r3, #22
 800d984:	d101      	bne.n	800d98a <__sflush_r+0xb6>
 800d986:	602f      	str	r7, [r5, #0]
 800d988:	e7b1      	b.n	800d8ee <__sflush_r+0x1a>
 800d98a:	89a3      	ldrh	r3, [r4, #12]
 800d98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d990:	81a3      	strh	r3, [r4, #12]
 800d992:	e7ad      	b.n	800d8f0 <__sflush_r+0x1c>
 800d994:	690f      	ldr	r7, [r1, #16]
 800d996:	2f00      	cmp	r7, #0
 800d998:	d0a9      	beq.n	800d8ee <__sflush_r+0x1a>
 800d99a:	0793      	lsls	r3, r2, #30
 800d99c:	680e      	ldr	r6, [r1, #0]
 800d99e:	bf08      	it	eq
 800d9a0:	694b      	ldreq	r3, [r1, #20]
 800d9a2:	600f      	str	r7, [r1, #0]
 800d9a4:	bf18      	it	ne
 800d9a6:	2300      	movne	r3, #0
 800d9a8:	eba6 0807 	sub.w	r8, r6, r7
 800d9ac:	608b      	str	r3, [r1, #8]
 800d9ae:	f1b8 0f00 	cmp.w	r8, #0
 800d9b2:	dd9c      	ble.n	800d8ee <__sflush_r+0x1a>
 800d9b4:	6a21      	ldr	r1, [r4, #32]
 800d9b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9b8:	4643      	mov	r3, r8
 800d9ba:	463a      	mov	r2, r7
 800d9bc:	4628      	mov	r0, r5
 800d9be:	47b0      	blx	r6
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	dc06      	bgt.n	800d9d2 <__sflush_r+0xfe>
 800d9c4:	89a3      	ldrh	r3, [r4, #12]
 800d9c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9ca:	81a3      	strh	r3, [r4, #12]
 800d9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d0:	e78e      	b.n	800d8f0 <__sflush_r+0x1c>
 800d9d2:	4407      	add	r7, r0
 800d9d4:	eba8 0800 	sub.w	r8, r8, r0
 800d9d8:	e7e9      	b.n	800d9ae <__sflush_r+0xda>
 800d9da:	bf00      	nop
 800d9dc:	dfbffffe 	.word	0xdfbffffe

0800d9e0 <_fflush_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	690b      	ldr	r3, [r1, #16]
 800d9e4:	4605      	mov	r5, r0
 800d9e6:	460c      	mov	r4, r1
 800d9e8:	b913      	cbnz	r3, 800d9f0 <_fflush_r+0x10>
 800d9ea:	2500      	movs	r5, #0
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	bd38      	pop	{r3, r4, r5, pc}
 800d9f0:	b118      	cbz	r0, 800d9fa <_fflush_r+0x1a>
 800d9f2:	6a03      	ldr	r3, [r0, #32]
 800d9f4:	b90b      	cbnz	r3, 800d9fa <_fflush_r+0x1a>
 800d9f6:	f7fe faa7 	bl	800bf48 <__sinit>
 800d9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d0f3      	beq.n	800d9ea <_fflush_r+0xa>
 800da02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da04:	07d0      	lsls	r0, r2, #31
 800da06:	d404      	bmi.n	800da12 <_fflush_r+0x32>
 800da08:	0599      	lsls	r1, r3, #22
 800da0a:	d402      	bmi.n	800da12 <_fflush_r+0x32>
 800da0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da0e:	f7fe fbc2 	bl	800c196 <__retarget_lock_acquire_recursive>
 800da12:	4628      	mov	r0, r5
 800da14:	4621      	mov	r1, r4
 800da16:	f7ff ff5d 	bl	800d8d4 <__sflush_r>
 800da1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da1c:	07da      	lsls	r2, r3, #31
 800da1e:	4605      	mov	r5, r0
 800da20:	d4e4      	bmi.n	800d9ec <_fflush_r+0xc>
 800da22:	89a3      	ldrh	r3, [r4, #12]
 800da24:	059b      	lsls	r3, r3, #22
 800da26:	d4e1      	bmi.n	800d9ec <_fflush_r+0xc>
 800da28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da2a:	f7fe fbb5 	bl	800c198 <__retarget_lock_release_recursive>
 800da2e:	e7dd      	b.n	800d9ec <_fflush_r+0xc>

0800da30 <memmove>:
 800da30:	4288      	cmp	r0, r1
 800da32:	b510      	push	{r4, lr}
 800da34:	eb01 0402 	add.w	r4, r1, r2
 800da38:	d902      	bls.n	800da40 <memmove+0x10>
 800da3a:	4284      	cmp	r4, r0
 800da3c:	4623      	mov	r3, r4
 800da3e:	d807      	bhi.n	800da50 <memmove+0x20>
 800da40:	1e43      	subs	r3, r0, #1
 800da42:	42a1      	cmp	r1, r4
 800da44:	d008      	beq.n	800da58 <memmove+0x28>
 800da46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da4e:	e7f8      	b.n	800da42 <memmove+0x12>
 800da50:	4402      	add	r2, r0
 800da52:	4601      	mov	r1, r0
 800da54:	428a      	cmp	r2, r1
 800da56:	d100      	bne.n	800da5a <memmove+0x2a>
 800da58:	bd10      	pop	{r4, pc}
 800da5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da62:	e7f7      	b.n	800da54 <memmove+0x24>

0800da64 <memcpy>:
 800da64:	440a      	add	r2, r1
 800da66:	4291      	cmp	r1, r2
 800da68:	f100 33ff 	add.w	r3, r0, #4294967295
 800da6c:	d100      	bne.n	800da70 <memcpy+0xc>
 800da6e:	4770      	bx	lr
 800da70:	b510      	push	{r4, lr}
 800da72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da7a:	4291      	cmp	r1, r2
 800da7c:	d1f9      	bne.n	800da72 <memcpy+0xe>
 800da7e:	bd10      	pop	{r4, pc}

0800da80 <__assert_func>:
 800da80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da82:	4614      	mov	r4, r2
 800da84:	461a      	mov	r2, r3
 800da86:	4b09      	ldr	r3, [pc, #36]	; (800daac <__assert_func+0x2c>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4605      	mov	r5, r0
 800da8c:	68d8      	ldr	r0, [r3, #12]
 800da8e:	b14c      	cbz	r4, 800daa4 <__assert_func+0x24>
 800da90:	4b07      	ldr	r3, [pc, #28]	; (800dab0 <__assert_func+0x30>)
 800da92:	9100      	str	r1, [sp, #0]
 800da94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da98:	4906      	ldr	r1, [pc, #24]	; (800dab4 <__assert_func+0x34>)
 800da9a:	462b      	mov	r3, r5
 800da9c:	f000 f872 	bl	800db84 <fiprintf>
 800daa0:	f000 f882 	bl	800dba8 <abort>
 800daa4:	4b04      	ldr	r3, [pc, #16]	; (800dab8 <__assert_func+0x38>)
 800daa6:	461c      	mov	r4, r3
 800daa8:	e7f3      	b.n	800da92 <__assert_func+0x12>
 800daaa:	bf00      	nop
 800daac:	20000084 	.word	0x20000084
 800dab0:	0800e437 	.word	0x0800e437
 800dab4:	0800e444 	.word	0x0800e444
 800dab8:	0800e472 	.word	0x0800e472

0800dabc <_calloc_r>:
 800dabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dabe:	fba1 2402 	umull	r2, r4, r1, r2
 800dac2:	b94c      	cbnz	r4, 800dad8 <_calloc_r+0x1c>
 800dac4:	4611      	mov	r1, r2
 800dac6:	9201      	str	r2, [sp, #4]
 800dac8:	f7fd fcc0 	bl	800b44c <_malloc_r>
 800dacc:	9a01      	ldr	r2, [sp, #4]
 800dace:	4605      	mov	r5, r0
 800dad0:	b930      	cbnz	r0, 800dae0 <_calloc_r+0x24>
 800dad2:	4628      	mov	r0, r5
 800dad4:	b003      	add	sp, #12
 800dad6:	bd30      	pop	{r4, r5, pc}
 800dad8:	220c      	movs	r2, #12
 800dada:	6002      	str	r2, [r0, #0]
 800dadc:	2500      	movs	r5, #0
 800dade:	e7f8      	b.n	800dad2 <_calloc_r+0x16>
 800dae0:	4621      	mov	r1, r4
 800dae2:	f7fe faca 	bl	800c07a <memset>
 800dae6:	e7f4      	b.n	800dad2 <_calloc_r+0x16>

0800dae8 <__ascii_mbtowc>:
 800dae8:	b082      	sub	sp, #8
 800daea:	b901      	cbnz	r1, 800daee <__ascii_mbtowc+0x6>
 800daec:	a901      	add	r1, sp, #4
 800daee:	b142      	cbz	r2, 800db02 <__ascii_mbtowc+0x1a>
 800daf0:	b14b      	cbz	r3, 800db06 <__ascii_mbtowc+0x1e>
 800daf2:	7813      	ldrb	r3, [r2, #0]
 800daf4:	600b      	str	r3, [r1, #0]
 800daf6:	7812      	ldrb	r2, [r2, #0]
 800daf8:	1e10      	subs	r0, r2, #0
 800dafa:	bf18      	it	ne
 800dafc:	2001      	movne	r0, #1
 800dafe:	b002      	add	sp, #8
 800db00:	4770      	bx	lr
 800db02:	4610      	mov	r0, r2
 800db04:	e7fb      	b.n	800dafe <__ascii_mbtowc+0x16>
 800db06:	f06f 0001 	mvn.w	r0, #1
 800db0a:	e7f8      	b.n	800dafe <__ascii_mbtowc+0x16>

0800db0c <_realloc_r>:
 800db0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db10:	4680      	mov	r8, r0
 800db12:	4614      	mov	r4, r2
 800db14:	460e      	mov	r6, r1
 800db16:	b921      	cbnz	r1, 800db22 <_realloc_r+0x16>
 800db18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db1c:	4611      	mov	r1, r2
 800db1e:	f7fd bc95 	b.w	800b44c <_malloc_r>
 800db22:	b92a      	cbnz	r2, 800db30 <_realloc_r+0x24>
 800db24:	f7ff f9b6 	bl	800ce94 <_free_r>
 800db28:	4625      	mov	r5, r4
 800db2a:	4628      	mov	r0, r5
 800db2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db30:	f000 f841 	bl	800dbb6 <_malloc_usable_size_r>
 800db34:	4284      	cmp	r4, r0
 800db36:	4607      	mov	r7, r0
 800db38:	d802      	bhi.n	800db40 <_realloc_r+0x34>
 800db3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db3e:	d812      	bhi.n	800db66 <_realloc_r+0x5a>
 800db40:	4621      	mov	r1, r4
 800db42:	4640      	mov	r0, r8
 800db44:	f7fd fc82 	bl	800b44c <_malloc_r>
 800db48:	4605      	mov	r5, r0
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d0ed      	beq.n	800db2a <_realloc_r+0x1e>
 800db4e:	42bc      	cmp	r4, r7
 800db50:	4622      	mov	r2, r4
 800db52:	4631      	mov	r1, r6
 800db54:	bf28      	it	cs
 800db56:	463a      	movcs	r2, r7
 800db58:	f7ff ff84 	bl	800da64 <memcpy>
 800db5c:	4631      	mov	r1, r6
 800db5e:	4640      	mov	r0, r8
 800db60:	f7ff f998 	bl	800ce94 <_free_r>
 800db64:	e7e1      	b.n	800db2a <_realloc_r+0x1e>
 800db66:	4635      	mov	r5, r6
 800db68:	e7df      	b.n	800db2a <_realloc_r+0x1e>

0800db6a <__ascii_wctomb>:
 800db6a:	b149      	cbz	r1, 800db80 <__ascii_wctomb+0x16>
 800db6c:	2aff      	cmp	r2, #255	; 0xff
 800db6e:	bf85      	ittet	hi
 800db70:	238a      	movhi	r3, #138	; 0x8a
 800db72:	6003      	strhi	r3, [r0, #0]
 800db74:	700a      	strbls	r2, [r1, #0]
 800db76:	f04f 30ff 	movhi.w	r0, #4294967295
 800db7a:	bf98      	it	ls
 800db7c:	2001      	movls	r0, #1
 800db7e:	4770      	bx	lr
 800db80:	4608      	mov	r0, r1
 800db82:	4770      	bx	lr

0800db84 <fiprintf>:
 800db84:	b40e      	push	{r1, r2, r3}
 800db86:	b503      	push	{r0, r1, lr}
 800db88:	4601      	mov	r1, r0
 800db8a:	ab03      	add	r3, sp, #12
 800db8c:	4805      	ldr	r0, [pc, #20]	; (800dba4 <fiprintf+0x20>)
 800db8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db92:	6800      	ldr	r0, [r0, #0]
 800db94:	9301      	str	r3, [sp, #4]
 800db96:	f000 f83f 	bl	800dc18 <_vfiprintf_r>
 800db9a:	b002      	add	sp, #8
 800db9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dba0:	b003      	add	sp, #12
 800dba2:	4770      	bx	lr
 800dba4:	20000084 	.word	0x20000084

0800dba8 <abort>:
 800dba8:	b508      	push	{r3, lr}
 800dbaa:	2006      	movs	r0, #6
 800dbac:	f000 fa0c 	bl	800dfc8 <raise>
 800dbb0:	2001      	movs	r0, #1
 800dbb2:	f7f3 ff73 	bl	8001a9c <_exit>

0800dbb6 <_malloc_usable_size_r>:
 800dbb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbba:	1f18      	subs	r0, r3, #4
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	bfbc      	itt	lt
 800dbc0:	580b      	ldrlt	r3, [r1, r0]
 800dbc2:	18c0      	addlt	r0, r0, r3
 800dbc4:	4770      	bx	lr

0800dbc6 <__sfputc_r>:
 800dbc6:	6893      	ldr	r3, [r2, #8]
 800dbc8:	3b01      	subs	r3, #1
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	b410      	push	{r4}
 800dbce:	6093      	str	r3, [r2, #8]
 800dbd0:	da08      	bge.n	800dbe4 <__sfputc_r+0x1e>
 800dbd2:	6994      	ldr	r4, [r2, #24]
 800dbd4:	42a3      	cmp	r3, r4
 800dbd6:	db01      	blt.n	800dbdc <__sfputc_r+0x16>
 800dbd8:	290a      	cmp	r1, #10
 800dbda:	d103      	bne.n	800dbe4 <__sfputc_r+0x1e>
 800dbdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbe0:	f000 b934 	b.w	800de4c <__swbuf_r>
 800dbe4:	6813      	ldr	r3, [r2, #0]
 800dbe6:	1c58      	adds	r0, r3, #1
 800dbe8:	6010      	str	r0, [r2, #0]
 800dbea:	7019      	strb	r1, [r3, #0]
 800dbec:	4608      	mov	r0, r1
 800dbee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <__sfputs_r>:
 800dbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	460f      	mov	r7, r1
 800dbfa:	4614      	mov	r4, r2
 800dbfc:	18d5      	adds	r5, r2, r3
 800dbfe:	42ac      	cmp	r4, r5
 800dc00:	d101      	bne.n	800dc06 <__sfputs_r+0x12>
 800dc02:	2000      	movs	r0, #0
 800dc04:	e007      	b.n	800dc16 <__sfputs_r+0x22>
 800dc06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc0a:	463a      	mov	r2, r7
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f7ff ffda 	bl	800dbc6 <__sfputc_r>
 800dc12:	1c43      	adds	r3, r0, #1
 800dc14:	d1f3      	bne.n	800dbfe <__sfputs_r+0xa>
 800dc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc18 <_vfiprintf_r>:
 800dc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1c:	460d      	mov	r5, r1
 800dc1e:	b09d      	sub	sp, #116	; 0x74
 800dc20:	4614      	mov	r4, r2
 800dc22:	4698      	mov	r8, r3
 800dc24:	4606      	mov	r6, r0
 800dc26:	b118      	cbz	r0, 800dc30 <_vfiprintf_r+0x18>
 800dc28:	6a03      	ldr	r3, [r0, #32]
 800dc2a:	b90b      	cbnz	r3, 800dc30 <_vfiprintf_r+0x18>
 800dc2c:	f7fe f98c 	bl	800bf48 <__sinit>
 800dc30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc32:	07d9      	lsls	r1, r3, #31
 800dc34:	d405      	bmi.n	800dc42 <_vfiprintf_r+0x2a>
 800dc36:	89ab      	ldrh	r3, [r5, #12]
 800dc38:	059a      	lsls	r2, r3, #22
 800dc3a:	d402      	bmi.n	800dc42 <_vfiprintf_r+0x2a>
 800dc3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc3e:	f7fe faaa 	bl	800c196 <__retarget_lock_acquire_recursive>
 800dc42:	89ab      	ldrh	r3, [r5, #12]
 800dc44:	071b      	lsls	r3, r3, #28
 800dc46:	d501      	bpl.n	800dc4c <_vfiprintf_r+0x34>
 800dc48:	692b      	ldr	r3, [r5, #16]
 800dc4a:	b99b      	cbnz	r3, 800dc74 <_vfiprintf_r+0x5c>
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f000 f93a 	bl	800dec8 <__swsetup_r>
 800dc54:	b170      	cbz	r0, 800dc74 <_vfiprintf_r+0x5c>
 800dc56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc58:	07dc      	lsls	r4, r3, #31
 800dc5a:	d504      	bpl.n	800dc66 <_vfiprintf_r+0x4e>
 800dc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc60:	b01d      	add	sp, #116	; 0x74
 800dc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc66:	89ab      	ldrh	r3, [r5, #12]
 800dc68:	0598      	lsls	r0, r3, #22
 800dc6a:	d4f7      	bmi.n	800dc5c <_vfiprintf_r+0x44>
 800dc6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc6e:	f7fe fa93 	bl	800c198 <__retarget_lock_release_recursive>
 800dc72:	e7f3      	b.n	800dc5c <_vfiprintf_r+0x44>
 800dc74:	2300      	movs	r3, #0
 800dc76:	9309      	str	r3, [sp, #36]	; 0x24
 800dc78:	2320      	movs	r3, #32
 800dc7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc82:	2330      	movs	r3, #48	; 0x30
 800dc84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800de38 <_vfiprintf_r+0x220>
 800dc88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc8c:	f04f 0901 	mov.w	r9, #1
 800dc90:	4623      	mov	r3, r4
 800dc92:	469a      	mov	sl, r3
 800dc94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc98:	b10a      	cbz	r2, 800dc9e <_vfiprintf_r+0x86>
 800dc9a:	2a25      	cmp	r2, #37	; 0x25
 800dc9c:	d1f9      	bne.n	800dc92 <_vfiprintf_r+0x7a>
 800dc9e:	ebba 0b04 	subs.w	fp, sl, r4
 800dca2:	d00b      	beq.n	800dcbc <_vfiprintf_r+0xa4>
 800dca4:	465b      	mov	r3, fp
 800dca6:	4622      	mov	r2, r4
 800dca8:	4629      	mov	r1, r5
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f7ff ffa2 	bl	800dbf4 <__sfputs_r>
 800dcb0:	3001      	adds	r0, #1
 800dcb2:	f000 80a9 	beq.w	800de08 <_vfiprintf_r+0x1f0>
 800dcb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcb8:	445a      	add	r2, fp
 800dcba:	9209      	str	r2, [sp, #36]	; 0x24
 800dcbc:	f89a 3000 	ldrb.w	r3, [sl]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f000 80a1 	beq.w	800de08 <_vfiprintf_r+0x1f0>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcd0:	f10a 0a01 	add.w	sl, sl, #1
 800dcd4:	9304      	str	r3, [sp, #16]
 800dcd6:	9307      	str	r3, [sp, #28]
 800dcd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcdc:	931a      	str	r3, [sp, #104]	; 0x68
 800dcde:	4654      	mov	r4, sl
 800dce0:	2205      	movs	r2, #5
 800dce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce6:	4854      	ldr	r0, [pc, #336]	; (800de38 <_vfiprintf_r+0x220>)
 800dce8:	f7f2 fa72 	bl	80001d0 <memchr>
 800dcec:	9a04      	ldr	r2, [sp, #16]
 800dcee:	b9d8      	cbnz	r0, 800dd28 <_vfiprintf_r+0x110>
 800dcf0:	06d1      	lsls	r1, r2, #27
 800dcf2:	bf44      	itt	mi
 800dcf4:	2320      	movmi	r3, #32
 800dcf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcfa:	0713      	lsls	r3, r2, #28
 800dcfc:	bf44      	itt	mi
 800dcfe:	232b      	movmi	r3, #43	; 0x2b
 800dd00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd04:	f89a 3000 	ldrb.w	r3, [sl]
 800dd08:	2b2a      	cmp	r3, #42	; 0x2a
 800dd0a:	d015      	beq.n	800dd38 <_vfiprintf_r+0x120>
 800dd0c:	9a07      	ldr	r2, [sp, #28]
 800dd0e:	4654      	mov	r4, sl
 800dd10:	2000      	movs	r0, #0
 800dd12:	f04f 0c0a 	mov.w	ip, #10
 800dd16:	4621      	mov	r1, r4
 800dd18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd1c:	3b30      	subs	r3, #48	; 0x30
 800dd1e:	2b09      	cmp	r3, #9
 800dd20:	d94d      	bls.n	800ddbe <_vfiprintf_r+0x1a6>
 800dd22:	b1b0      	cbz	r0, 800dd52 <_vfiprintf_r+0x13a>
 800dd24:	9207      	str	r2, [sp, #28]
 800dd26:	e014      	b.n	800dd52 <_vfiprintf_r+0x13a>
 800dd28:	eba0 0308 	sub.w	r3, r0, r8
 800dd2c:	fa09 f303 	lsl.w	r3, r9, r3
 800dd30:	4313      	orrs	r3, r2
 800dd32:	9304      	str	r3, [sp, #16]
 800dd34:	46a2      	mov	sl, r4
 800dd36:	e7d2      	b.n	800dcde <_vfiprintf_r+0xc6>
 800dd38:	9b03      	ldr	r3, [sp, #12]
 800dd3a:	1d19      	adds	r1, r3, #4
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	9103      	str	r1, [sp, #12]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	bfbb      	ittet	lt
 800dd44:	425b      	neglt	r3, r3
 800dd46:	f042 0202 	orrlt.w	r2, r2, #2
 800dd4a:	9307      	strge	r3, [sp, #28]
 800dd4c:	9307      	strlt	r3, [sp, #28]
 800dd4e:	bfb8      	it	lt
 800dd50:	9204      	strlt	r2, [sp, #16]
 800dd52:	7823      	ldrb	r3, [r4, #0]
 800dd54:	2b2e      	cmp	r3, #46	; 0x2e
 800dd56:	d10c      	bne.n	800dd72 <_vfiprintf_r+0x15a>
 800dd58:	7863      	ldrb	r3, [r4, #1]
 800dd5a:	2b2a      	cmp	r3, #42	; 0x2a
 800dd5c:	d134      	bne.n	800ddc8 <_vfiprintf_r+0x1b0>
 800dd5e:	9b03      	ldr	r3, [sp, #12]
 800dd60:	1d1a      	adds	r2, r3, #4
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	9203      	str	r2, [sp, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	bfb8      	it	lt
 800dd6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd6e:	3402      	adds	r4, #2
 800dd70:	9305      	str	r3, [sp, #20]
 800dd72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800de48 <_vfiprintf_r+0x230>
 800dd76:	7821      	ldrb	r1, [r4, #0]
 800dd78:	2203      	movs	r2, #3
 800dd7a:	4650      	mov	r0, sl
 800dd7c:	f7f2 fa28 	bl	80001d0 <memchr>
 800dd80:	b138      	cbz	r0, 800dd92 <_vfiprintf_r+0x17a>
 800dd82:	9b04      	ldr	r3, [sp, #16]
 800dd84:	eba0 000a 	sub.w	r0, r0, sl
 800dd88:	2240      	movs	r2, #64	; 0x40
 800dd8a:	4082      	lsls	r2, r0
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	3401      	adds	r4, #1
 800dd90:	9304      	str	r3, [sp, #16]
 800dd92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd96:	4829      	ldr	r0, [pc, #164]	; (800de3c <_vfiprintf_r+0x224>)
 800dd98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd9c:	2206      	movs	r2, #6
 800dd9e:	f7f2 fa17 	bl	80001d0 <memchr>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d03f      	beq.n	800de26 <_vfiprintf_r+0x20e>
 800dda6:	4b26      	ldr	r3, [pc, #152]	; (800de40 <_vfiprintf_r+0x228>)
 800dda8:	bb1b      	cbnz	r3, 800ddf2 <_vfiprintf_r+0x1da>
 800ddaa:	9b03      	ldr	r3, [sp, #12]
 800ddac:	3307      	adds	r3, #7
 800ddae:	f023 0307 	bic.w	r3, r3, #7
 800ddb2:	3308      	adds	r3, #8
 800ddb4:	9303      	str	r3, [sp, #12]
 800ddb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddb8:	443b      	add	r3, r7
 800ddba:	9309      	str	r3, [sp, #36]	; 0x24
 800ddbc:	e768      	b.n	800dc90 <_vfiprintf_r+0x78>
 800ddbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddc2:	460c      	mov	r4, r1
 800ddc4:	2001      	movs	r0, #1
 800ddc6:	e7a6      	b.n	800dd16 <_vfiprintf_r+0xfe>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	3401      	adds	r4, #1
 800ddcc:	9305      	str	r3, [sp, #20]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	f04f 0c0a 	mov.w	ip, #10
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddda:	3a30      	subs	r2, #48	; 0x30
 800dddc:	2a09      	cmp	r2, #9
 800ddde:	d903      	bls.n	800dde8 <_vfiprintf_r+0x1d0>
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d0c6      	beq.n	800dd72 <_vfiprintf_r+0x15a>
 800dde4:	9105      	str	r1, [sp, #20]
 800dde6:	e7c4      	b.n	800dd72 <_vfiprintf_r+0x15a>
 800dde8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddec:	4604      	mov	r4, r0
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e7f0      	b.n	800ddd4 <_vfiprintf_r+0x1bc>
 800ddf2:	ab03      	add	r3, sp, #12
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	462a      	mov	r2, r5
 800ddf8:	4b12      	ldr	r3, [pc, #72]	; (800de44 <_vfiprintf_r+0x22c>)
 800ddfa:	a904      	add	r1, sp, #16
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	f7fd fc51 	bl	800b6a4 <_printf_float>
 800de02:	4607      	mov	r7, r0
 800de04:	1c78      	adds	r0, r7, #1
 800de06:	d1d6      	bne.n	800ddb6 <_vfiprintf_r+0x19e>
 800de08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de0a:	07d9      	lsls	r1, r3, #31
 800de0c:	d405      	bmi.n	800de1a <_vfiprintf_r+0x202>
 800de0e:	89ab      	ldrh	r3, [r5, #12]
 800de10:	059a      	lsls	r2, r3, #22
 800de12:	d402      	bmi.n	800de1a <_vfiprintf_r+0x202>
 800de14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de16:	f7fe f9bf 	bl	800c198 <__retarget_lock_release_recursive>
 800de1a:	89ab      	ldrh	r3, [r5, #12]
 800de1c:	065b      	lsls	r3, r3, #25
 800de1e:	f53f af1d 	bmi.w	800dc5c <_vfiprintf_r+0x44>
 800de22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de24:	e71c      	b.n	800dc60 <_vfiprintf_r+0x48>
 800de26:	ab03      	add	r3, sp, #12
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	462a      	mov	r2, r5
 800de2c:	4b05      	ldr	r3, [pc, #20]	; (800de44 <_vfiprintf_r+0x22c>)
 800de2e:	a904      	add	r1, sp, #16
 800de30:	4630      	mov	r0, r6
 800de32:	f7fd fedb 	bl	800bbec <_printf_i>
 800de36:	e7e4      	b.n	800de02 <_vfiprintf_r+0x1ea>
 800de38:	0800e41c 	.word	0x0800e41c
 800de3c:	0800e426 	.word	0x0800e426
 800de40:	0800b6a5 	.word	0x0800b6a5
 800de44:	0800dbf5 	.word	0x0800dbf5
 800de48:	0800e422 	.word	0x0800e422

0800de4c <__swbuf_r>:
 800de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4e:	460e      	mov	r6, r1
 800de50:	4614      	mov	r4, r2
 800de52:	4605      	mov	r5, r0
 800de54:	b118      	cbz	r0, 800de5e <__swbuf_r+0x12>
 800de56:	6a03      	ldr	r3, [r0, #32]
 800de58:	b90b      	cbnz	r3, 800de5e <__swbuf_r+0x12>
 800de5a:	f7fe f875 	bl	800bf48 <__sinit>
 800de5e:	69a3      	ldr	r3, [r4, #24]
 800de60:	60a3      	str	r3, [r4, #8]
 800de62:	89a3      	ldrh	r3, [r4, #12]
 800de64:	071a      	lsls	r2, r3, #28
 800de66:	d525      	bpl.n	800deb4 <__swbuf_r+0x68>
 800de68:	6923      	ldr	r3, [r4, #16]
 800de6a:	b31b      	cbz	r3, 800deb4 <__swbuf_r+0x68>
 800de6c:	6823      	ldr	r3, [r4, #0]
 800de6e:	6922      	ldr	r2, [r4, #16]
 800de70:	1a98      	subs	r0, r3, r2
 800de72:	6963      	ldr	r3, [r4, #20]
 800de74:	b2f6      	uxtb	r6, r6
 800de76:	4283      	cmp	r3, r0
 800de78:	4637      	mov	r7, r6
 800de7a:	dc04      	bgt.n	800de86 <__swbuf_r+0x3a>
 800de7c:	4621      	mov	r1, r4
 800de7e:	4628      	mov	r0, r5
 800de80:	f7ff fdae 	bl	800d9e0 <_fflush_r>
 800de84:	b9e0      	cbnz	r0, 800dec0 <__swbuf_r+0x74>
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	3b01      	subs	r3, #1
 800de8a:	60a3      	str	r3, [r4, #8]
 800de8c:	6823      	ldr	r3, [r4, #0]
 800de8e:	1c5a      	adds	r2, r3, #1
 800de90:	6022      	str	r2, [r4, #0]
 800de92:	701e      	strb	r6, [r3, #0]
 800de94:	6962      	ldr	r2, [r4, #20]
 800de96:	1c43      	adds	r3, r0, #1
 800de98:	429a      	cmp	r2, r3
 800de9a:	d004      	beq.n	800dea6 <__swbuf_r+0x5a>
 800de9c:	89a3      	ldrh	r3, [r4, #12]
 800de9e:	07db      	lsls	r3, r3, #31
 800dea0:	d506      	bpl.n	800deb0 <__swbuf_r+0x64>
 800dea2:	2e0a      	cmp	r6, #10
 800dea4:	d104      	bne.n	800deb0 <__swbuf_r+0x64>
 800dea6:	4621      	mov	r1, r4
 800dea8:	4628      	mov	r0, r5
 800deaa:	f7ff fd99 	bl	800d9e0 <_fflush_r>
 800deae:	b938      	cbnz	r0, 800dec0 <__swbuf_r+0x74>
 800deb0:	4638      	mov	r0, r7
 800deb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deb4:	4621      	mov	r1, r4
 800deb6:	4628      	mov	r0, r5
 800deb8:	f000 f806 	bl	800dec8 <__swsetup_r>
 800debc:	2800      	cmp	r0, #0
 800debe:	d0d5      	beq.n	800de6c <__swbuf_r+0x20>
 800dec0:	f04f 37ff 	mov.w	r7, #4294967295
 800dec4:	e7f4      	b.n	800deb0 <__swbuf_r+0x64>
	...

0800dec8 <__swsetup_r>:
 800dec8:	b538      	push	{r3, r4, r5, lr}
 800deca:	4b2a      	ldr	r3, [pc, #168]	; (800df74 <__swsetup_r+0xac>)
 800decc:	4605      	mov	r5, r0
 800dece:	6818      	ldr	r0, [r3, #0]
 800ded0:	460c      	mov	r4, r1
 800ded2:	b118      	cbz	r0, 800dedc <__swsetup_r+0x14>
 800ded4:	6a03      	ldr	r3, [r0, #32]
 800ded6:	b90b      	cbnz	r3, 800dedc <__swsetup_r+0x14>
 800ded8:	f7fe f836 	bl	800bf48 <__sinit>
 800dedc:	89a3      	ldrh	r3, [r4, #12]
 800dede:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dee2:	0718      	lsls	r0, r3, #28
 800dee4:	d422      	bmi.n	800df2c <__swsetup_r+0x64>
 800dee6:	06d9      	lsls	r1, r3, #27
 800dee8:	d407      	bmi.n	800defa <__swsetup_r+0x32>
 800deea:	2309      	movs	r3, #9
 800deec:	602b      	str	r3, [r5, #0]
 800deee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800def2:	81a3      	strh	r3, [r4, #12]
 800def4:	f04f 30ff 	mov.w	r0, #4294967295
 800def8:	e034      	b.n	800df64 <__swsetup_r+0x9c>
 800defa:	0758      	lsls	r0, r3, #29
 800defc:	d512      	bpl.n	800df24 <__swsetup_r+0x5c>
 800defe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df00:	b141      	cbz	r1, 800df14 <__swsetup_r+0x4c>
 800df02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df06:	4299      	cmp	r1, r3
 800df08:	d002      	beq.n	800df10 <__swsetup_r+0x48>
 800df0a:	4628      	mov	r0, r5
 800df0c:	f7fe ffc2 	bl	800ce94 <_free_r>
 800df10:	2300      	movs	r3, #0
 800df12:	6363      	str	r3, [r4, #52]	; 0x34
 800df14:	89a3      	ldrh	r3, [r4, #12]
 800df16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df1a:	81a3      	strh	r3, [r4, #12]
 800df1c:	2300      	movs	r3, #0
 800df1e:	6063      	str	r3, [r4, #4]
 800df20:	6923      	ldr	r3, [r4, #16]
 800df22:	6023      	str	r3, [r4, #0]
 800df24:	89a3      	ldrh	r3, [r4, #12]
 800df26:	f043 0308 	orr.w	r3, r3, #8
 800df2a:	81a3      	strh	r3, [r4, #12]
 800df2c:	6923      	ldr	r3, [r4, #16]
 800df2e:	b94b      	cbnz	r3, 800df44 <__swsetup_r+0x7c>
 800df30:	89a3      	ldrh	r3, [r4, #12]
 800df32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df3a:	d003      	beq.n	800df44 <__swsetup_r+0x7c>
 800df3c:	4621      	mov	r1, r4
 800df3e:	4628      	mov	r0, r5
 800df40:	f000 f884 	bl	800e04c <__smakebuf_r>
 800df44:	89a0      	ldrh	r0, [r4, #12]
 800df46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df4a:	f010 0301 	ands.w	r3, r0, #1
 800df4e:	d00a      	beq.n	800df66 <__swsetup_r+0x9e>
 800df50:	2300      	movs	r3, #0
 800df52:	60a3      	str	r3, [r4, #8]
 800df54:	6963      	ldr	r3, [r4, #20]
 800df56:	425b      	negs	r3, r3
 800df58:	61a3      	str	r3, [r4, #24]
 800df5a:	6923      	ldr	r3, [r4, #16]
 800df5c:	b943      	cbnz	r3, 800df70 <__swsetup_r+0xa8>
 800df5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df62:	d1c4      	bne.n	800deee <__swsetup_r+0x26>
 800df64:	bd38      	pop	{r3, r4, r5, pc}
 800df66:	0781      	lsls	r1, r0, #30
 800df68:	bf58      	it	pl
 800df6a:	6963      	ldrpl	r3, [r4, #20]
 800df6c:	60a3      	str	r3, [r4, #8]
 800df6e:	e7f4      	b.n	800df5a <__swsetup_r+0x92>
 800df70:	2000      	movs	r0, #0
 800df72:	e7f7      	b.n	800df64 <__swsetup_r+0x9c>
 800df74:	20000084 	.word	0x20000084

0800df78 <_raise_r>:
 800df78:	291f      	cmp	r1, #31
 800df7a:	b538      	push	{r3, r4, r5, lr}
 800df7c:	4604      	mov	r4, r0
 800df7e:	460d      	mov	r5, r1
 800df80:	d904      	bls.n	800df8c <_raise_r+0x14>
 800df82:	2316      	movs	r3, #22
 800df84:	6003      	str	r3, [r0, #0]
 800df86:	f04f 30ff 	mov.w	r0, #4294967295
 800df8a:	bd38      	pop	{r3, r4, r5, pc}
 800df8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800df8e:	b112      	cbz	r2, 800df96 <_raise_r+0x1e>
 800df90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df94:	b94b      	cbnz	r3, 800dfaa <_raise_r+0x32>
 800df96:	4620      	mov	r0, r4
 800df98:	f000 f830 	bl	800dffc <_getpid_r>
 800df9c:	462a      	mov	r2, r5
 800df9e:	4601      	mov	r1, r0
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfa6:	f000 b817 	b.w	800dfd8 <_kill_r>
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d00a      	beq.n	800dfc4 <_raise_r+0x4c>
 800dfae:	1c59      	adds	r1, r3, #1
 800dfb0:	d103      	bne.n	800dfba <_raise_r+0x42>
 800dfb2:	2316      	movs	r3, #22
 800dfb4:	6003      	str	r3, [r0, #0]
 800dfb6:	2001      	movs	r0, #1
 800dfb8:	e7e7      	b.n	800df8a <_raise_r+0x12>
 800dfba:	2400      	movs	r4, #0
 800dfbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	4798      	blx	r3
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	e7e0      	b.n	800df8a <_raise_r+0x12>

0800dfc8 <raise>:
 800dfc8:	4b02      	ldr	r3, [pc, #8]	; (800dfd4 <raise+0xc>)
 800dfca:	4601      	mov	r1, r0
 800dfcc:	6818      	ldr	r0, [r3, #0]
 800dfce:	f7ff bfd3 	b.w	800df78 <_raise_r>
 800dfd2:	bf00      	nop
 800dfd4:	20000084 	.word	0x20000084

0800dfd8 <_kill_r>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	4d07      	ldr	r5, [pc, #28]	; (800dff8 <_kill_r+0x20>)
 800dfdc:	2300      	movs	r3, #0
 800dfde:	4604      	mov	r4, r0
 800dfe0:	4608      	mov	r0, r1
 800dfe2:	4611      	mov	r1, r2
 800dfe4:	602b      	str	r3, [r5, #0]
 800dfe6:	f7f3 fd49 	bl	8001a7c <_kill>
 800dfea:	1c43      	adds	r3, r0, #1
 800dfec:	d102      	bne.n	800dff4 <_kill_r+0x1c>
 800dfee:	682b      	ldr	r3, [r5, #0]
 800dff0:	b103      	cbz	r3, 800dff4 <_kill_r+0x1c>
 800dff2:	6023      	str	r3, [r4, #0]
 800dff4:	bd38      	pop	{r3, r4, r5, pc}
 800dff6:	bf00      	nop
 800dff8:	20000c7c 	.word	0x20000c7c

0800dffc <_getpid_r>:
 800dffc:	f7f3 bd36 	b.w	8001a6c <_getpid>

0800e000 <__swhatbuf_r>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	460c      	mov	r4, r1
 800e004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e008:	2900      	cmp	r1, #0
 800e00a:	b096      	sub	sp, #88	; 0x58
 800e00c:	4615      	mov	r5, r2
 800e00e:	461e      	mov	r6, r3
 800e010:	da0d      	bge.n	800e02e <__swhatbuf_r+0x2e>
 800e012:	89a3      	ldrh	r3, [r4, #12]
 800e014:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e018:	f04f 0100 	mov.w	r1, #0
 800e01c:	bf0c      	ite	eq
 800e01e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e022:	2340      	movne	r3, #64	; 0x40
 800e024:	2000      	movs	r0, #0
 800e026:	6031      	str	r1, [r6, #0]
 800e028:	602b      	str	r3, [r5, #0]
 800e02a:	b016      	add	sp, #88	; 0x58
 800e02c:	bd70      	pop	{r4, r5, r6, pc}
 800e02e:	466a      	mov	r2, sp
 800e030:	f000 f848 	bl	800e0c4 <_fstat_r>
 800e034:	2800      	cmp	r0, #0
 800e036:	dbec      	blt.n	800e012 <__swhatbuf_r+0x12>
 800e038:	9901      	ldr	r1, [sp, #4]
 800e03a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e03e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e042:	4259      	negs	r1, r3
 800e044:	4159      	adcs	r1, r3
 800e046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e04a:	e7eb      	b.n	800e024 <__swhatbuf_r+0x24>

0800e04c <__smakebuf_r>:
 800e04c:	898b      	ldrh	r3, [r1, #12]
 800e04e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e050:	079d      	lsls	r5, r3, #30
 800e052:	4606      	mov	r6, r0
 800e054:	460c      	mov	r4, r1
 800e056:	d507      	bpl.n	800e068 <__smakebuf_r+0x1c>
 800e058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	6123      	str	r3, [r4, #16]
 800e060:	2301      	movs	r3, #1
 800e062:	6163      	str	r3, [r4, #20]
 800e064:	b002      	add	sp, #8
 800e066:	bd70      	pop	{r4, r5, r6, pc}
 800e068:	ab01      	add	r3, sp, #4
 800e06a:	466a      	mov	r2, sp
 800e06c:	f7ff ffc8 	bl	800e000 <__swhatbuf_r>
 800e070:	9900      	ldr	r1, [sp, #0]
 800e072:	4605      	mov	r5, r0
 800e074:	4630      	mov	r0, r6
 800e076:	f7fd f9e9 	bl	800b44c <_malloc_r>
 800e07a:	b948      	cbnz	r0, 800e090 <__smakebuf_r+0x44>
 800e07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e080:	059a      	lsls	r2, r3, #22
 800e082:	d4ef      	bmi.n	800e064 <__smakebuf_r+0x18>
 800e084:	f023 0303 	bic.w	r3, r3, #3
 800e088:	f043 0302 	orr.w	r3, r3, #2
 800e08c:	81a3      	strh	r3, [r4, #12]
 800e08e:	e7e3      	b.n	800e058 <__smakebuf_r+0xc>
 800e090:	89a3      	ldrh	r3, [r4, #12]
 800e092:	6020      	str	r0, [r4, #0]
 800e094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e098:	81a3      	strh	r3, [r4, #12]
 800e09a:	9b00      	ldr	r3, [sp, #0]
 800e09c:	6163      	str	r3, [r4, #20]
 800e09e:	9b01      	ldr	r3, [sp, #4]
 800e0a0:	6120      	str	r0, [r4, #16]
 800e0a2:	b15b      	cbz	r3, 800e0bc <__smakebuf_r+0x70>
 800e0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f000 f81d 	bl	800e0e8 <_isatty_r>
 800e0ae:	b128      	cbz	r0, 800e0bc <__smakebuf_r+0x70>
 800e0b0:	89a3      	ldrh	r3, [r4, #12]
 800e0b2:	f023 0303 	bic.w	r3, r3, #3
 800e0b6:	f043 0301 	orr.w	r3, r3, #1
 800e0ba:	81a3      	strh	r3, [r4, #12]
 800e0bc:	89a3      	ldrh	r3, [r4, #12]
 800e0be:	431d      	orrs	r5, r3
 800e0c0:	81a5      	strh	r5, [r4, #12]
 800e0c2:	e7cf      	b.n	800e064 <__smakebuf_r+0x18>

0800e0c4 <_fstat_r>:
 800e0c4:	b538      	push	{r3, r4, r5, lr}
 800e0c6:	4d07      	ldr	r5, [pc, #28]	; (800e0e4 <_fstat_r+0x20>)
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	4608      	mov	r0, r1
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	602b      	str	r3, [r5, #0]
 800e0d2:	f7f3 fd32 	bl	8001b3a <_fstat>
 800e0d6:	1c43      	adds	r3, r0, #1
 800e0d8:	d102      	bne.n	800e0e0 <_fstat_r+0x1c>
 800e0da:	682b      	ldr	r3, [r5, #0]
 800e0dc:	b103      	cbz	r3, 800e0e0 <_fstat_r+0x1c>
 800e0de:	6023      	str	r3, [r4, #0]
 800e0e0:	bd38      	pop	{r3, r4, r5, pc}
 800e0e2:	bf00      	nop
 800e0e4:	20000c7c 	.word	0x20000c7c

0800e0e8 <_isatty_r>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	4d06      	ldr	r5, [pc, #24]	; (800e104 <_isatty_r+0x1c>)
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	4608      	mov	r0, r1
 800e0f2:	602b      	str	r3, [r5, #0]
 800e0f4:	f7f3 fd31 	bl	8001b5a <_isatty>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	d102      	bne.n	800e102 <_isatty_r+0x1a>
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	b103      	cbz	r3, 800e102 <_isatty_r+0x1a>
 800e100:	6023      	str	r3, [r4, #0]
 800e102:	bd38      	pop	{r3, r4, r5, pc}
 800e104:	20000c7c 	.word	0x20000c7c

0800e108 <_init>:
 800e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10a:	bf00      	nop
 800e10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10e:	bc08      	pop	{r3}
 800e110:	469e      	mov	lr, r3
 800e112:	4770      	bx	lr

0800e114 <_fini>:
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	bf00      	nop
 800e118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e11a:	bc08      	pop	{r3}
 800e11c:	469e      	mov	lr, r3
 800e11e:	4770      	bx	lr
