
Custom_UART_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003918  08003918  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003920  08003920  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000230  20000060  20000060  00020060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008515  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001751  00000000  00000000  000285e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000700  00000000  00000000  00029d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000556  00000000  00000000  0002a438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002000a  00000000  00000000  0002a98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009036  00000000  00000000  0004a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c25ab  00000000  00000000  000539ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002094  00000000  00000000  00115f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  00118010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003838 	.word	0x08003838

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08003838 	.word	0x08003838

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800057c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2) { // If we are receiving on UART2
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a62      	ldr	r2, [pc, #392]	; (8000714 <HAL_UART_RxCpltCallback+0x198>)
 800058c:	4293      	cmp	r3, r2
 800058e:	f040 80bb 	bne.w	8000708 <HAL_UART_RxCpltCallback+0x18c>
        uint8_t rxByte = rx_data[0]; // Received byte
 8000592:	4b61      	ldr	r3, [pc, #388]	; (8000718 <HAL_UART_RxCpltCallback+0x19c>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	73fb      	strb	r3, [r7, #15]
        switch (uartState) {
 8000598:	4b60      	ldr	r3, [pc, #384]	; (800071c <HAL_UART_RxCpltCallback+0x1a0>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b07      	cmp	r3, #7
 800059e:	f200 80ae 	bhi.w	80006fe <HAL_UART_RxCpltCallback+0x182>
 80005a2:	a201      	add	r2, pc, #4	; (adr r2, 80005a8 <HAL_UART_RxCpltCallback+0x2c>)
 80005a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a8:	080005c9 	.word	0x080005c9
 80005ac:	080005df 	.word	0x080005df
 80005b0:	080005ed 	.word	0x080005ed
 80005b4:	080005fb 	.word	0x080005fb
 80005b8:	0800063b 	.word	0x0800063b
 80005bc:	080006ad 	.word	0x080006ad
 80005c0:	080006bb 	.word	0x080006bb
 80005c4:	080006e9 	.word	0x080006e9
            case UART_WAIT_FOR_SOP: // SOP Case
                if (rxByte == 0x53) { // SOP byte = 0x53 ('S')
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b53      	cmp	r3, #83	; 0x53
 80005cc:	f040 8092 	bne.w	80006f4 <HAL_UART_RxCpltCallback+0x178>
                	sensorData.sop = rxByte; // Set the sop
 80005d0:	4a53      	ldr	r2, [pc, #332]	; (8000720 <HAL_UART_RxCpltCallback+0x1a4>)
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	7013      	strb	r3, [r2, #0]
                    uartState = UART_DATATYPE; // Next parameter
 80005d6:	4b51      	ldr	r3, [pc, #324]	; (800071c <HAL_UART_RxCpltCallback+0x1a0>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                }
                break;
 80005dc:	e08a      	b.n	80006f4 <HAL_UART_RxCpltCallback+0x178>
            case UART_DATATYPE: // Data type Case
            	sensorData.datatype = rxByte; // Set the data type (Temp = 00, Humidity = 01, Sound = 10, Vibration = 11)
 80005de:	4a50      	ldr	r2, [pc, #320]	; (8000720 <HAL_UART_RxCpltCallback+0x1a4>)
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	7053      	strb	r3, [r2, #1]
                uartState = UART_SENSOR_ID; // Next parameter
 80005e4:	4b4d      	ldr	r3, [pc, #308]	; (800071c <HAL_UART_RxCpltCallback+0x1a0>)
 80005e6:	2202      	movs	r2, #2
 80005e8:	701a      	strb	r2, [r3, #0]
                break;
 80005ea:	e088      	b.n	80006fe <HAL_UART_RxCpltCallback+0x182>

            case UART_SENSOR_ID: // Sensor ID Case
            	sensorData.sensorId = rxByte; // Set the sensor ID (000, 001, 010, 011, 100, 101, 110, 111 (i.e. Sensor 1-8)
 80005ec:	4a4c      	ldr	r2, [pc, #304]	; (8000720 <HAL_UART_RxCpltCallback+0x1a4>)
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	7093      	strb	r3, [r2, #2]
                uartState = UART_TIMESTAMP; // Next parameter
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <HAL_UART_RxCpltCallback+0x1a0>)
 80005f4:	2203      	movs	r2, #3
 80005f6:	701a      	strb	r2, [r3, #0]
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                break;
 80005f8:	e081      	b.n	80006fe <HAL_UART_RxCpltCallback+0x182>

            case UART_TIMESTAMP: // Timestamp Case
                // Shift existing buffer by 8 to make room for new byte at LSB position
                timestampBuffer >>= 8;
 80005fa:	4b4a      	ldr	r3, [pc, #296]	; (8000724 <HAL_UART_RxCpltCallback+0x1a8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4a48      	ldr	r2, [pc, #288]	; (8000724 <HAL_UART_RxCpltCallback+0x1a8>)
 8000602:	6013      	str	r3, [r2, #0]
                // Place the new byte at the LSB position
                timestampBuffer |= (uint32_t)rxByte << (8 * (sizeof(sensorData.timestamp) - 1));
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	061a      	lsls	r2, r3, #24
 8000608:	4b46      	ldr	r3, [pc, #280]	; (8000724 <HAL_UART_RxCpltCallback+0x1a8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4313      	orrs	r3, r2
 800060e:	4a45      	ldr	r2, [pc, #276]	; (8000724 <HAL_UART_RxCpltCallback+0x1a8>)
 8000610:	6013      	str	r3, [r2, #0]
                dataIndex++;
 8000612:	4b45      	ldr	r3, [pc, #276]	; (8000728 <HAL_UART_RxCpltCallback+0x1ac>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a43      	ldr	r2, [pc, #268]	; (8000728 <HAL_UART_RxCpltCallback+0x1ac>)
 800061a:	6013      	str	r3, [r2, #0]
                if (dataIndex >= sizeof(sensorData.timestamp)) { // Once the timestamp is full
 800061c:	4b42      	ldr	r3, [pc, #264]	; (8000728 <HAL_UART_RxCpltCallback+0x1ac>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b03      	cmp	r3, #3
 8000622:	d969      	bls.n	80006f8 <HAL_UART_RxCpltCallback+0x17c>
                    sensorData.timestamp = timestampBuffer; // Set timestamp to buffer
 8000624:	4b3f      	ldr	r3, [pc, #252]	; (8000724 <HAL_UART_RxCpltCallback+0x1a8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a3d      	ldr	r2, [pc, #244]	; (8000720 <HAL_UART_RxCpltCallback+0x1a4>)
 800062a:	6053      	str	r3, [r2, #4]
                    dataIndex = 0;
 800062c:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <HAL_UART_RxCpltCallback+0x1ac>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
                    uartState = UART_DATA; // Next parameter
 8000632:	4b3a      	ldr	r3, [pc, #232]	; (800071c <HAL_UART_RxCpltCallback+0x1a0>)
 8000634:	2204      	movs	r2, #4
 8000636:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000638:	e05e      	b.n	80006f8 <HAL_UART_RxCpltCallback+0x17c>

            case UART_DATA: // Data Case
                // Same logic as timestamp for little-endian
                dataBuffer >>= 8;
 800063a:	4b3c      	ldr	r3, [pc, #240]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 800063c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000640:	f04f 0200 	mov.w	r2, #0
 8000644:	f04f 0300 	mov.w	r3, #0
 8000648:	0a02      	lsrs	r2, r0, #8
 800064a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800064e:	0a0b      	lsrs	r3, r1, #8
 8000650:	4936      	ldr	r1, [pc, #216]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 8000652:	e9c1 2300 	strd	r2, r3, [r1]
                dataBuffer |= (uint64_t)rxByte << (8 * (sizeof(sensorData.data) - 1));
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	2200      	movs	r2, #0
 800065a:	4698      	mov	r8, r3
 800065c:	4691      	mov	r9, r2
 800065e:	f04f 0200 	mov.w	r2, #0
 8000662:	f04f 0300 	mov.w	r3, #0
 8000666:	ea4f 6308 	mov.w	r3, r8, lsl #24
 800066a:	2200      	movs	r2, #0
 800066c:	492f      	ldr	r1, [pc, #188]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 800066e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000672:	ea42 0400 	orr.w	r4, r2, r0
 8000676:	ea43 0501 	orr.w	r5, r3, r1
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 800067c:	e9c3 4500 	strd	r4, r5, [r3]
                dataIndex++;
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <HAL_UART_RxCpltCallback+0x1ac>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a28      	ldr	r2, [pc, #160]	; (8000728 <HAL_UART_RxCpltCallback+0x1ac>)
 8000688:	6013      	str	r3, [r2, #0]
                if (dataIndex >= sizeof(sensorData.data)) {
 800068a:	4b27      	ldr	r3, [pc, #156]	; (8000728 <HAL_UART_RxCpltCallback+0x1ac>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b07      	cmp	r3, #7
 8000690:	d934      	bls.n	80006fc <HAL_UART_RxCpltCallback+0x180>
                    sensorData.data = dataBuffer;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 8000694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000698:	4921      	ldr	r1, [pc, #132]	; (8000720 <HAL_UART_RxCpltCallback+0x1a4>)
 800069a:	e9c1 2302 	strd	r2, r3, [r1, #8]
                    dataIndex = 0;
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <HAL_UART_RxCpltCallback+0x1ac>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
                    uartState = UART_CRC; // Next parameter
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <HAL_UART_RxCpltCallback+0x1a0>)
 80006a6:	2205      	movs	r2, #5
 80006a8:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006aa:	e027      	b.n	80006fc <HAL_UART_RxCpltCallback+0x180>

            case UART_CRC: // CRC Case
                sensorData.crc = rxByte; // Set the CRC value based on algorithm
 80006ac:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <HAL_UART_RxCpltCallback+0x1a4>)
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	7413      	strb	r3, [r2, #16]
                uartState = UART_EOP; // Next parameter
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <HAL_UART_RxCpltCallback+0x1a0>)
 80006b4:	2206      	movs	r2, #6
 80006b6:	701a      	strb	r2, [r3, #0]
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                break;
 80006b8:	e021      	b.n	80006fe <HAL_UART_RxCpltCallback+0x182>

            case UART_EOP:
                if (rxByte == 0x45) { // EOP byte = 0x45 ('E')
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2b45      	cmp	r3, #69	; 0x45
 80006be:	d106      	bne.n	80006ce <HAL_UART_RxCpltCallback+0x152>
                    uartState = UART_DONE; // Packet reception is complete
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_UART_RxCpltCallback+0x1a0>)
 80006c2:	2207      	movs	r2, #7
 80006c4:	701a      	strb	r2, [r3, #0]
                    sensorData.eop = rxByte; // Set the eop
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <HAL_UART_RxCpltCallback+0x1a4>)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	7453      	strb	r3, [r2, #17]
                    uartState = UART_DONE; // Packet reception is complete
                    sensorData.eop = rxByte; // Set the eop
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
//                    uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
                }
                break;
 80006cc:	e017      	b.n	80006fe <HAL_UART_RxCpltCallback+0x182>
                    uartState = UART_DONE; // Packet reception is complete
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <HAL_UART_RxCpltCallback+0x1a0>)
 80006d0:	2207      	movs	r2, #7
 80006d2:	701a      	strb	r2, [r3, #0]
                    sensorData.eop = rxByte; // Set the eop
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <HAL_UART_RxCpltCallback+0x1a4>)
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	7453      	strb	r3, [r2, #17]
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	4813      	ldr	r0, [pc, #76]	; (8000730 <HAL_UART_RxCpltCallback+0x1b4>)
 80006e2:	f000 ff3d 	bl	8001560 <HAL_GPIO_WritePin>
                break;
 80006e6:	e00a      	b.n	80006fe <HAL_UART_RxCpltCallback+0x182>
            case UART_DONE:
                // Packet is complete, validate CRC and take appropriate action
//                if (validateCRC(&sensorData)) {
//                    processData(&sensorData); // Process the data
//                }
            	processData(&sensorData); // Process the data
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <HAL_UART_RxCpltCallback+0x1a4>)
 80006ea:	f000 f849 	bl	8000780 <processData>
                resetState(); // Reset FSM and variables
 80006ee:	f000 f823 	bl	8000738 <resetState>
                break;
 80006f2:	e004      	b.n	80006fe <HAL_UART_RxCpltCallback+0x182>
                break;
 80006f4:	bf00      	nop
 80006f6:	e002      	b.n	80006fe <HAL_UART_RxCpltCallback+0x182>
                break;
 80006f8:	bf00      	nop
 80006fa:	e000      	b.n	80006fe <HAL_UART_RxCpltCallback+0x182>
                break;
 80006fc:	bf00      	nop
        }
        // Ready to receive the next byte
        HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	4905      	ldr	r1, [pc, #20]	; (8000718 <HAL_UART_RxCpltCallback+0x19c>)
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 8000704:	f001 fc79 	bl	8001ffa <HAL_UART_Receive_IT>
    }
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000712:	bf00      	nop
 8000714:	40004400 	.word	0x40004400
 8000718:	20000128 	.word	0x20000128
 800071c:	2000010c 	.word	0x2000010c
 8000720:	20000110 	.word	0x20000110
 8000724:	20000130 	.word	0x20000130
 8000728:	2000012c 	.word	0x2000012c
 800072c:	20000138 	.word	0x20000138
 8000730:	40020c00 	.word	0x40020c00
 8000734:	2000007c 	.word	0x2000007c

08000738 <resetState>:
void resetState(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    uartState = UART_WAIT_FOR_SOP; // Starting state
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <resetState+0x34>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
    dataIndex = 0;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <resetState+0x38>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
    timestampBuffer = 0;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <resetState+0x3c>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
    dataBuffer = 0;
 800074e:	490a      	ldr	r1, [pc, #40]	; (8000778 <resetState+0x40>)
 8000750:	f04f 0200 	mov.w	r2, #0
 8000754:	f04f 0300 	mov.w	r3, #0
 8000758:	e9c1 2300 	strd	r2, r3, [r1]
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <resetState+0x44>)
 8000764:	f000 fefc 	bl	8001560 <HAL_GPIO_WritePin>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000010c 	.word	0x2000010c
 8000770:	2000012c 	.word	0x2000012c
 8000774:	20000130 	.word	0x20000130
 8000778:	20000138 	.word	0x20000138
 800077c:	40020c00 	.word	0x40020c00

08000780 <processData>:
int validateCRC(const SensorDataPacket *packet) {
    // Placeholder function to validate CRC - replace with actual CRC calculation
    return packet->crc == crc_calculated;
}

void processData(const SensorDataPacket *packet) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b09c      	sub	sp, #112	; 0x70
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    char buffer[100]; // Ensure the buffer is large enough for all the data

    // Start of Packet (SOP) - Hexadecimal
    sprintf(buffer, "SOP: 0x%02X\r\n", packet->sop);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	494e      	ldr	r1, [pc, #312]	; (80008cc <processData+0x14c>)
 8000794:	4618      	mov	r0, r3
 8000796:	f002 fbab 	bl	8002ef0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd16 	bl	80001d0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f107 010c 	add.w	r1, r7, #12
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	4848      	ldr	r0, [pc, #288]	; (80008d0 <processData+0x150>)
 80007b0:	f001 fb98 	bl	8001ee4 <HAL_UART_Transmit>

    // Data Type - Binary
    sprintf(buffer, "Data Type: %u\r\n", packet->datatype);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	461a      	mov	r2, r3
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4945      	ldr	r1, [pc, #276]	; (80008d4 <processData+0x154>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fb95 	bl	8002ef0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd00 	bl	80001d0 <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	f107 010c 	add.w	r1, r7, #12
 80007d8:	2364      	movs	r3, #100	; 0x64
 80007da:	483d      	ldr	r0, [pc, #244]	; (80008d0 <processData+0x150>)
 80007dc:	f001 fb82 	bl	8001ee4 <HAL_UART_Transmit>

    // Sensor ID - Binary
    sprintf(buffer, "Sensor ID: %u\r\n", packet->sensorId);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	789b      	ldrb	r3, [r3, #2]
 80007e4:	461a      	mov	r2, r3
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	493b      	ldr	r1, [pc, #236]	; (80008d8 <processData+0x158>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fb7f 	bl	8002ef0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fcea 	bl	80001d0 <strlen>
 80007fc:	4603      	mov	r3, r0
 80007fe:	b29a      	uxth	r2, r3
 8000800:	f107 010c 	add.w	r1, r7, #12
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	4832      	ldr	r0, [pc, #200]	; (80008d0 <processData+0x150>)
 8000808:	f001 fb6c 	bl	8001ee4 <HAL_UART_Transmit>

    // Timestamp - Decimal
    sprintf(buffer, "Timestamp: %lu\r\n", packet->timestamp);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4931      	ldr	r1, [pc, #196]	; (80008dc <processData+0x15c>)
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fb6a 	bl	8002ef0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fcd5 	bl	80001d0 <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	b29a      	uxth	r2, r3
 800082a:	f107 010c 	add.w	r1, r7, #12
 800082e:	2364      	movs	r3, #100	; 0x64
 8000830:	4827      	ldr	r0, [pc, #156]	; (80008d0 <processData+0x150>)
 8000832:	f001 fb57 	bl	8001ee4 <HAL_UART_Transmit>

    // Data - Decimal
    sprintf(buffer, "Data: %lu\r\n", packet->data);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800083c:	f107 000c 	add.w	r0, r7, #12
 8000840:	4927      	ldr	r1, [pc, #156]	; (80008e0 <processData+0x160>)
 8000842:	f002 fb55 	bl	8002ef0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fcc0 	bl	80001d0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 010c 	add.w	r1, r7, #12
 8000858:	2364      	movs	r3, #100	; 0x64
 800085a:	481d      	ldr	r0, [pc, #116]	; (80008d0 <processData+0x150>)
 800085c:	f001 fb42 	bl	8001ee4 <HAL_UART_Transmit>

    // CRC - Hexadecimal
    sprintf(buffer, "CRC: 0x%02X\r\n", packet->crc);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7c1b      	ldrb	r3, [r3, #16]
 8000864:	461a      	mov	r2, r3
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	491e      	ldr	r1, [pc, #120]	; (80008e4 <processData+0x164>)
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fb3f 	bl	8002ef0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fcaa 	bl	80001d0 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	f107 010c 	add.w	r1, r7, #12
 8000884:	2364      	movs	r3, #100	; 0x64
 8000886:	4812      	ldr	r0, [pc, #72]	; (80008d0 <processData+0x150>)
 8000888:	f001 fb2c 	bl	8001ee4 <HAL_UART_Transmit>

    // End of Packet (EOP) - Hexadecimal
    sprintf(buffer, "EOP: 0x%02X\r\n", packet->eop);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	7c5b      	ldrb	r3, [r3, #17]
 8000890:	461a      	mov	r2, r3
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4914      	ldr	r1, [pc, #80]	; (80008e8 <processData+0x168>)
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fb29 	bl	8002ef0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fc94 	bl	80001d0 <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	f107 010c 	add.w	r1, r7, #12
 80008b0:	2364      	movs	r3, #100	; 0x64
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <processData+0x150>)
 80008b4:	f001 fb16 	bl	8001ee4 <HAL_UART_Transmit>

    // Separator
    HAL_UART_Transmit(&huart3, (uint8_t*)"--------\r\n", 10, 100);
 80008b8:	2364      	movs	r3, #100	; 0x64
 80008ba:	220a      	movs	r2, #10
 80008bc:	490b      	ldr	r1, [pc, #44]	; (80008ec <processData+0x16c>)
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <processData+0x150>)
 80008c0:	f001 fb10 	bl	8001ee4 <HAL_UART_Transmit>
}
 80008c4:	bf00      	nop
 80008c6:	3770      	adds	r7, #112	; 0x70
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	08003850 	.word	0x08003850
 80008d0:	200000c4 	.word	0x200000c4
 80008d4:	08003860 	.word	0x08003860
 80008d8:	08003870 	.word	0x08003870
 80008dc:	08003880 	.word	0x08003880
 80008e0:	08003894 	.word	0x08003894
 80008e4:	080038a0 	.word	0x080038a0
 80008e8:	080038b0 	.word	0x080038b0
 80008ec:	080038c0 	.word	0x080038c0

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 fa82 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f810 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f000 f8c0 	bl	8000a80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000900:	f000 f86a 	bl	80009d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000904:	f000 f892 	bl	8000a2c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	4902      	ldr	r1, [pc, #8]	; (8000914 <main+0x24>)
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <main+0x28>)
 800090e:	f001 fb74 	bl	8001ffa <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000912:	e7fe      	b.n	8000912 <main+0x22>
 8000914:	20000128 	.word	0x20000128
 8000918:	2000007c 	.word	0x2000007c

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2230      	movs	r2, #48	; 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fb00 	bl	8002f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <SystemClock_Config+0xb4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <SystemClock_Config+0xb4>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <SystemClock_Config+0xb4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <SystemClock_Config+0xb8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <SystemClock_Config+0xb8>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <SystemClock_Config+0xb8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fe01 	bl	8001594 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000998:	f000 f8c4 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f864 	bl	8001a84 <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009c2:	f000 f8af 	bl	8000b24 <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3750      	adds	r7, #80	; 0x50
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_USART2_UART_Init+0x50>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f001 fa18 	bl	8001e44 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a1a:	f000 f883 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000007c 	.word	0x2000007c
 8000a28:	40004400 	.word	0x40004400

08000a2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <MX_USART3_UART_Init+0x50>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a64:	f001 f9ee 	bl	8001e44 <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a6e:	f000 f859 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000c4 	.word	0x200000c4
 8000a7c:	40004800 	.word	0x40004800

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <MX_GPIO_Init+0x9c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <MX_GPIO_Init+0x9c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_GPIO_Init+0x9c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_GPIO_Init+0x9c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <MX_GPIO_Init+0x9c>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_GPIO_Init+0x9c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_GPIO_Init+0x9c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <MX_GPIO_Init+0x9c>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_GPIO_Init+0x9c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af0:	480b      	ldr	r0, [pc, #44]	; (8000b20 <MX_GPIO_Init+0xa0>)
 8000af2:	f000 fd35 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_GPIO_Init+0xa0>)
 8000b10:	f000 fb8a 	bl	8001228 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020c00 	.word	0x40020c00

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	; 0x30
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <HAL_UART_MspInit+0x108>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d134      	bne.n	8000c0c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	4b39      	ldr	r3, [pc, #228]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a38      	ldr	r2, [pc, #224]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bea:	2307      	movs	r3, #7
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4826      	ldr	r0, [pc, #152]	; (8000c90 <HAL_UART_MspInit+0x110>)
 8000bf6:	f000 fb17 	bl	8001228 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2026      	movs	r0, #38	; 0x26
 8000c00:	f000 fa49 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c04:	2026      	movs	r0, #38	; 0x26
 8000c06:	f000 fa62 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c0a:	e039      	b.n	8000c80 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <HAL_UART_MspInit+0x114>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d134      	bne.n	8000c80 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c60:	2307      	movs	r3, #7
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480b      	ldr	r0, [pc, #44]	; (8000c98 <HAL_UART_MspInit+0x118>)
 8000c6c:	f000 fadc 	bl	8001228 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2027      	movs	r0, #39	; 0x27
 8000c76:	f000 fa0e 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c7a:	2027      	movs	r0, #39	; 0x27
 8000c7c:	f000 fa27 	bl	80010ce <HAL_NVIC_EnableIRQ>
}
 8000c80:	bf00      	nop
 8000c82:	3730      	adds	r7, #48	; 0x30
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40004800 	.word	0x40004800
 8000c98:	40020400 	.word	0x40020400

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f8da 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <USART2_IRQHandler+0x10>)
 8000cf6:	f001 f9a5 	bl	8002044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000007c 	.word	0x2000007c

08000d04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <USART3_IRQHandler+0x10>)
 8000d0a:	f001 f99b 	bl	8002044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000c4 	.word	0x200000c4

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f002 f8fa 	bl	8002f40 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20020000 	.word	0x20020000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	20000140 	.word	0x20000140
 8000d80:	20000290 	.word	0x20000290

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dac:	f7ff ffea 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f002 f8b9 	bl	8002f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fd89 	bl	80008f0 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dec:	08003928 	.word	0x08003928
  ldr r2, =_sbss
 8000df0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000df4:	20000290 	.word	0x20000290

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f92b 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fe7e 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f943 	bl	80010ea <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 f90b 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000144 	.word	0x20000144

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000144 	.word	0x20000144

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff3e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff feda 	bl	8000ec8 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d008      	beq.n	8001134 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e052      	b.n	80011da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0216 	bic.w	r2, r2, #22
 8001142:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001152:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	2b00      	cmp	r3, #0
 800115a:	d103      	bne.n	8001164 <HAL_DMA_Abort+0x62>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0208 	bic.w	r2, r2, #8
 8001172:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001184:	e013      	b.n	80011ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001186:	f7ff fe9f 	bl	8000ec8 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b05      	cmp	r3, #5
 8001192:	d90c      	bls.n	80011ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2220      	movs	r2, #32
 8001198:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2203      	movs	r2, #3
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e015      	b.n	80011da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1e4      	bne.n	8001186 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c0:	223f      	movs	r2, #63	; 0x3f
 80011c2:	409a      	lsls	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d004      	beq.n	8001200 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e00c      	b.n	800121a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2205      	movs	r2, #5
 8001204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e16b      	b.n	800151c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	429a      	cmp	r2, r3
 800125e:	f040 815a 	bne.w	8001516 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d005      	beq.n	800127a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	2b02      	cmp	r3, #2
 8001278:	d130      	bne.n	80012dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 0201 	and.w	r2, r3, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d017      	beq.n	8001318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d123      	bne.n	800136c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	69b9      	ldr	r1, [r7, #24]
 8001368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80b4 	beq.w	8001516 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b60      	ldr	r3, [pc, #384]	; (8001534 <HAL_GPIO_Init+0x30c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a5f      	ldr	r2, [pc, #380]	; (8001534 <HAL_GPIO_Init+0x30c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b5d      	ldr	r3, [pc, #372]	; (8001534 <HAL_GPIO_Init+0x30c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ca:	4a5b      	ldr	r2, [pc, #364]	; (8001538 <HAL_GPIO_Init+0x310>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_GPIO_Init+0x314>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d02b      	beq.n	800144e <HAL_GPIO_Init+0x226>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a51      	ldr	r2, [pc, #324]	; (8001540 <HAL_GPIO_Init+0x318>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d025      	beq.n	800144a <HAL_GPIO_Init+0x222>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_GPIO_Init+0x31c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d01f      	beq.n	8001446 <HAL_GPIO_Init+0x21e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x320>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0x21a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4e      	ldr	r2, [pc, #312]	; (800154c <HAL_GPIO_Init+0x324>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x216>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <HAL_GPIO_Init+0x328>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x212>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4c      	ldr	r2, [pc, #304]	; (8001554 <HAL_GPIO_Init+0x32c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x20e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_GPIO_Init+0x330>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x20a>
 800142e:	2307      	movs	r3, #7
 8001430:	e00e      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001432:	2308      	movs	r3, #8
 8001434:	e00c      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001436:	2306      	movs	r3, #6
 8001438:	e00a      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800143a:	2305      	movs	r3, #5
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800143e:	2304      	movs	r3, #4
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800144e:	2300      	movs	r3, #0
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001460:	4935      	ldr	r1, [pc, #212]	; (8001538 <HAL_GPIO_Init+0x310>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_GPIO_Init+0x334>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001492:	4a32      	ldr	r2, [pc, #200]	; (800155c <HAL_GPIO_Init+0x334>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <HAL_GPIO_Init+0x334>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014bc:	4a27      	ldr	r2, [pc, #156]	; (800155c <HAL_GPIO_Init+0x334>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_GPIO_Init+0x334>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e6:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_GPIO_Init+0x334>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_GPIO_Init+0x334>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_GPIO_Init+0x334>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3301      	adds	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f67f ae90 	bls.w	8001244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40013800 	.word	0x40013800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40020800 	.word	0x40020800
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40021000 	.word	0x40021000
 8001550:	40021400 	.word	0x40021400
 8001554:	40021800 	.word	0x40021800
 8001558:	40021c00 	.word	0x40021c00
 800155c:	40013c00 	.word	0x40013c00

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800157c:	e003      	b.n	8001586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	041a      	lsls	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e267      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d075      	beq.n	800169e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b2:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d00c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015be:	4b85      	ldr	r3, [pc, #532]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d112      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ca:	4b82      	ldr	r3, [pc, #520]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015d6:	d10b      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	4b7e      	ldr	r3, [pc, #504]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d05b      	beq.n	800169c <HAL_RCC_OscConfig+0x108>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d157      	bne.n	800169c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e242      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f8:	d106      	bne.n	8001608 <HAL_RCC_OscConfig+0x74>
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a75      	ldr	r2, [pc, #468]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e01d      	b.n	8001644 <HAL_RCC_OscConfig+0xb0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x98>
 8001612:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a6f      	ldr	r2, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6c      	ldr	r2, [pc, #432]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0xb0>
 800162c:	4b69      	ldr	r3, [pc, #420]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a68      	ldr	r2, [pc, #416]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b66      	ldr	r3, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a65      	ldr	r2, [pc, #404]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fc3c 	bl	8000ec8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fc38 	bl	8000ec8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e207      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0xc0>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fc28 	bl	8000ec8 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fc24 	bl	8000ec8 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1f3      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	4b51      	ldr	r3, [pc, #324]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0xe8>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016aa:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d11c      	bne.n	80016fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c2:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d116      	bne.n	80016fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_RCC_OscConfig+0x152>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e1c7      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e6:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4937      	ldr	r1, [pc, #220]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	e03a      	b.n	8001772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <HAL_RCC_OscConfig+0x244>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fbdd 	bl	8000ec8 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff fbd9 	bl	8000ec8 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1a8      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4925      	ldr	r1, [pc, #148]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_RCC_OscConfig+0x244>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fbbc 	bl	8000ec8 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fbb8 	bl	8000ec8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e187      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d036      	beq.n	80017ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d016      	beq.n	80017b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_RCC_OscConfig+0x248>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fb9c 	bl	8000ec8 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fb98 	bl	8000ec8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e167      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x240>)
 80017a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x200>
 80017b2:	e01b      	b.n	80017ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_OscConfig+0x248>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fb85 	bl	8000ec8 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	e00e      	b.n	80017e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff fb81 	bl	8000ec8 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d907      	bls.n	80017e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e150      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
 80017d4:	40023800 	.word	0x40023800
 80017d8:	42470000 	.word	0x42470000
 80017dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ea      	bne.n	80017c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8097 	beq.w	8001928 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fe:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10f      	bne.n	800182a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b7d      	ldr	r3, [pc, #500]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a7c      	ldr	r2, [pc, #496]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001826:	2301      	movs	r3, #1
 8001828:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	4b77      	ldr	r3, [pc, #476]	; (8001a08 <HAL_RCC_OscConfig+0x474>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d118      	bne.n	8001868 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001836:	4b74      	ldr	r3, [pc, #464]	; (8001a08 <HAL_RCC_OscConfig+0x474>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a73      	ldr	r2, [pc, #460]	; (8001a08 <HAL_RCC_OscConfig+0x474>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001842:	f7ff fb41 	bl	8000ec8 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184a:	f7ff fb3d 	bl	8000ec8 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e10c      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	4b6a      	ldr	r3, [pc, #424]	; (8001a08 <HAL_RCC_OscConfig+0x474>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x2ea>
 8001870:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001874:	4a63      	ldr	r2, [pc, #396]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6713      	str	r3, [r2, #112]	; 0x70
 800187c:	e01c      	b.n	80018b8 <HAL_RCC_OscConfig+0x324>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b05      	cmp	r3, #5
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x30c>
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	4a5e      	ldr	r2, [pc, #376]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6713      	str	r3, [r2, #112]	; 0x70
 8001892:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	4a5b      	ldr	r2, [pc, #364]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6713      	str	r3, [r2, #112]	; 0x70
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0x324>
 80018a0:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a57      	ldr	r2, [pc, #348]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	4b55      	ldr	r3, [pc, #340]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a54      	ldr	r2, [pc, #336]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018b2:	f023 0304 	bic.w	r3, r3, #4
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d015      	beq.n	80018ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff fb02 	bl	8000ec8 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	e00a      	b.n	80018de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff fafe 	bl	8000ec8 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0cb      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0ee      	beq.n	80018c8 <HAL_RCC_OscConfig+0x334>
 80018ea:	e014      	b.n	8001916 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff faec 	bl	8000ec8 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff fae8 	bl	8000ec8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0b5      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190a:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ee      	bne.n	80018f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80a1 	beq.w	8001a74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b08      	cmp	r3, #8
 800193c:	d05c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d141      	bne.n	80019ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_RCC_OscConfig+0x478>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fabc 	bl	8000ec8 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff fab8 	bl	8000ec8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e087      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	019b      	lsls	r3, r3, #6
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	3b01      	subs	r3, #1
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	491b      	ldr	r1, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x478>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fa91 	bl	8000ec8 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff fa8d 	bl	8000ec8 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e05c      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x416>
 80019c8:	e054      	b.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_RCC_OscConfig+0x478>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa7a 	bl	8000ec8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fa76 	bl	8000ec8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e045      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_RCC_OscConfig+0x470>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x444>
 80019f6:	e03d      	b.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e038      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_RCC_OscConfig+0x4ec>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d028      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d121      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d11a      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a40:	4013      	ands	r3, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d111      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800

08001a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0cc      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d90c      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b65      	ldr	r3, [pc, #404]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0b8      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	494d      	ldr	r1, [pc, #308]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d044      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d119      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e07f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b42:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e06f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e067      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 0203 	bic.w	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4934      	ldr	r1, [pc, #208]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b74:	f7ff f9a8 	bl	8000ec8 <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7c:	f7ff f9a4 	bl	8000ec8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e04f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 020c 	and.w	r2, r3, #12
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1eb      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d20c      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e032      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4916      	ldr	r1, [pc, #88]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	490e      	ldr	r1, [pc, #56]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0a:	f000 f821 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	490a      	ldr	r1, [pc, #40]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	5ccb      	ldrb	r3, [r1, r3]
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f908 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00
 8001c40:	40023800 	.word	0x40023800
 8001c44:	080038cc 	.word	0x080038cc
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c54:	b090      	sub	sp, #64	; 0x40
 8001c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c60:	2300      	movs	r3, #0
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d00d      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x40>
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	f200 80a1 	bhi.w	8001dbc <HAL_RCC_GetSysClockFreq+0x16c>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c82:	e09b      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c88:	e09b      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c8a:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c8e:	e098      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9a:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d028      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	2200      	movs	r2, #0
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	627a      	str	r2, [r7, #36]	; 0x24
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cbc:	fb03 f201 	mul.w	r2, r3, r1
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	fb00 f303 	mul.w	r3, r0, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a43      	ldr	r2, [pc, #268]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cca:	fba0 1202 	umull	r1, r2, r0, r2
 8001cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cd0:	460a      	mov	r2, r1
 8001cd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	61fa      	str	r2, [r7, #28]
 8001ce2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cea:	f7fe fac9 	bl	8000280 <__aeabi_uldivmod>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf6:	e053      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	2200      	movs	r2, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	617a      	str	r2, [r7, #20]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d0a:	f04f 0b00 	mov.w	fp, #0
 8001d0e:	4652      	mov	r2, sl
 8001d10:	465b      	mov	r3, fp
 8001d12:	f04f 0000 	mov.w	r0, #0
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	0159      	lsls	r1, r3, #5
 8001d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d20:	0150      	lsls	r0, r2, #5
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ebb2 080a 	subs.w	r8, r2, sl
 8001d2a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d42:	ebb2 0408 	subs.w	r4, r2, r8
 8001d46:	eb63 0509 	sbc.w	r5, r3, r9
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	00eb      	lsls	r3, r5, #3
 8001d54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d58:	00e2      	lsls	r2, r4, #3
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	eb14 030a 	adds.w	r3, r4, sl
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	eb45 030b 	adc.w	r3, r5, fp
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d76:	4629      	mov	r1, r5
 8001d78:	028b      	lsls	r3, r1, #10
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d80:	4621      	mov	r1, r4
 8001d82:	028a      	lsls	r2, r1, #10
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	60fa      	str	r2, [r7, #12]
 8001d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d94:	f7fe fa74 	bl	8000280 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	3301      	adds	r3, #1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3740      	adds	r7, #64	; 0x40
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	017d7840 	.word	0x017d7840

08001ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df8:	f7ff fff0 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0a9b      	lsrs	r3, r3, #10
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4903      	ldr	r1, [pc, #12]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	080038dc 	.word	0x080038dc

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e20:	f7ff ffdc 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0b5b      	lsrs	r3, r3, #13
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	080038dc 	.word	0x080038dc

08001e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e042      	b.n	8001edc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fe88 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2224      	movs	r2, #36	; 0x24
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fdbd 	bl	8002a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d175      	bne.n	8001ff0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <HAL_UART_Transmit+0x2c>
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e06e      	b.n	8001ff2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2221      	movs	r2, #33	; 0x21
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f22:	f7fe ffd1 	bl	8000ec8 <HAL_GetTick>
 8001f26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	88fa      	ldrh	r2, [r7, #6]
 8001f2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	88fa      	ldrh	r2, [r7, #6]
 8001f32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3c:	d108      	bne.n	8001f50 <HAL_UART_Transmit+0x6c>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d104      	bne.n	8001f50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	e003      	b.n	8001f58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f58:	e02e      	b.n	8001fb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2200      	movs	r2, #0
 8001f62:	2180      	movs	r1, #128	; 0x80
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fb1f 	bl	80025a8 <UART_WaitOnFlagUntilTimeout>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e03a      	b.n	8001ff2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10b      	bne.n	8001f9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	3302      	adds	r3, #2
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	e007      	b.n	8001faa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1cb      	bne.n	8001f5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2140      	movs	r1, #64	; 0x40
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 faeb 	bl	80025a8 <UART_WaitOnFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e006      	b.n	8001ff2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	e000      	b.n	8001ff2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	4613      	mov	r3, r2
 8002006:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b20      	cmp	r3, #32
 8002012:	d112      	bne.n	800203a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <HAL_UART_Receive_IT+0x26>
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e00b      	b.n	800203c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	461a      	mov	r2, r3
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 fb12 	bl	800265a <UART_Start_Receive_IT>
 8002036:	4603      	mov	r3, r0
 8002038:	e000      	b.n	800203c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0ba      	sub	sp, #232	; 0xe8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800208a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_UART_IRQHandler+0x66>
 8002096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fbf2 	bl	800288c <UART_Receive_IT>
      return;
 80020a8:	e25b      	b.n	8002562 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80de 	beq.w	8002270 <HAL_UART_IRQHandler+0x22c>
 80020b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80d1 	beq.w	8002270 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_UART_IRQHandler+0xae>
 80020da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_UART_IRQHandler+0xd2>
 80020fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f043 0202 	orr.w	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_UART_IRQHandler+0xf6>
 8002122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800213a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d011      	beq.n	800216a <HAL_UART_IRQHandler+0x126>
 8002146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f043 0208 	orr.w	r2, r3, #8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 81f2 	beq.w	8002558 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_UART_IRQHandler+0x14e>
 8002180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fb7d 	bl	800288c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_UART_IRQHandler+0x17a>
 80021b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d04f      	beq.n	800225e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa85 	bl	80026ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d141      	bne.n	8002256 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3314      	adds	r3, #20
 80021d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021e0:	e853 3f00 	ldrex	r3, [r3]
 80021e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3314      	adds	r3, #20
 80021fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800220a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800220e:	e841 2300 	strex	r3, r2, [r1]
 8002212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1d9      	bne.n	80021d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d013      	beq.n	800224e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	4a7e      	ldr	r2, [pc, #504]	; (8002424 <HAL_UART_IRQHandler+0x3e0>)
 800222c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ffd5 	bl	80011e2 <HAL_DMA_Abort_IT>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002248:	4610      	mov	r0, r2
 800224a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800224c:	e00e      	b.n	800226c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f994 	bl	800257c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002254:	e00a      	b.n	800226c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f990 	bl	800257c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225c:	e006      	b.n	800226c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f98c 	bl	800257c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800226a:	e175      	b.n	8002558 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226c:	bf00      	nop
    return;
 800226e:	e173      	b.n	8002558 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	2b01      	cmp	r3, #1
 8002276:	f040 814f 	bne.w	8002518 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800227a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8148 	beq.w	8002518 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8141 	beq.w	8002518 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	f040 80b6 	bne.w	8002428 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8145 	beq.w	800255c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022da:	429a      	cmp	r2, r3
 80022dc:	f080 813e 	bcs.w	800255c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f2:	f000 8088 	beq.w	8002406 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	330c      	adds	r3, #12
 80022fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002300:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002304:	e853 3f00 	ldrex	r3, [r3]
 8002308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800230c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	330c      	adds	r3, #12
 800231e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800232e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002332:	e841 2300 	strex	r3, r2, [r1]
 8002336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800233a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1d9      	bne.n	80022f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3314      	adds	r3, #20
 8002362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002366:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800236a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800236e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002372:	e841 2300 	strex	r3, r2, [r1]
 8002376:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1e1      	bne.n	8002342 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3314      	adds	r3, #20
 8002384:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002388:	e853 3f00 	ldrex	r3, [r3]
 800238c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800238e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3314      	adds	r3, #20
 800239e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80023a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80023a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023aa:	e841 2300 	strex	r3, r2, [r1]
 80023ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80023b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1e3      	bne.n	800237e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	330c      	adds	r3, #12
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ce:	e853 3f00 	ldrex	r3, [r3]
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80023d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d6:	f023 0310 	bic.w	r3, r3, #16
 80023da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	330c      	adds	r3, #12
 80023e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80023ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023f0:	e841 2300 	strex	r3, r2, [r1]
 80023f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e3      	bne.n	80023c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fe7e 	bl	8001102 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2202      	movs	r2, #2
 800240a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002414:	b29b      	uxth	r3, r3
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	b29b      	uxth	r3, r3
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f8b7 	bl	8002590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002422:	e09b      	b.n	800255c <HAL_UART_IRQHandler+0x518>
 8002424:	08002795 	.word	0x08002795
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002430:	b29b      	uxth	r3, r3
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 808e 	beq.w	8002560 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8089 	beq.w	8002560 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	e853 3f00 	ldrex	r3, [r3]
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800245e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002472:	647a      	str	r2, [r7, #68]	; 0x44
 8002474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800247a:	e841 2300 	strex	r3, r2, [r1]
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1e3      	bne.n	800244e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3314      	adds	r3, #20
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	e853 3f00 	ldrex	r3, [r3]
 8002494:	623b      	str	r3, [r7, #32]
   return(result);
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024aa:	633a      	str	r2, [r7, #48]	; 0x30
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b2:	e841 2300 	strex	r3, r2, [r1]
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e3      	bne.n	8002486 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	330c      	adds	r3, #12
 80024d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	e853 3f00 	ldrex	r3, [r3]
 80024da:	60fb      	str	r3, [r7, #12]
   return(result);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0310 	bic.w	r3, r3, #16
 80024e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024f0:	61fa      	str	r2, [r7, #28]
 80024f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f4:	69b9      	ldr	r1, [r7, #24]
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	e841 2300 	strex	r3, r2, [r1]
 80024fc:	617b      	str	r3, [r7, #20]
   return(result);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e3      	bne.n	80024cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800250a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800250e:	4619      	mov	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f83d 	bl	8002590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002516:	e023      	b.n	8002560 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_UART_IRQHandler+0x4f4>
 8002524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f943 	bl	80027bc <UART_Transmit_IT>
    return;
 8002536:	e014      	b.n	8002562 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00e      	beq.n	8002562 <HAL_UART_IRQHandler+0x51e>
 8002544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f983 	bl	800285c <UART_EndTransmit_IT>
    return;
 8002556:	e004      	b.n	8002562 <HAL_UART_IRQHandler+0x51e>
    return;
 8002558:	bf00      	nop
 800255a:	e002      	b.n	8002562 <HAL_UART_IRQHandler+0x51e>
      return;
 800255c:	bf00      	nop
 800255e:	e000      	b.n	8002562 <HAL_UART_IRQHandler+0x51e>
      return;
 8002560:	bf00      	nop
  }
}
 8002562:	37e8      	adds	r7, #232	; 0xe8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b8:	e03b      	b.n	8002632 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d037      	beq.n	8002632 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7fe fc81 	bl	8000ec8 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e03a      	b.n	8002652 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d023      	beq.n	8002632 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b80      	cmp	r3, #128	; 0x80
 80025ee:	d020      	beq.n	8002632 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d01d      	beq.n	8002632 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b08      	cmp	r3, #8
 8002602:	d116      	bne.n	8002632 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f857 	bl	80026ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2208      	movs	r2, #8
 8002624:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e00f      	b.n	8002652 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4013      	ands	r3, r2
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	429a      	cmp	r2, r3
 8002640:	bf0c      	ite	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	2300      	movne	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	429a      	cmp	r2, r3
 800264e:	d0b4      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	4613      	mov	r3, r2
 8002666:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	88fa      	ldrh	r2, [r7, #6]
 8002672:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	88fa      	ldrh	r2, [r7, #6]
 8002678:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2222      	movs	r2, #34	; 0x22
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0220 	orr.w	r2, r2, #32
 80026be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b095      	sub	sp, #84	; 0x54
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	330c      	adds	r3, #12
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e0:	e853 3f00 	ldrex	r3, [r3]
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026f6:	643a      	str	r2, [r7, #64]	; 0x40
 80026f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026fe:	e841 2300 	strex	r3, r2, [r1]
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e5      	bne.n	80026d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3314      	adds	r3, #20
 8002710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	61fb      	str	r3, [r7, #28]
   return(result);
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	64bb      	str	r3, [r7, #72]	; 0x48
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800272a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e5      	bne.n	800270a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	2b01      	cmp	r3, #1
 8002744:	d119      	bne.n	800277a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	330c      	adds	r3, #12
 800274c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	60bb      	str	r3, [r7, #8]
   return(result);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f023 0310 	bic.w	r3, r3, #16
 800275c:	647b      	str	r3, [r7, #68]	; 0x44
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002766:	61ba      	str	r2, [r7, #24]
 8002768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276a:	6979      	ldr	r1, [r7, #20]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	e841 2300 	strex	r3, r2, [r1]
 8002772:	613b      	str	r3, [r7, #16]
   return(result);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e5      	bne.n	8002746 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002788:	bf00      	nop
 800278a:	3754      	adds	r7, #84	; 0x54
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff fee4 	bl	800257c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b21      	cmp	r3, #33	; 0x21
 80027ce:	d13e      	bne.n	800284e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d8:	d114      	bne.n	8002804 <UART_Transmit_IT+0x48>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d110      	bne.n	8002804 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	1c9a      	adds	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	621a      	str	r2, [r3, #32]
 8002802:	e008      	b.n	8002816 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	1c59      	adds	r1, r3, #1
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6211      	str	r1, [r2, #32]
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29b      	uxth	r3, r3
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4619      	mov	r1, r3
 8002824:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002838:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002848:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002872:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff fe73 	bl	8002568 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08c      	sub	sp, #48	; 0x30
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b22      	cmp	r3, #34	; 0x22
 800289e:	f040 80ae 	bne.w	80029fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	d117      	bne.n	80028dc <UART_Receive_IT+0x50>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d113      	bne.n	80028dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	1c9a      	adds	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
 80028da:	e026      	b.n	800292a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ee:	d007      	beq.n	8002900 <UART_Receive_IT+0x74>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <UART_Receive_IT+0x82>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e008      	b.n	8002920 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800291a:	b2da      	uxtb	r2, r3
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29b      	uxth	r3, r3
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4619      	mov	r1, r3
 8002938:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800293a:	2b00      	cmp	r3, #0
 800293c:	d15d      	bne.n	80029fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0220 	bic.w	r2, r2, #32
 800294c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800295c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	2b01      	cmp	r3, #1
 8002982:	d135      	bne.n	80029f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	330c      	adds	r3, #12
 8002990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	e853 3f00 	ldrex	r3, [r3]
 8002998:	613b      	str	r3, [r7, #16]
   return(result);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f023 0310 	bic.w	r3, r3, #16
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029aa:	623a      	str	r2, [r7, #32]
 80029ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ae:	69f9      	ldr	r1, [r7, #28]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	e841 2300 	strex	r3, r2, [r1]
 80029b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e5      	bne.n	800298a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d10a      	bne.n	80029e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fdd1 	bl	8002590 <HAL_UARTEx_RxEventCallback>
 80029ee:	e002      	b.n	80029f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fd fdc3 	bl	800057c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e002      	b.n	8002a00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3730      	adds	r7, #48	; 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a0c:	b0c0      	sub	sp, #256	; 0x100
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	68d9      	ldr	r1, [r3, #12]
 8002a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	ea40 0301 	orr.w	r3, r0, r1
 8002a30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a60:	f021 010c 	bic.w	r1, r1, #12
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a82:	6999      	ldr	r1, [r3, #24]
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	ea40 0301 	orr.w	r3, r0, r1
 8002a8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b8f      	ldr	r3, [pc, #572]	; (8002cd4 <UART_SetConfig+0x2cc>)
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d005      	beq.n	8002aa8 <UART_SetConfig+0xa0>
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b8d      	ldr	r3, [pc, #564]	; (8002cd8 <UART_SetConfig+0x2d0>)
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d104      	bne.n	8002ab2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aa8:	f7ff f9b8 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8002aac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ab0:	e003      	b.n	8002aba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ab2:	f7ff f99f 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002ab6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac4:	f040 810c 	bne.w	8002ce0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ad2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ad6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ada:	4622      	mov	r2, r4
 8002adc:	462b      	mov	r3, r5
 8002ade:	1891      	adds	r1, r2, r2
 8002ae0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ae2:	415b      	adcs	r3, r3
 8002ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ae6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002aea:	4621      	mov	r1, r4
 8002aec:	eb12 0801 	adds.w	r8, r2, r1
 8002af0:	4629      	mov	r1, r5
 8002af2:	eb43 0901 	adc.w	r9, r3, r1
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b0a:	4690      	mov	r8, r2
 8002b0c:	4699      	mov	r9, r3
 8002b0e:	4623      	mov	r3, r4
 8002b10:	eb18 0303 	adds.w	r3, r8, r3
 8002b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b18:	462b      	mov	r3, r5
 8002b1a:	eb49 0303 	adc.w	r3, r9, r3
 8002b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b36:	460b      	mov	r3, r1
 8002b38:	18db      	adds	r3, r3, r3
 8002b3a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	eb42 0303 	adc.w	r3, r2, r3
 8002b42:	657b      	str	r3, [r7, #84]	; 0x54
 8002b44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b4c:	f7fd fb98 	bl	8000280 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <UART_SetConfig+0x2d4>)
 8002b56:	fba3 2302 	umull	r2, r3, r3, r2
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	011c      	lsls	r4, r3, #4
 8002b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b70:	4642      	mov	r2, r8
 8002b72:	464b      	mov	r3, r9
 8002b74:	1891      	adds	r1, r2, r2
 8002b76:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b78:	415b      	adcs	r3, r3
 8002b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b80:	4641      	mov	r1, r8
 8002b82:	eb12 0a01 	adds.w	sl, r2, r1
 8002b86:	4649      	mov	r1, r9
 8002b88:	eb43 0b01 	adc.w	fp, r3, r1
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ba0:	4692      	mov	sl, r2
 8002ba2:	469b      	mov	fp, r3
 8002ba4:	4643      	mov	r3, r8
 8002ba6:	eb1a 0303 	adds.w	r3, sl, r3
 8002baa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bae:	464b      	mov	r3, r9
 8002bb0:	eb4b 0303 	adc.w	r3, fp, r3
 8002bb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	18db      	adds	r3, r3, r3
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	eb42 0303 	adc.w	r3, r2, r3
 8002bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002be2:	f7fd fb4d 	bl	8000280 <__aeabi_uldivmod>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <UART_SetConfig+0x2d4>)
 8002bee:	fba3 2301 	umull	r2, r3, r3, r1
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2264      	movs	r2, #100	; 0x64
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	1acb      	subs	r3, r1, r3
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c02:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <UART_SetConfig+0x2d4>)
 8002c04:	fba3 2302 	umull	r2, r3, r3, r2
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c10:	441c      	add	r4, r3
 8002c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c24:	4642      	mov	r2, r8
 8002c26:	464b      	mov	r3, r9
 8002c28:	1891      	adds	r1, r2, r2
 8002c2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c2c:	415b      	adcs	r3, r3
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c34:	4641      	mov	r1, r8
 8002c36:	1851      	adds	r1, r2, r1
 8002c38:	6339      	str	r1, [r7, #48]	; 0x30
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	414b      	adcs	r3, r1
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c4c:	4659      	mov	r1, fp
 8002c4e:	00cb      	lsls	r3, r1, #3
 8002c50:	4651      	mov	r1, sl
 8002c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c56:	4651      	mov	r1, sl
 8002c58:	00ca      	lsls	r2, r1, #3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4642      	mov	r2, r8
 8002c62:	189b      	adds	r3, r3, r2
 8002c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c68:	464b      	mov	r3, r9
 8002c6a:	460a      	mov	r2, r1
 8002c6c:	eb42 0303 	adc.w	r3, r2, r3
 8002c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c88:	460b      	mov	r3, r1
 8002c8a:	18db      	adds	r3, r3, r3
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8e:	4613      	mov	r3, r2
 8002c90:	eb42 0303 	adc.w	r3, r2, r3
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c9e:	f7fd faef 	bl	8000280 <__aeabi_uldivmod>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <UART_SetConfig+0x2d4>)
 8002ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	2164      	movs	r1, #100	; 0x64
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	3332      	adds	r3, #50	; 0x32
 8002cba:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <UART_SetConfig+0x2d4>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	f003 0207 	and.w	r2, r3, #7
 8002cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4422      	add	r2, r4
 8002cce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cd0:	e106      	b.n	8002ee0 <UART_SetConfig+0x4d8>
 8002cd2:	bf00      	nop
 8002cd4:	40011000 	.word	0x40011000
 8002cd8:	40011400 	.word	0x40011400
 8002cdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cf2:	4642      	mov	r2, r8
 8002cf4:	464b      	mov	r3, r9
 8002cf6:	1891      	adds	r1, r2, r2
 8002cf8:	6239      	str	r1, [r7, #32]
 8002cfa:	415b      	adcs	r3, r3
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d02:	4641      	mov	r1, r8
 8002d04:	1854      	adds	r4, r2, r1
 8002d06:	4649      	mov	r1, r9
 8002d08:	eb43 0501 	adc.w	r5, r3, r1
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	00eb      	lsls	r3, r5, #3
 8002d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d1a:	00e2      	lsls	r2, r4, #3
 8002d1c:	4614      	mov	r4, r2
 8002d1e:	461d      	mov	r5, r3
 8002d20:	4643      	mov	r3, r8
 8002d22:	18e3      	adds	r3, r4, r3
 8002d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d28:	464b      	mov	r3, r9
 8002d2a:	eb45 0303 	adc.w	r3, r5, r3
 8002d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d4e:	4629      	mov	r1, r5
 8002d50:	008b      	lsls	r3, r1, #2
 8002d52:	4621      	mov	r1, r4
 8002d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d58:	4621      	mov	r1, r4
 8002d5a:	008a      	lsls	r2, r1, #2
 8002d5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d60:	f7fd fa8e 	bl	8000280 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4b60      	ldr	r3, [pc, #384]	; (8002eec <UART_SetConfig+0x4e4>)
 8002d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	011c      	lsls	r4, r3, #4
 8002d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	1891      	adds	r1, r2, r2
 8002d8a:	61b9      	str	r1, [r7, #24]
 8002d8c:	415b      	adcs	r3, r3
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d94:	4641      	mov	r1, r8
 8002d96:	1851      	adds	r1, r2, r1
 8002d98:	6139      	str	r1, [r7, #16]
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	414b      	adcs	r3, r1
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dac:	4659      	mov	r1, fp
 8002dae:	00cb      	lsls	r3, r1, #3
 8002db0:	4651      	mov	r1, sl
 8002db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db6:	4651      	mov	r1, sl
 8002db8:	00ca      	lsls	r2, r1, #3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dc8:	464b      	mov	r3, r9
 8002dca:	460a      	mov	r2, r1
 8002dcc:	eb42 0303 	adc.w	r3, r2, r3
 8002dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002dec:	4649      	mov	r1, r9
 8002dee:	008b      	lsls	r3, r1, #2
 8002df0:	4641      	mov	r1, r8
 8002df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df6:	4641      	mov	r1, r8
 8002df8:	008a      	lsls	r2, r1, #2
 8002dfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dfe:	f7fd fa3f 	bl	8000280 <__aeabi_uldivmod>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	4b38      	ldr	r3, [pc, #224]	; (8002eec <UART_SetConfig+0x4e4>)
 8002e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2264      	movs	r2, #100	; 0x64
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	1acb      	subs	r3, r1, r3
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	3332      	adds	r3, #50	; 0x32
 8002e1c:	4a33      	ldr	r2, [pc, #204]	; (8002eec <UART_SetConfig+0x4e4>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e28:	441c      	add	r4, r3
 8002e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e2e:	2200      	movs	r2, #0
 8002e30:	673b      	str	r3, [r7, #112]	; 0x70
 8002e32:	677a      	str	r2, [r7, #116]	; 0x74
 8002e34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e38:	4642      	mov	r2, r8
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	415b      	adcs	r3, r3
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e48:	4641      	mov	r1, r8
 8002e4a:	1851      	adds	r1, r2, r1
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	4649      	mov	r1, r9
 8002e50:	414b      	adcs	r3, r1
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e60:	4659      	mov	r1, fp
 8002e62:	00cb      	lsls	r3, r1, #3
 8002e64:	4651      	mov	r1, sl
 8002e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e6a:	4651      	mov	r1, sl
 8002e6c:	00ca      	lsls	r2, r1, #3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	4642      	mov	r2, r8
 8002e76:	189b      	adds	r3, r3, r2
 8002e78:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e7a:	464b      	mov	r3, r9
 8002e7c:	460a      	mov	r2, r1
 8002e7e:	eb42 0303 	adc.w	r3, r2, r3
 8002e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e8e:	667a      	str	r2, [r7, #100]	; 0x64
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	008b      	lsls	r3, r1, #2
 8002ea0:	4641      	mov	r1, r8
 8002ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ea6:	4641      	mov	r1, r8
 8002ea8:	008a      	lsls	r2, r1, #2
 8002eaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002eae:	f7fd f9e7 	bl	8000280 <__aeabi_uldivmod>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <UART_SetConfig+0x4e4>)
 8002eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	2164      	movs	r1, #100	; 0x64
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	3332      	adds	r3, #50	; 0x32
 8002eca:	4a08      	ldr	r2, [pc, #32]	; (8002eec <UART_SetConfig+0x4e4>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	f003 020f 	and.w	r2, r3, #15
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4422      	add	r2, r4
 8002ede:	609a      	str	r2, [r3, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eec:	51eb851f 	.word	0x51eb851f

08002ef0 <siprintf>:
 8002ef0:	b40e      	push	{r1, r2, r3}
 8002ef2:	b500      	push	{lr}
 8002ef4:	b09c      	sub	sp, #112	; 0x70
 8002ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8002ef8:	9002      	str	r0, [sp, #8]
 8002efa:	9006      	str	r0, [sp, #24]
 8002efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f00:	4809      	ldr	r0, [pc, #36]	; (8002f28 <siprintf+0x38>)
 8002f02:	9107      	str	r1, [sp, #28]
 8002f04:	9104      	str	r1, [sp, #16]
 8002f06:	4909      	ldr	r1, [pc, #36]	; (8002f2c <siprintf+0x3c>)
 8002f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f0c:	9105      	str	r1, [sp, #20]
 8002f0e:	6800      	ldr	r0, [r0, #0]
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	a902      	add	r1, sp, #8
 8002f14:	f000 f992 	bl	800323c <_svfiprintf_r>
 8002f18:	9b02      	ldr	r3, [sp, #8]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	b01c      	add	sp, #112	; 0x70
 8002f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f24:	b003      	add	sp, #12
 8002f26:	4770      	bx	lr
 8002f28:	20000058 	.word	0x20000058
 8002f2c:	ffff0208 	.word	0xffff0208

08002f30 <memset>:
 8002f30:	4402      	add	r2, r0
 8002f32:	4603      	mov	r3, r0
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d100      	bne.n	8002f3a <memset+0xa>
 8002f38:	4770      	bx	lr
 8002f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f3e:	e7f9      	b.n	8002f34 <memset+0x4>

08002f40 <__errno>:
 8002f40:	4b01      	ldr	r3, [pc, #4]	; (8002f48 <__errno+0x8>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000058 	.word	0x20000058

08002f4c <__libc_init_array>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	4d0d      	ldr	r5, [pc, #52]	; (8002f84 <__libc_init_array+0x38>)
 8002f50:	4c0d      	ldr	r4, [pc, #52]	; (8002f88 <__libc_init_array+0x3c>)
 8002f52:	1b64      	subs	r4, r4, r5
 8002f54:	10a4      	asrs	r4, r4, #2
 8002f56:	2600      	movs	r6, #0
 8002f58:	42a6      	cmp	r6, r4
 8002f5a:	d109      	bne.n	8002f70 <__libc_init_array+0x24>
 8002f5c:	4d0b      	ldr	r5, [pc, #44]	; (8002f8c <__libc_init_array+0x40>)
 8002f5e:	4c0c      	ldr	r4, [pc, #48]	; (8002f90 <__libc_init_array+0x44>)
 8002f60:	f000 fc6a 	bl	8003838 <_init>
 8002f64:	1b64      	subs	r4, r4, r5
 8002f66:	10a4      	asrs	r4, r4, #2
 8002f68:	2600      	movs	r6, #0
 8002f6a:	42a6      	cmp	r6, r4
 8002f6c:	d105      	bne.n	8002f7a <__libc_init_array+0x2e>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f74:	4798      	blx	r3
 8002f76:	3601      	adds	r6, #1
 8002f78:	e7ee      	b.n	8002f58 <__libc_init_array+0xc>
 8002f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7e:	4798      	blx	r3
 8002f80:	3601      	adds	r6, #1
 8002f82:	e7f2      	b.n	8002f6a <__libc_init_array+0x1e>
 8002f84:	08003920 	.word	0x08003920
 8002f88:	08003920 	.word	0x08003920
 8002f8c:	08003920 	.word	0x08003920
 8002f90:	08003924 	.word	0x08003924

08002f94 <__retarget_lock_acquire_recursive>:
 8002f94:	4770      	bx	lr

08002f96 <__retarget_lock_release_recursive>:
 8002f96:	4770      	bx	lr

08002f98 <_free_r>:
 8002f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	d044      	beq.n	8003028 <_free_r+0x90>
 8002f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa2:	9001      	str	r0, [sp, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f1a1 0404 	sub.w	r4, r1, #4
 8002faa:	bfb8      	it	lt
 8002fac:	18e4      	addlt	r4, r4, r3
 8002fae:	f000 f8df 	bl	8003170 <__malloc_lock>
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	; (800302c <_free_r+0x94>)
 8002fb4:	9801      	ldr	r0, [sp, #4]
 8002fb6:	6813      	ldr	r3, [r2, #0]
 8002fb8:	b933      	cbnz	r3, 8002fc8 <_free_r+0x30>
 8002fba:	6063      	str	r3, [r4, #4]
 8002fbc:	6014      	str	r4, [r2, #0]
 8002fbe:	b003      	add	sp, #12
 8002fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fc4:	f000 b8da 	b.w	800317c <__malloc_unlock>
 8002fc8:	42a3      	cmp	r3, r4
 8002fca:	d908      	bls.n	8002fde <_free_r+0x46>
 8002fcc:	6825      	ldr	r5, [r4, #0]
 8002fce:	1961      	adds	r1, r4, r5
 8002fd0:	428b      	cmp	r3, r1
 8002fd2:	bf01      	itttt	eq
 8002fd4:	6819      	ldreq	r1, [r3, #0]
 8002fd6:	685b      	ldreq	r3, [r3, #4]
 8002fd8:	1949      	addeq	r1, r1, r5
 8002fda:	6021      	streq	r1, [r4, #0]
 8002fdc:	e7ed      	b.n	8002fba <_free_r+0x22>
 8002fde:	461a      	mov	r2, r3
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	b10b      	cbz	r3, 8002fe8 <_free_r+0x50>
 8002fe4:	42a3      	cmp	r3, r4
 8002fe6:	d9fa      	bls.n	8002fde <_free_r+0x46>
 8002fe8:	6811      	ldr	r1, [r2, #0]
 8002fea:	1855      	adds	r5, r2, r1
 8002fec:	42a5      	cmp	r5, r4
 8002fee:	d10b      	bne.n	8003008 <_free_r+0x70>
 8002ff0:	6824      	ldr	r4, [r4, #0]
 8002ff2:	4421      	add	r1, r4
 8002ff4:	1854      	adds	r4, r2, r1
 8002ff6:	42a3      	cmp	r3, r4
 8002ff8:	6011      	str	r1, [r2, #0]
 8002ffa:	d1e0      	bne.n	8002fbe <_free_r+0x26>
 8002ffc:	681c      	ldr	r4, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	6053      	str	r3, [r2, #4]
 8003002:	440c      	add	r4, r1
 8003004:	6014      	str	r4, [r2, #0]
 8003006:	e7da      	b.n	8002fbe <_free_r+0x26>
 8003008:	d902      	bls.n	8003010 <_free_r+0x78>
 800300a:	230c      	movs	r3, #12
 800300c:	6003      	str	r3, [r0, #0]
 800300e:	e7d6      	b.n	8002fbe <_free_r+0x26>
 8003010:	6825      	ldr	r5, [r4, #0]
 8003012:	1961      	adds	r1, r4, r5
 8003014:	428b      	cmp	r3, r1
 8003016:	bf04      	itt	eq
 8003018:	6819      	ldreq	r1, [r3, #0]
 800301a:	685b      	ldreq	r3, [r3, #4]
 800301c:	6063      	str	r3, [r4, #4]
 800301e:	bf04      	itt	eq
 8003020:	1949      	addeq	r1, r1, r5
 8003022:	6021      	streq	r1, [r4, #0]
 8003024:	6054      	str	r4, [r2, #4]
 8003026:	e7ca      	b.n	8002fbe <_free_r+0x26>
 8003028:	b003      	add	sp, #12
 800302a:	bd30      	pop	{r4, r5, pc}
 800302c:	20000288 	.word	0x20000288

08003030 <sbrk_aligned>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	4e0e      	ldr	r6, [pc, #56]	; (800306c <sbrk_aligned+0x3c>)
 8003034:	460c      	mov	r4, r1
 8003036:	6831      	ldr	r1, [r6, #0]
 8003038:	4605      	mov	r5, r0
 800303a:	b911      	cbnz	r1, 8003042 <sbrk_aligned+0x12>
 800303c:	f000 fba6 	bl	800378c <_sbrk_r>
 8003040:	6030      	str	r0, [r6, #0]
 8003042:	4621      	mov	r1, r4
 8003044:	4628      	mov	r0, r5
 8003046:	f000 fba1 	bl	800378c <_sbrk_r>
 800304a:	1c43      	adds	r3, r0, #1
 800304c:	d00a      	beq.n	8003064 <sbrk_aligned+0x34>
 800304e:	1cc4      	adds	r4, r0, #3
 8003050:	f024 0403 	bic.w	r4, r4, #3
 8003054:	42a0      	cmp	r0, r4
 8003056:	d007      	beq.n	8003068 <sbrk_aligned+0x38>
 8003058:	1a21      	subs	r1, r4, r0
 800305a:	4628      	mov	r0, r5
 800305c:	f000 fb96 	bl	800378c <_sbrk_r>
 8003060:	3001      	adds	r0, #1
 8003062:	d101      	bne.n	8003068 <sbrk_aligned+0x38>
 8003064:	f04f 34ff 	mov.w	r4, #4294967295
 8003068:	4620      	mov	r0, r4
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	2000028c 	.word	0x2000028c

08003070 <_malloc_r>:
 8003070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003074:	1ccd      	adds	r5, r1, #3
 8003076:	f025 0503 	bic.w	r5, r5, #3
 800307a:	3508      	adds	r5, #8
 800307c:	2d0c      	cmp	r5, #12
 800307e:	bf38      	it	cc
 8003080:	250c      	movcc	r5, #12
 8003082:	2d00      	cmp	r5, #0
 8003084:	4607      	mov	r7, r0
 8003086:	db01      	blt.n	800308c <_malloc_r+0x1c>
 8003088:	42a9      	cmp	r1, r5
 800308a:	d905      	bls.n	8003098 <_malloc_r+0x28>
 800308c:	230c      	movs	r3, #12
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	2600      	movs	r6, #0
 8003092:	4630      	mov	r0, r6
 8003094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003098:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800316c <_malloc_r+0xfc>
 800309c:	f000 f868 	bl	8003170 <__malloc_lock>
 80030a0:	f8d8 3000 	ldr.w	r3, [r8]
 80030a4:	461c      	mov	r4, r3
 80030a6:	bb5c      	cbnz	r4, 8003100 <_malloc_r+0x90>
 80030a8:	4629      	mov	r1, r5
 80030aa:	4638      	mov	r0, r7
 80030ac:	f7ff ffc0 	bl	8003030 <sbrk_aligned>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	4604      	mov	r4, r0
 80030b4:	d155      	bne.n	8003162 <_malloc_r+0xf2>
 80030b6:	f8d8 4000 	ldr.w	r4, [r8]
 80030ba:	4626      	mov	r6, r4
 80030bc:	2e00      	cmp	r6, #0
 80030be:	d145      	bne.n	800314c <_malloc_r+0xdc>
 80030c0:	2c00      	cmp	r4, #0
 80030c2:	d048      	beq.n	8003156 <_malloc_r+0xe6>
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	4631      	mov	r1, r6
 80030c8:	4638      	mov	r0, r7
 80030ca:	eb04 0903 	add.w	r9, r4, r3
 80030ce:	f000 fb5d 	bl	800378c <_sbrk_r>
 80030d2:	4581      	cmp	r9, r0
 80030d4:	d13f      	bne.n	8003156 <_malloc_r+0xe6>
 80030d6:	6821      	ldr	r1, [r4, #0]
 80030d8:	1a6d      	subs	r5, r5, r1
 80030da:	4629      	mov	r1, r5
 80030dc:	4638      	mov	r0, r7
 80030de:	f7ff ffa7 	bl	8003030 <sbrk_aligned>
 80030e2:	3001      	adds	r0, #1
 80030e4:	d037      	beq.n	8003156 <_malloc_r+0xe6>
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	442b      	add	r3, r5
 80030ea:	6023      	str	r3, [r4, #0]
 80030ec:	f8d8 3000 	ldr.w	r3, [r8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d038      	beq.n	8003166 <_malloc_r+0xf6>
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	42a2      	cmp	r2, r4
 80030f8:	d12b      	bne.n	8003152 <_malloc_r+0xe2>
 80030fa:	2200      	movs	r2, #0
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	e00f      	b.n	8003120 <_malloc_r+0xb0>
 8003100:	6822      	ldr	r2, [r4, #0]
 8003102:	1b52      	subs	r2, r2, r5
 8003104:	d41f      	bmi.n	8003146 <_malloc_r+0xd6>
 8003106:	2a0b      	cmp	r2, #11
 8003108:	d917      	bls.n	800313a <_malloc_r+0xca>
 800310a:	1961      	adds	r1, r4, r5
 800310c:	42a3      	cmp	r3, r4
 800310e:	6025      	str	r5, [r4, #0]
 8003110:	bf18      	it	ne
 8003112:	6059      	strne	r1, [r3, #4]
 8003114:	6863      	ldr	r3, [r4, #4]
 8003116:	bf08      	it	eq
 8003118:	f8c8 1000 	streq.w	r1, [r8]
 800311c:	5162      	str	r2, [r4, r5]
 800311e:	604b      	str	r3, [r1, #4]
 8003120:	4638      	mov	r0, r7
 8003122:	f104 060b 	add.w	r6, r4, #11
 8003126:	f000 f829 	bl	800317c <__malloc_unlock>
 800312a:	f026 0607 	bic.w	r6, r6, #7
 800312e:	1d23      	adds	r3, r4, #4
 8003130:	1af2      	subs	r2, r6, r3
 8003132:	d0ae      	beq.n	8003092 <_malloc_r+0x22>
 8003134:	1b9b      	subs	r3, r3, r6
 8003136:	50a3      	str	r3, [r4, r2]
 8003138:	e7ab      	b.n	8003092 <_malloc_r+0x22>
 800313a:	42a3      	cmp	r3, r4
 800313c:	6862      	ldr	r2, [r4, #4]
 800313e:	d1dd      	bne.n	80030fc <_malloc_r+0x8c>
 8003140:	f8c8 2000 	str.w	r2, [r8]
 8003144:	e7ec      	b.n	8003120 <_malloc_r+0xb0>
 8003146:	4623      	mov	r3, r4
 8003148:	6864      	ldr	r4, [r4, #4]
 800314a:	e7ac      	b.n	80030a6 <_malloc_r+0x36>
 800314c:	4634      	mov	r4, r6
 800314e:	6876      	ldr	r6, [r6, #4]
 8003150:	e7b4      	b.n	80030bc <_malloc_r+0x4c>
 8003152:	4613      	mov	r3, r2
 8003154:	e7cc      	b.n	80030f0 <_malloc_r+0x80>
 8003156:	230c      	movs	r3, #12
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4638      	mov	r0, r7
 800315c:	f000 f80e 	bl	800317c <__malloc_unlock>
 8003160:	e797      	b.n	8003092 <_malloc_r+0x22>
 8003162:	6025      	str	r5, [r4, #0]
 8003164:	e7dc      	b.n	8003120 <_malloc_r+0xb0>
 8003166:	605b      	str	r3, [r3, #4]
 8003168:	deff      	udf	#255	; 0xff
 800316a:	bf00      	nop
 800316c:	20000288 	.word	0x20000288

08003170 <__malloc_lock>:
 8003170:	4801      	ldr	r0, [pc, #4]	; (8003178 <__malloc_lock+0x8>)
 8003172:	f7ff bf0f 	b.w	8002f94 <__retarget_lock_acquire_recursive>
 8003176:	bf00      	nop
 8003178:	20000284 	.word	0x20000284

0800317c <__malloc_unlock>:
 800317c:	4801      	ldr	r0, [pc, #4]	; (8003184 <__malloc_unlock+0x8>)
 800317e:	f7ff bf0a 	b.w	8002f96 <__retarget_lock_release_recursive>
 8003182:	bf00      	nop
 8003184:	20000284 	.word	0x20000284

08003188 <__ssputs_r>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	688e      	ldr	r6, [r1, #8]
 800318e:	461f      	mov	r7, r3
 8003190:	42be      	cmp	r6, r7
 8003192:	680b      	ldr	r3, [r1, #0]
 8003194:	4682      	mov	sl, r0
 8003196:	460c      	mov	r4, r1
 8003198:	4690      	mov	r8, r2
 800319a:	d82c      	bhi.n	80031f6 <__ssputs_r+0x6e>
 800319c:	898a      	ldrh	r2, [r1, #12]
 800319e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031a2:	d026      	beq.n	80031f2 <__ssputs_r+0x6a>
 80031a4:	6965      	ldr	r5, [r4, #20]
 80031a6:	6909      	ldr	r1, [r1, #16]
 80031a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ac:	eba3 0901 	sub.w	r9, r3, r1
 80031b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031b4:	1c7b      	adds	r3, r7, #1
 80031b6:	444b      	add	r3, r9
 80031b8:	106d      	asrs	r5, r5, #1
 80031ba:	429d      	cmp	r5, r3
 80031bc:	bf38      	it	cc
 80031be:	461d      	movcc	r5, r3
 80031c0:	0553      	lsls	r3, r2, #21
 80031c2:	d527      	bpl.n	8003214 <__ssputs_r+0x8c>
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7ff ff53 	bl	8003070 <_malloc_r>
 80031ca:	4606      	mov	r6, r0
 80031cc:	b360      	cbz	r0, 8003228 <__ssputs_r+0xa0>
 80031ce:	6921      	ldr	r1, [r4, #16]
 80031d0:	464a      	mov	r2, r9
 80031d2:	f000 faeb 	bl	80037ac <memcpy>
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e0:	81a3      	strh	r3, [r4, #12]
 80031e2:	6126      	str	r6, [r4, #16]
 80031e4:	6165      	str	r5, [r4, #20]
 80031e6:	444e      	add	r6, r9
 80031e8:	eba5 0509 	sub.w	r5, r5, r9
 80031ec:	6026      	str	r6, [r4, #0]
 80031ee:	60a5      	str	r5, [r4, #8]
 80031f0:	463e      	mov	r6, r7
 80031f2:	42be      	cmp	r6, r7
 80031f4:	d900      	bls.n	80031f8 <__ssputs_r+0x70>
 80031f6:	463e      	mov	r6, r7
 80031f8:	6820      	ldr	r0, [r4, #0]
 80031fa:	4632      	mov	r2, r6
 80031fc:	4641      	mov	r1, r8
 80031fe:	f000 faab 	bl	8003758 <memmove>
 8003202:	68a3      	ldr	r3, [r4, #8]
 8003204:	1b9b      	subs	r3, r3, r6
 8003206:	60a3      	str	r3, [r4, #8]
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	4433      	add	r3, r6
 800320c:	6023      	str	r3, [r4, #0]
 800320e:	2000      	movs	r0, #0
 8003210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003214:	462a      	mov	r2, r5
 8003216:	f000 fad7 	bl	80037c8 <_realloc_r>
 800321a:	4606      	mov	r6, r0
 800321c:	2800      	cmp	r0, #0
 800321e:	d1e0      	bne.n	80031e2 <__ssputs_r+0x5a>
 8003220:	6921      	ldr	r1, [r4, #16]
 8003222:	4650      	mov	r0, sl
 8003224:	f7ff feb8 	bl	8002f98 <_free_r>
 8003228:	230c      	movs	r3, #12
 800322a:	f8ca 3000 	str.w	r3, [sl]
 800322e:	89a3      	ldrh	r3, [r4, #12]
 8003230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003234:	81a3      	strh	r3, [r4, #12]
 8003236:	f04f 30ff 	mov.w	r0, #4294967295
 800323a:	e7e9      	b.n	8003210 <__ssputs_r+0x88>

0800323c <_svfiprintf_r>:
 800323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003240:	4698      	mov	r8, r3
 8003242:	898b      	ldrh	r3, [r1, #12]
 8003244:	061b      	lsls	r3, r3, #24
 8003246:	b09d      	sub	sp, #116	; 0x74
 8003248:	4607      	mov	r7, r0
 800324a:	460d      	mov	r5, r1
 800324c:	4614      	mov	r4, r2
 800324e:	d50e      	bpl.n	800326e <_svfiprintf_r+0x32>
 8003250:	690b      	ldr	r3, [r1, #16]
 8003252:	b963      	cbnz	r3, 800326e <_svfiprintf_r+0x32>
 8003254:	2140      	movs	r1, #64	; 0x40
 8003256:	f7ff ff0b 	bl	8003070 <_malloc_r>
 800325a:	6028      	str	r0, [r5, #0]
 800325c:	6128      	str	r0, [r5, #16]
 800325e:	b920      	cbnz	r0, 800326a <_svfiprintf_r+0x2e>
 8003260:	230c      	movs	r3, #12
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	e0d0      	b.n	800340c <_svfiprintf_r+0x1d0>
 800326a:	2340      	movs	r3, #64	; 0x40
 800326c:	616b      	str	r3, [r5, #20]
 800326e:	2300      	movs	r3, #0
 8003270:	9309      	str	r3, [sp, #36]	; 0x24
 8003272:	2320      	movs	r3, #32
 8003274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003278:	f8cd 800c 	str.w	r8, [sp, #12]
 800327c:	2330      	movs	r3, #48	; 0x30
 800327e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003424 <_svfiprintf_r+0x1e8>
 8003282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003286:	f04f 0901 	mov.w	r9, #1
 800328a:	4623      	mov	r3, r4
 800328c:	469a      	mov	sl, r3
 800328e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003292:	b10a      	cbz	r2, 8003298 <_svfiprintf_r+0x5c>
 8003294:	2a25      	cmp	r2, #37	; 0x25
 8003296:	d1f9      	bne.n	800328c <_svfiprintf_r+0x50>
 8003298:	ebba 0b04 	subs.w	fp, sl, r4
 800329c:	d00b      	beq.n	80032b6 <_svfiprintf_r+0x7a>
 800329e:	465b      	mov	r3, fp
 80032a0:	4622      	mov	r2, r4
 80032a2:	4629      	mov	r1, r5
 80032a4:	4638      	mov	r0, r7
 80032a6:	f7ff ff6f 	bl	8003188 <__ssputs_r>
 80032aa:	3001      	adds	r0, #1
 80032ac:	f000 80a9 	beq.w	8003402 <_svfiprintf_r+0x1c6>
 80032b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032b2:	445a      	add	r2, fp
 80032b4:	9209      	str	r2, [sp, #36]	; 0x24
 80032b6:	f89a 3000 	ldrb.w	r3, [sl]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80a1 	beq.w	8003402 <_svfiprintf_r+0x1c6>
 80032c0:	2300      	movs	r3, #0
 80032c2:	f04f 32ff 	mov.w	r2, #4294967295
 80032c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032ca:	f10a 0a01 	add.w	sl, sl, #1
 80032ce:	9304      	str	r3, [sp, #16]
 80032d0:	9307      	str	r3, [sp, #28]
 80032d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032d6:	931a      	str	r3, [sp, #104]	; 0x68
 80032d8:	4654      	mov	r4, sl
 80032da:	2205      	movs	r2, #5
 80032dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e0:	4850      	ldr	r0, [pc, #320]	; (8003424 <_svfiprintf_r+0x1e8>)
 80032e2:	f7fc ff7d 	bl	80001e0 <memchr>
 80032e6:	9a04      	ldr	r2, [sp, #16]
 80032e8:	b9d8      	cbnz	r0, 8003322 <_svfiprintf_r+0xe6>
 80032ea:	06d0      	lsls	r0, r2, #27
 80032ec:	bf44      	itt	mi
 80032ee:	2320      	movmi	r3, #32
 80032f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032f4:	0711      	lsls	r1, r2, #28
 80032f6:	bf44      	itt	mi
 80032f8:	232b      	movmi	r3, #43	; 0x2b
 80032fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003302:	2b2a      	cmp	r3, #42	; 0x2a
 8003304:	d015      	beq.n	8003332 <_svfiprintf_r+0xf6>
 8003306:	9a07      	ldr	r2, [sp, #28]
 8003308:	4654      	mov	r4, sl
 800330a:	2000      	movs	r0, #0
 800330c:	f04f 0c0a 	mov.w	ip, #10
 8003310:	4621      	mov	r1, r4
 8003312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003316:	3b30      	subs	r3, #48	; 0x30
 8003318:	2b09      	cmp	r3, #9
 800331a:	d94d      	bls.n	80033b8 <_svfiprintf_r+0x17c>
 800331c:	b1b0      	cbz	r0, 800334c <_svfiprintf_r+0x110>
 800331e:	9207      	str	r2, [sp, #28]
 8003320:	e014      	b.n	800334c <_svfiprintf_r+0x110>
 8003322:	eba0 0308 	sub.w	r3, r0, r8
 8003326:	fa09 f303 	lsl.w	r3, r9, r3
 800332a:	4313      	orrs	r3, r2
 800332c:	9304      	str	r3, [sp, #16]
 800332e:	46a2      	mov	sl, r4
 8003330:	e7d2      	b.n	80032d8 <_svfiprintf_r+0x9c>
 8003332:	9b03      	ldr	r3, [sp, #12]
 8003334:	1d19      	adds	r1, r3, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	9103      	str	r1, [sp, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	bfbb      	ittet	lt
 800333e:	425b      	neglt	r3, r3
 8003340:	f042 0202 	orrlt.w	r2, r2, #2
 8003344:	9307      	strge	r3, [sp, #28]
 8003346:	9307      	strlt	r3, [sp, #28]
 8003348:	bfb8      	it	lt
 800334a:	9204      	strlt	r2, [sp, #16]
 800334c:	7823      	ldrb	r3, [r4, #0]
 800334e:	2b2e      	cmp	r3, #46	; 0x2e
 8003350:	d10c      	bne.n	800336c <_svfiprintf_r+0x130>
 8003352:	7863      	ldrb	r3, [r4, #1]
 8003354:	2b2a      	cmp	r3, #42	; 0x2a
 8003356:	d134      	bne.n	80033c2 <_svfiprintf_r+0x186>
 8003358:	9b03      	ldr	r3, [sp, #12]
 800335a:	1d1a      	adds	r2, r3, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	9203      	str	r2, [sp, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	bfb8      	it	lt
 8003364:	f04f 33ff 	movlt.w	r3, #4294967295
 8003368:	3402      	adds	r4, #2
 800336a:	9305      	str	r3, [sp, #20]
 800336c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003434 <_svfiprintf_r+0x1f8>
 8003370:	7821      	ldrb	r1, [r4, #0]
 8003372:	2203      	movs	r2, #3
 8003374:	4650      	mov	r0, sl
 8003376:	f7fc ff33 	bl	80001e0 <memchr>
 800337a:	b138      	cbz	r0, 800338c <_svfiprintf_r+0x150>
 800337c:	9b04      	ldr	r3, [sp, #16]
 800337e:	eba0 000a 	sub.w	r0, r0, sl
 8003382:	2240      	movs	r2, #64	; 0x40
 8003384:	4082      	lsls	r2, r0
 8003386:	4313      	orrs	r3, r2
 8003388:	3401      	adds	r4, #1
 800338a:	9304      	str	r3, [sp, #16]
 800338c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003390:	4825      	ldr	r0, [pc, #148]	; (8003428 <_svfiprintf_r+0x1ec>)
 8003392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003396:	2206      	movs	r2, #6
 8003398:	f7fc ff22 	bl	80001e0 <memchr>
 800339c:	2800      	cmp	r0, #0
 800339e:	d038      	beq.n	8003412 <_svfiprintf_r+0x1d6>
 80033a0:	4b22      	ldr	r3, [pc, #136]	; (800342c <_svfiprintf_r+0x1f0>)
 80033a2:	bb1b      	cbnz	r3, 80033ec <_svfiprintf_r+0x1b0>
 80033a4:	9b03      	ldr	r3, [sp, #12]
 80033a6:	3307      	adds	r3, #7
 80033a8:	f023 0307 	bic.w	r3, r3, #7
 80033ac:	3308      	adds	r3, #8
 80033ae:	9303      	str	r3, [sp, #12]
 80033b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033b2:	4433      	add	r3, r6
 80033b4:	9309      	str	r3, [sp, #36]	; 0x24
 80033b6:	e768      	b.n	800328a <_svfiprintf_r+0x4e>
 80033b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80033bc:	460c      	mov	r4, r1
 80033be:	2001      	movs	r0, #1
 80033c0:	e7a6      	b.n	8003310 <_svfiprintf_r+0xd4>
 80033c2:	2300      	movs	r3, #0
 80033c4:	3401      	adds	r4, #1
 80033c6:	9305      	str	r3, [sp, #20]
 80033c8:	4619      	mov	r1, r3
 80033ca:	f04f 0c0a 	mov.w	ip, #10
 80033ce:	4620      	mov	r0, r4
 80033d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033d4:	3a30      	subs	r2, #48	; 0x30
 80033d6:	2a09      	cmp	r2, #9
 80033d8:	d903      	bls.n	80033e2 <_svfiprintf_r+0x1a6>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0c6      	beq.n	800336c <_svfiprintf_r+0x130>
 80033de:	9105      	str	r1, [sp, #20]
 80033e0:	e7c4      	b.n	800336c <_svfiprintf_r+0x130>
 80033e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80033e6:	4604      	mov	r4, r0
 80033e8:	2301      	movs	r3, #1
 80033ea:	e7f0      	b.n	80033ce <_svfiprintf_r+0x192>
 80033ec:	ab03      	add	r3, sp, #12
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	462a      	mov	r2, r5
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <_svfiprintf_r+0x1f4>)
 80033f4:	a904      	add	r1, sp, #16
 80033f6:	4638      	mov	r0, r7
 80033f8:	f3af 8000 	nop.w
 80033fc:	1c42      	adds	r2, r0, #1
 80033fe:	4606      	mov	r6, r0
 8003400:	d1d6      	bne.n	80033b0 <_svfiprintf_r+0x174>
 8003402:	89ab      	ldrh	r3, [r5, #12]
 8003404:	065b      	lsls	r3, r3, #25
 8003406:	f53f af2d 	bmi.w	8003264 <_svfiprintf_r+0x28>
 800340a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800340c:	b01d      	add	sp, #116	; 0x74
 800340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003412:	ab03      	add	r3, sp, #12
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	462a      	mov	r2, r5
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <_svfiprintf_r+0x1f4>)
 800341a:	a904      	add	r1, sp, #16
 800341c:	4638      	mov	r0, r7
 800341e:	f000 f879 	bl	8003514 <_printf_i>
 8003422:	e7eb      	b.n	80033fc <_svfiprintf_r+0x1c0>
 8003424:	080038e4 	.word	0x080038e4
 8003428:	080038ee 	.word	0x080038ee
 800342c:	00000000 	.word	0x00000000
 8003430:	08003189 	.word	0x08003189
 8003434:	080038ea 	.word	0x080038ea

08003438 <_printf_common>:
 8003438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800343c:	4616      	mov	r6, r2
 800343e:	4699      	mov	r9, r3
 8003440:	688a      	ldr	r2, [r1, #8]
 8003442:	690b      	ldr	r3, [r1, #16]
 8003444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003448:	4293      	cmp	r3, r2
 800344a:	bfb8      	it	lt
 800344c:	4613      	movlt	r3, r2
 800344e:	6033      	str	r3, [r6, #0]
 8003450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003454:	4607      	mov	r7, r0
 8003456:	460c      	mov	r4, r1
 8003458:	b10a      	cbz	r2, 800345e <_printf_common+0x26>
 800345a:	3301      	adds	r3, #1
 800345c:	6033      	str	r3, [r6, #0]
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	0699      	lsls	r1, r3, #26
 8003462:	bf42      	ittt	mi
 8003464:	6833      	ldrmi	r3, [r6, #0]
 8003466:	3302      	addmi	r3, #2
 8003468:	6033      	strmi	r3, [r6, #0]
 800346a:	6825      	ldr	r5, [r4, #0]
 800346c:	f015 0506 	ands.w	r5, r5, #6
 8003470:	d106      	bne.n	8003480 <_printf_common+0x48>
 8003472:	f104 0a19 	add.w	sl, r4, #25
 8003476:	68e3      	ldr	r3, [r4, #12]
 8003478:	6832      	ldr	r2, [r6, #0]
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	42ab      	cmp	r3, r5
 800347e:	dc26      	bgt.n	80034ce <_printf_common+0x96>
 8003480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003484:	1e13      	subs	r3, r2, #0
 8003486:	6822      	ldr	r2, [r4, #0]
 8003488:	bf18      	it	ne
 800348a:	2301      	movne	r3, #1
 800348c:	0692      	lsls	r2, r2, #26
 800348e:	d42b      	bmi.n	80034e8 <_printf_common+0xb0>
 8003490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003494:	4649      	mov	r1, r9
 8003496:	4638      	mov	r0, r7
 8003498:	47c0      	blx	r8
 800349a:	3001      	adds	r0, #1
 800349c:	d01e      	beq.n	80034dc <_printf_common+0xa4>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	6922      	ldr	r2, [r4, #16]
 80034a2:	f003 0306 	and.w	r3, r3, #6
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf02      	ittt	eq
 80034aa:	68e5      	ldreq	r5, [r4, #12]
 80034ac:	6833      	ldreq	r3, [r6, #0]
 80034ae:	1aed      	subeq	r5, r5, r3
 80034b0:	68a3      	ldr	r3, [r4, #8]
 80034b2:	bf0c      	ite	eq
 80034b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034b8:	2500      	movne	r5, #0
 80034ba:	4293      	cmp	r3, r2
 80034bc:	bfc4      	itt	gt
 80034be:	1a9b      	subgt	r3, r3, r2
 80034c0:	18ed      	addgt	r5, r5, r3
 80034c2:	2600      	movs	r6, #0
 80034c4:	341a      	adds	r4, #26
 80034c6:	42b5      	cmp	r5, r6
 80034c8:	d11a      	bne.n	8003500 <_printf_common+0xc8>
 80034ca:	2000      	movs	r0, #0
 80034cc:	e008      	b.n	80034e0 <_printf_common+0xa8>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4652      	mov	r2, sl
 80034d2:	4649      	mov	r1, r9
 80034d4:	4638      	mov	r0, r7
 80034d6:	47c0      	blx	r8
 80034d8:	3001      	adds	r0, #1
 80034da:	d103      	bne.n	80034e4 <_printf_common+0xac>
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e4:	3501      	adds	r5, #1
 80034e6:	e7c6      	b.n	8003476 <_printf_common+0x3e>
 80034e8:	18e1      	adds	r1, r4, r3
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	2030      	movs	r0, #48	; 0x30
 80034ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034f2:	4422      	add	r2, r4
 80034f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034fc:	3302      	adds	r3, #2
 80034fe:	e7c7      	b.n	8003490 <_printf_common+0x58>
 8003500:	2301      	movs	r3, #1
 8003502:	4622      	mov	r2, r4
 8003504:	4649      	mov	r1, r9
 8003506:	4638      	mov	r0, r7
 8003508:	47c0      	blx	r8
 800350a:	3001      	adds	r0, #1
 800350c:	d0e6      	beq.n	80034dc <_printf_common+0xa4>
 800350e:	3601      	adds	r6, #1
 8003510:	e7d9      	b.n	80034c6 <_printf_common+0x8e>
	...

08003514 <_printf_i>:
 8003514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003518:	7e0f      	ldrb	r7, [r1, #24]
 800351a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800351c:	2f78      	cmp	r7, #120	; 0x78
 800351e:	4691      	mov	r9, r2
 8003520:	4680      	mov	r8, r0
 8003522:	460c      	mov	r4, r1
 8003524:	469a      	mov	sl, r3
 8003526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800352a:	d807      	bhi.n	800353c <_printf_i+0x28>
 800352c:	2f62      	cmp	r7, #98	; 0x62
 800352e:	d80a      	bhi.n	8003546 <_printf_i+0x32>
 8003530:	2f00      	cmp	r7, #0
 8003532:	f000 80d4 	beq.w	80036de <_printf_i+0x1ca>
 8003536:	2f58      	cmp	r7, #88	; 0x58
 8003538:	f000 80c0 	beq.w	80036bc <_printf_i+0x1a8>
 800353c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003544:	e03a      	b.n	80035bc <_printf_i+0xa8>
 8003546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800354a:	2b15      	cmp	r3, #21
 800354c:	d8f6      	bhi.n	800353c <_printf_i+0x28>
 800354e:	a101      	add	r1, pc, #4	; (adr r1, 8003554 <_printf_i+0x40>)
 8003550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035c1 	.word	0x080035c1
 800355c:	0800353d 	.word	0x0800353d
 8003560:	0800353d 	.word	0x0800353d
 8003564:	0800353d 	.word	0x0800353d
 8003568:	0800353d 	.word	0x0800353d
 800356c:	080035c1 	.word	0x080035c1
 8003570:	0800353d 	.word	0x0800353d
 8003574:	0800353d 	.word	0x0800353d
 8003578:	0800353d 	.word	0x0800353d
 800357c:	0800353d 	.word	0x0800353d
 8003580:	080036c5 	.word	0x080036c5
 8003584:	080035ed 	.word	0x080035ed
 8003588:	0800367f 	.word	0x0800367f
 800358c:	0800353d 	.word	0x0800353d
 8003590:	0800353d 	.word	0x0800353d
 8003594:	080036e7 	.word	0x080036e7
 8003598:	0800353d 	.word	0x0800353d
 800359c:	080035ed 	.word	0x080035ed
 80035a0:	0800353d 	.word	0x0800353d
 80035a4:	0800353d 	.word	0x0800353d
 80035a8:	08003687 	.word	0x08003687
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	602a      	str	r2, [r5, #0]
 80035b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035bc:	2301      	movs	r3, #1
 80035be:	e09f      	b.n	8003700 <_printf_i+0x1ec>
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	682b      	ldr	r3, [r5, #0]
 80035c4:	0607      	lsls	r7, r0, #24
 80035c6:	f103 0104 	add.w	r1, r3, #4
 80035ca:	6029      	str	r1, [r5, #0]
 80035cc:	d501      	bpl.n	80035d2 <_printf_i+0xbe>
 80035ce:	681e      	ldr	r6, [r3, #0]
 80035d0:	e003      	b.n	80035da <_printf_i+0xc6>
 80035d2:	0646      	lsls	r6, r0, #25
 80035d4:	d5fb      	bpl.n	80035ce <_printf_i+0xba>
 80035d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035da:	2e00      	cmp	r6, #0
 80035dc:	da03      	bge.n	80035e6 <_printf_i+0xd2>
 80035de:	232d      	movs	r3, #45	; 0x2d
 80035e0:	4276      	negs	r6, r6
 80035e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035e6:	485a      	ldr	r0, [pc, #360]	; (8003750 <_printf_i+0x23c>)
 80035e8:	230a      	movs	r3, #10
 80035ea:	e012      	b.n	8003612 <_printf_i+0xfe>
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	6820      	ldr	r0, [r4, #0]
 80035f0:	1d19      	adds	r1, r3, #4
 80035f2:	6029      	str	r1, [r5, #0]
 80035f4:	0605      	lsls	r5, r0, #24
 80035f6:	d501      	bpl.n	80035fc <_printf_i+0xe8>
 80035f8:	681e      	ldr	r6, [r3, #0]
 80035fa:	e002      	b.n	8003602 <_printf_i+0xee>
 80035fc:	0641      	lsls	r1, r0, #25
 80035fe:	d5fb      	bpl.n	80035f8 <_printf_i+0xe4>
 8003600:	881e      	ldrh	r6, [r3, #0]
 8003602:	4853      	ldr	r0, [pc, #332]	; (8003750 <_printf_i+0x23c>)
 8003604:	2f6f      	cmp	r7, #111	; 0x6f
 8003606:	bf0c      	ite	eq
 8003608:	2308      	moveq	r3, #8
 800360a:	230a      	movne	r3, #10
 800360c:	2100      	movs	r1, #0
 800360e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003612:	6865      	ldr	r5, [r4, #4]
 8003614:	60a5      	str	r5, [r4, #8]
 8003616:	2d00      	cmp	r5, #0
 8003618:	bfa2      	ittt	ge
 800361a:	6821      	ldrge	r1, [r4, #0]
 800361c:	f021 0104 	bicge.w	r1, r1, #4
 8003620:	6021      	strge	r1, [r4, #0]
 8003622:	b90e      	cbnz	r6, 8003628 <_printf_i+0x114>
 8003624:	2d00      	cmp	r5, #0
 8003626:	d04b      	beq.n	80036c0 <_printf_i+0x1ac>
 8003628:	4615      	mov	r5, r2
 800362a:	fbb6 f1f3 	udiv	r1, r6, r3
 800362e:	fb03 6711 	mls	r7, r3, r1, r6
 8003632:	5dc7      	ldrb	r7, [r0, r7]
 8003634:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003638:	4637      	mov	r7, r6
 800363a:	42bb      	cmp	r3, r7
 800363c:	460e      	mov	r6, r1
 800363e:	d9f4      	bls.n	800362a <_printf_i+0x116>
 8003640:	2b08      	cmp	r3, #8
 8003642:	d10b      	bne.n	800365c <_printf_i+0x148>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	07de      	lsls	r6, r3, #31
 8003648:	d508      	bpl.n	800365c <_printf_i+0x148>
 800364a:	6923      	ldr	r3, [r4, #16]
 800364c:	6861      	ldr	r1, [r4, #4]
 800364e:	4299      	cmp	r1, r3
 8003650:	bfde      	ittt	le
 8003652:	2330      	movle	r3, #48	; 0x30
 8003654:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003658:	f105 35ff 	addle.w	r5, r5, #4294967295
 800365c:	1b52      	subs	r2, r2, r5
 800365e:	6122      	str	r2, [r4, #16]
 8003660:	f8cd a000 	str.w	sl, [sp]
 8003664:	464b      	mov	r3, r9
 8003666:	aa03      	add	r2, sp, #12
 8003668:	4621      	mov	r1, r4
 800366a:	4640      	mov	r0, r8
 800366c:	f7ff fee4 	bl	8003438 <_printf_common>
 8003670:	3001      	adds	r0, #1
 8003672:	d14a      	bne.n	800370a <_printf_i+0x1f6>
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	b004      	add	sp, #16
 800367a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	f043 0320 	orr.w	r3, r3, #32
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	4833      	ldr	r0, [pc, #204]	; (8003754 <_printf_i+0x240>)
 8003688:	2778      	movs	r7, #120	; 0x78
 800368a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	6829      	ldr	r1, [r5, #0]
 8003692:	061f      	lsls	r7, r3, #24
 8003694:	f851 6b04 	ldr.w	r6, [r1], #4
 8003698:	d402      	bmi.n	80036a0 <_printf_i+0x18c>
 800369a:	065f      	lsls	r7, r3, #25
 800369c:	bf48      	it	mi
 800369e:	b2b6      	uxthmi	r6, r6
 80036a0:	07df      	lsls	r7, r3, #31
 80036a2:	bf48      	it	mi
 80036a4:	f043 0320 	orrmi.w	r3, r3, #32
 80036a8:	6029      	str	r1, [r5, #0]
 80036aa:	bf48      	it	mi
 80036ac:	6023      	strmi	r3, [r4, #0]
 80036ae:	b91e      	cbnz	r6, 80036b8 <_printf_i+0x1a4>
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	f023 0320 	bic.w	r3, r3, #32
 80036b6:	6023      	str	r3, [r4, #0]
 80036b8:	2310      	movs	r3, #16
 80036ba:	e7a7      	b.n	800360c <_printf_i+0xf8>
 80036bc:	4824      	ldr	r0, [pc, #144]	; (8003750 <_printf_i+0x23c>)
 80036be:	e7e4      	b.n	800368a <_printf_i+0x176>
 80036c0:	4615      	mov	r5, r2
 80036c2:	e7bd      	b.n	8003640 <_printf_i+0x12c>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	6826      	ldr	r6, [r4, #0]
 80036c8:	6961      	ldr	r1, [r4, #20]
 80036ca:	1d18      	adds	r0, r3, #4
 80036cc:	6028      	str	r0, [r5, #0]
 80036ce:	0635      	lsls	r5, r6, #24
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	d501      	bpl.n	80036d8 <_printf_i+0x1c4>
 80036d4:	6019      	str	r1, [r3, #0]
 80036d6:	e002      	b.n	80036de <_printf_i+0x1ca>
 80036d8:	0670      	lsls	r0, r6, #25
 80036da:	d5fb      	bpl.n	80036d4 <_printf_i+0x1c0>
 80036dc:	8019      	strh	r1, [r3, #0]
 80036de:	2300      	movs	r3, #0
 80036e0:	6123      	str	r3, [r4, #16]
 80036e2:	4615      	mov	r5, r2
 80036e4:	e7bc      	b.n	8003660 <_printf_i+0x14c>
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	1d1a      	adds	r2, r3, #4
 80036ea:	602a      	str	r2, [r5, #0]
 80036ec:	681d      	ldr	r5, [r3, #0]
 80036ee:	6862      	ldr	r2, [r4, #4]
 80036f0:	2100      	movs	r1, #0
 80036f2:	4628      	mov	r0, r5
 80036f4:	f7fc fd74 	bl	80001e0 <memchr>
 80036f8:	b108      	cbz	r0, 80036fe <_printf_i+0x1ea>
 80036fa:	1b40      	subs	r0, r0, r5
 80036fc:	6060      	str	r0, [r4, #4]
 80036fe:	6863      	ldr	r3, [r4, #4]
 8003700:	6123      	str	r3, [r4, #16]
 8003702:	2300      	movs	r3, #0
 8003704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003708:	e7aa      	b.n	8003660 <_printf_i+0x14c>
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	462a      	mov	r2, r5
 800370e:	4649      	mov	r1, r9
 8003710:	4640      	mov	r0, r8
 8003712:	47d0      	blx	sl
 8003714:	3001      	adds	r0, #1
 8003716:	d0ad      	beq.n	8003674 <_printf_i+0x160>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	079b      	lsls	r3, r3, #30
 800371c:	d413      	bmi.n	8003746 <_printf_i+0x232>
 800371e:	68e0      	ldr	r0, [r4, #12]
 8003720:	9b03      	ldr	r3, [sp, #12]
 8003722:	4298      	cmp	r0, r3
 8003724:	bfb8      	it	lt
 8003726:	4618      	movlt	r0, r3
 8003728:	e7a6      	b.n	8003678 <_printf_i+0x164>
 800372a:	2301      	movs	r3, #1
 800372c:	4632      	mov	r2, r6
 800372e:	4649      	mov	r1, r9
 8003730:	4640      	mov	r0, r8
 8003732:	47d0      	blx	sl
 8003734:	3001      	adds	r0, #1
 8003736:	d09d      	beq.n	8003674 <_printf_i+0x160>
 8003738:	3501      	adds	r5, #1
 800373a:	68e3      	ldr	r3, [r4, #12]
 800373c:	9903      	ldr	r1, [sp, #12]
 800373e:	1a5b      	subs	r3, r3, r1
 8003740:	42ab      	cmp	r3, r5
 8003742:	dcf2      	bgt.n	800372a <_printf_i+0x216>
 8003744:	e7eb      	b.n	800371e <_printf_i+0x20a>
 8003746:	2500      	movs	r5, #0
 8003748:	f104 0619 	add.w	r6, r4, #25
 800374c:	e7f5      	b.n	800373a <_printf_i+0x226>
 800374e:	bf00      	nop
 8003750:	080038f5 	.word	0x080038f5
 8003754:	08003906 	.word	0x08003906

08003758 <memmove>:
 8003758:	4288      	cmp	r0, r1
 800375a:	b510      	push	{r4, lr}
 800375c:	eb01 0402 	add.w	r4, r1, r2
 8003760:	d902      	bls.n	8003768 <memmove+0x10>
 8003762:	4284      	cmp	r4, r0
 8003764:	4623      	mov	r3, r4
 8003766:	d807      	bhi.n	8003778 <memmove+0x20>
 8003768:	1e43      	subs	r3, r0, #1
 800376a:	42a1      	cmp	r1, r4
 800376c:	d008      	beq.n	8003780 <memmove+0x28>
 800376e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003776:	e7f8      	b.n	800376a <memmove+0x12>
 8003778:	4402      	add	r2, r0
 800377a:	4601      	mov	r1, r0
 800377c:	428a      	cmp	r2, r1
 800377e:	d100      	bne.n	8003782 <memmove+0x2a>
 8003780:	bd10      	pop	{r4, pc}
 8003782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800378a:	e7f7      	b.n	800377c <memmove+0x24>

0800378c <_sbrk_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	4d06      	ldr	r5, [pc, #24]	; (80037a8 <_sbrk_r+0x1c>)
 8003790:	2300      	movs	r3, #0
 8003792:	4604      	mov	r4, r0
 8003794:	4608      	mov	r0, r1
 8003796:	602b      	str	r3, [r5, #0]
 8003798:	f7fd fabe 	bl	8000d18 <_sbrk>
 800379c:	1c43      	adds	r3, r0, #1
 800379e:	d102      	bne.n	80037a6 <_sbrk_r+0x1a>
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	b103      	cbz	r3, 80037a6 <_sbrk_r+0x1a>
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	bd38      	pop	{r3, r4, r5, pc}
 80037a8:	20000280 	.word	0x20000280

080037ac <memcpy>:
 80037ac:	440a      	add	r2, r1
 80037ae:	4291      	cmp	r1, r2
 80037b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037b4:	d100      	bne.n	80037b8 <memcpy+0xc>
 80037b6:	4770      	bx	lr
 80037b8:	b510      	push	{r4, lr}
 80037ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037c2:	4291      	cmp	r1, r2
 80037c4:	d1f9      	bne.n	80037ba <memcpy+0xe>
 80037c6:	bd10      	pop	{r4, pc}

080037c8 <_realloc_r>:
 80037c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037cc:	4680      	mov	r8, r0
 80037ce:	4614      	mov	r4, r2
 80037d0:	460e      	mov	r6, r1
 80037d2:	b921      	cbnz	r1, 80037de <_realloc_r+0x16>
 80037d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037d8:	4611      	mov	r1, r2
 80037da:	f7ff bc49 	b.w	8003070 <_malloc_r>
 80037de:	b92a      	cbnz	r2, 80037ec <_realloc_r+0x24>
 80037e0:	f7ff fbda 	bl	8002f98 <_free_r>
 80037e4:	4625      	mov	r5, r4
 80037e6:	4628      	mov	r0, r5
 80037e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ec:	f000 f81b 	bl	8003826 <_malloc_usable_size_r>
 80037f0:	4284      	cmp	r4, r0
 80037f2:	4607      	mov	r7, r0
 80037f4:	d802      	bhi.n	80037fc <_realloc_r+0x34>
 80037f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80037fa:	d812      	bhi.n	8003822 <_realloc_r+0x5a>
 80037fc:	4621      	mov	r1, r4
 80037fe:	4640      	mov	r0, r8
 8003800:	f7ff fc36 	bl	8003070 <_malloc_r>
 8003804:	4605      	mov	r5, r0
 8003806:	2800      	cmp	r0, #0
 8003808:	d0ed      	beq.n	80037e6 <_realloc_r+0x1e>
 800380a:	42bc      	cmp	r4, r7
 800380c:	4622      	mov	r2, r4
 800380e:	4631      	mov	r1, r6
 8003810:	bf28      	it	cs
 8003812:	463a      	movcs	r2, r7
 8003814:	f7ff ffca 	bl	80037ac <memcpy>
 8003818:	4631      	mov	r1, r6
 800381a:	4640      	mov	r0, r8
 800381c:	f7ff fbbc 	bl	8002f98 <_free_r>
 8003820:	e7e1      	b.n	80037e6 <_realloc_r+0x1e>
 8003822:	4635      	mov	r5, r6
 8003824:	e7df      	b.n	80037e6 <_realloc_r+0x1e>

08003826 <_malloc_usable_size_r>:
 8003826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800382a:	1f18      	subs	r0, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	bfbc      	itt	lt
 8003830:	580b      	ldrlt	r3, [r1, r0]
 8003832:	18c0      	addlt	r0, r0, r3
 8003834:	4770      	bx	lr
	...

08003838 <_init>:
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	bf00      	nop
 800383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383e:	bc08      	pop	{r3}
 8003840:	469e      	mov	lr, r3
 8003842:	4770      	bx	lr

08003844 <_fini>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	bf00      	nop
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr
