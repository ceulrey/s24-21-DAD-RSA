
Custom_UART_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08006c80  08006c80  00016c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070cc  080070cc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d4  080070d4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d4  080070d4  000170d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070d8  080070d8  000170d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080070dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000368  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000540  20000540  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008fca  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001931  00000000  00000000  00029211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e8  00000000  00000000  0002ab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000601  00000000  00000000  0002b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020ce6  00000000  00000000  0002b931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009a50  00000000  00000000  0004c617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c49d4  00000000  00000000  00056067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000030a8  00000000  00000000  0011aa3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  0011dae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c68 	.word	0x08006c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08006c68 	.word	0x08006c68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af04      	add	r7, sp, #16
 8000eaa:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2b      	ldr	r2, [pc, #172]	; (8000f60 <HAL_UART_RxCpltCallback+0xbc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_UART_RxCpltCallback+0x2c>
        // Process data from USART1
    	processUartData(huart, &sensorData1, rx_data1, &uartState1, &timestampBuffer1, &dataBuffer1, &dataIndex1);
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_UART_RxCpltCallback+0xc0>)
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_UART_RxCpltCallback+0xc4>)
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <HAL_UART_RxCpltCallback+0xc8>)
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <HAL_UART_RxCpltCallback+0xcc>)
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	; (8000f74 <HAL_UART_RxCpltCallback+0xd0>)
 8000ec6:	492c      	ldr	r1, [pc, #176]	; (8000f78 <HAL_UART_RxCpltCallback+0xd4>)
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f879 	bl	8000fc0 <processUartData>
 8000ece:	e022      	b.n	8000f16 <HAL_UART_RxCpltCallback+0x72>
    }
    else if(huart->Instance == USART2) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a29      	ldr	r2, [pc, #164]	; (8000f7c <HAL_UART_RxCpltCallback+0xd8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_UART_RxCpltCallback+0x50>
        // Process data from USART2
    	processUartData(huart, &sensorData2, rx_data2, &uartState2, &timestampBuffer2, &dataBuffer2, &dataIndex2);
 8000eda:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <HAL_UART_RxCpltCallback+0xdc>)
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <HAL_UART_RxCpltCallback+0xe0>)
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <HAL_UART_RxCpltCallback+0xe4>)
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <HAL_UART_RxCpltCallback+0xe8>)
 8000ee8:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <HAL_UART_RxCpltCallback+0xec>)
 8000eea:	492a      	ldr	r1, [pc, #168]	; (8000f94 <HAL_UART_RxCpltCallback+0xf0>)
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 f867 	bl	8000fc0 <processUartData>
 8000ef2:	e010      	b.n	8000f16 <HAL_UART_RxCpltCallback+0x72>
    }
    else if(huart->Instance == UART4) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <HAL_UART_RxCpltCallback+0xf4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10b      	bne.n	8000f16 <HAL_UART_RxCpltCallback+0x72>
        // Process data from USART2
    	processUartData(huart, &sensorData3, rx_data3, &uartState3, &timestampBuffer3, &dataBuffer3, &dataIndex3);
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <HAL_UART_RxCpltCallback+0xf8>)
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_UART_RxCpltCallback+0xfc>)
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_UART_RxCpltCallback+0x100>)
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <HAL_UART_RxCpltCallback+0x104>)
 8000f0c:	4a27      	ldr	r2, [pc, #156]	; (8000fac <HAL_UART_RxCpltCallback+0x108>)
 8000f0e:	4928      	ldr	r1, [pc, #160]	; (8000fb0 <HAL_UART_RxCpltCallback+0x10c>)
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f855 	bl	8000fc0 <processUartData>
    }

    // Re-enable UART reception interrupt correctly for each port
    if (huart->Instance == USART1) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <HAL_UART_RxCpltCallback+0xbc>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d105      	bne.n	8000f2c <HAL_UART_RxCpltCallback+0x88>
        HAL_UART_Receive_IT(&huart1, rx_data1, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	4914      	ldr	r1, [pc, #80]	; (8000f74 <HAL_UART_RxCpltCallback+0xd0>)
 8000f24:	4823      	ldr	r0, [pc, #140]	; (8000fb4 <HAL_UART_RxCpltCallback+0x110>)
 8000f26:	f002 f89e 	bl	8003066 <HAL_UART_Receive_IT>
        HAL_UART_Receive_IT(&huart2, rx_data2, 1);
    }
    else if (huart->Instance == UART4) {
    	HAL_UART_Receive_IT(&huart4, rx_data3, 1);
    }
}
 8000f2a:	e014      	b.n	8000f56 <HAL_UART_RxCpltCallback+0xb2>
    else if (huart->Instance == USART2) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <HAL_UART_RxCpltCallback+0xd8>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d105      	bne.n	8000f42 <HAL_UART_RxCpltCallback+0x9e>
        HAL_UART_Receive_IT(&huart2, rx_data2, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	4915      	ldr	r1, [pc, #84]	; (8000f90 <HAL_UART_RxCpltCallback+0xec>)
 8000f3a:	481f      	ldr	r0, [pc, #124]	; (8000fb8 <HAL_UART_RxCpltCallback+0x114>)
 8000f3c:	f002 f893 	bl	8003066 <HAL_UART_Receive_IT>
}
 8000f40:	e009      	b.n	8000f56 <HAL_UART_RxCpltCallback+0xb2>
    else if (huart->Instance == UART4) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <HAL_UART_RxCpltCallback+0xf4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d104      	bne.n	8000f56 <HAL_UART_RxCpltCallback+0xb2>
    	HAL_UART_Receive_IT(&huart4, rx_data3, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4917      	ldr	r1, [pc, #92]	; (8000fac <HAL_UART_RxCpltCallback+0x108>)
 8000f50:	481a      	ldr	r0, [pc, #104]	; (8000fbc <HAL_UART_RxCpltCallback+0x118>)
 8000f52:	f002 f888 	bl	8003066 <HAL_UART_Receive_IT>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40011000 	.word	0x40011000
 8000f64:	20000388 	.word	0x20000388
 8000f68:	20000380 	.word	0x20000380
 8000f6c:	2000037c 	.word	0x2000037c
 8000f70:	20000378 	.word	0x20000378
 8000f74:	2000035c 	.word	0x2000035c
 8000f78:	20000360 	.word	0x20000360
 8000f7c:	40004400 	.word	0x40004400
 8000f80:	200003b8 	.word	0x200003b8
 8000f84:	200003b0 	.word	0x200003b0
 8000f88:	200003ac 	.word	0x200003ac
 8000f8c:	200003a8 	.word	0x200003a8
 8000f90:	2000038c 	.word	0x2000038c
 8000f94:	20000390 	.word	0x20000390
 8000f98:	40004c00 	.word	0x40004c00
 8000f9c:	200003e8 	.word	0x200003e8
 8000fa0:	200003e0 	.word	0x200003e0
 8000fa4:	200003dc 	.word	0x200003dc
 8000fa8:	200003d8 	.word	0x200003d8
 8000fac:	200003bc 	.word	0x200003bc
 8000fb0:	200003c0 	.word	0x200003c0
 8000fb4:	200001f4 	.word	0x200001f4
 8000fb8:	2000023c 	.word	0x2000023c
 8000fbc:	200002cc 	.word	0x200002cc

08000fc0 <processUartData>:

void processUartData(UART_HandleTypeDef *huart, SensorDataPacket *sensorData, uint8_t *rxData,
                     UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer, uint32_t *dataIndex) {    // Your existing switch case logic here, adapted for the specific sensorData and rx_data
 8000fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc4:	b087      	sub	sp, #28
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	603b      	str	r3, [r7, #0]
    // This function needs to be adapted from your existing HAL_UART_RxCpltCallback logic
	uint8_t rxByte = *rxData; // The received byte
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	75fb      	strb	r3, [r7, #23]
//    	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//    	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
    switch (*uartState) {
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b07      	cmp	r3, #7
 8000fdc:	f200 80dd 	bhi.w	800119a <processUartData+0x1da>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <processUartData+0x28>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001009 	.word	0x08001009
 8000fec:	0800101f 	.word	0x0800101f
 8000ff0:	0800102d 	.word	0x0800102d
 8000ff4:	08001041 	.word	0x08001041
 8000ff8:	08001089 	.word	0x08001089
 8000ffc:	08001103 	.word	0x08001103
 8001000:	08001117 	.word	0x08001117
 8001004:	08001177 	.word	0x08001177
        case UART_WAIT_FOR_SOP: // SOP Case
            if (rxByte == 0x53) { // SOP byte = 0x53 ('S')
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	2b53      	cmp	r3, #83	; 0x53
 800100c:	f040 80bc 	bne.w	8001188 <processUartData+0x1c8>
            	sensorData->sop = rxByte; // Set the sop
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	7dfa      	ldrb	r2, [r7, #23]
 8001014:	701a      	strb	r2, [r3, #0]
            	*uartState = UART_DATATYPE;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            }
            break;
 800101c:	e0b4      	b.n	8001188 <processUartData+0x1c8>
        case UART_DATATYPE: // Data type Case
        	sensorData->datatype = rxByte; // Set th		e data type (Temp = 00, Humidity = 01, Sound = 10, Vibration = 11)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	7dfa      	ldrb	r2, [r7, #23]
 8001022:	705a      	strb	r2, [r3, #1]
            *uartState = UART_SENSOR_ID; // Next parameter
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	701a      	strb	r2, [r3, #0]
            break;
 800102a:	e0b6      	b.n	800119a <processUartData+0x1da>

        case UART_SENSOR_ID: // Sensor ID Case
        	sensorData->sensorId = rxByte; // Set the sensor ID (000, 001, 010, 011, 100, 101, 110, 111 (i.e. Sensor 1-8)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	7dfa      	ldrb	r2, [r7, #23]
 8001030:	709a      	strb	r2, [r3, #2]
        	*dataIndex = 0; // Reset dataIndex for the next field
 8001032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
            *uartState = UART_TIMESTAMP; // Next parameter
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2203      	movs	r2, #3
 800103c:	701a      	strb	r2, [r3, #0]
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 800103e:	e0ac      	b.n	800119a <processUartData+0x1da>

        case UART_TIMESTAMP: // Timestamp Case
            // Combine byte into timestamp assuming little endian - least significant byte first
//            	timestampBuffer |= ((uint32_t)rxByte << (24 - (dataIndex * 8)));
        	*timestampBuffer |= ((uint32_t)rxByte << ((*dataIndex-1) * 8));
 8001040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	7df9      	ldrb	r1, [r7, #23]
 8001046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3b01      	subs	r3, #1
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	431a      	orrs	r2, r3
 8001054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001056:	601a      	str	r2, [r3, #0]
//            	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
//            	sprintf(buffer, "Timestamp partial: 0x%08lX\r\n", timestampBuffer);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 8001058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001060:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->timestamp)) {
 8001062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b03      	cmp	r3, #3
 8001068:	f240 8090 	bls.w	800118c <processUartData+0x1cc>
                sensorData->timestamp = *timestampBuffer; // Assign the complete timestamp
 800106c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	605a      	str	r2, [r3, #4]
                *dataIndex = 0; // Reset dataIndex for the data field
 8001074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
                *timestampBuffer = 0; // Clear the buffer for the next use
 800107a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
                *uartState = UART_DATA; // Move to the next state
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2204      	movs	r2, #4
 8001084:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001086:	e081      	b.n	800118c <processUartData+0x1cc>

        case UART_DATA: // Data Case
            // Combine byte into data assuming little endian - least significant byte first
        	*dataBuffer |= ((uint64_t)rxByte << ((*dataIndex-1) * 8));//            	sprintf(buffer, "Data partial: 0x%016llx\r\n", dataBuffer);
 8001088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800108a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	2200      	movs	r2, #0
 8001092:	4698      	mov	r8, r3
 8001094:	4691      	mov	r9, r2
 8001096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3b01      	subs	r3, #1
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	f1a3 0620 	sub.w	r6, r3, #32
 80010a2:	f1c3 0220 	rsb	r2, r3, #32
 80010a6:	fa09 f503 	lsl.w	r5, r9, r3
 80010aa:	fa08 f606 	lsl.w	r6, r8, r6
 80010ae:	4335      	orrs	r5, r6
 80010b0:	fa28 f202 	lsr.w	r2, r8, r2
 80010b4:	4315      	orrs	r5, r2
 80010b6:	fa08 f403 	lsl.w	r4, r8, r3
 80010ba:	ea40 0a04 	orr.w	sl, r0, r4
 80010be:	ea41 0b05 	orr.w	fp, r1, r5
 80010c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c4:	e9c3 ab00 	strd	sl, fp, [r3]
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 80010c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010d0:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->data)) {
 80010d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b07      	cmp	r3, #7
 80010d8:	d95a      	bls.n	8001190 <processUartData+0x1d0>
                sensorData->data = *dataBuffer; // Assign the complete data
 80010da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
                *dataIndex = 0; // Reset dataIndex for the CRC field
 80010e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
                *dataBuffer = 0; // Clear the buffer for the next use
 80010ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	e9c1 2300 	strd	r2, r3, [r1]
                *uartState = UART_CRC; // Move to the next state
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2205      	movs	r2, #5
 80010fe:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001100:	e046      	b.n	8001190 <processUartData+0x1d0>

        case UART_CRC: // CRC Case
        	if(rxByte != 0){
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d045      	beq.n	8001194 <processUartData+0x1d4>
                sensorData->crc = rxByte; // Set the CRC value based on algorithm
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	7dfa      	ldrb	r2, [r7, #23]
 800110c:	741a      	strb	r2, [r3, #16]
                *uartState = UART_EOP; // Next parameter
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2206      	movs	r2, #6
 8001112:	701a      	strb	r2, [r3, #0]
        	}
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 8001114:	e03e      	b.n	8001194 <processUartData+0x1d4>

        case UART_EOP:
            if (rxByte == 0x45) { // EOP byte = 0x45 ('E')
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	2b45      	cmp	r3, #69	; 0x45
 800111a:	d129      	bne.n	8001170 <processUartData+0x1b0>
                *uartState = UART_DONE; // Packet reception is complete
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2207      	movs	r2, #7
 8001120:	701a      	strb	r2, [r3, #0]
                sensorData->eop = rxByte; // Set the eop
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	7dfa      	ldrb	r2, [r7, #23]
 8001126:	745a      	strb	r2, [r3, #17]
                if(huart->Instance == USART1){
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <processUartData+0x1f0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d106      	bne.n	8001140 <processUartData+0x180>
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Red LED set when packet is complete
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001138:	481e      	ldr	r0, [pc, #120]	; (80011b4 <processUartData+0x1f4>)
 800113a:	f001 fa47 	bl	80025cc <HAL_GPIO_WritePin>
//                    uartState = UART_DONE; // Packet reception is complete
//                    sensorData.eop = rxByte; // Set the eop
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
            }
            break;
 800113e:	e02b      	b.n	8001198 <processUartData+0x1d8>
                else if(huart->Instance == USART2){
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <processUartData+0x1f8>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d106      	bne.n	8001158 <processUartData+0x198>
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001150:	4818      	ldr	r0, [pc, #96]	; (80011b4 <processUartData+0x1f4>)
 8001152:	f001 fa3b 	bl	80025cc <HAL_GPIO_WritePin>
            break;
 8001156:	e01f      	b.n	8001198 <processUartData+0x1d8>
                else if(huart->Instance == UART4){
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <processUartData+0x1fc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d11a      	bne.n	8001198 <processUartData+0x1d8>
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Blue LED set when packet is complete
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <processUartData+0x1f4>)
 800116a:	f001 fa2f 	bl	80025cc <HAL_GPIO_WritePin>
            break;
 800116e:	e013      	b.n	8001198 <processUartData+0x1d8>
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
            break;
 8001174:	e010      	b.n	8001198 <processUartData+0x1d8>
        case UART_DONE:
            // Packet is complete, validate CRC and take appropriate action
//                if (validateCRC(&sensorData)) {
//                    processData(&sensorData); // Process the data
//                }
        	printData(sensorData); // Process the data
 8001176:	68b8      	ldr	r0, [r7, #8]
 8001178:	f000 f854 	bl	8001224 <printData>
        	resetUartState(uartState, timestampBuffer, dataBuffer);
 800117c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800117e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f000 f81d 	bl	80011c0 <resetUartState>
            break;
 8001186:	e008      	b.n	800119a <processUartData+0x1da>
            break;
 8001188:	bf00      	nop
 800118a:	e006      	b.n	800119a <processUartData+0x1da>
            break;
 800118c:	bf00      	nop
 800118e:	e004      	b.n	800119a <processUartData+0x1da>
            break;
 8001190:	bf00      	nop
 8001192:	e002      	b.n	800119a <processUartData+0x1da>
            break;
 8001194:	bf00      	nop
 8001196:	e000      	b.n	800119a <processUartData+0x1da>
            break;
 8001198:	bf00      	nop
    }
    // Ready to receive the next byte
    HAL_UART_Receive_IT(huart, rxData, 1);
 800119a:	2201      	movs	r2, #1
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f001 ff61 	bl	8003066 <HAL_UART_Receive_IT>
}
 80011a4:	bf00      	nop
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011ae:	bf00      	nop
 80011b0:	40011000 	.word	0x40011000
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40004c00 	.word	0x40004c00

080011c0 <resetUartState>:

void resetUartState(UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
    *uartState = UART_WAIT_FOR_SOP; // Reset UART state
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
    *timestampBuffer = 0; // Clear the timestamp buffer
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
    *dataBuffer = 0; // Clear the data buffer
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9c1 2300 	strd	r2, r3, [r1]
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <resetUartState+0x60>)
 80011ee:	f001 f9ed 	bl	80025cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <resetUartState+0x60>)
 80011fa:	f001 f9e7 	bl	80025cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001204:	4806      	ldr	r0, [pc, #24]	; (8001220 <resetUartState+0x60>)
 8001206:	f001 f9e1 	bl	80025cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <resetUartState+0x60>)
 8001212:	f001 f9db 	bl	80025cc <HAL_GPIO_WritePin>
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40020c00 	.word	0x40020c00

08001224 <printData>:
int validateCRC(const SensorDataPacket *packet) {
    // Placeholder function to validate CRC - replace with actual CRC calculation
    return packet->crc == crc_calculated;
}

void printData(const SensorDataPacket *packet) {
 8001224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001228:	b0c0      	sub	sp, #256	; 0x100
 800122a:	af04      	add	r7, sp, #16
 800122c:	6078      	str	r0, [r7, #4]
    char buffer[100]; // Ensure the buffer is large enough for all the data
    char buffer2[100]; // Ensure the buffer is large enough for all the data
    double data;
    // Assuming the data field is treated as fixed-point and needs to be converted back to float
    if(packet->datatype != VIBRATION){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d00f      	beq.n	8001256 <printData+0x32>
        data = packet->data / 100.0;  // Convert fixed-point back to double
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff f9ac 	bl	800059c <__aeabi_l2d>
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b8c      	ldr	r3, [pc, #560]	; (800147c <printData+0x258>)
 800124a:	f7ff faff 	bl	800084c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }

    // Start of Packet (SOP) - Hexadecimal
    sprintf(buffer, "SOP: 0x%02X\r\n", packet->sop);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001260:	4987      	ldr	r1, [pc, #540]	; (8001480 <printData+0x25c>)
 8001262:	4618      	mov	r0, r3
 8001264:	f003 fba2 	bl	80049ac <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8001268:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ffff 	bl	8000270 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800127a:	2364      	movs	r3, #100	; 0x64
 800127c:	4881      	ldr	r0, [pc, #516]	; (8001484 <printData+0x260>)
 800127e:	f001 fe67 	bl	8002f50 <HAL_UART_Transmit>

    // Data Type - Binary
    sprintf(buffer, "Data Type: %u\r\n", packet->datatype);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	461a      	mov	r2, r3
 8001288:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800128c:	497e      	ldr	r1, [pc, #504]	; (8001488 <printData+0x264>)
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fb8c 	bl	80049ac <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8001294:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001298:	4618      	mov	r0, r3
 800129a:	f7fe ffe9 	bl	8000270 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	4876      	ldr	r0, [pc, #472]	; (8001484 <printData+0x260>)
 80012aa:	f001 fe51 	bl	8002f50 <HAL_UART_Transmit>

    // Sensor ID - Binary
    sprintf(buffer, "Sensor ID: %u\r\n", packet->sensorId);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	789b      	ldrb	r3, [r3, #2]
 80012b2:	461a      	mov	r2, r3
 80012b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012b8:	4974      	ldr	r1, [pc, #464]	; (800148c <printData+0x268>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fb76 	bl	80049ac <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80012c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7fe ffd3 	bl	8000270 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	486b      	ldr	r0, [pc, #428]	; (8001484 <printData+0x260>)
 80012d6:	f001 fe3b 	bl	8002f50 <HAL_UART_Transmit>

    // Timestamp - Decimal
    sprintf(buffer, "Timestamp: %lu\r\n", packet->timestamp);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012e2:	496b      	ldr	r1, [pc, #428]	; (8001490 <printData+0x26c>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fb61 	bl	80049ac <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80012ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ffbe 	bl	8000270 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	4861      	ldr	r0, [pc, #388]	; (8001484 <printData+0x260>)
 8001300:	f001 fe26 	bl	8002f50 <HAL_UART_Transmit>

//    // Data - Decimal
//    sprintf(buffer, "Data: %lu\r\n", packet->data);
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);

    if(packet->datatype == TEMPERATURE) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	785b      	ldrb	r3, [r3, #1]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d107      	bne.n	800131c <printData+0xf8>
        // For non-vibration data, print as before
    	sprintf(buffer, "Temp: %.2f C\r\n", data);
 800130c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001310:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001314:	495f      	ldr	r1, [pc, #380]	; (8001494 <printData+0x270>)
 8001316:	f003 fb49 	bl	80049ac <siprintf>
 800131a:	e06b      	b.n	80013f4 <printData+0x1d0>
    }
    else if(packet->datatype == HUMIDITY){
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	785b      	ldrb	r3, [r3, #1]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d107      	bne.n	8001334 <printData+0x110>
    	sprintf(buffer, "Hum: %.2f %%\r\n", data);
 8001324:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001328:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800132c:	495a      	ldr	r1, [pc, #360]	; (8001498 <printData+0x274>)
 800132e:	f003 fb3d 	bl	80049ac <siprintf>
 8001332:	e05f      	b.n	80013f4 <printData+0x1d0>
    }
    else if(packet->datatype == SOUND){
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	785b      	ldrb	r3, [r3, #1]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d107      	bne.n	800134c <printData+0x128>
    	sprintf(buffer, "Sound: %.2f dB\r\n", data);
 800133c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001340:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001344:	4955      	ldr	r1, [pc, #340]	; (800149c <printData+0x278>)
 8001346:	f003 fb31 	bl	80049ac <siprintf>
 800134a:	e053      	b.n	80013f4 <printData+0x1d0>
    }
    else if (packet->datatype == VIBRATION) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	785b      	ldrb	r3, [r3, #1]
 8001350:	2b03      	cmp	r3, #3
 8001352:	d14f      	bne.n	80013f4 <printData+0x1d0>
        int16_t x, y, z;
        unpackData(packet->data, &x, &y, &z);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f107 0410 	add.w	r4, r7, #16
 8001362:	f107 0212 	add.w	r2, r7, #18
 8001366:	f107 030e 	add.w	r3, r7, #14
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	4623      	mov	r3, r4
 800136e:	f000 f8a1 	bl	80014b4 <unpackData>
        // Display the scaled values with two decimal places as floating points
        float x_float = x / 100.0f;
 8001372:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80014a0 <printData+0x27c>
 8001382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001386:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
        float y_float = y / 100.0f;
 800138a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001396:	eddf 6a42 	vldr	s13, [pc, #264]	; 80014a0 <printData+0x27c>
 800139a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139e:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
        float z_float = z / 100.0f;
 80013a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ae:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80014a0 <printData+0x27c>
 80013b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b6:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
//        sprintf(buffer2, "Data: %lu\r\n", packet->data);
        sprintf(buffer, "X: %.2f G\tY: %.2f G\tZ: %.2f G\r\n", x_float, y_float, z_float);
 80013ba:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80013be:	f7ff f8c3 	bl	8000548 <__aeabi_f2d>
 80013c2:	4680      	mov	r8, r0
 80013c4:	4689      	mov	r9, r1
 80013c6:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80013ca:	f7ff f8bd 	bl	8000548 <__aeabi_f2d>
 80013ce:	4604      	mov	r4, r0
 80013d0:	460d      	mov	r5, r1
 80013d2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80013d6:	f7ff f8b7 	bl	8000548 <__aeabi_f2d>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80013e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013e6:	e9cd 4500 	strd	r4, r5, [sp]
 80013ea:	4642      	mov	r2, r8
 80013ec:	464b      	mov	r3, r9
 80013ee:	492d      	ldr	r1, [pc, #180]	; (80014a4 <printData+0x280>)
 80013f0:	f003 fadc 	bl	80049ac <siprintf>
    }
//    HAL_UART_Transmit(&huart3, (uint8_t*)buffer2, strlen(buffer), 100);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80013f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe ff39 	bl	8000270 <strlen>
 80013fe:	4603      	mov	r3, r0
 8001400:	b29a      	uxth	r2, r3
 8001402:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001406:	2364      	movs	r3, #100	; 0x64
 8001408:	481e      	ldr	r0, [pc, #120]	; (8001484 <printData+0x260>)
 800140a:	f001 fda1 	bl	8002f50 <HAL_UART_Transmit>

    // CRC - Hexadecimal
    sprintf(buffer, "CRC: 0x%02X\r\n", packet->crc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7c1b      	ldrb	r3, [r3, #16]
 8001412:	461a      	mov	r2, r3
 8001414:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001418:	4923      	ldr	r1, [pc, #140]	; (80014a8 <printData+0x284>)
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fac6 	bl	80049ac <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8001420:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe ff23 	bl	8000270 <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	b29a      	uxth	r2, r3
 800142e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001432:	2364      	movs	r3, #100	; 0x64
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <printData+0x260>)
 8001436:	f001 fd8b 	bl	8002f50 <HAL_UART_Transmit>

    // End of Packet (EOP) - Hexadecimal
    sprintf(buffer, "EOP: 0x%02X\r\n", packet->eop);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7c5b      	ldrb	r3, [r3, #17]
 800143e:	461a      	mov	r2, r3
 8001440:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001444:	4919      	ldr	r1, [pc, #100]	; (80014ac <printData+0x288>)
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fab0 	bl	80049ac <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 800144c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ff0d 	bl	8000270 <strlen>
 8001456:	4603      	mov	r3, r0
 8001458:	b29a      	uxth	r2, r3
 800145a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800145e:	2364      	movs	r3, #100	; 0x64
 8001460:	4808      	ldr	r0, [pc, #32]	; (8001484 <printData+0x260>)
 8001462:	f001 fd75 	bl	8002f50 <HAL_UART_Transmit>

    // Separator
    HAL_UART_Transmit(&huart3, (uint8_t*)"--------\r\n", 10, 100);
 8001466:	2364      	movs	r3, #100	; 0x64
 8001468:	220a      	movs	r2, #10
 800146a:	4911      	ldr	r1, [pc, #68]	; (80014b0 <printData+0x28c>)
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <printData+0x260>)
 800146e:	f001 fd6f 	bl	8002f50 <HAL_UART_Transmit>
}
 8001472:	bf00      	nop
 8001474:	37f0      	adds	r7, #240	; 0xf0
 8001476:	46bd      	mov	sp, r7
 8001478:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800147c:	40590000 	.word	0x40590000
 8001480:	08006c80 	.word	0x08006c80
 8001484:	20000284 	.word	0x20000284
 8001488:	08006c90 	.word	0x08006c90
 800148c:	08006ca0 	.word	0x08006ca0
 8001490:	08006cb0 	.word	0x08006cb0
 8001494:	08006cc4 	.word	0x08006cc4
 8001498:	08006cd4 	.word	0x08006cd4
 800149c:	08006ce4 	.word	0x08006ce4
 80014a0:	42c80000 	.word	0x42c80000
 80014a4:	08006cf8 	.word	0x08006cf8
 80014a8:	08006d18 	.word	0x08006d18
 80014ac:	08006d28 	.word	0x08006d28
 80014b0:	08006d38 	.word	0x08006d38

080014b4 <unpackData>:

void unpackData(uint64_t packedData, int16_t* x, int16_t* y, int16_t* z) {
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
    *x = (int16_t)((packedData >> 32) & 0xFFFF);
 80014c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	000a      	movs	r2, r1
 80014d0:	2300      	movs	r3, #0
 80014d2:	b212      	sxth	r2, r2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((packedData >> 16) & 0xFFFF);
 80014d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	0c02      	lsrs	r2, r0, #16
 80014e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014ea:	0c0b      	lsrs	r3, r1, #16
 80014ec:	b212      	sxth	r2, r2
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(packedData & 0xFFFF);
 80014f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	801a      	strh	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150c:	f000 fcac 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001510:	f000 f828 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001514:	f000 f956 	bl	80017c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001518:	f000 f900 	bl	800171c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800151c:	f000 f928 	bl	8001770 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001520:	f000 f8d2 	bl	80016c8 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001524:	f000 f87c 	bl	8001620 <MX_UART4_Init>
  MX_UART5_Init();
 8001528:	f000 f8a4 	bl	8001674 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_data1, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	4907      	ldr	r1, [pc, #28]	; (800154c <main+0x44>)
 8001530:	4807      	ldr	r0, [pc, #28]	; (8001550 <main+0x48>)
 8001532:	f001 fd98 	bl	8003066 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, rx_data2, 1);
 8001536:	2201      	movs	r2, #1
 8001538:	4906      	ldr	r1, [pc, #24]	; (8001554 <main+0x4c>)
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <main+0x50>)
 800153c:	f001 fd93 	bl	8003066 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, rx_data3, 1);
 8001540:	2201      	movs	r2, #1
 8001542:	4906      	ldr	r1, [pc, #24]	; (800155c <main+0x54>)
 8001544:	4806      	ldr	r0, [pc, #24]	; (8001560 <main+0x58>)
 8001546:	f001 fd8e 	bl	8003066 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800154a:	e7fe      	b.n	800154a <main+0x42>
 800154c:	2000035c 	.word	0x2000035c
 8001550:	200001f4 	.word	0x200001f4
 8001554:	2000038c 	.word	0x2000038c
 8001558:	2000023c 	.word	0x2000023c
 800155c:	200003bc 	.word	0x200003bc
 8001560:	200002cc 	.word	0x200002cc

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	; 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	2230      	movs	r2, #48	; 0x30
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fa7d 	bl	8004a72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <SystemClock_Config+0xb4>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a21      	ldr	r2, [pc, #132]	; (8001618 <SystemClock_Config+0xb4>)
 8001592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <SystemClock_Config+0xb4>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <SystemClock_Config+0xb8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1b      	ldr	r2, [pc, #108]	; (800161c <SystemClock_Config+0xb8>)
 80015ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <SystemClock_Config+0xb8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c0:	2302      	movs	r3, #2
 80015c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c4:	2301      	movs	r3, #1
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c8:	2310      	movs	r3, #16
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 f813 	bl	8002600 <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015e0:	f000 f950 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 fa76 	bl	8002af0 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800160a:	f000 f93b 	bl	8001884 <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	3750      	adds	r7, #80	; 0x50
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_UART4_Init+0x4c>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <MX_UART4_Init+0x50>)
 8001628:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <MX_UART4_Init+0x4c>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_UART4_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_UART4_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_UART4_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_UART4_Init+0x4c>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_UART4_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_UART4_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_UART4_Init+0x4c>)
 8001658:	f001 fc2a 	bl	8002eb0 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001662:	f000 f90f 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200002cc 	.word	0x200002cc
 8001670:	40004c00 	.word	0x40004c00

08001674 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_UART5_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_UART5_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_UART5_Init+0x4c>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_UART5_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_UART5_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_UART5_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_UART5_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_UART5_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_UART5_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_UART5_Init+0x4c>)
 80016ac:	f001 fc00 	bl	8002eb0 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80016b6:	f000 f8e5 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000314 	.word	0x20000314
 80016c4:	40005000 	.word	0x40005000

080016c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <MX_USART1_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 8001700:	f001 fbd6 	bl	8002eb0 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800170a:	f000 f8bb 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200001f4 	.word	0x200001f4
 8001718:	40011000 	.word	0x40011000

0800171c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <MX_USART2_UART_Init+0x50>)
 8001724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001754:	f001 fbac 	bl	8002eb0 <HAL_UART_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800175e:	f000 f891 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000023c 	.word	0x2000023c
 800176c:	40004400 	.word	0x40004400

08001770 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_USART3_UART_Init+0x50>)
 8001778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a8:	f001 fb82 	bl	8002eb0 <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017b2:	f000 f867 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000284 	.word	0x20000284
 80017c0:	40004800 	.word	0x40004800

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b27      	ldr	r3, [pc, #156]	; (800187c <MX_GPIO_Init+0xb8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a26      	ldr	r2, [pc, #152]	; (800187c <MX_GPIO_Init+0xb8>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <MX_GPIO_Init+0xb8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <MX_GPIO_Init+0xb8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a1f      	ldr	r2, [pc, #124]	; (800187c <MX_GPIO_Init+0xb8>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_GPIO_Init+0xb8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_GPIO_Init+0xb8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <MX_GPIO_Init+0xb8>)
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_GPIO_Init+0xb8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_GPIO_Init+0xb8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a11      	ldr	r2, [pc, #68]	; (800187c <MX_GPIO_Init+0xb8>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_GPIO_Init+0xb8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001850:	480b      	ldr	r0, [pc, #44]	; (8001880 <MX_GPIO_Init+0xbc>)
 8001852:	f000 febb 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD15 */
  GPIO_InitStruct.Pin =  GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001856:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_GPIO_Init+0xbc>)
 8001870:	f000 fd10 	bl	8002294 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40020c00 	.word	0x40020c00

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_MspInit+0x4c>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x4c>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b092      	sub	sp, #72	; 0x48
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4aa1      	ldr	r2, [pc, #644]	; (8001b84 <HAL_UART_MspInit+0x2a4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d134      	bne.n	800196c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
 8001906:	4ba0      	ldr	r3, [pc, #640]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a9f      	ldr	r2, [pc, #636]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 800190c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b9d      	ldr	r3, [pc, #628]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
 800191c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001922:	4b99      	ldr	r3, [pc, #612]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a98      	ldr	r2, [pc, #608]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b96      	ldr	r3, [pc, #600]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800193a:	2303      	movs	r3, #3
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800194a:	2308      	movs	r3, #8
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001952:	4619      	mov	r1, r3
 8001954:	488d      	ldr	r0, [pc, #564]	; (8001b8c <HAL_UART_MspInit+0x2ac>)
 8001956:	f000 fc9d 	bl	8002294 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2034      	movs	r0, #52	; 0x34
 8001960:	f000 fbcf 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001964:	2034      	movs	r0, #52	; 0x34
 8001966:	f000 fbe8 	bl	800213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800196a:	e107      	b.n	8001b7c <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==UART5)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a87      	ldr	r2, [pc, #540]	; (8001b90 <HAL_UART_MspInit+0x2b0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d153      	bne.n	8001a1e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
 800197a:	4b83      	ldr	r3, [pc, #524]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a82      	ldr	r2, [pc, #520]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b80      	ldr	r3, [pc, #512]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	4b7c      	ldr	r3, [pc, #496]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a7b      	ldr	r2, [pc, #492]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a74      	ldr	r2, [pc, #464]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 80019b8:	f043 0308 	orr.w	r3, r3, #8
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b72      	ldr	r3, [pc, #456]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	623b      	str	r3, [r7, #32]
 80019c8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019dc:	2308      	movs	r3, #8
 80019de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019e4:	4619      	mov	r1, r3
 80019e6:	486b      	ldr	r0, [pc, #428]	; (8001b94 <HAL_UART_MspInit+0x2b4>)
 80019e8:	f000 fc54 	bl	8002294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019ec:	2304      	movs	r3, #4
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019fc:	2308      	movs	r3, #8
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a04:	4619      	mov	r1, r3
 8001a06:	4864      	ldr	r0, [pc, #400]	; (8001b98 <HAL_UART_MspInit+0x2b8>)
 8001a08:	f000 fc44 	bl	8002294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2035      	movs	r0, #53	; 0x35
 8001a12:	f000 fb76 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001a16:	2035      	movs	r0, #53	; 0x35
 8001a18:	f000 fb8f 	bl	800213a <HAL_NVIC_EnableIRQ>
}
 8001a1c:	e0ae      	b.n	8001b7c <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a5e      	ldr	r2, [pc, #376]	; (8001b9c <HAL_UART_MspInit+0x2bc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d135      	bne.n	8001a94 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	4a55      	ldr	r2, [pc, #340]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6453      	str	r3, [r2, #68]	; 0x44
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a4e      	ldr	r2, [pc, #312]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6313      	str	r3, [r2, #48]	; 0x30
 8001a54:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a72:	2307      	movs	r3, #7
 8001a74:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4843      	ldr	r0, [pc, #268]	; (8001b8c <HAL_UART_MspInit+0x2ac>)
 8001a7e:	f000 fc09 	bl	8002294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2025      	movs	r0, #37	; 0x25
 8001a88:	f000 fb3b 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a8c:	2025      	movs	r0, #37	; 0x25
 8001a8e:	f000 fb54 	bl	800213a <HAL_NVIC_EnableIRQ>
}
 8001a92:	e073      	b.n	8001b7c <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a41      	ldr	r2, [pc, #260]	; (8001ba0 <HAL_UART_MspInit+0x2c0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d134      	bne.n	8001b08 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a38      	ldr	r2, [pc, #224]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aee:	4619      	mov	r1, r3
 8001af0:	4826      	ldr	r0, [pc, #152]	; (8001b8c <HAL_UART_MspInit+0x2ac>)
 8001af2:	f000 fbcf 	bl	8002294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2026      	movs	r0, #38	; 0x26
 8001afc:	f000 fb01 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b00:	2026      	movs	r0, #38	; 0x26
 8001b02:	f000 fb1a 	bl	800213a <HAL_NVIC_EnableIRQ>
}
 8001b06:	e039      	b.n	8001b7c <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a25      	ldr	r2, [pc, #148]	; (8001ba4 <HAL_UART_MspInit+0x2c4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d134      	bne.n	8001b7c <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_UART_MspInit+0x2a8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b64:	4619      	mov	r1, r3
 8001b66:	4810      	ldr	r0, [pc, #64]	; (8001ba8 <HAL_UART_MspInit+0x2c8>)
 8001b68:	f000 fb94 	bl	8002294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2027      	movs	r0, #39	; 0x27
 8001b72:	f000 fac6 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b76:	2027      	movs	r0, #39	; 0x27
 8001b78:	f000 fadf 	bl	800213a <HAL_NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3748      	adds	r7, #72	; 0x48
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40004c00 	.word	0x40004c00
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40005000 	.word	0x40005000
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40011000 	.word	0x40011000
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	40004800 	.word	0x40004800
 8001ba8:	40020400 	.word	0x40020400

08001bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <NMI_Handler+0x4>

08001bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <MemManage_Handler+0x4>

08001bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf8:	f000 f988 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <USART1_IRQHandler+0x10>)
 8001c06:	f001 fa53 	bl	80030b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200001f4 	.word	0x200001f4

08001c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <USART2_IRQHandler+0x10>)
 8001c1a:	f001 fa49 	bl	80030b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000023c 	.word	0x2000023c

08001c28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <USART3_IRQHandler+0x10>)
 8001c2e:	f001 fa3f 	bl	80030b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000284 	.word	0x20000284

08001c3c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <UART4_IRQHandler+0x10>)
 8001c42:	f001 fa35 	bl	80030b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200002cc 	.word	0x200002cc

08001c50 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <UART5_IRQHandler+0x10>)
 8001c56:	f001 fa2b 	bl	80030b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000314 	.word	0x20000314

08001c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_kill>:

int _kill(int pid, int sig)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c7e:	f002 ff4b 	bl	8004b18 <__errno>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2216      	movs	r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
  return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_exit>:

void _exit (int status)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffe7 	bl	8001c74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ca6:	e7fe      	b.n	8001ca6 <_exit+0x12>

08001ca8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e00a      	b.n	8001cd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cba:	f3af 8000 	nop.w
 8001cbe:	4601      	mov	r1, r0
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	60ba      	str	r2, [r7, #8]
 8001cc6:	b2ca      	uxtb	r2, r1
 8001cc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbf0      	blt.n	8001cba <_read+0x12>
  }

  return len;
 8001cd8:	687b      	ldr	r3, [r7, #4]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e009      	b.n	8001d08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	60ba      	str	r2, [r7, #8]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf1      	blt.n	8001cf4 <_write+0x12>
  }
  return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_close>:

int _close(int file)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d42:	605a      	str	r2, [r3, #4]
  return 0;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_isatty>:

int _isatty(int file)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f002 feb0 	bl	8004b18 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20020000 	.word	0x20020000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	200003ec 	.word	0x200003ec
 8001dec:	20000540 	.word	0x20000540

08001df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e18:	f7ff ffea 	bl	8001df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e1e:	490d      	ldr	r1, [pc, #52]	; (8001e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e34:	4c0a      	ldr	r4, [pc, #40]	; (8001e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e42:	f002 fe6f 	bl	8004b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7ff fb5f 	bl	8001508 <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e58:	080070dc 	.word	0x080070dc
  ldr r2, =_sbss
 8001e5c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e60:	20000540 	.word	0x20000540

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_Init+0x40>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_Init+0x40>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x40>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 f92b 	bl	80020ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	200f      	movs	r0, #15
 8001e98:	f000 f808 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fcf8 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f943 	bl	8002156 <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f000 f90b 	bl	8002102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000008 	.word	0x20000008
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	200003f0 	.word	0x200003f0

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	200003f0 	.word	0x200003f0

08001f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7e:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	60d3      	str	r3, [r2, #12]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <__NVIC_GetPriorityGrouping+0x18>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 0307 	and.w	r3, r3, #7
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	db0b      	blt.n	8001fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	f003 021f 	and.w	r2, r3, #31
 8001fc8:	4907      	ldr	r1, [pc, #28]	; (8001fe8 <__NVIC_EnableIRQ+0x38>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000e100 	.word	0xe000e100

08001fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	db0a      	blt.n	8002016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	490c      	ldr	r1, [pc, #48]	; (8002038 <__NVIC_SetPriority+0x4c>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	0112      	lsls	r2, r2, #4
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	440b      	add	r3, r1
 8002010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002014:	e00a      	b.n	800202c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4908      	ldr	r1, [pc, #32]	; (800203c <__NVIC_SetPriority+0x50>)
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	3b04      	subs	r3, #4
 8002024:	0112      	lsls	r2, r2, #4
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	440b      	add	r3, r1
 800202a:	761a      	strb	r2, [r3, #24]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000e100 	.word	0xe000e100
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f1c3 0307 	rsb	r3, r3, #7
 800205a:	2b04      	cmp	r3, #4
 800205c:	bf28      	it	cs
 800205e:	2304      	movcs	r3, #4
 8002060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3304      	adds	r3, #4
 8002066:	2b06      	cmp	r3, #6
 8002068:	d902      	bls.n	8002070 <NVIC_EncodePriority+0x30>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3b03      	subs	r3, #3
 800206e:	e000      	b.n	8002072 <NVIC_EncodePriority+0x32>
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	401a      	ands	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002088:	f04f 31ff 	mov.w	r1, #4294967295
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	43d9      	mvns	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	4313      	orrs	r3, r2
         );
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b8:	d301      	bcc.n	80020be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00f      	b.n	80020de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <SysTick_Config+0x40>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c6:	210f      	movs	r1, #15
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f7ff ff8e 	bl	8001fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SysTick_Config+0x40>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <SysTick_Config+0x40>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff29 	bl	8001f4c <__NVIC_SetPriorityGrouping>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002114:	f7ff ff3e 	bl	8001f94 <__NVIC_GetPriorityGrouping>
 8002118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	6978      	ldr	r0, [r7, #20]
 8002120:	f7ff ff8e 	bl	8002040 <NVIC_EncodePriority>
 8002124:	4602      	mov	r2, r0
 8002126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff5d 	bl	8001fec <__NVIC_SetPriority>
}
 8002132:	bf00      	nop
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff31 	bl	8001fb0 <__NVIC_EnableIRQ>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ffa2 	bl	80020a8 <SysTick_Config>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff feda 	bl	8001f34 <HAL_GetTick>
 8002180:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d008      	beq.n	80021a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2280      	movs	r2, #128	; 0x80
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e052      	b.n	8002246 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0216 	bic.w	r2, r2, #22
 80021ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d103      	bne.n	80021d0 <HAL_DMA_Abort+0x62>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0208 	bic.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f0:	e013      	b.n	800221a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f2:	f7ff fe9f 	bl	8001f34 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d90c      	bls.n	800221a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e015      	b.n	8002246 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e4      	bne.n	80021f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	223f      	movs	r2, #63	; 0x3f
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d004      	beq.n	800226c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e00c      	b.n	8002286 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2205      	movs	r2, #5
 8002270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	e16b      	b.n	8002588 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	f040 815a 	bne.w	8002582 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d005      	beq.n	80022e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d130      	bne.n	8002348 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 0201 	and.w	r2, r3, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b03      	cmp	r3, #3
 8002352:	d017      	beq.n	8002384 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d123      	bne.n	80023d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	08da      	lsrs	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3208      	adds	r2, #8
 80023d2:	69b9      	ldr	r1, [r7, #24]
 80023d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0203 	and.w	r2, r3, #3
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80b4 	beq.w	8002582 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b60      	ldr	r3, [pc, #384]	; (80025a0 <HAL_GPIO_Init+0x30c>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a5f      	ldr	r2, [pc, #380]	; (80025a0 <HAL_GPIO_Init+0x30c>)
 8002424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <HAL_GPIO_Init+0x30c>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002436:	4a5b      	ldr	r2, [pc, #364]	; (80025a4 <HAL_GPIO_Init+0x310>)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_GPIO_Init+0x314>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d02b      	beq.n	80024ba <HAL_GPIO_Init+0x226>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a51      	ldr	r2, [pc, #324]	; (80025ac <HAL_GPIO_Init+0x318>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x222>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a50      	ldr	r2, [pc, #320]	; (80025b0 <HAL_GPIO_Init+0x31c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x21e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4f      	ldr	r2, [pc, #316]	; (80025b4 <HAL_GPIO_Init+0x320>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x21a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4e      	ldr	r2, [pc, #312]	; (80025b8 <HAL_GPIO_Init+0x324>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x216>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4d      	ldr	r2, [pc, #308]	; (80025bc <HAL_GPIO_Init+0x328>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x212>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4c      	ldr	r2, [pc, #304]	; (80025c0 <HAL_GPIO_Init+0x32c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x20e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <HAL_GPIO_Init+0x330>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x20a>
 800249a:	2307      	movs	r3, #7
 800249c:	e00e      	b.n	80024bc <HAL_GPIO_Init+0x228>
 800249e:	2308      	movs	r3, #8
 80024a0:	e00c      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024a2:	2306      	movs	r3, #6
 80024a4:	e00a      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024a6:	2305      	movs	r3, #5
 80024a8:	e008      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024aa:	2304      	movs	r3, #4
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e004      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e002      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024ba:	2300      	movs	r3, #0
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f002 0203 	and.w	r2, r2, #3
 80024c2:	0092      	lsls	r2, r2, #2
 80024c4:	4093      	lsls	r3, r2
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024cc:	4935      	ldr	r1, [pc, #212]	; (80025a4 <HAL_GPIO_Init+0x310>)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3302      	adds	r3, #2
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <HAL_GPIO_Init+0x334>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fe:	4a32      	ldr	r2, [pc, #200]	; (80025c8 <HAL_GPIO_Init+0x334>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002504:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_GPIO_Init+0x334>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002528:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_GPIO_Init+0x334>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <HAL_GPIO_Init+0x334>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_GPIO_Init+0x334>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_GPIO_Init+0x334>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_GPIO_Init+0x334>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b0f      	cmp	r3, #15
 800258c:	f67f ae90 	bls.w	80022b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40013800 	.word	0x40013800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400
 80025b0:	40020800 	.word	0x40020800
 80025b4:	40020c00 	.word	0x40020c00
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40021400 	.word	0x40021400
 80025c0:	40021800 	.word	0x40021800
 80025c4:	40021c00 	.word	0x40021c00
 80025c8:	40013c00 	.word	0x40013c00

080025cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
 80025d8:	4613      	mov	r3, r2
 80025da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025dc:	787b      	ldrb	r3, [r7, #1]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e8:	e003      	b.n	80025f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	619a      	str	r2, [r3, #24]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e267      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d075      	beq.n	800270a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261e:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b04      	cmp	r3, #4
 8002628:	d00c      	beq.n	8002644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262a:	4b85      	ldr	r3, [pc, #532]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002632:	2b08      	cmp	r3, #8
 8002634:	d112      	bne.n	800265c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4b82      	ldr	r3, [pc, #520]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002642:	d10b      	bne.n	800265c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	4b7e      	ldr	r3, [pc, #504]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d05b      	beq.n	8002708 <HAL_RCC_OscConfig+0x108>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d157      	bne.n	8002708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e242      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x74>
 8002666:	4b76      	ldr	r3, [pc, #472]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a75      	ldr	r2, [pc, #468]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0xb0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x98>
 800267e:	4b70      	ldr	r3, [pc, #448]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6f      	ldr	r2, [pc, #444]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6c      	ldr	r2, [pc, #432]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xb0>
 8002698:	4b69      	ldr	r3, [pc, #420]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a68      	ldr	r2, [pc, #416]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b66      	ldr	r3, [pc, #408]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a65      	ldr	r2, [pc, #404]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fc3c 	bl	8001f34 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff fc38 	bl	8001f34 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e207      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xc0>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fc28 	bl	8001f34 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff fc24 	bl	8001f34 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e1f3      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	4b51      	ldr	r3, [pc, #324]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0xe8>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d063      	beq.n	80027de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002716:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272a:	2b08      	cmp	r3, #8
 800272c:	d11c      	bne.n	8002768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b44      	ldr	r3, [pc, #272]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d116      	bne.n	8002768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x152>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1c7      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4937      	ldr	r1, [pc, #220]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	e03a      	b.n	80027de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002770:	4b34      	ldr	r3, [pc, #208]	; (8002844 <HAL_RCC_OscConfig+0x244>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7ff fbdd 	bl	8001f34 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277e:	f7ff fbd9 	bl	8001f34 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1a8      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4925      	ldr	r1, [pc, #148]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_OscConfig+0x244>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7ff fbbc 	bl	8001f34 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c0:	f7ff fbb8 	bl	8001f34 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e187      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d036      	beq.n	8002858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_RCC_OscConfig+0x248>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7ff fb9c 	bl	8001f34 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff fb98 	bl	8001f34 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e167      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_OscConfig+0x240>)
 8002814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x200>
 800281e:	e01b      	b.n	8002858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_OscConfig+0x248>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7ff fb85 	bl	8001f34 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	e00e      	b.n	800284c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282e:	f7ff fb81 	bl	8001f34 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d907      	bls.n	800284c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e150      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
 8002840:	40023800 	.word	0x40023800
 8002844:	42470000 	.word	0x42470000
 8002848:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	4b88      	ldr	r3, [pc, #544]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ea      	bne.n	800282e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8097 	beq.w	8002994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286a:	4b81      	ldr	r3, [pc, #516]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a7c      	ldr	r2, [pc, #496]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b7a      	ldr	r3, [pc, #488]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b77      	ldr	r3, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x474>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d118      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a2:	4b74      	ldr	r3, [pc, #464]	; (8002a74 <HAL_RCC_OscConfig+0x474>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a73      	ldr	r2, [pc, #460]	; (8002a74 <HAL_RCC_OscConfig+0x474>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ae:	f7ff fb41 	bl	8001f34 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7ff fb3d 	bl	8001f34 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e10c      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <HAL_RCC_OscConfig+0x474>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x2ea>
 80028dc:	4b64      	ldr	r3, [pc, #400]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a63      	ldr	r2, [pc, #396]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	e01c      	b.n	8002924 <HAL_RCC_OscConfig+0x324>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x30c>
 80028f2:	4b5f      	ldr	r3, [pc, #380]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	4a5e      	ldr	r2, [pc, #376]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70
 80028fe:	4b5c      	ldr	r3, [pc, #368]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a5b      	ldr	r2, [pc, #364]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0x324>
 800290c:	4b58      	ldr	r3, [pc, #352]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
 8002918:	4b55      	ldr	r3, [pc, #340]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a54      	ldr	r2, [pc, #336]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 0304 	bic.w	r3, r3, #4
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7ff fb02 	bl	8001f34 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7ff fafe 	bl	8001f34 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0cb      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	4b49      	ldr	r3, [pc, #292]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ee      	beq.n	8002934 <HAL_RCC_OscConfig+0x334>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7ff faec 	bl	8001f34 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7ff fae8 	bl	8001f34 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0b5      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ee      	bne.n	8002960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 800298e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002992:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a1 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d05c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d141      	bne.n	8002a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_RCC_OscConfig+0x478>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7ff fabc 	bl	8001f34 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c0:	f7ff fab8 	bl	8001f34 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e087      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	019b      	lsls	r3, r3, #6
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	3b01      	subs	r3, #1
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	491b      	ldr	r1, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCC_OscConfig+0x478>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7ff fa91 	bl	8001f34 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a16:	f7ff fa8d 	bl	8001f34 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e05c      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x416>
 8002a34:	e054      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <HAL_RCC_OscConfig+0x478>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7ff fa7a 	bl	8001f34 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7ff fa76 	bl	8001f34 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e045      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_RCC_OscConfig+0x470>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x444>
 8002a62:	e03d      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e038      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40007000 	.word	0x40007000
 8002a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x4ec>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d028      	beq.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d121      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d11a      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d111      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800

08002af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0cc      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	4b68      	ldr	r3, [pc, #416]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d90c      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b65      	ldr	r3, [pc, #404]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0b8      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b44:	4b59      	ldr	r3, [pc, #356]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a58      	ldr	r2, [pc, #352]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b5c:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a52      	ldr	r2, [pc, #328]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b50      	ldr	r3, [pc, #320]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	494d      	ldr	r1, [pc, #308]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d044      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	4b47      	ldr	r3, [pc, #284]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d119      	bne.n	8002bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e07f      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bae:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06f      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e067      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bce:	4b37      	ldr	r3, [pc, #220]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f023 0203 	bic.w	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4934      	ldr	r1, [pc, #208]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be0:	f7ff f9a8 	bl	8001f34 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be8:	f7ff f9a4 	bl	8001f34 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e04f      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 020c 	and.w	r2, r3, #12
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d1eb      	bne.n	8002be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c10:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d20c      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e032      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4916      	ldr	r1, [pc, #88]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	490e      	ldr	r1, [pc, #56]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c76:	f000 f821 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	490a      	ldr	r1, [pc, #40]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	5ccb      	ldrb	r3, [r1, r3]
 8002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f908 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023c00 	.word	0x40023c00
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	08006d44 	.word	0x08006d44
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	20000004 	.word	0x20000004

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc0:	b090      	sub	sp, #64	; 0x40
 8002cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc8:	2300      	movs	r3, #0
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ccc:	2300      	movs	r3, #0
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd4:	4b59      	ldr	r3, [pc, #356]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d00d      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x40>
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	f200 80a1 	bhi.w	8002e28 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cee:	e09b      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cf4:	e09b      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf6:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cfa:	e098      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d06:	4b4d      	ldr	r3, [pc, #308]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d028      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d12:	4b4a      	ldr	r3, [pc, #296]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	2200      	movs	r2, #0
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d24:	2100      	movs	r1, #0
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d28:	fb03 f201 	mul.w	r2, r3, r1
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	fb00 f303 	mul.w	r3, r0, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	4a43      	ldr	r2, [pc, #268]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d36:	fba0 1202 	umull	r1, r2, r0, r2
 8002d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d42:	4413      	add	r3, r2
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d48:	2200      	movs	r2, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	61fa      	str	r2, [r7, #28]
 8002d4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d56:	f7fd ff27 	bl	8000ba8 <__aeabi_uldivmod>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4613      	mov	r3, r2
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d62:	e053      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d64:	4b35      	ldr	r3, [pc, #212]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	617a      	str	r2, [r7, #20]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d76:	f04f 0b00 	mov.w	fp, #0
 8002d7a:	4652      	mov	r2, sl
 8002d7c:	465b      	mov	r3, fp
 8002d7e:	f04f 0000 	mov.w	r0, #0
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	0159      	lsls	r1, r3, #5
 8002d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d8c:	0150      	lsls	r0, r2, #5
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	ebb2 080a 	subs.w	r8, r2, sl
 8002d96:	eb63 090b 	sbc.w	r9, r3, fp
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002da6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002daa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dae:	ebb2 0408 	subs.w	r4, r2, r8
 8002db2:	eb63 0509 	sbc.w	r5, r3, r9
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	00eb      	lsls	r3, r5, #3
 8002dc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc4:	00e2      	lsls	r2, r4, #3
 8002dc6:	4614      	mov	r4, r2
 8002dc8:	461d      	mov	r5, r3
 8002dca:	eb14 030a 	adds.w	r3, r4, sl
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	eb45 030b 	adc.w	r3, r5, fp
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002de2:	4629      	mov	r1, r5
 8002de4:	028b      	lsls	r3, r1, #10
 8002de6:	4621      	mov	r1, r4
 8002de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dec:	4621      	mov	r1, r4
 8002dee:	028a      	lsls	r2, r1, #10
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	2200      	movs	r2, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	60fa      	str	r2, [r7, #12]
 8002dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e00:	f7fd fed2 	bl	8000ba8 <__aeabi_uldivmod>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4613      	mov	r3, r2
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	3301      	adds	r3, #1
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e26:	e002      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3740      	adds	r7, #64	; 0x40
 8002e34:	46bd      	mov	sp, r7
 8002e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	00f42400 	.word	0x00f42400
 8002e44:	017d7840 	.word	0x017d7840

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000000 	.word	0x20000000

08002e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e64:	f7ff fff0 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0a9b      	lsrs	r3, r3, #10
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4903      	ldr	r1, [pc, #12]	; (8002e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08006d54 	.word	0x08006d54

08002e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e8c:	f7ff ffdc 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0b5b      	lsrs	r3, r3, #13
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4903      	ldr	r1, [pc, #12]	; (8002eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	08006d54 	.word	0x08006d54

08002eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e042      	b.n	8002f48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fd02 	bl	80018e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fdbd 	bl	8003a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d175      	bne.n	800305c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_UART_Transmit+0x2c>
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e06e      	b.n	800305e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2221      	movs	r2, #33	; 0x21
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f8e:	f7fe ffd1 	bl	8001f34 <HAL_GetTick>
 8002f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa8:	d108      	bne.n	8002fbc <HAL_UART_Transmit+0x6c>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d104      	bne.n	8002fbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	e003      	b.n	8002fc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fc4:	e02e      	b.n	8003024 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fb1f 	bl	8003614 <UART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e03a      	b.n	800305e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ffc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	3302      	adds	r3, #2
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	e007      	b.n	8003016 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3301      	adds	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1cb      	bne.n	8002fc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 faeb 	bl	8003614 <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e006      	b.n	800305e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e000      	b.n	800305e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	4613      	mov	r3, r2
 8003072:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b20      	cmp	r3, #32
 800307e:	d112      	bne.n	80030a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_UART_Receive_IT+0x26>
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e00b      	b.n	80030a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	461a      	mov	r2, r3
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fb12 	bl	80036c6 <UART_Start_Receive_IT>
 80030a2:	4603      	mov	r3, r0
 80030a4:	e000      	b.n	80030a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b0ba      	sub	sp, #232	; 0xe8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_UART_IRQHandler+0x66>
 8003102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fbf2 	bl	80038f8 <UART_Receive_IT>
      return;
 8003114:	e25b      	b.n	80035ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80de 	beq.w	80032dc <HAL_UART_IRQHandler+0x22c>
 8003120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d106      	bne.n	800313a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800312c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003130:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80d1 	beq.w	80032dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800313a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_UART_IRQHandler+0xae>
 8003146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f043 0201 	orr.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800315e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_UART_IRQHandler+0xd2>
 800316a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f043 0202 	orr.w	r2, r3, #2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_UART_IRQHandler+0xf6>
 800318e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	f043 0204 	orr.w	r2, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d011      	beq.n	80031d6 <HAL_UART_IRQHandler+0x126>
 80031b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f043 0208 	orr.w	r2, r3, #8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 81f2 	beq.w	80035c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_UART_IRQHandler+0x14e>
 80031ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fb7d 	bl	80038f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003208:	2b40      	cmp	r3, #64	; 0x40
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <HAL_UART_IRQHandler+0x17a>
 8003222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d04f      	beq.n	80032ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fa85 	bl	800373a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	d141      	bne.n	80032c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3314      	adds	r3, #20
 8003244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800325c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3314      	adds	r3, #20
 8003266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800326a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800326e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1d9      	bne.n	800323e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d013      	beq.n	80032ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	4a7e      	ldr	r2, [pc, #504]	; (8003490 <HAL_UART_IRQHandler+0x3e0>)
 8003298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe ffd5 	bl	800224e <HAL_DMA_Abort_IT>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032b4:	4610      	mov	r0, r2
 80032b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e00e      	b.n	80032d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f994 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e00a      	b.n	80032d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f990 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e006      	b.n	80032d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f98c 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80032d6:	e175      	b.n	80035c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	bf00      	nop
    return;
 80032da:	e173      	b.n	80035c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 814f 	bne.w	8003584 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8148 	beq.w	8003584 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8141 	beq.w	8003584 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	f040 80b6 	bne.w	8003494 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8145 	beq.w	80035c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003346:	429a      	cmp	r2, r3
 8003348:	f080 813e 	bcs.w	80035c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003352:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335e:	f000 8088 	beq.w	8003472 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800337c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	330c      	adds	r3, #12
 800338a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800338e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800339a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1d9      	bne.n	8003362 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3314      	adds	r3, #20
 80033b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3314      	adds	r3, #20
 80033ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e1      	bne.n	80033ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3314      	adds	r3, #20
 80033f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f4:	e853 3f00 	ldrex	r3, [r3]
 80033f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3314      	adds	r3, #20
 800340a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800340e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800341c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e3      	bne.n	80033ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003442:	f023 0310 	bic.w	r3, r3, #16
 8003446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003454:	65ba      	str	r2, [r7, #88]	; 0x58
 8003456:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800345a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e3      	bne.n	8003430 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe fe7e 	bl	800216e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003480:	b29b      	uxth	r3, r3
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	b29b      	uxth	r3, r3
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8b7 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800348e:	e09b      	b.n	80035c8 <HAL_UART_IRQHandler+0x518>
 8003490:	08003801 	.word	0x08003801
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800349c:	b29b      	uxth	r3, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 808e 	beq.w	80035cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8089 	beq.w	80035cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034de:	647a      	str	r2, [r7, #68]	; 0x44
 80034e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e3      	bne.n	80034ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3314      	adds	r3, #20
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	623b      	str	r3, [r7, #32]
   return(result);
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003516:	633a      	str	r2, [r7, #48]	; 0x30
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800351c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e3      	bne.n	80034f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	60fb      	str	r3, [r7, #12]
   return(result);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0310 	bic.w	r3, r3, #16
 800354e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800355c:	61fa      	str	r2, [r7, #28]
 800355e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	69b9      	ldr	r1, [r7, #24]
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	617b      	str	r3, [r7, #20]
   return(result);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e3      	bne.n	8003538 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800357a:	4619      	mov	r1, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f83d 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003582:	e023      	b.n	80035cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <HAL_UART_IRQHandler+0x4f4>
 8003590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f943 	bl	8003828 <UART_Transmit_IT>
    return;
 80035a2:	e014      	b.n	80035ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <HAL_UART_IRQHandler+0x51e>
 80035b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f983 	bl	80038c8 <UART_EndTransmit_IT>
    return;
 80035c2:	e004      	b.n	80035ce <HAL_UART_IRQHandler+0x51e>
    return;
 80035c4:	bf00      	nop
 80035c6:	e002      	b.n	80035ce <HAL_UART_IRQHandler+0x51e>
      return;
 80035c8:	bf00      	nop
 80035ca:	e000      	b.n	80035ce <HAL_UART_IRQHandler+0x51e>
      return;
 80035cc:	bf00      	nop
  }
}
 80035ce:	37e8      	adds	r7, #232	; 0xe8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003624:	e03b      	b.n	800369e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d037      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fe fc81 	bl	8001f34 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <UART_WaitOnFlagUntilTimeout+0x30>
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e03a      	b.n	80036be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d023      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d020      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0x8a>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d01d      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b08      	cmp	r3, #8
 800366e:	d116      	bne.n	800369e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f857 	bl	800373a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2208      	movs	r2, #8
 8003690:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e00f      	b.n	80036be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d0b4      	beq.n	8003626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b085      	sub	sp, #20
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	4613      	mov	r3, r2
 80036d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	88fa      	ldrh	r2, [r7, #6]
 80036e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2222      	movs	r2, #34	; 0x22
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0220 	orr.w	r2, r2, #32
 800372a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800373a:	b480      	push	{r7}
 800373c:	b095      	sub	sp, #84	; 0x54
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003758:	64fb      	str	r3, [r7, #76]	; 0x4c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	330c      	adds	r3, #12
 8003760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003762:	643a      	str	r2, [r7, #64]	; 0x40
 8003764:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003768:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e5      	bne.n	8003742 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	61fb      	str	r3, [r7, #28]
   return(result);
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	64bb      	str	r3, [r7, #72]	; 0x48
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3314      	adds	r3, #20
 8003794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d119      	bne.n	80037e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	330c      	adds	r3, #12
 80037b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f023 0310 	bic.w	r3, r3, #16
 80037c8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d2:	61ba      	str	r2, [r7, #24]
 80037d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6979      	ldr	r1, [r7, #20]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	613b      	str	r3, [r7, #16]
   return(result);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e5      	bne.n	80037b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037f4:	bf00      	nop
 80037f6:	3754      	adds	r7, #84	; 0x54
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7ff fee4 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b21      	cmp	r3, #33	; 0x21
 800383a:	d13e      	bne.n	80038ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003844:	d114      	bne.n	8003870 <UART_Transmit_IT+0x48>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d110      	bne.n	8003870 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003862:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	1c9a      	adds	r2, r3, #2
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	621a      	str	r2, [r3, #32]
 800386e:	e008      	b.n	8003882 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	1c59      	adds	r1, r3, #1
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6211      	str	r1, [r2, #32]
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29b      	uxth	r3, r3
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	4619      	mov	r1, r3
 8003890:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e000      	b.n	80038bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fe73 	bl	80035d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	; 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b22      	cmp	r3, #34	; 0x22
 800390a:	f040 80ae 	bne.w	8003a6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003916:	d117      	bne.n	8003948 <UART_Receive_IT+0x50>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d113      	bne.n	8003948 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	b29b      	uxth	r3, r3
 8003932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003936:	b29a      	uxth	r2, r3
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	1c9a      	adds	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	629a      	str	r2, [r3, #40]	; 0x28
 8003946:	e026      	b.n	8003996 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	d007      	beq.n	800396c <UART_Receive_IT+0x74>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <UART_Receive_IT+0x82>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e008      	b.n	800398c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003986:	b2da      	uxtb	r2, r3
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29b      	uxth	r3, r3
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4619      	mov	r1, r3
 80039a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d15d      	bne.n	8003a66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0220 	bic.w	r2, r2, #32
 80039b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d135      	bne.n	8003a5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	613b      	str	r3, [r7, #16]
   return(result);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f023 0310 	bic.w	r3, r3, #16
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	623a      	str	r2, [r7, #32]
 8003a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	69f9      	ldr	r1, [r7, #28]
 8003a1c:	6a3a      	ldr	r2, [r7, #32]
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e5      	bne.n	80039f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d10a      	bne.n	8003a4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fdd1 	bl	80035fc <HAL_UARTEx_RxEventCallback>
 8003a5a:	e002      	b.n	8003a62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fd fa21 	bl	8000ea4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e002      	b.n	8003a6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3730      	adds	r7, #48	; 0x30
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a78:	b0c0      	sub	sp, #256	; 0x100
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a90:	68d9      	ldr	r1, [r3, #12]
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	ea40 0301 	orr.w	r3, r0, r1
 8003a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003acc:	f021 010c 	bic.w	r1, r1, #12
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ada:	430b      	orrs	r3, r1
 8003adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aee:	6999      	ldr	r1, [r3, #24]
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	ea40 0301 	orr.w	r3, r0, r1
 8003afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b8f      	ldr	r3, [pc, #572]	; (8003d40 <UART_SetConfig+0x2cc>)
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d005      	beq.n	8003b14 <UART_SetConfig+0xa0>
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b8d      	ldr	r3, [pc, #564]	; (8003d44 <UART_SetConfig+0x2d0>)
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d104      	bne.n	8003b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b14:	f7ff f9b8 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 8003b18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b1c:	e003      	b.n	8003b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b1e:	f7ff f99f 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
 8003b22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b30:	f040 810c 	bne.w	8003d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b46:	4622      	mov	r2, r4
 8003b48:	462b      	mov	r3, r5
 8003b4a:	1891      	adds	r1, r2, r2
 8003b4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b4e:	415b      	adcs	r3, r3
 8003b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b56:	4621      	mov	r1, r4
 8003b58:	eb12 0801 	adds.w	r8, r2, r1
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	eb43 0901 	adc.w	r9, r3, r1
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b76:	4690      	mov	r8, r2
 8003b78:	4699      	mov	r9, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	eb18 0303 	adds.w	r3, r8, r3
 8003b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b84:	462b      	mov	r3, r5
 8003b86:	eb49 0303 	adc.w	r3, r9, r3
 8003b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	18db      	adds	r3, r3, r3
 8003ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ba8:	4613      	mov	r3, r2
 8003baa:	eb42 0303 	adc.w	r3, r2, r3
 8003bae:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bb8:	f7fc fff6 	bl	8000ba8 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4b61      	ldr	r3, [pc, #388]	; (8003d48 <UART_SetConfig+0x2d4>)
 8003bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	011c      	lsls	r4, r3, #4
 8003bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bdc:	4642      	mov	r2, r8
 8003bde:	464b      	mov	r3, r9
 8003be0:	1891      	adds	r1, r2, r2
 8003be2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003be4:	415b      	adcs	r3, r3
 8003be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bec:	4641      	mov	r1, r8
 8003bee:	eb12 0a01 	adds.w	sl, r2, r1
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c0c:	4692      	mov	sl, r2
 8003c0e:	469b      	mov	fp, r3
 8003c10:	4643      	mov	r3, r8
 8003c12:	eb1a 0303 	adds.w	r3, sl, r3
 8003c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	18db      	adds	r3, r3, r3
 8003c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c3e:	4613      	mov	r3, r2
 8003c40:	eb42 0303 	adc.w	r3, r2, r3
 8003c44:	647b      	str	r3, [r7, #68]	; 0x44
 8003c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c4e:	f7fc ffab 	bl	8000ba8 <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <UART_SetConfig+0x2d4>)
 8003c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2264      	movs	r2, #100	; 0x64
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	1acb      	subs	r3, r1, r3
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c6e:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <UART_SetConfig+0x2d4>)
 8003c70:	fba3 2302 	umull	r2, r3, r3, r2
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c7c:	441c      	add	r4, r3
 8003c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	1891      	adds	r1, r2, r2
 8003c96:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c98:	415b      	adcs	r3, r3
 8003c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	1851      	adds	r1, r2, r1
 8003ca4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	414b      	adcs	r3, r1
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cb8:	4659      	mov	r1, fp
 8003cba:	00cb      	lsls	r3, r1, #3
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	00ca      	lsls	r2, r1, #3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4642      	mov	r2, r8
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	460a      	mov	r2, r1
 8003cd8:	eb42 0303 	adc.w	r3, r2, r3
 8003cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	18db      	adds	r3, r3, r3
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	eb42 0303 	adc.w	r3, r2, r3
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d0a:	f7fc ff4d 	bl	8000ba8 <__aeabi_uldivmod>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <UART_SetConfig+0x2d4>)
 8003d14:	fba3 1302 	umull	r1, r3, r3, r2
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	2164      	movs	r1, #100	; 0x64
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	3332      	adds	r3, #50	; 0x32
 8003d26:	4a08      	ldr	r2, [pc, #32]	; (8003d48 <UART_SetConfig+0x2d4>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	f003 0207 	and.w	r2, r3, #7
 8003d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4422      	add	r2, r4
 8003d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d3c:	e106      	b.n	8003f4c <UART_SetConfig+0x4d8>
 8003d3e:	bf00      	nop
 8003d40:	40011000 	.word	0x40011000
 8003d44:	40011400 	.word	0x40011400
 8003d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d5e:	4642      	mov	r2, r8
 8003d60:	464b      	mov	r3, r9
 8003d62:	1891      	adds	r1, r2, r2
 8003d64:	6239      	str	r1, [r7, #32]
 8003d66:	415b      	adcs	r3, r3
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d6e:	4641      	mov	r1, r8
 8003d70:	1854      	adds	r4, r2, r1
 8003d72:	4649      	mov	r1, r9
 8003d74:	eb43 0501 	adc.w	r5, r3, r1
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	00eb      	lsls	r3, r5, #3
 8003d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d86:	00e2      	lsls	r2, r4, #3
 8003d88:	4614      	mov	r4, r2
 8003d8a:	461d      	mov	r5, r3
 8003d8c:	4643      	mov	r3, r8
 8003d8e:	18e3      	adds	r3, r4, r3
 8003d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d94:	464b      	mov	r3, r9
 8003d96:	eb45 0303 	adc.w	r3, r5, r3
 8003d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003daa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dba:	4629      	mov	r1, r5
 8003dbc:	008b      	lsls	r3, r1, #2
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	008a      	lsls	r2, r1, #2
 8003dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dcc:	f7fc feec 	bl	8000ba8 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4b60      	ldr	r3, [pc, #384]	; (8003f58 <UART_SetConfig+0x4e4>)
 8003dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	011c      	lsls	r4, r3, #4
 8003dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003de8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	61b9      	str	r1, [r7, #24]
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e00:	4641      	mov	r1, r8
 8003e02:	1851      	adds	r1, r2, r1
 8003e04:	6139      	str	r1, [r7, #16]
 8003e06:	4649      	mov	r1, r9
 8003e08:	414b      	adcs	r3, r1
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e18:	4659      	mov	r1, fp
 8003e1a:	00cb      	lsls	r3, r1, #3
 8003e1c:	4651      	mov	r1, sl
 8003e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e22:	4651      	mov	r1, sl
 8003e24:	00ca      	lsls	r2, r1, #3
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	189b      	adds	r3, r3, r2
 8003e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e34:	464b      	mov	r3, r9
 8003e36:	460a      	mov	r2, r1
 8003e38:	eb42 0303 	adc.w	r3, r2, r3
 8003e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e58:	4649      	mov	r1, r9
 8003e5a:	008b      	lsls	r3, r1, #2
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e62:	4641      	mov	r1, r8
 8003e64:	008a      	lsls	r2, r1, #2
 8003e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e6a:	f7fc fe9d 	bl	8000ba8 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	4b38      	ldr	r3, [pc, #224]	; (8003f58 <UART_SetConfig+0x4e4>)
 8003e76:	fba3 2301 	umull	r2, r3, r3, r1
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	2264      	movs	r2, #100	; 0x64
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	1acb      	subs	r3, r1, r3
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	3332      	adds	r3, #50	; 0x32
 8003e88:	4a33      	ldr	r2, [pc, #204]	; (8003f58 <UART_SetConfig+0x4e4>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e94:	441c      	add	r4, r3
 8003e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	673b      	str	r3, [r7, #112]	; 0x70
 8003e9e:	677a      	str	r2, [r7, #116]	; 0x74
 8003ea0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	415b      	adcs	r3, r3
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	1851      	adds	r1, r2, r1
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	4649      	mov	r1, r9
 8003ebc:	414b      	adcs	r3, r1
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ecc:	4659      	mov	r1, fp
 8003ece:	00cb      	lsls	r3, r1, #3
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	00ca      	lsls	r2, r1, #3
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	460a      	mov	r2, r1
 8003eea:	eb42 0303 	adc.w	r3, r2, r3
 8003eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8003efa:	667a      	str	r2, [r7, #100]	; 0x64
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f08:	4649      	mov	r1, r9
 8003f0a:	008b      	lsls	r3, r1, #2
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f12:	4641      	mov	r1, r8
 8003f14:	008a      	lsls	r2, r1, #2
 8003f16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f1a:	f7fc fe45 	bl	8000ba8 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <UART_SetConfig+0x4e4>)
 8003f24:	fba3 1302 	umull	r1, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	2164      	movs	r1, #100	; 0x64
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	3332      	adds	r3, #50	; 0x32
 8003f36:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <UART_SetConfig+0x4e4>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 020f 	and.w	r2, r3, #15
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4422      	add	r2, r4
 8003f4a:	609a      	str	r2, [r3, #8]
}
 8003f4c:	bf00      	nop
 8003f4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f52:	46bd      	mov	sp, r7
 8003f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f58:	51eb851f 	.word	0x51eb851f

08003f5c <__cvt>:
 8003f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f60:	ec55 4b10 	vmov	r4, r5, d0
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	460e      	mov	r6, r1
 8003f68:	4619      	mov	r1, r3
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	bfbb      	ittet	lt
 8003f6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f72:	461d      	movlt	r5, r3
 8003f74:	2300      	movge	r3, #0
 8003f76:	232d      	movlt	r3, #45	; 0x2d
 8003f78:	700b      	strb	r3, [r1, #0]
 8003f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f80:	4691      	mov	r9, r2
 8003f82:	f023 0820 	bic.w	r8, r3, #32
 8003f86:	bfbc      	itt	lt
 8003f88:	4622      	movlt	r2, r4
 8003f8a:	4614      	movlt	r4, r2
 8003f8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f90:	d005      	beq.n	8003f9e <__cvt+0x42>
 8003f92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f96:	d100      	bne.n	8003f9a <__cvt+0x3e>
 8003f98:	3601      	adds	r6, #1
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	e000      	b.n	8003fa0 <__cvt+0x44>
 8003f9e:	2103      	movs	r1, #3
 8003fa0:	ab03      	add	r3, sp, #12
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	ab02      	add	r3, sp, #8
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	ec45 4b10 	vmov	d0, r4, r5
 8003fac:	4653      	mov	r3, sl
 8003fae:	4632      	mov	r2, r6
 8003fb0:	f000 fe6a 	bl	8004c88 <_dtoa_r>
 8003fb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003fb8:	4607      	mov	r7, r0
 8003fba:	d102      	bne.n	8003fc2 <__cvt+0x66>
 8003fbc:	f019 0f01 	tst.w	r9, #1
 8003fc0:	d022      	beq.n	8004008 <__cvt+0xac>
 8003fc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fc6:	eb07 0906 	add.w	r9, r7, r6
 8003fca:	d110      	bne.n	8003fee <__cvt+0x92>
 8003fcc:	783b      	ldrb	r3, [r7, #0]
 8003fce:	2b30      	cmp	r3, #48	; 0x30
 8003fd0:	d10a      	bne.n	8003fe8 <__cvt+0x8c>
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	4629      	mov	r1, r5
 8003fda:	f7fc fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fde:	b918      	cbnz	r0, 8003fe8 <__cvt+0x8c>
 8003fe0:	f1c6 0601 	rsb	r6, r6, #1
 8003fe4:	f8ca 6000 	str.w	r6, [sl]
 8003fe8:	f8da 3000 	ldr.w	r3, [sl]
 8003fec:	4499      	add	r9, r3
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	f7fc fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ffa:	b108      	cbz	r0, 8004000 <__cvt+0xa4>
 8003ffc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004000:	2230      	movs	r2, #48	; 0x30
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	454b      	cmp	r3, r9
 8004006:	d307      	bcc.n	8004018 <__cvt+0xbc>
 8004008:	9b03      	ldr	r3, [sp, #12]
 800400a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800400c:	1bdb      	subs	r3, r3, r7
 800400e:	4638      	mov	r0, r7
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	b004      	add	sp, #16
 8004014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004018:	1c59      	adds	r1, r3, #1
 800401a:	9103      	str	r1, [sp, #12]
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e7f0      	b.n	8004002 <__cvt+0xa6>

08004020 <__exponent>:
 8004020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004022:	4603      	mov	r3, r0
 8004024:	2900      	cmp	r1, #0
 8004026:	bfb8      	it	lt
 8004028:	4249      	neglt	r1, r1
 800402a:	f803 2b02 	strb.w	r2, [r3], #2
 800402e:	bfb4      	ite	lt
 8004030:	222d      	movlt	r2, #45	; 0x2d
 8004032:	222b      	movge	r2, #43	; 0x2b
 8004034:	2909      	cmp	r1, #9
 8004036:	7042      	strb	r2, [r0, #1]
 8004038:	dd2a      	ble.n	8004090 <__exponent+0x70>
 800403a:	f10d 0207 	add.w	r2, sp, #7
 800403e:	4617      	mov	r7, r2
 8004040:	260a      	movs	r6, #10
 8004042:	4694      	mov	ip, r2
 8004044:	fb91 f5f6 	sdiv	r5, r1, r6
 8004048:	fb06 1415 	mls	r4, r6, r5, r1
 800404c:	3430      	adds	r4, #48	; 0x30
 800404e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004052:	460c      	mov	r4, r1
 8004054:	2c63      	cmp	r4, #99	; 0x63
 8004056:	f102 32ff 	add.w	r2, r2, #4294967295
 800405a:	4629      	mov	r1, r5
 800405c:	dcf1      	bgt.n	8004042 <__exponent+0x22>
 800405e:	3130      	adds	r1, #48	; 0x30
 8004060:	f1ac 0402 	sub.w	r4, ip, #2
 8004064:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004068:	1c41      	adds	r1, r0, #1
 800406a:	4622      	mov	r2, r4
 800406c:	42ba      	cmp	r2, r7
 800406e:	d30a      	bcc.n	8004086 <__exponent+0x66>
 8004070:	f10d 0209 	add.w	r2, sp, #9
 8004074:	eba2 020c 	sub.w	r2, r2, ip
 8004078:	42bc      	cmp	r4, r7
 800407a:	bf88      	it	hi
 800407c:	2200      	movhi	r2, #0
 800407e:	4413      	add	r3, r2
 8004080:	1a18      	subs	r0, r3, r0
 8004082:	b003      	add	sp, #12
 8004084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004086:	f812 5b01 	ldrb.w	r5, [r2], #1
 800408a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800408e:	e7ed      	b.n	800406c <__exponent+0x4c>
 8004090:	2330      	movs	r3, #48	; 0x30
 8004092:	3130      	adds	r1, #48	; 0x30
 8004094:	7083      	strb	r3, [r0, #2]
 8004096:	70c1      	strb	r1, [r0, #3]
 8004098:	1d03      	adds	r3, r0, #4
 800409a:	e7f1      	b.n	8004080 <__exponent+0x60>

0800409c <_printf_float>:
 800409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a0:	ed2d 8b02 	vpush	{d8}
 80040a4:	b08d      	sub	sp, #52	; 0x34
 80040a6:	460c      	mov	r4, r1
 80040a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80040ac:	4616      	mov	r6, r2
 80040ae:	461f      	mov	r7, r3
 80040b0:	4605      	mov	r5, r0
 80040b2:	f000 fce7 	bl	8004a84 <_localeconv_r>
 80040b6:	f8d0 a000 	ldr.w	sl, [r0]
 80040ba:	4650      	mov	r0, sl
 80040bc:	f7fc f8d8 	bl	8000270 <strlen>
 80040c0:	2300      	movs	r3, #0
 80040c2:	930a      	str	r3, [sp, #40]	; 0x28
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	9305      	str	r3, [sp, #20]
 80040c8:	f8d8 3000 	ldr.w	r3, [r8]
 80040cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80040d0:	3307      	adds	r3, #7
 80040d2:	f023 0307 	bic.w	r3, r3, #7
 80040d6:	f103 0208 	add.w	r2, r3, #8
 80040da:	f8c8 2000 	str.w	r2, [r8]
 80040de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040e6:	9307      	str	r3, [sp, #28]
 80040e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80040ec:	ee08 0a10 	vmov	s16, r0
 80040f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80040f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040f8:	4b9e      	ldr	r3, [pc, #632]	; (8004374 <_printf_float+0x2d8>)
 80040fa:	f04f 32ff 	mov.w	r2, #4294967295
 80040fe:	f7fc fd15 	bl	8000b2c <__aeabi_dcmpun>
 8004102:	bb88      	cbnz	r0, 8004168 <_printf_float+0xcc>
 8004104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004108:	4b9a      	ldr	r3, [pc, #616]	; (8004374 <_printf_float+0x2d8>)
 800410a:	f04f 32ff 	mov.w	r2, #4294967295
 800410e:	f7fc fcef 	bl	8000af0 <__aeabi_dcmple>
 8004112:	bb48      	cbnz	r0, 8004168 <_printf_float+0xcc>
 8004114:	2200      	movs	r2, #0
 8004116:	2300      	movs	r3, #0
 8004118:	4640      	mov	r0, r8
 800411a:	4649      	mov	r1, r9
 800411c:	f7fc fcde 	bl	8000adc <__aeabi_dcmplt>
 8004120:	b110      	cbz	r0, 8004128 <_printf_float+0x8c>
 8004122:	232d      	movs	r3, #45	; 0x2d
 8004124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004128:	4a93      	ldr	r2, [pc, #588]	; (8004378 <_printf_float+0x2dc>)
 800412a:	4b94      	ldr	r3, [pc, #592]	; (800437c <_printf_float+0x2e0>)
 800412c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004130:	bf94      	ite	ls
 8004132:	4690      	movls	r8, r2
 8004134:	4698      	movhi	r8, r3
 8004136:	2303      	movs	r3, #3
 8004138:	6123      	str	r3, [r4, #16]
 800413a:	9b05      	ldr	r3, [sp, #20]
 800413c:	f023 0304 	bic.w	r3, r3, #4
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	f04f 0900 	mov.w	r9, #0
 8004146:	9700      	str	r7, [sp, #0]
 8004148:	4633      	mov	r3, r6
 800414a:	aa0b      	add	r2, sp, #44	; 0x2c
 800414c:	4621      	mov	r1, r4
 800414e:	4628      	mov	r0, r5
 8004150:	f000 f9da 	bl	8004508 <_printf_common>
 8004154:	3001      	adds	r0, #1
 8004156:	f040 8090 	bne.w	800427a <_printf_float+0x1de>
 800415a:	f04f 30ff 	mov.w	r0, #4294967295
 800415e:	b00d      	add	sp, #52	; 0x34
 8004160:	ecbd 8b02 	vpop	{d8}
 8004164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004168:	4642      	mov	r2, r8
 800416a:	464b      	mov	r3, r9
 800416c:	4640      	mov	r0, r8
 800416e:	4649      	mov	r1, r9
 8004170:	f7fc fcdc 	bl	8000b2c <__aeabi_dcmpun>
 8004174:	b140      	cbz	r0, 8004188 <_printf_float+0xec>
 8004176:	464b      	mov	r3, r9
 8004178:	2b00      	cmp	r3, #0
 800417a:	bfbc      	itt	lt
 800417c:	232d      	movlt	r3, #45	; 0x2d
 800417e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004182:	4a7f      	ldr	r2, [pc, #508]	; (8004380 <_printf_float+0x2e4>)
 8004184:	4b7f      	ldr	r3, [pc, #508]	; (8004384 <_printf_float+0x2e8>)
 8004186:	e7d1      	b.n	800412c <_printf_float+0x90>
 8004188:	6863      	ldr	r3, [r4, #4]
 800418a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800418e:	9206      	str	r2, [sp, #24]
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	d13f      	bne.n	8004214 <_printf_float+0x178>
 8004194:	2306      	movs	r3, #6
 8004196:	6063      	str	r3, [r4, #4]
 8004198:	9b05      	ldr	r3, [sp, #20]
 800419a:	6861      	ldr	r1, [r4, #4]
 800419c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041a0:	2300      	movs	r3, #0
 80041a2:	9303      	str	r3, [sp, #12]
 80041a4:	ab0a      	add	r3, sp, #40	; 0x28
 80041a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80041aa:	ab09      	add	r3, sp, #36	; 0x24
 80041ac:	ec49 8b10 	vmov	d0, r8, r9
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	6022      	str	r2, [r4, #0]
 80041b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041b8:	4628      	mov	r0, r5
 80041ba:	f7ff fecf 	bl	8003f5c <__cvt>
 80041be:	9b06      	ldr	r3, [sp, #24]
 80041c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041c2:	2b47      	cmp	r3, #71	; 0x47
 80041c4:	4680      	mov	r8, r0
 80041c6:	d108      	bne.n	80041da <_printf_float+0x13e>
 80041c8:	1cc8      	adds	r0, r1, #3
 80041ca:	db02      	blt.n	80041d2 <_printf_float+0x136>
 80041cc:	6863      	ldr	r3, [r4, #4]
 80041ce:	4299      	cmp	r1, r3
 80041d0:	dd41      	ble.n	8004256 <_printf_float+0x1ba>
 80041d2:	f1ab 0302 	sub.w	r3, fp, #2
 80041d6:	fa5f fb83 	uxtb.w	fp, r3
 80041da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041de:	d820      	bhi.n	8004222 <_printf_float+0x186>
 80041e0:	3901      	subs	r1, #1
 80041e2:	465a      	mov	r2, fp
 80041e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041e8:	9109      	str	r1, [sp, #36]	; 0x24
 80041ea:	f7ff ff19 	bl	8004020 <__exponent>
 80041ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041f0:	1813      	adds	r3, r2, r0
 80041f2:	2a01      	cmp	r2, #1
 80041f4:	4681      	mov	r9, r0
 80041f6:	6123      	str	r3, [r4, #16]
 80041f8:	dc02      	bgt.n	8004200 <_printf_float+0x164>
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	07d2      	lsls	r2, r2, #31
 80041fe:	d501      	bpl.n	8004204 <_printf_float+0x168>
 8004200:	3301      	adds	r3, #1
 8004202:	6123      	str	r3, [r4, #16]
 8004204:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004208:	2b00      	cmp	r3, #0
 800420a:	d09c      	beq.n	8004146 <_printf_float+0xaa>
 800420c:	232d      	movs	r3, #45	; 0x2d
 800420e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004212:	e798      	b.n	8004146 <_printf_float+0xaa>
 8004214:	9a06      	ldr	r2, [sp, #24]
 8004216:	2a47      	cmp	r2, #71	; 0x47
 8004218:	d1be      	bne.n	8004198 <_printf_float+0xfc>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1bc      	bne.n	8004198 <_printf_float+0xfc>
 800421e:	2301      	movs	r3, #1
 8004220:	e7b9      	b.n	8004196 <_printf_float+0xfa>
 8004222:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004226:	d118      	bne.n	800425a <_printf_float+0x1be>
 8004228:	2900      	cmp	r1, #0
 800422a:	6863      	ldr	r3, [r4, #4]
 800422c:	dd0b      	ble.n	8004246 <_printf_float+0x1aa>
 800422e:	6121      	str	r1, [r4, #16]
 8004230:	b913      	cbnz	r3, 8004238 <_printf_float+0x19c>
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	07d0      	lsls	r0, r2, #31
 8004236:	d502      	bpl.n	800423e <_printf_float+0x1a2>
 8004238:	3301      	adds	r3, #1
 800423a:	440b      	add	r3, r1
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004240:	f04f 0900 	mov.w	r9, #0
 8004244:	e7de      	b.n	8004204 <_printf_float+0x168>
 8004246:	b913      	cbnz	r3, 800424e <_printf_float+0x1b2>
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	07d2      	lsls	r2, r2, #31
 800424c:	d501      	bpl.n	8004252 <_printf_float+0x1b6>
 800424e:	3302      	adds	r3, #2
 8004250:	e7f4      	b.n	800423c <_printf_float+0x1a0>
 8004252:	2301      	movs	r3, #1
 8004254:	e7f2      	b.n	800423c <_printf_float+0x1a0>
 8004256:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800425a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800425c:	4299      	cmp	r1, r3
 800425e:	db05      	blt.n	800426c <_printf_float+0x1d0>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	6121      	str	r1, [r4, #16]
 8004264:	07d8      	lsls	r0, r3, #31
 8004266:	d5ea      	bpl.n	800423e <_printf_float+0x1a2>
 8004268:	1c4b      	adds	r3, r1, #1
 800426a:	e7e7      	b.n	800423c <_printf_float+0x1a0>
 800426c:	2900      	cmp	r1, #0
 800426e:	bfd4      	ite	le
 8004270:	f1c1 0202 	rsble	r2, r1, #2
 8004274:	2201      	movgt	r2, #1
 8004276:	4413      	add	r3, r2
 8004278:	e7e0      	b.n	800423c <_printf_float+0x1a0>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	055a      	lsls	r2, r3, #21
 800427e:	d407      	bmi.n	8004290 <_printf_float+0x1f4>
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	4642      	mov	r2, r8
 8004284:	4631      	mov	r1, r6
 8004286:	4628      	mov	r0, r5
 8004288:	47b8      	blx	r7
 800428a:	3001      	adds	r0, #1
 800428c:	d12c      	bne.n	80042e8 <_printf_float+0x24c>
 800428e:	e764      	b.n	800415a <_printf_float+0xbe>
 8004290:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004294:	f240 80e0 	bls.w	8004458 <_printf_float+0x3bc>
 8004298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800429c:	2200      	movs	r2, #0
 800429e:	2300      	movs	r3, #0
 80042a0:	f7fc fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d034      	beq.n	8004312 <_printf_float+0x276>
 80042a8:	4a37      	ldr	r2, [pc, #220]	; (8004388 <_printf_float+0x2ec>)
 80042aa:	2301      	movs	r3, #1
 80042ac:	4631      	mov	r1, r6
 80042ae:	4628      	mov	r0, r5
 80042b0:	47b8      	blx	r7
 80042b2:	3001      	adds	r0, #1
 80042b4:	f43f af51 	beq.w	800415a <_printf_float+0xbe>
 80042b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042bc:	429a      	cmp	r2, r3
 80042be:	db02      	blt.n	80042c6 <_printf_float+0x22a>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	07d8      	lsls	r0, r3, #31
 80042c4:	d510      	bpl.n	80042e8 <_printf_float+0x24c>
 80042c6:	ee18 3a10 	vmov	r3, s16
 80042ca:	4652      	mov	r2, sl
 80042cc:	4631      	mov	r1, r6
 80042ce:	4628      	mov	r0, r5
 80042d0:	47b8      	blx	r7
 80042d2:	3001      	adds	r0, #1
 80042d4:	f43f af41 	beq.w	800415a <_printf_float+0xbe>
 80042d8:	f04f 0800 	mov.w	r8, #0
 80042dc:	f104 091a 	add.w	r9, r4, #26
 80042e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042e2:	3b01      	subs	r3, #1
 80042e4:	4543      	cmp	r3, r8
 80042e6:	dc09      	bgt.n	80042fc <_printf_float+0x260>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	079b      	lsls	r3, r3, #30
 80042ec:	f100 8107 	bmi.w	80044fe <_printf_float+0x462>
 80042f0:	68e0      	ldr	r0, [r4, #12]
 80042f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042f4:	4298      	cmp	r0, r3
 80042f6:	bfb8      	it	lt
 80042f8:	4618      	movlt	r0, r3
 80042fa:	e730      	b.n	800415e <_printf_float+0xc2>
 80042fc:	2301      	movs	r3, #1
 80042fe:	464a      	mov	r2, r9
 8004300:	4631      	mov	r1, r6
 8004302:	4628      	mov	r0, r5
 8004304:	47b8      	blx	r7
 8004306:	3001      	adds	r0, #1
 8004308:	f43f af27 	beq.w	800415a <_printf_float+0xbe>
 800430c:	f108 0801 	add.w	r8, r8, #1
 8004310:	e7e6      	b.n	80042e0 <_printf_float+0x244>
 8004312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	dc39      	bgt.n	800438c <_printf_float+0x2f0>
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <_printf_float+0x2ec>)
 800431a:	2301      	movs	r3, #1
 800431c:	4631      	mov	r1, r6
 800431e:	4628      	mov	r0, r5
 8004320:	47b8      	blx	r7
 8004322:	3001      	adds	r0, #1
 8004324:	f43f af19 	beq.w	800415a <_printf_float+0xbe>
 8004328:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800432c:	4313      	orrs	r3, r2
 800432e:	d102      	bne.n	8004336 <_printf_float+0x29a>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	07d9      	lsls	r1, r3, #31
 8004334:	d5d8      	bpl.n	80042e8 <_printf_float+0x24c>
 8004336:	ee18 3a10 	vmov	r3, s16
 800433a:	4652      	mov	r2, sl
 800433c:	4631      	mov	r1, r6
 800433e:	4628      	mov	r0, r5
 8004340:	47b8      	blx	r7
 8004342:	3001      	adds	r0, #1
 8004344:	f43f af09 	beq.w	800415a <_printf_float+0xbe>
 8004348:	f04f 0900 	mov.w	r9, #0
 800434c:	f104 0a1a 	add.w	sl, r4, #26
 8004350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004352:	425b      	negs	r3, r3
 8004354:	454b      	cmp	r3, r9
 8004356:	dc01      	bgt.n	800435c <_printf_float+0x2c0>
 8004358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800435a:	e792      	b.n	8004282 <_printf_float+0x1e6>
 800435c:	2301      	movs	r3, #1
 800435e:	4652      	mov	r2, sl
 8004360:	4631      	mov	r1, r6
 8004362:	4628      	mov	r0, r5
 8004364:	47b8      	blx	r7
 8004366:	3001      	adds	r0, #1
 8004368:	f43f aef7 	beq.w	800415a <_printf_float+0xbe>
 800436c:	f109 0901 	add.w	r9, r9, #1
 8004370:	e7ee      	b.n	8004350 <_printf_float+0x2b4>
 8004372:	bf00      	nop
 8004374:	7fefffff 	.word	0x7fefffff
 8004378:	08006d5c 	.word	0x08006d5c
 800437c:	08006d60 	.word	0x08006d60
 8004380:	08006d64 	.word	0x08006d64
 8004384:	08006d68 	.word	0x08006d68
 8004388:	08006d6c 	.word	0x08006d6c
 800438c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800438e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004390:	429a      	cmp	r2, r3
 8004392:	bfa8      	it	ge
 8004394:	461a      	movge	r2, r3
 8004396:	2a00      	cmp	r2, #0
 8004398:	4691      	mov	r9, r2
 800439a:	dc37      	bgt.n	800440c <_printf_float+0x370>
 800439c:	f04f 0b00 	mov.w	fp, #0
 80043a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043a4:	f104 021a 	add.w	r2, r4, #26
 80043a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043aa:	9305      	str	r3, [sp, #20]
 80043ac:	eba3 0309 	sub.w	r3, r3, r9
 80043b0:	455b      	cmp	r3, fp
 80043b2:	dc33      	bgt.n	800441c <_printf_float+0x380>
 80043b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043b8:	429a      	cmp	r2, r3
 80043ba:	db3b      	blt.n	8004434 <_printf_float+0x398>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	07da      	lsls	r2, r3, #31
 80043c0:	d438      	bmi.n	8004434 <_printf_float+0x398>
 80043c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80043c6:	eba2 0903 	sub.w	r9, r2, r3
 80043ca:	9b05      	ldr	r3, [sp, #20]
 80043cc:	1ad2      	subs	r2, r2, r3
 80043ce:	4591      	cmp	r9, r2
 80043d0:	bfa8      	it	ge
 80043d2:	4691      	movge	r9, r2
 80043d4:	f1b9 0f00 	cmp.w	r9, #0
 80043d8:	dc35      	bgt.n	8004446 <_printf_float+0x3aa>
 80043da:	f04f 0800 	mov.w	r8, #0
 80043de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043e2:	f104 0a1a 	add.w	sl, r4, #26
 80043e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	eba3 0309 	sub.w	r3, r3, r9
 80043f0:	4543      	cmp	r3, r8
 80043f2:	f77f af79 	ble.w	80042e8 <_printf_float+0x24c>
 80043f6:	2301      	movs	r3, #1
 80043f8:	4652      	mov	r2, sl
 80043fa:	4631      	mov	r1, r6
 80043fc:	4628      	mov	r0, r5
 80043fe:	47b8      	blx	r7
 8004400:	3001      	adds	r0, #1
 8004402:	f43f aeaa 	beq.w	800415a <_printf_float+0xbe>
 8004406:	f108 0801 	add.w	r8, r8, #1
 800440a:	e7ec      	b.n	80043e6 <_printf_float+0x34a>
 800440c:	4613      	mov	r3, r2
 800440e:	4631      	mov	r1, r6
 8004410:	4642      	mov	r2, r8
 8004412:	4628      	mov	r0, r5
 8004414:	47b8      	blx	r7
 8004416:	3001      	adds	r0, #1
 8004418:	d1c0      	bne.n	800439c <_printf_float+0x300>
 800441a:	e69e      	b.n	800415a <_printf_float+0xbe>
 800441c:	2301      	movs	r3, #1
 800441e:	4631      	mov	r1, r6
 8004420:	4628      	mov	r0, r5
 8004422:	9205      	str	r2, [sp, #20]
 8004424:	47b8      	blx	r7
 8004426:	3001      	adds	r0, #1
 8004428:	f43f ae97 	beq.w	800415a <_printf_float+0xbe>
 800442c:	9a05      	ldr	r2, [sp, #20]
 800442e:	f10b 0b01 	add.w	fp, fp, #1
 8004432:	e7b9      	b.n	80043a8 <_printf_float+0x30c>
 8004434:	ee18 3a10 	vmov	r3, s16
 8004438:	4652      	mov	r2, sl
 800443a:	4631      	mov	r1, r6
 800443c:	4628      	mov	r0, r5
 800443e:	47b8      	blx	r7
 8004440:	3001      	adds	r0, #1
 8004442:	d1be      	bne.n	80043c2 <_printf_float+0x326>
 8004444:	e689      	b.n	800415a <_printf_float+0xbe>
 8004446:	9a05      	ldr	r2, [sp, #20]
 8004448:	464b      	mov	r3, r9
 800444a:	4442      	add	r2, r8
 800444c:	4631      	mov	r1, r6
 800444e:	4628      	mov	r0, r5
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	d1c1      	bne.n	80043da <_printf_float+0x33e>
 8004456:	e680      	b.n	800415a <_printf_float+0xbe>
 8004458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800445a:	2a01      	cmp	r2, #1
 800445c:	dc01      	bgt.n	8004462 <_printf_float+0x3c6>
 800445e:	07db      	lsls	r3, r3, #31
 8004460:	d53a      	bpl.n	80044d8 <_printf_float+0x43c>
 8004462:	2301      	movs	r3, #1
 8004464:	4642      	mov	r2, r8
 8004466:	4631      	mov	r1, r6
 8004468:	4628      	mov	r0, r5
 800446a:	47b8      	blx	r7
 800446c:	3001      	adds	r0, #1
 800446e:	f43f ae74 	beq.w	800415a <_printf_float+0xbe>
 8004472:	ee18 3a10 	vmov	r3, s16
 8004476:	4652      	mov	r2, sl
 8004478:	4631      	mov	r1, r6
 800447a:	4628      	mov	r0, r5
 800447c:	47b8      	blx	r7
 800447e:	3001      	adds	r0, #1
 8004480:	f43f ae6b 	beq.w	800415a <_printf_float+0xbe>
 8004484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004488:	2200      	movs	r2, #0
 800448a:	2300      	movs	r3, #0
 800448c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004490:	f7fc fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004494:	b9d8      	cbnz	r0, 80044ce <_printf_float+0x432>
 8004496:	f10a 33ff 	add.w	r3, sl, #4294967295
 800449a:	f108 0201 	add.w	r2, r8, #1
 800449e:	4631      	mov	r1, r6
 80044a0:	4628      	mov	r0, r5
 80044a2:	47b8      	blx	r7
 80044a4:	3001      	adds	r0, #1
 80044a6:	d10e      	bne.n	80044c6 <_printf_float+0x42a>
 80044a8:	e657      	b.n	800415a <_printf_float+0xbe>
 80044aa:	2301      	movs	r3, #1
 80044ac:	4652      	mov	r2, sl
 80044ae:	4631      	mov	r1, r6
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	f43f ae50 	beq.w	800415a <_printf_float+0xbe>
 80044ba:	f108 0801 	add.w	r8, r8, #1
 80044be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c0:	3b01      	subs	r3, #1
 80044c2:	4543      	cmp	r3, r8
 80044c4:	dcf1      	bgt.n	80044aa <_printf_float+0x40e>
 80044c6:	464b      	mov	r3, r9
 80044c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044cc:	e6da      	b.n	8004284 <_printf_float+0x1e8>
 80044ce:	f04f 0800 	mov.w	r8, #0
 80044d2:	f104 0a1a 	add.w	sl, r4, #26
 80044d6:	e7f2      	b.n	80044be <_printf_float+0x422>
 80044d8:	2301      	movs	r3, #1
 80044da:	4642      	mov	r2, r8
 80044dc:	e7df      	b.n	800449e <_printf_float+0x402>
 80044de:	2301      	movs	r3, #1
 80044e0:	464a      	mov	r2, r9
 80044e2:	4631      	mov	r1, r6
 80044e4:	4628      	mov	r0, r5
 80044e6:	47b8      	blx	r7
 80044e8:	3001      	adds	r0, #1
 80044ea:	f43f ae36 	beq.w	800415a <_printf_float+0xbe>
 80044ee:	f108 0801 	add.w	r8, r8, #1
 80044f2:	68e3      	ldr	r3, [r4, #12]
 80044f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044f6:	1a5b      	subs	r3, r3, r1
 80044f8:	4543      	cmp	r3, r8
 80044fa:	dcf0      	bgt.n	80044de <_printf_float+0x442>
 80044fc:	e6f8      	b.n	80042f0 <_printf_float+0x254>
 80044fe:	f04f 0800 	mov.w	r8, #0
 8004502:	f104 0919 	add.w	r9, r4, #25
 8004506:	e7f4      	b.n	80044f2 <_printf_float+0x456>

08004508 <_printf_common>:
 8004508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	4616      	mov	r6, r2
 800450e:	4699      	mov	r9, r3
 8004510:	688a      	ldr	r2, [r1, #8]
 8004512:	690b      	ldr	r3, [r1, #16]
 8004514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004518:	4293      	cmp	r3, r2
 800451a:	bfb8      	it	lt
 800451c:	4613      	movlt	r3, r2
 800451e:	6033      	str	r3, [r6, #0]
 8004520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004524:	4607      	mov	r7, r0
 8004526:	460c      	mov	r4, r1
 8004528:	b10a      	cbz	r2, 800452e <_printf_common+0x26>
 800452a:	3301      	adds	r3, #1
 800452c:	6033      	str	r3, [r6, #0]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	0699      	lsls	r1, r3, #26
 8004532:	bf42      	ittt	mi
 8004534:	6833      	ldrmi	r3, [r6, #0]
 8004536:	3302      	addmi	r3, #2
 8004538:	6033      	strmi	r3, [r6, #0]
 800453a:	6825      	ldr	r5, [r4, #0]
 800453c:	f015 0506 	ands.w	r5, r5, #6
 8004540:	d106      	bne.n	8004550 <_printf_common+0x48>
 8004542:	f104 0a19 	add.w	sl, r4, #25
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	6832      	ldr	r2, [r6, #0]
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	42ab      	cmp	r3, r5
 800454e:	dc26      	bgt.n	800459e <_printf_common+0x96>
 8004550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004554:	1e13      	subs	r3, r2, #0
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	bf18      	it	ne
 800455a:	2301      	movne	r3, #1
 800455c:	0692      	lsls	r2, r2, #26
 800455e:	d42b      	bmi.n	80045b8 <_printf_common+0xb0>
 8004560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004564:	4649      	mov	r1, r9
 8004566:	4638      	mov	r0, r7
 8004568:	47c0      	blx	r8
 800456a:	3001      	adds	r0, #1
 800456c:	d01e      	beq.n	80045ac <_printf_common+0xa4>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	6922      	ldr	r2, [r4, #16]
 8004572:	f003 0306 	and.w	r3, r3, #6
 8004576:	2b04      	cmp	r3, #4
 8004578:	bf02      	ittt	eq
 800457a:	68e5      	ldreq	r5, [r4, #12]
 800457c:	6833      	ldreq	r3, [r6, #0]
 800457e:	1aed      	subeq	r5, r5, r3
 8004580:	68a3      	ldr	r3, [r4, #8]
 8004582:	bf0c      	ite	eq
 8004584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004588:	2500      	movne	r5, #0
 800458a:	4293      	cmp	r3, r2
 800458c:	bfc4      	itt	gt
 800458e:	1a9b      	subgt	r3, r3, r2
 8004590:	18ed      	addgt	r5, r5, r3
 8004592:	2600      	movs	r6, #0
 8004594:	341a      	adds	r4, #26
 8004596:	42b5      	cmp	r5, r6
 8004598:	d11a      	bne.n	80045d0 <_printf_common+0xc8>
 800459a:	2000      	movs	r0, #0
 800459c:	e008      	b.n	80045b0 <_printf_common+0xa8>
 800459e:	2301      	movs	r3, #1
 80045a0:	4652      	mov	r2, sl
 80045a2:	4649      	mov	r1, r9
 80045a4:	4638      	mov	r0, r7
 80045a6:	47c0      	blx	r8
 80045a8:	3001      	adds	r0, #1
 80045aa:	d103      	bne.n	80045b4 <_printf_common+0xac>
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	3501      	adds	r5, #1
 80045b6:	e7c6      	b.n	8004546 <_printf_common+0x3e>
 80045b8:	18e1      	adds	r1, r4, r3
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	2030      	movs	r0, #48	; 0x30
 80045be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045c2:	4422      	add	r2, r4
 80045c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045cc:	3302      	adds	r3, #2
 80045ce:	e7c7      	b.n	8004560 <_printf_common+0x58>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4622      	mov	r2, r4
 80045d4:	4649      	mov	r1, r9
 80045d6:	4638      	mov	r0, r7
 80045d8:	47c0      	blx	r8
 80045da:	3001      	adds	r0, #1
 80045dc:	d0e6      	beq.n	80045ac <_printf_common+0xa4>
 80045de:	3601      	adds	r6, #1
 80045e0:	e7d9      	b.n	8004596 <_printf_common+0x8e>
	...

080045e4 <_printf_i>:
 80045e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e8:	7e0f      	ldrb	r7, [r1, #24]
 80045ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045ec:	2f78      	cmp	r7, #120	; 0x78
 80045ee:	4691      	mov	r9, r2
 80045f0:	4680      	mov	r8, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	469a      	mov	sl, r3
 80045f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045fa:	d807      	bhi.n	800460c <_printf_i+0x28>
 80045fc:	2f62      	cmp	r7, #98	; 0x62
 80045fe:	d80a      	bhi.n	8004616 <_printf_i+0x32>
 8004600:	2f00      	cmp	r7, #0
 8004602:	f000 80d4 	beq.w	80047ae <_printf_i+0x1ca>
 8004606:	2f58      	cmp	r7, #88	; 0x58
 8004608:	f000 80c0 	beq.w	800478c <_printf_i+0x1a8>
 800460c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004614:	e03a      	b.n	800468c <_printf_i+0xa8>
 8004616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800461a:	2b15      	cmp	r3, #21
 800461c:	d8f6      	bhi.n	800460c <_printf_i+0x28>
 800461e:	a101      	add	r1, pc, #4	; (adr r1, 8004624 <_printf_i+0x40>)
 8004620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004624:	0800467d 	.word	0x0800467d
 8004628:	08004691 	.word	0x08004691
 800462c:	0800460d 	.word	0x0800460d
 8004630:	0800460d 	.word	0x0800460d
 8004634:	0800460d 	.word	0x0800460d
 8004638:	0800460d 	.word	0x0800460d
 800463c:	08004691 	.word	0x08004691
 8004640:	0800460d 	.word	0x0800460d
 8004644:	0800460d 	.word	0x0800460d
 8004648:	0800460d 	.word	0x0800460d
 800464c:	0800460d 	.word	0x0800460d
 8004650:	08004795 	.word	0x08004795
 8004654:	080046bd 	.word	0x080046bd
 8004658:	0800474f 	.word	0x0800474f
 800465c:	0800460d 	.word	0x0800460d
 8004660:	0800460d 	.word	0x0800460d
 8004664:	080047b7 	.word	0x080047b7
 8004668:	0800460d 	.word	0x0800460d
 800466c:	080046bd 	.word	0x080046bd
 8004670:	0800460d 	.word	0x0800460d
 8004674:	0800460d 	.word	0x0800460d
 8004678:	08004757 	.word	0x08004757
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	1d1a      	adds	r2, r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	602a      	str	r2, [r5, #0]
 8004684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800468c:	2301      	movs	r3, #1
 800468e:	e09f      	b.n	80047d0 <_printf_i+0x1ec>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	682b      	ldr	r3, [r5, #0]
 8004694:	0607      	lsls	r7, r0, #24
 8004696:	f103 0104 	add.w	r1, r3, #4
 800469a:	6029      	str	r1, [r5, #0]
 800469c:	d501      	bpl.n	80046a2 <_printf_i+0xbe>
 800469e:	681e      	ldr	r6, [r3, #0]
 80046a0:	e003      	b.n	80046aa <_printf_i+0xc6>
 80046a2:	0646      	lsls	r6, r0, #25
 80046a4:	d5fb      	bpl.n	800469e <_printf_i+0xba>
 80046a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	da03      	bge.n	80046b6 <_printf_i+0xd2>
 80046ae:	232d      	movs	r3, #45	; 0x2d
 80046b0:	4276      	negs	r6, r6
 80046b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b6:	485a      	ldr	r0, [pc, #360]	; (8004820 <_printf_i+0x23c>)
 80046b8:	230a      	movs	r3, #10
 80046ba:	e012      	b.n	80046e2 <_printf_i+0xfe>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	6820      	ldr	r0, [r4, #0]
 80046c0:	1d19      	adds	r1, r3, #4
 80046c2:	6029      	str	r1, [r5, #0]
 80046c4:	0605      	lsls	r5, r0, #24
 80046c6:	d501      	bpl.n	80046cc <_printf_i+0xe8>
 80046c8:	681e      	ldr	r6, [r3, #0]
 80046ca:	e002      	b.n	80046d2 <_printf_i+0xee>
 80046cc:	0641      	lsls	r1, r0, #25
 80046ce:	d5fb      	bpl.n	80046c8 <_printf_i+0xe4>
 80046d0:	881e      	ldrh	r6, [r3, #0]
 80046d2:	4853      	ldr	r0, [pc, #332]	; (8004820 <_printf_i+0x23c>)
 80046d4:	2f6f      	cmp	r7, #111	; 0x6f
 80046d6:	bf0c      	ite	eq
 80046d8:	2308      	moveq	r3, #8
 80046da:	230a      	movne	r3, #10
 80046dc:	2100      	movs	r1, #0
 80046de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046e2:	6865      	ldr	r5, [r4, #4]
 80046e4:	60a5      	str	r5, [r4, #8]
 80046e6:	2d00      	cmp	r5, #0
 80046e8:	bfa2      	ittt	ge
 80046ea:	6821      	ldrge	r1, [r4, #0]
 80046ec:	f021 0104 	bicge.w	r1, r1, #4
 80046f0:	6021      	strge	r1, [r4, #0]
 80046f2:	b90e      	cbnz	r6, 80046f8 <_printf_i+0x114>
 80046f4:	2d00      	cmp	r5, #0
 80046f6:	d04b      	beq.n	8004790 <_printf_i+0x1ac>
 80046f8:	4615      	mov	r5, r2
 80046fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80046fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004702:	5dc7      	ldrb	r7, [r0, r7]
 8004704:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004708:	4637      	mov	r7, r6
 800470a:	42bb      	cmp	r3, r7
 800470c:	460e      	mov	r6, r1
 800470e:	d9f4      	bls.n	80046fa <_printf_i+0x116>
 8004710:	2b08      	cmp	r3, #8
 8004712:	d10b      	bne.n	800472c <_printf_i+0x148>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	07de      	lsls	r6, r3, #31
 8004718:	d508      	bpl.n	800472c <_printf_i+0x148>
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	6861      	ldr	r1, [r4, #4]
 800471e:	4299      	cmp	r1, r3
 8004720:	bfde      	ittt	le
 8004722:	2330      	movle	r3, #48	; 0x30
 8004724:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004728:	f105 35ff 	addle.w	r5, r5, #4294967295
 800472c:	1b52      	subs	r2, r2, r5
 800472e:	6122      	str	r2, [r4, #16]
 8004730:	f8cd a000 	str.w	sl, [sp]
 8004734:	464b      	mov	r3, r9
 8004736:	aa03      	add	r2, sp, #12
 8004738:	4621      	mov	r1, r4
 800473a:	4640      	mov	r0, r8
 800473c:	f7ff fee4 	bl	8004508 <_printf_common>
 8004740:	3001      	adds	r0, #1
 8004742:	d14a      	bne.n	80047da <_printf_i+0x1f6>
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	b004      	add	sp, #16
 800474a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	f043 0320 	orr.w	r3, r3, #32
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	4833      	ldr	r0, [pc, #204]	; (8004824 <_printf_i+0x240>)
 8004758:	2778      	movs	r7, #120	; 0x78
 800475a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	6829      	ldr	r1, [r5, #0]
 8004762:	061f      	lsls	r7, r3, #24
 8004764:	f851 6b04 	ldr.w	r6, [r1], #4
 8004768:	d402      	bmi.n	8004770 <_printf_i+0x18c>
 800476a:	065f      	lsls	r7, r3, #25
 800476c:	bf48      	it	mi
 800476e:	b2b6      	uxthmi	r6, r6
 8004770:	07df      	lsls	r7, r3, #31
 8004772:	bf48      	it	mi
 8004774:	f043 0320 	orrmi.w	r3, r3, #32
 8004778:	6029      	str	r1, [r5, #0]
 800477a:	bf48      	it	mi
 800477c:	6023      	strmi	r3, [r4, #0]
 800477e:	b91e      	cbnz	r6, 8004788 <_printf_i+0x1a4>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	f023 0320 	bic.w	r3, r3, #32
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	2310      	movs	r3, #16
 800478a:	e7a7      	b.n	80046dc <_printf_i+0xf8>
 800478c:	4824      	ldr	r0, [pc, #144]	; (8004820 <_printf_i+0x23c>)
 800478e:	e7e4      	b.n	800475a <_printf_i+0x176>
 8004790:	4615      	mov	r5, r2
 8004792:	e7bd      	b.n	8004710 <_printf_i+0x12c>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	6826      	ldr	r6, [r4, #0]
 8004798:	6961      	ldr	r1, [r4, #20]
 800479a:	1d18      	adds	r0, r3, #4
 800479c:	6028      	str	r0, [r5, #0]
 800479e:	0635      	lsls	r5, r6, #24
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	d501      	bpl.n	80047a8 <_printf_i+0x1c4>
 80047a4:	6019      	str	r1, [r3, #0]
 80047a6:	e002      	b.n	80047ae <_printf_i+0x1ca>
 80047a8:	0670      	lsls	r0, r6, #25
 80047aa:	d5fb      	bpl.n	80047a4 <_printf_i+0x1c0>
 80047ac:	8019      	strh	r1, [r3, #0]
 80047ae:	2300      	movs	r3, #0
 80047b0:	6123      	str	r3, [r4, #16]
 80047b2:	4615      	mov	r5, r2
 80047b4:	e7bc      	b.n	8004730 <_printf_i+0x14c>
 80047b6:	682b      	ldr	r3, [r5, #0]
 80047b8:	1d1a      	adds	r2, r3, #4
 80047ba:	602a      	str	r2, [r5, #0]
 80047bc:	681d      	ldr	r5, [r3, #0]
 80047be:	6862      	ldr	r2, [r4, #4]
 80047c0:	2100      	movs	r1, #0
 80047c2:	4628      	mov	r0, r5
 80047c4:	f7fb fd04 	bl	80001d0 <memchr>
 80047c8:	b108      	cbz	r0, 80047ce <_printf_i+0x1ea>
 80047ca:	1b40      	subs	r0, r0, r5
 80047cc:	6060      	str	r0, [r4, #4]
 80047ce:	6863      	ldr	r3, [r4, #4]
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	2300      	movs	r3, #0
 80047d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d8:	e7aa      	b.n	8004730 <_printf_i+0x14c>
 80047da:	6923      	ldr	r3, [r4, #16]
 80047dc:	462a      	mov	r2, r5
 80047de:	4649      	mov	r1, r9
 80047e0:	4640      	mov	r0, r8
 80047e2:	47d0      	blx	sl
 80047e4:	3001      	adds	r0, #1
 80047e6:	d0ad      	beq.n	8004744 <_printf_i+0x160>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	079b      	lsls	r3, r3, #30
 80047ec:	d413      	bmi.n	8004816 <_printf_i+0x232>
 80047ee:	68e0      	ldr	r0, [r4, #12]
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	4298      	cmp	r0, r3
 80047f4:	bfb8      	it	lt
 80047f6:	4618      	movlt	r0, r3
 80047f8:	e7a6      	b.n	8004748 <_printf_i+0x164>
 80047fa:	2301      	movs	r3, #1
 80047fc:	4632      	mov	r2, r6
 80047fe:	4649      	mov	r1, r9
 8004800:	4640      	mov	r0, r8
 8004802:	47d0      	blx	sl
 8004804:	3001      	adds	r0, #1
 8004806:	d09d      	beq.n	8004744 <_printf_i+0x160>
 8004808:	3501      	adds	r5, #1
 800480a:	68e3      	ldr	r3, [r4, #12]
 800480c:	9903      	ldr	r1, [sp, #12]
 800480e:	1a5b      	subs	r3, r3, r1
 8004810:	42ab      	cmp	r3, r5
 8004812:	dcf2      	bgt.n	80047fa <_printf_i+0x216>
 8004814:	e7eb      	b.n	80047ee <_printf_i+0x20a>
 8004816:	2500      	movs	r5, #0
 8004818:	f104 0619 	add.w	r6, r4, #25
 800481c:	e7f5      	b.n	800480a <_printf_i+0x226>
 800481e:	bf00      	nop
 8004820:	08006d6e 	.word	0x08006d6e
 8004824:	08006d7f 	.word	0x08006d7f

08004828 <std>:
 8004828:	2300      	movs	r3, #0
 800482a:	b510      	push	{r4, lr}
 800482c:	4604      	mov	r4, r0
 800482e:	e9c0 3300 	strd	r3, r3, [r0]
 8004832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004836:	6083      	str	r3, [r0, #8]
 8004838:	8181      	strh	r1, [r0, #12]
 800483a:	6643      	str	r3, [r0, #100]	; 0x64
 800483c:	81c2      	strh	r2, [r0, #14]
 800483e:	6183      	str	r3, [r0, #24]
 8004840:	4619      	mov	r1, r3
 8004842:	2208      	movs	r2, #8
 8004844:	305c      	adds	r0, #92	; 0x5c
 8004846:	f000 f914 	bl	8004a72 <memset>
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <std+0x58>)
 800484c:	6263      	str	r3, [r4, #36]	; 0x24
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <std+0x5c>)
 8004850:	62a3      	str	r3, [r4, #40]	; 0x28
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <std+0x60>)
 8004854:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <std+0x64>)
 8004858:	6323      	str	r3, [r4, #48]	; 0x30
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <std+0x68>)
 800485c:	6224      	str	r4, [r4, #32]
 800485e:	429c      	cmp	r4, r3
 8004860:	d006      	beq.n	8004870 <std+0x48>
 8004862:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004866:	4294      	cmp	r4, r2
 8004868:	d002      	beq.n	8004870 <std+0x48>
 800486a:	33d0      	adds	r3, #208	; 0xd0
 800486c:	429c      	cmp	r4, r3
 800486e:	d105      	bne.n	800487c <std+0x54>
 8004870:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004878:	f000 b978 	b.w	8004b6c <__retarget_lock_init_recursive>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	bf00      	nop
 8004880:	080049ed 	.word	0x080049ed
 8004884:	08004a0f 	.word	0x08004a0f
 8004888:	08004a47 	.word	0x08004a47
 800488c:	08004a6b 	.word	0x08004a6b
 8004890:	200003f4 	.word	0x200003f4

08004894 <stdio_exit_handler>:
 8004894:	4a02      	ldr	r2, [pc, #8]	; (80048a0 <stdio_exit_handler+0xc>)
 8004896:	4903      	ldr	r1, [pc, #12]	; (80048a4 <stdio_exit_handler+0x10>)
 8004898:	4803      	ldr	r0, [pc, #12]	; (80048a8 <stdio_exit_handler+0x14>)
 800489a:	f000 b869 	b.w	8004970 <_fwalk_sglue>
 800489e:	bf00      	nop
 80048a0:	2000000c 	.word	0x2000000c
 80048a4:	08006521 	.word	0x08006521
 80048a8:	20000018 	.word	0x20000018

080048ac <cleanup_stdio>:
 80048ac:	6841      	ldr	r1, [r0, #4]
 80048ae:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <cleanup_stdio+0x34>)
 80048b0:	4299      	cmp	r1, r3
 80048b2:	b510      	push	{r4, lr}
 80048b4:	4604      	mov	r4, r0
 80048b6:	d001      	beq.n	80048bc <cleanup_stdio+0x10>
 80048b8:	f001 fe32 	bl	8006520 <_fflush_r>
 80048bc:	68a1      	ldr	r1, [r4, #8]
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <cleanup_stdio+0x38>)
 80048c0:	4299      	cmp	r1, r3
 80048c2:	d002      	beq.n	80048ca <cleanup_stdio+0x1e>
 80048c4:	4620      	mov	r0, r4
 80048c6:	f001 fe2b 	bl	8006520 <_fflush_r>
 80048ca:	68e1      	ldr	r1, [r4, #12]
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <cleanup_stdio+0x3c>)
 80048ce:	4299      	cmp	r1, r3
 80048d0:	d004      	beq.n	80048dc <cleanup_stdio+0x30>
 80048d2:	4620      	mov	r0, r4
 80048d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d8:	f001 be22 	b.w	8006520 <_fflush_r>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	bf00      	nop
 80048e0:	200003f4 	.word	0x200003f4
 80048e4:	2000045c 	.word	0x2000045c
 80048e8:	200004c4 	.word	0x200004c4

080048ec <global_stdio_init.part.0>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <global_stdio_init.part.0+0x30>)
 80048f0:	4c0b      	ldr	r4, [pc, #44]	; (8004920 <global_stdio_init.part.0+0x34>)
 80048f2:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <global_stdio_init.part.0+0x38>)
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	4620      	mov	r0, r4
 80048f8:	2200      	movs	r2, #0
 80048fa:	2104      	movs	r1, #4
 80048fc:	f7ff ff94 	bl	8004828 <std>
 8004900:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004904:	2201      	movs	r2, #1
 8004906:	2109      	movs	r1, #9
 8004908:	f7ff ff8e 	bl	8004828 <std>
 800490c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004910:	2202      	movs	r2, #2
 8004912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004916:	2112      	movs	r1, #18
 8004918:	f7ff bf86 	b.w	8004828 <std>
 800491c:	2000052c 	.word	0x2000052c
 8004920:	200003f4 	.word	0x200003f4
 8004924:	08004895 	.word	0x08004895

08004928 <__sfp_lock_acquire>:
 8004928:	4801      	ldr	r0, [pc, #4]	; (8004930 <__sfp_lock_acquire+0x8>)
 800492a:	f000 b920 	b.w	8004b6e <__retarget_lock_acquire_recursive>
 800492e:	bf00      	nop
 8004930:	20000535 	.word	0x20000535

08004934 <__sfp_lock_release>:
 8004934:	4801      	ldr	r0, [pc, #4]	; (800493c <__sfp_lock_release+0x8>)
 8004936:	f000 b91b 	b.w	8004b70 <__retarget_lock_release_recursive>
 800493a:	bf00      	nop
 800493c:	20000535 	.word	0x20000535

08004940 <__sinit>:
 8004940:	b510      	push	{r4, lr}
 8004942:	4604      	mov	r4, r0
 8004944:	f7ff fff0 	bl	8004928 <__sfp_lock_acquire>
 8004948:	6a23      	ldr	r3, [r4, #32]
 800494a:	b11b      	cbz	r3, 8004954 <__sinit+0x14>
 800494c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004950:	f7ff bff0 	b.w	8004934 <__sfp_lock_release>
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <__sinit+0x28>)
 8004956:	6223      	str	r3, [r4, #32]
 8004958:	4b04      	ldr	r3, [pc, #16]	; (800496c <__sinit+0x2c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f5      	bne.n	800494c <__sinit+0xc>
 8004960:	f7ff ffc4 	bl	80048ec <global_stdio_init.part.0>
 8004964:	e7f2      	b.n	800494c <__sinit+0xc>
 8004966:	bf00      	nop
 8004968:	080048ad 	.word	0x080048ad
 800496c:	2000052c 	.word	0x2000052c

08004970 <_fwalk_sglue>:
 8004970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004974:	4607      	mov	r7, r0
 8004976:	4688      	mov	r8, r1
 8004978:	4614      	mov	r4, r2
 800497a:	2600      	movs	r6, #0
 800497c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004980:	f1b9 0901 	subs.w	r9, r9, #1
 8004984:	d505      	bpl.n	8004992 <_fwalk_sglue+0x22>
 8004986:	6824      	ldr	r4, [r4, #0]
 8004988:	2c00      	cmp	r4, #0
 800498a:	d1f7      	bne.n	800497c <_fwalk_sglue+0xc>
 800498c:	4630      	mov	r0, r6
 800498e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004992:	89ab      	ldrh	r3, [r5, #12]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d907      	bls.n	80049a8 <_fwalk_sglue+0x38>
 8004998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800499c:	3301      	adds	r3, #1
 800499e:	d003      	beq.n	80049a8 <_fwalk_sglue+0x38>
 80049a0:	4629      	mov	r1, r5
 80049a2:	4638      	mov	r0, r7
 80049a4:	47c0      	blx	r8
 80049a6:	4306      	orrs	r6, r0
 80049a8:	3568      	adds	r5, #104	; 0x68
 80049aa:	e7e9      	b.n	8004980 <_fwalk_sglue+0x10>

080049ac <siprintf>:
 80049ac:	b40e      	push	{r1, r2, r3}
 80049ae:	b500      	push	{lr}
 80049b0:	b09c      	sub	sp, #112	; 0x70
 80049b2:	ab1d      	add	r3, sp, #116	; 0x74
 80049b4:	9002      	str	r0, [sp, #8]
 80049b6:	9006      	str	r0, [sp, #24]
 80049b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049bc:	4809      	ldr	r0, [pc, #36]	; (80049e4 <siprintf+0x38>)
 80049be:	9107      	str	r1, [sp, #28]
 80049c0:	9104      	str	r1, [sp, #16]
 80049c2:	4909      	ldr	r1, [pc, #36]	; (80049e8 <siprintf+0x3c>)
 80049c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049c8:	9105      	str	r1, [sp, #20]
 80049ca:	6800      	ldr	r0, [r0, #0]
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	a902      	add	r1, sp, #8
 80049d0:	f001 fc22 	bl	8006218 <_svfiprintf_r>
 80049d4:	9b02      	ldr	r3, [sp, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	b01c      	add	sp, #112	; 0x70
 80049dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80049e0:	b003      	add	sp, #12
 80049e2:	4770      	bx	lr
 80049e4:	20000064 	.word	0x20000064
 80049e8:	ffff0208 	.word	0xffff0208

080049ec <__sread>:
 80049ec:	b510      	push	{r4, lr}
 80049ee:	460c      	mov	r4, r1
 80049f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f4:	f000 f86c 	bl	8004ad0 <_read_r>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	bfab      	itete	ge
 80049fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004a00:	181b      	addge	r3, r3, r0
 8004a02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a06:	bfac      	ite	ge
 8004a08:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a0a:	81a3      	strhlt	r3, [r4, #12]
 8004a0c:	bd10      	pop	{r4, pc}

08004a0e <__swrite>:
 8004a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a12:	461f      	mov	r7, r3
 8004a14:	898b      	ldrh	r3, [r1, #12]
 8004a16:	05db      	lsls	r3, r3, #23
 8004a18:	4605      	mov	r5, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	4616      	mov	r6, r2
 8004a1e:	d505      	bpl.n	8004a2c <__swrite+0x1e>
 8004a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a24:	2302      	movs	r3, #2
 8004a26:	2200      	movs	r2, #0
 8004a28:	f000 f840 	bl	8004aac <_lseek_r>
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a36:	81a3      	strh	r3, [r4, #12]
 8004a38:	4632      	mov	r2, r6
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a42:	f000 b857 	b.w	8004af4 <_write_r>

08004a46 <__sseek>:
 8004a46:	b510      	push	{r4, lr}
 8004a48:	460c      	mov	r4, r1
 8004a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4e:	f000 f82d 	bl	8004aac <_lseek_r>
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	bf15      	itete	ne
 8004a58:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a62:	81a3      	strheq	r3, [r4, #12]
 8004a64:	bf18      	it	ne
 8004a66:	81a3      	strhne	r3, [r4, #12]
 8004a68:	bd10      	pop	{r4, pc}

08004a6a <__sclose>:
 8004a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6e:	f000 b80d 	b.w	8004a8c <_close_r>

08004a72 <memset>:
 8004a72:	4402      	add	r2, r0
 8004a74:	4603      	mov	r3, r0
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d100      	bne.n	8004a7c <memset+0xa>
 8004a7a:	4770      	bx	lr
 8004a7c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a80:	e7f9      	b.n	8004a76 <memset+0x4>
	...

08004a84 <_localeconv_r>:
 8004a84:	4800      	ldr	r0, [pc, #0]	; (8004a88 <_localeconv_r+0x4>)
 8004a86:	4770      	bx	lr
 8004a88:	20000158 	.word	0x20000158

08004a8c <_close_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	4d06      	ldr	r5, [pc, #24]	; (8004aa8 <_close_r+0x1c>)
 8004a90:	2300      	movs	r3, #0
 8004a92:	4604      	mov	r4, r0
 8004a94:	4608      	mov	r0, r1
 8004a96:	602b      	str	r3, [r5, #0]
 8004a98:	f7fd f93f 	bl	8001d1a <_close>
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d102      	bne.n	8004aa6 <_close_r+0x1a>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	b103      	cbz	r3, 8004aa6 <_close_r+0x1a>
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	20000530 	.word	0x20000530

08004aac <_lseek_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4d07      	ldr	r5, [pc, #28]	; (8004acc <_lseek_r+0x20>)
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	602a      	str	r2, [r5, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f7fd f954 	bl	8001d68 <_lseek>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	d102      	bne.n	8004aca <_lseek_r+0x1e>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	b103      	cbz	r3, 8004aca <_lseek_r+0x1e>
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	bd38      	pop	{r3, r4, r5, pc}
 8004acc:	20000530 	.word	0x20000530

08004ad0 <_read_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4d07      	ldr	r5, [pc, #28]	; (8004af0 <_read_r+0x20>)
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	4611      	mov	r1, r2
 8004ada:	2200      	movs	r2, #0
 8004adc:	602a      	str	r2, [r5, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f7fd f8e2 	bl	8001ca8 <_read>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_read_r+0x1e>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_read_r+0x1e>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	20000530 	.word	0x20000530

08004af4 <_write_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d07      	ldr	r5, [pc, #28]	; (8004b14 <_write_r+0x20>)
 8004af8:	4604      	mov	r4, r0
 8004afa:	4608      	mov	r0, r1
 8004afc:	4611      	mov	r1, r2
 8004afe:	2200      	movs	r2, #0
 8004b00:	602a      	str	r2, [r5, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f7fd f8ed 	bl	8001ce2 <_write>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_write_r+0x1e>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_write_r+0x1e>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	20000530 	.word	0x20000530

08004b18 <__errno>:
 8004b18:	4b01      	ldr	r3, [pc, #4]	; (8004b20 <__errno+0x8>)
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000064 	.word	0x20000064

08004b24 <__libc_init_array>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	4d0d      	ldr	r5, [pc, #52]	; (8004b5c <__libc_init_array+0x38>)
 8004b28:	4c0d      	ldr	r4, [pc, #52]	; (8004b60 <__libc_init_array+0x3c>)
 8004b2a:	1b64      	subs	r4, r4, r5
 8004b2c:	10a4      	asrs	r4, r4, #2
 8004b2e:	2600      	movs	r6, #0
 8004b30:	42a6      	cmp	r6, r4
 8004b32:	d109      	bne.n	8004b48 <__libc_init_array+0x24>
 8004b34:	4d0b      	ldr	r5, [pc, #44]	; (8004b64 <__libc_init_array+0x40>)
 8004b36:	4c0c      	ldr	r4, [pc, #48]	; (8004b68 <__libc_init_array+0x44>)
 8004b38:	f002 f896 	bl	8006c68 <_init>
 8004b3c:	1b64      	subs	r4, r4, r5
 8004b3e:	10a4      	asrs	r4, r4, #2
 8004b40:	2600      	movs	r6, #0
 8004b42:	42a6      	cmp	r6, r4
 8004b44:	d105      	bne.n	8004b52 <__libc_init_array+0x2e>
 8004b46:	bd70      	pop	{r4, r5, r6, pc}
 8004b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4c:	4798      	blx	r3
 8004b4e:	3601      	adds	r6, #1
 8004b50:	e7ee      	b.n	8004b30 <__libc_init_array+0xc>
 8004b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b56:	4798      	blx	r3
 8004b58:	3601      	adds	r6, #1
 8004b5a:	e7f2      	b.n	8004b42 <__libc_init_array+0x1e>
 8004b5c:	080070d4 	.word	0x080070d4
 8004b60:	080070d4 	.word	0x080070d4
 8004b64:	080070d4 	.word	0x080070d4
 8004b68:	080070d8 	.word	0x080070d8

08004b6c <__retarget_lock_init_recursive>:
 8004b6c:	4770      	bx	lr

08004b6e <__retarget_lock_acquire_recursive>:
 8004b6e:	4770      	bx	lr

08004b70 <__retarget_lock_release_recursive>:
 8004b70:	4770      	bx	lr

08004b72 <quorem>:
 8004b72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b76:	6903      	ldr	r3, [r0, #16]
 8004b78:	690c      	ldr	r4, [r1, #16]
 8004b7a:	42a3      	cmp	r3, r4
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	db7e      	blt.n	8004c7e <quorem+0x10c>
 8004b80:	3c01      	subs	r4, #1
 8004b82:	f101 0814 	add.w	r8, r1, #20
 8004b86:	f100 0514 	add.w	r5, r0, #20
 8004b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ba4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ba8:	d331      	bcc.n	8004c0e <quorem+0x9c>
 8004baa:	f04f 0e00 	mov.w	lr, #0
 8004bae:	4640      	mov	r0, r8
 8004bb0:	46ac      	mov	ip, r5
 8004bb2:	46f2      	mov	sl, lr
 8004bb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bb8:	b293      	uxth	r3, r2
 8004bba:	fb06 e303 	mla	r3, r6, r3, lr
 8004bbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bc2:	0c1a      	lsrs	r2, r3, #16
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8004bca:	f8dc a000 	ldr.w	sl, [ip]
 8004bce:	fa13 f38a 	uxtah	r3, r3, sl
 8004bd2:	fb06 220e 	mla	r2, r6, lr, r2
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	9b00      	ldr	r3, [sp, #0]
 8004bda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bde:	b292      	uxth	r2, r2
 8004be0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004be4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004be8:	f8bd 3000 	ldrh.w	r3, [sp]
 8004bec:	4581      	cmp	r9, r0
 8004bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bf2:	f84c 3b04 	str.w	r3, [ip], #4
 8004bf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bfa:	d2db      	bcs.n	8004bb4 <quorem+0x42>
 8004bfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c00:	b92b      	cbnz	r3, 8004c0e <quorem+0x9c>
 8004c02:	9b01      	ldr	r3, [sp, #4]
 8004c04:	3b04      	subs	r3, #4
 8004c06:	429d      	cmp	r5, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	d32c      	bcc.n	8004c66 <quorem+0xf4>
 8004c0c:	613c      	str	r4, [r7, #16]
 8004c0e:	4638      	mov	r0, r7
 8004c10:	f001 f9a8 	bl	8005f64 <__mcmp>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	db22      	blt.n	8004c5e <quorem+0xec>
 8004c18:	3601      	adds	r6, #1
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c22:	f8d1 c000 	ldr.w	ip, [r1]
 8004c26:	b293      	uxth	r3, r2
 8004c28:	1ac3      	subs	r3, r0, r3
 8004c2a:	0c12      	lsrs	r2, r2, #16
 8004c2c:	fa13 f38c 	uxtah	r3, r3, ip
 8004c30:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004c34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c3e:	45c1      	cmp	r9, r8
 8004c40:	f841 3b04 	str.w	r3, [r1], #4
 8004c44:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c48:	d2e9      	bcs.n	8004c1e <quorem+0xac>
 8004c4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c52:	b922      	cbnz	r2, 8004c5e <quorem+0xec>
 8004c54:	3b04      	subs	r3, #4
 8004c56:	429d      	cmp	r5, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	d30a      	bcc.n	8004c72 <quorem+0x100>
 8004c5c:	613c      	str	r4, [r7, #16]
 8004c5e:	4630      	mov	r0, r6
 8004c60:	b003      	add	sp, #12
 8004c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	3b04      	subs	r3, #4
 8004c6a:	2a00      	cmp	r2, #0
 8004c6c:	d1ce      	bne.n	8004c0c <quorem+0x9a>
 8004c6e:	3c01      	subs	r4, #1
 8004c70:	e7c9      	b.n	8004c06 <quorem+0x94>
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	3b04      	subs	r3, #4
 8004c76:	2a00      	cmp	r2, #0
 8004c78:	d1f0      	bne.n	8004c5c <quorem+0xea>
 8004c7a:	3c01      	subs	r4, #1
 8004c7c:	e7eb      	b.n	8004c56 <quorem+0xe4>
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e7ee      	b.n	8004c60 <quorem+0xee>
 8004c82:	0000      	movs	r0, r0
 8004c84:	0000      	movs	r0, r0
	...

08004c88 <_dtoa_r>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	ed2d 8b04 	vpush	{d8-d9}
 8004c90:	69c5      	ldr	r5, [r0, #28]
 8004c92:	b093      	sub	sp, #76	; 0x4c
 8004c94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004c98:	ec57 6b10 	vmov	r6, r7, d0
 8004c9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ca0:	9107      	str	r1, [sp, #28]
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	920a      	str	r2, [sp, #40]	; 0x28
 8004ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ca8:	b975      	cbnz	r5, 8004cc8 <_dtoa_r+0x40>
 8004caa:	2010      	movs	r0, #16
 8004cac:	f000 fe2a 	bl	8005904 <malloc>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	61e0      	str	r0, [r4, #28]
 8004cb4:	b920      	cbnz	r0, 8004cc0 <_dtoa_r+0x38>
 8004cb6:	4bae      	ldr	r3, [pc, #696]	; (8004f70 <_dtoa_r+0x2e8>)
 8004cb8:	21ef      	movs	r1, #239	; 0xef
 8004cba:	48ae      	ldr	r0, [pc, #696]	; (8004f74 <_dtoa_r+0x2ec>)
 8004cbc:	f001 fc90 	bl	80065e0 <__assert_func>
 8004cc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004cc4:	6005      	str	r5, [r0, #0]
 8004cc6:	60c5      	str	r5, [r0, #12]
 8004cc8:	69e3      	ldr	r3, [r4, #28]
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	b151      	cbz	r1, 8004ce4 <_dtoa_r+0x5c>
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	604a      	str	r2, [r1, #4]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4093      	lsls	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f000 ff07 	bl	8005aec <_Bfree>
 8004cde:	69e3      	ldr	r3, [r4, #28]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	1e3b      	subs	r3, r7, #0
 8004ce6:	bfbb      	ittet	lt
 8004ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cec:	9303      	strlt	r3, [sp, #12]
 8004cee:	2300      	movge	r3, #0
 8004cf0:	2201      	movlt	r2, #1
 8004cf2:	bfac      	ite	ge
 8004cf4:	f8c8 3000 	strge.w	r3, [r8]
 8004cf8:	f8c8 2000 	strlt.w	r2, [r8]
 8004cfc:	4b9e      	ldr	r3, [pc, #632]	; (8004f78 <_dtoa_r+0x2f0>)
 8004cfe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004d02:	ea33 0308 	bics.w	r3, r3, r8
 8004d06:	d11b      	bne.n	8004d40 <_dtoa_r+0xb8>
 8004d08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004d14:	4333      	orrs	r3, r6
 8004d16:	f000 8593 	beq.w	8005840 <_dtoa_r+0xbb8>
 8004d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d1c:	b963      	cbnz	r3, 8004d38 <_dtoa_r+0xb0>
 8004d1e:	4b97      	ldr	r3, [pc, #604]	; (8004f7c <_dtoa_r+0x2f4>)
 8004d20:	e027      	b.n	8004d72 <_dtoa_r+0xea>
 8004d22:	4b97      	ldr	r3, [pc, #604]	; (8004f80 <_dtoa_r+0x2f8>)
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	9800      	ldr	r0, [sp, #0]
 8004d2e:	b013      	add	sp, #76	; 0x4c
 8004d30:	ecbd 8b04 	vpop	{d8-d9}
 8004d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d38:	4b90      	ldr	r3, [pc, #576]	; (8004f7c <_dtoa_r+0x2f4>)
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	3303      	adds	r3, #3
 8004d3e:	e7f3      	b.n	8004d28 <_dtoa_r+0xa0>
 8004d40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d44:	2200      	movs	r2, #0
 8004d46:	ec51 0b17 	vmov	r0, r1, d7
 8004d4a:	eeb0 8a47 	vmov.f32	s16, s14
 8004d4e:	eef0 8a67 	vmov.f32	s17, s15
 8004d52:	2300      	movs	r3, #0
 8004d54:	f7fb feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d58:	4681      	mov	r9, r0
 8004d5a:	b160      	cbz	r0, 8004d76 <_dtoa_r+0xee>
 8004d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d5e:	2301      	movs	r3, #1
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8568 	beq.w	800583a <_dtoa_r+0xbb2>
 8004d6a:	4b86      	ldr	r3, [pc, #536]	; (8004f84 <_dtoa_r+0x2fc>)
 8004d6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	e7da      	b.n	8004d2c <_dtoa_r+0xa4>
 8004d76:	aa10      	add	r2, sp, #64	; 0x40
 8004d78:	a911      	add	r1, sp, #68	; 0x44
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	eeb0 0a48 	vmov.f32	s0, s16
 8004d80:	eef0 0a68 	vmov.f32	s1, s17
 8004d84:	f001 f994 	bl	80060b0 <__d2b>
 8004d88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	2d00      	cmp	r5, #0
 8004d90:	d07f      	beq.n	8004e92 <_dtoa_r+0x20a>
 8004d92:	ee18 3a90 	vmov	r3, s17
 8004d96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004d9e:	ec51 0b18 	vmov	r0, r1, d8
 8004da2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004da6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004daa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004dae:	4619      	mov	r1, r3
 8004db0:	2200      	movs	r2, #0
 8004db2:	4b75      	ldr	r3, [pc, #468]	; (8004f88 <_dtoa_r+0x300>)
 8004db4:	f7fb fa68 	bl	8000288 <__aeabi_dsub>
 8004db8:	a367      	add	r3, pc, #412	; (adr r3, 8004f58 <_dtoa_r+0x2d0>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fc1b 	bl	80005f8 <__aeabi_dmul>
 8004dc2:	a367      	add	r3, pc, #412	; (adr r3, 8004f60 <_dtoa_r+0x2d8>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fa60 	bl	800028c <__adddf3>
 8004dcc:	4606      	mov	r6, r0
 8004dce:	4628      	mov	r0, r5
 8004dd0:	460f      	mov	r7, r1
 8004dd2:	f7fb fba7 	bl	8000524 <__aeabi_i2d>
 8004dd6:	a364      	add	r3, pc, #400	; (adr r3, 8004f68 <_dtoa_r+0x2e0>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb fc0c 	bl	80005f8 <__aeabi_dmul>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4630      	mov	r0, r6
 8004de6:	4639      	mov	r1, r7
 8004de8:	f7fb fa50 	bl	800028c <__adddf3>
 8004dec:	4606      	mov	r6, r0
 8004dee:	460f      	mov	r7, r1
 8004df0:	f7fb feb2 	bl	8000b58 <__aeabi_d2iz>
 8004df4:	2200      	movs	r2, #0
 8004df6:	4683      	mov	fp, r0
 8004df8:	2300      	movs	r3, #0
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	4639      	mov	r1, r7
 8004dfe:	f7fb fe6d 	bl	8000adc <__aeabi_dcmplt>
 8004e02:	b148      	cbz	r0, 8004e18 <_dtoa_r+0x190>
 8004e04:	4658      	mov	r0, fp
 8004e06:	f7fb fb8d 	bl	8000524 <__aeabi_i2d>
 8004e0a:	4632      	mov	r2, r6
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	f7fb fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e12:	b908      	cbnz	r0, 8004e18 <_dtoa_r+0x190>
 8004e14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e18:	f1bb 0f16 	cmp.w	fp, #22
 8004e1c:	d857      	bhi.n	8004ece <_dtoa_r+0x246>
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	; (8004f8c <_dtoa_r+0x304>)
 8004e20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	ec51 0b18 	vmov	r0, r1, d8
 8004e2c:	f7fb fe56 	bl	8000adc <__aeabi_dcmplt>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d04e      	beq.n	8004ed2 <_dtoa_r+0x24a>
 8004e34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e38:	2300      	movs	r3, #0
 8004e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8004e3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e3e:	1b5b      	subs	r3, r3, r5
 8004e40:	1e5a      	subs	r2, r3, #1
 8004e42:	bf45      	ittet	mi
 8004e44:	f1c3 0301 	rsbmi	r3, r3, #1
 8004e48:	9305      	strmi	r3, [sp, #20]
 8004e4a:	2300      	movpl	r3, #0
 8004e4c:	2300      	movmi	r3, #0
 8004e4e:	9206      	str	r2, [sp, #24]
 8004e50:	bf54      	ite	pl
 8004e52:	9305      	strpl	r3, [sp, #20]
 8004e54:	9306      	strmi	r3, [sp, #24]
 8004e56:	f1bb 0f00 	cmp.w	fp, #0
 8004e5a:	db3c      	blt.n	8004ed6 <_dtoa_r+0x24e>
 8004e5c:	9b06      	ldr	r3, [sp, #24]
 8004e5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004e62:	445b      	add	r3, fp
 8004e64:	9306      	str	r3, [sp, #24]
 8004e66:	2300      	movs	r3, #0
 8004e68:	9308      	str	r3, [sp, #32]
 8004e6a:	9b07      	ldr	r3, [sp, #28]
 8004e6c:	2b09      	cmp	r3, #9
 8004e6e:	d868      	bhi.n	8004f42 <_dtoa_r+0x2ba>
 8004e70:	2b05      	cmp	r3, #5
 8004e72:	bfc4      	itt	gt
 8004e74:	3b04      	subgt	r3, #4
 8004e76:	9307      	strgt	r3, [sp, #28]
 8004e78:	9b07      	ldr	r3, [sp, #28]
 8004e7a:	f1a3 0302 	sub.w	r3, r3, #2
 8004e7e:	bfcc      	ite	gt
 8004e80:	2500      	movgt	r5, #0
 8004e82:	2501      	movle	r5, #1
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	f200 8085 	bhi.w	8004f94 <_dtoa_r+0x30c>
 8004e8a:	e8df f003 	tbb	[pc, r3]
 8004e8e:	3b2e      	.short	0x3b2e
 8004e90:	5839      	.short	0x5839
 8004e92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004e96:	441d      	add	r5, r3
 8004e98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	bfc1      	itttt	gt
 8004ea0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ea4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004ea8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004eac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004eb0:	bfd6      	itet	le
 8004eb2:	f1c3 0320 	rsble	r3, r3, #32
 8004eb6:	ea48 0003 	orrgt.w	r0, r8, r3
 8004eba:	fa06 f003 	lslle.w	r0, r6, r3
 8004ebe:	f7fb fb21 	bl	8000504 <__aeabi_ui2d>
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004ec8:	3d01      	subs	r5, #1
 8004eca:	920e      	str	r2, [sp, #56]	; 0x38
 8004ecc:	e76f      	b.n	8004dae <_dtoa_r+0x126>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e7b3      	b.n	8004e3a <_dtoa_r+0x1b2>
 8004ed2:	900c      	str	r0, [sp, #48]	; 0x30
 8004ed4:	e7b2      	b.n	8004e3c <_dtoa_r+0x1b4>
 8004ed6:	9b05      	ldr	r3, [sp, #20]
 8004ed8:	eba3 030b 	sub.w	r3, r3, fp
 8004edc:	9305      	str	r3, [sp, #20]
 8004ede:	f1cb 0300 	rsb	r3, fp, #0
 8004ee2:	9308      	str	r3, [sp, #32]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ee8:	e7bf      	b.n	8004e6a <_dtoa_r+0x1e2>
 8004eea:	2300      	movs	r3, #0
 8004eec:	9309      	str	r3, [sp, #36]	; 0x24
 8004eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	dc52      	bgt.n	8004f9a <_dtoa_r+0x312>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	9304      	str	r3, [sp, #16]
 8004efa:	461a      	mov	r2, r3
 8004efc:	920a      	str	r2, [sp, #40]	; 0x28
 8004efe:	e00b      	b.n	8004f18 <_dtoa_r+0x290>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e7f3      	b.n	8004eec <_dtoa_r+0x264>
 8004f04:	2300      	movs	r3, #0
 8004f06:	9309      	str	r3, [sp, #36]	; 0x24
 8004f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f0a:	445b      	add	r3, fp
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	bfb8      	it	lt
 8004f16:	2301      	movlt	r3, #1
 8004f18:	69e0      	ldr	r0, [r4, #28]
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	f102 0614 	add.w	r6, r2, #20
 8004f22:	429e      	cmp	r6, r3
 8004f24:	d93d      	bls.n	8004fa2 <_dtoa_r+0x31a>
 8004f26:	6041      	str	r1, [r0, #4]
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f000 fd9f 	bl	8005a6c <_Balloc>
 8004f2e:	9000      	str	r0, [sp, #0]
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d139      	bne.n	8004fa8 <_dtoa_r+0x320>
 8004f34:	4b16      	ldr	r3, [pc, #88]	; (8004f90 <_dtoa_r+0x308>)
 8004f36:	4602      	mov	r2, r0
 8004f38:	f240 11af 	movw	r1, #431	; 0x1af
 8004f3c:	e6bd      	b.n	8004cba <_dtoa_r+0x32>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e7e1      	b.n	8004f06 <_dtoa_r+0x27e>
 8004f42:	2501      	movs	r5, #1
 8004f44:	2300      	movs	r3, #0
 8004f46:	9307      	str	r3, [sp, #28]
 8004f48:	9509      	str	r5, [sp, #36]	; 0x24
 8004f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	9304      	str	r3, [sp, #16]
 8004f52:	2200      	movs	r2, #0
 8004f54:	2312      	movs	r3, #18
 8004f56:	e7d1      	b.n	8004efc <_dtoa_r+0x274>
 8004f58:	636f4361 	.word	0x636f4361
 8004f5c:	3fd287a7 	.word	0x3fd287a7
 8004f60:	8b60c8b3 	.word	0x8b60c8b3
 8004f64:	3fc68a28 	.word	0x3fc68a28
 8004f68:	509f79fb 	.word	0x509f79fb
 8004f6c:	3fd34413 	.word	0x3fd34413
 8004f70:	08006d9d 	.word	0x08006d9d
 8004f74:	08006db4 	.word	0x08006db4
 8004f78:	7ff00000 	.word	0x7ff00000
 8004f7c:	08006d99 	.word	0x08006d99
 8004f80:	08006d90 	.word	0x08006d90
 8004f84:	08006d6d 	.word	0x08006d6d
 8004f88:	3ff80000 	.word	0x3ff80000
 8004f8c:	08006ea0 	.word	0x08006ea0
 8004f90:	08006e0c 	.word	0x08006e0c
 8004f94:	2301      	movs	r3, #1
 8004f96:	9309      	str	r3, [sp, #36]	; 0x24
 8004f98:	e7d7      	b.n	8004f4a <_dtoa_r+0x2c2>
 8004f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	9304      	str	r3, [sp, #16]
 8004fa0:	e7ba      	b.n	8004f18 <_dtoa_r+0x290>
 8004fa2:	3101      	adds	r1, #1
 8004fa4:	0052      	lsls	r2, r2, #1
 8004fa6:	e7ba      	b.n	8004f1e <_dtoa_r+0x296>
 8004fa8:	69e3      	ldr	r3, [r4, #28]
 8004faa:	9a00      	ldr	r2, [sp, #0]
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	2b0e      	cmp	r3, #14
 8004fb2:	f200 80a8 	bhi.w	8005106 <_dtoa_r+0x47e>
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	f000 80a5 	beq.w	8005106 <_dtoa_r+0x47e>
 8004fbc:	f1bb 0f00 	cmp.w	fp, #0
 8004fc0:	dd38      	ble.n	8005034 <_dtoa_r+0x3ac>
 8004fc2:	4bc0      	ldr	r3, [pc, #768]	; (80052c4 <_dtoa_r+0x63c>)
 8004fc4:	f00b 020f 	and.w	r2, fp, #15
 8004fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004fd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004fd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004fd8:	d019      	beq.n	800500e <_dtoa_r+0x386>
 8004fda:	4bbb      	ldr	r3, [pc, #748]	; (80052c8 <_dtoa_r+0x640>)
 8004fdc:	ec51 0b18 	vmov	r0, r1, d8
 8004fe0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fe4:	f7fb fc32 	bl	800084c <__aeabi_ddiv>
 8004fe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fec:	f008 080f 	and.w	r8, r8, #15
 8004ff0:	2503      	movs	r5, #3
 8004ff2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80052c8 <_dtoa_r+0x640>
 8004ff6:	f1b8 0f00 	cmp.w	r8, #0
 8004ffa:	d10a      	bne.n	8005012 <_dtoa_r+0x38a>
 8004ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005000:	4632      	mov	r2, r6
 8005002:	463b      	mov	r3, r7
 8005004:	f7fb fc22 	bl	800084c <__aeabi_ddiv>
 8005008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800500c:	e02b      	b.n	8005066 <_dtoa_r+0x3de>
 800500e:	2502      	movs	r5, #2
 8005010:	e7ef      	b.n	8004ff2 <_dtoa_r+0x36a>
 8005012:	f018 0f01 	tst.w	r8, #1
 8005016:	d008      	beq.n	800502a <_dtoa_r+0x3a2>
 8005018:	4630      	mov	r0, r6
 800501a:	4639      	mov	r1, r7
 800501c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005020:	f7fb faea 	bl	80005f8 <__aeabi_dmul>
 8005024:	3501      	adds	r5, #1
 8005026:	4606      	mov	r6, r0
 8005028:	460f      	mov	r7, r1
 800502a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800502e:	f109 0908 	add.w	r9, r9, #8
 8005032:	e7e0      	b.n	8004ff6 <_dtoa_r+0x36e>
 8005034:	f000 809f 	beq.w	8005176 <_dtoa_r+0x4ee>
 8005038:	f1cb 0600 	rsb	r6, fp, #0
 800503c:	4ba1      	ldr	r3, [pc, #644]	; (80052c4 <_dtoa_r+0x63c>)
 800503e:	4fa2      	ldr	r7, [pc, #648]	; (80052c8 <_dtoa_r+0x640>)
 8005040:	f006 020f 	and.w	r2, r6, #15
 8005044:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	ec51 0b18 	vmov	r0, r1, d8
 8005050:	f7fb fad2 	bl	80005f8 <__aeabi_dmul>
 8005054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005058:	1136      	asrs	r6, r6, #4
 800505a:	2300      	movs	r3, #0
 800505c:	2502      	movs	r5, #2
 800505e:	2e00      	cmp	r6, #0
 8005060:	d17e      	bne.n	8005160 <_dtoa_r+0x4d8>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1d0      	bne.n	8005008 <_dtoa_r+0x380>
 8005066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005068:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8084 	beq.w	800517a <_dtoa_r+0x4f2>
 8005072:	4b96      	ldr	r3, [pc, #600]	; (80052cc <_dtoa_r+0x644>)
 8005074:	2200      	movs	r2, #0
 8005076:	4640      	mov	r0, r8
 8005078:	4649      	mov	r1, r9
 800507a:	f7fb fd2f 	bl	8000adc <__aeabi_dcmplt>
 800507e:	2800      	cmp	r0, #0
 8005080:	d07b      	beq.n	800517a <_dtoa_r+0x4f2>
 8005082:	9b04      	ldr	r3, [sp, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d078      	beq.n	800517a <_dtoa_r+0x4f2>
 8005088:	9b01      	ldr	r3, [sp, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	dd39      	ble.n	8005102 <_dtoa_r+0x47a>
 800508e:	4b90      	ldr	r3, [pc, #576]	; (80052d0 <_dtoa_r+0x648>)
 8005090:	2200      	movs	r2, #0
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb faaf 	bl	80005f8 <__aeabi_dmul>
 800509a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800509e:	9e01      	ldr	r6, [sp, #4]
 80050a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80050a4:	3501      	adds	r5, #1
 80050a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80050aa:	4628      	mov	r0, r5
 80050ac:	f7fb fa3a 	bl	8000524 <__aeabi_i2d>
 80050b0:	4642      	mov	r2, r8
 80050b2:	464b      	mov	r3, r9
 80050b4:	f7fb faa0 	bl	80005f8 <__aeabi_dmul>
 80050b8:	4b86      	ldr	r3, [pc, #536]	; (80052d4 <_dtoa_r+0x64c>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	f7fb f8e6 	bl	800028c <__adddf3>
 80050c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80050c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c8:	9303      	str	r3, [sp, #12]
 80050ca:	2e00      	cmp	r6, #0
 80050cc:	d158      	bne.n	8005180 <_dtoa_r+0x4f8>
 80050ce:	4b82      	ldr	r3, [pc, #520]	; (80052d8 <_dtoa_r+0x650>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	4640      	mov	r0, r8
 80050d4:	4649      	mov	r1, r9
 80050d6:	f7fb f8d7 	bl	8000288 <__aeabi_dsub>
 80050da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050de:	4680      	mov	r8, r0
 80050e0:	4689      	mov	r9, r1
 80050e2:	f7fb fd19 	bl	8000b18 <__aeabi_dcmpgt>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f040 8296 	bne.w	8005618 <_dtoa_r+0x990>
 80050ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80050f0:	4640      	mov	r0, r8
 80050f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050f6:	4649      	mov	r1, r9
 80050f8:	f7fb fcf0 	bl	8000adc <__aeabi_dcmplt>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f040 8289 	bne.w	8005614 <_dtoa_r+0x98c>
 8005102:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005108:	2b00      	cmp	r3, #0
 800510a:	f2c0 814e 	blt.w	80053aa <_dtoa_r+0x722>
 800510e:	f1bb 0f0e 	cmp.w	fp, #14
 8005112:	f300 814a 	bgt.w	80053aa <_dtoa_r+0x722>
 8005116:	4b6b      	ldr	r3, [pc, #428]	; (80052c4 <_dtoa_r+0x63c>)
 8005118:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800511c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	f280 80dc 	bge.w	80052e0 <_dtoa_r+0x658>
 8005128:	9b04      	ldr	r3, [sp, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f300 80d8 	bgt.w	80052e0 <_dtoa_r+0x658>
 8005130:	f040 826f 	bne.w	8005612 <_dtoa_r+0x98a>
 8005134:	4b68      	ldr	r3, [pc, #416]	; (80052d8 <_dtoa_r+0x650>)
 8005136:	2200      	movs	r2, #0
 8005138:	4640      	mov	r0, r8
 800513a:	4649      	mov	r1, r9
 800513c:	f7fb fa5c 	bl	80005f8 <__aeabi_dmul>
 8005140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005144:	f7fb fcde 	bl	8000b04 <__aeabi_dcmpge>
 8005148:	9e04      	ldr	r6, [sp, #16]
 800514a:	4637      	mov	r7, r6
 800514c:	2800      	cmp	r0, #0
 800514e:	f040 8245 	bne.w	80055dc <_dtoa_r+0x954>
 8005152:	9d00      	ldr	r5, [sp, #0]
 8005154:	2331      	movs	r3, #49	; 0x31
 8005156:	f805 3b01 	strb.w	r3, [r5], #1
 800515a:	f10b 0b01 	add.w	fp, fp, #1
 800515e:	e241      	b.n	80055e4 <_dtoa_r+0x95c>
 8005160:	07f2      	lsls	r2, r6, #31
 8005162:	d505      	bpl.n	8005170 <_dtoa_r+0x4e8>
 8005164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005168:	f7fb fa46 	bl	80005f8 <__aeabi_dmul>
 800516c:	3501      	adds	r5, #1
 800516e:	2301      	movs	r3, #1
 8005170:	1076      	asrs	r6, r6, #1
 8005172:	3708      	adds	r7, #8
 8005174:	e773      	b.n	800505e <_dtoa_r+0x3d6>
 8005176:	2502      	movs	r5, #2
 8005178:	e775      	b.n	8005066 <_dtoa_r+0x3de>
 800517a:	9e04      	ldr	r6, [sp, #16]
 800517c:	465f      	mov	r7, fp
 800517e:	e792      	b.n	80050a6 <_dtoa_r+0x41e>
 8005180:	9900      	ldr	r1, [sp, #0]
 8005182:	4b50      	ldr	r3, [pc, #320]	; (80052c4 <_dtoa_r+0x63c>)
 8005184:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005188:	4431      	add	r1, r6
 800518a:	9102      	str	r1, [sp, #8]
 800518c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800518e:	eeb0 9a47 	vmov.f32	s18, s14
 8005192:	eef0 9a67 	vmov.f32	s19, s15
 8005196:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800519a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800519e:	2900      	cmp	r1, #0
 80051a0:	d044      	beq.n	800522c <_dtoa_r+0x5a4>
 80051a2:	494e      	ldr	r1, [pc, #312]	; (80052dc <_dtoa_r+0x654>)
 80051a4:	2000      	movs	r0, #0
 80051a6:	f7fb fb51 	bl	800084c <__aeabi_ddiv>
 80051aa:	ec53 2b19 	vmov	r2, r3, d9
 80051ae:	f7fb f86b 	bl	8000288 <__aeabi_dsub>
 80051b2:	9d00      	ldr	r5, [sp, #0]
 80051b4:	ec41 0b19 	vmov	d9, r0, r1
 80051b8:	4649      	mov	r1, r9
 80051ba:	4640      	mov	r0, r8
 80051bc:	f7fb fccc 	bl	8000b58 <__aeabi_d2iz>
 80051c0:	4606      	mov	r6, r0
 80051c2:	f7fb f9af 	bl	8000524 <__aeabi_i2d>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4640      	mov	r0, r8
 80051cc:	4649      	mov	r1, r9
 80051ce:	f7fb f85b 	bl	8000288 <__aeabi_dsub>
 80051d2:	3630      	adds	r6, #48	; 0x30
 80051d4:	f805 6b01 	strb.w	r6, [r5], #1
 80051d8:	ec53 2b19 	vmov	r2, r3, d9
 80051dc:	4680      	mov	r8, r0
 80051de:	4689      	mov	r9, r1
 80051e0:	f7fb fc7c 	bl	8000adc <__aeabi_dcmplt>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d164      	bne.n	80052b2 <_dtoa_r+0x62a>
 80051e8:	4642      	mov	r2, r8
 80051ea:	464b      	mov	r3, r9
 80051ec:	4937      	ldr	r1, [pc, #220]	; (80052cc <_dtoa_r+0x644>)
 80051ee:	2000      	movs	r0, #0
 80051f0:	f7fb f84a 	bl	8000288 <__aeabi_dsub>
 80051f4:	ec53 2b19 	vmov	r2, r3, d9
 80051f8:	f7fb fc70 	bl	8000adc <__aeabi_dcmplt>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	f040 80b6 	bne.w	800536e <_dtoa_r+0x6e6>
 8005202:	9b02      	ldr	r3, [sp, #8]
 8005204:	429d      	cmp	r5, r3
 8005206:	f43f af7c 	beq.w	8005102 <_dtoa_r+0x47a>
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <_dtoa_r+0x648>)
 800520c:	ec51 0b19 	vmov	r0, r1, d9
 8005210:	2200      	movs	r2, #0
 8005212:	f7fb f9f1 	bl	80005f8 <__aeabi_dmul>
 8005216:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <_dtoa_r+0x648>)
 8005218:	ec41 0b19 	vmov	d9, r0, r1
 800521c:	2200      	movs	r2, #0
 800521e:	4640      	mov	r0, r8
 8005220:	4649      	mov	r1, r9
 8005222:	f7fb f9e9 	bl	80005f8 <__aeabi_dmul>
 8005226:	4680      	mov	r8, r0
 8005228:	4689      	mov	r9, r1
 800522a:	e7c5      	b.n	80051b8 <_dtoa_r+0x530>
 800522c:	ec51 0b17 	vmov	r0, r1, d7
 8005230:	f7fb f9e2 	bl	80005f8 <__aeabi_dmul>
 8005234:	9b02      	ldr	r3, [sp, #8]
 8005236:	9d00      	ldr	r5, [sp, #0]
 8005238:	930f      	str	r3, [sp, #60]	; 0x3c
 800523a:	ec41 0b19 	vmov	d9, r0, r1
 800523e:	4649      	mov	r1, r9
 8005240:	4640      	mov	r0, r8
 8005242:	f7fb fc89 	bl	8000b58 <__aeabi_d2iz>
 8005246:	4606      	mov	r6, r0
 8005248:	f7fb f96c 	bl	8000524 <__aeabi_i2d>
 800524c:	3630      	adds	r6, #48	; 0x30
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4640      	mov	r0, r8
 8005254:	4649      	mov	r1, r9
 8005256:	f7fb f817 	bl	8000288 <__aeabi_dsub>
 800525a:	f805 6b01 	strb.w	r6, [r5], #1
 800525e:	9b02      	ldr	r3, [sp, #8]
 8005260:	429d      	cmp	r5, r3
 8005262:	4680      	mov	r8, r0
 8005264:	4689      	mov	r9, r1
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	d124      	bne.n	80052b6 <_dtoa_r+0x62e>
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <_dtoa_r+0x654>)
 800526e:	ec51 0b19 	vmov	r0, r1, d9
 8005272:	f7fb f80b 	bl	800028c <__adddf3>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4640      	mov	r0, r8
 800527c:	4649      	mov	r1, r9
 800527e:	f7fb fc4b 	bl	8000b18 <__aeabi_dcmpgt>
 8005282:	2800      	cmp	r0, #0
 8005284:	d173      	bne.n	800536e <_dtoa_r+0x6e6>
 8005286:	ec53 2b19 	vmov	r2, r3, d9
 800528a:	4914      	ldr	r1, [pc, #80]	; (80052dc <_dtoa_r+0x654>)
 800528c:	2000      	movs	r0, #0
 800528e:	f7fa fffb 	bl	8000288 <__aeabi_dsub>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4640      	mov	r0, r8
 8005298:	4649      	mov	r1, r9
 800529a:	f7fb fc1f 	bl	8000adc <__aeabi_dcmplt>
 800529e:	2800      	cmp	r0, #0
 80052a0:	f43f af2f 	beq.w	8005102 <_dtoa_r+0x47a>
 80052a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80052a6:	1e6b      	subs	r3, r5, #1
 80052a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80052aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052ae:	2b30      	cmp	r3, #48	; 0x30
 80052b0:	d0f8      	beq.n	80052a4 <_dtoa_r+0x61c>
 80052b2:	46bb      	mov	fp, r7
 80052b4:	e04a      	b.n	800534c <_dtoa_r+0x6c4>
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <_dtoa_r+0x648>)
 80052b8:	f7fb f99e 	bl	80005f8 <__aeabi_dmul>
 80052bc:	4680      	mov	r8, r0
 80052be:	4689      	mov	r9, r1
 80052c0:	e7bd      	b.n	800523e <_dtoa_r+0x5b6>
 80052c2:	bf00      	nop
 80052c4:	08006ea0 	.word	0x08006ea0
 80052c8:	08006e78 	.word	0x08006e78
 80052cc:	3ff00000 	.word	0x3ff00000
 80052d0:	40240000 	.word	0x40240000
 80052d4:	401c0000 	.word	0x401c0000
 80052d8:	40140000 	.word	0x40140000
 80052dc:	3fe00000 	.word	0x3fe00000
 80052e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052e4:	9d00      	ldr	r5, [sp, #0]
 80052e6:	4642      	mov	r2, r8
 80052e8:	464b      	mov	r3, r9
 80052ea:	4630      	mov	r0, r6
 80052ec:	4639      	mov	r1, r7
 80052ee:	f7fb faad 	bl	800084c <__aeabi_ddiv>
 80052f2:	f7fb fc31 	bl	8000b58 <__aeabi_d2iz>
 80052f6:	9001      	str	r0, [sp, #4]
 80052f8:	f7fb f914 	bl	8000524 <__aeabi_i2d>
 80052fc:	4642      	mov	r2, r8
 80052fe:	464b      	mov	r3, r9
 8005300:	f7fb f97a 	bl	80005f8 <__aeabi_dmul>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4630      	mov	r0, r6
 800530a:	4639      	mov	r1, r7
 800530c:	f7fa ffbc 	bl	8000288 <__aeabi_dsub>
 8005310:	9e01      	ldr	r6, [sp, #4]
 8005312:	9f04      	ldr	r7, [sp, #16]
 8005314:	3630      	adds	r6, #48	; 0x30
 8005316:	f805 6b01 	strb.w	r6, [r5], #1
 800531a:	9e00      	ldr	r6, [sp, #0]
 800531c:	1bae      	subs	r6, r5, r6
 800531e:	42b7      	cmp	r7, r6
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	d134      	bne.n	8005390 <_dtoa_r+0x708>
 8005326:	f7fa ffb1 	bl	800028c <__adddf3>
 800532a:	4642      	mov	r2, r8
 800532c:	464b      	mov	r3, r9
 800532e:	4606      	mov	r6, r0
 8005330:	460f      	mov	r7, r1
 8005332:	f7fb fbf1 	bl	8000b18 <__aeabi_dcmpgt>
 8005336:	b9c8      	cbnz	r0, 800536c <_dtoa_r+0x6e4>
 8005338:	4642      	mov	r2, r8
 800533a:	464b      	mov	r3, r9
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fb fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005344:	b110      	cbz	r0, 800534c <_dtoa_r+0x6c4>
 8005346:	9b01      	ldr	r3, [sp, #4]
 8005348:	07db      	lsls	r3, r3, #31
 800534a:	d40f      	bmi.n	800536c <_dtoa_r+0x6e4>
 800534c:	4651      	mov	r1, sl
 800534e:	4620      	mov	r0, r4
 8005350:	f000 fbcc 	bl	8005aec <_Bfree>
 8005354:	2300      	movs	r3, #0
 8005356:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005358:	702b      	strb	r3, [r5, #0]
 800535a:	f10b 0301 	add.w	r3, fp, #1
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005362:	2b00      	cmp	r3, #0
 8005364:	f43f ace2 	beq.w	8004d2c <_dtoa_r+0xa4>
 8005368:	601d      	str	r5, [r3, #0]
 800536a:	e4df      	b.n	8004d2c <_dtoa_r+0xa4>
 800536c:	465f      	mov	r7, fp
 800536e:	462b      	mov	r3, r5
 8005370:	461d      	mov	r5, r3
 8005372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005376:	2a39      	cmp	r2, #57	; 0x39
 8005378:	d106      	bne.n	8005388 <_dtoa_r+0x700>
 800537a:	9a00      	ldr	r2, [sp, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d1f7      	bne.n	8005370 <_dtoa_r+0x6e8>
 8005380:	9900      	ldr	r1, [sp, #0]
 8005382:	2230      	movs	r2, #48	; 0x30
 8005384:	3701      	adds	r7, #1
 8005386:	700a      	strb	r2, [r1, #0]
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	3201      	adds	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e790      	b.n	80052b2 <_dtoa_r+0x62a>
 8005390:	4ba3      	ldr	r3, [pc, #652]	; (8005620 <_dtoa_r+0x998>)
 8005392:	2200      	movs	r2, #0
 8005394:	f7fb f930 	bl	80005f8 <__aeabi_dmul>
 8005398:	2200      	movs	r2, #0
 800539a:	2300      	movs	r3, #0
 800539c:	4606      	mov	r6, r0
 800539e:	460f      	mov	r7, r1
 80053a0:	f7fb fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d09e      	beq.n	80052e6 <_dtoa_r+0x65e>
 80053a8:	e7d0      	b.n	800534c <_dtoa_r+0x6c4>
 80053aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ac:	2a00      	cmp	r2, #0
 80053ae:	f000 80ca 	beq.w	8005546 <_dtoa_r+0x8be>
 80053b2:	9a07      	ldr	r2, [sp, #28]
 80053b4:	2a01      	cmp	r2, #1
 80053b6:	f300 80ad 	bgt.w	8005514 <_dtoa_r+0x88c>
 80053ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053bc:	2a00      	cmp	r2, #0
 80053be:	f000 80a5 	beq.w	800550c <_dtoa_r+0x884>
 80053c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053c6:	9e08      	ldr	r6, [sp, #32]
 80053c8:	9d05      	ldr	r5, [sp, #20]
 80053ca:	9a05      	ldr	r2, [sp, #20]
 80053cc:	441a      	add	r2, r3
 80053ce:	9205      	str	r2, [sp, #20]
 80053d0:	9a06      	ldr	r2, [sp, #24]
 80053d2:	2101      	movs	r1, #1
 80053d4:	441a      	add	r2, r3
 80053d6:	4620      	mov	r0, r4
 80053d8:	9206      	str	r2, [sp, #24]
 80053da:	f000 fc3d 	bl	8005c58 <__i2b>
 80053de:	4607      	mov	r7, r0
 80053e0:	b165      	cbz	r5, 80053fc <_dtoa_r+0x774>
 80053e2:	9b06      	ldr	r3, [sp, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dd09      	ble.n	80053fc <_dtoa_r+0x774>
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	9a05      	ldr	r2, [sp, #20]
 80053ec:	bfa8      	it	ge
 80053ee:	462b      	movge	r3, r5
 80053f0:	1ad2      	subs	r2, r2, r3
 80053f2:	9205      	str	r2, [sp, #20]
 80053f4:	9a06      	ldr	r2, [sp, #24]
 80053f6:	1aed      	subs	r5, r5, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	9306      	str	r3, [sp, #24]
 80053fc:	9b08      	ldr	r3, [sp, #32]
 80053fe:	b1f3      	cbz	r3, 800543e <_dtoa_r+0x7b6>
 8005400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 80a3 	beq.w	800554e <_dtoa_r+0x8c6>
 8005408:	2e00      	cmp	r6, #0
 800540a:	dd10      	ble.n	800542e <_dtoa_r+0x7a6>
 800540c:	4639      	mov	r1, r7
 800540e:	4632      	mov	r2, r6
 8005410:	4620      	mov	r0, r4
 8005412:	f000 fce1 	bl	8005dd8 <__pow5mult>
 8005416:	4652      	mov	r2, sl
 8005418:	4601      	mov	r1, r0
 800541a:	4607      	mov	r7, r0
 800541c:	4620      	mov	r0, r4
 800541e:	f000 fc31 	bl	8005c84 <__multiply>
 8005422:	4651      	mov	r1, sl
 8005424:	4680      	mov	r8, r0
 8005426:	4620      	mov	r0, r4
 8005428:	f000 fb60 	bl	8005aec <_Bfree>
 800542c:	46c2      	mov	sl, r8
 800542e:	9b08      	ldr	r3, [sp, #32]
 8005430:	1b9a      	subs	r2, r3, r6
 8005432:	d004      	beq.n	800543e <_dtoa_r+0x7b6>
 8005434:	4651      	mov	r1, sl
 8005436:	4620      	mov	r0, r4
 8005438:	f000 fcce 	bl	8005dd8 <__pow5mult>
 800543c:	4682      	mov	sl, r0
 800543e:	2101      	movs	r1, #1
 8005440:	4620      	mov	r0, r4
 8005442:	f000 fc09 	bl	8005c58 <__i2b>
 8005446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005448:	2b00      	cmp	r3, #0
 800544a:	4606      	mov	r6, r0
 800544c:	f340 8081 	ble.w	8005552 <_dtoa_r+0x8ca>
 8005450:	461a      	mov	r2, r3
 8005452:	4601      	mov	r1, r0
 8005454:	4620      	mov	r0, r4
 8005456:	f000 fcbf 	bl	8005dd8 <__pow5mult>
 800545a:	9b07      	ldr	r3, [sp, #28]
 800545c:	2b01      	cmp	r3, #1
 800545e:	4606      	mov	r6, r0
 8005460:	dd7a      	ble.n	8005558 <_dtoa_r+0x8d0>
 8005462:	f04f 0800 	mov.w	r8, #0
 8005466:	6933      	ldr	r3, [r6, #16]
 8005468:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800546c:	6918      	ldr	r0, [r3, #16]
 800546e:	f000 fba5 	bl	8005bbc <__hi0bits>
 8005472:	f1c0 0020 	rsb	r0, r0, #32
 8005476:	9b06      	ldr	r3, [sp, #24]
 8005478:	4418      	add	r0, r3
 800547a:	f010 001f 	ands.w	r0, r0, #31
 800547e:	f000 8094 	beq.w	80055aa <_dtoa_r+0x922>
 8005482:	f1c0 0320 	rsb	r3, r0, #32
 8005486:	2b04      	cmp	r3, #4
 8005488:	f340 8085 	ble.w	8005596 <_dtoa_r+0x90e>
 800548c:	9b05      	ldr	r3, [sp, #20]
 800548e:	f1c0 001c 	rsb	r0, r0, #28
 8005492:	4403      	add	r3, r0
 8005494:	9305      	str	r3, [sp, #20]
 8005496:	9b06      	ldr	r3, [sp, #24]
 8005498:	4403      	add	r3, r0
 800549a:	4405      	add	r5, r0
 800549c:	9306      	str	r3, [sp, #24]
 800549e:	9b05      	ldr	r3, [sp, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dd05      	ble.n	80054b0 <_dtoa_r+0x828>
 80054a4:	4651      	mov	r1, sl
 80054a6:	461a      	mov	r2, r3
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fcef 	bl	8005e8c <__lshift>
 80054ae:	4682      	mov	sl, r0
 80054b0:	9b06      	ldr	r3, [sp, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd05      	ble.n	80054c2 <_dtoa_r+0x83a>
 80054b6:	4631      	mov	r1, r6
 80054b8:	461a      	mov	r2, r3
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 fce6 	bl	8005e8c <__lshift>
 80054c0:	4606      	mov	r6, r0
 80054c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d072      	beq.n	80055ae <_dtoa_r+0x926>
 80054c8:	4631      	mov	r1, r6
 80054ca:	4650      	mov	r0, sl
 80054cc:	f000 fd4a 	bl	8005f64 <__mcmp>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	da6c      	bge.n	80055ae <_dtoa_r+0x926>
 80054d4:	2300      	movs	r3, #0
 80054d6:	4651      	mov	r1, sl
 80054d8:	220a      	movs	r2, #10
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 fb28 	bl	8005b30 <__multadd>
 80054e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054e6:	4682      	mov	sl, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 81b0 	beq.w	800584e <_dtoa_r+0xbc6>
 80054ee:	2300      	movs	r3, #0
 80054f0:	4639      	mov	r1, r7
 80054f2:	220a      	movs	r2, #10
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fb1b 	bl	8005b30 <__multadd>
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	4607      	mov	r7, r0
 8005500:	f300 8096 	bgt.w	8005630 <_dtoa_r+0x9a8>
 8005504:	9b07      	ldr	r3, [sp, #28]
 8005506:	2b02      	cmp	r3, #2
 8005508:	dc59      	bgt.n	80055be <_dtoa_r+0x936>
 800550a:	e091      	b.n	8005630 <_dtoa_r+0x9a8>
 800550c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800550e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005512:	e758      	b.n	80053c6 <_dtoa_r+0x73e>
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	1e5e      	subs	r6, r3, #1
 8005518:	9b08      	ldr	r3, [sp, #32]
 800551a:	42b3      	cmp	r3, r6
 800551c:	bfbf      	itttt	lt
 800551e:	9b08      	ldrlt	r3, [sp, #32]
 8005520:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005522:	9608      	strlt	r6, [sp, #32]
 8005524:	1af3      	sublt	r3, r6, r3
 8005526:	bfb4      	ite	lt
 8005528:	18d2      	addlt	r2, r2, r3
 800552a:	1b9e      	subge	r6, r3, r6
 800552c:	9b04      	ldr	r3, [sp, #16]
 800552e:	bfbc      	itt	lt
 8005530:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005532:	2600      	movlt	r6, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	bfb7      	itett	lt
 8005538:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800553c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005540:	1a9d      	sublt	r5, r3, r2
 8005542:	2300      	movlt	r3, #0
 8005544:	e741      	b.n	80053ca <_dtoa_r+0x742>
 8005546:	9e08      	ldr	r6, [sp, #32]
 8005548:	9d05      	ldr	r5, [sp, #20]
 800554a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800554c:	e748      	b.n	80053e0 <_dtoa_r+0x758>
 800554e:	9a08      	ldr	r2, [sp, #32]
 8005550:	e770      	b.n	8005434 <_dtoa_r+0x7ac>
 8005552:	9b07      	ldr	r3, [sp, #28]
 8005554:	2b01      	cmp	r3, #1
 8005556:	dc19      	bgt.n	800558c <_dtoa_r+0x904>
 8005558:	9b02      	ldr	r3, [sp, #8]
 800555a:	b9bb      	cbnz	r3, 800558c <_dtoa_r+0x904>
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005562:	b99b      	cbnz	r3, 800558c <_dtoa_r+0x904>
 8005564:	9b03      	ldr	r3, [sp, #12]
 8005566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800556a:	0d1b      	lsrs	r3, r3, #20
 800556c:	051b      	lsls	r3, r3, #20
 800556e:	b183      	cbz	r3, 8005592 <_dtoa_r+0x90a>
 8005570:	9b05      	ldr	r3, [sp, #20]
 8005572:	3301      	adds	r3, #1
 8005574:	9305      	str	r3, [sp, #20]
 8005576:	9b06      	ldr	r3, [sp, #24]
 8005578:	3301      	adds	r3, #1
 800557a:	9306      	str	r3, [sp, #24]
 800557c:	f04f 0801 	mov.w	r8, #1
 8005580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005582:	2b00      	cmp	r3, #0
 8005584:	f47f af6f 	bne.w	8005466 <_dtoa_r+0x7de>
 8005588:	2001      	movs	r0, #1
 800558a:	e774      	b.n	8005476 <_dtoa_r+0x7ee>
 800558c:	f04f 0800 	mov.w	r8, #0
 8005590:	e7f6      	b.n	8005580 <_dtoa_r+0x8f8>
 8005592:	4698      	mov	r8, r3
 8005594:	e7f4      	b.n	8005580 <_dtoa_r+0x8f8>
 8005596:	d082      	beq.n	800549e <_dtoa_r+0x816>
 8005598:	9a05      	ldr	r2, [sp, #20]
 800559a:	331c      	adds	r3, #28
 800559c:	441a      	add	r2, r3
 800559e:	9205      	str	r2, [sp, #20]
 80055a0:	9a06      	ldr	r2, [sp, #24]
 80055a2:	441a      	add	r2, r3
 80055a4:	441d      	add	r5, r3
 80055a6:	9206      	str	r2, [sp, #24]
 80055a8:	e779      	b.n	800549e <_dtoa_r+0x816>
 80055aa:	4603      	mov	r3, r0
 80055ac:	e7f4      	b.n	8005598 <_dtoa_r+0x910>
 80055ae:	9b04      	ldr	r3, [sp, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	dc37      	bgt.n	8005624 <_dtoa_r+0x99c>
 80055b4:	9b07      	ldr	r3, [sp, #28]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	dd34      	ble.n	8005624 <_dtoa_r+0x99c>
 80055ba:	9b04      	ldr	r3, [sp, #16]
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	9b01      	ldr	r3, [sp, #4]
 80055c0:	b963      	cbnz	r3, 80055dc <_dtoa_r+0x954>
 80055c2:	4631      	mov	r1, r6
 80055c4:	2205      	movs	r2, #5
 80055c6:	4620      	mov	r0, r4
 80055c8:	f000 fab2 	bl	8005b30 <__multadd>
 80055cc:	4601      	mov	r1, r0
 80055ce:	4606      	mov	r6, r0
 80055d0:	4650      	mov	r0, sl
 80055d2:	f000 fcc7 	bl	8005f64 <__mcmp>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	f73f adbb 	bgt.w	8005152 <_dtoa_r+0x4ca>
 80055dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055de:	9d00      	ldr	r5, [sp, #0]
 80055e0:	ea6f 0b03 	mvn.w	fp, r3
 80055e4:	f04f 0800 	mov.w	r8, #0
 80055e8:	4631      	mov	r1, r6
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fa7e 	bl	8005aec <_Bfree>
 80055f0:	2f00      	cmp	r7, #0
 80055f2:	f43f aeab 	beq.w	800534c <_dtoa_r+0x6c4>
 80055f6:	f1b8 0f00 	cmp.w	r8, #0
 80055fa:	d005      	beq.n	8005608 <_dtoa_r+0x980>
 80055fc:	45b8      	cmp	r8, r7
 80055fe:	d003      	beq.n	8005608 <_dtoa_r+0x980>
 8005600:	4641      	mov	r1, r8
 8005602:	4620      	mov	r0, r4
 8005604:	f000 fa72 	bl	8005aec <_Bfree>
 8005608:	4639      	mov	r1, r7
 800560a:	4620      	mov	r0, r4
 800560c:	f000 fa6e 	bl	8005aec <_Bfree>
 8005610:	e69c      	b.n	800534c <_dtoa_r+0x6c4>
 8005612:	2600      	movs	r6, #0
 8005614:	4637      	mov	r7, r6
 8005616:	e7e1      	b.n	80055dc <_dtoa_r+0x954>
 8005618:	46bb      	mov	fp, r7
 800561a:	4637      	mov	r7, r6
 800561c:	e599      	b.n	8005152 <_dtoa_r+0x4ca>
 800561e:	bf00      	nop
 8005620:	40240000 	.word	0x40240000
 8005624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 80c8 	beq.w	80057bc <_dtoa_r+0xb34>
 800562c:	9b04      	ldr	r3, [sp, #16]
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	2d00      	cmp	r5, #0
 8005632:	dd05      	ble.n	8005640 <_dtoa_r+0x9b8>
 8005634:	4639      	mov	r1, r7
 8005636:	462a      	mov	r2, r5
 8005638:	4620      	mov	r0, r4
 800563a:	f000 fc27 	bl	8005e8c <__lshift>
 800563e:	4607      	mov	r7, r0
 8005640:	f1b8 0f00 	cmp.w	r8, #0
 8005644:	d05b      	beq.n	80056fe <_dtoa_r+0xa76>
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4620      	mov	r0, r4
 800564a:	f000 fa0f 	bl	8005a6c <_Balloc>
 800564e:	4605      	mov	r5, r0
 8005650:	b928      	cbnz	r0, 800565e <_dtoa_r+0x9d6>
 8005652:	4b83      	ldr	r3, [pc, #524]	; (8005860 <_dtoa_r+0xbd8>)
 8005654:	4602      	mov	r2, r0
 8005656:	f240 21ef 	movw	r1, #751	; 0x2ef
 800565a:	f7ff bb2e 	b.w	8004cba <_dtoa_r+0x32>
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	3202      	adds	r2, #2
 8005662:	0092      	lsls	r2, r2, #2
 8005664:	f107 010c 	add.w	r1, r7, #12
 8005668:	300c      	adds	r0, #12
 800566a:	f000 ffab 	bl	80065c4 <memcpy>
 800566e:	2201      	movs	r2, #1
 8005670:	4629      	mov	r1, r5
 8005672:	4620      	mov	r0, r4
 8005674:	f000 fc0a 	bl	8005e8c <__lshift>
 8005678:	9b00      	ldr	r3, [sp, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005682:	4413      	add	r3, r2
 8005684:	9308      	str	r3, [sp, #32]
 8005686:	9b02      	ldr	r3, [sp, #8]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	46b8      	mov	r8, r7
 800568e:	9306      	str	r3, [sp, #24]
 8005690:	4607      	mov	r7, r0
 8005692:	9b04      	ldr	r3, [sp, #16]
 8005694:	4631      	mov	r1, r6
 8005696:	3b01      	subs	r3, #1
 8005698:	4650      	mov	r0, sl
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	f7ff fa69 	bl	8004b72 <quorem>
 80056a0:	4641      	mov	r1, r8
 80056a2:	9002      	str	r0, [sp, #8]
 80056a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80056a8:	4650      	mov	r0, sl
 80056aa:	f000 fc5b 	bl	8005f64 <__mcmp>
 80056ae:	463a      	mov	r2, r7
 80056b0:	9005      	str	r0, [sp, #20]
 80056b2:	4631      	mov	r1, r6
 80056b4:	4620      	mov	r0, r4
 80056b6:	f000 fc71 	bl	8005f9c <__mdiff>
 80056ba:	68c2      	ldr	r2, [r0, #12]
 80056bc:	4605      	mov	r5, r0
 80056be:	bb02      	cbnz	r2, 8005702 <_dtoa_r+0xa7a>
 80056c0:	4601      	mov	r1, r0
 80056c2:	4650      	mov	r0, sl
 80056c4:	f000 fc4e 	bl	8005f64 <__mcmp>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4629      	mov	r1, r5
 80056cc:	4620      	mov	r0, r4
 80056ce:	9209      	str	r2, [sp, #36]	; 0x24
 80056d0:	f000 fa0c 	bl	8005aec <_Bfree>
 80056d4:	9b07      	ldr	r3, [sp, #28]
 80056d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056d8:	9d04      	ldr	r5, [sp, #16]
 80056da:	ea43 0102 	orr.w	r1, r3, r2
 80056de:	9b06      	ldr	r3, [sp, #24]
 80056e0:	4319      	orrs	r1, r3
 80056e2:	d110      	bne.n	8005706 <_dtoa_r+0xa7e>
 80056e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80056e8:	d029      	beq.n	800573e <_dtoa_r+0xab6>
 80056ea:	9b05      	ldr	r3, [sp, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dd02      	ble.n	80056f6 <_dtoa_r+0xa6e>
 80056f0:	9b02      	ldr	r3, [sp, #8]
 80056f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80056f6:	9b01      	ldr	r3, [sp, #4]
 80056f8:	f883 9000 	strb.w	r9, [r3]
 80056fc:	e774      	b.n	80055e8 <_dtoa_r+0x960>
 80056fe:	4638      	mov	r0, r7
 8005700:	e7ba      	b.n	8005678 <_dtoa_r+0x9f0>
 8005702:	2201      	movs	r2, #1
 8005704:	e7e1      	b.n	80056ca <_dtoa_r+0xa42>
 8005706:	9b05      	ldr	r3, [sp, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	db04      	blt.n	8005716 <_dtoa_r+0xa8e>
 800570c:	9907      	ldr	r1, [sp, #28]
 800570e:	430b      	orrs	r3, r1
 8005710:	9906      	ldr	r1, [sp, #24]
 8005712:	430b      	orrs	r3, r1
 8005714:	d120      	bne.n	8005758 <_dtoa_r+0xad0>
 8005716:	2a00      	cmp	r2, #0
 8005718:	dded      	ble.n	80056f6 <_dtoa_r+0xa6e>
 800571a:	4651      	mov	r1, sl
 800571c:	2201      	movs	r2, #1
 800571e:	4620      	mov	r0, r4
 8005720:	f000 fbb4 	bl	8005e8c <__lshift>
 8005724:	4631      	mov	r1, r6
 8005726:	4682      	mov	sl, r0
 8005728:	f000 fc1c 	bl	8005f64 <__mcmp>
 800572c:	2800      	cmp	r0, #0
 800572e:	dc03      	bgt.n	8005738 <_dtoa_r+0xab0>
 8005730:	d1e1      	bne.n	80056f6 <_dtoa_r+0xa6e>
 8005732:	f019 0f01 	tst.w	r9, #1
 8005736:	d0de      	beq.n	80056f6 <_dtoa_r+0xa6e>
 8005738:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800573c:	d1d8      	bne.n	80056f0 <_dtoa_r+0xa68>
 800573e:	9a01      	ldr	r2, [sp, #4]
 8005740:	2339      	movs	r3, #57	; 0x39
 8005742:	7013      	strb	r3, [r2, #0]
 8005744:	462b      	mov	r3, r5
 8005746:	461d      	mov	r5, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800574e:	2a39      	cmp	r2, #57	; 0x39
 8005750:	d06c      	beq.n	800582c <_dtoa_r+0xba4>
 8005752:	3201      	adds	r2, #1
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e747      	b.n	80055e8 <_dtoa_r+0x960>
 8005758:	2a00      	cmp	r2, #0
 800575a:	dd07      	ble.n	800576c <_dtoa_r+0xae4>
 800575c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005760:	d0ed      	beq.n	800573e <_dtoa_r+0xab6>
 8005762:	9a01      	ldr	r2, [sp, #4]
 8005764:	f109 0301 	add.w	r3, r9, #1
 8005768:	7013      	strb	r3, [r2, #0]
 800576a:	e73d      	b.n	80055e8 <_dtoa_r+0x960>
 800576c:	9b04      	ldr	r3, [sp, #16]
 800576e:	9a08      	ldr	r2, [sp, #32]
 8005770:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005774:	4293      	cmp	r3, r2
 8005776:	d043      	beq.n	8005800 <_dtoa_r+0xb78>
 8005778:	4651      	mov	r1, sl
 800577a:	2300      	movs	r3, #0
 800577c:	220a      	movs	r2, #10
 800577e:	4620      	mov	r0, r4
 8005780:	f000 f9d6 	bl	8005b30 <__multadd>
 8005784:	45b8      	cmp	r8, r7
 8005786:	4682      	mov	sl, r0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	f04f 020a 	mov.w	r2, #10
 8005790:	4641      	mov	r1, r8
 8005792:	4620      	mov	r0, r4
 8005794:	d107      	bne.n	80057a6 <_dtoa_r+0xb1e>
 8005796:	f000 f9cb 	bl	8005b30 <__multadd>
 800579a:	4680      	mov	r8, r0
 800579c:	4607      	mov	r7, r0
 800579e:	9b04      	ldr	r3, [sp, #16]
 80057a0:	3301      	adds	r3, #1
 80057a2:	9304      	str	r3, [sp, #16]
 80057a4:	e775      	b.n	8005692 <_dtoa_r+0xa0a>
 80057a6:	f000 f9c3 	bl	8005b30 <__multadd>
 80057aa:	4639      	mov	r1, r7
 80057ac:	4680      	mov	r8, r0
 80057ae:	2300      	movs	r3, #0
 80057b0:	220a      	movs	r2, #10
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 f9bc 	bl	8005b30 <__multadd>
 80057b8:	4607      	mov	r7, r0
 80057ba:	e7f0      	b.n	800579e <_dtoa_r+0xb16>
 80057bc:	9b04      	ldr	r3, [sp, #16]
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	9d00      	ldr	r5, [sp, #0]
 80057c2:	4631      	mov	r1, r6
 80057c4:	4650      	mov	r0, sl
 80057c6:	f7ff f9d4 	bl	8004b72 <quorem>
 80057ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80057ce:	9b00      	ldr	r3, [sp, #0]
 80057d0:	f805 9b01 	strb.w	r9, [r5], #1
 80057d4:	1aea      	subs	r2, r5, r3
 80057d6:	9b01      	ldr	r3, [sp, #4]
 80057d8:	4293      	cmp	r3, r2
 80057da:	dd07      	ble.n	80057ec <_dtoa_r+0xb64>
 80057dc:	4651      	mov	r1, sl
 80057de:	2300      	movs	r3, #0
 80057e0:	220a      	movs	r2, #10
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 f9a4 	bl	8005b30 <__multadd>
 80057e8:	4682      	mov	sl, r0
 80057ea:	e7ea      	b.n	80057c2 <_dtoa_r+0xb3a>
 80057ec:	9b01      	ldr	r3, [sp, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bfc8      	it	gt
 80057f2:	461d      	movgt	r5, r3
 80057f4:	9b00      	ldr	r3, [sp, #0]
 80057f6:	bfd8      	it	le
 80057f8:	2501      	movle	r5, #1
 80057fa:	441d      	add	r5, r3
 80057fc:	f04f 0800 	mov.w	r8, #0
 8005800:	4651      	mov	r1, sl
 8005802:	2201      	movs	r2, #1
 8005804:	4620      	mov	r0, r4
 8005806:	f000 fb41 	bl	8005e8c <__lshift>
 800580a:	4631      	mov	r1, r6
 800580c:	4682      	mov	sl, r0
 800580e:	f000 fba9 	bl	8005f64 <__mcmp>
 8005812:	2800      	cmp	r0, #0
 8005814:	dc96      	bgt.n	8005744 <_dtoa_r+0xabc>
 8005816:	d102      	bne.n	800581e <_dtoa_r+0xb96>
 8005818:	f019 0f01 	tst.w	r9, #1
 800581c:	d192      	bne.n	8005744 <_dtoa_r+0xabc>
 800581e:	462b      	mov	r3, r5
 8005820:	461d      	mov	r5, r3
 8005822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005826:	2a30      	cmp	r2, #48	; 0x30
 8005828:	d0fa      	beq.n	8005820 <_dtoa_r+0xb98>
 800582a:	e6dd      	b.n	80055e8 <_dtoa_r+0x960>
 800582c:	9a00      	ldr	r2, [sp, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d189      	bne.n	8005746 <_dtoa_r+0xabe>
 8005832:	f10b 0b01 	add.w	fp, fp, #1
 8005836:	2331      	movs	r3, #49	; 0x31
 8005838:	e796      	b.n	8005768 <_dtoa_r+0xae0>
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <_dtoa_r+0xbdc>)
 800583c:	f7ff ba99 	b.w	8004d72 <_dtoa_r+0xea>
 8005840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005842:	2b00      	cmp	r3, #0
 8005844:	f47f aa6d 	bne.w	8004d22 <_dtoa_r+0x9a>
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <_dtoa_r+0xbe0>)
 800584a:	f7ff ba92 	b.w	8004d72 <_dtoa_r+0xea>
 800584e:	9b01      	ldr	r3, [sp, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	dcb5      	bgt.n	80057c0 <_dtoa_r+0xb38>
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	2b02      	cmp	r3, #2
 8005858:	f73f aeb1 	bgt.w	80055be <_dtoa_r+0x936>
 800585c:	e7b0      	b.n	80057c0 <_dtoa_r+0xb38>
 800585e:	bf00      	nop
 8005860:	08006e0c 	.word	0x08006e0c
 8005864:	08006d6c 	.word	0x08006d6c
 8005868:	08006d90 	.word	0x08006d90

0800586c <_free_r>:
 800586c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800586e:	2900      	cmp	r1, #0
 8005870:	d044      	beq.n	80058fc <_free_r+0x90>
 8005872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005876:	9001      	str	r0, [sp, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f1a1 0404 	sub.w	r4, r1, #4
 800587e:	bfb8      	it	lt
 8005880:	18e4      	addlt	r4, r4, r3
 8005882:	f000 f8e7 	bl	8005a54 <__malloc_lock>
 8005886:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <_free_r+0x94>)
 8005888:	9801      	ldr	r0, [sp, #4]
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	b933      	cbnz	r3, 800589c <_free_r+0x30>
 800588e:	6063      	str	r3, [r4, #4]
 8005890:	6014      	str	r4, [r2, #0]
 8005892:	b003      	add	sp, #12
 8005894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005898:	f000 b8e2 	b.w	8005a60 <__malloc_unlock>
 800589c:	42a3      	cmp	r3, r4
 800589e:	d908      	bls.n	80058b2 <_free_r+0x46>
 80058a0:	6825      	ldr	r5, [r4, #0]
 80058a2:	1961      	adds	r1, r4, r5
 80058a4:	428b      	cmp	r3, r1
 80058a6:	bf01      	itttt	eq
 80058a8:	6819      	ldreq	r1, [r3, #0]
 80058aa:	685b      	ldreq	r3, [r3, #4]
 80058ac:	1949      	addeq	r1, r1, r5
 80058ae:	6021      	streq	r1, [r4, #0]
 80058b0:	e7ed      	b.n	800588e <_free_r+0x22>
 80058b2:	461a      	mov	r2, r3
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b10b      	cbz	r3, 80058bc <_free_r+0x50>
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d9fa      	bls.n	80058b2 <_free_r+0x46>
 80058bc:	6811      	ldr	r1, [r2, #0]
 80058be:	1855      	adds	r5, r2, r1
 80058c0:	42a5      	cmp	r5, r4
 80058c2:	d10b      	bne.n	80058dc <_free_r+0x70>
 80058c4:	6824      	ldr	r4, [r4, #0]
 80058c6:	4421      	add	r1, r4
 80058c8:	1854      	adds	r4, r2, r1
 80058ca:	42a3      	cmp	r3, r4
 80058cc:	6011      	str	r1, [r2, #0]
 80058ce:	d1e0      	bne.n	8005892 <_free_r+0x26>
 80058d0:	681c      	ldr	r4, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	6053      	str	r3, [r2, #4]
 80058d6:	440c      	add	r4, r1
 80058d8:	6014      	str	r4, [r2, #0]
 80058da:	e7da      	b.n	8005892 <_free_r+0x26>
 80058dc:	d902      	bls.n	80058e4 <_free_r+0x78>
 80058de:	230c      	movs	r3, #12
 80058e0:	6003      	str	r3, [r0, #0]
 80058e2:	e7d6      	b.n	8005892 <_free_r+0x26>
 80058e4:	6825      	ldr	r5, [r4, #0]
 80058e6:	1961      	adds	r1, r4, r5
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf04      	itt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	bf04      	itt	eq
 80058f4:	1949      	addeq	r1, r1, r5
 80058f6:	6021      	streq	r1, [r4, #0]
 80058f8:	6054      	str	r4, [r2, #4]
 80058fa:	e7ca      	b.n	8005892 <_free_r+0x26>
 80058fc:	b003      	add	sp, #12
 80058fe:	bd30      	pop	{r4, r5, pc}
 8005900:	20000538 	.word	0x20000538

08005904 <malloc>:
 8005904:	4b02      	ldr	r3, [pc, #8]	; (8005910 <malloc+0xc>)
 8005906:	4601      	mov	r1, r0
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	f000 b823 	b.w	8005954 <_malloc_r>
 800590e:	bf00      	nop
 8005910:	20000064 	.word	0x20000064

08005914 <sbrk_aligned>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	4e0e      	ldr	r6, [pc, #56]	; (8005950 <sbrk_aligned+0x3c>)
 8005918:	460c      	mov	r4, r1
 800591a:	6831      	ldr	r1, [r6, #0]
 800591c:	4605      	mov	r5, r0
 800591e:	b911      	cbnz	r1, 8005926 <sbrk_aligned+0x12>
 8005920:	f000 fe40 	bl	80065a4 <_sbrk_r>
 8005924:	6030      	str	r0, [r6, #0]
 8005926:	4621      	mov	r1, r4
 8005928:	4628      	mov	r0, r5
 800592a:	f000 fe3b 	bl	80065a4 <_sbrk_r>
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	d00a      	beq.n	8005948 <sbrk_aligned+0x34>
 8005932:	1cc4      	adds	r4, r0, #3
 8005934:	f024 0403 	bic.w	r4, r4, #3
 8005938:	42a0      	cmp	r0, r4
 800593a:	d007      	beq.n	800594c <sbrk_aligned+0x38>
 800593c:	1a21      	subs	r1, r4, r0
 800593e:	4628      	mov	r0, r5
 8005940:	f000 fe30 	bl	80065a4 <_sbrk_r>
 8005944:	3001      	adds	r0, #1
 8005946:	d101      	bne.n	800594c <sbrk_aligned+0x38>
 8005948:	f04f 34ff 	mov.w	r4, #4294967295
 800594c:	4620      	mov	r0, r4
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	2000053c 	.word	0x2000053c

08005954 <_malloc_r>:
 8005954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005958:	1ccd      	adds	r5, r1, #3
 800595a:	f025 0503 	bic.w	r5, r5, #3
 800595e:	3508      	adds	r5, #8
 8005960:	2d0c      	cmp	r5, #12
 8005962:	bf38      	it	cc
 8005964:	250c      	movcc	r5, #12
 8005966:	2d00      	cmp	r5, #0
 8005968:	4607      	mov	r7, r0
 800596a:	db01      	blt.n	8005970 <_malloc_r+0x1c>
 800596c:	42a9      	cmp	r1, r5
 800596e:	d905      	bls.n	800597c <_malloc_r+0x28>
 8005970:	230c      	movs	r3, #12
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	2600      	movs	r6, #0
 8005976:	4630      	mov	r0, r6
 8005978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a50 <_malloc_r+0xfc>
 8005980:	f000 f868 	bl	8005a54 <__malloc_lock>
 8005984:	f8d8 3000 	ldr.w	r3, [r8]
 8005988:	461c      	mov	r4, r3
 800598a:	bb5c      	cbnz	r4, 80059e4 <_malloc_r+0x90>
 800598c:	4629      	mov	r1, r5
 800598e:	4638      	mov	r0, r7
 8005990:	f7ff ffc0 	bl	8005914 <sbrk_aligned>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	4604      	mov	r4, r0
 8005998:	d155      	bne.n	8005a46 <_malloc_r+0xf2>
 800599a:	f8d8 4000 	ldr.w	r4, [r8]
 800599e:	4626      	mov	r6, r4
 80059a0:	2e00      	cmp	r6, #0
 80059a2:	d145      	bne.n	8005a30 <_malloc_r+0xdc>
 80059a4:	2c00      	cmp	r4, #0
 80059a6:	d048      	beq.n	8005a3a <_malloc_r+0xe6>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	4631      	mov	r1, r6
 80059ac:	4638      	mov	r0, r7
 80059ae:	eb04 0903 	add.w	r9, r4, r3
 80059b2:	f000 fdf7 	bl	80065a4 <_sbrk_r>
 80059b6:	4581      	cmp	r9, r0
 80059b8:	d13f      	bne.n	8005a3a <_malloc_r+0xe6>
 80059ba:	6821      	ldr	r1, [r4, #0]
 80059bc:	1a6d      	subs	r5, r5, r1
 80059be:	4629      	mov	r1, r5
 80059c0:	4638      	mov	r0, r7
 80059c2:	f7ff ffa7 	bl	8005914 <sbrk_aligned>
 80059c6:	3001      	adds	r0, #1
 80059c8:	d037      	beq.n	8005a3a <_malloc_r+0xe6>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	442b      	add	r3, r5
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	f8d8 3000 	ldr.w	r3, [r8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d038      	beq.n	8005a4a <_malloc_r+0xf6>
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	42a2      	cmp	r2, r4
 80059dc:	d12b      	bne.n	8005a36 <_malloc_r+0xe2>
 80059de:	2200      	movs	r2, #0
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	e00f      	b.n	8005a04 <_malloc_r+0xb0>
 80059e4:	6822      	ldr	r2, [r4, #0]
 80059e6:	1b52      	subs	r2, r2, r5
 80059e8:	d41f      	bmi.n	8005a2a <_malloc_r+0xd6>
 80059ea:	2a0b      	cmp	r2, #11
 80059ec:	d917      	bls.n	8005a1e <_malloc_r+0xca>
 80059ee:	1961      	adds	r1, r4, r5
 80059f0:	42a3      	cmp	r3, r4
 80059f2:	6025      	str	r5, [r4, #0]
 80059f4:	bf18      	it	ne
 80059f6:	6059      	strne	r1, [r3, #4]
 80059f8:	6863      	ldr	r3, [r4, #4]
 80059fa:	bf08      	it	eq
 80059fc:	f8c8 1000 	streq.w	r1, [r8]
 8005a00:	5162      	str	r2, [r4, r5]
 8005a02:	604b      	str	r3, [r1, #4]
 8005a04:	4638      	mov	r0, r7
 8005a06:	f104 060b 	add.w	r6, r4, #11
 8005a0a:	f000 f829 	bl	8005a60 <__malloc_unlock>
 8005a0e:	f026 0607 	bic.w	r6, r6, #7
 8005a12:	1d23      	adds	r3, r4, #4
 8005a14:	1af2      	subs	r2, r6, r3
 8005a16:	d0ae      	beq.n	8005976 <_malloc_r+0x22>
 8005a18:	1b9b      	subs	r3, r3, r6
 8005a1a:	50a3      	str	r3, [r4, r2]
 8005a1c:	e7ab      	b.n	8005976 <_malloc_r+0x22>
 8005a1e:	42a3      	cmp	r3, r4
 8005a20:	6862      	ldr	r2, [r4, #4]
 8005a22:	d1dd      	bne.n	80059e0 <_malloc_r+0x8c>
 8005a24:	f8c8 2000 	str.w	r2, [r8]
 8005a28:	e7ec      	b.n	8005a04 <_malloc_r+0xb0>
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	6864      	ldr	r4, [r4, #4]
 8005a2e:	e7ac      	b.n	800598a <_malloc_r+0x36>
 8005a30:	4634      	mov	r4, r6
 8005a32:	6876      	ldr	r6, [r6, #4]
 8005a34:	e7b4      	b.n	80059a0 <_malloc_r+0x4c>
 8005a36:	4613      	mov	r3, r2
 8005a38:	e7cc      	b.n	80059d4 <_malloc_r+0x80>
 8005a3a:	230c      	movs	r3, #12
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f000 f80e 	bl	8005a60 <__malloc_unlock>
 8005a44:	e797      	b.n	8005976 <_malloc_r+0x22>
 8005a46:	6025      	str	r5, [r4, #0]
 8005a48:	e7dc      	b.n	8005a04 <_malloc_r+0xb0>
 8005a4a:	605b      	str	r3, [r3, #4]
 8005a4c:	deff      	udf	#255	; 0xff
 8005a4e:	bf00      	nop
 8005a50:	20000538 	.word	0x20000538

08005a54 <__malloc_lock>:
 8005a54:	4801      	ldr	r0, [pc, #4]	; (8005a5c <__malloc_lock+0x8>)
 8005a56:	f7ff b88a 	b.w	8004b6e <__retarget_lock_acquire_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	20000534 	.word	0x20000534

08005a60 <__malloc_unlock>:
 8005a60:	4801      	ldr	r0, [pc, #4]	; (8005a68 <__malloc_unlock+0x8>)
 8005a62:	f7ff b885 	b.w	8004b70 <__retarget_lock_release_recursive>
 8005a66:	bf00      	nop
 8005a68:	20000534 	.word	0x20000534

08005a6c <_Balloc>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	69c6      	ldr	r6, [r0, #28]
 8005a70:	4604      	mov	r4, r0
 8005a72:	460d      	mov	r5, r1
 8005a74:	b976      	cbnz	r6, 8005a94 <_Balloc+0x28>
 8005a76:	2010      	movs	r0, #16
 8005a78:	f7ff ff44 	bl	8005904 <malloc>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	61e0      	str	r0, [r4, #28]
 8005a80:	b920      	cbnz	r0, 8005a8c <_Balloc+0x20>
 8005a82:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <_Balloc+0x78>)
 8005a84:	4818      	ldr	r0, [pc, #96]	; (8005ae8 <_Balloc+0x7c>)
 8005a86:	216b      	movs	r1, #107	; 0x6b
 8005a88:	f000 fdaa 	bl	80065e0 <__assert_func>
 8005a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a90:	6006      	str	r6, [r0, #0]
 8005a92:	60c6      	str	r6, [r0, #12]
 8005a94:	69e6      	ldr	r6, [r4, #28]
 8005a96:	68f3      	ldr	r3, [r6, #12]
 8005a98:	b183      	cbz	r3, 8005abc <_Balloc+0x50>
 8005a9a:	69e3      	ldr	r3, [r4, #28]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aa2:	b9b8      	cbnz	r0, 8005ad4 <_Balloc+0x68>
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	fa01 f605 	lsl.w	r6, r1, r5
 8005aaa:	1d72      	adds	r2, r6, #5
 8005aac:	0092      	lsls	r2, r2, #2
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 fdb4 	bl	800661c <_calloc_r>
 8005ab4:	b160      	cbz	r0, 8005ad0 <_Balloc+0x64>
 8005ab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005aba:	e00e      	b.n	8005ada <_Balloc+0x6e>
 8005abc:	2221      	movs	r2, #33	; 0x21
 8005abe:	2104      	movs	r1, #4
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 fdab 	bl	800661c <_calloc_r>
 8005ac6:	69e3      	ldr	r3, [r4, #28]
 8005ac8:	60f0      	str	r0, [r6, #12]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e4      	bne.n	8005a9a <_Balloc+0x2e>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	6802      	ldr	r2, [r0, #0]
 8005ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ada:	2300      	movs	r3, #0
 8005adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ae0:	e7f7      	b.n	8005ad2 <_Balloc+0x66>
 8005ae2:	bf00      	nop
 8005ae4:	08006d9d 	.word	0x08006d9d
 8005ae8:	08006e1d 	.word	0x08006e1d

08005aec <_Bfree>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	69c6      	ldr	r6, [r0, #28]
 8005af0:	4605      	mov	r5, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	b976      	cbnz	r6, 8005b14 <_Bfree+0x28>
 8005af6:	2010      	movs	r0, #16
 8005af8:	f7ff ff04 	bl	8005904 <malloc>
 8005afc:	4602      	mov	r2, r0
 8005afe:	61e8      	str	r0, [r5, #28]
 8005b00:	b920      	cbnz	r0, 8005b0c <_Bfree+0x20>
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <_Bfree+0x3c>)
 8005b04:	4809      	ldr	r0, [pc, #36]	; (8005b2c <_Bfree+0x40>)
 8005b06:	218f      	movs	r1, #143	; 0x8f
 8005b08:	f000 fd6a 	bl	80065e0 <__assert_func>
 8005b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b10:	6006      	str	r6, [r0, #0]
 8005b12:	60c6      	str	r6, [r0, #12]
 8005b14:	b13c      	cbz	r4, 8005b26 <_Bfree+0x3a>
 8005b16:	69eb      	ldr	r3, [r5, #28]
 8005b18:	6862      	ldr	r2, [r4, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b20:	6021      	str	r1, [r4, #0]
 8005b22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	08006d9d 	.word	0x08006d9d
 8005b2c:	08006e1d 	.word	0x08006e1d

08005b30 <__multadd>:
 8005b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b34:	690d      	ldr	r5, [r1, #16]
 8005b36:	4607      	mov	r7, r0
 8005b38:	460c      	mov	r4, r1
 8005b3a:	461e      	mov	r6, r3
 8005b3c:	f101 0c14 	add.w	ip, r1, #20
 8005b40:	2000      	movs	r0, #0
 8005b42:	f8dc 3000 	ldr.w	r3, [ip]
 8005b46:	b299      	uxth	r1, r3
 8005b48:	fb02 6101 	mla	r1, r2, r1, r6
 8005b4c:	0c1e      	lsrs	r6, r3, #16
 8005b4e:	0c0b      	lsrs	r3, r1, #16
 8005b50:	fb02 3306 	mla	r3, r2, r6, r3
 8005b54:	b289      	uxth	r1, r1
 8005b56:	3001      	adds	r0, #1
 8005b58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b5c:	4285      	cmp	r5, r0
 8005b5e:	f84c 1b04 	str.w	r1, [ip], #4
 8005b62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b66:	dcec      	bgt.n	8005b42 <__multadd+0x12>
 8005b68:	b30e      	cbz	r6, 8005bae <__multadd+0x7e>
 8005b6a:	68a3      	ldr	r3, [r4, #8]
 8005b6c:	42ab      	cmp	r3, r5
 8005b6e:	dc19      	bgt.n	8005ba4 <__multadd+0x74>
 8005b70:	6861      	ldr	r1, [r4, #4]
 8005b72:	4638      	mov	r0, r7
 8005b74:	3101      	adds	r1, #1
 8005b76:	f7ff ff79 	bl	8005a6c <_Balloc>
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	b928      	cbnz	r0, 8005b8a <__multadd+0x5a>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <__multadd+0x84>)
 8005b82:	480d      	ldr	r0, [pc, #52]	; (8005bb8 <__multadd+0x88>)
 8005b84:	21ba      	movs	r1, #186	; 0xba
 8005b86:	f000 fd2b 	bl	80065e0 <__assert_func>
 8005b8a:	6922      	ldr	r2, [r4, #16]
 8005b8c:	3202      	adds	r2, #2
 8005b8e:	f104 010c 	add.w	r1, r4, #12
 8005b92:	0092      	lsls	r2, r2, #2
 8005b94:	300c      	adds	r0, #12
 8005b96:	f000 fd15 	bl	80065c4 <memcpy>
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	f7ff ffa5 	bl	8005aec <_Bfree>
 8005ba2:	4644      	mov	r4, r8
 8005ba4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ba8:	3501      	adds	r5, #1
 8005baa:	615e      	str	r6, [r3, #20]
 8005bac:	6125      	str	r5, [r4, #16]
 8005bae:	4620      	mov	r0, r4
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb4:	08006e0c 	.word	0x08006e0c
 8005bb8:	08006e1d 	.word	0x08006e1d

08005bbc <__hi0bits>:
 8005bbc:	0c03      	lsrs	r3, r0, #16
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	b9d3      	cbnz	r3, 8005bf8 <__hi0bits+0x3c>
 8005bc2:	0400      	lsls	r0, r0, #16
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005bca:	bf04      	itt	eq
 8005bcc:	0200      	lsleq	r0, r0, #8
 8005bce:	3308      	addeq	r3, #8
 8005bd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bd4:	bf04      	itt	eq
 8005bd6:	0100      	lsleq	r0, r0, #4
 8005bd8:	3304      	addeq	r3, #4
 8005bda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005bde:	bf04      	itt	eq
 8005be0:	0080      	lsleq	r0, r0, #2
 8005be2:	3302      	addeq	r3, #2
 8005be4:	2800      	cmp	r0, #0
 8005be6:	db05      	blt.n	8005bf4 <__hi0bits+0x38>
 8005be8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005bec:	f103 0301 	add.w	r3, r3, #1
 8005bf0:	bf08      	it	eq
 8005bf2:	2320      	moveq	r3, #32
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	4770      	bx	lr
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e7e4      	b.n	8005bc6 <__hi0bits+0xa>

08005bfc <__lo0bits>:
 8005bfc:	6803      	ldr	r3, [r0, #0]
 8005bfe:	f013 0207 	ands.w	r2, r3, #7
 8005c02:	d00c      	beq.n	8005c1e <__lo0bits+0x22>
 8005c04:	07d9      	lsls	r1, r3, #31
 8005c06:	d422      	bmi.n	8005c4e <__lo0bits+0x52>
 8005c08:	079a      	lsls	r2, r3, #30
 8005c0a:	bf49      	itett	mi
 8005c0c:	085b      	lsrmi	r3, r3, #1
 8005c0e:	089b      	lsrpl	r3, r3, #2
 8005c10:	6003      	strmi	r3, [r0, #0]
 8005c12:	2201      	movmi	r2, #1
 8005c14:	bf5c      	itt	pl
 8005c16:	6003      	strpl	r3, [r0, #0]
 8005c18:	2202      	movpl	r2, #2
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4770      	bx	lr
 8005c1e:	b299      	uxth	r1, r3
 8005c20:	b909      	cbnz	r1, 8005c26 <__lo0bits+0x2a>
 8005c22:	0c1b      	lsrs	r3, r3, #16
 8005c24:	2210      	movs	r2, #16
 8005c26:	b2d9      	uxtb	r1, r3
 8005c28:	b909      	cbnz	r1, 8005c2e <__lo0bits+0x32>
 8005c2a:	3208      	adds	r2, #8
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	0719      	lsls	r1, r3, #28
 8005c30:	bf04      	itt	eq
 8005c32:	091b      	lsreq	r3, r3, #4
 8005c34:	3204      	addeq	r2, #4
 8005c36:	0799      	lsls	r1, r3, #30
 8005c38:	bf04      	itt	eq
 8005c3a:	089b      	lsreq	r3, r3, #2
 8005c3c:	3202      	addeq	r2, #2
 8005c3e:	07d9      	lsls	r1, r3, #31
 8005c40:	d403      	bmi.n	8005c4a <__lo0bits+0x4e>
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	f102 0201 	add.w	r2, r2, #1
 8005c48:	d003      	beq.n	8005c52 <__lo0bits+0x56>
 8005c4a:	6003      	str	r3, [r0, #0]
 8005c4c:	e7e5      	b.n	8005c1a <__lo0bits+0x1e>
 8005c4e:	2200      	movs	r2, #0
 8005c50:	e7e3      	b.n	8005c1a <__lo0bits+0x1e>
 8005c52:	2220      	movs	r2, #32
 8005c54:	e7e1      	b.n	8005c1a <__lo0bits+0x1e>
	...

08005c58 <__i2b>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	f7ff ff05 	bl	8005a6c <_Balloc>
 8005c62:	4602      	mov	r2, r0
 8005c64:	b928      	cbnz	r0, 8005c72 <__i2b+0x1a>
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <__i2b+0x24>)
 8005c68:	4805      	ldr	r0, [pc, #20]	; (8005c80 <__i2b+0x28>)
 8005c6a:	f240 1145 	movw	r1, #325	; 0x145
 8005c6e:	f000 fcb7 	bl	80065e0 <__assert_func>
 8005c72:	2301      	movs	r3, #1
 8005c74:	6144      	str	r4, [r0, #20]
 8005c76:	6103      	str	r3, [r0, #16]
 8005c78:	bd10      	pop	{r4, pc}
 8005c7a:	bf00      	nop
 8005c7c:	08006e0c 	.word	0x08006e0c
 8005c80:	08006e1d 	.word	0x08006e1d

08005c84 <__multiply>:
 8005c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c88:	4691      	mov	r9, r2
 8005c8a:	690a      	ldr	r2, [r1, #16]
 8005c8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	bfb8      	it	lt
 8005c94:	460b      	movlt	r3, r1
 8005c96:	460c      	mov	r4, r1
 8005c98:	bfbc      	itt	lt
 8005c9a:	464c      	movlt	r4, r9
 8005c9c:	4699      	movlt	r9, r3
 8005c9e:	6927      	ldr	r7, [r4, #16]
 8005ca0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ca4:	68a3      	ldr	r3, [r4, #8]
 8005ca6:	6861      	ldr	r1, [r4, #4]
 8005ca8:	eb07 060a 	add.w	r6, r7, sl
 8005cac:	42b3      	cmp	r3, r6
 8005cae:	b085      	sub	sp, #20
 8005cb0:	bfb8      	it	lt
 8005cb2:	3101      	addlt	r1, #1
 8005cb4:	f7ff feda 	bl	8005a6c <_Balloc>
 8005cb8:	b930      	cbnz	r0, 8005cc8 <__multiply+0x44>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	4b44      	ldr	r3, [pc, #272]	; (8005dd0 <__multiply+0x14c>)
 8005cbe:	4845      	ldr	r0, [pc, #276]	; (8005dd4 <__multiply+0x150>)
 8005cc0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005cc4:	f000 fc8c 	bl	80065e0 <__assert_func>
 8005cc8:	f100 0514 	add.w	r5, r0, #20
 8005ccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cd0:	462b      	mov	r3, r5
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4543      	cmp	r3, r8
 8005cd6:	d321      	bcc.n	8005d1c <__multiply+0x98>
 8005cd8:	f104 0314 	add.w	r3, r4, #20
 8005cdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ce0:	f109 0314 	add.w	r3, r9, #20
 8005ce4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ce8:	9202      	str	r2, [sp, #8]
 8005cea:	1b3a      	subs	r2, r7, r4
 8005cec:	3a15      	subs	r2, #21
 8005cee:	f022 0203 	bic.w	r2, r2, #3
 8005cf2:	3204      	adds	r2, #4
 8005cf4:	f104 0115 	add.w	r1, r4, #21
 8005cf8:	428f      	cmp	r7, r1
 8005cfa:	bf38      	it	cc
 8005cfc:	2204      	movcc	r2, #4
 8005cfe:	9201      	str	r2, [sp, #4]
 8005d00:	9a02      	ldr	r2, [sp, #8]
 8005d02:	9303      	str	r3, [sp, #12]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d80c      	bhi.n	8005d22 <__multiply+0x9e>
 8005d08:	2e00      	cmp	r6, #0
 8005d0a:	dd03      	ble.n	8005d14 <__multiply+0x90>
 8005d0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d05b      	beq.n	8005dcc <__multiply+0x148>
 8005d14:	6106      	str	r6, [r0, #16]
 8005d16:	b005      	add	sp, #20
 8005d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1c:	f843 2b04 	str.w	r2, [r3], #4
 8005d20:	e7d8      	b.n	8005cd4 <__multiply+0x50>
 8005d22:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d26:	f1ba 0f00 	cmp.w	sl, #0
 8005d2a:	d024      	beq.n	8005d76 <__multiply+0xf2>
 8005d2c:	f104 0e14 	add.w	lr, r4, #20
 8005d30:	46a9      	mov	r9, r5
 8005d32:	f04f 0c00 	mov.w	ip, #0
 8005d36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d3a:	f8d9 1000 	ldr.w	r1, [r9]
 8005d3e:	fa1f fb82 	uxth.w	fp, r2
 8005d42:	b289      	uxth	r1, r1
 8005d44:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d50:	4461      	add	r1, ip
 8005d52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d56:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d5e:	b289      	uxth	r1, r1
 8005d60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d64:	4577      	cmp	r7, lr
 8005d66:	f849 1b04 	str.w	r1, [r9], #4
 8005d6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d6e:	d8e2      	bhi.n	8005d36 <__multiply+0xb2>
 8005d70:	9a01      	ldr	r2, [sp, #4]
 8005d72:	f845 c002 	str.w	ip, [r5, r2]
 8005d76:	9a03      	ldr	r2, [sp, #12]
 8005d78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	f1b9 0f00 	cmp.w	r9, #0
 8005d82:	d021      	beq.n	8005dc8 <__multiply+0x144>
 8005d84:	6829      	ldr	r1, [r5, #0]
 8005d86:	f104 0c14 	add.w	ip, r4, #20
 8005d8a:	46ae      	mov	lr, r5
 8005d8c:	f04f 0a00 	mov.w	sl, #0
 8005d90:	f8bc b000 	ldrh.w	fp, [ip]
 8005d94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d98:	fb09 220b 	mla	r2, r9, fp, r2
 8005d9c:	4452      	add	r2, sl
 8005d9e:	b289      	uxth	r1, r1
 8005da0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005da4:	f84e 1b04 	str.w	r1, [lr], #4
 8005da8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005dac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005db0:	f8be 1000 	ldrh.w	r1, [lr]
 8005db4:	fb09 110a 	mla	r1, r9, sl, r1
 8005db8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005dbc:	4567      	cmp	r7, ip
 8005dbe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005dc2:	d8e5      	bhi.n	8005d90 <__multiply+0x10c>
 8005dc4:	9a01      	ldr	r2, [sp, #4]
 8005dc6:	50a9      	str	r1, [r5, r2]
 8005dc8:	3504      	adds	r5, #4
 8005dca:	e799      	b.n	8005d00 <__multiply+0x7c>
 8005dcc:	3e01      	subs	r6, #1
 8005dce:	e79b      	b.n	8005d08 <__multiply+0x84>
 8005dd0:	08006e0c 	.word	0x08006e0c
 8005dd4:	08006e1d 	.word	0x08006e1d

08005dd8 <__pow5mult>:
 8005dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ddc:	4615      	mov	r5, r2
 8005dde:	f012 0203 	ands.w	r2, r2, #3
 8005de2:	4606      	mov	r6, r0
 8005de4:	460f      	mov	r7, r1
 8005de6:	d007      	beq.n	8005df8 <__pow5mult+0x20>
 8005de8:	4c25      	ldr	r4, [pc, #148]	; (8005e80 <__pow5mult+0xa8>)
 8005dea:	3a01      	subs	r2, #1
 8005dec:	2300      	movs	r3, #0
 8005dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005df2:	f7ff fe9d 	bl	8005b30 <__multadd>
 8005df6:	4607      	mov	r7, r0
 8005df8:	10ad      	asrs	r5, r5, #2
 8005dfa:	d03d      	beq.n	8005e78 <__pow5mult+0xa0>
 8005dfc:	69f4      	ldr	r4, [r6, #28]
 8005dfe:	b97c      	cbnz	r4, 8005e20 <__pow5mult+0x48>
 8005e00:	2010      	movs	r0, #16
 8005e02:	f7ff fd7f 	bl	8005904 <malloc>
 8005e06:	4602      	mov	r2, r0
 8005e08:	61f0      	str	r0, [r6, #28]
 8005e0a:	b928      	cbnz	r0, 8005e18 <__pow5mult+0x40>
 8005e0c:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <__pow5mult+0xac>)
 8005e0e:	481e      	ldr	r0, [pc, #120]	; (8005e88 <__pow5mult+0xb0>)
 8005e10:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005e14:	f000 fbe4 	bl	80065e0 <__assert_func>
 8005e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e1c:	6004      	str	r4, [r0, #0]
 8005e1e:	60c4      	str	r4, [r0, #12]
 8005e20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e28:	b94c      	cbnz	r4, 8005e3e <__pow5mult+0x66>
 8005e2a:	f240 2171 	movw	r1, #625	; 0x271
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7ff ff12 	bl	8005c58 <__i2b>
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	6003      	str	r3, [r0, #0]
 8005e3e:	f04f 0900 	mov.w	r9, #0
 8005e42:	07eb      	lsls	r3, r5, #31
 8005e44:	d50a      	bpl.n	8005e5c <__pow5mult+0x84>
 8005e46:	4639      	mov	r1, r7
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f7ff ff1a 	bl	8005c84 <__multiply>
 8005e50:	4639      	mov	r1, r7
 8005e52:	4680      	mov	r8, r0
 8005e54:	4630      	mov	r0, r6
 8005e56:	f7ff fe49 	bl	8005aec <_Bfree>
 8005e5a:	4647      	mov	r7, r8
 8005e5c:	106d      	asrs	r5, r5, #1
 8005e5e:	d00b      	beq.n	8005e78 <__pow5mult+0xa0>
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	b938      	cbnz	r0, 8005e74 <__pow5mult+0x9c>
 8005e64:	4622      	mov	r2, r4
 8005e66:	4621      	mov	r1, r4
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7ff ff0b 	bl	8005c84 <__multiply>
 8005e6e:	6020      	str	r0, [r4, #0]
 8005e70:	f8c0 9000 	str.w	r9, [r0]
 8005e74:	4604      	mov	r4, r0
 8005e76:	e7e4      	b.n	8005e42 <__pow5mult+0x6a>
 8005e78:	4638      	mov	r0, r7
 8005e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7e:	bf00      	nop
 8005e80:	08006f68 	.word	0x08006f68
 8005e84:	08006d9d 	.word	0x08006d9d
 8005e88:	08006e1d 	.word	0x08006e1d

08005e8c <__lshift>:
 8005e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e90:	460c      	mov	r4, r1
 8005e92:	6849      	ldr	r1, [r1, #4]
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	4691      	mov	r9, r2
 8005ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ea4:	f108 0601 	add.w	r6, r8, #1
 8005ea8:	42b3      	cmp	r3, r6
 8005eaa:	db0b      	blt.n	8005ec4 <__lshift+0x38>
 8005eac:	4638      	mov	r0, r7
 8005eae:	f7ff fddd 	bl	8005a6c <_Balloc>
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	b948      	cbnz	r0, 8005eca <__lshift+0x3e>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	4b28      	ldr	r3, [pc, #160]	; (8005f5c <__lshift+0xd0>)
 8005eba:	4829      	ldr	r0, [pc, #164]	; (8005f60 <__lshift+0xd4>)
 8005ebc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005ec0:	f000 fb8e 	bl	80065e0 <__assert_func>
 8005ec4:	3101      	adds	r1, #1
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	e7ee      	b.n	8005ea8 <__lshift+0x1c>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f100 0114 	add.w	r1, r0, #20
 8005ed0:	f100 0210 	add.w	r2, r0, #16
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	4553      	cmp	r3, sl
 8005ed8:	db33      	blt.n	8005f42 <__lshift+0xb6>
 8005eda:	6920      	ldr	r0, [r4, #16]
 8005edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ee0:	f104 0314 	add.w	r3, r4, #20
 8005ee4:	f019 091f 	ands.w	r9, r9, #31
 8005ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005eec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ef0:	d02b      	beq.n	8005f4a <__lshift+0xbe>
 8005ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ef6:	468a      	mov	sl, r1
 8005ef8:	2200      	movs	r2, #0
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	fa00 f009 	lsl.w	r0, r0, r9
 8005f00:	4310      	orrs	r0, r2
 8005f02:	f84a 0b04 	str.w	r0, [sl], #4
 8005f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f0a:	459c      	cmp	ip, r3
 8005f0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f10:	d8f3      	bhi.n	8005efa <__lshift+0x6e>
 8005f12:	ebac 0304 	sub.w	r3, ip, r4
 8005f16:	3b15      	subs	r3, #21
 8005f18:	f023 0303 	bic.w	r3, r3, #3
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	f104 0015 	add.w	r0, r4, #21
 8005f22:	4584      	cmp	ip, r0
 8005f24:	bf38      	it	cc
 8005f26:	2304      	movcc	r3, #4
 8005f28:	50ca      	str	r2, [r1, r3]
 8005f2a:	b10a      	cbz	r2, 8005f30 <__lshift+0xa4>
 8005f2c:	f108 0602 	add.w	r6, r8, #2
 8005f30:	3e01      	subs	r6, #1
 8005f32:	4638      	mov	r0, r7
 8005f34:	612e      	str	r6, [r5, #16]
 8005f36:	4621      	mov	r1, r4
 8005f38:	f7ff fdd8 	bl	8005aec <_Bfree>
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f42:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f46:	3301      	adds	r3, #1
 8005f48:	e7c5      	b.n	8005ed6 <__lshift+0x4a>
 8005f4a:	3904      	subs	r1, #4
 8005f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f50:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f54:	459c      	cmp	ip, r3
 8005f56:	d8f9      	bhi.n	8005f4c <__lshift+0xc0>
 8005f58:	e7ea      	b.n	8005f30 <__lshift+0xa4>
 8005f5a:	bf00      	nop
 8005f5c:	08006e0c 	.word	0x08006e0c
 8005f60:	08006e1d 	.word	0x08006e1d

08005f64 <__mcmp>:
 8005f64:	b530      	push	{r4, r5, lr}
 8005f66:	6902      	ldr	r2, [r0, #16]
 8005f68:	690c      	ldr	r4, [r1, #16]
 8005f6a:	1b12      	subs	r2, r2, r4
 8005f6c:	d10e      	bne.n	8005f8c <__mcmp+0x28>
 8005f6e:	f100 0314 	add.w	r3, r0, #20
 8005f72:	3114      	adds	r1, #20
 8005f74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f84:	42a5      	cmp	r5, r4
 8005f86:	d003      	beq.n	8005f90 <__mcmp+0x2c>
 8005f88:	d305      	bcc.n	8005f96 <__mcmp+0x32>
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	bd30      	pop	{r4, r5, pc}
 8005f90:	4283      	cmp	r3, r0
 8005f92:	d3f3      	bcc.n	8005f7c <__mcmp+0x18>
 8005f94:	e7fa      	b.n	8005f8c <__mcmp+0x28>
 8005f96:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9a:	e7f7      	b.n	8005f8c <__mcmp+0x28>

08005f9c <__mdiff>:
 8005f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	4690      	mov	r8, r2
 8005faa:	f7ff ffdb 	bl	8005f64 <__mcmp>
 8005fae:	1e05      	subs	r5, r0, #0
 8005fb0:	d110      	bne.n	8005fd4 <__mdiff+0x38>
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f7ff fd59 	bl	8005a6c <_Balloc>
 8005fba:	b930      	cbnz	r0, 8005fca <__mdiff+0x2e>
 8005fbc:	4b3a      	ldr	r3, [pc, #232]	; (80060a8 <__mdiff+0x10c>)
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	f240 2137 	movw	r1, #567	; 0x237
 8005fc4:	4839      	ldr	r0, [pc, #228]	; (80060ac <__mdiff+0x110>)
 8005fc6:	f000 fb0b 	bl	80065e0 <__assert_func>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	bfa4      	itt	ge
 8005fd6:	4643      	movge	r3, r8
 8005fd8:	46a0      	movge	r8, r4
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005fe0:	bfa6      	itte	ge
 8005fe2:	461c      	movge	r4, r3
 8005fe4:	2500      	movge	r5, #0
 8005fe6:	2501      	movlt	r5, #1
 8005fe8:	f7ff fd40 	bl	8005a6c <_Balloc>
 8005fec:	b920      	cbnz	r0, 8005ff8 <__mdiff+0x5c>
 8005fee:	4b2e      	ldr	r3, [pc, #184]	; (80060a8 <__mdiff+0x10c>)
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	f240 2145 	movw	r1, #581	; 0x245
 8005ff6:	e7e5      	b.n	8005fc4 <__mdiff+0x28>
 8005ff8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ffc:	6926      	ldr	r6, [r4, #16]
 8005ffe:	60c5      	str	r5, [r0, #12]
 8006000:	f104 0914 	add.w	r9, r4, #20
 8006004:	f108 0514 	add.w	r5, r8, #20
 8006008:	f100 0e14 	add.w	lr, r0, #20
 800600c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006010:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006014:	f108 0210 	add.w	r2, r8, #16
 8006018:	46f2      	mov	sl, lr
 800601a:	2100      	movs	r1, #0
 800601c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006020:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006024:	fa11 f88b 	uxtah	r8, r1, fp
 8006028:	b299      	uxth	r1, r3
 800602a:	0c1b      	lsrs	r3, r3, #16
 800602c:	eba8 0801 	sub.w	r8, r8, r1
 8006030:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006034:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006038:	fa1f f888 	uxth.w	r8, r8
 800603c:	1419      	asrs	r1, r3, #16
 800603e:	454e      	cmp	r6, r9
 8006040:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006044:	f84a 3b04 	str.w	r3, [sl], #4
 8006048:	d8e8      	bhi.n	800601c <__mdiff+0x80>
 800604a:	1b33      	subs	r3, r6, r4
 800604c:	3b15      	subs	r3, #21
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	3304      	adds	r3, #4
 8006054:	3415      	adds	r4, #21
 8006056:	42a6      	cmp	r6, r4
 8006058:	bf38      	it	cc
 800605a:	2304      	movcc	r3, #4
 800605c:	441d      	add	r5, r3
 800605e:	4473      	add	r3, lr
 8006060:	469e      	mov	lr, r3
 8006062:	462e      	mov	r6, r5
 8006064:	4566      	cmp	r6, ip
 8006066:	d30e      	bcc.n	8006086 <__mdiff+0xea>
 8006068:	f10c 0203 	add.w	r2, ip, #3
 800606c:	1b52      	subs	r2, r2, r5
 800606e:	f022 0203 	bic.w	r2, r2, #3
 8006072:	3d03      	subs	r5, #3
 8006074:	45ac      	cmp	ip, r5
 8006076:	bf38      	it	cc
 8006078:	2200      	movcc	r2, #0
 800607a:	4413      	add	r3, r2
 800607c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006080:	b17a      	cbz	r2, 80060a2 <__mdiff+0x106>
 8006082:	6107      	str	r7, [r0, #16]
 8006084:	e7a4      	b.n	8005fd0 <__mdiff+0x34>
 8006086:	f856 8b04 	ldr.w	r8, [r6], #4
 800608a:	fa11 f288 	uxtah	r2, r1, r8
 800608e:	1414      	asrs	r4, r2, #16
 8006090:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006094:	b292      	uxth	r2, r2
 8006096:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800609a:	f84e 2b04 	str.w	r2, [lr], #4
 800609e:	1421      	asrs	r1, r4, #16
 80060a0:	e7e0      	b.n	8006064 <__mdiff+0xc8>
 80060a2:	3f01      	subs	r7, #1
 80060a4:	e7ea      	b.n	800607c <__mdiff+0xe0>
 80060a6:	bf00      	nop
 80060a8:	08006e0c 	.word	0x08006e0c
 80060ac:	08006e1d 	.word	0x08006e1d

080060b0 <__d2b>:
 80060b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060b4:	460f      	mov	r7, r1
 80060b6:	2101      	movs	r1, #1
 80060b8:	ec59 8b10 	vmov	r8, r9, d0
 80060bc:	4616      	mov	r6, r2
 80060be:	f7ff fcd5 	bl	8005a6c <_Balloc>
 80060c2:	4604      	mov	r4, r0
 80060c4:	b930      	cbnz	r0, 80060d4 <__d2b+0x24>
 80060c6:	4602      	mov	r2, r0
 80060c8:	4b24      	ldr	r3, [pc, #144]	; (800615c <__d2b+0xac>)
 80060ca:	4825      	ldr	r0, [pc, #148]	; (8006160 <__d2b+0xb0>)
 80060cc:	f240 310f 	movw	r1, #783	; 0x30f
 80060d0:	f000 fa86 	bl	80065e0 <__assert_func>
 80060d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80060d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060dc:	bb2d      	cbnz	r5, 800612a <__d2b+0x7a>
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	f1b8 0300 	subs.w	r3, r8, #0
 80060e4:	d026      	beq.n	8006134 <__d2b+0x84>
 80060e6:	4668      	mov	r0, sp
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	f7ff fd87 	bl	8005bfc <__lo0bits>
 80060ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80060f2:	b1e8      	cbz	r0, 8006130 <__d2b+0x80>
 80060f4:	f1c0 0320 	rsb	r3, r0, #32
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	430b      	orrs	r3, r1
 80060fe:	40c2      	lsrs	r2, r0
 8006100:	6163      	str	r3, [r4, #20]
 8006102:	9201      	str	r2, [sp, #4]
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	61a3      	str	r3, [r4, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf14      	ite	ne
 800610c:	2202      	movne	r2, #2
 800610e:	2201      	moveq	r2, #1
 8006110:	6122      	str	r2, [r4, #16]
 8006112:	b1bd      	cbz	r5, 8006144 <__d2b+0x94>
 8006114:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006118:	4405      	add	r5, r0
 800611a:	603d      	str	r5, [r7, #0]
 800611c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006120:	6030      	str	r0, [r6, #0]
 8006122:	4620      	mov	r0, r4
 8006124:	b003      	add	sp, #12
 8006126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800612a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800612e:	e7d6      	b.n	80060de <__d2b+0x2e>
 8006130:	6161      	str	r1, [r4, #20]
 8006132:	e7e7      	b.n	8006104 <__d2b+0x54>
 8006134:	a801      	add	r0, sp, #4
 8006136:	f7ff fd61 	bl	8005bfc <__lo0bits>
 800613a:	9b01      	ldr	r3, [sp, #4]
 800613c:	6163      	str	r3, [r4, #20]
 800613e:	3020      	adds	r0, #32
 8006140:	2201      	movs	r2, #1
 8006142:	e7e5      	b.n	8006110 <__d2b+0x60>
 8006144:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006148:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800614c:	6038      	str	r0, [r7, #0]
 800614e:	6918      	ldr	r0, [r3, #16]
 8006150:	f7ff fd34 	bl	8005bbc <__hi0bits>
 8006154:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006158:	e7e2      	b.n	8006120 <__d2b+0x70>
 800615a:	bf00      	nop
 800615c:	08006e0c 	.word	0x08006e0c
 8006160:	08006e1d 	.word	0x08006e1d

08006164 <__ssputs_r>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	688e      	ldr	r6, [r1, #8]
 800616a:	461f      	mov	r7, r3
 800616c:	42be      	cmp	r6, r7
 800616e:	680b      	ldr	r3, [r1, #0]
 8006170:	4682      	mov	sl, r0
 8006172:	460c      	mov	r4, r1
 8006174:	4690      	mov	r8, r2
 8006176:	d82c      	bhi.n	80061d2 <__ssputs_r+0x6e>
 8006178:	898a      	ldrh	r2, [r1, #12]
 800617a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800617e:	d026      	beq.n	80061ce <__ssputs_r+0x6a>
 8006180:	6965      	ldr	r5, [r4, #20]
 8006182:	6909      	ldr	r1, [r1, #16]
 8006184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006188:	eba3 0901 	sub.w	r9, r3, r1
 800618c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006190:	1c7b      	adds	r3, r7, #1
 8006192:	444b      	add	r3, r9
 8006194:	106d      	asrs	r5, r5, #1
 8006196:	429d      	cmp	r5, r3
 8006198:	bf38      	it	cc
 800619a:	461d      	movcc	r5, r3
 800619c:	0553      	lsls	r3, r2, #21
 800619e:	d527      	bpl.n	80061f0 <__ssputs_r+0x8c>
 80061a0:	4629      	mov	r1, r5
 80061a2:	f7ff fbd7 	bl	8005954 <_malloc_r>
 80061a6:	4606      	mov	r6, r0
 80061a8:	b360      	cbz	r0, 8006204 <__ssputs_r+0xa0>
 80061aa:	6921      	ldr	r1, [r4, #16]
 80061ac:	464a      	mov	r2, r9
 80061ae:	f000 fa09 	bl	80065c4 <memcpy>
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	6126      	str	r6, [r4, #16]
 80061c0:	6165      	str	r5, [r4, #20]
 80061c2:	444e      	add	r6, r9
 80061c4:	eba5 0509 	sub.w	r5, r5, r9
 80061c8:	6026      	str	r6, [r4, #0]
 80061ca:	60a5      	str	r5, [r4, #8]
 80061cc:	463e      	mov	r6, r7
 80061ce:	42be      	cmp	r6, r7
 80061d0:	d900      	bls.n	80061d4 <__ssputs_r+0x70>
 80061d2:	463e      	mov	r6, r7
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	4632      	mov	r2, r6
 80061d8:	4641      	mov	r1, r8
 80061da:	f000 f9c9 	bl	8006570 <memmove>
 80061de:	68a3      	ldr	r3, [r4, #8]
 80061e0:	1b9b      	subs	r3, r3, r6
 80061e2:	60a3      	str	r3, [r4, #8]
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	4433      	add	r3, r6
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	2000      	movs	r0, #0
 80061ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f0:	462a      	mov	r2, r5
 80061f2:	f000 fa3b 	bl	800666c <_realloc_r>
 80061f6:	4606      	mov	r6, r0
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d1e0      	bne.n	80061be <__ssputs_r+0x5a>
 80061fc:	6921      	ldr	r1, [r4, #16]
 80061fe:	4650      	mov	r0, sl
 8006200:	f7ff fb34 	bl	800586c <_free_r>
 8006204:	230c      	movs	r3, #12
 8006206:	f8ca 3000 	str.w	r3, [sl]
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	f04f 30ff 	mov.w	r0, #4294967295
 8006216:	e7e9      	b.n	80061ec <__ssputs_r+0x88>

08006218 <_svfiprintf_r>:
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	4698      	mov	r8, r3
 800621e:	898b      	ldrh	r3, [r1, #12]
 8006220:	061b      	lsls	r3, r3, #24
 8006222:	b09d      	sub	sp, #116	; 0x74
 8006224:	4607      	mov	r7, r0
 8006226:	460d      	mov	r5, r1
 8006228:	4614      	mov	r4, r2
 800622a:	d50e      	bpl.n	800624a <_svfiprintf_r+0x32>
 800622c:	690b      	ldr	r3, [r1, #16]
 800622e:	b963      	cbnz	r3, 800624a <_svfiprintf_r+0x32>
 8006230:	2140      	movs	r1, #64	; 0x40
 8006232:	f7ff fb8f 	bl	8005954 <_malloc_r>
 8006236:	6028      	str	r0, [r5, #0]
 8006238:	6128      	str	r0, [r5, #16]
 800623a:	b920      	cbnz	r0, 8006246 <_svfiprintf_r+0x2e>
 800623c:	230c      	movs	r3, #12
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	e0d0      	b.n	80063e8 <_svfiprintf_r+0x1d0>
 8006246:	2340      	movs	r3, #64	; 0x40
 8006248:	616b      	str	r3, [r5, #20]
 800624a:	2300      	movs	r3, #0
 800624c:	9309      	str	r3, [sp, #36]	; 0x24
 800624e:	2320      	movs	r3, #32
 8006250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006254:	f8cd 800c 	str.w	r8, [sp, #12]
 8006258:	2330      	movs	r3, #48	; 0x30
 800625a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006400 <_svfiprintf_r+0x1e8>
 800625e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006262:	f04f 0901 	mov.w	r9, #1
 8006266:	4623      	mov	r3, r4
 8006268:	469a      	mov	sl, r3
 800626a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800626e:	b10a      	cbz	r2, 8006274 <_svfiprintf_r+0x5c>
 8006270:	2a25      	cmp	r2, #37	; 0x25
 8006272:	d1f9      	bne.n	8006268 <_svfiprintf_r+0x50>
 8006274:	ebba 0b04 	subs.w	fp, sl, r4
 8006278:	d00b      	beq.n	8006292 <_svfiprintf_r+0x7a>
 800627a:	465b      	mov	r3, fp
 800627c:	4622      	mov	r2, r4
 800627e:	4629      	mov	r1, r5
 8006280:	4638      	mov	r0, r7
 8006282:	f7ff ff6f 	bl	8006164 <__ssputs_r>
 8006286:	3001      	adds	r0, #1
 8006288:	f000 80a9 	beq.w	80063de <_svfiprintf_r+0x1c6>
 800628c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800628e:	445a      	add	r2, fp
 8006290:	9209      	str	r2, [sp, #36]	; 0x24
 8006292:	f89a 3000 	ldrb.w	r3, [sl]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80a1 	beq.w	80063de <_svfiprintf_r+0x1c6>
 800629c:	2300      	movs	r3, #0
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062a6:	f10a 0a01 	add.w	sl, sl, #1
 80062aa:	9304      	str	r3, [sp, #16]
 80062ac:	9307      	str	r3, [sp, #28]
 80062ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062b2:	931a      	str	r3, [sp, #104]	; 0x68
 80062b4:	4654      	mov	r4, sl
 80062b6:	2205      	movs	r2, #5
 80062b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062bc:	4850      	ldr	r0, [pc, #320]	; (8006400 <_svfiprintf_r+0x1e8>)
 80062be:	f7f9 ff87 	bl	80001d0 <memchr>
 80062c2:	9a04      	ldr	r2, [sp, #16]
 80062c4:	b9d8      	cbnz	r0, 80062fe <_svfiprintf_r+0xe6>
 80062c6:	06d0      	lsls	r0, r2, #27
 80062c8:	bf44      	itt	mi
 80062ca:	2320      	movmi	r3, #32
 80062cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062d0:	0711      	lsls	r1, r2, #28
 80062d2:	bf44      	itt	mi
 80062d4:	232b      	movmi	r3, #43	; 0x2b
 80062d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062da:	f89a 3000 	ldrb.w	r3, [sl]
 80062de:	2b2a      	cmp	r3, #42	; 0x2a
 80062e0:	d015      	beq.n	800630e <_svfiprintf_r+0xf6>
 80062e2:	9a07      	ldr	r2, [sp, #28]
 80062e4:	4654      	mov	r4, sl
 80062e6:	2000      	movs	r0, #0
 80062e8:	f04f 0c0a 	mov.w	ip, #10
 80062ec:	4621      	mov	r1, r4
 80062ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062f2:	3b30      	subs	r3, #48	; 0x30
 80062f4:	2b09      	cmp	r3, #9
 80062f6:	d94d      	bls.n	8006394 <_svfiprintf_r+0x17c>
 80062f8:	b1b0      	cbz	r0, 8006328 <_svfiprintf_r+0x110>
 80062fa:	9207      	str	r2, [sp, #28]
 80062fc:	e014      	b.n	8006328 <_svfiprintf_r+0x110>
 80062fe:	eba0 0308 	sub.w	r3, r0, r8
 8006302:	fa09 f303 	lsl.w	r3, r9, r3
 8006306:	4313      	orrs	r3, r2
 8006308:	9304      	str	r3, [sp, #16]
 800630a:	46a2      	mov	sl, r4
 800630c:	e7d2      	b.n	80062b4 <_svfiprintf_r+0x9c>
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	1d19      	adds	r1, r3, #4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	9103      	str	r1, [sp, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	bfbb      	ittet	lt
 800631a:	425b      	neglt	r3, r3
 800631c:	f042 0202 	orrlt.w	r2, r2, #2
 8006320:	9307      	strge	r3, [sp, #28]
 8006322:	9307      	strlt	r3, [sp, #28]
 8006324:	bfb8      	it	lt
 8006326:	9204      	strlt	r2, [sp, #16]
 8006328:	7823      	ldrb	r3, [r4, #0]
 800632a:	2b2e      	cmp	r3, #46	; 0x2e
 800632c:	d10c      	bne.n	8006348 <_svfiprintf_r+0x130>
 800632e:	7863      	ldrb	r3, [r4, #1]
 8006330:	2b2a      	cmp	r3, #42	; 0x2a
 8006332:	d134      	bne.n	800639e <_svfiprintf_r+0x186>
 8006334:	9b03      	ldr	r3, [sp, #12]
 8006336:	1d1a      	adds	r2, r3, #4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	9203      	str	r2, [sp, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	bfb8      	it	lt
 8006340:	f04f 33ff 	movlt.w	r3, #4294967295
 8006344:	3402      	adds	r4, #2
 8006346:	9305      	str	r3, [sp, #20]
 8006348:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006410 <_svfiprintf_r+0x1f8>
 800634c:	7821      	ldrb	r1, [r4, #0]
 800634e:	2203      	movs	r2, #3
 8006350:	4650      	mov	r0, sl
 8006352:	f7f9 ff3d 	bl	80001d0 <memchr>
 8006356:	b138      	cbz	r0, 8006368 <_svfiprintf_r+0x150>
 8006358:	9b04      	ldr	r3, [sp, #16]
 800635a:	eba0 000a 	sub.w	r0, r0, sl
 800635e:	2240      	movs	r2, #64	; 0x40
 8006360:	4082      	lsls	r2, r0
 8006362:	4313      	orrs	r3, r2
 8006364:	3401      	adds	r4, #1
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636c:	4825      	ldr	r0, [pc, #148]	; (8006404 <_svfiprintf_r+0x1ec>)
 800636e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006372:	2206      	movs	r2, #6
 8006374:	f7f9 ff2c 	bl	80001d0 <memchr>
 8006378:	2800      	cmp	r0, #0
 800637a:	d038      	beq.n	80063ee <_svfiprintf_r+0x1d6>
 800637c:	4b22      	ldr	r3, [pc, #136]	; (8006408 <_svfiprintf_r+0x1f0>)
 800637e:	bb1b      	cbnz	r3, 80063c8 <_svfiprintf_r+0x1b0>
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	3307      	adds	r3, #7
 8006384:	f023 0307 	bic.w	r3, r3, #7
 8006388:	3308      	adds	r3, #8
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638e:	4433      	add	r3, r6
 8006390:	9309      	str	r3, [sp, #36]	; 0x24
 8006392:	e768      	b.n	8006266 <_svfiprintf_r+0x4e>
 8006394:	fb0c 3202 	mla	r2, ip, r2, r3
 8006398:	460c      	mov	r4, r1
 800639a:	2001      	movs	r0, #1
 800639c:	e7a6      	b.n	80062ec <_svfiprintf_r+0xd4>
 800639e:	2300      	movs	r3, #0
 80063a0:	3401      	adds	r4, #1
 80063a2:	9305      	str	r3, [sp, #20]
 80063a4:	4619      	mov	r1, r3
 80063a6:	f04f 0c0a 	mov.w	ip, #10
 80063aa:	4620      	mov	r0, r4
 80063ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b0:	3a30      	subs	r2, #48	; 0x30
 80063b2:	2a09      	cmp	r2, #9
 80063b4:	d903      	bls.n	80063be <_svfiprintf_r+0x1a6>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0c6      	beq.n	8006348 <_svfiprintf_r+0x130>
 80063ba:	9105      	str	r1, [sp, #20]
 80063bc:	e7c4      	b.n	8006348 <_svfiprintf_r+0x130>
 80063be:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c2:	4604      	mov	r4, r0
 80063c4:	2301      	movs	r3, #1
 80063c6:	e7f0      	b.n	80063aa <_svfiprintf_r+0x192>
 80063c8:	ab03      	add	r3, sp, #12
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	462a      	mov	r2, r5
 80063ce:	4b0f      	ldr	r3, [pc, #60]	; (800640c <_svfiprintf_r+0x1f4>)
 80063d0:	a904      	add	r1, sp, #16
 80063d2:	4638      	mov	r0, r7
 80063d4:	f7fd fe62 	bl	800409c <_printf_float>
 80063d8:	1c42      	adds	r2, r0, #1
 80063da:	4606      	mov	r6, r0
 80063dc:	d1d6      	bne.n	800638c <_svfiprintf_r+0x174>
 80063de:	89ab      	ldrh	r3, [r5, #12]
 80063e0:	065b      	lsls	r3, r3, #25
 80063e2:	f53f af2d 	bmi.w	8006240 <_svfiprintf_r+0x28>
 80063e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063e8:	b01d      	add	sp, #116	; 0x74
 80063ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ee:	ab03      	add	r3, sp, #12
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	462a      	mov	r2, r5
 80063f4:	4b05      	ldr	r3, [pc, #20]	; (800640c <_svfiprintf_r+0x1f4>)
 80063f6:	a904      	add	r1, sp, #16
 80063f8:	4638      	mov	r0, r7
 80063fa:	f7fe f8f3 	bl	80045e4 <_printf_i>
 80063fe:	e7eb      	b.n	80063d8 <_svfiprintf_r+0x1c0>
 8006400:	08006f74 	.word	0x08006f74
 8006404:	08006f7e 	.word	0x08006f7e
 8006408:	0800409d 	.word	0x0800409d
 800640c:	08006165 	.word	0x08006165
 8006410:	08006f7a 	.word	0x08006f7a

08006414 <__sflush_r>:
 8006414:	898a      	ldrh	r2, [r1, #12]
 8006416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800641a:	4605      	mov	r5, r0
 800641c:	0710      	lsls	r0, r2, #28
 800641e:	460c      	mov	r4, r1
 8006420:	d458      	bmi.n	80064d4 <__sflush_r+0xc0>
 8006422:	684b      	ldr	r3, [r1, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	dc05      	bgt.n	8006434 <__sflush_r+0x20>
 8006428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	dc02      	bgt.n	8006434 <__sflush_r+0x20>
 800642e:	2000      	movs	r0, #0
 8006430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006436:	2e00      	cmp	r6, #0
 8006438:	d0f9      	beq.n	800642e <__sflush_r+0x1a>
 800643a:	2300      	movs	r3, #0
 800643c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006440:	682f      	ldr	r7, [r5, #0]
 8006442:	6a21      	ldr	r1, [r4, #32]
 8006444:	602b      	str	r3, [r5, #0]
 8006446:	d032      	beq.n	80064ae <__sflush_r+0x9a>
 8006448:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	075a      	lsls	r2, r3, #29
 800644e:	d505      	bpl.n	800645c <__sflush_r+0x48>
 8006450:	6863      	ldr	r3, [r4, #4]
 8006452:	1ac0      	subs	r0, r0, r3
 8006454:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006456:	b10b      	cbz	r3, 800645c <__sflush_r+0x48>
 8006458:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800645a:	1ac0      	subs	r0, r0, r3
 800645c:	2300      	movs	r3, #0
 800645e:	4602      	mov	r2, r0
 8006460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006462:	6a21      	ldr	r1, [r4, #32]
 8006464:	4628      	mov	r0, r5
 8006466:	47b0      	blx	r6
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	d106      	bne.n	800647c <__sflush_r+0x68>
 800646e:	6829      	ldr	r1, [r5, #0]
 8006470:	291d      	cmp	r1, #29
 8006472:	d82b      	bhi.n	80064cc <__sflush_r+0xb8>
 8006474:	4a29      	ldr	r2, [pc, #164]	; (800651c <__sflush_r+0x108>)
 8006476:	410a      	asrs	r2, r1
 8006478:	07d6      	lsls	r6, r2, #31
 800647a:	d427      	bmi.n	80064cc <__sflush_r+0xb8>
 800647c:	2200      	movs	r2, #0
 800647e:	6062      	str	r2, [r4, #4]
 8006480:	04d9      	lsls	r1, r3, #19
 8006482:	6922      	ldr	r2, [r4, #16]
 8006484:	6022      	str	r2, [r4, #0]
 8006486:	d504      	bpl.n	8006492 <__sflush_r+0x7e>
 8006488:	1c42      	adds	r2, r0, #1
 800648a:	d101      	bne.n	8006490 <__sflush_r+0x7c>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	b903      	cbnz	r3, 8006492 <__sflush_r+0x7e>
 8006490:	6560      	str	r0, [r4, #84]	; 0x54
 8006492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006494:	602f      	str	r7, [r5, #0]
 8006496:	2900      	cmp	r1, #0
 8006498:	d0c9      	beq.n	800642e <__sflush_r+0x1a>
 800649a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800649e:	4299      	cmp	r1, r3
 80064a0:	d002      	beq.n	80064a8 <__sflush_r+0x94>
 80064a2:	4628      	mov	r0, r5
 80064a4:	f7ff f9e2 	bl	800586c <_free_r>
 80064a8:	2000      	movs	r0, #0
 80064aa:	6360      	str	r0, [r4, #52]	; 0x34
 80064ac:	e7c0      	b.n	8006430 <__sflush_r+0x1c>
 80064ae:	2301      	movs	r3, #1
 80064b0:	4628      	mov	r0, r5
 80064b2:	47b0      	blx	r6
 80064b4:	1c41      	adds	r1, r0, #1
 80064b6:	d1c8      	bne.n	800644a <__sflush_r+0x36>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0c5      	beq.n	800644a <__sflush_r+0x36>
 80064be:	2b1d      	cmp	r3, #29
 80064c0:	d001      	beq.n	80064c6 <__sflush_r+0xb2>
 80064c2:	2b16      	cmp	r3, #22
 80064c4:	d101      	bne.n	80064ca <__sflush_r+0xb6>
 80064c6:	602f      	str	r7, [r5, #0]
 80064c8:	e7b1      	b.n	800642e <__sflush_r+0x1a>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d0:	81a3      	strh	r3, [r4, #12]
 80064d2:	e7ad      	b.n	8006430 <__sflush_r+0x1c>
 80064d4:	690f      	ldr	r7, [r1, #16]
 80064d6:	2f00      	cmp	r7, #0
 80064d8:	d0a9      	beq.n	800642e <__sflush_r+0x1a>
 80064da:	0793      	lsls	r3, r2, #30
 80064dc:	680e      	ldr	r6, [r1, #0]
 80064de:	bf08      	it	eq
 80064e0:	694b      	ldreq	r3, [r1, #20]
 80064e2:	600f      	str	r7, [r1, #0]
 80064e4:	bf18      	it	ne
 80064e6:	2300      	movne	r3, #0
 80064e8:	eba6 0807 	sub.w	r8, r6, r7
 80064ec:	608b      	str	r3, [r1, #8]
 80064ee:	f1b8 0f00 	cmp.w	r8, #0
 80064f2:	dd9c      	ble.n	800642e <__sflush_r+0x1a>
 80064f4:	6a21      	ldr	r1, [r4, #32]
 80064f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064f8:	4643      	mov	r3, r8
 80064fa:	463a      	mov	r2, r7
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b0      	blx	r6
 8006500:	2800      	cmp	r0, #0
 8006502:	dc06      	bgt.n	8006512 <__sflush_r+0xfe>
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e78e      	b.n	8006430 <__sflush_r+0x1c>
 8006512:	4407      	add	r7, r0
 8006514:	eba8 0800 	sub.w	r8, r8, r0
 8006518:	e7e9      	b.n	80064ee <__sflush_r+0xda>
 800651a:	bf00      	nop
 800651c:	dfbffffe 	.word	0xdfbffffe

08006520 <_fflush_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	690b      	ldr	r3, [r1, #16]
 8006524:	4605      	mov	r5, r0
 8006526:	460c      	mov	r4, r1
 8006528:	b913      	cbnz	r3, 8006530 <_fflush_r+0x10>
 800652a:	2500      	movs	r5, #0
 800652c:	4628      	mov	r0, r5
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	b118      	cbz	r0, 800653a <_fflush_r+0x1a>
 8006532:	6a03      	ldr	r3, [r0, #32]
 8006534:	b90b      	cbnz	r3, 800653a <_fflush_r+0x1a>
 8006536:	f7fe fa03 	bl	8004940 <__sinit>
 800653a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0f3      	beq.n	800652a <_fflush_r+0xa>
 8006542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006544:	07d0      	lsls	r0, r2, #31
 8006546:	d404      	bmi.n	8006552 <_fflush_r+0x32>
 8006548:	0599      	lsls	r1, r3, #22
 800654a:	d402      	bmi.n	8006552 <_fflush_r+0x32>
 800654c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800654e:	f7fe fb0e 	bl	8004b6e <__retarget_lock_acquire_recursive>
 8006552:	4628      	mov	r0, r5
 8006554:	4621      	mov	r1, r4
 8006556:	f7ff ff5d 	bl	8006414 <__sflush_r>
 800655a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800655c:	07da      	lsls	r2, r3, #31
 800655e:	4605      	mov	r5, r0
 8006560:	d4e4      	bmi.n	800652c <_fflush_r+0xc>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	059b      	lsls	r3, r3, #22
 8006566:	d4e1      	bmi.n	800652c <_fflush_r+0xc>
 8006568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656a:	f7fe fb01 	bl	8004b70 <__retarget_lock_release_recursive>
 800656e:	e7dd      	b.n	800652c <_fflush_r+0xc>

08006570 <memmove>:
 8006570:	4288      	cmp	r0, r1
 8006572:	b510      	push	{r4, lr}
 8006574:	eb01 0402 	add.w	r4, r1, r2
 8006578:	d902      	bls.n	8006580 <memmove+0x10>
 800657a:	4284      	cmp	r4, r0
 800657c:	4623      	mov	r3, r4
 800657e:	d807      	bhi.n	8006590 <memmove+0x20>
 8006580:	1e43      	subs	r3, r0, #1
 8006582:	42a1      	cmp	r1, r4
 8006584:	d008      	beq.n	8006598 <memmove+0x28>
 8006586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800658a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800658e:	e7f8      	b.n	8006582 <memmove+0x12>
 8006590:	4402      	add	r2, r0
 8006592:	4601      	mov	r1, r0
 8006594:	428a      	cmp	r2, r1
 8006596:	d100      	bne.n	800659a <memmove+0x2a>
 8006598:	bd10      	pop	{r4, pc}
 800659a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800659e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065a2:	e7f7      	b.n	8006594 <memmove+0x24>

080065a4 <_sbrk_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d06      	ldr	r5, [pc, #24]	; (80065c0 <_sbrk_r+0x1c>)
 80065a8:	2300      	movs	r3, #0
 80065aa:	4604      	mov	r4, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	602b      	str	r3, [r5, #0]
 80065b0:	f7fb fbe8 	bl	8001d84 <_sbrk>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_sbrk_r+0x1a>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_sbrk_r+0x1a>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	20000530 	.word	0x20000530

080065c4 <memcpy>:
 80065c4:	440a      	add	r2, r1
 80065c6:	4291      	cmp	r1, r2
 80065c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065cc:	d100      	bne.n	80065d0 <memcpy+0xc>
 80065ce:	4770      	bx	lr
 80065d0:	b510      	push	{r4, lr}
 80065d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065da:	4291      	cmp	r1, r2
 80065dc:	d1f9      	bne.n	80065d2 <memcpy+0xe>
 80065de:	bd10      	pop	{r4, pc}

080065e0 <__assert_func>:
 80065e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065e2:	4614      	mov	r4, r2
 80065e4:	461a      	mov	r2, r3
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <__assert_func+0x2c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4605      	mov	r5, r0
 80065ec:	68d8      	ldr	r0, [r3, #12]
 80065ee:	b14c      	cbz	r4, 8006604 <__assert_func+0x24>
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <__assert_func+0x30>)
 80065f2:	9100      	str	r1, [sp, #0]
 80065f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065f8:	4906      	ldr	r1, [pc, #24]	; (8006614 <__assert_func+0x34>)
 80065fa:	462b      	mov	r3, r5
 80065fc:	f000 f872 	bl	80066e4 <fiprintf>
 8006600:	f000 f882 	bl	8006708 <abort>
 8006604:	4b04      	ldr	r3, [pc, #16]	; (8006618 <__assert_func+0x38>)
 8006606:	461c      	mov	r4, r3
 8006608:	e7f3      	b.n	80065f2 <__assert_func+0x12>
 800660a:	bf00      	nop
 800660c:	20000064 	.word	0x20000064
 8006610:	08006f8f 	.word	0x08006f8f
 8006614:	08006f9c 	.word	0x08006f9c
 8006618:	08006fca 	.word	0x08006fca

0800661c <_calloc_r>:
 800661c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800661e:	fba1 2402 	umull	r2, r4, r1, r2
 8006622:	b94c      	cbnz	r4, 8006638 <_calloc_r+0x1c>
 8006624:	4611      	mov	r1, r2
 8006626:	9201      	str	r2, [sp, #4]
 8006628:	f7ff f994 	bl	8005954 <_malloc_r>
 800662c:	9a01      	ldr	r2, [sp, #4]
 800662e:	4605      	mov	r5, r0
 8006630:	b930      	cbnz	r0, 8006640 <_calloc_r+0x24>
 8006632:	4628      	mov	r0, r5
 8006634:	b003      	add	sp, #12
 8006636:	bd30      	pop	{r4, r5, pc}
 8006638:	220c      	movs	r2, #12
 800663a:	6002      	str	r2, [r0, #0]
 800663c:	2500      	movs	r5, #0
 800663e:	e7f8      	b.n	8006632 <_calloc_r+0x16>
 8006640:	4621      	mov	r1, r4
 8006642:	f7fe fa16 	bl	8004a72 <memset>
 8006646:	e7f4      	b.n	8006632 <_calloc_r+0x16>

08006648 <__ascii_mbtowc>:
 8006648:	b082      	sub	sp, #8
 800664a:	b901      	cbnz	r1, 800664e <__ascii_mbtowc+0x6>
 800664c:	a901      	add	r1, sp, #4
 800664e:	b142      	cbz	r2, 8006662 <__ascii_mbtowc+0x1a>
 8006650:	b14b      	cbz	r3, 8006666 <__ascii_mbtowc+0x1e>
 8006652:	7813      	ldrb	r3, [r2, #0]
 8006654:	600b      	str	r3, [r1, #0]
 8006656:	7812      	ldrb	r2, [r2, #0]
 8006658:	1e10      	subs	r0, r2, #0
 800665a:	bf18      	it	ne
 800665c:	2001      	movne	r0, #1
 800665e:	b002      	add	sp, #8
 8006660:	4770      	bx	lr
 8006662:	4610      	mov	r0, r2
 8006664:	e7fb      	b.n	800665e <__ascii_mbtowc+0x16>
 8006666:	f06f 0001 	mvn.w	r0, #1
 800666a:	e7f8      	b.n	800665e <__ascii_mbtowc+0x16>

0800666c <_realloc_r>:
 800666c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006670:	4680      	mov	r8, r0
 8006672:	4614      	mov	r4, r2
 8006674:	460e      	mov	r6, r1
 8006676:	b921      	cbnz	r1, 8006682 <_realloc_r+0x16>
 8006678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667c:	4611      	mov	r1, r2
 800667e:	f7ff b969 	b.w	8005954 <_malloc_r>
 8006682:	b92a      	cbnz	r2, 8006690 <_realloc_r+0x24>
 8006684:	f7ff f8f2 	bl	800586c <_free_r>
 8006688:	4625      	mov	r5, r4
 800668a:	4628      	mov	r0, r5
 800668c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006690:	f000 f841 	bl	8006716 <_malloc_usable_size_r>
 8006694:	4284      	cmp	r4, r0
 8006696:	4607      	mov	r7, r0
 8006698:	d802      	bhi.n	80066a0 <_realloc_r+0x34>
 800669a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800669e:	d812      	bhi.n	80066c6 <_realloc_r+0x5a>
 80066a0:	4621      	mov	r1, r4
 80066a2:	4640      	mov	r0, r8
 80066a4:	f7ff f956 	bl	8005954 <_malloc_r>
 80066a8:	4605      	mov	r5, r0
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d0ed      	beq.n	800668a <_realloc_r+0x1e>
 80066ae:	42bc      	cmp	r4, r7
 80066b0:	4622      	mov	r2, r4
 80066b2:	4631      	mov	r1, r6
 80066b4:	bf28      	it	cs
 80066b6:	463a      	movcs	r2, r7
 80066b8:	f7ff ff84 	bl	80065c4 <memcpy>
 80066bc:	4631      	mov	r1, r6
 80066be:	4640      	mov	r0, r8
 80066c0:	f7ff f8d4 	bl	800586c <_free_r>
 80066c4:	e7e1      	b.n	800668a <_realloc_r+0x1e>
 80066c6:	4635      	mov	r5, r6
 80066c8:	e7df      	b.n	800668a <_realloc_r+0x1e>

080066ca <__ascii_wctomb>:
 80066ca:	b149      	cbz	r1, 80066e0 <__ascii_wctomb+0x16>
 80066cc:	2aff      	cmp	r2, #255	; 0xff
 80066ce:	bf85      	ittet	hi
 80066d0:	238a      	movhi	r3, #138	; 0x8a
 80066d2:	6003      	strhi	r3, [r0, #0]
 80066d4:	700a      	strbls	r2, [r1, #0]
 80066d6:	f04f 30ff 	movhi.w	r0, #4294967295
 80066da:	bf98      	it	ls
 80066dc:	2001      	movls	r0, #1
 80066de:	4770      	bx	lr
 80066e0:	4608      	mov	r0, r1
 80066e2:	4770      	bx	lr

080066e4 <fiprintf>:
 80066e4:	b40e      	push	{r1, r2, r3}
 80066e6:	b503      	push	{r0, r1, lr}
 80066e8:	4601      	mov	r1, r0
 80066ea:	ab03      	add	r3, sp, #12
 80066ec:	4805      	ldr	r0, [pc, #20]	; (8006704 <fiprintf+0x20>)
 80066ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f2:	6800      	ldr	r0, [r0, #0]
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	f000 f83f 	bl	8006778 <_vfiprintf_r>
 80066fa:	b002      	add	sp, #8
 80066fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006700:	b003      	add	sp, #12
 8006702:	4770      	bx	lr
 8006704:	20000064 	.word	0x20000064

08006708 <abort>:
 8006708:	b508      	push	{r3, lr}
 800670a:	2006      	movs	r0, #6
 800670c:	f000 fa0c 	bl	8006b28 <raise>
 8006710:	2001      	movs	r0, #1
 8006712:	f7fb fabf 	bl	8001c94 <_exit>

08006716 <_malloc_usable_size_r>:
 8006716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800671a:	1f18      	subs	r0, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	bfbc      	itt	lt
 8006720:	580b      	ldrlt	r3, [r1, r0]
 8006722:	18c0      	addlt	r0, r0, r3
 8006724:	4770      	bx	lr

08006726 <__sfputc_r>:
 8006726:	6893      	ldr	r3, [r2, #8]
 8006728:	3b01      	subs	r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	b410      	push	{r4}
 800672e:	6093      	str	r3, [r2, #8]
 8006730:	da08      	bge.n	8006744 <__sfputc_r+0x1e>
 8006732:	6994      	ldr	r4, [r2, #24]
 8006734:	42a3      	cmp	r3, r4
 8006736:	db01      	blt.n	800673c <__sfputc_r+0x16>
 8006738:	290a      	cmp	r1, #10
 800673a:	d103      	bne.n	8006744 <__sfputc_r+0x1e>
 800673c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006740:	f000 b934 	b.w	80069ac <__swbuf_r>
 8006744:	6813      	ldr	r3, [r2, #0]
 8006746:	1c58      	adds	r0, r3, #1
 8006748:	6010      	str	r0, [r2, #0]
 800674a:	7019      	strb	r1, [r3, #0]
 800674c:	4608      	mov	r0, r1
 800674e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006752:	4770      	bx	lr

08006754 <__sfputs_r>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	4606      	mov	r6, r0
 8006758:	460f      	mov	r7, r1
 800675a:	4614      	mov	r4, r2
 800675c:	18d5      	adds	r5, r2, r3
 800675e:	42ac      	cmp	r4, r5
 8006760:	d101      	bne.n	8006766 <__sfputs_r+0x12>
 8006762:	2000      	movs	r0, #0
 8006764:	e007      	b.n	8006776 <__sfputs_r+0x22>
 8006766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676a:	463a      	mov	r2, r7
 800676c:	4630      	mov	r0, r6
 800676e:	f7ff ffda 	bl	8006726 <__sfputc_r>
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d1f3      	bne.n	800675e <__sfputs_r+0xa>
 8006776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006778 <_vfiprintf_r>:
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	460d      	mov	r5, r1
 800677e:	b09d      	sub	sp, #116	; 0x74
 8006780:	4614      	mov	r4, r2
 8006782:	4698      	mov	r8, r3
 8006784:	4606      	mov	r6, r0
 8006786:	b118      	cbz	r0, 8006790 <_vfiprintf_r+0x18>
 8006788:	6a03      	ldr	r3, [r0, #32]
 800678a:	b90b      	cbnz	r3, 8006790 <_vfiprintf_r+0x18>
 800678c:	f7fe f8d8 	bl	8004940 <__sinit>
 8006790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006792:	07d9      	lsls	r1, r3, #31
 8006794:	d405      	bmi.n	80067a2 <_vfiprintf_r+0x2a>
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	059a      	lsls	r2, r3, #22
 800679a:	d402      	bmi.n	80067a2 <_vfiprintf_r+0x2a>
 800679c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800679e:	f7fe f9e6 	bl	8004b6e <__retarget_lock_acquire_recursive>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	071b      	lsls	r3, r3, #28
 80067a6:	d501      	bpl.n	80067ac <_vfiprintf_r+0x34>
 80067a8:	692b      	ldr	r3, [r5, #16]
 80067aa:	b99b      	cbnz	r3, 80067d4 <_vfiprintf_r+0x5c>
 80067ac:	4629      	mov	r1, r5
 80067ae:	4630      	mov	r0, r6
 80067b0:	f000 f93a 	bl	8006a28 <__swsetup_r>
 80067b4:	b170      	cbz	r0, 80067d4 <_vfiprintf_r+0x5c>
 80067b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067b8:	07dc      	lsls	r4, r3, #31
 80067ba:	d504      	bpl.n	80067c6 <_vfiprintf_r+0x4e>
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	b01d      	add	sp, #116	; 0x74
 80067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	0598      	lsls	r0, r3, #22
 80067ca:	d4f7      	bmi.n	80067bc <_vfiprintf_r+0x44>
 80067cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ce:	f7fe f9cf 	bl	8004b70 <__retarget_lock_release_recursive>
 80067d2:	e7f3      	b.n	80067bc <_vfiprintf_r+0x44>
 80067d4:	2300      	movs	r3, #0
 80067d6:	9309      	str	r3, [sp, #36]	; 0x24
 80067d8:	2320      	movs	r3, #32
 80067da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067de:	f8cd 800c 	str.w	r8, [sp, #12]
 80067e2:	2330      	movs	r3, #48	; 0x30
 80067e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006998 <_vfiprintf_r+0x220>
 80067e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067ec:	f04f 0901 	mov.w	r9, #1
 80067f0:	4623      	mov	r3, r4
 80067f2:	469a      	mov	sl, r3
 80067f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f8:	b10a      	cbz	r2, 80067fe <_vfiprintf_r+0x86>
 80067fa:	2a25      	cmp	r2, #37	; 0x25
 80067fc:	d1f9      	bne.n	80067f2 <_vfiprintf_r+0x7a>
 80067fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006802:	d00b      	beq.n	800681c <_vfiprintf_r+0xa4>
 8006804:	465b      	mov	r3, fp
 8006806:	4622      	mov	r2, r4
 8006808:	4629      	mov	r1, r5
 800680a:	4630      	mov	r0, r6
 800680c:	f7ff ffa2 	bl	8006754 <__sfputs_r>
 8006810:	3001      	adds	r0, #1
 8006812:	f000 80a9 	beq.w	8006968 <_vfiprintf_r+0x1f0>
 8006816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006818:	445a      	add	r2, fp
 800681a:	9209      	str	r2, [sp, #36]	; 0x24
 800681c:	f89a 3000 	ldrb.w	r3, [sl]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80a1 	beq.w	8006968 <_vfiprintf_r+0x1f0>
 8006826:	2300      	movs	r3, #0
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006830:	f10a 0a01 	add.w	sl, sl, #1
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	9307      	str	r3, [sp, #28]
 8006838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800683c:	931a      	str	r3, [sp, #104]	; 0x68
 800683e:	4654      	mov	r4, sl
 8006840:	2205      	movs	r2, #5
 8006842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006846:	4854      	ldr	r0, [pc, #336]	; (8006998 <_vfiprintf_r+0x220>)
 8006848:	f7f9 fcc2 	bl	80001d0 <memchr>
 800684c:	9a04      	ldr	r2, [sp, #16]
 800684e:	b9d8      	cbnz	r0, 8006888 <_vfiprintf_r+0x110>
 8006850:	06d1      	lsls	r1, r2, #27
 8006852:	bf44      	itt	mi
 8006854:	2320      	movmi	r3, #32
 8006856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800685a:	0713      	lsls	r3, r2, #28
 800685c:	bf44      	itt	mi
 800685e:	232b      	movmi	r3, #43	; 0x2b
 8006860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006864:	f89a 3000 	ldrb.w	r3, [sl]
 8006868:	2b2a      	cmp	r3, #42	; 0x2a
 800686a:	d015      	beq.n	8006898 <_vfiprintf_r+0x120>
 800686c:	9a07      	ldr	r2, [sp, #28]
 800686e:	4654      	mov	r4, sl
 8006870:	2000      	movs	r0, #0
 8006872:	f04f 0c0a 	mov.w	ip, #10
 8006876:	4621      	mov	r1, r4
 8006878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800687c:	3b30      	subs	r3, #48	; 0x30
 800687e:	2b09      	cmp	r3, #9
 8006880:	d94d      	bls.n	800691e <_vfiprintf_r+0x1a6>
 8006882:	b1b0      	cbz	r0, 80068b2 <_vfiprintf_r+0x13a>
 8006884:	9207      	str	r2, [sp, #28]
 8006886:	e014      	b.n	80068b2 <_vfiprintf_r+0x13a>
 8006888:	eba0 0308 	sub.w	r3, r0, r8
 800688c:	fa09 f303 	lsl.w	r3, r9, r3
 8006890:	4313      	orrs	r3, r2
 8006892:	9304      	str	r3, [sp, #16]
 8006894:	46a2      	mov	sl, r4
 8006896:	e7d2      	b.n	800683e <_vfiprintf_r+0xc6>
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	1d19      	adds	r1, r3, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	9103      	str	r1, [sp, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bfbb      	ittet	lt
 80068a4:	425b      	neglt	r3, r3
 80068a6:	f042 0202 	orrlt.w	r2, r2, #2
 80068aa:	9307      	strge	r3, [sp, #28]
 80068ac:	9307      	strlt	r3, [sp, #28]
 80068ae:	bfb8      	it	lt
 80068b0:	9204      	strlt	r2, [sp, #16]
 80068b2:	7823      	ldrb	r3, [r4, #0]
 80068b4:	2b2e      	cmp	r3, #46	; 0x2e
 80068b6:	d10c      	bne.n	80068d2 <_vfiprintf_r+0x15a>
 80068b8:	7863      	ldrb	r3, [r4, #1]
 80068ba:	2b2a      	cmp	r3, #42	; 0x2a
 80068bc:	d134      	bne.n	8006928 <_vfiprintf_r+0x1b0>
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	1d1a      	adds	r2, r3, #4
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	9203      	str	r2, [sp, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	bfb8      	it	lt
 80068ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80068ce:	3402      	adds	r4, #2
 80068d0:	9305      	str	r3, [sp, #20]
 80068d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80069a8 <_vfiprintf_r+0x230>
 80068d6:	7821      	ldrb	r1, [r4, #0]
 80068d8:	2203      	movs	r2, #3
 80068da:	4650      	mov	r0, sl
 80068dc:	f7f9 fc78 	bl	80001d0 <memchr>
 80068e0:	b138      	cbz	r0, 80068f2 <_vfiprintf_r+0x17a>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	eba0 000a 	sub.w	r0, r0, sl
 80068e8:	2240      	movs	r2, #64	; 0x40
 80068ea:	4082      	lsls	r2, r0
 80068ec:	4313      	orrs	r3, r2
 80068ee:	3401      	adds	r4, #1
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f6:	4829      	ldr	r0, [pc, #164]	; (800699c <_vfiprintf_r+0x224>)
 80068f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068fc:	2206      	movs	r2, #6
 80068fe:	f7f9 fc67 	bl	80001d0 <memchr>
 8006902:	2800      	cmp	r0, #0
 8006904:	d03f      	beq.n	8006986 <_vfiprintf_r+0x20e>
 8006906:	4b26      	ldr	r3, [pc, #152]	; (80069a0 <_vfiprintf_r+0x228>)
 8006908:	bb1b      	cbnz	r3, 8006952 <_vfiprintf_r+0x1da>
 800690a:	9b03      	ldr	r3, [sp, #12]
 800690c:	3307      	adds	r3, #7
 800690e:	f023 0307 	bic.w	r3, r3, #7
 8006912:	3308      	adds	r3, #8
 8006914:	9303      	str	r3, [sp, #12]
 8006916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006918:	443b      	add	r3, r7
 800691a:	9309      	str	r3, [sp, #36]	; 0x24
 800691c:	e768      	b.n	80067f0 <_vfiprintf_r+0x78>
 800691e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006922:	460c      	mov	r4, r1
 8006924:	2001      	movs	r0, #1
 8006926:	e7a6      	b.n	8006876 <_vfiprintf_r+0xfe>
 8006928:	2300      	movs	r3, #0
 800692a:	3401      	adds	r4, #1
 800692c:	9305      	str	r3, [sp, #20]
 800692e:	4619      	mov	r1, r3
 8006930:	f04f 0c0a 	mov.w	ip, #10
 8006934:	4620      	mov	r0, r4
 8006936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800693a:	3a30      	subs	r2, #48	; 0x30
 800693c:	2a09      	cmp	r2, #9
 800693e:	d903      	bls.n	8006948 <_vfiprintf_r+0x1d0>
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0c6      	beq.n	80068d2 <_vfiprintf_r+0x15a>
 8006944:	9105      	str	r1, [sp, #20]
 8006946:	e7c4      	b.n	80068d2 <_vfiprintf_r+0x15a>
 8006948:	fb0c 2101 	mla	r1, ip, r1, r2
 800694c:	4604      	mov	r4, r0
 800694e:	2301      	movs	r3, #1
 8006950:	e7f0      	b.n	8006934 <_vfiprintf_r+0x1bc>
 8006952:	ab03      	add	r3, sp, #12
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	462a      	mov	r2, r5
 8006958:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <_vfiprintf_r+0x22c>)
 800695a:	a904      	add	r1, sp, #16
 800695c:	4630      	mov	r0, r6
 800695e:	f7fd fb9d 	bl	800409c <_printf_float>
 8006962:	4607      	mov	r7, r0
 8006964:	1c78      	adds	r0, r7, #1
 8006966:	d1d6      	bne.n	8006916 <_vfiprintf_r+0x19e>
 8006968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800696a:	07d9      	lsls	r1, r3, #31
 800696c:	d405      	bmi.n	800697a <_vfiprintf_r+0x202>
 800696e:	89ab      	ldrh	r3, [r5, #12]
 8006970:	059a      	lsls	r2, r3, #22
 8006972:	d402      	bmi.n	800697a <_vfiprintf_r+0x202>
 8006974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006976:	f7fe f8fb 	bl	8004b70 <__retarget_lock_release_recursive>
 800697a:	89ab      	ldrh	r3, [r5, #12]
 800697c:	065b      	lsls	r3, r3, #25
 800697e:	f53f af1d 	bmi.w	80067bc <_vfiprintf_r+0x44>
 8006982:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006984:	e71c      	b.n	80067c0 <_vfiprintf_r+0x48>
 8006986:	ab03      	add	r3, sp, #12
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	462a      	mov	r2, r5
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <_vfiprintf_r+0x22c>)
 800698e:	a904      	add	r1, sp, #16
 8006990:	4630      	mov	r0, r6
 8006992:	f7fd fe27 	bl	80045e4 <_printf_i>
 8006996:	e7e4      	b.n	8006962 <_vfiprintf_r+0x1ea>
 8006998:	08006f74 	.word	0x08006f74
 800699c:	08006f7e 	.word	0x08006f7e
 80069a0:	0800409d 	.word	0x0800409d
 80069a4:	08006755 	.word	0x08006755
 80069a8:	08006f7a 	.word	0x08006f7a

080069ac <__swbuf_r>:
 80069ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ae:	460e      	mov	r6, r1
 80069b0:	4614      	mov	r4, r2
 80069b2:	4605      	mov	r5, r0
 80069b4:	b118      	cbz	r0, 80069be <__swbuf_r+0x12>
 80069b6:	6a03      	ldr	r3, [r0, #32]
 80069b8:	b90b      	cbnz	r3, 80069be <__swbuf_r+0x12>
 80069ba:	f7fd ffc1 	bl	8004940 <__sinit>
 80069be:	69a3      	ldr	r3, [r4, #24]
 80069c0:	60a3      	str	r3, [r4, #8]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	071a      	lsls	r2, r3, #28
 80069c6:	d525      	bpl.n	8006a14 <__swbuf_r+0x68>
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	b31b      	cbz	r3, 8006a14 <__swbuf_r+0x68>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	6922      	ldr	r2, [r4, #16]
 80069d0:	1a98      	subs	r0, r3, r2
 80069d2:	6963      	ldr	r3, [r4, #20]
 80069d4:	b2f6      	uxtb	r6, r6
 80069d6:	4283      	cmp	r3, r0
 80069d8:	4637      	mov	r7, r6
 80069da:	dc04      	bgt.n	80069e6 <__swbuf_r+0x3a>
 80069dc:	4621      	mov	r1, r4
 80069de:	4628      	mov	r0, r5
 80069e0:	f7ff fd9e 	bl	8006520 <_fflush_r>
 80069e4:	b9e0      	cbnz	r0, 8006a20 <__swbuf_r+0x74>
 80069e6:	68a3      	ldr	r3, [r4, #8]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	60a3      	str	r3, [r4, #8]
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	6022      	str	r2, [r4, #0]
 80069f2:	701e      	strb	r6, [r3, #0]
 80069f4:	6962      	ldr	r2, [r4, #20]
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d004      	beq.n	8006a06 <__swbuf_r+0x5a>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	07db      	lsls	r3, r3, #31
 8006a00:	d506      	bpl.n	8006a10 <__swbuf_r+0x64>
 8006a02:	2e0a      	cmp	r6, #10
 8006a04:	d104      	bne.n	8006a10 <__swbuf_r+0x64>
 8006a06:	4621      	mov	r1, r4
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f7ff fd89 	bl	8006520 <_fflush_r>
 8006a0e:	b938      	cbnz	r0, 8006a20 <__swbuf_r+0x74>
 8006a10:	4638      	mov	r0, r7
 8006a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a14:	4621      	mov	r1, r4
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 f806 	bl	8006a28 <__swsetup_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d0d5      	beq.n	80069cc <__swbuf_r+0x20>
 8006a20:	f04f 37ff 	mov.w	r7, #4294967295
 8006a24:	e7f4      	b.n	8006a10 <__swbuf_r+0x64>
	...

08006a28 <__swsetup_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4b2a      	ldr	r3, [pc, #168]	; (8006ad4 <__swsetup_r+0xac>)
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	6818      	ldr	r0, [r3, #0]
 8006a30:	460c      	mov	r4, r1
 8006a32:	b118      	cbz	r0, 8006a3c <__swsetup_r+0x14>
 8006a34:	6a03      	ldr	r3, [r0, #32]
 8006a36:	b90b      	cbnz	r3, 8006a3c <__swsetup_r+0x14>
 8006a38:	f7fd ff82 	bl	8004940 <__sinit>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a42:	0718      	lsls	r0, r3, #28
 8006a44:	d422      	bmi.n	8006a8c <__swsetup_r+0x64>
 8006a46:	06d9      	lsls	r1, r3, #27
 8006a48:	d407      	bmi.n	8006a5a <__swsetup_r+0x32>
 8006a4a:	2309      	movs	r3, #9
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	f04f 30ff 	mov.w	r0, #4294967295
 8006a58:	e034      	b.n	8006ac4 <__swsetup_r+0x9c>
 8006a5a:	0758      	lsls	r0, r3, #29
 8006a5c:	d512      	bpl.n	8006a84 <__swsetup_r+0x5c>
 8006a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a60:	b141      	cbz	r1, 8006a74 <__swsetup_r+0x4c>
 8006a62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a66:	4299      	cmp	r1, r3
 8006a68:	d002      	beq.n	8006a70 <__swsetup_r+0x48>
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f7fe fefe 	bl	800586c <_free_r>
 8006a70:	2300      	movs	r3, #0
 8006a72:	6363      	str	r3, [r4, #52]	; 0x34
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	6063      	str	r3, [r4, #4]
 8006a80:	6923      	ldr	r3, [r4, #16]
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	f043 0308 	orr.w	r3, r3, #8
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	b94b      	cbnz	r3, 8006aa4 <__swsetup_r+0x7c>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a9a:	d003      	beq.n	8006aa4 <__swsetup_r+0x7c>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 f884 	bl	8006bac <__smakebuf_r>
 8006aa4:	89a0      	ldrh	r0, [r4, #12]
 8006aa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aaa:	f010 0301 	ands.w	r3, r0, #1
 8006aae:	d00a      	beq.n	8006ac6 <__swsetup_r+0x9e>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60a3      	str	r3, [r4, #8]
 8006ab4:	6963      	ldr	r3, [r4, #20]
 8006ab6:	425b      	negs	r3, r3
 8006ab8:	61a3      	str	r3, [r4, #24]
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	b943      	cbnz	r3, 8006ad0 <__swsetup_r+0xa8>
 8006abe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ac2:	d1c4      	bne.n	8006a4e <__swsetup_r+0x26>
 8006ac4:	bd38      	pop	{r3, r4, r5, pc}
 8006ac6:	0781      	lsls	r1, r0, #30
 8006ac8:	bf58      	it	pl
 8006aca:	6963      	ldrpl	r3, [r4, #20]
 8006acc:	60a3      	str	r3, [r4, #8]
 8006ace:	e7f4      	b.n	8006aba <__swsetup_r+0x92>
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	e7f7      	b.n	8006ac4 <__swsetup_r+0x9c>
 8006ad4:	20000064 	.word	0x20000064

08006ad8 <_raise_r>:
 8006ad8:	291f      	cmp	r1, #31
 8006ada:	b538      	push	{r3, r4, r5, lr}
 8006adc:	4604      	mov	r4, r0
 8006ade:	460d      	mov	r5, r1
 8006ae0:	d904      	bls.n	8006aec <_raise_r+0x14>
 8006ae2:	2316      	movs	r3, #22
 8006ae4:	6003      	str	r3, [r0, #0]
 8006ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006aee:	b112      	cbz	r2, 8006af6 <_raise_r+0x1e>
 8006af0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006af4:	b94b      	cbnz	r3, 8006b0a <_raise_r+0x32>
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 f830 	bl	8006b5c <_getpid_r>
 8006afc:	462a      	mov	r2, r5
 8006afe:	4601      	mov	r1, r0
 8006b00:	4620      	mov	r0, r4
 8006b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b06:	f000 b817 	b.w	8006b38 <_kill_r>
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d00a      	beq.n	8006b24 <_raise_r+0x4c>
 8006b0e:	1c59      	adds	r1, r3, #1
 8006b10:	d103      	bne.n	8006b1a <_raise_r+0x42>
 8006b12:	2316      	movs	r3, #22
 8006b14:	6003      	str	r3, [r0, #0]
 8006b16:	2001      	movs	r0, #1
 8006b18:	e7e7      	b.n	8006aea <_raise_r+0x12>
 8006b1a:	2400      	movs	r4, #0
 8006b1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b20:	4628      	mov	r0, r5
 8006b22:	4798      	blx	r3
 8006b24:	2000      	movs	r0, #0
 8006b26:	e7e0      	b.n	8006aea <_raise_r+0x12>

08006b28 <raise>:
 8006b28:	4b02      	ldr	r3, [pc, #8]	; (8006b34 <raise+0xc>)
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	f7ff bfd3 	b.w	8006ad8 <_raise_r>
 8006b32:	bf00      	nop
 8006b34:	20000064 	.word	0x20000064

08006b38 <_kill_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d07      	ldr	r5, [pc, #28]	; (8006b58 <_kill_r+0x20>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	602b      	str	r3, [r5, #0]
 8006b46:	f7fb f895 	bl	8001c74 <_kill>
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	d102      	bne.n	8006b54 <_kill_r+0x1c>
 8006b4e:	682b      	ldr	r3, [r5, #0]
 8006b50:	b103      	cbz	r3, 8006b54 <_kill_r+0x1c>
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	bd38      	pop	{r3, r4, r5, pc}
 8006b56:	bf00      	nop
 8006b58:	20000530 	.word	0x20000530

08006b5c <_getpid_r>:
 8006b5c:	f7fb b882 	b.w	8001c64 <_getpid>

08006b60 <__swhatbuf_r>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	460c      	mov	r4, r1
 8006b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	b096      	sub	sp, #88	; 0x58
 8006b6c:	4615      	mov	r5, r2
 8006b6e:	461e      	mov	r6, r3
 8006b70:	da0d      	bge.n	8006b8e <__swhatbuf_r+0x2e>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b78:	f04f 0100 	mov.w	r1, #0
 8006b7c:	bf0c      	ite	eq
 8006b7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006b82:	2340      	movne	r3, #64	; 0x40
 8006b84:	2000      	movs	r0, #0
 8006b86:	6031      	str	r1, [r6, #0]
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	b016      	add	sp, #88	; 0x58
 8006b8c:	bd70      	pop	{r4, r5, r6, pc}
 8006b8e:	466a      	mov	r2, sp
 8006b90:	f000 f848 	bl	8006c24 <_fstat_r>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	dbec      	blt.n	8006b72 <__swhatbuf_r+0x12>
 8006b98:	9901      	ldr	r1, [sp, #4]
 8006b9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006b9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006ba2:	4259      	negs	r1, r3
 8006ba4:	4159      	adcs	r1, r3
 8006ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006baa:	e7eb      	b.n	8006b84 <__swhatbuf_r+0x24>

08006bac <__smakebuf_r>:
 8006bac:	898b      	ldrh	r3, [r1, #12]
 8006bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bb0:	079d      	lsls	r5, r3, #30
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	d507      	bpl.n	8006bc8 <__smakebuf_r+0x1c>
 8006bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	6123      	str	r3, [r4, #16]
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	6163      	str	r3, [r4, #20]
 8006bc4:	b002      	add	sp, #8
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}
 8006bc8:	ab01      	add	r3, sp, #4
 8006bca:	466a      	mov	r2, sp
 8006bcc:	f7ff ffc8 	bl	8006b60 <__swhatbuf_r>
 8006bd0:	9900      	ldr	r1, [sp, #0]
 8006bd2:	4605      	mov	r5, r0
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f7fe febd 	bl	8005954 <_malloc_r>
 8006bda:	b948      	cbnz	r0, 8006bf0 <__smakebuf_r+0x44>
 8006bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be0:	059a      	lsls	r2, r3, #22
 8006be2:	d4ef      	bmi.n	8006bc4 <__smakebuf_r+0x18>
 8006be4:	f023 0303 	bic.w	r3, r3, #3
 8006be8:	f043 0302 	orr.w	r3, r3, #2
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	e7e3      	b.n	8006bb8 <__smakebuf_r+0xc>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	6020      	str	r0, [r4, #0]
 8006bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	9b00      	ldr	r3, [sp, #0]
 8006bfc:	6163      	str	r3, [r4, #20]
 8006bfe:	9b01      	ldr	r3, [sp, #4]
 8006c00:	6120      	str	r0, [r4, #16]
 8006c02:	b15b      	cbz	r3, 8006c1c <__smakebuf_r+0x70>
 8006c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f000 f81d 	bl	8006c48 <_isatty_r>
 8006c0e:	b128      	cbz	r0, 8006c1c <__smakebuf_r+0x70>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f023 0303 	bic.w	r3, r3, #3
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	81a3      	strh	r3, [r4, #12]
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	431d      	orrs	r5, r3
 8006c20:	81a5      	strh	r5, [r4, #12]
 8006c22:	e7cf      	b.n	8006bc4 <__smakebuf_r+0x18>

08006c24 <_fstat_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4d07      	ldr	r5, [pc, #28]	; (8006c44 <_fstat_r+0x20>)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	4611      	mov	r1, r2
 8006c30:	602b      	str	r3, [r5, #0]
 8006c32:	f7fb f87e 	bl	8001d32 <_fstat>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d102      	bne.n	8006c40 <_fstat_r+0x1c>
 8006c3a:	682b      	ldr	r3, [r5, #0]
 8006c3c:	b103      	cbz	r3, 8006c40 <_fstat_r+0x1c>
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	bd38      	pop	{r3, r4, r5, pc}
 8006c42:	bf00      	nop
 8006c44:	20000530 	.word	0x20000530

08006c48 <_isatty_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d06      	ldr	r5, [pc, #24]	; (8006c64 <_isatty_r+0x1c>)
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	f7fb f87d 	bl	8001d52 <_isatty>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_isatty_r+0x1a>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_isatty_r+0x1a>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	20000530 	.word	0x20000530

08006c68 <_init>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	bf00      	nop
 8006c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6e:	bc08      	pop	{r3}
 8006c70:	469e      	mov	lr, r3
 8006c72:	4770      	bx	lr

08006c74 <_fini>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr
