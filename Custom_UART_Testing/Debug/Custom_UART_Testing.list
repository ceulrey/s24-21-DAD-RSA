
Custom_UART_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003928  08003928  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003930  08003930  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000230  20000060  20000060  00020060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008525  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001751  00000000  00000000  000285f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000700  00000000  00000000  00029d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000556  00000000  00000000  0002a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002000a  00000000  00000000  0002a99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000904b  00000000  00000000  0004a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c25ab  00000000  00000000  000539f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002094  00000000  00000000  00115fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  00118034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003848 	.word	0x08003848

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08003848 	.word	0x08003848

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b09c      	sub	sp, #112	; 0x70
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	char buffer[100]; // Ensure the buffer is large enough for all the data
    if(huart->Instance == USART2) { // If we are receiving on UART2
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	6809      	ldr	r1, [r1, #0]
 8000588:	4866      	ldr	r0, [pc, #408]	; (8000724 <HAL_UART_RxCpltCallback+0x1a8>)
 800058a:	4281      	cmp	r1, r0
 800058c:	f040 80c5 	bne.w	800071a <HAL_UART_RxCpltCallback+0x19e>
        uint8_t rxByte = rx_data[0]; // Received byte
 8000590:	4965      	ldr	r1, [pc, #404]	; (8000728 <HAL_UART_RxCpltCallback+0x1ac>)
 8000592:	7809      	ldrb	r1, [r1, #0]
 8000594:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
//    	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//    	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
        switch (uartState) {
 8000598:	4964      	ldr	r1, [pc, #400]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 800059a:	7809      	ldrb	r1, [r1, #0]
 800059c:	2907      	cmp	r1, #7
 800059e:	f200 80b7 	bhi.w	8000710 <HAL_UART_RxCpltCallback+0x194>
 80005a2:	a001      	add	r0, pc, #4	; (adr r0, 80005a8 <HAL_UART_RxCpltCallback+0x2c>)
 80005a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80005a8:	080005c9 	.word	0x080005c9
 80005ac:	080005e3 	.word	0x080005e3
 80005b0:	080005f3 	.word	0x080005f3
 80005b4:	08000609 	.word	0x08000609
 80005b8:	0800064f 	.word	0x0800064f
 80005bc:	080006b3 	.word	0x080006b3
 80005c0:	080006cb 	.word	0x080006cb
 80005c4:	080006f7 	.word	0x080006f7
            case UART_WAIT_FOR_SOP: // SOP Case
                if (rxByte == 0x53) { // SOP byte = 0x53 ('S')
 80005c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005cc:	2b53      	cmp	r3, #83	; 0x53
 80005ce:	f040 8098 	bne.w	8000702 <HAL_UART_RxCpltCallback+0x186>
                	sensorData.sop = rxByte; // Set the sop
 80005d2:	4a57      	ldr	r2, [pc, #348]	; (8000730 <HAL_UART_RxCpltCallback+0x1b4>)
 80005d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005d8:	7013      	strb	r3, [r2, #0]
                    uartState = UART_DATATYPE; // Next parameter
 80005da:	4b54      	ldr	r3, [pc, #336]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                }
                break;
 80005e0:	e08f      	b.n	8000702 <HAL_UART_RxCpltCallback+0x186>
            case UART_DATATYPE: // Data type Case
            	sensorData.datatype = rxByte; // Set th		e data type (Temp = 00, Humidity = 01, Sound = 10, Vibration = 11)
 80005e2:	4a53      	ldr	r2, [pc, #332]	; (8000730 <HAL_UART_RxCpltCallback+0x1b4>)
 80005e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005e8:	7053      	strb	r3, [r2, #1]
                uartState = UART_SENSOR_ID; // Next parameter
 80005ea:	4b50      	ldr	r3, [pc, #320]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 80005ec:	2202      	movs	r2, #2
 80005ee:	701a      	strb	r2, [r3, #0]
                break;
 80005f0:	e08e      	b.n	8000710 <HAL_UART_RxCpltCallback+0x194>

            case UART_SENSOR_ID: // Sensor ID Case
            	sensorData.sensorId = rxByte; // Set the sensor ID (000, 001, 010, 011, 100, 101, 110, 111 (i.e. Sensor 1-8)
 80005f2:	4a4f      	ldr	r2, [pc, #316]	; (8000730 <HAL_UART_RxCpltCallback+0x1b4>)
 80005f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005f8:	7093      	strb	r3, [r2, #2]
            	dataIndex = 0; // Reset dataIndex for the next field
 80005fa:	4b4e      	ldr	r3, [pc, #312]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
                uartState = UART_TIMESTAMP; // Next parameter
 8000600:	4b4a      	ldr	r3, [pc, #296]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 8000602:	2203      	movs	r2, #3
 8000604:	701a      	strb	r2, [r3, #0]
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                break;
 8000606:	e083      	b.n	8000710 <HAL_UART_RxCpltCallback+0x194>

            case UART_TIMESTAMP: // Timestamp Case
                // Combine byte into timestamp assuming little endian - least significant byte first
//            	timestampBuffer |= ((uint32_t)rxByte << (24 - (dataIndex * 8)));
            	timestampBuffer |= ((uint32_t)rxByte << ((dataIndex-1) * 8));
 8000608:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800060c:	4b49      	ldr	r3, [pc, #292]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3b01      	subs	r3, #1
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	409a      	lsls	r2, r3
 8000616:	4b48      	ldr	r3, [pc, #288]	; (8000738 <HAL_UART_RxCpltCallback+0x1bc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4313      	orrs	r3, r2
 800061c:	4a46      	ldr	r2, [pc, #280]	; (8000738 <HAL_UART_RxCpltCallback+0x1bc>)
 800061e:	6013      	str	r3, [r2, #0]
//            	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
//            	sprintf(buffer, "Timestamp partial: 0x%08lX\r\n", timestampBuffer);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
                dataIndex++;
 8000620:	4b44      	ldr	r3, [pc, #272]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	4a43      	ldr	r2, [pc, #268]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 8000628:	6013      	str	r3, [r2, #0]
                if (dataIndex >= sizeof(sensorData.timestamp)) {
 800062a:	4b42      	ldr	r3, [pc, #264]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d969      	bls.n	8000706 <HAL_UART_RxCpltCallback+0x18a>
                    sensorData.timestamp = timestampBuffer; // Assign the complete timestamp
 8000632:	4b41      	ldr	r3, [pc, #260]	; (8000738 <HAL_UART_RxCpltCallback+0x1bc>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a3e      	ldr	r2, [pc, #248]	; (8000730 <HAL_UART_RxCpltCallback+0x1b4>)
 8000638:	6053      	str	r3, [r2, #4]
                    dataIndex = 0; // Reset dataIndex for the data field
 800063a:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
                    timestampBuffer = 0; // Clear the buffer for the next use
 8000640:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <HAL_UART_RxCpltCallback+0x1bc>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
                    uartState = UART_DATA; // Move to the next state
 8000646:	4b39      	ldr	r3, [pc, #228]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 8000648:	2204      	movs	r2, #4
 800064a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800064c:	e05b      	b.n	8000706 <HAL_UART_RxCpltCallback+0x18a>

            case UART_DATA: // Data Case
                // Combine byte into data assuming little endian - least significant byte first
            	dataBuffer |= ((uint32_t)rxByte << ((dataIndex-1) * 8));//            	sprintf(buffer, "Data partial: 0x%016llx\r\n", dataBuffer);
 800064e:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 8000652:	4938      	ldr	r1, [pc, #224]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 8000654:	6809      	ldr	r1, [r1, #0]
 8000656:	3901      	subs	r1, #1
 8000658:	00c9      	lsls	r1, r1, #3
 800065a:	fa00 f101 	lsl.w	r1, r0, r1
 800065e:	2000      	movs	r0, #0
 8000660:	460a      	mov	r2, r1
 8000662:	4603      	mov	r3, r0
 8000664:	4935      	ldr	r1, [pc, #212]	; (800073c <HAL_UART_RxCpltCallback+0x1c0>)
 8000666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800066a:	ea42 0400 	orr.w	r4, r2, r0
 800066e:	ea43 0501 	orr.w	r5, r3, r1
 8000672:	4b32      	ldr	r3, [pc, #200]	; (800073c <HAL_UART_RxCpltCallback+0x1c0>)
 8000674:	e9c3 4500 	strd	r4, r5, [r3]
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
                dataIndex++;
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a2d      	ldr	r2, [pc, #180]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 8000680:	6013      	str	r3, [r2, #0]
                if (dataIndex >= sizeof(sensorData.data)) {
 8000682:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b07      	cmp	r3, #7
 8000688:	d93f      	bls.n	800070a <HAL_UART_RxCpltCallback+0x18e>
                    sensorData.data = dataBuffer; // Assign the complete data
 800068a:	4b2c      	ldr	r3, [pc, #176]	; (800073c <HAL_UART_RxCpltCallback+0x1c0>)
 800068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000690:	4927      	ldr	r1, [pc, #156]	; (8000730 <HAL_UART_RxCpltCallback+0x1b4>)
 8000692:	e9c1 2302 	strd	r2, r3, [r1, #8]
                    dataIndex = 0; // Reset dataIndex for the CRC field
 8000696:	4b27      	ldr	r3, [pc, #156]	; (8000734 <HAL_UART_RxCpltCallback+0x1b8>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
                    dataBuffer = 0; // Clear the buffer for the next use
 800069c:	4927      	ldr	r1, [pc, #156]	; (800073c <HAL_UART_RxCpltCallback+0x1c0>)
 800069e:	f04f 0200 	mov.w	r2, #0
 80006a2:	f04f 0300 	mov.w	r3, #0
 80006a6:	e9c1 2300 	strd	r2, r3, [r1]
                    uartState = UART_CRC; // Move to the next state
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 80006ac:	2205      	movs	r2, #5
 80006ae:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006b0:	e02b      	b.n	800070a <HAL_UART_RxCpltCallback+0x18e>

            case UART_CRC: // CRC Case
            	if(rxByte != 0){
 80006b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d029      	beq.n	800070e <HAL_UART_RxCpltCallback+0x192>
                    sensorData.crc = rxByte; // Set the CRC value based on algorithm
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <HAL_UART_RxCpltCallback+0x1b4>)
 80006bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80006c0:	7413      	strb	r3, [r2, #16]
                    uartState = UART_EOP; // Next parameter
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 80006c4:	2206      	movs	r2, #6
 80006c6:	701a      	strb	r2, [r3, #0]
            	}
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                break;
 80006c8:	e021      	b.n	800070e <HAL_UART_RxCpltCallback+0x192>

            case UART_EOP:
                if (rxByte == 0x45) { // EOP byte = 0x45 ('E')
 80006ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80006ce:	2b45      	cmp	r3, #69	; 0x45
 80006d0:	d10d      	bne.n	80006ee <HAL_UART_RxCpltCallback+0x172>
                    uartState = UART_DONE; // Packet reception is complete
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 80006d4:	2207      	movs	r2, #7
 80006d6:	701a      	strb	r2, [r3, #0]
                    sensorData.eop = rxByte; // Set the eop
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <HAL_UART_RxCpltCallback+0x1b4>)
 80006da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80006de:	7453      	strb	r3, [r2, #17]
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4816      	ldr	r0, [pc, #88]	; (8000740 <HAL_UART_RxCpltCallback+0x1c4>)
 80006e8:	f000 ff42 	bl	8001570 <HAL_GPIO_WritePin>
//                    uartState = UART_DONE; // Packet reception is complete
//                    sensorData.eop = rxByte; // Set the eop
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                    uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
                }
                break;
 80006ec:	e010      	b.n	8000710 <HAL_UART_RxCpltCallback+0x194>
                    uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_UART_RxCpltCallback+0x1b0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
                break;
 80006f4:	e00c      	b.n	8000710 <HAL_UART_RxCpltCallback+0x194>
            case UART_DONE:
                // Packet is complete, validate CRC and take appropriate action
//                if (validateCRC(&sensorData)) {
//                    processData(&sensorData); // Process the data
//                }
            	processData(&sensorData); // Process the data
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <HAL_UART_RxCpltCallback+0x1b4>)
 80006f8:	f000 f84a 	bl	8000790 <processData>
                resetState(); // Reset FSM and variables
 80006fc:	f000 f824 	bl	8000748 <resetState>
                break;
 8000700:	e006      	b.n	8000710 <HAL_UART_RxCpltCallback+0x194>
                break;
 8000702:	bf00      	nop
 8000704:	e004      	b.n	8000710 <HAL_UART_RxCpltCallback+0x194>
                break;
 8000706:	bf00      	nop
 8000708:	e002      	b.n	8000710 <HAL_UART_RxCpltCallback+0x194>
                break;
 800070a:	bf00      	nop
 800070c:	e000      	b.n	8000710 <HAL_UART_RxCpltCallback+0x194>
                break;
 800070e:	bf00      	nop
        }
        // Ready to receive the next byte
        HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	4905      	ldr	r1, [pc, #20]	; (8000728 <HAL_UART_RxCpltCallback+0x1ac>)
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <HAL_UART_RxCpltCallback+0x1c8>)
 8000716:	f001 fc78 	bl	800200a <HAL_UART_Receive_IT>
    }
}
 800071a:	bf00      	nop
 800071c:	3770      	adds	r7, #112	; 0x70
 800071e:	46bd      	mov	sp, r7
 8000720:	bdb0      	pop	{r4, r5, r7, pc}
 8000722:	bf00      	nop
 8000724:	40004400 	.word	0x40004400
 8000728:	20000128 	.word	0x20000128
 800072c:	2000010c 	.word	0x2000010c
 8000730:	20000110 	.word	0x20000110
 8000734:	2000012c 	.word	0x2000012c
 8000738:	20000130 	.word	0x20000130
 800073c:	20000138 	.word	0x20000138
 8000740:	40020c00 	.word	0x40020c00
 8000744:	2000007c 	.word	0x2000007c

08000748 <resetState>:
void resetState(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    // Clear the buffers
    timestampBuffer = 0;
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <resetState+0x34>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
    dataBuffer = 0;
 8000752:	490b      	ldr	r1, [pc, #44]	; (8000780 <resetState+0x38>)
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	f04f 0300 	mov.w	r3, #0
 800075c:	e9c1 2300 	strd	r2, r3, [r1]
    // Reset other state variables
    uartState = UART_WAIT_FOR_SOP;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <resetState+0x3c>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
    dataIndex = 0;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <resetState+0x40>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
    // Reset the hardware pin state if needed
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <resetState+0x44>)
 8000774:	f000 fefc 	bl	8001570 <HAL_GPIO_WritePin>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000130 	.word	0x20000130
 8000780:	20000138 	.word	0x20000138
 8000784:	2000010c 	.word	0x2000010c
 8000788:	2000012c 	.word	0x2000012c
 800078c:	40020c00 	.word	0x40020c00

08000790 <processData>:
int validateCRC(const SensorDataPacket *packet) {
    // Placeholder function to validate CRC - replace with actual CRC calculation
    return packet->crc == crc_calculated;
}

void processData(const SensorDataPacket *packet) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b09c      	sub	sp, #112	; 0x70
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    char buffer[100]; // Ensure the buffer is large enough for all the data

    // Start of Packet (SOP) - Hexadecimal
    sprintf(buffer, "SOP: 0x%02X\r\n", packet->sop);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	494e      	ldr	r1, [pc, #312]	; (80008dc <processData+0x14c>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fbab 	bl	8002f00 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fd0e 	bl	80001d0 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	f107 010c 	add.w	r1, r7, #12
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	4848      	ldr	r0, [pc, #288]	; (80008e0 <processData+0x150>)
 80007c0:	f001 fb98 	bl	8001ef4 <HAL_UART_Transmit>

    // Data Type - Binary
    sprintf(buffer, "Data Type: %u\r\n", packet->datatype);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	461a      	mov	r2, r3
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4945      	ldr	r1, [pc, #276]	; (80008e4 <processData+0x154>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fb95 	bl	8002f00 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fcf8 	bl	80001d0 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f107 010c 	add.w	r1, r7, #12
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	483d      	ldr	r0, [pc, #244]	; (80008e0 <processData+0x150>)
 80007ec:	f001 fb82 	bl	8001ef4 <HAL_UART_Transmit>

    // Sensor ID - Binary
    sprintf(buffer, "Sensor ID: %u\r\n", packet->sensorId);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	789b      	ldrb	r3, [r3, #2]
 80007f4:	461a      	mov	r2, r3
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	493b      	ldr	r1, [pc, #236]	; (80008e8 <processData+0x158>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fb7f 	bl	8002f00 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fce2 	bl	80001d0 <strlen>
 800080c:	4603      	mov	r3, r0
 800080e:	b29a      	uxth	r2, r3
 8000810:	f107 010c 	add.w	r1, r7, #12
 8000814:	2364      	movs	r3, #100	; 0x64
 8000816:	4832      	ldr	r0, [pc, #200]	; (80008e0 <processData+0x150>)
 8000818:	f001 fb6c 	bl	8001ef4 <HAL_UART_Transmit>

    // Timestamp - Decimal
    sprintf(buffer, "Timestamp: %lu\r\n", packet->timestamp);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4931      	ldr	r1, [pc, #196]	; (80008ec <processData+0x15c>)
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fb6a 	bl	8002f00 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fccd 	bl	80001d0 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	f107 010c 	add.w	r1, r7, #12
 800083e:	2364      	movs	r3, #100	; 0x64
 8000840:	4827      	ldr	r0, [pc, #156]	; (80008e0 <processData+0x150>)
 8000842:	f001 fb57 	bl	8001ef4 <HAL_UART_Transmit>

    // Data - Decimal
    sprintf(buffer, "Data: %lu\r\n", packet->data);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800084c:	f107 000c 	add.w	r0, r7, #12
 8000850:	4927      	ldr	r1, [pc, #156]	; (80008f0 <processData+0x160>)
 8000852:	f002 fb55 	bl	8002f00 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fcb8 	bl	80001d0 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b29a      	uxth	r2, r3
 8000864:	f107 010c 	add.w	r1, r7, #12
 8000868:	2364      	movs	r3, #100	; 0x64
 800086a:	481d      	ldr	r0, [pc, #116]	; (80008e0 <processData+0x150>)
 800086c:	f001 fb42 	bl	8001ef4 <HAL_UART_Transmit>

    // CRC - Hexadecimal
    sprintf(buffer, "CRC: 0x%02X\r\n", packet->crc);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7c1b      	ldrb	r3, [r3, #16]
 8000874:	461a      	mov	r2, r3
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	491e      	ldr	r1, [pc, #120]	; (80008f4 <processData+0x164>)
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fb3f 	bl	8002f00 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fca2 	bl	80001d0 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	f107 010c 	add.w	r1, r7, #12
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	4812      	ldr	r0, [pc, #72]	; (80008e0 <processData+0x150>)
 8000898:	f001 fb2c 	bl	8001ef4 <HAL_UART_Transmit>

    // End of Packet (EOP) - Hexadecimal
    sprintf(buffer, "EOP: 0x%02X\r\n", packet->eop);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7c5b      	ldrb	r3, [r3, #17]
 80008a0:	461a      	mov	r2, r3
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4914      	ldr	r1, [pc, #80]	; (80008f8 <processData+0x168>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fb29 	bl	8002f00 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fc8c 	bl	80001d0 <strlen>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	f107 010c 	add.w	r1, r7, #12
 80008c0:	2364      	movs	r3, #100	; 0x64
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <processData+0x150>)
 80008c4:	f001 fb16 	bl	8001ef4 <HAL_UART_Transmit>

    // Separator
    HAL_UART_Transmit(&huart3, (uint8_t*)"--------\r\n", 10, 100);
 80008c8:	2364      	movs	r3, #100	; 0x64
 80008ca:	220a      	movs	r2, #10
 80008cc:	490b      	ldr	r1, [pc, #44]	; (80008fc <processData+0x16c>)
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <processData+0x150>)
 80008d0:	f001 fb10 	bl	8001ef4 <HAL_UART_Transmit>
}
 80008d4:	bf00      	nop
 80008d6:	3770      	adds	r7, #112	; 0x70
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	08003860 	.word	0x08003860
 80008e0:	200000c4 	.word	0x200000c4
 80008e4:	08003870 	.word	0x08003870
 80008e8:	08003880 	.word	0x08003880
 80008ec:	08003890 	.word	0x08003890
 80008f0:	080038a4 	.word	0x080038a4
 80008f4:	080038b0 	.word	0x080038b0
 80008f8:	080038c0 	.word	0x080038c0
 80008fc:	080038d0 	.word	0x080038d0

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000904:	f000 fa82 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000908:	f000 f810 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f000 f8c0 	bl	8000a90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000910:	f000 f86a 	bl	80009e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000914:	f000 f892 	bl	8000a3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000918:	2201      	movs	r2, #1
 800091a:	4902      	ldr	r1, [pc, #8]	; (8000924 <main+0x24>)
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <main+0x28>)
 800091e:	f001 fb74 	bl	800200a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000922:	e7fe      	b.n	8000922 <main+0x22>
 8000924:	20000128 	.word	0x20000128
 8000928:	2000007c 	.word	0x2000007c

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fb00 	bl	8002f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <SystemClock_Config+0xb4>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a21      	ldr	r2, [pc, #132]	; (80009e0 <SystemClock_Config+0xb4>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <SystemClock_Config+0xb4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <SystemClock_Config+0xb8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <SystemClock_Config+0xb8>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <SystemClock_Config+0xb8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	2310      	movs	r3, #16
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000994:	2300      	movs	r3, #0
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0320 	add.w	r3, r7, #32
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fe01 	bl	80015a4 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009a8:	f000 f8c4 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	230f      	movs	r3, #15
 80009ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 f864 	bl	8001a94 <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009d2:	f000 f8af 	bl	8000b34 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3750      	adds	r7, #80	; 0x50
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_USART2_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a20:	f001 fa18 	bl	8001e54 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f883 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000007c 	.word	0x2000007c
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_USART3_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a74:	f001 f9ee 	bl	8001e54 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f000 f859 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000c4 	.word	0x200000c4
 8000a8c:	40004800 	.word	0x40004800

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <MX_GPIO_Init+0x9c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <MX_GPIO_Init+0x9c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_GPIO_Init+0x9c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_GPIO_Init+0x9c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <MX_GPIO_Init+0x9c>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_GPIO_Init+0x9c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_GPIO_Init+0x9c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <MX_GPIO_Init+0x9c>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_GPIO_Init+0x9c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000b02:	f000 fd35 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_GPIO_Init+0xa0>)
 8000b20:	f000 fb8a 	bl	8001238 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020c00 	.word	0x40020c00

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a3a      	ldr	r2, [pc, #232]	; (8000c98 <HAL_UART_MspInit+0x108>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d134      	bne.n	8000c1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a38      	ldr	r2, [pc, #224]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bea:	230c      	movs	r3, #12
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4826      	ldr	r0, [pc, #152]	; (8000ca0 <HAL_UART_MspInit+0x110>)
 8000c06:	f000 fb17 	bl	8001238 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2026      	movs	r0, #38	; 0x26
 8000c10:	f000 fa49 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c14:	2026      	movs	r0, #38	; 0x26
 8000c16:	f000 fa62 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1a:	e039      	b.n	8000c90 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <HAL_UART_MspInit+0x114>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d134      	bne.n	8000c90 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_UART_MspInit+0x10c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c70:	2307      	movs	r3, #7
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <HAL_UART_MspInit+0x118>)
 8000c7c:	f000 fadc 	bl	8001238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	2027      	movs	r0, #39	; 0x27
 8000c86:	f000 fa0e 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c8a:	2027      	movs	r0, #39	; 0x27
 8000c8c:	f000 fa27 	bl	80010de <HAL_NVIC_EnableIRQ>
}
 8000c90:	bf00      	nop
 8000c92:	3730      	adds	r7, #48	; 0x30
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40004400 	.word	0x40004400
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40004800 	.word	0x40004800
 8000ca8:	40020400 	.word	0x40020400

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 f8da 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <USART2_IRQHandler+0x10>)
 8000d06:	f001 f9a5 	bl	8002054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000007c 	.word	0x2000007c

08000d14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <USART3_IRQHandler+0x10>)
 8000d1a:	f001 f99b 	bl	8002054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000c4 	.word	0x200000c4

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 f8fa 	bl	8002f50 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000140 	.word	0x20000140
 8000d90:	20000290 	.word	0x20000290

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dbc:	f7ff ffea 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	; (8000e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de6:	f002 f8b9 	bl	8002f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fd89 	bl	8000900 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dfc:	08003938 	.word	0x08003938
  ldr r2, =_sbss
 8000e00:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e04:	20000290 	.word	0x20000290

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f92b 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fe7e 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f943 	bl	80010fa <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f90b 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000144 	.word	0x20000144

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000144 	.word	0x20000144

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff29 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff3e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff31 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff feda 	bl	8000ed8 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d008      	beq.n	8001144 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e052      	b.n	80011ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0216 	bic.w	r2, r2, #22
 8001152:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001162:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	2b00      	cmp	r3, #0
 800116a:	d103      	bne.n	8001174 <HAL_DMA_Abort+0x62>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0208 	bic.w	r2, r2, #8
 8001182:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0201 	bic.w	r2, r2, #1
 8001192:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001194:	e013      	b.n	80011be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001196:	f7ff fe9f 	bl	8000ed8 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d90c      	bls.n	80011be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2220      	movs	r2, #32
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2203      	movs	r2, #3
 80011ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e015      	b.n	80011ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e4      	bne.n	8001196 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	223f      	movs	r2, #63	; 0x3f
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d004      	beq.n	8001210 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e00c      	b.n	800122a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2205      	movs	r2, #5
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e16b      	b.n	800152c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 815a 	bne.w	8001526 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d005      	beq.n	800128a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	2b02      	cmp	r3, #2
 8001288:	d130      	bne.n	80012ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d017      	beq.n	8001328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80b4 	beq.w	8001526 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b60      	ldr	r3, [pc, #384]	; (8001544 <HAL_GPIO_Init+0x30c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a5f      	ldr	r2, [pc, #380]	; (8001544 <HAL_GPIO_Init+0x30c>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <HAL_GPIO_Init+0x30c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013da:	4a5b      	ldr	r2, [pc, #364]	; (8001548 <HAL_GPIO_Init+0x310>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_GPIO_Init+0x314>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d02b      	beq.n	800145e <HAL_GPIO_Init+0x226>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a51      	ldr	r2, [pc, #324]	; (8001550 <HAL_GPIO_Init+0x318>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d025      	beq.n	800145a <HAL_GPIO_Init+0x222>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a50      	ldr	r2, [pc, #320]	; (8001554 <HAL_GPIO_Init+0x31c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d01f      	beq.n	8001456 <HAL_GPIO_Init+0x21e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4f      	ldr	r2, [pc, #316]	; (8001558 <HAL_GPIO_Init+0x320>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d019      	beq.n	8001452 <HAL_GPIO_Init+0x21a>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4e      	ldr	r2, [pc, #312]	; (800155c <HAL_GPIO_Init+0x324>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d013      	beq.n	800144e <HAL_GPIO_Init+0x216>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4d      	ldr	r2, [pc, #308]	; (8001560 <HAL_GPIO_Init+0x328>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d00d      	beq.n	800144a <HAL_GPIO_Init+0x212>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <HAL_GPIO_Init+0x32c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d007      	beq.n	8001446 <HAL_GPIO_Init+0x20e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <HAL_GPIO_Init+0x330>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_GPIO_Init+0x20a>
 800143e:	2307      	movs	r3, #7
 8001440:	e00e      	b.n	8001460 <HAL_GPIO_Init+0x228>
 8001442:	2308      	movs	r3, #8
 8001444:	e00c      	b.n	8001460 <HAL_GPIO_Init+0x228>
 8001446:	2306      	movs	r3, #6
 8001448:	e00a      	b.n	8001460 <HAL_GPIO_Init+0x228>
 800144a:	2305      	movs	r3, #5
 800144c:	e008      	b.n	8001460 <HAL_GPIO_Init+0x228>
 800144e:	2304      	movs	r3, #4
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x228>
 8001452:	2303      	movs	r3, #3
 8001454:	e004      	b.n	8001460 <HAL_GPIO_Init+0x228>
 8001456:	2302      	movs	r3, #2
 8001458:	e002      	b.n	8001460 <HAL_GPIO_Init+0x228>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x228>
 800145e:	2300      	movs	r3, #0
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	f002 0203 	and.w	r2, r2, #3
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	4093      	lsls	r3, r2
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001470:	4935      	ldr	r1, [pc, #212]	; (8001548 <HAL_GPIO_Init+0x310>)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <HAL_GPIO_Init+0x334>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a2:	4a32      	ldr	r2, [pc, #200]	; (800156c <HAL_GPIO_Init+0x334>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <HAL_GPIO_Init+0x334>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014cc:	4a27      	ldr	r2, [pc, #156]	; (800156c <HAL_GPIO_Init+0x334>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_GPIO_Init+0x334>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f6:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_GPIO_Init+0x334>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_GPIO_Init+0x334>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <HAL_GPIO_Init+0x334>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3301      	adds	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	f67f ae90 	bls.w	8001254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40013800 	.word	0x40013800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800
 8001558:	40020c00 	.word	0x40020c00
 800155c:	40021000 	.word	0x40021000
 8001560:	40021400 	.word	0x40021400
 8001564:	40021800 	.word	0x40021800
 8001568:	40021c00 	.word	0x40021c00
 800156c:	40013c00 	.word	0x40013c00

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800158c:	e003      	b.n	8001596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	619a      	str	r2, [r3, #24]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e267      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d075      	beq.n	80016ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c2:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d00c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ce:	4b85      	ldr	r3, [pc, #532]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d112      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015da:	4b82      	ldr	r3, [pc, #520]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015e6:	d10b      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	4b7e      	ldr	r3, [pc, #504]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d05b      	beq.n	80016ac <HAL_RCC_OscConfig+0x108>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d157      	bne.n	80016ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e242      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d106      	bne.n	8001618 <HAL_RCC_OscConfig+0x74>
 800160a:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a75      	ldr	r2, [pc, #468]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e01d      	b.n	8001654 <HAL_RCC_OscConfig+0xb0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x98>
 8001622:	4b70      	ldr	r3, [pc, #448]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a6f      	ldr	r2, [pc, #444]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6c      	ldr	r2, [pc, #432]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0xb0>
 800163c:	4b69      	ldr	r3, [pc, #420]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a68      	ldr	r2, [pc, #416]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b66      	ldr	r3, [pc, #408]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a65      	ldr	r2, [pc, #404]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800164e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fc3c 	bl	8000ed8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fc38 	bl	8000ed8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e207      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0xc0>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fc28 	bl	8000ed8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fc24 	bl	8000ed8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1f3      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0xe8>
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d063      	beq.n	8001782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ba:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00b      	beq.n	80016de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d11c      	bne.n	800170c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d116      	bne.n	800170c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <HAL_RCC_OscConfig+0x152>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e1c7      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4937      	ldr	r1, [pc, #220]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	e03a      	b.n	8001782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_OscConfig+0x244>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fbdd 	bl	8000ed8 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fbd9 	bl	8000ed8 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1a8      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4925      	ldr	r1, [pc, #148]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_OscConfig+0x244>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fbbc 	bl	8000ed8 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001764:	f7ff fbb8 	bl	8000ed8 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e187      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d036      	beq.n	80017fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d016      	beq.n	80017c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_RCC_OscConfig+0x248>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fb9c 	bl	8000ed8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fb98 	bl	8000ed8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e167      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80017b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x200>
 80017c2:	e01b      	b.n	80017fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_OscConfig+0x248>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fb85 	bl	8000ed8 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	e00e      	b.n	80017f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fb81 	bl	8000ed8 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d907      	bls.n	80017f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e150      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	42470000 	.word	0x42470000
 80017ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	4b88      	ldr	r3, [pc, #544]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80017f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ea      	bne.n	80017d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 8097 	beq.w	8001938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180e:	4b81      	ldr	r3, [pc, #516]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10f      	bne.n	800183a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a7c      	ldr	r2, [pc, #496]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d118      	bne.n	8001878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001846:	4b74      	ldr	r3, [pc, #464]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a73      	ldr	r2, [pc, #460]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001852:	f7ff fb41 	bl	8000ed8 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185a:	f7ff fb3d 	bl	8000ed8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e10c      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x2ea>
 8001880:	4b64      	ldr	r3, [pc, #400]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	4a63      	ldr	r2, [pc, #396]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6713      	str	r3, [r2, #112]	; 0x70
 800188c:	e01c      	b.n	80018c8 <HAL_RCC_OscConfig+0x324>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b05      	cmp	r3, #5
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x30c>
 8001896:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a5e      	ldr	r2, [pc, #376]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
 80018a2:	4b5c      	ldr	r3, [pc, #368]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a5b      	ldr	r2, [pc, #364]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0x324>
 80018b0:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	4a57      	ldr	r2, [pc, #348]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	; 0x70
 80018bc:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a54      	ldr	r2, [pc, #336]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f023 0304 	bic.w	r3, r3, #4
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d015      	beq.n	80018fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff fb02 	bl	8000ed8 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d8:	f7ff fafe 	bl	8000ed8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0cb      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0ee      	beq.n	80018d8 <HAL_RCC_OscConfig+0x334>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7ff faec 	bl	8000ed8 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff fae8 	bl	8000ed8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e0b5      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ee      	bne.n	8001904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	4a38      	ldr	r2, [pc, #224]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80a1 	beq.w	8001a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001942:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d05c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d141      	bne.n	80019da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <HAL_RCC_OscConfig+0x478>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fabc 	bl	8000ed8 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff fab8 	bl	8000ed8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e087      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69da      	ldr	r2, [r3, #28]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	019b      	lsls	r3, r3, #6
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	3b01      	subs	r3, #1
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	491b      	ldr	r1, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x478>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fa91 	bl	8000ed8 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff fa8d 	bl	8000ed8 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e05c      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x416>
 80019d8:	e054      	b.n	8001a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_RCC_OscConfig+0x478>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fa7a 	bl	8000ed8 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff fa76 	bl	8000ed8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e045      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x444>
 8001a06:	e03d      	b.n	8001a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d107      	bne.n	8001a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e038      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x4ec>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d028      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d121      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d11a      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d111      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	085b      	lsrs	r3, r3, #1
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d107      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0cc      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d90c      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0b8      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	494d      	ldr	r1, [pc, #308]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d044      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d119      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e07f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d003      	beq.n	8001b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e067      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f023 0203 	bic.w	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4934      	ldr	r1, [pc, #208]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7ff f9a8 	bl	8000ed8 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff f9a4 	bl	8000ed8 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e04f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 020c 	and.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1eb      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d20c      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e032      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4916      	ldr	r1, [pc, #88]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c1a:	f000 f821 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	490a      	ldr	r1, [pc, #40]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	5ccb      	ldrb	r3, [r1, r3]
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f908 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00
 8001c50:	40023800 	.word	0x40023800
 8001c54:	080038dc 	.word	0x080038dc
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c64:	b090      	sub	sp, #64	; 0x40
 8001c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c70:	2300      	movs	r3, #0
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d00d      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	f200 80a1 	bhi.w	8001dcc <HAL_RCC_GetSysClockFreq+0x16c>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x34>
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c92:	e09b      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c98:	e09b      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c9a:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c9e:	e098      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca0:	4b4f      	ldr	r3, [pc, #316]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001caa:	4b4d      	ldr	r3, [pc, #308]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d028      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb6:	4b4a      	ldr	r3, [pc, #296]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	623b      	str	r3, [r7, #32]
 8001cc0:	627a      	str	r2, [r7, #36]	; 0x24
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ccc:	fb03 f201 	mul.w	r2, r3, r1
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	fb00 f303 	mul.w	r3, r0, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a43      	ldr	r2, [pc, #268]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cda:	fba0 1202 	umull	r1, r2, r0, r2
 8001cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ce6:	4413      	add	r3, r2
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cec:	2200      	movs	r2, #0
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	61fa      	str	r2, [r7, #28]
 8001cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cfa:	f7fe fac1 	bl	8000280 <__aeabi_uldivmod>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4613      	mov	r3, r2
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d06:	e053      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	2200      	movs	r2, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	617a      	str	r2, [r7, #20]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d1a:	f04f 0b00 	mov.w	fp, #0
 8001d1e:	4652      	mov	r2, sl
 8001d20:	465b      	mov	r3, fp
 8001d22:	f04f 0000 	mov.w	r0, #0
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	0159      	lsls	r1, r3, #5
 8001d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d30:	0150      	lsls	r0, r2, #5
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	ebb2 080a 	subs.w	r8, r2, sl
 8001d3a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d52:	ebb2 0408 	subs.w	r4, r2, r8
 8001d56:	eb63 0509 	sbc.w	r5, r3, r9
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	00eb      	lsls	r3, r5, #3
 8001d64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d68:	00e2      	lsls	r2, r4, #3
 8001d6a:	4614      	mov	r4, r2
 8001d6c:	461d      	mov	r5, r3
 8001d6e:	eb14 030a 	adds.w	r3, r4, sl
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	eb45 030b 	adc.w	r3, r5, fp
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d86:	4629      	mov	r1, r5
 8001d88:	028b      	lsls	r3, r1, #10
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d90:	4621      	mov	r1, r4
 8001d92:	028a      	lsls	r2, r1, #10
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	60fa      	str	r2, [r7, #12]
 8001da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001da4:	f7fe fa6c 	bl	8000280 <__aeabi_uldivmod>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4613      	mov	r3, r2
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001dc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dca:	e002      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3740      	adds	r7, #64	; 0x40
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	00f42400 	.word	0x00f42400
 8001de8:	017d7840 	.word	0x017d7840

08001dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000000 	.word	0x20000000

08001e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e08:	f7ff fff0 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	0a9b      	lsrs	r3, r3, #10
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4903      	ldr	r1, [pc, #12]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	080038ec 	.word	0x080038ec

08001e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e30:	f7ff ffdc 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0b5b      	lsrs	r3, r3, #13
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	080038ec 	.word	0x080038ec

08001e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e042      	b.n	8001eec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe fe88 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2224      	movs	r2, #36	; 0x24
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fdbd 	bl	8002a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d175      	bne.n	8002000 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_UART_Transmit+0x2c>
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e06e      	b.n	8002002 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2221      	movs	r2, #33	; 0x21
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f32:	f7fe ffd1 	bl	8000ed8 <HAL_GetTick>
 8001f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	88fa      	ldrh	r2, [r7, #6]
 8001f3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	88fa      	ldrh	r2, [r7, #6]
 8001f42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4c:	d108      	bne.n	8001f60 <HAL_UART_Transmit+0x6c>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d104      	bne.n	8001f60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	e003      	b.n	8001f68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f68:	e02e      	b.n	8001fc8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2200      	movs	r2, #0
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 fb1f 	bl	80025b8 <UART_WaitOnFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e03a      	b.n	8002002 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10b      	bne.n	8001faa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e007      	b.n	8001fba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1cb      	bne.n	8001f6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2140      	movs	r1, #64	; 0x40
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 faeb 	bl	80025b8 <UART_WaitOnFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e006      	b.n	8002002 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e000      	b.n	8002002 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002000:	2302      	movs	r3, #2
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	4613      	mov	r3, r2
 8002016:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b20      	cmp	r3, #32
 8002022:	d112      	bne.n	800204a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_UART_Receive_IT+0x26>
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e00b      	b.n	800204c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	461a      	mov	r2, r3
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fb12 	bl	800266a <UART_Start_Receive_IT>
 8002046:	4603      	mov	r3, r0
 8002048:	e000      	b.n	800204c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
  }
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0ba      	sub	sp, #232	; 0xe8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10f      	bne.n	80020ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800209a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_UART_IRQHandler+0x66>
 80020a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fbf2 	bl	800289c <UART_Receive_IT>
      return;
 80020b8:	e25b      	b.n	8002572 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80de 	beq.w	8002280 <HAL_UART_IRQHandler+0x22c>
 80020c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d106      	bne.n	80020de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80d1 	beq.w	8002280 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_UART_IRQHandler+0xae>
 80020ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_UART_IRQHandler+0xd2>
 800210e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f043 0202 	orr.w	r2, r3, #2
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_UART_IRQHandler+0xf6>
 8002132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f043 0204 	orr.w	r2, r3, #4
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800214a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d011      	beq.n	800217a <HAL_UART_IRQHandler+0x126>
 8002156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f043 0208 	orr.w	r2, r3, #8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 81f2 	beq.w	8002568 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_UART_IRQHandler+0x14e>
 8002190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fb7d 	bl	800289c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ac:	2b40      	cmp	r3, #64	; 0x40
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <HAL_UART_IRQHandler+0x17a>
 80021c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d04f      	beq.n	800226e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fa85 	bl	80026de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d141      	bne.n	8002266 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3314      	adds	r3, #20
 80021e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021f0:	e853 3f00 	ldrex	r3, [r3]
 80021f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3314      	adds	r3, #20
 800220a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800220e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800221a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800221e:	e841 2300 	strex	r3, r2, [r1]
 8002222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1d9      	bne.n	80021e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d013      	beq.n	800225e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	4a7e      	ldr	r2, [pc, #504]	; (8002434 <HAL_UART_IRQHandler+0x3e0>)
 800223c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ffd5 	bl	80011f2 <HAL_DMA_Abort_IT>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d016      	beq.n	800227c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002258:	4610      	mov	r0, r2
 800225a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225c:	e00e      	b.n	800227c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f994 	bl	800258c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002264:	e00a      	b.n	800227c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f990 	bl	800258c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226c:	e006      	b.n	800227c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f98c 	bl	800258c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800227a:	e175      	b.n	8002568 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800227c:	bf00      	nop
    return;
 800227e:	e173      	b.n	8002568 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	2b01      	cmp	r3, #1
 8002286:	f040 814f 	bne.w	8002528 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800228a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8148 	beq.w	8002528 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 8141 	beq.w	8002528 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	f040 80b6 	bne.w	8002438 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 8145 	beq.w	800256c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022ea:	429a      	cmp	r2, r3
 80022ec:	f080 813e 	bcs.w	800256c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002302:	f000 8088 	beq.w	8002416 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	330c      	adds	r3, #12
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002314:	e853 3f00 	ldrex	r3, [r3]
 8002318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800231c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800233e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002342:	e841 2300 	strex	r3, r2, [r1]
 8002346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800234a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1d9      	bne.n	8002306 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3314      	adds	r3, #20
 8002358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800235c:	e853 3f00 	ldrex	r3, [r3]
 8002360:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3314      	adds	r3, #20
 8002372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002376:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800237a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800237e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002382:	e841 2300 	strex	r3, r2, [r1]
 8002386:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1e1      	bne.n	8002352 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3314      	adds	r3, #20
 8002394:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002398:	e853 3f00 	ldrex	r3, [r3]
 800239c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800239e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3314      	adds	r3, #20
 80023ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80023b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80023b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023ba:	e841 2300 	strex	r3, r2, [r1]
 80023be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80023c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1e3      	bne.n	800238e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	330c      	adds	r3, #12
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023de:	e853 3f00 	ldrex	r3, [r3]
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80023e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e6:	f023 0310 	bic.w	r3, r3, #16
 80023ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	330c      	adds	r3, #12
 80023f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80023fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002400:	e841 2300 	strex	r3, r2, [r1]
 8002404:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e3      	bne.n	80023d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fe7e 	bl	8001112 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2202      	movs	r2, #2
 800241a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002424:	b29b      	uxth	r3, r3
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	b29b      	uxth	r3, r3
 800242a:	4619      	mov	r1, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f8b7 	bl	80025a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002432:	e09b      	b.n	800256c <HAL_UART_IRQHandler+0x518>
 8002434:	080027a5 	.word	0x080027a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002440:	b29b      	uxth	r3, r3
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 808e 	beq.w	8002570 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8089 	beq.w	8002570 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002468:	e853 3f00 	ldrex	r3, [r3]
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	330c      	adds	r3, #12
 800247e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002482:	647a      	str	r2, [r7, #68]	; 0x44
 8002484:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002486:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800248a:	e841 2300 	strex	r3, r2, [r1]
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1e3      	bne.n	800245e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3314      	adds	r3, #20
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	e853 3f00 	ldrex	r3, [r3]
 80024a4:	623b      	str	r3, [r7, #32]
   return(result);
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3314      	adds	r3, #20
 80024b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024ba:	633a      	str	r2, [r7, #48]	; 0x30
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c2:	e841 2300 	strex	r3, r2, [r1]
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e3      	bne.n	8002496 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	e853 3f00 	ldrex	r3, [r3]
 80024ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0310 	bic.w	r3, r3, #16
 80024f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	330c      	adds	r3, #12
 80024fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002500:	61fa      	str	r2, [r7, #28]
 8002502:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002504:	69b9      	ldr	r1, [r7, #24]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	e841 2300 	strex	r3, r2, [r1]
 800250c:	617b      	str	r3, [r7, #20]
   return(result);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e3      	bne.n	80024dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800251a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f83d 	bl	80025a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002526:	e023      	b.n	8002570 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_UART_IRQHandler+0x4f4>
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f943 	bl	80027cc <UART_Transmit_IT>
    return;
 8002546:	e014      	b.n	8002572 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <HAL_UART_IRQHandler+0x51e>
 8002554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f983 	bl	800286c <UART_EndTransmit_IT>
    return;
 8002566:	e004      	b.n	8002572 <HAL_UART_IRQHandler+0x51e>
    return;
 8002568:	bf00      	nop
 800256a:	e002      	b.n	8002572 <HAL_UART_IRQHandler+0x51e>
      return;
 800256c:	bf00      	nop
 800256e:	e000      	b.n	8002572 <HAL_UART_IRQHandler+0x51e>
      return;
 8002570:	bf00      	nop
  }
}
 8002572:	37e8      	adds	r7, #232	; 0xe8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c8:	e03b      	b.n	8002642 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d037      	beq.n	8002642 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7fe fc81 	bl	8000ed8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e03a      	b.n	8002662 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d023      	beq.n	8002642 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b80      	cmp	r3, #128	; 0x80
 80025fe:	d020      	beq.n	8002642 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d01d      	beq.n	8002642 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b08      	cmp	r3, #8
 8002612:	d116      	bne.n	8002642 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f857 	bl	80026de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2208      	movs	r2, #8
 8002634:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	429a      	cmp	r2, r3
 800265e:	d0b4      	beq.n	80025ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	4613      	mov	r3, r2
 8002676:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	88fa      	ldrh	r2, [r7, #6]
 8002682:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	88fa      	ldrh	r2, [r7, #6]
 8002688:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2222      	movs	r2, #34	; 0x22
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0220 	orr.w	r2, r2, #32
 80026ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026de:	b480      	push	{r7}
 80026e0:	b095      	sub	sp, #84	; 0x54
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	330c      	adds	r3, #12
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	e853 3f00 	ldrex	r3, [r3]
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	330c      	adds	r3, #12
 8002704:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002706:	643a      	str	r2, [r7, #64]	; 0x40
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800270c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800270e:	e841 2300 	strex	r3, r2, [r1]
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1e5      	bne.n	80026e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3314      	adds	r3, #20
 8002720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	e853 3f00 	ldrex	r3, [r3]
 8002728:	61fb      	str	r3, [r7, #28]
   return(result);
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	64bb      	str	r3, [r7, #72]	; 0x48
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3314      	adds	r3, #20
 8002738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800273a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002742:	e841 2300 	strex	r3, r2, [r1]
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1e5      	bne.n	800271a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	2b01      	cmp	r3, #1
 8002754:	d119      	bne.n	800278a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	e853 3f00 	ldrex	r3, [r3]
 8002764:	60bb      	str	r3, [r7, #8]
   return(result);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f023 0310 	bic.w	r3, r3, #16
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002776:	61ba      	str	r2, [r7, #24]
 8002778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277a:	6979      	ldr	r1, [r7, #20]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	e841 2300 	strex	r3, r2, [r1]
 8002782:	613b      	str	r3, [r7, #16]
   return(result);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e5      	bne.n	8002756 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002798:	bf00      	nop
 800279a:	3754      	adds	r7, #84	; 0x54
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff fee4 	bl	800258c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b21      	cmp	r3, #33	; 0x21
 80027de:	d13e      	bne.n	800285e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e8:	d114      	bne.n	8002814 <UART_Transmit_IT+0x48>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d110      	bne.n	8002814 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002806:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	1c9a      	adds	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	621a      	str	r2, [r3, #32]
 8002812:	e008      	b.n	8002826 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	1c59      	adds	r1, r3, #1
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6211      	str	r1, [r2, #32]
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29b      	uxth	r3, r3
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	4619      	mov	r1, r3
 8002834:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002848:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002858:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
  }
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002882:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fe73 	bl	8002578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08c      	sub	sp, #48	; 0x30
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b22      	cmp	r3, #34	; 0x22
 80028ae:	f040 80ae 	bne.w	8002a0e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ba:	d117      	bne.n	80028ec <UART_Receive_IT+0x50>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d113      	bne.n	80028ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028da:	b29a      	uxth	r2, r3
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	1c9a      	adds	r2, r3, #2
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
 80028ea:	e026      	b.n	800293a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fe:	d007      	beq.n	8002910 <UART_Receive_IT+0x74>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <UART_Receive_IT+0x82>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d106      	bne.n	800291e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	701a      	strb	r2, [r3, #0]
 800291c:	e008      	b.n	8002930 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800292a:	b2da      	uxtb	r2, r3
 800292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29b      	uxth	r3, r3
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	4619      	mov	r1, r3
 8002948:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800294a:	2b00      	cmp	r3, #0
 800294c:	d15d      	bne.n	8002a0a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0220 	bic.w	r2, r2, #32
 800295c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	2b01      	cmp	r3, #1
 8002992:	d135      	bne.n	8002a00 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	e853 3f00 	ldrex	r3, [r3]
 80029a8:	613b      	str	r3, [r7, #16]
   return(result);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f023 0310 	bic.w	r3, r3, #16
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	330c      	adds	r3, #12
 80029b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ba:	623a      	str	r2, [r7, #32]
 80029bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029be:	69f9      	ldr	r1, [r7, #28]
 80029c0:	6a3a      	ldr	r2, [r7, #32]
 80029c2:	e841 2300 	strex	r3, r2, [r1]
 80029c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1e5      	bne.n	800299a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d10a      	bne.n	80029f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029f6:	4619      	mov	r1, r3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fdd1 	bl	80025a0 <HAL_UARTEx_RxEventCallback>
 80029fe:	e002      	b.n	8002a06 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7fd fdbb 	bl	800057c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e002      	b.n	8002a10 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
  }
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3730      	adds	r7, #48	; 0x30
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a1c:	b0c0      	sub	sp, #256	; 0x100
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a34:	68d9      	ldr	r1, [r3, #12]
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	ea40 0301 	orr.w	r3, r0, r1
 8002a40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a70:	f021 010c 	bic.w	r1, r1, #12
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a92:	6999      	ldr	r1, [r3, #24]
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	ea40 0301 	orr.w	r3, r0, r1
 8002a9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b8f      	ldr	r3, [pc, #572]	; (8002ce4 <UART_SetConfig+0x2cc>)
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d005      	beq.n	8002ab8 <UART_SetConfig+0xa0>
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b8d      	ldr	r3, [pc, #564]	; (8002ce8 <UART_SetConfig+0x2d0>)
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d104      	bne.n	8002ac2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ab8:	f7ff f9b8 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 8002abc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ac0:	e003      	b.n	8002aca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ac2:	f7ff f99f 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8002ac6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad4:	f040 810c 	bne.w	8002cf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ae2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ae6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002aea:	4622      	mov	r2, r4
 8002aec:	462b      	mov	r3, r5
 8002aee:	1891      	adds	r1, r2, r2
 8002af0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002af2:	415b      	adcs	r3, r3
 8002af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002af6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002afa:	4621      	mov	r1, r4
 8002afc:	eb12 0801 	adds.w	r8, r2, r1
 8002b00:	4629      	mov	r1, r5
 8002b02:	eb43 0901 	adc.w	r9, r3, r1
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1a:	4690      	mov	r8, r2
 8002b1c:	4699      	mov	r9, r3
 8002b1e:	4623      	mov	r3, r4
 8002b20:	eb18 0303 	adds.w	r3, r8, r3
 8002b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b28:	462b      	mov	r3, r5
 8002b2a:	eb49 0303 	adc.w	r3, r9, r3
 8002b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b46:	460b      	mov	r3, r1
 8002b48:	18db      	adds	r3, r3, r3
 8002b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	eb42 0303 	adc.w	r3, r2, r3
 8002b52:	657b      	str	r3, [r7, #84]	; 0x54
 8002b54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b5c:	f7fd fb90 	bl	8000280 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4b61      	ldr	r3, [pc, #388]	; (8002cec <UART_SetConfig+0x2d4>)
 8002b66:	fba3 2302 	umull	r2, r3, r3, r2
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	011c      	lsls	r4, r3, #4
 8002b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b80:	4642      	mov	r2, r8
 8002b82:	464b      	mov	r3, r9
 8002b84:	1891      	adds	r1, r2, r2
 8002b86:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b88:	415b      	adcs	r3, r3
 8002b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b90:	4641      	mov	r1, r8
 8002b92:	eb12 0a01 	adds.w	sl, r2, r1
 8002b96:	4649      	mov	r1, r9
 8002b98:	eb43 0b01 	adc.w	fp, r3, r1
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ba8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb0:	4692      	mov	sl, r2
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4643      	mov	r3, r8
 8002bb6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	eb4b 0303 	adc.w	r3, fp, r3
 8002bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	18db      	adds	r3, r3, r3
 8002be0:	643b      	str	r3, [r7, #64]	; 0x40
 8002be2:	4613      	mov	r3, r2
 8002be4:	eb42 0303 	adc.w	r3, r2, r3
 8002be8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bf2:	f7fd fb45 	bl	8000280 <__aeabi_uldivmod>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <UART_SetConfig+0x2d4>)
 8002bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2264      	movs	r2, #100	; 0x64
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	1acb      	subs	r3, r1, r3
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c12:	4b36      	ldr	r3, [pc, #216]	; (8002cec <UART_SetConfig+0x2d4>)
 8002c14:	fba3 2302 	umull	r2, r3, r3, r2
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c20:	441c      	add	r4, r3
 8002c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	1891      	adds	r1, r2, r2
 8002c3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c3c:	415b      	adcs	r3, r3
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c44:	4641      	mov	r1, r8
 8002c46:	1851      	adds	r1, r2, r1
 8002c48:	6339      	str	r1, [r7, #48]	; 0x30
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	414b      	adcs	r3, r1
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c5c:	4659      	mov	r1, fp
 8002c5e:	00cb      	lsls	r3, r1, #3
 8002c60:	4651      	mov	r1, sl
 8002c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c66:	4651      	mov	r1, sl
 8002c68:	00ca      	lsls	r2, r1, #3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4642      	mov	r2, r8
 8002c72:	189b      	adds	r3, r3, r2
 8002c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c78:	464b      	mov	r3, r9
 8002c7a:	460a      	mov	r2, r1
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c98:	460b      	mov	r3, r1
 8002c9a:	18db      	adds	r3, r3, r3
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	eb42 0303 	adc.w	r3, r2, r3
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002caa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cae:	f7fd fae7 	bl	8000280 <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <UART_SetConfig+0x2d4>)
 8002cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	2164      	movs	r1, #100	; 0x64
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	3332      	adds	r3, #50	; 0x32
 8002cca:	4a08      	ldr	r2, [pc, #32]	; (8002cec <UART_SetConfig+0x2d4>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	f003 0207 	and.w	r2, r3, #7
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4422      	add	r2, r4
 8002cde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ce0:	e106      	b.n	8002ef0 <UART_SetConfig+0x4d8>
 8002ce2:	bf00      	nop
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	40011400 	.word	0x40011400
 8002cec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d02:	4642      	mov	r2, r8
 8002d04:	464b      	mov	r3, r9
 8002d06:	1891      	adds	r1, r2, r2
 8002d08:	6239      	str	r1, [r7, #32]
 8002d0a:	415b      	adcs	r3, r3
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d12:	4641      	mov	r1, r8
 8002d14:	1854      	adds	r4, r2, r1
 8002d16:	4649      	mov	r1, r9
 8002d18:	eb43 0501 	adc.w	r5, r3, r1
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	00eb      	lsls	r3, r5, #3
 8002d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2a:	00e2      	lsls	r2, r4, #3
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	461d      	mov	r5, r3
 8002d30:	4643      	mov	r3, r8
 8002d32:	18e3      	adds	r3, r4, r3
 8002d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d38:	464b      	mov	r3, r9
 8002d3a:	eb45 0303 	adc.w	r3, r5, r3
 8002d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d5e:	4629      	mov	r1, r5
 8002d60:	008b      	lsls	r3, r1, #2
 8002d62:	4621      	mov	r1, r4
 8002d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d68:	4621      	mov	r1, r4
 8002d6a:	008a      	lsls	r2, r1, #2
 8002d6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d70:	f7fd fa86 	bl	8000280 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4b60      	ldr	r3, [pc, #384]	; (8002efc <UART_SetConfig+0x4e4>)
 8002d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	011c      	lsls	r4, r3, #4
 8002d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d94:	4642      	mov	r2, r8
 8002d96:	464b      	mov	r3, r9
 8002d98:	1891      	adds	r1, r2, r2
 8002d9a:	61b9      	str	r1, [r7, #24]
 8002d9c:	415b      	adcs	r3, r3
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da4:	4641      	mov	r1, r8
 8002da6:	1851      	adds	r1, r2, r1
 8002da8:	6139      	str	r1, [r7, #16]
 8002daa:	4649      	mov	r1, r9
 8002dac:	414b      	adcs	r3, r1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	00cb      	lsls	r3, r1, #3
 8002dc0:	4651      	mov	r1, sl
 8002dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	00ca      	lsls	r2, r1, #3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	189b      	adds	r3, r3, r2
 8002dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dd8:	464b      	mov	r3, r9
 8002dda:	460a      	mov	r2, r1
 8002ddc:	eb42 0303 	adc.w	r3, r2, r3
 8002de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	008b      	lsls	r3, r1, #2
 8002e00:	4641      	mov	r1, r8
 8002e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e06:	4641      	mov	r1, r8
 8002e08:	008a      	lsls	r2, r1, #2
 8002e0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e0e:	f7fd fa37 	bl	8000280 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	4b38      	ldr	r3, [pc, #224]	; (8002efc <UART_SetConfig+0x4e4>)
 8002e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2264      	movs	r2, #100	; 0x64
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	1acb      	subs	r3, r1, r3
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	3332      	adds	r3, #50	; 0x32
 8002e2c:	4a33      	ldr	r2, [pc, #204]	; (8002efc <UART_SetConfig+0x4e4>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e38:	441c      	add	r4, r3
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	673b      	str	r3, [r7, #112]	; 0x70
 8002e42:	677a      	str	r2, [r7, #116]	; 0x74
 8002e44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	1891      	adds	r1, r2, r2
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	415b      	adcs	r3, r3
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e58:	4641      	mov	r1, r8
 8002e5a:	1851      	adds	r1, r2, r1
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	4649      	mov	r1, r9
 8002e60:	414b      	adcs	r3, r1
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e70:	4659      	mov	r1, fp
 8002e72:	00cb      	lsls	r3, r1, #3
 8002e74:	4651      	mov	r1, sl
 8002e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7a:	4651      	mov	r1, sl
 8002e7c:	00ca      	lsls	r2, r1, #3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	4642      	mov	r2, r8
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	eb42 0303 	adc.w	r3, r2, r3
 8002e92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e9e:	667a      	str	r2, [r7, #100]	; 0x64
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eac:	4649      	mov	r1, r9
 8002eae:	008b      	lsls	r3, r1, #2
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	008a      	lsls	r2, r1, #2
 8002eba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ebe:	f7fd f9df 	bl	8000280 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <UART_SetConfig+0x4e4>)
 8002ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	2164      	movs	r1, #100	; 0x64
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	3332      	adds	r3, #50	; 0x32
 8002eda:	4a08      	ldr	r2, [pc, #32]	; (8002efc <UART_SetConfig+0x4e4>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	f003 020f 	and.w	r2, r3, #15
 8002ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4422      	add	r2, r4
 8002eee:	609a      	str	r2, [r3, #8]
}
 8002ef0:	bf00      	nop
 8002ef2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002efc:	51eb851f 	.word	0x51eb851f

08002f00 <siprintf>:
 8002f00:	b40e      	push	{r1, r2, r3}
 8002f02:	b500      	push	{lr}
 8002f04:	b09c      	sub	sp, #112	; 0x70
 8002f06:	ab1d      	add	r3, sp, #116	; 0x74
 8002f08:	9002      	str	r0, [sp, #8]
 8002f0a:	9006      	str	r0, [sp, #24]
 8002f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f10:	4809      	ldr	r0, [pc, #36]	; (8002f38 <siprintf+0x38>)
 8002f12:	9107      	str	r1, [sp, #28]
 8002f14:	9104      	str	r1, [sp, #16]
 8002f16:	4909      	ldr	r1, [pc, #36]	; (8002f3c <siprintf+0x3c>)
 8002f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f1c:	9105      	str	r1, [sp, #20]
 8002f1e:	6800      	ldr	r0, [r0, #0]
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	a902      	add	r1, sp, #8
 8002f24:	f000 f992 	bl	800324c <_svfiprintf_r>
 8002f28:	9b02      	ldr	r3, [sp, #8]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	b01c      	add	sp, #112	; 0x70
 8002f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f34:	b003      	add	sp, #12
 8002f36:	4770      	bx	lr
 8002f38:	20000058 	.word	0x20000058
 8002f3c:	ffff0208 	.word	0xffff0208

08002f40 <memset>:
 8002f40:	4402      	add	r2, r0
 8002f42:	4603      	mov	r3, r0
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d100      	bne.n	8002f4a <memset+0xa>
 8002f48:	4770      	bx	lr
 8002f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4e:	e7f9      	b.n	8002f44 <memset+0x4>

08002f50 <__errno>:
 8002f50:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <__errno+0x8>)
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000058 	.word	0x20000058

08002f5c <__libc_init_array>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	4d0d      	ldr	r5, [pc, #52]	; (8002f94 <__libc_init_array+0x38>)
 8002f60:	4c0d      	ldr	r4, [pc, #52]	; (8002f98 <__libc_init_array+0x3c>)
 8002f62:	1b64      	subs	r4, r4, r5
 8002f64:	10a4      	asrs	r4, r4, #2
 8002f66:	2600      	movs	r6, #0
 8002f68:	42a6      	cmp	r6, r4
 8002f6a:	d109      	bne.n	8002f80 <__libc_init_array+0x24>
 8002f6c:	4d0b      	ldr	r5, [pc, #44]	; (8002f9c <__libc_init_array+0x40>)
 8002f6e:	4c0c      	ldr	r4, [pc, #48]	; (8002fa0 <__libc_init_array+0x44>)
 8002f70:	f000 fc6a 	bl	8003848 <_init>
 8002f74:	1b64      	subs	r4, r4, r5
 8002f76:	10a4      	asrs	r4, r4, #2
 8002f78:	2600      	movs	r6, #0
 8002f7a:	42a6      	cmp	r6, r4
 8002f7c:	d105      	bne.n	8002f8a <__libc_init_array+0x2e>
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
 8002f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f84:	4798      	blx	r3
 8002f86:	3601      	adds	r6, #1
 8002f88:	e7ee      	b.n	8002f68 <__libc_init_array+0xc>
 8002f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8e:	4798      	blx	r3
 8002f90:	3601      	adds	r6, #1
 8002f92:	e7f2      	b.n	8002f7a <__libc_init_array+0x1e>
 8002f94:	08003930 	.word	0x08003930
 8002f98:	08003930 	.word	0x08003930
 8002f9c:	08003930 	.word	0x08003930
 8002fa0:	08003934 	.word	0x08003934

08002fa4 <__retarget_lock_acquire_recursive>:
 8002fa4:	4770      	bx	lr

08002fa6 <__retarget_lock_release_recursive>:
 8002fa6:	4770      	bx	lr

08002fa8 <_free_r>:
 8002fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002faa:	2900      	cmp	r1, #0
 8002fac:	d044      	beq.n	8003038 <_free_r+0x90>
 8002fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb2:	9001      	str	r0, [sp, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f1a1 0404 	sub.w	r4, r1, #4
 8002fba:	bfb8      	it	lt
 8002fbc:	18e4      	addlt	r4, r4, r3
 8002fbe:	f000 f8df 	bl	8003180 <__malloc_lock>
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	; (800303c <_free_r+0x94>)
 8002fc4:	9801      	ldr	r0, [sp, #4]
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	b933      	cbnz	r3, 8002fd8 <_free_r+0x30>
 8002fca:	6063      	str	r3, [r4, #4]
 8002fcc:	6014      	str	r4, [r2, #0]
 8002fce:	b003      	add	sp, #12
 8002fd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fd4:	f000 b8da 	b.w	800318c <__malloc_unlock>
 8002fd8:	42a3      	cmp	r3, r4
 8002fda:	d908      	bls.n	8002fee <_free_r+0x46>
 8002fdc:	6825      	ldr	r5, [r4, #0]
 8002fde:	1961      	adds	r1, r4, r5
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	bf01      	itttt	eq
 8002fe4:	6819      	ldreq	r1, [r3, #0]
 8002fe6:	685b      	ldreq	r3, [r3, #4]
 8002fe8:	1949      	addeq	r1, r1, r5
 8002fea:	6021      	streq	r1, [r4, #0]
 8002fec:	e7ed      	b.n	8002fca <_free_r+0x22>
 8002fee:	461a      	mov	r2, r3
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	b10b      	cbz	r3, 8002ff8 <_free_r+0x50>
 8002ff4:	42a3      	cmp	r3, r4
 8002ff6:	d9fa      	bls.n	8002fee <_free_r+0x46>
 8002ff8:	6811      	ldr	r1, [r2, #0]
 8002ffa:	1855      	adds	r5, r2, r1
 8002ffc:	42a5      	cmp	r5, r4
 8002ffe:	d10b      	bne.n	8003018 <_free_r+0x70>
 8003000:	6824      	ldr	r4, [r4, #0]
 8003002:	4421      	add	r1, r4
 8003004:	1854      	adds	r4, r2, r1
 8003006:	42a3      	cmp	r3, r4
 8003008:	6011      	str	r1, [r2, #0]
 800300a:	d1e0      	bne.n	8002fce <_free_r+0x26>
 800300c:	681c      	ldr	r4, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	6053      	str	r3, [r2, #4]
 8003012:	440c      	add	r4, r1
 8003014:	6014      	str	r4, [r2, #0]
 8003016:	e7da      	b.n	8002fce <_free_r+0x26>
 8003018:	d902      	bls.n	8003020 <_free_r+0x78>
 800301a:	230c      	movs	r3, #12
 800301c:	6003      	str	r3, [r0, #0]
 800301e:	e7d6      	b.n	8002fce <_free_r+0x26>
 8003020:	6825      	ldr	r5, [r4, #0]
 8003022:	1961      	adds	r1, r4, r5
 8003024:	428b      	cmp	r3, r1
 8003026:	bf04      	itt	eq
 8003028:	6819      	ldreq	r1, [r3, #0]
 800302a:	685b      	ldreq	r3, [r3, #4]
 800302c:	6063      	str	r3, [r4, #4]
 800302e:	bf04      	itt	eq
 8003030:	1949      	addeq	r1, r1, r5
 8003032:	6021      	streq	r1, [r4, #0]
 8003034:	6054      	str	r4, [r2, #4]
 8003036:	e7ca      	b.n	8002fce <_free_r+0x26>
 8003038:	b003      	add	sp, #12
 800303a:	bd30      	pop	{r4, r5, pc}
 800303c:	20000288 	.word	0x20000288

08003040 <sbrk_aligned>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	4e0e      	ldr	r6, [pc, #56]	; (800307c <sbrk_aligned+0x3c>)
 8003044:	460c      	mov	r4, r1
 8003046:	6831      	ldr	r1, [r6, #0]
 8003048:	4605      	mov	r5, r0
 800304a:	b911      	cbnz	r1, 8003052 <sbrk_aligned+0x12>
 800304c:	f000 fba6 	bl	800379c <_sbrk_r>
 8003050:	6030      	str	r0, [r6, #0]
 8003052:	4621      	mov	r1, r4
 8003054:	4628      	mov	r0, r5
 8003056:	f000 fba1 	bl	800379c <_sbrk_r>
 800305a:	1c43      	adds	r3, r0, #1
 800305c:	d00a      	beq.n	8003074 <sbrk_aligned+0x34>
 800305e:	1cc4      	adds	r4, r0, #3
 8003060:	f024 0403 	bic.w	r4, r4, #3
 8003064:	42a0      	cmp	r0, r4
 8003066:	d007      	beq.n	8003078 <sbrk_aligned+0x38>
 8003068:	1a21      	subs	r1, r4, r0
 800306a:	4628      	mov	r0, r5
 800306c:	f000 fb96 	bl	800379c <_sbrk_r>
 8003070:	3001      	adds	r0, #1
 8003072:	d101      	bne.n	8003078 <sbrk_aligned+0x38>
 8003074:	f04f 34ff 	mov.w	r4, #4294967295
 8003078:	4620      	mov	r0, r4
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	2000028c 	.word	0x2000028c

08003080 <_malloc_r>:
 8003080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003084:	1ccd      	adds	r5, r1, #3
 8003086:	f025 0503 	bic.w	r5, r5, #3
 800308a:	3508      	adds	r5, #8
 800308c:	2d0c      	cmp	r5, #12
 800308e:	bf38      	it	cc
 8003090:	250c      	movcc	r5, #12
 8003092:	2d00      	cmp	r5, #0
 8003094:	4607      	mov	r7, r0
 8003096:	db01      	blt.n	800309c <_malloc_r+0x1c>
 8003098:	42a9      	cmp	r1, r5
 800309a:	d905      	bls.n	80030a8 <_malloc_r+0x28>
 800309c:	230c      	movs	r3, #12
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	2600      	movs	r6, #0
 80030a2:	4630      	mov	r0, r6
 80030a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800317c <_malloc_r+0xfc>
 80030ac:	f000 f868 	bl	8003180 <__malloc_lock>
 80030b0:	f8d8 3000 	ldr.w	r3, [r8]
 80030b4:	461c      	mov	r4, r3
 80030b6:	bb5c      	cbnz	r4, 8003110 <_malloc_r+0x90>
 80030b8:	4629      	mov	r1, r5
 80030ba:	4638      	mov	r0, r7
 80030bc:	f7ff ffc0 	bl	8003040 <sbrk_aligned>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	4604      	mov	r4, r0
 80030c4:	d155      	bne.n	8003172 <_malloc_r+0xf2>
 80030c6:	f8d8 4000 	ldr.w	r4, [r8]
 80030ca:	4626      	mov	r6, r4
 80030cc:	2e00      	cmp	r6, #0
 80030ce:	d145      	bne.n	800315c <_malloc_r+0xdc>
 80030d0:	2c00      	cmp	r4, #0
 80030d2:	d048      	beq.n	8003166 <_malloc_r+0xe6>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	4631      	mov	r1, r6
 80030d8:	4638      	mov	r0, r7
 80030da:	eb04 0903 	add.w	r9, r4, r3
 80030de:	f000 fb5d 	bl	800379c <_sbrk_r>
 80030e2:	4581      	cmp	r9, r0
 80030e4:	d13f      	bne.n	8003166 <_malloc_r+0xe6>
 80030e6:	6821      	ldr	r1, [r4, #0]
 80030e8:	1a6d      	subs	r5, r5, r1
 80030ea:	4629      	mov	r1, r5
 80030ec:	4638      	mov	r0, r7
 80030ee:	f7ff ffa7 	bl	8003040 <sbrk_aligned>
 80030f2:	3001      	adds	r0, #1
 80030f4:	d037      	beq.n	8003166 <_malloc_r+0xe6>
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	442b      	add	r3, r5
 80030fa:	6023      	str	r3, [r4, #0]
 80030fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d038      	beq.n	8003176 <_malloc_r+0xf6>
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	42a2      	cmp	r2, r4
 8003108:	d12b      	bne.n	8003162 <_malloc_r+0xe2>
 800310a:	2200      	movs	r2, #0
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	e00f      	b.n	8003130 <_malloc_r+0xb0>
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	1b52      	subs	r2, r2, r5
 8003114:	d41f      	bmi.n	8003156 <_malloc_r+0xd6>
 8003116:	2a0b      	cmp	r2, #11
 8003118:	d917      	bls.n	800314a <_malloc_r+0xca>
 800311a:	1961      	adds	r1, r4, r5
 800311c:	42a3      	cmp	r3, r4
 800311e:	6025      	str	r5, [r4, #0]
 8003120:	bf18      	it	ne
 8003122:	6059      	strne	r1, [r3, #4]
 8003124:	6863      	ldr	r3, [r4, #4]
 8003126:	bf08      	it	eq
 8003128:	f8c8 1000 	streq.w	r1, [r8]
 800312c:	5162      	str	r2, [r4, r5]
 800312e:	604b      	str	r3, [r1, #4]
 8003130:	4638      	mov	r0, r7
 8003132:	f104 060b 	add.w	r6, r4, #11
 8003136:	f000 f829 	bl	800318c <__malloc_unlock>
 800313a:	f026 0607 	bic.w	r6, r6, #7
 800313e:	1d23      	adds	r3, r4, #4
 8003140:	1af2      	subs	r2, r6, r3
 8003142:	d0ae      	beq.n	80030a2 <_malloc_r+0x22>
 8003144:	1b9b      	subs	r3, r3, r6
 8003146:	50a3      	str	r3, [r4, r2]
 8003148:	e7ab      	b.n	80030a2 <_malloc_r+0x22>
 800314a:	42a3      	cmp	r3, r4
 800314c:	6862      	ldr	r2, [r4, #4]
 800314e:	d1dd      	bne.n	800310c <_malloc_r+0x8c>
 8003150:	f8c8 2000 	str.w	r2, [r8]
 8003154:	e7ec      	b.n	8003130 <_malloc_r+0xb0>
 8003156:	4623      	mov	r3, r4
 8003158:	6864      	ldr	r4, [r4, #4]
 800315a:	e7ac      	b.n	80030b6 <_malloc_r+0x36>
 800315c:	4634      	mov	r4, r6
 800315e:	6876      	ldr	r6, [r6, #4]
 8003160:	e7b4      	b.n	80030cc <_malloc_r+0x4c>
 8003162:	4613      	mov	r3, r2
 8003164:	e7cc      	b.n	8003100 <_malloc_r+0x80>
 8003166:	230c      	movs	r3, #12
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4638      	mov	r0, r7
 800316c:	f000 f80e 	bl	800318c <__malloc_unlock>
 8003170:	e797      	b.n	80030a2 <_malloc_r+0x22>
 8003172:	6025      	str	r5, [r4, #0]
 8003174:	e7dc      	b.n	8003130 <_malloc_r+0xb0>
 8003176:	605b      	str	r3, [r3, #4]
 8003178:	deff      	udf	#255	; 0xff
 800317a:	bf00      	nop
 800317c:	20000288 	.word	0x20000288

08003180 <__malloc_lock>:
 8003180:	4801      	ldr	r0, [pc, #4]	; (8003188 <__malloc_lock+0x8>)
 8003182:	f7ff bf0f 	b.w	8002fa4 <__retarget_lock_acquire_recursive>
 8003186:	bf00      	nop
 8003188:	20000284 	.word	0x20000284

0800318c <__malloc_unlock>:
 800318c:	4801      	ldr	r0, [pc, #4]	; (8003194 <__malloc_unlock+0x8>)
 800318e:	f7ff bf0a 	b.w	8002fa6 <__retarget_lock_release_recursive>
 8003192:	bf00      	nop
 8003194:	20000284 	.word	0x20000284

08003198 <__ssputs_r>:
 8003198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800319c:	688e      	ldr	r6, [r1, #8]
 800319e:	461f      	mov	r7, r3
 80031a0:	42be      	cmp	r6, r7
 80031a2:	680b      	ldr	r3, [r1, #0]
 80031a4:	4682      	mov	sl, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	4690      	mov	r8, r2
 80031aa:	d82c      	bhi.n	8003206 <__ssputs_r+0x6e>
 80031ac:	898a      	ldrh	r2, [r1, #12]
 80031ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031b2:	d026      	beq.n	8003202 <__ssputs_r+0x6a>
 80031b4:	6965      	ldr	r5, [r4, #20]
 80031b6:	6909      	ldr	r1, [r1, #16]
 80031b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031bc:	eba3 0901 	sub.w	r9, r3, r1
 80031c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031c4:	1c7b      	adds	r3, r7, #1
 80031c6:	444b      	add	r3, r9
 80031c8:	106d      	asrs	r5, r5, #1
 80031ca:	429d      	cmp	r5, r3
 80031cc:	bf38      	it	cc
 80031ce:	461d      	movcc	r5, r3
 80031d0:	0553      	lsls	r3, r2, #21
 80031d2:	d527      	bpl.n	8003224 <__ssputs_r+0x8c>
 80031d4:	4629      	mov	r1, r5
 80031d6:	f7ff ff53 	bl	8003080 <_malloc_r>
 80031da:	4606      	mov	r6, r0
 80031dc:	b360      	cbz	r0, 8003238 <__ssputs_r+0xa0>
 80031de:	6921      	ldr	r1, [r4, #16]
 80031e0:	464a      	mov	r2, r9
 80031e2:	f000 faeb 	bl	80037bc <memcpy>
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f0:	81a3      	strh	r3, [r4, #12]
 80031f2:	6126      	str	r6, [r4, #16]
 80031f4:	6165      	str	r5, [r4, #20]
 80031f6:	444e      	add	r6, r9
 80031f8:	eba5 0509 	sub.w	r5, r5, r9
 80031fc:	6026      	str	r6, [r4, #0]
 80031fe:	60a5      	str	r5, [r4, #8]
 8003200:	463e      	mov	r6, r7
 8003202:	42be      	cmp	r6, r7
 8003204:	d900      	bls.n	8003208 <__ssputs_r+0x70>
 8003206:	463e      	mov	r6, r7
 8003208:	6820      	ldr	r0, [r4, #0]
 800320a:	4632      	mov	r2, r6
 800320c:	4641      	mov	r1, r8
 800320e:	f000 faab 	bl	8003768 <memmove>
 8003212:	68a3      	ldr	r3, [r4, #8]
 8003214:	1b9b      	subs	r3, r3, r6
 8003216:	60a3      	str	r3, [r4, #8]
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	4433      	add	r3, r6
 800321c:	6023      	str	r3, [r4, #0]
 800321e:	2000      	movs	r0, #0
 8003220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003224:	462a      	mov	r2, r5
 8003226:	f000 fad7 	bl	80037d8 <_realloc_r>
 800322a:	4606      	mov	r6, r0
 800322c:	2800      	cmp	r0, #0
 800322e:	d1e0      	bne.n	80031f2 <__ssputs_r+0x5a>
 8003230:	6921      	ldr	r1, [r4, #16]
 8003232:	4650      	mov	r0, sl
 8003234:	f7ff feb8 	bl	8002fa8 <_free_r>
 8003238:	230c      	movs	r3, #12
 800323a:	f8ca 3000 	str.w	r3, [sl]
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003244:	81a3      	strh	r3, [r4, #12]
 8003246:	f04f 30ff 	mov.w	r0, #4294967295
 800324a:	e7e9      	b.n	8003220 <__ssputs_r+0x88>

0800324c <_svfiprintf_r>:
 800324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003250:	4698      	mov	r8, r3
 8003252:	898b      	ldrh	r3, [r1, #12]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	b09d      	sub	sp, #116	; 0x74
 8003258:	4607      	mov	r7, r0
 800325a:	460d      	mov	r5, r1
 800325c:	4614      	mov	r4, r2
 800325e:	d50e      	bpl.n	800327e <_svfiprintf_r+0x32>
 8003260:	690b      	ldr	r3, [r1, #16]
 8003262:	b963      	cbnz	r3, 800327e <_svfiprintf_r+0x32>
 8003264:	2140      	movs	r1, #64	; 0x40
 8003266:	f7ff ff0b 	bl	8003080 <_malloc_r>
 800326a:	6028      	str	r0, [r5, #0]
 800326c:	6128      	str	r0, [r5, #16]
 800326e:	b920      	cbnz	r0, 800327a <_svfiprintf_r+0x2e>
 8003270:	230c      	movs	r3, #12
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	e0d0      	b.n	800341c <_svfiprintf_r+0x1d0>
 800327a:	2340      	movs	r3, #64	; 0x40
 800327c:	616b      	str	r3, [r5, #20]
 800327e:	2300      	movs	r3, #0
 8003280:	9309      	str	r3, [sp, #36]	; 0x24
 8003282:	2320      	movs	r3, #32
 8003284:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003288:	f8cd 800c 	str.w	r8, [sp, #12]
 800328c:	2330      	movs	r3, #48	; 0x30
 800328e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003434 <_svfiprintf_r+0x1e8>
 8003292:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003296:	f04f 0901 	mov.w	r9, #1
 800329a:	4623      	mov	r3, r4
 800329c:	469a      	mov	sl, r3
 800329e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032a2:	b10a      	cbz	r2, 80032a8 <_svfiprintf_r+0x5c>
 80032a4:	2a25      	cmp	r2, #37	; 0x25
 80032a6:	d1f9      	bne.n	800329c <_svfiprintf_r+0x50>
 80032a8:	ebba 0b04 	subs.w	fp, sl, r4
 80032ac:	d00b      	beq.n	80032c6 <_svfiprintf_r+0x7a>
 80032ae:	465b      	mov	r3, fp
 80032b0:	4622      	mov	r2, r4
 80032b2:	4629      	mov	r1, r5
 80032b4:	4638      	mov	r0, r7
 80032b6:	f7ff ff6f 	bl	8003198 <__ssputs_r>
 80032ba:	3001      	adds	r0, #1
 80032bc:	f000 80a9 	beq.w	8003412 <_svfiprintf_r+0x1c6>
 80032c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032c2:	445a      	add	r2, fp
 80032c4:	9209      	str	r2, [sp, #36]	; 0x24
 80032c6:	f89a 3000 	ldrb.w	r3, [sl]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80a1 	beq.w	8003412 <_svfiprintf_r+0x1c6>
 80032d0:	2300      	movs	r3, #0
 80032d2:	f04f 32ff 	mov.w	r2, #4294967295
 80032d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032da:	f10a 0a01 	add.w	sl, sl, #1
 80032de:	9304      	str	r3, [sp, #16]
 80032e0:	9307      	str	r3, [sp, #28]
 80032e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032e6:	931a      	str	r3, [sp, #104]	; 0x68
 80032e8:	4654      	mov	r4, sl
 80032ea:	2205      	movs	r2, #5
 80032ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f0:	4850      	ldr	r0, [pc, #320]	; (8003434 <_svfiprintf_r+0x1e8>)
 80032f2:	f7fc ff75 	bl	80001e0 <memchr>
 80032f6:	9a04      	ldr	r2, [sp, #16]
 80032f8:	b9d8      	cbnz	r0, 8003332 <_svfiprintf_r+0xe6>
 80032fa:	06d0      	lsls	r0, r2, #27
 80032fc:	bf44      	itt	mi
 80032fe:	2320      	movmi	r3, #32
 8003300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003304:	0711      	lsls	r1, r2, #28
 8003306:	bf44      	itt	mi
 8003308:	232b      	movmi	r3, #43	; 0x2b
 800330a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800330e:	f89a 3000 	ldrb.w	r3, [sl]
 8003312:	2b2a      	cmp	r3, #42	; 0x2a
 8003314:	d015      	beq.n	8003342 <_svfiprintf_r+0xf6>
 8003316:	9a07      	ldr	r2, [sp, #28]
 8003318:	4654      	mov	r4, sl
 800331a:	2000      	movs	r0, #0
 800331c:	f04f 0c0a 	mov.w	ip, #10
 8003320:	4621      	mov	r1, r4
 8003322:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003326:	3b30      	subs	r3, #48	; 0x30
 8003328:	2b09      	cmp	r3, #9
 800332a:	d94d      	bls.n	80033c8 <_svfiprintf_r+0x17c>
 800332c:	b1b0      	cbz	r0, 800335c <_svfiprintf_r+0x110>
 800332e:	9207      	str	r2, [sp, #28]
 8003330:	e014      	b.n	800335c <_svfiprintf_r+0x110>
 8003332:	eba0 0308 	sub.w	r3, r0, r8
 8003336:	fa09 f303 	lsl.w	r3, r9, r3
 800333a:	4313      	orrs	r3, r2
 800333c:	9304      	str	r3, [sp, #16]
 800333e:	46a2      	mov	sl, r4
 8003340:	e7d2      	b.n	80032e8 <_svfiprintf_r+0x9c>
 8003342:	9b03      	ldr	r3, [sp, #12]
 8003344:	1d19      	adds	r1, r3, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	9103      	str	r1, [sp, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	bfbb      	ittet	lt
 800334e:	425b      	neglt	r3, r3
 8003350:	f042 0202 	orrlt.w	r2, r2, #2
 8003354:	9307      	strge	r3, [sp, #28]
 8003356:	9307      	strlt	r3, [sp, #28]
 8003358:	bfb8      	it	lt
 800335a:	9204      	strlt	r2, [sp, #16]
 800335c:	7823      	ldrb	r3, [r4, #0]
 800335e:	2b2e      	cmp	r3, #46	; 0x2e
 8003360:	d10c      	bne.n	800337c <_svfiprintf_r+0x130>
 8003362:	7863      	ldrb	r3, [r4, #1]
 8003364:	2b2a      	cmp	r3, #42	; 0x2a
 8003366:	d134      	bne.n	80033d2 <_svfiprintf_r+0x186>
 8003368:	9b03      	ldr	r3, [sp, #12]
 800336a:	1d1a      	adds	r2, r3, #4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	9203      	str	r2, [sp, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	bfb8      	it	lt
 8003374:	f04f 33ff 	movlt.w	r3, #4294967295
 8003378:	3402      	adds	r4, #2
 800337a:	9305      	str	r3, [sp, #20]
 800337c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003444 <_svfiprintf_r+0x1f8>
 8003380:	7821      	ldrb	r1, [r4, #0]
 8003382:	2203      	movs	r2, #3
 8003384:	4650      	mov	r0, sl
 8003386:	f7fc ff2b 	bl	80001e0 <memchr>
 800338a:	b138      	cbz	r0, 800339c <_svfiprintf_r+0x150>
 800338c:	9b04      	ldr	r3, [sp, #16]
 800338e:	eba0 000a 	sub.w	r0, r0, sl
 8003392:	2240      	movs	r2, #64	; 0x40
 8003394:	4082      	lsls	r2, r0
 8003396:	4313      	orrs	r3, r2
 8003398:	3401      	adds	r4, #1
 800339a:	9304      	str	r3, [sp, #16]
 800339c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033a0:	4825      	ldr	r0, [pc, #148]	; (8003438 <_svfiprintf_r+0x1ec>)
 80033a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033a6:	2206      	movs	r2, #6
 80033a8:	f7fc ff1a 	bl	80001e0 <memchr>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d038      	beq.n	8003422 <_svfiprintf_r+0x1d6>
 80033b0:	4b22      	ldr	r3, [pc, #136]	; (800343c <_svfiprintf_r+0x1f0>)
 80033b2:	bb1b      	cbnz	r3, 80033fc <_svfiprintf_r+0x1b0>
 80033b4:	9b03      	ldr	r3, [sp, #12]
 80033b6:	3307      	adds	r3, #7
 80033b8:	f023 0307 	bic.w	r3, r3, #7
 80033bc:	3308      	adds	r3, #8
 80033be:	9303      	str	r3, [sp, #12]
 80033c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033c2:	4433      	add	r3, r6
 80033c4:	9309      	str	r3, [sp, #36]	; 0x24
 80033c6:	e768      	b.n	800329a <_svfiprintf_r+0x4e>
 80033c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80033cc:	460c      	mov	r4, r1
 80033ce:	2001      	movs	r0, #1
 80033d0:	e7a6      	b.n	8003320 <_svfiprintf_r+0xd4>
 80033d2:	2300      	movs	r3, #0
 80033d4:	3401      	adds	r4, #1
 80033d6:	9305      	str	r3, [sp, #20]
 80033d8:	4619      	mov	r1, r3
 80033da:	f04f 0c0a 	mov.w	ip, #10
 80033de:	4620      	mov	r0, r4
 80033e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033e4:	3a30      	subs	r2, #48	; 0x30
 80033e6:	2a09      	cmp	r2, #9
 80033e8:	d903      	bls.n	80033f2 <_svfiprintf_r+0x1a6>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0c6      	beq.n	800337c <_svfiprintf_r+0x130>
 80033ee:	9105      	str	r1, [sp, #20]
 80033f0:	e7c4      	b.n	800337c <_svfiprintf_r+0x130>
 80033f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80033f6:	4604      	mov	r4, r0
 80033f8:	2301      	movs	r3, #1
 80033fa:	e7f0      	b.n	80033de <_svfiprintf_r+0x192>
 80033fc:	ab03      	add	r3, sp, #12
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	462a      	mov	r2, r5
 8003402:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <_svfiprintf_r+0x1f4>)
 8003404:	a904      	add	r1, sp, #16
 8003406:	4638      	mov	r0, r7
 8003408:	f3af 8000 	nop.w
 800340c:	1c42      	adds	r2, r0, #1
 800340e:	4606      	mov	r6, r0
 8003410:	d1d6      	bne.n	80033c0 <_svfiprintf_r+0x174>
 8003412:	89ab      	ldrh	r3, [r5, #12]
 8003414:	065b      	lsls	r3, r3, #25
 8003416:	f53f af2d 	bmi.w	8003274 <_svfiprintf_r+0x28>
 800341a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800341c:	b01d      	add	sp, #116	; 0x74
 800341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003422:	ab03      	add	r3, sp, #12
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	462a      	mov	r2, r5
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <_svfiprintf_r+0x1f4>)
 800342a:	a904      	add	r1, sp, #16
 800342c:	4638      	mov	r0, r7
 800342e:	f000 f879 	bl	8003524 <_printf_i>
 8003432:	e7eb      	b.n	800340c <_svfiprintf_r+0x1c0>
 8003434:	080038f4 	.word	0x080038f4
 8003438:	080038fe 	.word	0x080038fe
 800343c:	00000000 	.word	0x00000000
 8003440:	08003199 	.word	0x08003199
 8003444:	080038fa 	.word	0x080038fa

08003448 <_printf_common>:
 8003448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800344c:	4616      	mov	r6, r2
 800344e:	4699      	mov	r9, r3
 8003450:	688a      	ldr	r2, [r1, #8]
 8003452:	690b      	ldr	r3, [r1, #16]
 8003454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003458:	4293      	cmp	r3, r2
 800345a:	bfb8      	it	lt
 800345c:	4613      	movlt	r3, r2
 800345e:	6033      	str	r3, [r6, #0]
 8003460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003464:	4607      	mov	r7, r0
 8003466:	460c      	mov	r4, r1
 8003468:	b10a      	cbz	r2, 800346e <_printf_common+0x26>
 800346a:	3301      	adds	r3, #1
 800346c:	6033      	str	r3, [r6, #0]
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	0699      	lsls	r1, r3, #26
 8003472:	bf42      	ittt	mi
 8003474:	6833      	ldrmi	r3, [r6, #0]
 8003476:	3302      	addmi	r3, #2
 8003478:	6033      	strmi	r3, [r6, #0]
 800347a:	6825      	ldr	r5, [r4, #0]
 800347c:	f015 0506 	ands.w	r5, r5, #6
 8003480:	d106      	bne.n	8003490 <_printf_common+0x48>
 8003482:	f104 0a19 	add.w	sl, r4, #25
 8003486:	68e3      	ldr	r3, [r4, #12]
 8003488:	6832      	ldr	r2, [r6, #0]
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	42ab      	cmp	r3, r5
 800348e:	dc26      	bgt.n	80034de <_printf_common+0x96>
 8003490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003494:	1e13      	subs	r3, r2, #0
 8003496:	6822      	ldr	r2, [r4, #0]
 8003498:	bf18      	it	ne
 800349a:	2301      	movne	r3, #1
 800349c:	0692      	lsls	r2, r2, #26
 800349e:	d42b      	bmi.n	80034f8 <_printf_common+0xb0>
 80034a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034a4:	4649      	mov	r1, r9
 80034a6:	4638      	mov	r0, r7
 80034a8:	47c0      	blx	r8
 80034aa:	3001      	adds	r0, #1
 80034ac:	d01e      	beq.n	80034ec <_printf_common+0xa4>
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	6922      	ldr	r2, [r4, #16]
 80034b2:	f003 0306 	and.w	r3, r3, #6
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	bf02      	ittt	eq
 80034ba:	68e5      	ldreq	r5, [r4, #12]
 80034bc:	6833      	ldreq	r3, [r6, #0]
 80034be:	1aed      	subeq	r5, r5, r3
 80034c0:	68a3      	ldr	r3, [r4, #8]
 80034c2:	bf0c      	ite	eq
 80034c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034c8:	2500      	movne	r5, #0
 80034ca:	4293      	cmp	r3, r2
 80034cc:	bfc4      	itt	gt
 80034ce:	1a9b      	subgt	r3, r3, r2
 80034d0:	18ed      	addgt	r5, r5, r3
 80034d2:	2600      	movs	r6, #0
 80034d4:	341a      	adds	r4, #26
 80034d6:	42b5      	cmp	r5, r6
 80034d8:	d11a      	bne.n	8003510 <_printf_common+0xc8>
 80034da:	2000      	movs	r0, #0
 80034dc:	e008      	b.n	80034f0 <_printf_common+0xa8>
 80034de:	2301      	movs	r3, #1
 80034e0:	4652      	mov	r2, sl
 80034e2:	4649      	mov	r1, r9
 80034e4:	4638      	mov	r0, r7
 80034e6:	47c0      	blx	r8
 80034e8:	3001      	adds	r0, #1
 80034ea:	d103      	bne.n	80034f4 <_printf_common+0xac>
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f4:	3501      	adds	r5, #1
 80034f6:	e7c6      	b.n	8003486 <_printf_common+0x3e>
 80034f8:	18e1      	adds	r1, r4, r3
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	2030      	movs	r0, #48	; 0x30
 80034fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003502:	4422      	add	r2, r4
 8003504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800350c:	3302      	adds	r3, #2
 800350e:	e7c7      	b.n	80034a0 <_printf_common+0x58>
 8003510:	2301      	movs	r3, #1
 8003512:	4622      	mov	r2, r4
 8003514:	4649      	mov	r1, r9
 8003516:	4638      	mov	r0, r7
 8003518:	47c0      	blx	r8
 800351a:	3001      	adds	r0, #1
 800351c:	d0e6      	beq.n	80034ec <_printf_common+0xa4>
 800351e:	3601      	adds	r6, #1
 8003520:	e7d9      	b.n	80034d6 <_printf_common+0x8e>
	...

08003524 <_printf_i>:
 8003524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003528:	7e0f      	ldrb	r7, [r1, #24]
 800352a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800352c:	2f78      	cmp	r7, #120	; 0x78
 800352e:	4691      	mov	r9, r2
 8003530:	4680      	mov	r8, r0
 8003532:	460c      	mov	r4, r1
 8003534:	469a      	mov	sl, r3
 8003536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800353a:	d807      	bhi.n	800354c <_printf_i+0x28>
 800353c:	2f62      	cmp	r7, #98	; 0x62
 800353e:	d80a      	bhi.n	8003556 <_printf_i+0x32>
 8003540:	2f00      	cmp	r7, #0
 8003542:	f000 80d4 	beq.w	80036ee <_printf_i+0x1ca>
 8003546:	2f58      	cmp	r7, #88	; 0x58
 8003548:	f000 80c0 	beq.w	80036cc <_printf_i+0x1a8>
 800354c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003554:	e03a      	b.n	80035cc <_printf_i+0xa8>
 8003556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800355a:	2b15      	cmp	r3, #21
 800355c:	d8f6      	bhi.n	800354c <_printf_i+0x28>
 800355e:	a101      	add	r1, pc, #4	; (adr r1, 8003564 <_printf_i+0x40>)
 8003560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003564:	080035bd 	.word	0x080035bd
 8003568:	080035d1 	.word	0x080035d1
 800356c:	0800354d 	.word	0x0800354d
 8003570:	0800354d 	.word	0x0800354d
 8003574:	0800354d 	.word	0x0800354d
 8003578:	0800354d 	.word	0x0800354d
 800357c:	080035d1 	.word	0x080035d1
 8003580:	0800354d 	.word	0x0800354d
 8003584:	0800354d 	.word	0x0800354d
 8003588:	0800354d 	.word	0x0800354d
 800358c:	0800354d 	.word	0x0800354d
 8003590:	080036d5 	.word	0x080036d5
 8003594:	080035fd 	.word	0x080035fd
 8003598:	0800368f 	.word	0x0800368f
 800359c:	0800354d 	.word	0x0800354d
 80035a0:	0800354d 	.word	0x0800354d
 80035a4:	080036f7 	.word	0x080036f7
 80035a8:	0800354d 	.word	0x0800354d
 80035ac:	080035fd 	.word	0x080035fd
 80035b0:	0800354d 	.word	0x0800354d
 80035b4:	0800354d 	.word	0x0800354d
 80035b8:	08003697 	.word	0x08003697
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	602a      	str	r2, [r5, #0]
 80035c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035cc:	2301      	movs	r3, #1
 80035ce:	e09f      	b.n	8003710 <_printf_i+0x1ec>
 80035d0:	6820      	ldr	r0, [r4, #0]
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	0607      	lsls	r7, r0, #24
 80035d6:	f103 0104 	add.w	r1, r3, #4
 80035da:	6029      	str	r1, [r5, #0]
 80035dc:	d501      	bpl.n	80035e2 <_printf_i+0xbe>
 80035de:	681e      	ldr	r6, [r3, #0]
 80035e0:	e003      	b.n	80035ea <_printf_i+0xc6>
 80035e2:	0646      	lsls	r6, r0, #25
 80035e4:	d5fb      	bpl.n	80035de <_printf_i+0xba>
 80035e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035ea:	2e00      	cmp	r6, #0
 80035ec:	da03      	bge.n	80035f6 <_printf_i+0xd2>
 80035ee:	232d      	movs	r3, #45	; 0x2d
 80035f0:	4276      	negs	r6, r6
 80035f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035f6:	485a      	ldr	r0, [pc, #360]	; (8003760 <_printf_i+0x23c>)
 80035f8:	230a      	movs	r3, #10
 80035fa:	e012      	b.n	8003622 <_printf_i+0xfe>
 80035fc:	682b      	ldr	r3, [r5, #0]
 80035fe:	6820      	ldr	r0, [r4, #0]
 8003600:	1d19      	adds	r1, r3, #4
 8003602:	6029      	str	r1, [r5, #0]
 8003604:	0605      	lsls	r5, r0, #24
 8003606:	d501      	bpl.n	800360c <_printf_i+0xe8>
 8003608:	681e      	ldr	r6, [r3, #0]
 800360a:	e002      	b.n	8003612 <_printf_i+0xee>
 800360c:	0641      	lsls	r1, r0, #25
 800360e:	d5fb      	bpl.n	8003608 <_printf_i+0xe4>
 8003610:	881e      	ldrh	r6, [r3, #0]
 8003612:	4853      	ldr	r0, [pc, #332]	; (8003760 <_printf_i+0x23c>)
 8003614:	2f6f      	cmp	r7, #111	; 0x6f
 8003616:	bf0c      	ite	eq
 8003618:	2308      	moveq	r3, #8
 800361a:	230a      	movne	r3, #10
 800361c:	2100      	movs	r1, #0
 800361e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003622:	6865      	ldr	r5, [r4, #4]
 8003624:	60a5      	str	r5, [r4, #8]
 8003626:	2d00      	cmp	r5, #0
 8003628:	bfa2      	ittt	ge
 800362a:	6821      	ldrge	r1, [r4, #0]
 800362c:	f021 0104 	bicge.w	r1, r1, #4
 8003630:	6021      	strge	r1, [r4, #0]
 8003632:	b90e      	cbnz	r6, 8003638 <_printf_i+0x114>
 8003634:	2d00      	cmp	r5, #0
 8003636:	d04b      	beq.n	80036d0 <_printf_i+0x1ac>
 8003638:	4615      	mov	r5, r2
 800363a:	fbb6 f1f3 	udiv	r1, r6, r3
 800363e:	fb03 6711 	mls	r7, r3, r1, r6
 8003642:	5dc7      	ldrb	r7, [r0, r7]
 8003644:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003648:	4637      	mov	r7, r6
 800364a:	42bb      	cmp	r3, r7
 800364c:	460e      	mov	r6, r1
 800364e:	d9f4      	bls.n	800363a <_printf_i+0x116>
 8003650:	2b08      	cmp	r3, #8
 8003652:	d10b      	bne.n	800366c <_printf_i+0x148>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	07de      	lsls	r6, r3, #31
 8003658:	d508      	bpl.n	800366c <_printf_i+0x148>
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	6861      	ldr	r1, [r4, #4]
 800365e:	4299      	cmp	r1, r3
 8003660:	bfde      	ittt	le
 8003662:	2330      	movle	r3, #48	; 0x30
 8003664:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003668:	f105 35ff 	addle.w	r5, r5, #4294967295
 800366c:	1b52      	subs	r2, r2, r5
 800366e:	6122      	str	r2, [r4, #16]
 8003670:	f8cd a000 	str.w	sl, [sp]
 8003674:	464b      	mov	r3, r9
 8003676:	aa03      	add	r2, sp, #12
 8003678:	4621      	mov	r1, r4
 800367a:	4640      	mov	r0, r8
 800367c:	f7ff fee4 	bl	8003448 <_printf_common>
 8003680:	3001      	adds	r0, #1
 8003682:	d14a      	bne.n	800371a <_printf_i+0x1f6>
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	b004      	add	sp, #16
 800368a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	f043 0320 	orr.w	r3, r3, #32
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	4833      	ldr	r0, [pc, #204]	; (8003764 <_printf_i+0x240>)
 8003698:	2778      	movs	r7, #120	; 0x78
 800369a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	6829      	ldr	r1, [r5, #0]
 80036a2:	061f      	lsls	r7, r3, #24
 80036a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80036a8:	d402      	bmi.n	80036b0 <_printf_i+0x18c>
 80036aa:	065f      	lsls	r7, r3, #25
 80036ac:	bf48      	it	mi
 80036ae:	b2b6      	uxthmi	r6, r6
 80036b0:	07df      	lsls	r7, r3, #31
 80036b2:	bf48      	it	mi
 80036b4:	f043 0320 	orrmi.w	r3, r3, #32
 80036b8:	6029      	str	r1, [r5, #0]
 80036ba:	bf48      	it	mi
 80036bc:	6023      	strmi	r3, [r4, #0]
 80036be:	b91e      	cbnz	r6, 80036c8 <_printf_i+0x1a4>
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	f023 0320 	bic.w	r3, r3, #32
 80036c6:	6023      	str	r3, [r4, #0]
 80036c8:	2310      	movs	r3, #16
 80036ca:	e7a7      	b.n	800361c <_printf_i+0xf8>
 80036cc:	4824      	ldr	r0, [pc, #144]	; (8003760 <_printf_i+0x23c>)
 80036ce:	e7e4      	b.n	800369a <_printf_i+0x176>
 80036d0:	4615      	mov	r5, r2
 80036d2:	e7bd      	b.n	8003650 <_printf_i+0x12c>
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	6826      	ldr	r6, [r4, #0]
 80036d8:	6961      	ldr	r1, [r4, #20]
 80036da:	1d18      	adds	r0, r3, #4
 80036dc:	6028      	str	r0, [r5, #0]
 80036de:	0635      	lsls	r5, r6, #24
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	d501      	bpl.n	80036e8 <_printf_i+0x1c4>
 80036e4:	6019      	str	r1, [r3, #0]
 80036e6:	e002      	b.n	80036ee <_printf_i+0x1ca>
 80036e8:	0670      	lsls	r0, r6, #25
 80036ea:	d5fb      	bpl.n	80036e4 <_printf_i+0x1c0>
 80036ec:	8019      	strh	r1, [r3, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	6123      	str	r3, [r4, #16]
 80036f2:	4615      	mov	r5, r2
 80036f4:	e7bc      	b.n	8003670 <_printf_i+0x14c>
 80036f6:	682b      	ldr	r3, [r5, #0]
 80036f8:	1d1a      	adds	r2, r3, #4
 80036fa:	602a      	str	r2, [r5, #0]
 80036fc:	681d      	ldr	r5, [r3, #0]
 80036fe:	6862      	ldr	r2, [r4, #4]
 8003700:	2100      	movs	r1, #0
 8003702:	4628      	mov	r0, r5
 8003704:	f7fc fd6c 	bl	80001e0 <memchr>
 8003708:	b108      	cbz	r0, 800370e <_printf_i+0x1ea>
 800370a:	1b40      	subs	r0, r0, r5
 800370c:	6060      	str	r0, [r4, #4]
 800370e:	6863      	ldr	r3, [r4, #4]
 8003710:	6123      	str	r3, [r4, #16]
 8003712:	2300      	movs	r3, #0
 8003714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003718:	e7aa      	b.n	8003670 <_printf_i+0x14c>
 800371a:	6923      	ldr	r3, [r4, #16]
 800371c:	462a      	mov	r2, r5
 800371e:	4649      	mov	r1, r9
 8003720:	4640      	mov	r0, r8
 8003722:	47d0      	blx	sl
 8003724:	3001      	adds	r0, #1
 8003726:	d0ad      	beq.n	8003684 <_printf_i+0x160>
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	079b      	lsls	r3, r3, #30
 800372c:	d413      	bmi.n	8003756 <_printf_i+0x232>
 800372e:	68e0      	ldr	r0, [r4, #12]
 8003730:	9b03      	ldr	r3, [sp, #12]
 8003732:	4298      	cmp	r0, r3
 8003734:	bfb8      	it	lt
 8003736:	4618      	movlt	r0, r3
 8003738:	e7a6      	b.n	8003688 <_printf_i+0x164>
 800373a:	2301      	movs	r3, #1
 800373c:	4632      	mov	r2, r6
 800373e:	4649      	mov	r1, r9
 8003740:	4640      	mov	r0, r8
 8003742:	47d0      	blx	sl
 8003744:	3001      	adds	r0, #1
 8003746:	d09d      	beq.n	8003684 <_printf_i+0x160>
 8003748:	3501      	adds	r5, #1
 800374a:	68e3      	ldr	r3, [r4, #12]
 800374c:	9903      	ldr	r1, [sp, #12]
 800374e:	1a5b      	subs	r3, r3, r1
 8003750:	42ab      	cmp	r3, r5
 8003752:	dcf2      	bgt.n	800373a <_printf_i+0x216>
 8003754:	e7eb      	b.n	800372e <_printf_i+0x20a>
 8003756:	2500      	movs	r5, #0
 8003758:	f104 0619 	add.w	r6, r4, #25
 800375c:	e7f5      	b.n	800374a <_printf_i+0x226>
 800375e:	bf00      	nop
 8003760:	08003905 	.word	0x08003905
 8003764:	08003916 	.word	0x08003916

08003768 <memmove>:
 8003768:	4288      	cmp	r0, r1
 800376a:	b510      	push	{r4, lr}
 800376c:	eb01 0402 	add.w	r4, r1, r2
 8003770:	d902      	bls.n	8003778 <memmove+0x10>
 8003772:	4284      	cmp	r4, r0
 8003774:	4623      	mov	r3, r4
 8003776:	d807      	bhi.n	8003788 <memmove+0x20>
 8003778:	1e43      	subs	r3, r0, #1
 800377a:	42a1      	cmp	r1, r4
 800377c:	d008      	beq.n	8003790 <memmove+0x28>
 800377e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003786:	e7f8      	b.n	800377a <memmove+0x12>
 8003788:	4402      	add	r2, r0
 800378a:	4601      	mov	r1, r0
 800378c:	428a      	cmp	r2, r1
 800378e:	d100      	bne.n	8003792 <memmove+0x2a>
 8003790:	bd10      	pop	{r4, pc}
 8003792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800379a:	e7f7      	b.n	800378c <memmove+0x24>

0800379c <_sbrk_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4d06      	ldr	r5, [pc, #24]	; (80037b8 <_sbrk_r+0x1c>)
 80037a0:	2300      	movs	r3, #0
 80037a2:	4604      	mov	r4, r0
 80037a4:	4608      	mov	r0, r1
 80037a6:	602b      	str	r3, [r5, #0]
 80037a8:	f7fd fabe 	bl	8000d28 <_sbrk>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_sbrk_r+0x1a>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_sbrk_r+0x1a>
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	20000280 	.word	0x20000280

080037bc <memcpy>:
 80037bc:	440a      	add	r2, r1
 80037be:	4291      	cmp	r1, r2
 80037c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037c4:	d100      	bne.n	80037c8 <memcpy+0xc>
 80037c6:	4770      	bx	lr
 80037c8:	b510      	push	{r4, lr}
 80037ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d2:	4291      	cmp	r1, r2
 80037d4:	d1f9      	bne.n	80037ca <memcpy+0xe>
 80037d6:	bd10      	pop	{r4, pc}

080037d8 <_realloc_r>:
 80037d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037dc:	4680      	mov	r8, r0
 80037de:	4614      	mov	r4, r2
 80037e0:	460e      	mov	r6, r1
 80037e2:	b921      	cbnz	r1, 80037ee <_realloc_r+0x16>
 80037e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037e8:	4611      	mov	r1, r2
 80037ea:	f7ff bc49 	b.w	8003080 <_malloc_r>
 80037ee:	b92a      	cbnz	r2, 80037fc <_realloc_r+0x24>
 80037f0:	f7ff fbda 	bl	8002fa8 <_free_r>
 80037f4:	4625      	mov	r5, r4
 80037f6:	4628      	mov	r0, r5
 80037f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037fc:	f000 f81b 	bl	8003836 <_malloc_usable_size_r>
 8003800:	4284      	cmp	r4, r0
 8003802:	4607      	mov	r7, r0
 8003804:	d802      	bhi.n	800380c <_realloc_r+0x34>
 8003806:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800380a:	d812      	bhi.n	8003832 <_realloc_r+0x5a>
 800380c:	4621      	mov	r1, r4
 800380e:	4640      	mov	r0, r8
 8003810:	f7ff fc36 	bl	8003080 <_malloc_r>
 8003814:	4605      	mov	r5, r0
 8003816:	2800      	cmp	r0, #0
 8003818:	d0ed      	beq.n	80037f6 <_realloc_r+0x1e>
 800381a:	42bc      	cmp	r4, r7
 800381c:	4622      	mov	r2, r4
 800381e:	4631      	mov	r1, r6
 8003820:	bf28      	it	cs
 8003822:	463a      	movcs	r2, r7
 8003824:	f7ff ffca 	bl	80037bc <memcpy>
 8003828:	4631      	mov	r1, r6
 800382a:	4640      	mov	r0, r8
 800382c:	f7ff fbbc 	bl	8002fa8 <_free_r>
 8003830:	e7e1      	b.n	80037f6 <_realloc_r+0x1e>
 8003832:	4635      	mov	r5, r6
 8003834:	e7df      	b.n	80037f6 <_realloc_r+0x1e>

08003836 <_malloc_usable_size_r>:
 8003836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800383a:	1f18      	subs	r0, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	bfbc      	itt	lt
 8003840:	580b      	ldrlt	r3, [r1, r0]
 8003842:	18c0      	addlt	r0, r0, r3
 8003844:	4770      	bx	lr
	...

08003848 <_init>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	bf00      	nop
 800384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384e:	bc08      	pop	{r3}
 8003850:	469e      	mov	lr, r3
 8003852:	4770      	bx	lr

08003854 <_fini>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	bf00      	nop
 8003858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385a:	bc08      	pop	{r3}
 800385c:	469e      	mov	lr, r3
 800385e:	4770      	bx	lr
