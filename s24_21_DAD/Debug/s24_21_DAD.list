
s24_21_DAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc8  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c094  0800c094  0001c094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c0d4  0800c0d4  0001c0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c0dc  0800c0dc  0001c0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c0e0  0800c0e0  0001c0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800c0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800c0f8  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800c158  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  240000d8  0800c1b8  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000740  0800c1b8  00020740  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cae1  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bb9  00000000  00000000  0003cc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010af  00000000  00000000  00040d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034a5f  00000000  00000000  00041dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb37  00000000  00000000  00076826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00157e2d  00000000  00000000  0009235d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c38  00000000  00000000  001ea18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001efdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d8 	.word	0x240000d8
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800c07c 	.word	0x0800c07c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000dc 	.word	0x240000dc
 8000308:	0800c07c 	.word	0x0800c07c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 fbe2 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f82a 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fb10 	bl	8000c38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 faee 	bl	8000bf8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800061c:	f000 fa4c 	bl	8000ab8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000620:	f000 fae2 	bl	8000be8 <MX_USB_OTG_HS_USB_Init>
  MX_USART1_UART_Init();
 8000624:	f000 f9b0 	bl	8000988 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000628:	f000 f9fa 	bl	8000a20 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800062c:	f000 fa90 	bl	8000b50 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000630:	f000 f8d6 	bl	80007e0 <MX_SPI1_Init>
  MX_SPI5_Init();
 8000634:	f000 f92a 	bl	800088c <MX_SPI5_Init>
  MX_ETH_Init();
 8000638:	f000 f886 	bl	8000748 <MX_ETH_Init>
  MX_TIM16_Init();
 800063c:	f000 f97c 	bl	8000938 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, rx_data2, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	4905      	ldr	r1, [pc, #20]	; (8000658 <main+0x50>)
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <main+0x54>)
 8000646:	f009 f899 	bl	800977c <HAL_UART_Receive_IT>


  //HAL_UART_Receive_IT(&huart1, rx_data1, 1);
  //HAL_UART_Receive_IT(&huart2, rx_data2, 1);
  //HAL_UART_Receive_IT(&huart3, rx_data3, 1);
  HAL_UART_Receive_IT(&huart6, rx_data6, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	4904      	ldr	r1, [pc, #16]	; (8000660 <main+0x58>)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <main+0x5c>)
 8000650:	f009 f894 	bl	800977c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0x4c>
 8000656:	bf00      	nop
 8000658:	24000634 	.word	0x24000634
 800065c:	24000444 	.word	0x24000444
 8000660:	24000694 	.word	0x24000694
 8000664:	2400056c 	.word	0x2400056c

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b09c      	sub	sp, #112	; 0x70
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000672:	224c      	movs	r2, #76	; 0x4c
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f00b fcd4 	bl	800c024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2220      	movs	r2, #32
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f00b fcce 	bl	800c024 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000688:	2002      	movs	r0, #2
 800068a:	f005 f9ad 	bl	80059e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <SystemClock_Config+0xdc>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a2b      	ldr	r2, [pc, #172]	; (8000744 <SystemClock_Config+0xdc>)
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <SystemClock_Config+0xdc>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006aa:	bf00      	nop
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xdc>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b8:	d1f8      	bne.n	80006ac <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006ba:	2321      	movs	r3, #33	; 0x21
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006be:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006d4:	f240 1313 	movw	r3, #275	; 0x113
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006de:	2304      	movs	r3, #4
 80006e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006e6:	2304      	movs	r3, #4
 80006e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 f9b0 	bl	8005a5c <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000702:	f000 fe73 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	233f      	movs	r3, #63	; 0x3f
 8000708:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2303      	movs	r3, #3
 800070c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000712:	2308      	movs	r3, #8
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000716:	2340      	movs	r3, #64	; 0x40
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800071a:	2340      	movs	r3, #64	; 0x40
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800071e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000724:	2340      	movs	r3, #64	; 0x40
 8000726:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2103      	movs	r1, #3
 800072c:	4618      	mov	r0, r3
 800072e:	f005 fd6f 	bl	8006210 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000738:	f000 fe58 	bl	80013ec <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3770      	adds	r7, #112	; 0x70
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	58024800 	.word	0x58024800

08000748 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_ETH_Init+0x80>)
 800074e:	4a1f      	ldr	r2, [pc, #124]	; (80007cc <MX_ETH_Init+0x84>)
 8000750:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_ETH_Init+0x88>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_ETH_Init+0x88>)
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_ETH_Init+0x88>)
 8000760:	22e1      	movs	r2, #225	; 0xe1
 8000762:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_ETH_Init+0x88>)
 8000766:	2200      	movs	r2, #0
 8000768:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_ETH_Init+0x88>)
 800076c:	2200      	movs	r2, #0
 800076e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_ETH_Init+0x88>)
 8000772:	2200      	movs	r2, #0
 8000774:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ETH_Init+0x80>)
 8000778:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_ETH_Init+0x88>)
 800077a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ETH_Init+0x80>)
 800077e:	2201      	movs	r2, #1
 8000780:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ETH_Init+0x80>)
 8000784:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_ETH_Init+0x8c>)
 8000786:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ETH_Init+0x80>)
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_ETH_Init+0x90>)
 800078c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_ETH_Init+0x80>)
 8000790:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000794:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_ETH_Init+0x80>)
 8000798:	f004 fb16 	bl	8004dc8 <HAL_ETH_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007a2:	f000 fe23 	bl	80013ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a6:	2238      	movs	r2, #56	; 0x38
 80007a8:	2100      	movs	r1, #0
 80007aa:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_ETH_Init+0x94>)
 80007ac:	f00b fc3a 	bl	800c024 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_ETH_Init+0x94>)
 80007b2:	2221      	movs	r2, #33	; 0x21
 80007b4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_ETH_Init+0x94>)
 80007b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007bc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_ETH_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2400012c 	.word	0x2400012c
 80007cc:	40028000 	.word	0x40028000
 80007d0:	24000734 	.word	0x24000734
 80007d4:	24000074 	.word	0x24000074
 80007d8:	24000014 	.word	0x24000014
 80007dc:	240000f4 	.word	0x240000f4

080007e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <MX_SPI1_Init+0xa4>)
 80007e6:	4a28      	ldr	r2, [pc, #160]	; (8000888 <MX_SPI1_Init+0xa8>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_SPI1_Init+0xa4>)
 80007ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b24      	ldr	r3, [pc, #144]	; (8000884 <MX_SPI1_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_SPI1_Init+0xa4>)
 80007fa:	2207      	movs	r2, #7
 80007fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_SPI1_Init+0xa4>)
 800080c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000810:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000814:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000818:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_SPI1_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_SPI1_Init+0xa4>)
 800082e:	2200      	movs	r2, #0
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_SPI1_Init+0xa4>)
 800083c:	2200      	movs	r2, #0
 800083e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_SPI1_Init+0xa4>)
 800084e:	2200      	movs	r2, #0
 8000850:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_SPI1_Init+0xa4>)
 800085a:	2200      	movs	r2, #0
 800085c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000860:	2200      	movs	r2, #0
 8000862:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000866:	2200      	movs	r2, #0
 8000868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_SPI1_Init+0xa4>)
 800086c:	2200      	movs	r2, #0
 800086e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_SPI1_Init+0xa4>)
 8000872:	f007 fe1b 	bl	80084ac <HAL_SPI_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800087c:	f000 fdb6 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	240001dc 	.word	0x240001dc
 8000888:	40013000 	.word	0x40013000

0800088c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_SPI5_Init+0xa4>)
 8000892:	4a28      	ldr	r2, [pc, #160]	; (8000934 <MX_SPI5_Init+0xa8>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_SPI5_Init+0xa4>)
 8000898:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800089c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008a6:	2207      	movs	r2, #7
 80008a8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008bc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008c0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80008c4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_SPI5_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_SPI5_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_SPI5_Init+0xa4>)
 8000906:	2200      	movs	r2, #0
 8000908:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_SPI5_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_SPI5_Init+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_SPI5_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_SPI5_Init+0xa4>)
 800091e:	f007 fdc5 	bl	80084ac <HAL_SPI_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8000928:	f000 fd60 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	24000264 	.word	0x24000264
 8000934:	40015000 	.word	0x40015000

08000938 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_TIM16_Init+0x48>)
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <MX_TIM16_Init+0x4c>)
 8000940:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_TIM16_Init+0x48>)
 8000944:	f240 2226 	movw	r2, #550	; 0x226
 8000948:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_TIM16_Init+0x48>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_TIM16_Init+0x48>)
 8000952:	f242 7210 	movw	r2, #10000	; 0x2710
 8000956:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_TIM16_Init+0x48>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_TIM16_Init+0x48>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_TIM16_Init+0x48>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_TIM16_Init+0x48>)
 800096c:	f008 fc5f 	bl	800922e <HAL_TIM_Base_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000976:	f000 fd39 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	24000364 	.word	0x24000364
 8000984:	40014400 	.word	0x40014400

08000988 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 800098e:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 8000990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009d2:	f008 fe83 	bl	80096dc <HAL_UART_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009dc:	f000 fd06 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009e4:	f00b fa53 	bl	800be8e <HAL_UARTEx_SetTxFifoThreshold>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ee:	f000 fcfd 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4808      	ldr	r0, [pc, #32]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 80009f6:	f00b fa88 	bl	800bf0a <HAL_UARTEx_SetRxFifoThreshold>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a00:	f000 fcf4 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_USART1_UART_Init+0x90>)
 8000a06:	f00b fa09 	bl	800be1c <HAL_UARTEx_DisableFifoMode>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a10:	f000 fcec 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	240003b0 	.word	0x240003b0
 8000a1c:	40011000 	.word	0x40011000

08000a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a26:	4a23      	ldr	r2, [pc, #140]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a68:	4811      	ldr	r0, [pc, #68]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a6a:	f008 fe37 	bl	80096dc <HAL_UART_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a74:	f000 fcba 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a7c:	f00b fa07 	bl	800be8e <HAL_UARTEx_SetTxFifoThreshold>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a86:	f000 fcb1 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a8e:	f00b fa3c 	bl	800bf0a <HAL_UARTEx_SetRxFifoThreshold>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a98:	f000 fca8 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a9e:	f00b f9bd 	bl	800be1c <HAL_UARTEx_DisableFifoMode>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa8:	f000 fca0 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	24000444 	.word	0x24000444
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <MX_USART3_UART_Init+0x94>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b02:	f008 fdeb 	bl	80096dc <HAL_UART_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 fc6e 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b14:	f00b f9bb 	bl	800be8e <HAL_UARTEx_SetTxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f000 fc65 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b26:	f00b f9f0 	bl	800bf0a <HAL_UARTEx_SetRxFifoThreshold>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 fc5c 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b36:	f00b f971 	bl	800be1c <HAL_UARTEx_DisableFifoMode>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 fc54 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	240004d8 	.word	0x240004d8
 8000b4c:	40004800 	.word	0x40004800

08000b50 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <MX_USART6_UART_Init+0x94>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000b9a:	f008 fd9f 	bl	80096dc <HAL_UART_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000ba4:	f000 fc22 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000bac:	f00b f96f 	bl	800be8e <HAL_UARTEx_SetTxFifoThreshold>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000bb6:	f000 fc19 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000bbe:	f00b f9a4 	bl	800bf0a <HAL_UARTEx_SetRxFifoThreshold>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000bc8:	f000 fc10 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_USART6_UART_Init+0x90>)
 8000bce:	f00b f925 	bl	800be1c <HAL_UARTEx_DisableFifoMode>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000bd8:	f000 fc08 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2400056c 	.word	0x2400056c
 8000be4:	40011400 	.word	0x40011400

08000be8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MX_DMA_Init+0x3c>)
 8000c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <MX_DMA_Init+0x3c>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_DMA_Init+0x3c>)
 8000c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	200b      	movs	r0, #11
 8000c22:	f001 fa58 	bl	80020d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c26:	200b      	movs	r0, #11
 8000c28:	f001 fa6f 	bl	800210a <HAL_NVIC_EnableIRQ>

}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	58024400 	.word	0x58024400

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	; 0x38
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4e:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	4a76      	ldr	r2, [pc, #472]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5e:	4b74      	ldr	r3, [pc, #464]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	f003 0310 	and.w	r3, r3, #16
 8000c68:	623b      	str	r3, [r7, #32]
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	4b70      	ldr	r3, [pc, #448]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	4a6f      	ldr	r2, [pc, #444]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7c:	4b6c      	ldr	r3, [pc, #432]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	61fb      	str	r3, [r7, #28]
 8000c88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c8a:	4b69      	ldr	r3, [pc, #420]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a67      	ldr	r2, [pc, #412]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000c92:	f043 0320 	orr.w	r3, r3, #32
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b65      	ldr	r3, [pc, #404]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0320 	and.w	r3, r3, #32
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca8:	4b61      	ldr	r3, [pc, #388]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	4a60      	ldr	r2, [pc, #384]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb8:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b5a      	ldr	r3, [pc, #360]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	4a58      	ldr	r2, [pc, #352]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd6:	4b56      	ldr	r3, [pc, #344]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b52      	ldr	r3, [pc, #328]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	4a51      	ldr	r2, [pc, #324]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf4:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d02:	4b4b      	ldr	r3, [pc, #300]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	4a49      	ldr	r2, [pc, #292]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000d0a:	f043 0308 	orr.w	r3, r3, #8
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d12:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d20:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	4a42      	ldr	r2, [pc, #264]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d30:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <MX_GPIO_Init+0x1f8>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2112      	movs	r1, #18
 8000d42:	483c      	ldr	r0, [pc, #240]	; (8000e34 <MX_GPIO_Init+0x1fc>)
 8000d44:	f004 fe1c 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d4e:	483a      	ldr	r0, [pc, #232]	; (8000e38 <MX_GPIO_Init+0x200>)
 8000d50:	f004 fe16 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5a:	4838      	ldr	r0, [pc, #224]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000d5c:	f004 fe10 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LED_YELLOW_Pin;
 8000d60:	2312      	movs	r3, #18
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	482f      	ldr	r0, [pc, #188]	; (8000e34 <MX_GPIO_Init+0x1fc>)
 8000d78:	f004 fc5a 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	482b      	ldr	r0, [pc, #172]	; (8000e40 <MX_GPIO_Init+0x208>)
 8000d92:	f004 fc4d 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin PB7 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|GPIO_PIN_7;
 8000d96:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4822      	ldr	r0, [pc, #136]	; (8000e38 <MX_GPIO_Init+0x200>)
 8000db0:	f004 fc3e 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000dce:	f004 fc2f 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4817      	ldr	r0, [pc, #92]	; (8000e44 <MX_GPIO_Init+0x20c>)
 8000de8:	f004 fc22 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_GPIO_Init+0x210>)
 8000e02:	f004 fc15 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e18:	230a      	movs	r3, #10
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4809      	ldr	r0, [pc, #36]	; (8000e48 <MX_GPIO_Init+0x210>)
 8000e24:	f004 fc04 	bl	8005630 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e28:	bf00      	nop
 8000e2a:	3738      	adds	r7, #56	; 0x38
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	58024400 	.word	0x58024400
 8000e34:	58021000 	.word	0x58021000
 8000e38:	58020400 	.word	0x58020400
 8000e3c:	58020c00 	.word	0x58020c00
 8000e40:	58020800 	.word	0x58020800
 8000e44:	58021800 	.word	0x58021800
 8000e48:	58020000 	.word	0x58020000

08000e4c <GetFifo6>:
    return 1;

}


int GetFifo6(SensorDataPacket* data) {
 8000e4c:	b4b0      	push	{r4, r5, r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

    if (GetPt6 == PutPt6) {
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <GetFifo6+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <GetFifo6+0x58>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d101      	bne.n	8000e64 <GetFifo6+0x18>

        return 0; // buffer is empty
 8000e60:	2300      	movs	r3, #0
 8000e62:	e017      	b.n	8000e94 <GetFifo6+0x48>
    }
    //data pointer gets pointed to the next GetPointer
    *data = *(GetPt6++);
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <GetFifo6+0x54>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f103 0218 	add.w	r2, r3, #24
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <GetFifo6+0x54>)
 8000e6e:	600a      	str	r2, [r1, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4614      	mov	r4, r2
 8000e74:	461d      	mov	r5, r3
 8000e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e7e:	e884 0003 	stmia.w	r4, {r0, r1}
    if (GetPt6 == &Fifo6[FIFO_SIZE]) {
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <GetFifo6+0x54>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <GetFifo6+0x5c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d102      	bne.n	8000e92 <GetFifo6+0x46>

        GetPt6 = &Fifo6[0];
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <GetFifo6+0x54>)
 8000e8e:	4a07      	ldr	r2, [pc, #28]	; (8000eac <GetFifo6+0x60>)
 8000e90:	601a      	str	r2, [r3, #0]
    }
    return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bcb0      	pop	{r4, r5, r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	240006c8 	.word	0x240006c8
 8000ea4:	240006c4 	.word	0x240006c4
 8000ea8:	24000730 	.word	0x24000730
 8000eac:	240006d0 	.word	0x240006d0

08000eb0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09c      	sub	sp, #112	; 0x70
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	__NOP();
 8000eb8:	bf00      	nop

	if (htim == &htim16)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d15a      	bne.n	8000f78 <HAL_TIM_PeriodElapsedCallback+0xc8>
	{

		timer_counter++;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ecc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
		HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&data1, sizeof(data1));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
		*/
		//SensorDataPacket data3[220];
		for(int i = 0; i < 4; i++){
 8000ece:	2300      	movs	r3, #0
 8000ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000ed2:	e00d      	b.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x40>
			GetFifo6(&data1[i]);
 8000ed4:	f107 0108 	add.w	r1, r7, #8
 8000ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ffb1 	bl	8000e4c <GetFifo6>
		for(int i = 0; i < 4; i++){
 8000eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000eec:	3301      	adds	r3, #1
 8000eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	ddee      	ble.n	8000ed4 <HAL_TIM_PeriodElapsedCallback+0x24>

		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	4823      	ldr	r0, [pc, #140]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000efc:	f004 fd40 	bl	8005980 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&data1, sizeof(data1));
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	2260      	movs	r2, #96	; 0x60
 8000f06:	4619      	mov	r1, r3
 8000f08:	4820      	ldr	r0, [pc, #128]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000f0a:	f007 fc9d 	bl	8008848 <HAL_SPI_Transmit_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	481d      	ldr	r0, [pc, #116]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000f14:	f004 fd34 	bl	8005980 <HAL_GPIO_WritePin>



		//SensorDataPacket data6[220];
		for(int i = 0; i < 220; i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f1c:	e00d      	b.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x8a>
			GetFifo6(&data1[i]);
 8000f1e:	f107 0108 	add.w	r1, r7, #8
 8000f22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff8c 	bl	8000e4c <GetFifo6>
		for(int i = 0; i < 220; i++){
 8000f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f36:	3301      	adds	r3, #1
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	2bdb      	cmp	r3, #219	; 0xdb
 8000f3e:	ddee      	ble.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x6e>

		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000f46:	f004 fd1b 	bl	8005980 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&data1, sizeof(data1));
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2260      	movs	r2, #96	; 0x60
 8000f50:	4619      	mov	r1, r3
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000f54:	f007 fc78 	bl	8008848 <HAL_SPI_Transmit_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	480a      	ldr	r0, [pc, #40]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000f5e:	f004 fd0f 	bl	8005980 <HAL_GPIO_WritePin>
		if(timer_counter == 25){
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b19      	cmp	r3, #25
 8000f68:	d106      	bne.n	8000f78 <HAL_TIM_PeriodElapsedCallback+0xc8>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); //yellow
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	4808      	ldr	r0, [pc, #32]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000f6e:	f004 fd20 	bl	80059b2 <HAL_GPIO_TogglePin>
			timer_counter = 0;
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	}




}
 8000f78:	bf00      	nop
 8000f7a:	3770      	adds	r7, #112	; 0x70
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	24000364 	.word	0x24000364
 8000f84:	24000730 	.word	0x24000730
 8000f88:	58020400 	.word	0x58020400
 8000f8c:	240001dc 	.word	0x240001dc
 8000f90:	58021000 	.word	0x58021000

08000f94 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	__NOP();
 8000f9c:	bf00      	nop

	if(hspi->Instance == SPI1){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_SPI_TxCpltCallback+0x58>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d111      	bne.n	8000fcc <HAL_SPI_TxCpltCallback+0x38>
		test_timer++;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_SPI_TxCpltCallback+0x5c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_SPI_TxCpltCallback+0x5c>)
 8000fb2:	701a      	strb	r2, [r3, #0]
		if(test_timer == 10)
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_SPI_TxCpltCallback+0x5c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b0a      	cmp	r3, #10
 8000fba:	d113      	bne.n	8000fe4 <HAL_SPI_TxCpltCallback+0x50>
		{
			test_timer = 0;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_SPI_TxCpltCallback+0x5c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //green
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <HAL_SPI_TxCpltCallback+0x60>)
 8000fc6:	f004 fcf4 	bl	80059b2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); //yellow
	}



}
 8000fca:	e00b      	b.n	8000fe4 <HAL_SPI_TxCpltCallback+0x50>
	else if (hspi->Instance == SPI5){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <HAL_SPI_TxCpltCallback+0x64>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d106      	bne.n	8000fe4 <HAL_SPI_TxCpltCallback+0x50>
		spiReady = true; // Set the flag to indicate SPI is ready for the next transmission
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_SPI_TxCpltCallback+0x68>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); //yellow
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4808      	ldr	r0, [pc, #32]	; (8001000 <HAL_SPI_TxCpltCallback+0x6c>)
 8000fe0:	f004 fce7 	bl	80059b2 <HAL_GPIO_TogglePin>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013000 	.word	0x40013000
 8000ff0:	24000731 	.word	0x24000731
 8000ff4:	58020400 	.word	0x58020400
 8000ff8:	40015000 	.word	0x40015000
 8000ffc:	24000000 	.word	0x24000000
 8001000:	58021000 	.word	0x58021000

08001004 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af04      	add	r7, sp, #16
 800100a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a39      	ldr	r2, [pc, #228]	; (80010f8 <HAL_UART_RxCpltCallback+0xf4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10c      	bne.n	8001030 <HAL_UART_RxCpltCallback+0x2c>
        // Process data from USART1
    	processUartData(huart, &sensorData1, rx_data1, &uartState1, &timestampBuffer1, &dataBuffer1, &dataIndex1);
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <HAL_UART_RxCpltCallback+0xf8>)
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	4b39      	ldr	r3, [pc, #228]	; (8001100 <HAL_UART_RxCpltCallback+0xfc>)
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <HAL_UART_RxCpltCallback+0x100>)
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4b39      	ldr	r3, [pc, #228]	; (8001108 <HAL_UART_RxCpltCallback+0x104>)
 8001024:	4a39      	ldr	r2, [pc, #228]	; (800110c <HAL_UART_RxCpltCallback+0x108>)
 8001026:	493a      	ldr	r1, [pc, #232]	; (8001110 <HAL_UART_RxCpltCallback+0x10c>)
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f8a5 	bl	8001178 <processUartData>
 800102e:	e034      	b.n	800109a <HAL_UART_RxCpltCallback+0x96>
    }
    else if(huart->Instance == USART2) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a37      	ldr	r2, [pc, #220]	; (8001114 <HAL_UART_RxCpltCallback+0x110>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d10c      	bne.n	8001054 <HAL_UART_RxCpltCallback+0x50>
        // Process data from USART2
    	processUartData(huart, &sensorData2, rx_data2, &uartState2, &timestampBuffer2, &dataBuffer2, &dataIndex2);
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <HAL_UART_RxCpltCallback+0x114>)
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <HAL_UART_RxCpltCallback+0x118>)
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HAL_UART_RxCpltCallback+0x11c>)
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	4b37      	ldr	r3, [pc, #220]	; (8001124 <HAL_UART_RxCpltCallback+0x120>)
 8001048:	4a37      	ldr	r2, [pc, #220]	; (8001128 <HAL_UART_RxCpltCallback+0x124>)
 800104a:	4938      	ldr	r1, [pc, #224]	; (800112c <HAL_UART_RxCpltCallback+0x128>)
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f893 	bl	8001178 <processUartData>
 8001052:	e022      	b.n	800109a <HAL_UART_RxCpltCallback+0x96>
    }
    else if(huart->Instance == USART3) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a35      	ldr	r2, [pc, #212]	; (8001130 <HAL_UART_RxCpltCallback+0x12c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10c      	bne.n	8001078 <HAL_UART_RxCpltCallback+0x74>
        // Process data from USART2
    	processUartData(huart, &sensorData3, rx_data3, &uartState3, &timestampBuffer3, &dataBuffer3, &dataIndex3);
 800105e:	4b35      	ldr	r3, [pc, #212]	; (8001134 <HAL_UART_RxCpltCallback+0x130>)
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <HAL_UART_RxCpltCallback+0x134>)
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	4b35      	ldr	r3, [pc, #212]	; (800113c <HAL_UART_RxCpltCallback+0x138>)
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <HAL_UART_RxCpltCallback+0x13c>)
 800106c:	4a35      	ldr	r2, [pc, #212]	; (8001144 <HAL_UART_RxCpltCallback+0x140>)
 800106e:	4936      	ldr	r1, [pc, #216]	; (8001148 <HAL_UART_RxCpltCallback+0x144>)
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f881 	bl	8001178 <processUartData>
 8001076:	e010      	b.n	800109a <HAL_UART_RxCpltCallback+0x96>
    }

    else if(huart->Instance == USART6) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a33      	ldr	r2, [pc, #204]	; (800114c <HAL_UART_RxCpltCallback+0x148>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10b      	bne.n	800109a <HAL_UART_RxCpltCallback+0x96>
        // Process data from USART2
    	processUartData(huart, &sensorData6, rx_data6, &uartState6, &timestampBuffer6, &dataBuffer6, &dataIndex6);
 8001082:	4b33      	ldr	r3, [pc, #204]	; (8001150 <HAL_UART_RxCpltCallback+0x14c>)
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_UART_RxCpltCallback+0x150>)
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	4b33      	ldr	r3, [pc, #204]	; (8001158 <HAL_UART_RxCpltCallback+0x154>)
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_UART_RxCpltCallback+0x158>)
 8001090:	4a33      	ldr	r2, [pc, #204]	; (8001160 <HAL_UART_RxCpltCallback+0x15c>)
 8001092:	4934      	ldr	r1, [pc, #208]	; (8001164 <HAL_UART_RxCpltCallback+0x160>)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f86f 	bl	8001178 <processUartData>
    }

    // Re-enable UART reception interrupt correctly for each port
    if (huart->Instance == USART1) {
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a16      	ldr	r2, [pc, #88]	; (80010f8 <HAL_UART_RxCpltCallback+0xf4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d105      	bne.n	80010b0 <HAL_UART_RxCpltCallback+0xac>
        HAL_UART_Receive_IT(&huart1, rx_data1, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	4919      	ldr	r1, [pc, #100]	; (800110c <HAL_UART_RxCpltCallback+0x108>)
 80010a8:	482f      	ldr	r0, [pc, #188]	; (8001168 <HAL_UART_RxCpltCallback+0x164>)
 80010aa:	f008 fb67 	bl	800977c <HAL_UART_Receive_IT>
    	HAL_UART_Receive_IT(&huart3, rx_data3, 1);
    }
    else if (huart->Instance == USART6) {
    	HAL_UART_Receive_IT(&huart6, rx_data6, 1);
    }
}
 80010ae:	e01f      	b.n	80010f0 <HAL_UART_RxCpltCallback+0xec>
    else if (huart->Instance == USART2) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_UART_RxCpltCallback+0x110>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d105      	bne.n	80010c6 <HAL_UART_RxCpltCallback+0xc2>
        HAL_UART_Receive_IT(&huart2, rx_data2, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	491a      	ldr	r1, [pc, #104]	; (8001128 <HAL_UART_RxCpltCallback+0x124>)
 80010be:	482b      	ldr	r0, [pc, #172]	; (800116c <HAL_UART_RxCpltCallback+0x168>)
 80010c0:	f008 fb5c 	bl	800977c <HAL_UART_Receive_IT>
}
 80010c4:	e014      	b.n	80010f0 <HAL_UART_RxCpltCallback+0xec>
    else if (huart->Instance == USART3) {
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_UART_RxCpltCallback+0x12c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d105      	bne.n	80010dc <HAL_UART_RxCpltCallback+0xd8>
    	HAL_UART_Receive_IT(&huart3, rx_data3, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	491c      	ldr	r1, [pc, #112]	; (8001144 <HAL_UART_RxCpltCallback+0x140>)
 80010d4:	4826      	ldr	r0, [pc, #152]	; (8001170 <HAL_UART_RxCpltCallback+0x16c>)
 80010d6:	f008 fb51 	bl	800977c <HAL_UART_Receive_IT>
}
 80010da:	e009      	b.n	80010f0 <HAL_UART_RxCpltCallback+0xec>
    else if (huart->Instance == USART6) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1a      	ldr	r2, [pc, #104]	; (800114c <HAL_UART_RxCpltCallback+0x148>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d104      	bne.n	80010f0 <HAL_UART_RxCpltCallback+0xec>
    	HAL_UART_Receive_IT(&huart6, rx_data6, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	491d      	ldr	r1, [pc, #116]	; (8001160 <HAL_UART_RxCpltCallback+0x15c>)
 80010ea:	4822      	ldr	r0, [pc, #136]	; (8001174 <HAL_UART_RxCpltCallback+0x170>)
 80010ec:	f008 fb46 	bl	800977c <HAL_UART_Receive_IT>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40011000 	.word	0x40011000
 80010fc:	24000630 	.word	0x24000630
 8001100:	24000628 	.word	0x24000628
 8001104:	24000624 	.word	0x24000624
 8001108:	24000620 	.word	0x24000620
 800110c:	24000600 	.word	0x24000600
 8001110:	24000608 	.word	0x24000608
 8001114:	40004400 	.word	0x40004400
 8001118:	24000660 	.word	0x24000660
 800111c:	24000658 	.word	0x24000658
 8001120:	24000654 	.word	0x24000654
 8001124:	24000650 	.word	0x24000650
 8001128:	24000634 	.word	0x24000634
 800112c:	24000638 	.word	0x24000638
 8001130:	40004800 	.word	0x40004800
 8001134:	24000690 	.word	0x24000690
 8001138:	24000688 	.word	0x24000688
 800113c:	24000684 	.word	0x24000684
 8001140:	24000680 	.word	0x24000680
 8001144:	24000664 	.word	0x24000664
 8001148:	24000668 	.word	0x24000668
 800114c:	40011400 	.word	0x40011400
 8001150:	240006c0 	.word	0x240006c0
 8001154:	240006b8 	.word	0x240006b8
 8001158:	240006b4 	.word	0x240006b4
 800115c:	240006b0 	.word	0x240006b0
 8001160:	24000694 	.word	0x24000694
 8001164:	24000698 	.word	0x24000698
 8001168:	240003b0 	.word	0x240003b0
 800116c:	24000444 	.word	0x24000444
 8001170:	240004d8 	.word	0x240004d8
 8001174:	2400056c 	.word	0x2400056c

08001178 <processUartData>:



void processUartData(UART_HandleTypeDef *huart, SensorDataPacket *sensorData, uint8_t *rxData,
                     UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer, uint32_t *dataIndex) {    // Your existing switch case logic here, adapted for the specific sensorData and rx_data
 8001178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800117c:	b087      	sub	sp, #28
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	603b      	str	r3, [r7, #0]
    // This function needs to be adapted from your existing HAL_UART_RxCpltCallback logic
	uint8_t rxByte = *rxData; // The received byte
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	75fb      	strb	r3, [r7, #23]
//    	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//    	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
    switch (*uartState) {
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b07      	cmp	r3, #7
 8001194:	f200 80e7 	bhi.w	8001366 <processUartData+0x1ee>
 8001198:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <processUartData+0x28>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	080011c1 	.word	0x080011c1
 80011a4:	080011d7 	.word	0x080011d7
 80011a8:	080011e5 	.word	0x080011e5
 80011ac:	080011f9 	.word	0x080011f9
 80011b0:	08001241 	.word	0x08001241
 80011b4:	080012bb 	.word	0x080012bb
 80011b8:	080012cf 	.word	0x080012cf
 80011bc:	0800132f 	.word	0x0800132f
        case UART_WAIT_FOR_SOP: // SOP Case
            if (rxByte == 0x53) { // SOP byte = 0x53 ('S')
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	2b53      	cmp	r3, #83	; 0x53
 80011c4:	f040 80c6 	bne.w	8001354 <processUartData+0x1dc>
            	sensorData->sop = rxByte; // Set the sop
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	7dfa      	ldrb	r2, [r7, #23]
 80011cc:	701a      	strb	r2, [r3, #0]
            	*uartState = UART_DATATYPE;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            }
            break;
 80011d4:	e0be      	b.n	8001354 <processUartData+0x1dc>
        case UART_DATATYPE: // Data type Case
        	sensorData->datatype = rxByte; // Set th		e data type (Temp = 00, Humidity = 01, Sound = 10, Vibration = 11)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	7dfa      	ldrb	r2, [r7, #23]
 80011da:	705a      	strb	r2, [r3, #1]
            *uartState = UART_SENSOR_ID; // Next parameter
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2202      	movs	r2, #2
 80011e0:	701a      	strb	r2, [r3, #0]
            break;
 80011e2:	e0c0      	b.n	8001366 <processUartData+0x1ee>

        case UART_SENSOR_ID: // Sensor ID Case
        	sensorData->sensorId = rxByte; // Set the sensor ID (000, 001, 010, 011, 100, 101, 110, 111 (i.e. Sensor 1-8)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	7dfa      	ldrb	r2, [r7, #23]
 80011e8:	709a      	strb	r2, [r3, #2]
        	*dataIndex = 0; // Reset dataIndex for the next field
 80011ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
            *uartState = UART_TIMESTAMP; // Next parameter
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2203      	movs	r2, #3
 80011f4:	701a      	strb	r2, [r3, #0]
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 80011f6:	e0b6      	b.n	8001366 <processUartData+0x1ee>

        case UART_TIMESTAMP: // Timestamp Case
            // Combine byte into timestamp assuming little endian - least significant byte first
//            	timestampBuffer |= ((uint32_t)rxByte << (24 - (dataIndex * 8)));
        	*timestampBuffer |= ((uint32_t)rxByte << ((*dataIndex-1) * 8));
 80011f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	7df9      	ldrb	r1, [r7, #23]
 80011fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3b01      	subs	r3, #1
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	431a      	orrs	r2, r3
 800120c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800120e:	601a      	str	r2, [r3, #0]
//            	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
//            	sprintf(buffer, "Timestamp partial: 0x%08lX\r\n", timestampBuffer);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 8001210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001218:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->timestamp)) {
 800121a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b03      	cmp	r3, #3
 8001220:	f240 809a 	bls.w	8001358 <processUartData+0x1e0>
                sensorData->timestamp = *timestampBuffer; // Assign the complete timestamp
 8001224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	605a      	str	r2, [r3, #4]
                *dataIndex = 0; // Reset dataIndex for the data field
 800122c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
                *timestampBuffer = 0; // Clear the buffer for the next use
 8001232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
                *uartState = UART_DATA; // Move to the next state
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2204      	movs	r2, #4
 800123c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800123e:	e08b      	b.n	8001358 <processUartData+0x1e0>

        case UART_DATA: // Data Case
            // Combine byte into data assuming little endian - least significant byte first
        	*dataBuffer |= ((uint64_t)rxByte << ((*dataIndex-1) * 8));//            	sprintf(buffer, "Data partial: 0x%016llx\r\n", dataBuffer);
 8001240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2200      	movs	r2, #0
 800124a:	4698      	mov	r8, r3
 800124c:	4691      	mov	r9, r2
 800124e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3b01      	subs	r3, #1
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	f1a3 0620 	sub.w	r6, r3, #32
 800125a:	f1c3 0220 	rsb	r2, r3, #32
 800125e:	fa09 f503 	lsl.w	r5, r9, r3
 8001262:	fa08 f606 	lsl.w	r6, r8, r6
 8001266:	4335      	orrs	r5, r6
 8001268:	fa28 f202 	lsr.w	r2, r8, r2
 800126c:	4315      	orrs	r5, r2
 800126e:	fa08 f403 	lsl.w	r4, r8, r3
 8001272:	ea40 0a04 	orr.w	sl, r0, r4
 8001276:	ea41 0b05 	orr.w	fp, r1, r5
 800127a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800127c:	e9c3 ab00 	strd	sl, fp, [r3]
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 8001280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001288:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->data)) {
 800128a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b07      	cmp	r3, #7
 8001290:	d964      	bls.n	800135c <processUartData+0x1e4>
                sensorData->data = *dataBuffer; // Assign the complete data
 8001292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	e9c1 2302 	strd	r2, r3, [r1, #8]
                *dataIndex = 0; // Reset dataIndex for the CRC field
 800129e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
                *dataBuffer = 0; // Clear the buffer for the next use
 80012a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	e9c1 2300 	strd	r2, r3, [r1]
                *uartState = UART_CRC; // Move to the next state
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2205      	movs	r2, #5
 80012b6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80012b8:	e050      	b.n	800135c <processUartData+0x1e4>

        case UART_CRC: // CRC Case
        	if(rxByte != 0){
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d04f      	beq.n	8001360 <processUartData+0x1e8>
                sensorData->crc = rxByte; // Set the CRC value based on algorithm
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	7dfa      	ldrb	r2, [r7, #23]
 80012c4:	741a      	strb	r2, [r3, #16]
                *uartState = UART_EOP; // Next parameter
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2206      	movs	r2, #6
 80012ca:	701a      	strb	r2, [r3, #0]
        	}
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 80012cc:	e048      	b.n	8001360 <processUartData+0x1e8>

        case UART_EOP:
            if (rxByte == 0x45) { // EOP byte = 0x45 ('E')
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	2b45      	cmp	r3, #69	; 0x45
 80012d2:	d129      	bne.n	8001328 <processUartData+0x1b0>
                *uartState = UART_DONE; // Packet reception is complete
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2207      	movs	r2, #7
 80012d8:	701a      	strb	r2, [r3, #0]
                sensorData->eop = rxByte; // Set the eop
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	7dfa      	ldrb	r2, [r7, #23]
 80012de:	745a      	strb	r2, [r3, #17]
                if(huart->Instance == USART1){
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <processUartData+0x1f8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d106      	bne.n	80012f8 <processUartData+0x180>
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Red LED set when packet is complete
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4820      	ldr	r0, [pc, #128]	; (8001374 <processUartData+0x1fc>)
 80012f2:	f004 fb45 	bl	8005980 <HAL_GPIO_WritePin>
//                    uartState = UART_DONE; // Packet reception is complete
//                    sensorData.eop = rxByte; // Set the eop
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
            }
            break;
 80012f6:	e035      	b.n	8001364 <processUartData+0x1ec>
                else if(huart->Instance == USART2){
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <processUartData+0x200>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d106      	bne.n	8001310 <processUartData+0x198>
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001308:	481a      	ldr	r0, [pc, #104]	; (8001374 <processUartData+0x1fc>)
 800130a:	f004 fb39 	bl	8005980 <HAL_GPIO_WritePin>
            break;
 800130e:	e029      	b.n	8001364 <processUartData+0x1ec>
                else if(huart->Instance == UART4){
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <processUartData+0x204>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d124      	bne.n	8001364 <processUartData+0x1ec>
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Blue LED set when packet is complete
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001320:	4814      	ldr	r0, [pc, #80]	; (8001374 <processUartData+0x1fc>)
 8001322:	f004 fb2d 	bl	8005980 <HAL_GPIO_WritePin>
            break;
 8001326:	e01d      	b.n	8001364 <processUartData+0x1ec>
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
 8001328:	2300      	movs	r3, #0
 800132a:	603b      	str	r3, [r7, #0]
            break;
 800132c:	e01a      	b.n	8001364 <processUartData+0x1ec>
        	*/
//        	for(size_t i = 0; i < sizeof(SensorDataPacket); i++) {
//        	    uint8_t* bytePtr = ((uint8_t*)sensorData) + i; // Point to each byte in sequence
//        	    HAL_SPI_Transmit(&hspi5, bytePtr, 1, 100); // Transmit one byte at a time
//        	}
        	if(spiReady) {
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <processUartData+0x208>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <processUartData+0x1d0>
        		spiReady = false; // Clear the flag to indicate SPI is busy
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <processUartData+0x208>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
        	    HAL_SPI_Transmit_IT(&hspi5, (uint8_t*)sensorData, sizeof(SensorDataPacket)); // Transmit the data over SPI
 800133e:	2218      	movs	r2, #24
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	4810      	ldr	r0, [pc, #64]	; (8001384 <processUartData+0x20c>)
 8001344:	f007 f9d6 	bl	80086f4 <HAL_SPI_Transmit_IT>
        	    }
        	else if (huart->Instance == USART6) {
        		 PutFifo6(*sensorData);
        	    }
        	    */
        	resetUartState(uartState, timestampBuffer, dataBuffer);
 8001348:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800134a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800134c:	6838      	ldr	r0, [r7, #0]
 800134e:	f000 f81b 	bl	8001388 <resetUartState>
            break;
 8001352:	e008      	b.n	8001366 <processUartData+0x1ee>
            break;
 8001354:	bf00      	nop
 8001356:	e006      	b.n	8001366 <processUartData+0x1ee>
            break;
 8001358:	bf00      	nop
 800135a:	e004      	b.n	8001366 <processUartData+0x1ee>
            break;
 800135c:	bf00      	nop
 800135e:	e002      	b.n	8001366 <processUartData+0x1ee>
            break;
 8001360:	bf00      	nop
 8001362:	e000      	b.n	8001366 <processUartData+0x1ee>
            break;
 8001364:	bf00      	nop
    }
    // Ready to receive the next byte
   // HAL_UART_Receive_IT(huart, rxData, 1);
}
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001370:	40011000 	.word	0x40011000
 8001374:	58020c00 	.word	0x58020c00
 8001378:	40004400 	.word	0x40004400
 800137c:	40004c00 	.word	0x40004c00
 8001380:	24000000 	.word	0x24000000
 8001384:	24000264 	.word	0x24000264

08001388 <resetUartState>:
	HAL_SPI_Transmit(&hspi5, tx_data, 2, 10);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
}


void resetUartState(UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
    *uartState = UART_WAIT_FOR_SOP; // Reset UART state
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
    *timestampBuffer = 0; // Clear the timestamp buffer
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
    *dataBuffer = 0; // Clear the data buffer
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	e9c1 2300 	strd	r2, r3, [r1]
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <resetUartState+0x60>)
 80013b6:	f004 fae3 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <resetUartState+0x60>)
 80013c2:	f004 fadd 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <resetUartState+0x60>)
 80013ce:	f004 fad7 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <resetUartState+0x60>)
 80013da:	f004 fad1 	bl	8005980 <HAL_GPIO_WritePin>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	58020c00 	.word	0x58020c00

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x8>
	...

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_MspInit+0x30>)
 8001400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001404:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_MspInit+0x30>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_MspInit+0x30>)
 8001410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	58024400 	.word	0x58024400

0800142c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08e      	sub	sp, #56	; 0x38
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a59      	ldr	r2, [pc, #356]	; (80015b0 <HAL_ETH_MspInit+0x184>)
 800144a:	4293      	cmp	r3, r2
 800144c:	f040 80ab 	bne.w	80015a6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001450:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 8001452:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001456:	4a57      	ldr	r2, [pc, #348]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 8001458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001460:	4b54      	ldr	r3, [pc, #336]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 8001462:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800146a:	623b      	str	r3, [r7, #32]
 800146c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800146e:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 8001470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001474:	4a4f      	ldr	r2, [pc, #316]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 8001476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800147e:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 8001480:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800148c:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 800148e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001492:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800149c:	4b45      	ldr	r3, [pc, #276]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 800149e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	4b42      	ldr	r3, [pc, #264]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	4a40      	ldr	r2, [pc, #256]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ba:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ce:	4a39      	ldr	r2, [pc, #228]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ec:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150a:	4a2a      	ldr	r2, [pc, #168]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 800150c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_ETH_MspInit+0x188>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001522:	2332      	movs	r3, #50	; 0x32
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001532:	230b      	movs	r3, #11
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	481e      	ldr	r0, [pc, #120]	; (80015b8 <HAL_ETH_MspInit+0x18c>)
 800153e:	f004 f877 	bl	8005630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001542:	2386      	movs	r3, #134	; 0x86
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001552:	230b      	movs	r3, #11
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	4817      	ldr	r0, [pc, #92]	; (80015bc <HAL_ETH_MspInit+0x190>)
 800155e:	f004 f867 	bl	8005630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001574:	230b      	movs	r3, #11
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <HAL_ETH_MspInit+0x194>)
 8001580:	f004 f856 	bl	8005630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001584:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001596:	230b      	movs	r3, #11
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <HAL_ETH_MspInit+0x198>)
 80015a2:	f004 f845 	bl	8005630 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3738      	adds	r7, #56	; 0x38
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40028000 	.word	0x40028000
 80015b4:	58024400 	.word	0x58024400
 80015b8:	58020800 	.word	0x58020800
 80015bc:	58020000 	.word	0x58020000
 80015c0:	58020400 	.word	0x58020400
 80015c4:	58021800 	.word	0x58021800

080015c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0bc      	sub	sp, #240	; 0xf0
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e0:	f107 0320 	add.w	r3, r7, #32
 80015e4:	22b8      	movs	r2, #184	; 0xb8
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00a fd1b 	bl	800c024 <memset>
  if(hspi->Instance==SPI1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a7d      	ldr	r2, [pc, #500]	; (80017e8 <HAL_SPI_MspInit+0x220>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	f040 809f 	bne.w	8001738 <HAL_SPI_MspInit+0x170>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001606:	2300      	movs	r3, #0
 8001608:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	4618      	mov	r0, r3
 8001610:	f005 f98a 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800161a:	f7ff fee7 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800161e:	4b73      	ldr	r3, [pc, #460]	; (80017ec <HAL_SPI_MspInit+0x224>)
 8001620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001624:	4a71      	ldr	r2, [pc, #452]	; (80017ec <HAL_SPI_MspInit+0x224>)
 8001626:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800162a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800162e:	4b6f      	ldr	r3, [pc, #444]	; (80017ec <HAL_SPI_MspInit+0x224>)
 8001630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b6b      	ldr	r3, [pc, #428]	; (80017ec <HAL_SPI_MspInit+0x224>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001642:	4a6a      	ldr	r2, [pc, #424]	; (80017ec <HAL_SPI_MspInit+0x224>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164c:	4b67      	ldr	r3, [pc, #412]	; (80017ec <HAL_SPI_MspInit+0x224>)
 800164e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165a:	4b64      	ldr	r3, [pc, #400]	; (80017ec <HAL_SPI_MspInit+0x224>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001660:	4a62      	ldr	r2, [pc, #392]	; (80017ec <HAL_SPI_MspInit+0x224>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166a:	4b60      	ldr	r3, [pc, #384]	; (80017ec <HAL_SPI_MspInit+0x224>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001678:	2360      	movs	r3, #96	; 0x60
 800167a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001690:	2305      	movs	r3, #5
 8001692:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800169a:	4619      	mov	r1, r3
 800169c:	4854      	ldr	r0, [pc, #336]	; (80017f0 <HAL_SPI_MspInit+0x228>)
 800169e:	f003 ffc7 	bl	8005630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ba:	2305      	movs	r3, #5
 80016bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016c4:	4619      	mov	r1, r3
 80016c6:	484b      	ldr	r0, [pc, #300]	; (80017f4 <HAL_SPI_MspInit+0x22c>)
 80016c8:	f003 ffb2 	bl	8005630 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80016cc:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 80016ce:	4a4b      	ldr	r2, [pc, #300]	; (80017fc <HAL_SPI_MspInit+0x234>)
 80016d0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80016d2:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 80016d4:	2226      	movs	r2, #38	; 0x26
 80016d6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d8:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 80016da:	2240      	movs	r2, #64	; 0x40
 80016dc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e4:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 80016e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ea:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016f8:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016fe:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001704:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800170a:	483b      	ldr	r0, [pc, #236]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 800170c:	f000 fd18 	bl	8002140 <HAL_DMA_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 8001716:	f7ff fe69 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a36      	ldr	r2, [pc, #216]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 800171e:	679a      	str	r2, [r3, #120]	; 0x78
 8001720:	4a35      	ldr	r2, [pc, #212]	; (80017f8 <HAL_SPI_MspInit+0x230>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2023      	movs	r0, #35	; 0x23
 800172c:	f000 fcd3 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001730:	2023      	movs	r0, #35	; 0x23
 8001732:	f000 fcea 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001736:	e053      	b.n	80017e0 <HAL_SPI_MspInit+0x218>
  else if(hspi->Instance==SPI5)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a30      	ldr	r2, [pc, #192]	; (8001800 <HAL_SPI_MspInit+0x238>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d14e      	bne.n	80017e0 <HAL_SPI_MspInit+0x218>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f005 f8e5 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_SPI_MspInit+0x1a0>
      Error_Handler();
 8001764:	f7ff fe42 	bl	80013ec <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001768:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_SPI_MspInit+0x224>)
 800176a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800176e:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <HAL_SPI_MspInit+0x224>)
 8001770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001774:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_SPI_MspInit+0x224>)
 800177a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800177e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_SPI_MspInit+0x224>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_SPI_MspInit+0x224>)
 800178e:	f043 0320 	orr.w	r3, r3, #32
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_SPI_MspInit+0x224>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	f003 0320 	and.w	r3, r3, #32
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80017a4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80017a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017be:	2305      	movs	r3, #5
 80017c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017c8:	4619      	mov	r1, r3
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <HAL_SPI_MspInit+0x23c>)
 80017cc:	f003 ff30 	bl	8005630 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2055      	movs	r0, #85	; 0x55
 80017d6:	f000 fc7e 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80017da:	2055      	movs	r0, #85	; 0x55
 80017dc:	f000 fc95 	bl	800210a <HAL_NVIC_EnableIRQ>
}
 80017e0:	bf00      	nop
 80017e2:	37f0      	adds	r7, #240	; 0xf0
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40013000 	.word	0x40013000
 80017ec:	58024400 	.word	0x58024400
 80017f0:	58020000 	.word	0x58020000
 80017f4:	58020c00 	.word	0x58020c00
 80017f8:	240002ec 	.word	0x240002ec
 80017fc:	40020010 	.word	0x40020010
 8001800:	40015000 	.word	0x40015000
 8001804:	58021400 	.word	0x58021400

08001808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_TIM_Base_MspInit+0x48>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d116      	bne.n	8001848 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_TIM_Base_MspInit+0x4c>)
 800181c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <HAL_TIM_Base_MspInit+0x4c>)
 8001822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001826:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_TIM_Base_MspInit+0x4c>)
 800182c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	2075      	movs	r0, #117	; 0x75
 800183e:	f000 fc4a 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001842:	2075      	movs	r0, #117	; 0x75
 8001844:	f000 fc61 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40014400 	.word	0x40014400
 8001854:	58024400 	.word	0x58024400

08001858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b0c0      	sub	sp, #256	; 0x100
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001870:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001874:	22b8      	movs	r2, #184	; 0xb8
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f00a fbd3 	bl	800c024 <memset>
  if(huart->Instance==USART1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4ac2      	ldr	r2, [pc, #776]	; (8001b8c <HAL_UART_MspInit+0x334>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d164      	bne.n	8001952 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001888:	f04f 0201 	mov.w	r2, #1
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800189e:	4618      	mov	r0, r3
 80018a0:	f005 f842 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018aa:	f7ff fd9f 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ae:	4bb8      	ldr	r3, [pc, #736]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80018b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018b4:	4ab6      	ldr	r2, [pc, #728]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80018b6:	f043 0310 	orr.w	r3, r3, #16
 80018ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018be:	4bb4      	ldr	r3, [pc, #720]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80018c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4bb0      	ldr	r3, [pc, #704]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d2:	4aaf      	ldr	r2, [pc, #700]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018dc:	4bac      	ldr	r3, [pc, #688]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001904:	2304      	movs	r3, #4
 8001906:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800190e:	4619      	mov	r1, r3
 8001910:	48a0      	ldr	r0, [pc, #640]	; (8001b94 <HAL_UART_MspInit+0x33c>)
 8001912:	f003 fe8d 	bl	8005630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001916:	2340      	movs	r3, #64	; 0x40
 8001918:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800192e:	2307      	movs	r3, #7
 8001930:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001938:	4619      	mov	r1, r3
 800193a:	4896      	ldr	r0, [pc, #600]	; (8001b94 <HAL_UART_MspInit+0x33c>)
 800193c:	f003 fe78 	bl	8005630 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2025      	movs	r0, #37	; 0x25
 8001946:	f000 fbc6 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800194a:	2025      	movs	r0, #37	; 0x25
 800194c:	f000 fbdd 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001950:	e117      	b.n	8001b82 <HAL_UART_MspInit+0x32a>
  else if(huart->Instance==USART2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a90      	ldr	r2, [pc, #576]	; (8001b98 <HAL_UART_MspInit+0x340>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d172      	bne.n	8001a42 <HAL_UART_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800195c:	f04f 0202 	mov.w	r2, #2
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001972:	4618      	mov	r0, r3
 8001974:	f004 ffd8 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800197e:	f7ff fd35 	bl	80013ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001982:	4b83      	ldr	r3, [pc, #524]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001988:	4a81      	ldr	r2, [pc, #516]	; (8001b90 <HAL_UART_MspInit+0x338>)
 800198a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001992:	4b7f      	ldr	r3, [pc, #508]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	4b7b      	ldr	r3, [pc, #492]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a6:	4a7a      	ldr	r2, [pc, #488]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b0:	4b77      	ldr	r3, [pc, #476]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80019b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	623b      	str	r3, [r7, #32]
 80019bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019be:	4b74      	ldr	r3, [pc, #464]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ce:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <HAL_UART_MspInit+0x338>)
 80019d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019dc:	2308      	movs	r3, #8
 80019de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f4:	2307      	movs	r3, #7
 80019f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019fe:	4619      	mov	r1, r3
 8001a00:	4866      	ldr	r0, [pc, #408]	; (8001b9c <HAL_UART_MspInit+0x344>)
 8001a02:	f003 fe15 	bl	8005630 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a06:	2320      	movs	r3, #32
 8001a08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a28:	4619      	mov	r1, r3
 8001a2a:	485d      	ldr	r0, [pc, #372]	; (8001ba0 <HAL_UART_MspInit+0x348>)
 8001a2c:	f003 fe00 	bl	8005630 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2026      	movs	r0, #38	; 0x26
 8001a36:	f000 fb4e 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a3a:	2026      	movs	r0, #38	; 0x26
 8001a3c:	f000 fb65 	bl	800210a <HAL_NVIC_EnableIRQ>
}
 8001a40:	e09f      	b.n	8001b82 <HAL_UART_MspInit+0x32a>
  else if(huart->Instance==USART3)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a57      	ldr	r2, [pc, #348]	; (8001ba4 <HAL_UART_MspInit+0x34c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d147      	bne.n	8001adc <HAL_UART_MspInit+0x284>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a4c:	f04f 0202 	mov.w	r2, #2
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 ff60 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8001a6e:	f7ff fcbd 	bl	80013ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a78:	4a45      	ldr	r2, [pc, #276]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a82:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a96:	4a3e      	ldr	r2, [pc, #248]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa0:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac8:	2307      	movs	r3, #7
 8001aca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ace:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4832      	ldr	r0, [pc, #200]	; (8001ba0 <HAL_UART_MspInit+0x348>)
 8001ad6:	f003 fdab 	bl	8005630 <HAL_GPIO_Init>
}
 8001ada:	e052      	b.n	8001b82 <HAL_UART_MspInit+0x32a>
  else if(huart->Instance==USART6)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a31      	ldr	r2, [pc, #196]	; (8001ba8 <HAL_UART_MspInit+0x350>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d14d      	bne.n	8001b82 <HAL_UART_MspInit+0x32a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001ae6:	f04f 0201 	mov.w	r2, #1
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 ff13 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8001b08:	f7ff fc70 	bl	80013ec <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001b14:	f043 0320 	orr.w	r3, r3, #32
 8001b18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_UART_MspInit+0x338>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b48:	23c0      	movs	r3, #192	; 0xc0
 8001b4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001b60:	2307      	movs	r3, #7
 8001b62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480f      	ldr	r0, [pc, #60]	; (8001bac <HAL_UART_MspInit+0x354>)
 8001b6e:	f003 fd5f 	bl	8005630 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2047      	movs	r0, #71	; 0x47
 8001b78:	f000 faad 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001b7c:	2047      	movs	r0, #71	; 0x47
 8001b7e:	f000 fac4 	bl	800210a <HAL_NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40011000 	.word	0x40011000
 8001b90:	58024400 	.word	0x58024400
 8001b94:	58020400 	.word	0x58020400
 8001b98:	40004400 	.word	0x40004400
 8001b9c:	58020000 	.word	0x58020000
 8001ba0:	58020c00 	.word	0x58020c00
 8001ba4:	40004800 	.word	0x40004800
 8001ba8:	40011400 	.word	0x40011400
 8001bac:	58020800 	.word	0x58020800

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfc:	f000 f95c 	bl	8001eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Stream0_IRQHandler+0x10>)
 8001c0a:	f001 fdbf 	bl	800378c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	240002ec 	.word	0x240002ec

08001c18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <SPI1_IRQHandler+0x10>)
 8001c1e:	f006 ff55 	bl	8008acc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	240001dc 	.word	0x240001dc

08001c2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART1_IRQHandler+0x10>)
 8001c32:	f007 fdef 	bl	8009814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	240003b0 	.word	0x240003b0

08001c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <USART2_IRQHandler+0x10>)
 8001c46:	f007 fde5 	bl	8009814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	24000444 	.word	0x24000444

08001c54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <USART6_IRQHandler+0x10>)
 8001c5a:	f007 fddb 	bl	8009814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2400056c 	.word	0x2400056c

08001c68 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <SPI5_IRQHandler+0x10>)
 8001c6e:	f006 ff2d 	bl	8008acc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	24000264 	.word	0x24000264

08001c7c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <TIM16_IRQHandler+0x10>)
 8001c82:	f007 fb2b 	bl	80092dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	24000364 	.word	0x24000364

08001c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <SystemInit+0xd0>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <SystemInit+0xd0>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <SystemInit+0xd4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	2b06      	cmp	r3, #6
 8001cae:	d807      	bhi.n	8001cc0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <SystemInit+0xd4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 030f 	bic.w	r3, r3, #15
 8001cb8:	4a2a      	ldr	r2, [pc, #168]	; (8001d64 <SystemInit+0xd4>)
 8001cba:	f043 0307 	orr.w	r3, r3, #7
 8001cbe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <SystemInit+0xd8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <SystemInit+0xd8>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <SystemInit+0xd8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <SystemInit+0xd8>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4924      	ldr	r1, [pc, #144]	; (8001d68 <SystemInit+0xd8>)
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <SystemInit+0xdc>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <SystemInit+0xd4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <SystemInit+0xd4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 030f 	bic.w	r3, r3, #15
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <SystemInit+0xd4>)
 8001cf4:	f043 0307 	orr.w	r3, r3, #7
 8001cf8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <SystemInit+0xd8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <SystemInit+0xd8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <SystemInit+0xd8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <SystemInit+0xd8>)
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <SystemInit+0xe0>)
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <SystemInit+0xd8>)
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <SystemInit+0xe4>)
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <SystemInit+0xd8>)
 8001d1a:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <SystemInit+0xe8>)
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <SystemInit+0xd8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <SystemInit+0xd8>)
 8001d26:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <SystemInit+0xe8>)
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <SystemInit+0xd8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <SystemInit+0xd8>)
 8001d32:	4a11      	ldr	r2, [pc, #68]	; (8001d78 <SystemInit+0xe8>)
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <SystemInit+0xd8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <SystemInit+0xd8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <SystemInit+0xd8>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <SystemInit+0xd8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <SystemInit+0xec>)
 8001d50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00
 8001d64:	52002000 	.word	0x52002000
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d70:	02020200 	.word	0x02020200
 8001d74:	01ff0000 	.word	0x01ff0000
 8001d78:	01010280 	.word	0x01010280
 8001d7c:	52004000 	.word	0x52004000

08001d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d84:	f7ff ff84 	bl	8001c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d8a:	490d      	ldr	r1, [pc, #52]	; (8001dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001da0:	4c0a      	ldr	r4, [pc, #40]	; (8001dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dae:	f00a f941 	bl	800c034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db2:	f7fe fc29 	bl	8000608 <main>
  bx  lr
 8001db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001db8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001dbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dc0:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001dc4:	0800c0e4 	.word	0x0800c0e4
  ldr r2, =_sbss
 8001dc8:	240000d8 	.word	0x240000d8
  ldr r4, =_ebss
 8001dcc:	24000740 	.word	0x24000740

08001dd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC3_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dda:	2003      	movs	r0, #3
 8001ddc:	f000 f970 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001de0:	f004 fbcc 	bl	800657c <HAL_RCC_GetSysClockFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_Init+0x68>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	4913      	ldr	r1, [pc, #76]	; (8001e40 <HAL_Init+0x6c>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_Init+0x68>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <HAL_Init+0x6c>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <HAL_Init+0x70>)
 8001e16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <HAL_Init+0x74>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f814 	bl	8001e4c <HAL_InitTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e002      	b.n	8001e34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2e:	f7ff fae3 	bl	80013f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	0800c094 	.word	0x0800c094
 8001e44:	24000008 	.word	0x24000008
 8001e48:	24000004 	.word	0x24000004

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_InitTick+0x60>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e021      	b.n	8001ea4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_InitTick+0x64>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_InitTick+0x60>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f955 	bl	8002126 <HAL_SYSTICK_Config>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00e      	b.n	8001ea4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b0f      	cmp	r3, #15
 8001e8a:	d80a      	bhi.n	8001ea2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f000 f91f 	bl	80020d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e98:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <HAL_InitTick+0x68>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	24000010 	.word	0x24000010
 8001eb0:	24000004 	.word	0x24000004
 8001eb4:	2400000c 	.word	0x2400000c

08001eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_IncTick+0x20>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x24>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_IncTick+0x24>)
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	24000010 	.word	0x24000010
 8001edc:	2400073c 	.word	0x2400073c

08001ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_GetTick+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	2400073c 	.word	0x2400073c

08001ef8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001f08:	4904      	ldr	r1, [pc, #16]	; (8001f1c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	58000400 	.word	0x58000400

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <__NVIC_SetPriorityGrouping+0x40>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <__NVIC_SetPriorityGrouping+0x40>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00
 8001f64:	05fa0000 	.word	0x05fa0000

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	; (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208c:	d301      	bcc.n	8002092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <SysTick_Config+0x40>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209a:	210f      	movs	r1, #15
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f7ff ff8e 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SysTick_Config+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <SysTick_Config+0x40>)
 80020ac:	2207      	movs	r2, #7
 80020ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000e010 	.word	0xe000e010

080020c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff29 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff40 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff90 	bl	8002014 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5f 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff33 	bl	8001f84 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa4 	bl	800207c <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff feca 	bl	8001ee0 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e312      	b.n	800277e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a66      	ldr	r2, [pc, #408]	; (80022f8 <HAL_DMA_Init+0x1b8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d04a      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a65      	ldr	r2, [pc, #404]	; (80022fc <HAL_DMA_Init+0x1bc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d045      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a63      	ldr	r2, [pc, #396]	; (8002300 <HAL_DMA_Init+0x1c0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d040      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a62      	ldr	r2, [pc, #392]	; (8002304 <HAL_DMA_Init+0x1c4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d03b      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a60      	ldr	r2, [pc, #384]	; (8002308 <HAL_DMA_Init+0x1c8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d036      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a5f      	ldr	r2, [pc, #380]	; (800230c <HAL_DMA_Init+0x1cc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d031      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a5d      	ldr	r2, [pc, #372]	; (8002310 <HAL_DMA_Init+0x1d0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02c      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a5c      	ldr	r2, [pc, #368]	; (8002314 <HAL_DMA_Init+0x1d4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d027      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a5a      	ldr	r2, [pc, #360]	; (8002318 <HAL_DMA_Init+0x1d8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d022      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a59      	ldr	r2, [pc, #356]	; (800231c <HAL_DMA_Init+0x1dc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d01d      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a57      	ldr	r2, [pc, #348]	; (8002320 <HAL_DMA_Init+0x1e0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d018      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a56      	ldr	r2, [pc, #344]	; (8002324 <HAL_DMA_Init+0x1e4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a54      	ldr	r2, [pc, #336]	; (8002328 <HAL_DMA_Init+0x1e8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00e      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a53      	ldr	r2, [pc, #332]	; (800232c <HAL_DMA_Init+0x1ec>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a51      	ldr	r2, [pc, #324]	; (8002330 <HAL_DMA_Init+0x1f0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_DMA_Init+0xb8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a50      	ldr	r2, [pc, #320]	; (8002334 <HAL_DMA_Init+0x1f4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_DMA_Init+0xbc>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_DMA_Init+0xbe>
 80021fc:	2300      	movs	r3, #0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 813c 	beq.w	800247c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <HAL_DMA_Init+0x1b8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d04a      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a36      	ldr	r2, [pc, #216]	; (80022fc <HAL_DMA_Init+0x1bc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d045      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a34      	ldr	r2, [pc, #208]	; (8002300 <HAL_DMA_Init+0x1c0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d040      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a33      	ldr	r2, [pc, #204]	; (8002304 <HAL_DMA_Init+0x1c4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d03b      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a31      	ldr	r2, [pc, #196]	; (8002308 <HAL_DMA_Init+0x1c8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d036      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a30      	ldr	r2, [pc, #192]	; (800230c <HAL_DMA_Init+0x1cc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d031      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <HAL_DMA_Init+0x1d0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02c      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2d      	ldr	r2, [pc, #180]	; (8002314 <HAL_DMA_Init+0x1d4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d027      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <HAL_DMA_Init+0x1d8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d022      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2a      	ldr	r2, [pc, #168]	; (800231c <HAL_DMA_Init+0x1dc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d01d      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <HAL_DMA_Init+0x1e0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d018      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a27      	ldr	r2, [pc, #156]	; (8002324 <HAL_DMA_Init+0x1e4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a25      	ldr	r2, [pc, #148]	; (8002328 <HAL_DMA_Init+0x1e8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a24      	ldr	r2, [pc, #144]	; (800232c <HAL_DMA_Init+0x1ec>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_DMA_Init+0x1f0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_Init+0x174>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a21      	ldr	r2, [pc, #132]	; (8002334 <HAL_DMA_Init+0x1f4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d108      	bne.n	80022c6 <HAL_DMA_Init+0x186>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e007      	b.n	80022d6 <HAL_DMA_Init+0x196>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022d6:	e02f      	b.n	8002338 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d8:	f7ff fe02 	bl	8001ee0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d928      	bls.n	8002338 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2203      	movs	r2, #3
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e242      	b.n	800277e <HAL_DMA_Init+0x63e>
 80022f8:	40020010 	.word	0x40020010
 80022fc:	40020028 	.word	0x40020028
 8002300:	40020040 	.word	0x40020040
 8002304:	40020058 	.word	0x40020058
 8002308:	40020070 	.word	0x40020070
 800230c:	40020088 	.word	0x40020088
 8002310:	400200a0 	.word	0x400200a0
 8002314:	400200b8 	.word	0x400200b8
 8002318:	40020410 	.word	0x40020410
 800231c:	40020428 	.word	0x40020428
 8002320:	40020440 	.word	0x40020440
 8002324:	40020458 	.word	0x40020458
 8002328:	40020470 	.word	0x40020470
 800232c:	40020488 	.word	0x40020488
 8002330:	400204a0 	.word	0x400204a0
 8002334:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1c8      	bne.n	80022d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4b83      	ldr	r3, [pc, #524]	; (8002560 <HAL_DMA_Init+0x420>)
 8002352:	4013      	ands	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800235e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002376:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b04      	cmp	r3, #4
 800238a:	d107      	bne.n	800239c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4313      	orrs	r3, r2
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b28      	cmp	r3, #40	; 0x28
 80023a2:	d903      	bls.n	80023ac <HAL_DMA_Init+0x26c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b2e      	cmp	r3, #46	; 0x2e
 80023aa:	d91f      	bls.n	80023ec <HAL_DMA_Init+0x2ac>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b3e      	cmp	r3, #62	; 0x3e
 80023b2:	d903      	bls.n	80023bc <HAL_DMA_Init+0x27c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b42      	cmp	r3, #66	; 0x42
 80023ba:	d917      	bls.n	80023ec <HAL_DMA_Init+0x2ac>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b46      	cmp	r3, #70	; 0x46
 80023c2:	d903      	bls.n	80023cc <HAL_DMA_Init+0x28c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b48      	cmp	r3, #72	; 0x48
 80023ca:	d90f      	bls.n	80023ec <HAL_DMA_Init+0x2ac>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b4e      	cmp	r3, #78	; 0x4e
 80023d2:	d903      	bls.n	80023dc <HAL_DMA_Init+0x29c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b52      	cmp	r3, #82	; 0x52
 80023da:	d907      	bls.n	80023ec <HAL_DMA_Init+0x2ac>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b73      	cmp	r3, #115	; 0x73
 80023e2:	d905      	bls.n	80023f0 <HAL_DMA_Init+0x2b0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b77      	cmp	r3, #119	; 0x77
 80023ea:	d801      	bhi.n	80023f0 <HAL_DMA_Init+0x2b0>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_DMA_Init+0x2b2>
 80023f0:	2300      	movs	r3, #0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f023 0307 	bic.w	r3, r3, #7
 8002414:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	2b04      	cmp	r3, #4
 8002426:	d117      	bne.n	8002458 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00e      	beq.n	8002458 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f002 fb3a 	bl	8004ab4 <DMA_CheckFifoParam>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e192      	b.n	800277e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f002 fa75 	bl	8004950 <DMA_CalcBaseAndBitshift>
 8002466:	4603      	mov	r3, r0
 8002468:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	223f      	movs	r2, #63	; 0x3f
 8002474:	409a      	lsls	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	e0c8      	b.n	800260e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a38      	ldr	r2, [pc, #224]	; (8002564 <HAL_DMA_Init+0x424>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d022      	beq.n	80024cc <HAL_DMA_Init+0x38c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a37      	ldr	r2, [pc, #220]	; (8002568 <HAL_DMA_Init+0x428>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d01d      	beq.n	80024cc <HAL_DMA_Init+0x38c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a35      	ldr	r2, [pc, #212]	; (800256c <HAL_DMA_Init+0x42c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d018      	beq.n	80024cc <HAL_DMA_Init+0x38c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a34      	ldr	r2, [pc, #208]	; (8002570 <HAL_DMA_Init+0x430>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d013      	beq.n	80024cc <HAL_DMA_Init+0x38c>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a32      	ldr	r2, [pc, #200]	; (8002574 <HAL_DMA_Init+0x434>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00e      	beq.n	80024cc <HAL_DMA_Init+0x38c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a31      	ldr	r2, [pc, #196]	; (8002578 <HAL_DMA_Init+0x438>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d009      	beq.n	80024cc <HAL_DMA_Init+0x38c>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2f      	ldr	r2, [pc, #188]	; (800257c <HAL_DMA_Init+0x43c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_DMA_Init+0x38c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <HAL_DMA_Init+0x440>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_DMA_Init+0x390>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_DMA_Init+0x392>
 80024d0:	2300      	movs	r3, #0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8092 	beq.w	80025fc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a21      	ldr	r2, [pc, #132]	; (8002564 <HAL_DMA_Init+0x424>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d021      	beq.n	8002526 <HAL_DMA_Init+0x3e6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_DMA_Init+0x428>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d01c      	beq.n	8002526 <HAL_DMA_Init+0x3e6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_DMA_Init+0x42c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d017      	beq.n	8002526 <HAL_DMA_Init+0x3e6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_DMA_Init+0x430>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d012      	beq.n	8002526 <HAL_DMA_Init+0x3e6>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <HAL_DMA_Init+0x434>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_DMA_Init+0x3e6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <HAL_DMA_Init+0x438>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d008      	beq.n	8002526 <HAL_DMA_Init+0x3e6>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_DMA_Init+0x43c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d003      	beq.n	8002526 <HAL_DMA_Init+0x3e6>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_DMA_Init+0x440>)
 8002524:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2202      	movs	r2, #2
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_DMA_Init+0x444>)
 8002542:	4013      	ands	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b40      	cmp	r3, #64	; 0x40
 800254c:	d01c      	beq.n	8002588 <HAL_DMA_Init+0x448>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b80      	cmp	r3, #128	; 0x80
 8002554:	d102      	bne.n	800255c <HAL_DMA_Init+0x41c>
 8002556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255a:	e016      	b.n	800258a <HAL_DMA_Init+0x44a>
 800255c:	2300      	movs	r3, #0
 800255e:	e014      	b.n	800258a <HAL_DMA_Init+0x44a>
 8002560:	fe10803f 	.word	0xfe10803f
 8002564:	58025408 	.word	0x58025408
 8002568:	5802541c 	.word	0x5802541c
 800256c:	58025430 	.word	0x58025430
 8002570:	58025444 	.word	0x58025444
 8002574:	58025458 	.word	0x58025458
 8002578:	5802546c 	.word	0x5802546c
 800257c:	58025480 	.word	0x58025480
 8002580:	58025494 	.word	0x58025494
 8002584:	fffe000f 	.word	0xfffe000f
 8002588:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68d2      	ldr	r2, [r2, #12]
 800258e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002598:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b6e      	ldr	r3, [pc, #440]	; (8002788 <HAL_DMA_Init+0x648>)
 80025d0:	4413      	add	r3, r2
 80025d2:	4a6e      	ldr	r2, [pc, #440]	; (800278c <HAL_DMA_Init+0x64c>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	009a      	lsls	r2, r3, #2
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f002 f9b5 	bl	8004950 <DMA_CalcBaseAndBitshift>
 80025e6:	4603      	mov	r3, r0
 80025e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	2201      	movs	r2, #1
 80025f4:	409a      	lsls	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e008      	b.n	800260e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2240      	movs	r2, #64	; 0x40
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0b7      	b.n	800277e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5f      	ldr	r2, [pc, #380]	; (8002790 <HAL_DMA_Init+0x650>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d072      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5d      	ldr	r2, [pc, #372]	; (8002794 <HAL_DMA_Init+0x654>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d06d      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5c      	ldr	r2, [pc, #368]	; (8002798 <HAL_DMA_Init+0x658>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d068      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5a      	ldr	r2, [pc, #360]	; (800279c <HAL_DMA_Init+0x65c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d063      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a59      	ldr	r2, [pc, #356]	; (80027a0 <HAL_DMA_Init+0x660>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d05e      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a57      	ldr	r2, [pc, #348]	; (80027a4 <HAL_DMA_Init+0x664>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d059      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a56      	ldr	r2, [pc, #344]	; (80027a8 <HAL_DMA_Init+0x668>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d054      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a54      	ldr	r2, [pc, #336]	; (80027ac <HAL_DMA_Init+0x66c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d04f      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a53      	ldr	r2, [pc, #332]	; (80027b0 <HAL_DMA_Init+0x670>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d04a      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a51      	ldr	r2, [pc, #324]	; (80027b4 <HAL_DMA_Init+0x674>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d045      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a50      	ldr	r2, [pc, #320]	; (80027b8 <HAL_DMA_Init+0x678>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d040      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a4e      	ldr	r2, [pc, #312]	; (80027bc <HAL_DMA_Init+0x67c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d03b      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a4d      	ldr	r2, [pc, #308]	; (80027c0 <HAL_DMA_Init+0x680>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d036      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4b      	ldr	r2, [pc, #300]	; (80027c4 <HAL_DMA_Init+0x684>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a4a      	ldr	r2, [pc, #296]	; (80027c8 <HAL_DMA_Init+0x688>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d02c      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a48      	ldr	r2, [pc, #288]	; (80027cc <HAL_DMA_Init+0x68c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d027      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a47      	ldr	r2, [pc, #284]	; (80027d0 <HAL_DMA_Init+0x690>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d022      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_DMA_Init+0x694>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01d      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a44      	ldr	r2, [pc, #272]	; (80027d8 <HAL_DMA_Init+0x698>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d018      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a42      	ldr	r2, [pc, #264]	; (80027dc <HAL_DMA_Init+0x69c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a41      	ldr	r2, [pc, #260]	; (80027e0 <HAL_DMA_Init+0x6a0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00e      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a3f      	ldr	r2, [pc, #252]	; (80027e4 <HAL_DMA_Init+0x6a4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a3e      	ldr	r2, [pc, #248]	; (80027e8 <HAL_DMA_Init+0x6a8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_DMA_Init+0x5be>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a3c      	ldr	r2, [pc, #240]	; (80027ec <HAL_DMA_Init+0x6ac>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_DMA_Init+0x5c2>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_DMA_Init+0x5c4>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d032      	beq.n	800276e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f002 fa4f 	bl	8004bac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b80      	cmp	r3, #128	; 0x80
 8002714:	d102      	bne.n	800271c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002730:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_DMA_Init+0x61c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b08      	cmp	r3, #8
 8002740:	d80c      	bhi.n	800275c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f002 facc 	bl	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	e008      	b.n	800276e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	a7fdabf8 	.word	0xa7fdabf8
 800278c:	cccccccd 	.word	0xcccccccd
 8002790:	40020010 	.word	0x40020010
 8002794:	40020028 	.word	0x40020028
 8002798:	40020040 	.word	0x40020040
 800279c:	40020058 	.word	0x40020058
 80027a0:	40020070 	.word	0x40020070
 80027a4:	40020088 	.word	0x40020088
 80027a8:	400200a0 	.word	0x400200a0
 80027ac:	400200b8 	.word	0x400200b8
 80027b0:	40020410 	.word	0x40020410
 80027b4:	40020428 	.word	0x40020428
 80027b8:	40020440 	.word	0x40020440
 80027bc:	40020458 	.word	0x40020458
 80027c0:	40020470 	.word	0x40020470
 80027c4:	40020488 	.word	0x40020488
 80027c8:	400204a0 	.word	0x400204a0
 80027cc:	400204b8 	.word	0x400204b8
 80027d0:	58025408 	.word	0x58025408
 80027d4:	5802541c 	.word	0x5802541c
 80027d8:	58025430 	.word	0x58025430
 80027dc:	58025444 	.word	0x58025444
 80027e0:	58025458 	.word	0x58025458
 80027e4:	5802546c 	.word	0x5802546c
 80027e8:	58025480 	.word	0x58025480
 80027ec:	58025494 	.word	0x58025494

080027f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e226      	b.n	8002c5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_DMA_Start_IT+0x2a>
 8002816:	2302      	movs	r3, #2
 8002818:	e21f      	b.n	8002c5a <HAL_DMA_Start_IT+0x46a>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	f040 820a 	bne.w	8002c44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a68      	ldr	r2, [pc, #416]	; (80029e4 <HAL_DMA_Start_IT+0x1f4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d04a      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a66      	ldr	r2, [pc, #408]	; (80029e8 <HAL_DMA_Start_IT+0x1f8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d045      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a65      	ldr	r2, [pc, #404]	; (80029ec <HAL_DMA_Start_IT+0x1fc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d040      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a63      	ldr	r2, [pc, #396]	; (80029f0 <HAL_DMA_Start_IT+0x200>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d03b      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a62      	ldr	r2, [pc, #392]	; (80029f4 <HAL_DMA_Start_IT+0x204>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d036      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a60      	ldr	r2, [pc, #384]	; (80029f8 <HAL_DMA_Start_IT+0x208>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d031      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5f      	ldr	r2, [pc, #380]	; (80029fc <HAL_DMA_Start_IT+0x20c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d02c      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a5d      	ldr	r2, [pc, #372]	; (8002a00 <HAL_DMA_Start_IT+0x210>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d027      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5c      	ldr	r2, [pc, #368]	; (8002a04 <HAL_DMA_Start_IT+0x214>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d022      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5a      	ldr	r2, [pc, #360]	; (8002a08 <HAL_DMA_Start_IT+0x218>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01d      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a59      	ldr	r2, [pc, #356]	; (8002a0c <HAL_DMA_Start_IT+0x21c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d018      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a57      	ldr	r2, [pc, #348]	; (8002a10 <HAL_DMA_Start_IT+0x220>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a56      	ldr	r2, [pc, #344]	; (8002a14 <HAL_DMA_Start_IT+0x224>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00e      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a54      	ldr	r2, [pc, #336]	; (8002a18 <HAL_DMA_Start_IT+0x228>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a53      	ldr	r2, [pc, #332]	; (8002a1c <HAL_DMA_Start_IT+0x22c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a51      	ldr	r2, [pc, #324]	; (8002a20 <HAL_DMA_Start_IT+0x230>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d108      	bne.n	80028f0 <HAL_DMA_Start_IT+0x100>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e007      	b.n	8002900 <HAL_DMA_Start_IT+0x110>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f001 fe76 	bl	80045f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a34      	ldr	r2, [pc, #208]	; (80029e4 <HAL_DMA_Start_IT+0x1f4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d04a      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a33      	ldr	r2, [pc, #204]	; (80029e8 <HAL_DMA_Start_IT+0x1f8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d045      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a31      	ldr	r2, [pc, #196]	; (80029ec <HAL_DMA_Start_IT+0x1fc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d040      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <HAL_DMA_Start_IT+0x200>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d03b      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <HAL_DMA_Start_IT+0x204>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d036      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <HAL_DMA_Start_IT+0x208>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d031      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_DMA_Start_IT+0x20c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d02c      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <HAL_DMA_Start_IT+0x210>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d027      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <HAL_DMA_Start_IT+0x214>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d022      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <HAL_DMA_Start_IT+0x218>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d01d      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <HAL_DMA_Start_IT+0x21c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d018      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <HAL_DMA_Start_IT+0x220>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <HAL_DMA_Start_IT+0x224>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00e      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <HAL_DMA_Start_IT+0x228>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_DMA_Start_IT+0x22c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <HAL_DMA_Start_IT+0x230>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_DMA_Start_IT+0x1c0>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_DMA_Start_IT+0x1c2>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d036      	beq.n	8002a24 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 021e 	bic.w	r2, r3, #30
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0216 	orr.w	r2, r2, #22
 80029c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d03e      	beq.n	8002a50 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0208 	orr.w	r2, r2, #8
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e035      	b.n	8002a50 <HAL_DMA_Start_IT+0x260>
 80029e4:	40020010 	.word	0x40020010
 80029e8:	40020028 	.word	0x40020028
 80029ec:	40020040 	.word	0x40020040
 80029f0:	40020058 	.word	0x40020058
 80029f4:	40020070 	.word	0x40020070
 80029f8:	40020088 	.word	0x40020088
 80029fc:	400200a0 	.word	0x400200a0
 8002a00:	400200b8 	.word	0x400200b8
 8002a04:	40020410 	.word	0x40020410
 8002a08:	40020428 	.word	0x40020428
 8002a0c:	40020440 	.word	0x40020440
 8002a10:	40020458 	.word	0x40020458
 8002a14:	40020470 	.word	0x40020470
 8002a18:	40020488 	.word	0x40020488
 8002a1c:	400204a0 	.word	0x400204a0
 8002a20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 020e 	bic.w	r2, r3, #14
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 020a 	orr.w	r2, r2, #10
 8002a36:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0204 	orr.w	r2, r2, #4
 8002a4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a83      	ldr	r2, [pc, #524]	; (8002c64 <HAL_DMA_Start_IT+0x474>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d072      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a82      	ldr	r2, [pc, #520]	; (8002c68 <HAL_DMA_Start_IT+0x478>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d06d      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a80      	ldr	r2, [pc, #512]	; (8002c6c <HAL_DMA_Start_IT+0x47c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d068      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7f      	ldr	r2, [pc, #508]	; (8002c70 <HAL_DMA_Start_IT+0x480>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d063      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7d      	ldr	r2, [pc, #500]	; (8002c74 <HAL_DMA_Start_IT+0x484>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d05e      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7c      	ldr	r2, [pc, #496]	; (8002c78 <HAL_DMA_Start_IT+0x488>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d059      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7a      	ldr	r2, [pc, #488]	; (8002c7c <HAL_DMA_Start_IT+0x48c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d054      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a79      	ldr	r2, [pc, #484]	; (8002c80 <HAL_DMA_Start_IT+0x490>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d04f      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a77      	ldr	r2, [pc, #476]	; (8002c84 <HAL_DMA_Start_IT+0x494>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d04a      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a76      	ldr	r2, [pc, #472]	; (8002c88 <HAL_DMA_Start_IT+0x498>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d045      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a74      	ldr	r2, [pc, #464]	; (8002c8c <HAL_DMA_Start_IT+0x49c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d040      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a73      	ldr	r2, [pc, #460]	; (8002c90 <HAL_DMA_Start_IT+0x4a0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d03b      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a71      	ldr	r2, [pc, #452]	; (8002c94 <HAL_DMA_Start_IT+0x4a4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d036      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a70      	ldr	r2, [pc, #448]	; (8002c98 <HAL_DMA_Start_IT+0x4a8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d031      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6e      	ldr	r2, [pc, #440]	; (8002c9c <HAL_DMA_Start_IT+0x4ac>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d02c      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6d      	ldr	r2, [pc, #436]	; (8002ca0 <HAL_DMA_Start_IT+0x4b0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d027      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a6b      	ldr	r2, [pc, #428]	; (8002ca4 <HAL_DMA_Start_IT+0x4b4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d022      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6a      	ldr	r2, [pc, #424]	; (8002ca8 <HAL_DMA_Start_IT+0x4b8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d01d      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a68      	ldr	r2, [pc, #416]	; (8002cac <HAL_DMA_Start_IT+0x4bc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d018      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a67      	ldr	r2, [pc, #412]	; (8002cb0 <HAL_DMA_Start_IT+0x4c0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a65      	ldr	r2, [pc, #404]	; (8002cb4 <HAL_DMA_Start_IT+0x4c4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00e      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a64      	ldr	r2, [pc, #400]	; (8002cb8 <HAL_DMA_Start_IT+0x4c8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a62      	ldr	r2, [pc, #392]	; (8002cbc <HAL_DMA_Start_IT+0x4cc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a61      	ldr	r2, [pc, #388]	; (8002cc0 <HAL_DMA_Start_IT+0x4d0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_DMA_Start_IT+0x354>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_DMA_Start_IT+0x356>
 8002b44:	2300      	movs	r3, #0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01a      	beq.n	8002b80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a37      	ldr	r2, [pc, #220]	; (8002c64 <HAL_DMA_Start_IT+0x474>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d04a      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a36      	ldr	r2, [pc, #216]	; (8002c68 <HAL_DMA_Start_IT+0x478>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d045      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a34      	ldr	r2, [pc, #208]	; (8002c6c <HAL_DMA_Start_IT+0x47c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d040      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a33      	ldr	r2, [pc, #204]	; (8002c70 <HAL_DMA_Start_IT+0x480>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d03b      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a31      	ldr	r2, [pc, #196]	; (8002c74 <HAL_DMA_Start_IT+0x484>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d036      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a30      	ldr	r2, [pc, #192]	; (8002c78 <HAL_DMA_Start_IT+0x488>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d031      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2e      	ldr	r2, [pc, #184]	; (8002c7c <HAL_DMA_Start_IT+0x48c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02c      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2d      	ldr	r2, [pc, #180]	; (8002c80 <HAL_DMA_Start_IT+0x490>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d027      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <HAL_DMA_Start_IT+0x494>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d022      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <HAL_DMA_Start_IT+0x498>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d01d      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <HAL_DMA_Start_IT+0x49c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d018      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <HAL_DMA_Start_IT+0x4a0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a25      	ldr	r2, [pc, #148]	; (8002c94 <HAL_DMA_Start_IT+0x4a4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <HAL_DMA_Start_IT+0x4a8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <HAL_DMA_Start_IT+0x4ac>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <HAL_DMA_Start_IT+0x4b0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d108      	bne.n	8002c32 <HAL_DMA_Start_IT+0x442>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e012      	b.n	8002c58 <HAL_DMA_Start_IT+0x468>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e009      	b.n	8002c58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40020010 	.word	0x40020010
 8002c68:	40020028 	.word	0x40020028
 8002c6c:	40020040 	.word	0x40020040
 8002c70:	40020058 	.word	0x40020058
 8002c74:	40020070 	.word	0x40020070
 8002c78:	40020088 	.word	0x40020088
 8002c7c:	400200a0 	.word	0x400200a0
 8002c80:	400200b8 	.word	0x400200b8
 8002c84:	40020410 	.word	0x40020410
 8002c88:	40020428 	.word	0x40020428
 8002c8c:	40020440 	.word	0x40020440
 8002c90:	40020458 	.word	0x40020458
 8002c94:	40020470 	.word	0x40020470
 8002c98:	40020488 	.word	0x40020488
 8002c9c:	400204a0 	.word	0x400204a0
 8002ca0:	400204b8 	.word	0x400204b8
 8002ca4:	58025408 	.word	0x58025408
 8002ca8:	5802541c 	.word	0x5802541c
 8002cac:	58025430 	.word	0x58025430
 8002cb0:	58025444 	.word	0x58025444
 8002cb4:	58025458 	.word	0x58025458
 8002cb8:	5802546c 	.word	0x5802546c
 8002cbc:	58025480 	.word	0x58025480
 8002cc0:	58025494 	.word	0x58025494

08002cc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff f908 	bl	8001ee0 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e2dc      	b.n	8003296 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2280      	movs	r2, #128	; 0x80
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e2cd      	b.n	8003296 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a76      	ldr	r2, [pc, #472]	; (8002ed8 <HAL_DMA_Abort+0x214>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d04a      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a74      	ldr	r2, [pc, #464]	; (8002edc <HAL_DMA_Abort+0x218>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d045      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a73      	ldr	r2, [pc, #460]	; (8002ee0 <HAL_DMA_Abort+0x21c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d040      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a71      	ldr	r2, [pc, #452]	; (8002ee4 <HAL_DMA_Abort+0x220>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d03b      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a70      	ldr	r2, [pc, #448]	; (8002ee8 <HAL_DMA_Abort+0x224>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d036      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6e      	ldr	r2, [pc, #440]	; (8002eec <HAL_DMA_Abort+0x228>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d031      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6d      	ldr	r2, [pc, #436]	; (8002ef0 <HAL_DMA_Abort+0x22c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d02c      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6b      	ldr	r2, [pc, #428]	; (8002ef4 <HAL_DMA_Abort+0x230>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d027      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6a      	ldr	r2, [pc, #424]	; (8002ef8 <HAL_DMA_Abort+0x234>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d022      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a68      	ldr	r2, [pc, #416]	; (8002efc <HAL_DMA_Abort+0x238>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01d      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a67      	ldr	r2, [pc, #412]	; (8002f00 <HAL_DMA_Abort+0x23c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d018      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a65      	ldr	r2, [pc, #404]	; (8002f04 <HAL_DMA_Abort+0x240>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a64      	ldr	r2, [pc, #400]	; (8002f08 <HAL_DMA_Abort+0x244>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a62      	ldr	r2, [pc, #392]	; (8002f0c <HAL_DMA_Abort+0x248>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a61      	ldr	r2, [pc, #388]	; (8002f10 <HAL_DMA_Abort+0x24c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5f      	ldr	r2, [pc, #380]	; (8002f14 <HAL_DMA_Abort+0x250>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_Abort+0xda>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_DMA_Abort+0xdc>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 021e 	bic.w	r2, r2, #30
 8002db2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e00a      	b.n	8002de2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a3c      	ldr	r2, [pc, #240]	; (8002ed8 <HAL_DMA_Abort+0x214>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d072      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a3a      	ldr	r2, [pc, #232]	; (8002edc <HAL_DMA_Abort+0x218>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d06d      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a39      	ldr	r2, [pc, #228]	; (8002ee0 <HAL_DMA_Abort+0x21c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d068      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a37      	ldr	r2, [pc, #220]	; (8002ee4 <HAL_DMA_Abort+0x220>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d063      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a36      	ldr	r2, [pc, #216]	; (8002ee8 <HAL_DMA_Abort+0x224>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d05e      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a34      	ldr	r2, [pc, #208]	; (8002eec <HAL_DMA_Abort+0x228>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d059      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a33      	ldr	r2, [pc, #204]	; (8002ef0 <HAL_DMA_Abort+0x22c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d054      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a31      	ldr	r2, [pc, #196]	; (8002ef4 <HAL_DMA_Abort+0x230>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d04f      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a30      	ldr	r2, [pc, #192]	; (8002ef8 <HAL_DMA_Abort+0x234>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d04a      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a2e      	ldr	r2, [pc, #184]	; (8002efc <HAL_DMA_Abort+0x238>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d045      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2d      	ldr	r2, [pc, #180]	; (8002f00 <HAL_DMA_Abort+0x23c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d040      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2b      	ldr	r2, [pc, #172]	; (8002f04 <HAL_DMA_Abort+0x240>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d03b      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2a      	ldr	r2, [pc, #168]	; (8002f08 <HAL_DMA_Abort+0x244>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d036      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <HAL_DMA_Abort+0x248>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d031      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a27      	ldr	r2, [pc, #156]	; (8002f10 <HAL_DMA_Abort+0x24c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d02c      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <HAL_DMA_Abort+0x250>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d027      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <HAL_DMA_Abort+0x254>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <HAL_DMA_Abort+0x258>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01d      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <HAL_DMA_Abort+0x25c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <HAL_DMA_Abort+0x260>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_DMA_Abort+0x264>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_DMA_Abort+0x268>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_DMA_Abort+0x26c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <HAL_DMA_Abort+0x270>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d132      	bne.n	8002f38 <HAL_DMA_Abort+0x274>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e031      	b.n	8002f3a <HAL_DMA_Abort+0x276>
 8002ed6:	bf00      	nop
 8002ed8:	40020010 	.word	0x40020010
 8002edc:	40020028 	.word	0x40020028
 8002ee0:	40020040 	.word	0x40020040
 8002ee4:	40020058 	.word	0x40020058
 8002ee8:	40020070 	.word	0x40020070
 8002eec:	40020088 	.word	0x40020088
 8002ef0:	400200a0 	.word	0x400200a0
 8002ef4:	400200b8 	.word	0x400200b8
 8002ef8:	40020410 	.word	0x40020410
 8002efc:	40020428 	.word	0x40020428
 8002f00:	40020440 	.word	0x40020440
 8002f04:	40020458 	.word	0x40020458
 8002f08:	40020470 	.word	0x40020470
 8002f0c:	40020488 	.word	0x40020488
 8002f10:	400204a0 	.word	0x400204a0
 8002f14:	400204b8 	.word	0x400204b8
 8002f18:	58025408 	.word	0x58025408
 8002f1c:	5802541c 	.word	0x5802541c
 8002f20:	58025430 	.word	0x58025430
 8002f24:	58025444 	.word	0x58025444
 8002f28:	58025458 	.word	0x58025458
 8002f2c:	5802546c 	.word	0x5802546c
 8002f30:	58025480 	.word	0x58025480
 8002f34:	58025494 	.word	0x58025494
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6d      	ldr	r2, [pc, #436]	; (8003108 <HAL_DMA_Abort+0x444>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d04a      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	; (800310c <HAL_DMA_Abort+0x448>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d045      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6a      	ldr	r2, [pc, #424]	; (8003110 <HAL_DMA_Abort+0x44c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d040      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a68      	ldr	r2, [pc, #416]	; (8003114 <HAL_DMA_Abort+0x450>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d03b      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a67      	ldr	r2, [pc, #412]	; (8003118 <HAL_DMA_Abort+0x454>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d036      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a65      	ldr	r2, [pc, #404]	; (800311c <HAL_DMA_Abort+0x458>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d031      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a64      	ldr	r2, [pc, #400]	; (8003120 <HAL_DMA_Abort+0x45c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02c      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a62      	ldr	r2, [pc, #392]	; (8003124 <HAL_DMA_Abort+0x460>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d027      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a61      	ldr	r2, [pc, #388]	; (8003128 <HAL_DMA_Abort+0x464>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5f      	ldr	r2, [pc, #380]	; (800312c <HAL_DMA_Abort+0x468>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5e      	ldr	r2, [pc, #376]	; (8003130 <HAL_DMA_Abort+0x46c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5c      	ldr	r2, [pc, #368]	; (8003134 <HAL_DMA_Abort+0x470>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5b      	ldr	r2, [pc, #364]	; (8003138 <HAL_DMA_Abort+0x474>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a59      	ldr	r2, [pc, #356]	; (800313c <HAL_DMA_Abort+0x478>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a58      	ldr	r2, [pc, #352]	; (8003140 <HAL_DMA_Abort+0x47c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a56      	ldr	r2, [pc, #344]	; (8003144 <HAL_DMA_Abort+0x480>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <HAL_DMA_Abort+0x33c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e007      	b.n	8003010 <HAL_DMA_Abort+0x34c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003010:	e013      	b.n	800303a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003012:	f7fe ff65 	bl	8001ee0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b05      	cmp	r3, #5
 800301e:	d90c      	bls.n	800303a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2203      	movs	r2, #3
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e12d      	b.n	8003296 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e5      	bne.n	8003012 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2f      	ldr	r2, [pc, #188]	; (8003108 <HAL_DMA_Abort+0x444>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d04a      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2d      	ldr	r2, [pc, #180]	; (800310c <HAL_DMA_Abort+0x448>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d045      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2c      	ldr	r2, [pc, #176]	; (8003110 <HAL_DMA_Abort+0x44c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d040      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <HAL_DMA_Abort+0x450>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d03b      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a29      	ldr	r2, [pc, #164]	; (8003118 <HAL_DMA_Abort+0x454>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d036      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a27      	ldr	r2, [pc, #156]	; (800311c <HAL_DMA_Abort+0x458>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d031      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a26      	ldr	r2, [pc, #152]	; (8003120 <HAL_DMA_Abort+0x45c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d02c      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a24      	ldr	r2, [pc, #144]	; (8003124 <HAL_DMA_Abort+0x460>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d027      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a23      	ldr	r2, [pc, #140]	; (8003128 <HAL_DMA_Abort+0x464>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d022      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a21      	ldr	r2, [pc, #132]	; (800312c <HAL_DMA_Abort+0x468>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01d      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a20      	ldr	r2, [pc, #128]	; (8003130 <HAL_DMA_Abort+0x46c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d018      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <HAL_DMA_Abort+0x470>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <HAL_DMA_Abort+0x474>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1b      	ldr	r2, [pc, #108]	; (800313c <HAL_DMA_Abort+0x478>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_DMA_Abort+0x47c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_DMA_Abort+0x480>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_DMA_Abort+0x426>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_DMA_Abort+0x428>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02b      	beq.n	8003148 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	223f      	movs	r2, #63	; 0x3f
 8003100:	409a      	lsls	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	e02a      	b.n	800315e <HAL_DMA_Abort+0x49a>
 8003108:	40020010 	.word	0x40020010
 800310c:	40020028 	.word	0x40020028
 8003110:	40020040 	.word	0x40020040
 8003114:	40020058 	.word	0x40020058
 8003118:	40020070 	.word	0x40020070
 800311c:	40020088 	.word	0x40020088
 8003120:	400200a0 	.word	0x400200a0
 8003124:	400200b8 	.word	0x400200b8
 8003128:	40020410 	.word	0x40020410
 800312c:	40020428 	.word	0x40020428
 8003130:	40020440 	.word	0x40020440
 8003134:	40020458 	.word	0x40020458
 8003138:	40020470 	.word	0x40020470
 800313c:	40020488 	.word	0x40020488
 8003140:	400204a0 	.word	0x400204a0
 8003144:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2201      	movs	r2, #1
 8003158:	409a      	lsls	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a4f      	ldr	r2, [pc, #316]	; (80032a0 <HAL_DMA_Abort+0x5dc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d072      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4d      	ldr	r2, [pc, #308]	; (80032a4 <HAL_DMA_Abort+0x5e0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d06d      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4c      	ldr	r2, [pc, #304]	; (80032a8 <HAL_DMA_Abort+0x5e4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d068      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a4a      	ldr	r2, [pc, #296]	; (80032ac <HAL_DMA_Abort+0x5e8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d063      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a49      	ldr	r2, [pc, #292]	; (80032b0 <HAL_DMA_Abort+0x5ec>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d05e      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a47      	ldr	r2, [pc, #284]	; (80032b4 <HAL_DMA_Abort+0x5f0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d059      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a46      	ldr	r2, [pc, #280]	; (80032b8 <HAL_DMA_Abort+0x5f4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d054      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a44      	ldr	r2, [pc, #272]	; (80032bc <HAL_DMA_Abort+0x5f8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d04f      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a43      	ldr	r2, [pc, #268]	; (80032c0 <HAL_DMA_Abort+0x5fc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04a      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a41      	ldr	r2, [pc, #260]	; (80032c4 <HAL_DMA_Abort+0x600>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d045      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a40      	ldr	r2, [pc, #256]	; (80032c8 <HAL_DMA_Abort+0x604>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a3e      	ldr	r2, [pc, #248]	; (80032cc <HAL_DMA_Abort+0x608>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d03b      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a3d      	ldr	r2, [pc, #244]	; (80032d0 <HAL_DMA_Abort+0x60c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d036      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a3b      	ldr	r2, [pc, #236]	; (80032d4 <HAL_DMA_Abort+0x610>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_DMA_Abort+0x614>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d02c      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a38      	ldr	r2, [pc, #224]	; (80032dc <HAL_DMA_Abort+0x618>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d027      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a37      	ldr	r2, [pc, #220]	; (80032e0 <HAL_DMA_Abort+0x61c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a35      	ldr	r2, [pc, #212]	; (80032e4 <HAL_DMA_Abort+0x620>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a34      	ldr	r2, [pc, #208]	; (80032e8 <HAL_DMA_Abort+0x624>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a32      	ldr	r2, [pc, #200]	; (80032ec <HAL_DMA_Abort+0x628>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a31      	ldr	r2, [pc, #196]	; (80032f0 <HAL_DMA_Abort+0x62c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2f      	ldr	r2, [pc, #188]	; (80032f4 <HAL_DMA_Abort+0x630>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2e      	ldr	r2, [pc, #184]	; (80032f8 <HAL_DMA_Abort+0x634>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2c      	ldr	r2, [pc, #176]	; (80032fc <HAL_DMA_Abort+0x638>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_DMA_Abort+0x58e>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_DMA_Abort+0x590>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003260:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003278:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003282:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40020010 	.word	0x40020010
 80032a4:	40020028 	.word	0x40020028
 80032a8:	40020040 	.word	0x40020040
 80032ac:	40020058 	.word	0x40020058
 80032b0:	40020070 	.word	0x40020070
 80032b4:	40020088 	.word	0x40020088
 80032b8:	400200a0 	.word	0x400200a0
 80032bc:	400200b8 	.word	0x400200b8
 80032c0:	40020410 	.word	0x40020410
 80032c4:	40020428 	.word	0x40020428
 80032c8:	40020440 	.word	0x40020440
 80032cc:	40020458 	.word	0x40020458
 80032d0:	40020470 	.word	0x40020470
 80032d4:	40020488 	.word	0x40020488
 80032d8:	400204a0 	.word	0x400204a0
 80032dc:	400204b8 	.word	0x400204b8
 80032e0:	58025408 	.word	0x58025408
 80032e4:	5802541c 	.word	0x5802541c
 80032e8:	58025430 	.word	0x58025430
 80032ec:	58025444 	.word	0x58025444
 80032f0:	58025458 	.word	0x58025458
 80032f4:	5802546c 	.word	0x5802546c
 80032f8:	58025480 	.word	0x58025480
 80032fc:	58025494 	.word	0x58025494

08003300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e237      	b.n	8003782 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d004      	beq.n	8003328 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e22c      	b.n	8003782 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5c      	ldr	r2, [pc, #368]	; (80034a0 <HAL_DMA_Abort_IT+0x1a0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04a      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a5b      	ldr	r2, [pc, #364]	; (80034a4 <HAL_DMA_Abort_IT+0x1a4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d045      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a59      	ldr	r2, [pc, #356]	; (80034a8 <HAL_DMA_Abort_IT+0x1a8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d040      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a58      	ldr	r2, [pc, #352]	; (80034ac <HAL_DMA_Abort_IT+0x1ac>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d03b      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a56      	ldr	r2, [pc, #344]	; (80034b0 <HAL_DMA_Abort_IT+0x1b0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d036      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a55      	ldr	r2, [pc, #340]	; (80034b4 <HAL_DMA_Abort_IT+0x1b4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d031      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a53      	ldr	r2, [pc, #332]	; (80034b8 <HAL_DMA_Abort_IT+0x1b8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d02c      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a52      	ldr	r2, [pc, #328]	; (80034bc <HAL_DMA_Abort_IT+0x1bc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d027      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a50      	ldr	r2, [pc, #320]	; (80034c0 <HAL_DMA_Abort_IT+0x1c0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d022      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a4f      	ldr	r2, [pc, #316]	; (80034c4 <HAL_DMA_Abort_IT+0x1c4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d01d      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a4d      	ldr	r2, [pc, #308]	; (80034c8 <HAL_DMA_Abort_IT+0x1c8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a4c      	ldr	r2, [pc, #304]	; (80034cc <HAL_DMA_Abort_IT+0x1cc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a4a      	ldr	r2, [pc, #296]	; (80034d0 <HAL_DMA_Abort_IT+0x1d0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a49      	ldr	r2, [pc, #292]	; (80034d4 <HAL_DMA_Abort_IT+0x1d4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a47      	ldr	r2, [pc, #284]	; (80034d8 <HAL_DMA_Abort_IT+0x1d8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a46      	ldr	r2, [pc, #280]	; (80034dc <HAL_DMA_Abort_IT+0x1dc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_DMA_Abort_IT+0xcc>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_DMA_Abort_IT+0xce>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8086 	beq.w	80034e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2204      	movs	r2, #4
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <HAL_DMA_Abort_IT+0x1a0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d04a      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2e      	ldr	r2, [pc, #184]	; (80034a4 <HAL_DMA_Abort_IT+0x1a4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d045      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <HAL_DMA_Abort_IT+0x1a8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d040      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <HAL_DMA_Abort_IT+0x1ac>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d03b      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <HAL_DMA_Abort_IT+0x1b0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d036      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a28      	ldr	r2, [pc, #160]	; (80034b4 <HAL_DMA_Abort_IT+0x1b4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d031      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <HAL_DMA_Abort_IT+0x1b8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02c      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a25      	ldr	r2, [pc, #148]	; (80034bc <HAL_DMA_Abort_IT+0x1bc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d027      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_DMA_Abort_IT+0x1c0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_DMA_Abort_IT+0x1c4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d01d      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <HAL_DMA_Abort_IT+0x1c8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <HAL_DMA_Abort_IT+0x1cc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <HAL_DMA_Abort_IT+0x1d0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_DMA_Abort_IT+0x1d4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <HAL_DMA_Abort_IT+0x1d8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a19      	ldr	r2, [pc, #100]	; (80034dc <HAL_DMA_Abort_IT+0x1dc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d108      	bne.n	800348e <HAL_DMA_Abort_IT+0x18e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e178      	b.n	8003780 <HAL_DMA_Abort_IT+0x480>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e16f      	b.n	8003780 <HAL_DMA_Abort_IT+0x480>
 80034a0:	40020010 	.word	0x40020010
 80034a4:	40020028 	.word	0x40020028
 80034a8:	40020040 	.word	0x40020040
 80034ac:	40020058 	.word	0x40020058
 80034b0:	40020070 	.word	0x40020070
 80034b4:	40020088 	.word	0x40020088
 80034b8:	400200a0 	.word	0x400200a0
 80034bc:	400200b8 	.word	0x400200b8
 80034c0:	40020410 	.word	0x40020410
 80034c4:	40020428 	.word	0x40020428
 80034c8:	40020440 	.word	0x40020440
 80034cc:	40020458 	.word	0x40020458
 80034d0:	40020470 	.word	0x40020470
 80034d4:	40020488 	.word	0x40020488
 80034d8:	400204a0 	.word	0x400204a0
 80034dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 020e 	bic.w	r2, r2, #14
 80034ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6c      	ldr	r2, [pc, #432]	; (80036a8 <HAL_DMA_Abort_IT+0x3a8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d04a      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a6b      	ldr	r2, [pc, #428]	; (80036ac <HAL_DMA_Abort_IT+0x3ac>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d045      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a69      	ldr	r2, [pc, #420]	; (80036b0 <HAL_DMA_Abort_IT+0x3b0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d040      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a68      	ldr	r2, [pc, #416]	; (80036b4 <HAL_DMA_Abort_IT+0x3b4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d03b      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a66      	ldr	r2, [pc, #408]	; (80036b8 <HAL_DMA_Abort_IT+0x3b8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d036      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a65      	ldr	r2, [pc, #404]	; (80036bc <HAL_DMA_Abort_IT+0x3bc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d031      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a63      	ldr	r2, [pc, #396]	; (80036c0 <HAL_DMA_Abort_IT+0x3c0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02c      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a62      	ldr	r2, [pc, #392]	; (80036c4 <HAL_DMA_Abort_IT+0x3c4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d027      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a60      	ldr	r2, [pc, #384]	; (80036c8 <HAL_DMA_Abort_IT+0x3c8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d022      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5f      	ldr	r2, [pc, #380]	; (80036cc <HAL_DMA_Abort_IT+0x3cc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01d      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a5d      	ldr	r2, [pc, #372]	; (80036d0 <HAL_DMA_Abort_IT+0x3d0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d018      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5c      	ldr	r2, [pc, #368]	; (80036d4 <HAL_DMA_Abort_IT+0x3d4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5a      	ldr	r2, [pc, #360]	; (80036d8 <HAL_DMA_Abort_IT+0x3d8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00e      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a59      	ldr	r2, [pc, #356]	; (80036dc <HAL_DMA_Abort_IT+0x3dc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a57      	ldr	r2, [pc, #348]	; (80036e0 <HAL_DMA_Abort_IT+0x3e0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a56      	ldr	r2, [pc, #344]	; (80036e4 <HAL_DMA_Abort_IT+0x3e4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d108      	bne.n	80035a2 <HAL_DMA_Abort_IT+0x2a2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e007      	b.n	80035b2 <HAL_DMA_Abort_IT+0x2b2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <HAL_DMA_Abort_IT+0x3a8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d072      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3a      	ldr	r2, [pc, #232]	; (80036ac <HAL_DMA_Abort_IT+0x3ac>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d06d      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a39      	ldr	r2, [pc, #228]	; (80036b0 <HAL_DMA_Abort_IT+0x3b0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d068      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a37      	ldr	r2, [pc, #220]	; (80036b4 <HAL_DMA_Abort_IT+0x3b4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d063      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a36      	ldr	r2, [pc, #216]	; (80036b8 <HAL_DMA_Abort_IT+0x3b8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d05e      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a34      	ldr	r2, [pc, #208]	; (80036bc <HAL_DMA_Abort_IT+0x3bc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d059      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a33      	ldr	r2, [pc, #204]	; (80036c0 <HAL_DMA_Abort_IT+0x3c0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d054      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a31      	ldr	r2, [pc, #196]	; (80036c4 <HAL_DMA_Abort_IT+0x3c4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d04f      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a30      	ldr	r2, [pc, #192]	; (80036c8 <HAL_DMA_Abort_IT+0x3c8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d04a      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2e      	ldr	r2, [pc, #184]	; (80036cc <HAL_DMA_Abort_IT+0x3cc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d045      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a2d      	ldr	r2, [pc, #180]	; (80036d0 <HAL_DMA_Abort_IT+0x3d0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d040      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2b      	ldr	r2, [pc, #172]	; (80036d4 <HAL_DMA_Abort_IT+0x3d4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d03b      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <HAL_DMA_Abort_IT+0x3d8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d036      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a28      	ldr	r2, [pc, #160]	; (80036dc <HAL_DMA_Abort_IT+0x3dc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d031      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <HAL_DMA_Abort_IT+0x3e0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d02c      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <HAL_DMA_Abort_IT+0x3e4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d027      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <HAL_DMA_Abort_IT+0x3e8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a22      	ldr	r2, [pc, #136]	; (80036ec <HAL_DMA_Abort_IT+0x3ec>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01d      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <HAL_DMA_Abort_IT+0x3f0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <HAL_DMA_Abort_IT+0x3f4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <HAL_DMA_Abort_IT+0x3f8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <HAL_DMA_Abort_IT+0x3fc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <HAL_DMA_Abort_IT+0x400>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_DMA_Abort_IT+0x404>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d132      	bne.n	8003708 <HAL_DMA_Abort_IT+0x408>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e031      	b.n	800370a <HAL_DMA_Abort_IT+0x40a>
 80036a6:	bf00      	nop
 80036a8:	40020010 	.word	0x40020010
 80036ac:	40020028 	.word	0x40020028
 80036b0:	40020040 	.word	0x40020040
 80036b4:	40020058 	.word	0x40020058
 80036b8:	40020070 	.word	0x40020070
 80036bc:	40020088 	.word	0x40020088
 80036c0:	400200a0 	.word	0x400200a0
 80036c4:	400200b8 	.word	0x400200b8
 80036c8:	40020410 	.word	0x40020410
 80036cc:	40020428 	.word	0x40020428
 80036d0:	40020440 	.word	0x40020440
 80036d4:	40020458 	.word	0x40020458
 80036d8:	40020470 	.word	0x40020470
 80036dc:	40020488 	.word	0x40020488
 80036e0:	400204a0 	.word	0x400204a0
 80036e4:	400204b8 	.word	0x400204b8
 80036e8:	58025408 	.word	0x58025408
 80036ec:	5802541c 	.word	0x5802541c
 80036f0:	58025430 	.word	0x58025430
 80036f4:	58025444 	.word	0x58025444
 80036f8:	58025458 	.word	0x58025458
 80036fc:	5802546c 	.word	0x5802546c
 8003700:	58025480 	.word	0x58025480
 8003704:	58025494 	.word	0x58025494
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d028      	beq.n	8003760 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800371c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2201      	movs	r2, #1
 800372e:	409a      	lsls	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800373c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003754:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800375e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop

0800378c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003798:	4b67      	ldr	r3, [pc, #412]	; (8003938 <HAL_DMA_IRQHandler+0x1ac>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a67      	ldr	r2, [pc, #412]	; (800393c <HAL_DMA_IRQHandler+0x1b0>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	0a9b      	lsrs	r3, r3, #10
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a5f      	ldr	r2, [pc, #380]	; (8003940 <HAL_DMA_IRQHandler+0x1b4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d04a      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5d      	ldr	r2, [pc, #372]	; (8003944 <HAL_DMA_IRQHandler+0x1b8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d045      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5c      	ldr	r2, [pc, #368]	; (8003948 <HAL_DMA_IRQHandler+0x1bc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d040      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a5a      	ldr	r2, [pc, #360]	; (800394c <HAL_DMA_IRQHandler+0x1c0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d03b      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a59      	ldr	r2, [pc, #356]	; (8003950 <HAL_DMA_IRQHandler+0x1c4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d036      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a57      	ldr	r2, [pc, #348]	; (8003954 <HAL_DMA_IRQHandler+0x1c8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d031      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a56      	ldr	r2, [pc, #344]	; (8003958 <HAL_DMA_IRQHandler+0x1cc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d02c      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a54      	ldr	r2, [pc, #336]	; (800395c <HAL_DMA_IRQHandler+0x1d0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d027      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a53      	ldr	r2, [pc, #332]	; (8003960 <HAL_DMA_IRQHandler+0x1d4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d022      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a51      	ldr	r2, [pc, #324]	; (8003964 <HAL_DMA_IRQHandler+0x1d8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01d      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a50      	ldr	r2, [pc, #320]	; (8003968 <HAL_DMA_IRQHandler+0x1dc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d018      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4e      	ldr	r2, [pc, #312]	; (800396c <HAL_DMA_IRQHandler+0x1e0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4d      	ldr	r2, [pc, #308]	; (8003970 <HAL_DMA_IRQHandler+0x1e4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00e      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <HAL_DMA_IRQHandler+0x1e8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4a      	ldr	r2, [pc, #296]	; (8003978 <HAL_DMA_IRQHandler+0x1ec>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a48      	ldr	r2, [pc, #288]	; (800397c <HAL_DMA_IRQHandler+0x1f0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_DMA_IRQHandler+0xd6>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_DMA_IRQHandler+0xd8>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 842b 	beq.w	80040c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2208      	movs	r2, #8
 8003874:	409a      	lsls	r2, r3
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80a2 	beq.w	80039c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2e      	ldr	r2, [pc, #184]	; (8003940 <HAL_DMA_IRQHandler+0x1b4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d04a      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <HAL_DMA_IRQHandler+0x1b8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d045      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2b      	ldr	r2, [pc, #172]	; (8003948 <HAL_DMA_IRQHandler+0x1bc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d040      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2a      	ldr	r2, [pc, #168]	; (800394c <HAL_DMA_IRQHandler+0x1c0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d03b      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a28      	ldr	r2, [pc, #160]	; (8003950 <HAL_DMA_IRQHandler+0x1c4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d036      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a27      	ldr	r2, [pc, #156]	; (8003954 <HAL_DMA_IRQHandler+0x1c8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d031      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <HAL_DMA_IRQHandler+0x1cc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d02c      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a24      	ldr	r2, [pc, #144]	; (800395c <HAL_DMA_IRQHandler+0x1d0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d027      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a22      	ldr	r2, [pc, #136]	; (8003960 <HAL_DMA_IRQHandler+0x1d4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d022      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a21      	ldr	r2, [pc, #132]	; (8003964 <HAL_DMA_IRQHandler+0x1d8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d01d      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <HAL_DMA_IRQHandler+0x1dc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d018      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1e      	ldr	r2, [pc, #120]	; (800396c <HAL_DMA_IRQHandler+0x1e0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <HAL_DMA_IRQHandler+0x1e4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00e      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_DMA_IRQHandler+0x1e8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a19      	ldr	r2, [pc, #100]	; (8003978 <HAL_DMA_IRQHandler+0x1ec>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a18      	ldr	r2, [pc, #96]	; (800397c <HAL_DMA_IRQHandler+0x1f0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d12f      	bne.n	8003980 <HAL_DMA_IRQHandler+0x1f4>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e02e      	b.n	8003994 <HAL_DMA_IRQHandler+0x208>
 8003936:	bf00      	nop
 8003938:	24000004 	.word	0x24000004
 800393c:	1b4e81b5 	.word	0x1b4e81b5
 8003940:	40020010 	.word	0x40020010
 8003944:	40020028 	.word	0x40020028
 8003948:	40020040 	.word	0x40020040
 800394c:	40020058 	.word	0x40020058
 8003950:	40020070 	.word	0x40020070
 8003954:	40020088 	.word	0x40020088
 8003958:	400200a0 	.word	0x400200a0
 800395c:	400200b8 	.word	0x400200b8
 8003960:	40020410 	.word	0x40020410
 8003964:	40020428 	.word	0x40020428
 8003968:	40020440 	.word	0x40020440
 800396c:	40020458 	.word	0x40020458
 8003970:	40020470 	.word	0x40020470
 8003974:	40020488 	.word	0x40020488
 8003978:	400204a0 	.word	0x400204a0
 800397c:	400204b8 	.word	0x400204b8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d015      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	2208      	movs	r2, #8
 80039b2:	409a      	lsls	r2, r3
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	fa22 f303 	lsr.w	r3, r2, r3
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d06e      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a69      	ldr	r2, [pc, #420]	; (8003b84 <HAL_DMA_IRQHandler+0x3f8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d04a      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a67      	ldr	r2, [pc, #412]	; (8003b88 <HAL_DMA_IRQHandler+0x3fc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d045      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a66      	ldr	r2, [pc, #408]	; (8003b8c <HAL_DMA_IRQHandler+0x400>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d040      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a64      	ldr	r2, [pc, #400]	; (8003b90 <HAL_DMA_IRQHandler+0x404>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d03b      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a63      	ldr	r2, [pc, #396]	; (8003b94 <HAL_DMA_IRQHandler+0x408>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d036      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a61      	ldr	r2, [pc, #388]	; (8003b98 <HAL_DMA_IRQHandler+0x40c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a60      	ldr	r2, [pc, #384]	; (8003b9c <HAL_DMA_IRQHandler+0x410>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d02c      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5e      	ldr	r2, [pc, #376]	; (8003ba0 <HAL_DMA_IRQHandler+0x414>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d027      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ba4 <HAL_DMA_IRQHandler+0x418>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a5b      	ldr	r2, [pc, #364]	; (8003ba8 <HAL_DMA_IRQHandler+0x41c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5a      	ldr	r2, [pc, #360]	; (8003bac <HAL_DMA_IRQHandler+0x420>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a58      	ldr	r2, [pc, #352]	; (8003bb0 <HAL_DMA_IRQHandler+0x424>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a57      	ldr	r2, [pc, #348]	; (8003bb4 <HAL_DMA_IRQHandler+0x428>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a55      	ldr	r2, [pc, #340]	; (8003bb8 <HAL_DMA_IRQHandler+0x42c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a54      	ldr	r2, [pc, #336]	; (8003bbc <HAL_DMA_IRQHandler+0x430>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a52      	ldr	r2, [pc, #328]	; (8003bc0 <HAL_DMA_IRQHandler+0x434>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10a      	bne.n	8003a90 <HAL_DMA_IRQHandler+0x304>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e003      	b.n	8003a98 <HAL_DMA_IRQHandler+0x30c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	f043 0202 	orr.w	r2, r3, #2
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 808f 	beq.w	8003bec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2c      	ldr	r2, [pc, #176]	; (8003b84 <HAL_DMA_IRQHandler+0x3f8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d04a      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <HAL_DMA_IRQHandler+0x3fc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d045      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <HAL_DMA_IRQHandler+0x400>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d040      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a27      	ldr	r2, [pc, #156]	; (8003b90 <HAL_DMA_IRQHandler+0x404>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d03b      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a26      	ldr	r2, [pc, #152]	; (8003b94 <HAL_DMA_IRQHandler+0x408>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d036      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a24      	ldr	r2, [pc, #144]	; (8003b98 <HAL_DMA_IRQHandler+0x40c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d031      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <HAL_DMA_IRQHandler+0x410>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d02c      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <HAL_DMA_IRQHandler+0x414>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d027      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a20      	ldr	r2, [pc, #128]	; (8003ba4 <HAL_DMA_IRQHandler+0x418>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d022      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <HAL_DMA_IRQHandler+0x41c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01d      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <HAL_DMA_IRQHandler+0x420>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d018      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <HAL_DMA_IRQHandler+0x424>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <HAL_DMA_IRQHandler+0x428>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <HAL_DMA_IRQHandler+0x42c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <HAL_DMA_IRQHandler+0x430>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <HAL_DMA_IRQHandler+0x434>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d12a      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0x438>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e023      	b.n	8003bcc <HAL_DMA_IRQHandler+0x440>
 8003b84:	40020010 	.word	0x40020010
 8003b88:	40020028 	.word	0x40020028
 8003b8c:	40020040 	.word	0x40020040
 8003b90:	40020058 	.word	0x40020058
 8003b94:	40020070 	.word	0x40020070
 8003b98:	40020088 	.word	0x40020088
 8003b9c:	400200a0 	.word	0x400200a0
 8003ba0:	400200b8 	.word	0x400200b8
 8003ba4:	40020410 	.word	0x40020410
 8003ba8:	40020428 	.word	0x40020428
 8003bac:	40020440 	.word	0x40020440
 8003bb0:	40020458 	.word	0x40020458
 8003bb4:	40020470 	.word	0x40020470
 8003bb8:	40020488 	.word	0x40020488
 8003bbc:	400204a0 	.word	0x400204a0
 8003bc0:	400204b8 	.word	0x400204b8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00d      	beq.n	8003bec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2204      	movs	r2, #4
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f043 0204 	orr.w	r2, r3, #4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80a6 	beq.w	8003d4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a85      	ldr	r2, [pc, #532]	; (8003e1c <HAL_DMA_IRQHandler+0x690>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d04a      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a83      	ldr	r2, [pc, #524]	; (8003e20 <HAL_DMA_IRQHandler+0x694>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d045      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a82      	ldr	r2, [pc, #520]	; (8003e24 <HAL_DMA_IRQHandler+0x698>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d040      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a80      	ldr	r2, [pc, #512]	; (8003e28 <HAL_DMA_IRQHandler+0x69c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d03b      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a7f      	ldr	r2, [pc, #508]	; (8003e2c <HAL_DMA_IRQHandler+0x6a0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d036      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7d      	ldr	r2, [pc, #500]	; (8003e30 <HAL_DMA_IRQHandler+0x6a4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d031      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7c      	ldr	r2, [pc, #496]	; (8003e34 <HAL_DMA_IRQHandler+0x6a8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d02c      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a7a      	ldr	r2, [pc, #488]	; (8003e38 <HAL_DMA_IRQHandler+0x6ac>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d027      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a79      	ldr	r2, [pc, #484]	; (8003e3c <HAL_DMA_IRQHandler+0x6b0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d022      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a77      	ldr	r2, [pc, #476]	; (8003e40 <HAL_DMA_IRQHandler+0x6b4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01d      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a76      	ldr	r2, [pc, #472]	; (8003e44 <HAL_DMA_IRQHandler+0x6b8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d018      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a74      	ldr	r2, [pc, #464]	; (8003e48 <HAL_DMA_IRQHandler+0x6bc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a73      	ldr	r2, [pc, #460]	; (8003e4c <HAL_DMA_IRQHandler+0x6c0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a71      	ldr	r2, [pc, #452]	; (8003e50 <HAL_DMA_IRQHandler+0x6c4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d009      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a70      	ldr	r2, [pc, #448]	; (8003e54 <HAL_DMA_IRQHandler+0x6c8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6e      	ldr	r2, [pc, #440]	; (8003e58 <HAL_DMA_IRQHandler+0x6cc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10a      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0x52c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e009      	b.n	8003ccc <HAL_DMA_IRQHandler+0x540>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d03e      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2210      	movs	r2, #16
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d018      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d024      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
 8003d0c:	e01f      	b.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01b      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
 8003d1e:	e016      	b.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d107      	bne.n	8003d3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0208 	bic.w	r2, r2, #8
 8003d3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	2220      	movs	r2, #32
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8110 	beq.w	8003f84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	; (8003e1c <HAL_DMA_IRQHandler+0x690>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d04a      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_DMA_IRQHandler+0x694>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d045      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <HAL_DMA_IRQHandler+0x698>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d040      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_DMA_IRQHandler+0x69c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d03b      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <HAL_DMA_IRQHandler+0x6a0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d036      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_DMA_IRQHandler+0x6a4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d031      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <HAL_DMA_IRQHandler+0x6a8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02c      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_DMA_IRQHandler+0x6ac>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d027      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a20      	ldr	r2, [pc, #128]	; (8003e3c <HAL_DMA_IRQHandler+0x6b0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d022      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_DMA_IRQHandler+0x6b4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01d      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <HAL_DMA_IRQHandler+0x6b8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d018      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_DMA_IRQHandler+0x6bc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1a      	ldr	r2, [pc, #104]	; (8003e4c <HAL_DMA_IRQHandler+0x6c0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_DMA_IRQHandler+0x6c4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <HAL_DMA_IRQHandler+0x6c8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <HAL_DMA_IRQHandler+0x6cc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d12b      	bne.n	8003e5c <HAL_DMA_IRQHandler+0x6d0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	e02a      	b.n	8003e70 <HAL_DMA_IRQHandler+0x6e4>
 8003e1a:	bf00      	nop
 8003e1c:	40020010 	.word	0x40020010
 8003e20:	40020028 	.word	0x40020028
 8003e24:	40020040 	.word	0x40020040
 8003e28:	40020058 	.word	0x40020058
 8003e2c:	40020070 	.word	0x40020070
 8003e30:	40020088 	.word	0x40020088
 8003e34:	400200a0 	.word	0x400200a0
 8003e38:	400200b8 	.word	0x400200b8
 8003e3c:	40020410 	.word	0x40020410
 8003e40:	40020428 	.word	0x40020428
 8003e44:	40020440 	.word	0x40020440
 8003e48:	40020458 	.word	0x40020458
 8003e4c:	40020470 	.word	0x40020470
 8003e50:	40020488 	.word	0x40020488
 8003e54:	400204a0 	.word	0x400204a0
 8003e58:	400204b8 	.word	0x400204b8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bf14      	ite	ne
 8003e6a:	2301      	movne	r3, #1
 8003e6c:	2300      	moveq	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8087 	beq.w	8003f84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	2220      	movs	r2, #32
 8003e80:	409a      	lsls	r2, r3
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d139      	bne.n	8003f06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0216 	bic.w	r2, r2, #22
 8003ea0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_DMA_IRQHandler+0x736>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0208 	bic.w	r2, r2, #8
 8003ed0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	223f      	movs	r2, #63	; 0x3f
 8003edc:	409a      	lsls	r2, r3
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 834a 	beq.w	8004590 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
          }
          return;
 8003f04:	e344      	b.n	8004590 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d018      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d108      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d02c      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
 8003f32:	e027      	b.n	8003f84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d023      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
 8003f44:	e01e      	b.n	8003f84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10f      	bne.n	8003f74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0210 	bic.w	r2, r2, #16
 8003f62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8306 	beq.w	800459a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8088 	beq.w	80040ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a7a      	ldr	r2, [pc, #488]	; (8004194 <HAL_DMA_IRQHandler+0xa08>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d04a      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a79      	ldr	r2, [pc, #484]	; (8004198 <HAL_DMA_IRQHandler+0xa0c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d045      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a77      	ldr	r2, [pc, #476]	; (800419c <HAL_DMA_IRQHandler+0xa10>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d040      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a76      	ldr	r2, [pc, #472]	; (80041a0 <HAL_DMA_IRQHandler+0xa14>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d03b      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a74      	ldr	r2, [pc, #464]	; (80041a4 <HAL_DMA_IRQHandler+0xa18>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d036      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a73      	ldr	r2, [pc, #460]	; (80041a8 <HAL_DMA_IRQHandler+0xa1c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d031      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a71      	ldr	r2, [pc, #452]	; (80041ac <HAL_DMA_IRQHandler+0xa20>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d02c      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a70      	ldr	r2, [pc, #448]	; (80041b0 <HAL_DMA_IRQHandler+0xa24>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d027      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a6e      	ldr	r2, [pc, #440]	; (80041b4 <HAL_DMA_IRQHandler+0xa28>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d022      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6d      	ldr	r2, [pc, #436]	; (80041b8 <HAL_DMA_IRQHandler+0xa2c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d01d      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6b      	ldr	r2, [pc, #428]	; (80041bc <HAL_DMA_IRQHandler+0xa30>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a6a      	ldr	r2, [pc, #424]	; (80041c0 <HAL_DMA_IRQHandler+0xa34>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a68      	ldr	r2, [pc, #416]	; (80041c4 <HAL_DMA_IRQHandler+0xa38>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a67      	ldr	r2, [pc, #412]	; (80041c8 <HAL_DMA_IRQHandler+0xa3c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a65      	ldr	r2, [pc, #404]	; (80041cc <HAL_DMA_IRQHandler+0xa40>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a64      	ldr	r2, [pc, #400]	; (80041d0 <HAL_DMA_IRQHandler+0xa44>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d108      	bne.n	8004056 <HAL_DMA_IRQHandler+0x8ca>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e007      	b.n	8004066 <HAL_DMA_IRQHandler+0x8da>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406e:	429a      	cmp	r2, r3
 8004070:	d307      	bcc.n	8004082 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f2      	bne.n	8004066 <HAL_DMA_IRQHandler+0x8da>
 8004080:	e000      	b.n	8004084 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004082:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d004      	beq.n	800409c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2203      	movs	r2, #3
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800409a:	e003      	b.n	80040a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8272 	beq.w	800459a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4798      	blx	r3
 80040be:	e26c      	b.n	800459a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a43      	ldr	r2, [pc, #268]	; (80041d4 <HAL_DMA_IRQHandler+0xa48>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d022      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a42      	ldr	r2, [pc, #264]	; (80041d8 <HAL_DMA_IRQHandler+0xa4c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d01d      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a40      	ldr	r2, [pc, #256]	; (80041dc <HAL_DMA_IRQHandler+0xa50>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d018      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a3f      	ldr	r2, [pc, #252]	; (80041e0 <HAL_DMA_IRQHandler+0xa54>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d013      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a3d      	ldr	r2, [pc, #244]	; (80041e4 <HAL_DMA_IRQHandler+0xa58>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00e      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a3c      	ldr	r2, [pc, #240]	; (80041e8 <HAL_DMA_IRQHandler+0xa5c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3a      	ldr	r2, [pc, #232]	; (80041ec <HAL_DMA_IRQHandler+0xa60>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a39      	ldr	r2, [pc, #228]	; (80041f0 <HAL_DMA_IRQHandler+0xa64>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_DMA_IRQHandler+0x988>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <HAL_DMA_IRQHandler+0x98a>
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 823f 	beq.w	800459a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2204      	movs	r2, #4
 800412e:	409a      	lsls	r2, r3
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	4013      	ands	r3, r2
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80cd 	beq.w	80042d4 <HAL_DMA_IRQHandler+0xb48>
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 80c7 	beq.w	80042d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	2204      	movs	r2, #4
 8004150:	409a      	lsls	r2, r3
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d049      	beq.n	80041f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8210 	beq.w	8004594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800417c:	e20a      	b.n	8004594 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8206 	beq.w	8004594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004190:	e200      	b.n	8004594 <HAL_DMA_IRQHandler+0xe08>
 8004192:	bf00      	nop
 8004194:	40020010 	.word	0x40020010
 8004198:	40020028 	.word	0x40020028
 800419c:	40020040 	.word	0x40020040
 80041a0:	40020058 	.word	0x40020058
 80041a4:	40020070 	.word	0x40020070
 80041a8:	40020088 	.word	0x40020088
 80041ac:	400200a0 	.word	0x400200a0
 80041b0:	400200b8 	.word	0x400200b8
 80041b4:	40020410 	.word	0x40020410
 80041b8:	40020428 	.word	0x40020428
 80041bc:	40020440 	.word	0x40020440
 80041c0:	40020458 	.word	0x40020458
 80041c4:	40020470 	.word	0x40020470
 80041c8:	40020488 	.word	0x40020488
 80041cc:	400204a0 	.word	0x400204a0
 80041d0:	400204b8 	.word	0x400204b8
 80041d4:	58025408 	.word	0x58025408
 80041d8:	5802541c 	.word	0x5802541c
 80041dc:	58025430 	.word	0x58025430
 80041e0:	58025444 	.word	0x58025444
 80041e4:	58025458 	.word	0x58025458
 80041e8:	5802546c 	.word	0x5802546c
 80041ec:	58025480 	.word	0x58025480
 80041f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d160      	bne.n	80042c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a7f      	ldr	r2, [pc, #508]	; (8004400 <HAL_DMA_IRQHandler+0xc74>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04a      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a7d      	ldr	r2, [pc, #500]	; (8004404 <HAL_DMA_IRQHandler+0xc78>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d045      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7c      	ldr	r2, [pc, #496]	; (8004408 <HAL_DMA_IRQHandler+0xc7c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d040      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a7a      	ldr	r2, [pc, #488]	; (800440c <HAL_DMA_IRQHandler+0xc80>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d03b      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a79      	ldr	r2, [pc, #484]	; (8004410 <HAL_DMA_IRQHandler+0xc84>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d036      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a77      	ldr	r2, [pc, #476]	; (8004414 <HAL_DMA_IRQHandler+0xc88>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a76      	ldr	r2, [pc, #472]	; (8004418 <HAL_DMA_IRQHandler+0xc8c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a74      	ldr	r2, [pc, #464]	; (800441c <HAL_DMA_IRQHandler+0xc90>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d027      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a73      	ldr	r2, [pc, #460]	; (8004420 <HAL_DMA_IRQHandler+0xc94>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a71      	ldr	r2, [pc, #452]	; (8004424 <HAL_DMA_IRQHandler+0xc98>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a70      	ldr	r2, [pc, #448]	; (8004428 <HAL_DMA_IRQHandler+0xc9c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a6e      	ldr	r2, [pc, #440]	; (800442c <HAL_DMA_IRQHandler+0xca0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a6d      	ldr	r2, [pc, #436]	; (8004430 <HAL_DMA_IRQHandler+0xca4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a6b      	ldr	r2, [pc, #428]	; (8004434 <HAL_DMA_IRQHandler+0xca8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6a      	ldr	r2, [pc, #424]	; (8004438 <HAL_DMA_IRQHandler+0xcac>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a68      	ldr	r2, [pc, #416]	; (800443c <HAL_DMA_IRQHandler+0xcb0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <HAL_DMA_IRQHandler+0xb24>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0208 	bic.w	r2, r2, #8
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e007      	b.n	80042c0 <HAL_DMA_IRQHandler+0xb34>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0204 	bic.w	r2, r2, #4
 80042be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8165 	beq.w	8004594 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042d2:	e15f      	b.n	8004594 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2202      	movs	r2, #2
 80042de:	409a      	lsls	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80c5 	beq.w	8004474 <HAL_DMA_IRQHandler+0xce8>
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80bf 	beq.w	8004474 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2202      	movs	r2, #2
 8004300:	409a      	lsls	r2, r3
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d018      	beq.n	8004342 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 813a 	beq.w	8004598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800432c:	e134      	b.n	8004598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8130 	beq.w	8004598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004340:	e12a      	b.n	8004598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 8089 	bne.w	8004460 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <HAL_DMA_IRQHandler+0xc74>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d04a      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a29      	ldr	r2, [pc, #164]	; (8004404 <HAL_DMA_IRQHandler+0xc78>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d045      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a28      	ldr	r2, [pc, #160]	; (8004408 <HAL_DMA_IRQHandler+0xc7c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d040      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a26      	ldr	r2, [pc, #152]	; (800440c <HAL_DMA_IRQHandler+0xc80>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d03b      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a25      	ldr	r2, [pc, #148]	; (8004410 <HAL_DMA_IRQHandler+0xc84>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d036      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a23      	ldr	r2, [pc, #140]	; (8004414 <HAL_DMA_IRQHandler+0xc88>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d031      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_DMA_IRQHandler+0xc8c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d02c      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a20      	ldr	r2, [pc, #128]	; (800441c <HAL_DMA_IRQHandler+0xc90>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d027      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_DMA_IRQHandler+0xc94>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_DMA_IRQHandler+0xc98>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01d      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <HAL_DMA_IRQHandler+0xc9c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1a      	ldr	r2, [pc, #104]	; (800442c <HAL_DMA_IRQHandler+0xca0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_DMA_IRQHandler+0xca4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_DMA_IRQHandler+0xca8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_DMA_IRQHandler+0xcac>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a14      	ldr	r2, [pc, #80]	; (800443c <HAL_DMA_IRQHandler+0xcb0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d128      	bne.n	8004440 <HAL_DMA_IRQHandler+0xcb4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0214 	bic.w	r2, r2, #20
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e027      	b.n	8004450 <HAL_DMA_IRQHandler+0xcc4>
 8004400:	40020010 	.word	0x40020010
 8004404:	40020028 	.word	0x40020028
 8004408:	40020040 	.word	0x40020040
 800440c:	40020058 	.word	0x40020058
 8004410:	40020070 	.word	0x40020070
 8004414:	40020088 	.word	0x40020088
 8004418:	400200a0 	.word	0x400200a0
 800441c:	400200b8 	.word	0x400200b8
 8004420:	40020410 	.word	0x40020410
 8004424:	40020428 	.word	0x40020428
 8004428:	40020440 	.word	0x40020440
 800442c:	40020458 	.word	0x40020458
 8004430:	40020470 	.word	0x40020470
 8004434:	40020488 	.word	0x40020488
 8004438:	400204a0 	.word	0x400204a0
 800443c:	400204b8 	.word	0x400204b8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 020a 	bic.w	r2, r2, #10
 800444e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8097 	beq.w	8004598 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004472:	e091      	b.n	8004598 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2208      	movs	r2, #8
 800447e:	409a      	lsls	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8088 	beq.w	800459a <HAL_DMA_IRQHandler+0xe0e>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8082 	beq.w	800459a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a41      	ldr	r2, [pc, #260]	; (80045a0 <HAL_DMA_IRQHandler+0xe14>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d04a      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3f      	ldr	r2, [pc, #252]	; (80045a4 <HAL_DMA_IRQHandler+0xe18>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d045      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a3e      	ldr	r2, [pc, #248]	; (80045a8 <HAL_DMA_IRQHandler+0xe1c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d040      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a3c      	ldr	r2, [pc, #240]	; (80045ac <HAL_DMA_IRQHandler+0xe20>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d03b      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a3b      	ldr	r2, [pc, #236]	; (80045b0 <HAL_DMA_IRQHandler+0xe24>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d036      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a39      	ldr	r2, [pc, #228]	; (80045b4 <HAL_DMA_IRQHandler+0xe28>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d031      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a38      	ldr	r2, [pc, #224]	; (80045b8 <HAL_DMA_IRQHandler+0xe2c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d02c      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a36      	ldr	r2, [pc, #216]	; (80045bc <HAL_DMA_IRQHandler+0xe30>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d027      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a35      	ldr	r2, [pc, #212]	; (80045c0 <HAL_DMA_IRQHandler+0xe34>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d022      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a33      	ldr	r2, [pc, #204]	; (80045c4 <HAL_DMA_IRQHandler+0xe38>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01d      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a32      	ldr	r2, [pc, #200]	; (80045c8 <HAL_DMA_IRQHandler+0xe3c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a30      	ldr	r2, [pc, #192]	; (80045cc <HAL_DMA_IRQHandler+0xe40>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2f      	ldr	r2, [pc, #188]	; (80045d0 <HAL_DMA_IRQHandler+0xe44>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <HAL_DMA_IRQHandler+0xe48>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2c      	ldr	r2, [pc, #176]	; (80045d8 <HAL_DMA_IRQHandler+0xe4c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <HAL_DMA_IRQHandler+0xe50>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d108      	bne.n	8004548 <HAL_DMA_IRQHandler+0xdbc>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 021c 	bic.w	r2, r2, #28
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e007      	b.n	8004558 <HAL_DMA_IRQHandler+0xdcc>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 020e 	bic.w	r2, r2, #14
 8004556:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2201      	movs	r2, #1
 8004562:	409a      	lsls	r2, r3
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
 800458e:	e004      	b.n	800459a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004590:	bf00      	nop
 8004592:	e002      	b.n	800459a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004594:	bf00      	nop
 8004596:	e000      	b.n	800459a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004598:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800459a:	3728      	adds	r7, #40	; 0x28
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40020010 	.word	0x40020010
 80045a4:	40020028 	.word	0x40020028
 80045a8:	40020040 	.word	0x40020040
 80045ac:	40020058 	.word	0x40020058
 80045b0:	40020070 	.word	0x40020070
 80045b4:	40020088 	.word	0x40020088
 80045b8:	400200a0 	.word	0x400200a0
 80045bc:	400200b8 	.word	0x400200b8
 80045c0:	40020410 	.word	0x40020410
 80045c4:	40020428 	.word	0x40020428
 80045c8:	40020440 	.word	0x40020440
 80045cc:	40020458 	.word	0x40020458
 80045d0:	40020470 	.word	0x40020470
 80045d4:	40020488 	.word	0x40020488
 80045d8:	400204a0 	.word	0x400204a0
 80045dc:	400204b8 	.word	0x400204b8

080045e0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a7f      	ldr	r2, [pc, #508]	; (8004814 <DMA_SetConfig+0x21c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d072      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a7d      	ldr	r2, [pc, #500]	; (8004818 <DMA_SetConfig+0x220>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d06d      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7c      	ldr	r2, [pc, #496]	; (800481c <DMA_SetConfig+0x224>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d068      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a7a      	ldr	r2, [pc, #488]	; (8004820 <DMA_SetConfig+0x228>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d063      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a79      	ldr	r2, [pc, #484]	; (8004824 <DMA_SetConfig+0x22c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d05e      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a77      	ldr	r2, [pc, #476]	; (8004828 <DMA_SetConfig+0x230>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d059      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a76      	ldr	r2, [pc, #472]	; (800482c <DMA_SetConfig+0x234>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d054      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a74      	ldr	r2, [pc, #464]	; (8004830 <DMA_SetConfig+0x238>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d04f      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a73      	ldr	r2, [pc, #460]	; (8004834 <DMA_SetConfig+0x23c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d04a      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a71      	ldr	r2, [pc, #452]	; (8004838 <DMA_SetConfig+0x240>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d045      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a70      	ldr	r2, [pc, #448]	; (800483c <DMA_SetConfig+0x244>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d040      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a6e      	ldr	r2, [pc, #440]	; (8004840 <DMA_SetConfig+0x248>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d03b      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6d      	ldr	r2, [pc, #436]	; (8004844 <DMA_SetConfig+0x24c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d036      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6b      	ldr	r2, [pc, #428]	; (8004848 <DMA_SetConfig+0x250>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6a      	ldr	r2, [pc, #424]	; (800484c <DMA_SetConfig+0x254>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d02c      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a68      	ldr	r2, [pc, #416]	; (8004850 <DMA_SetConfig+0x258>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d027      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a67      	ldr	r2, [pc, #412]	; (8004854 <DMA_SetConfig+0x25c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a65      	ldr	r2, [pc, #404]	; (8004858 <DMA_SetConfig+0x260>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01d      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a64      	ldr	r2, [pc, #400]	; (800485c <DMA_SetConfig+0x264>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a62      	ldr	r2, [pc, #392]	; (8004860 <DMA_SetConfig+0x268>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a61      	ldr	r2, [pc, #388]	; (8004864 <DMA_SetConfig+0x26c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a5f      	ldr	r2, [pc, #380]	; (8004868 <DMA_SetConfig+0x270>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5e      	ldr	r2, [pc, #376]	; (800486c <DMA_SetConfig+0x274>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a5c      	ldr	r2, [pc, #368]	; (8004870 <DMA_SetConfig+0x278>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d101      	bne.n	8004706 <DMA_SetConfig+0x10e>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <DMA_SetConfig+0x110>
 8004706:	2300      	movs	r3, #0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004714:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d004      	beq.n	8004728 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004726:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a39      	ldr	r2, [pc, #228]	; (8004814 <DMA_SetConfig+0x21c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d04a      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a38      	ldr	r2, [pc, #224]	; (8004818 <DMA_SetConfig+0x220>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d045      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a36      	ldr	r2, [pc, #216]	; (800481c <DMA_SetConfig+0x224>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d040      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a35      	ldr	r2, [pc, #212]	; (8004820 <DMA_SetConfig+0x228>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d03b      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a33      	ldr	r2, [pc, #204]	; (8004824 <DMA_SetConfig+0x22c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d036      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a32      	ldr	r2, [pc, #200]	; (8004828 <DMA_SetConfig+0x230>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d031      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a30      	ldr	r2, [pc, #192]	; (800482c <DMA_SetConfig+0x234>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d02c      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2f      	ldr	r2, [pc, #188]	; (8004830 <DMA_SetConfig+0x238>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d027      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <DMA_SetConfig+0x23c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d022      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a2c      	ldr	r2, [pc, #176]	; (8004838 <DMA_SetConfig+0x240>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d01d      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <DMA_SetConfig+0x244>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a29      	ldr	r2, [pc, #164]	; (8004840 <DMA_SetConfig+0x248>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a27      	ldr	r2, [pc, #156]	; (8004844 <DMA_SetConfig+0x24c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a26      	ldr	r2, [pc, #152]	; (8004848 <DMA_SetConfig+0x250>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a24      	ldr	r2, [pc, #144]	; (800484c <DMA_SetConfig+0x254>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a23      	ldr	r2, [pc, #140]	; (8004850 <DMA_SetConfig+0x258>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d101      	bne.n	80047cc <DMA_SetConfig+0x1d4>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <DMA_SetConfig+0x1d6>
 80047cc:	2300      	movs	r3, #0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d059      	beq.n	8004886 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	223f      	movs	r2, #63	; 0x3f
 80047dc:	409a      	lsls	r2, r3
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d138      	bne.n	8004874 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004812:	e086      	b.n	8004922 <DMA_SetConfig+0x32a>
 8004814:	40020010 	.word	0x40020010
 8004818:	40020028 	.word	0x40020028
 800481c:	40020040 	.word	0x40020040
 8004820:	40020058 	.word	0x40020058
 8004824:	40020070 	.word	0x40020070
 8004828:	40020088 	.word	0x40020088
 800482c:	400200a0 	.word	0x400200a0
 8004830:	400200b8 	.word	0x400200b8
 8004834:	40020410 	.word	0x40020410
 8004838:	40020428 	.word	0x40020428
 800483c:	40020440 	.word	0x40020440
 8004840:	40020458 	.word	0x40020458
 8004844:	40020470 	.word	0x40020470
 8004848:	40020488 	.word	0x40020488
 800484c:	400204a0 	.word	0x400204a0
 8004850:	400204b8 	.word	0x400204b8
 8004854:	58025408 	.word	0x58025408
 8004858:	5802541c 	.word	0x5802541c
 800485c:	58025430 	.word	0x58025430
 8004860:	58025444 	.word	0x58025444
 8004864:	58025458 	.word	0x58025458
 8004868:	5802546c 	.word	0x5802546c
 800486c:	58025480 	.word	0x58025480
 8004870:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]
}
 8004884:	e04d      	b.n	8004922 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a29      	ldr	r2, [pc, #164]	; (8004930 <DMA_SetConfig+0x338>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d022      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a27      	ldr	r2, [pc, #156]	; (8004934 <DMA_SetConfig+0x33c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01d      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a26      	ldr	r2, [pc, #152]	; (8004938 <DMA_SetConfig+0x340>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d018      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a24      	ldr	r2, [pc, #144]	; (800493c <DMA_SetConfig+0x344>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a23      	ldr	r2, [pc, #140]	; (8004940 <DMA_SetConfig+0x348>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a21      	ldr	r2, [pc, #132]	; (8004944 <DMA_SetConfig+0x34c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d009      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a20      	ldr	r2, [pc, #128]	; (8004948 <DMA_SetConfig+0x350>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1e      	ldr	r2, [pc, #120]	; (800494c <DMA_SetConfig+0x354>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <DMA_SetConfig+0x2e2>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <DMA_SetConfig+0x2e4>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	2201      	movs	r2, #1
 80048ea:	409a      	lsls	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b40      	cmp	r3, #64	; 0x40
 80048fe:	d108      	bne.n	8004912 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	60da      	str	r2, [r3, #12]
}
 8004910:	e007      	b.n	8004922 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	60da      	str	r2, [r3, #12]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	58025408 	.word	0x58025408
 8004934:	5802541c 	.word	0x5802541c
 8004938:	58025430 	.word	0x58025430
 800493c:	58025444 	.word	0x58025444
 8004940:	58025458 	.word	0x58025458
 8004944:	5802546c 	.word	0x5802546c
 8004948:	58025480 	.word	0x58025480
 800494c:	58025494 	.word	0x58025494

08004950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a42      	ldr	r2, [pc, #264]	; (8004a68 <DMA_CalcBaseAndBitshift+0x118>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d04a      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a41      	ldr	r2, [pc, #260]	; (8004a6c <DMA_CalcBaseAndBitshift+0x11c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d045      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a3f      	ldr	r2, [pc, #252]	; (8004a70 <DMA_CalcBaseAndBitshift+0x120>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d040      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a3e      	ldr	r2, [pc, #248]	; (8004a74 <DMA_CalcBaseAndBitshift+0x124>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d03b      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a3c      	ldr	r2, [pc, #240]	; (8004a78 <DMA_CalcBaseAndBitshift+0x128>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d036      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a3b      	ldr	r2, [pc, #236]	; (8004a7c <DMA_CalcBaseAndBitshift+0x12c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d031      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a39      	ldr	r2, [pc, #228]	; (8004a80 <DMA_CalcBaseAndBitshift+0x130>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d02c      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a38      	ldr	r2, [pc, #224]	; (8004a84 <DMA_CalcBaseAndBitshift+0x134>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d027      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a36      	ldr	r2, [pc, #216]	; (8004a88 <DMA_CalcBaseAndBitshift+0x138>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d022      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a35      	ldr	r2, [pc, #212]	; (8004a8c <DMA_CalcBaseAndBitshift+0x13c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d01d      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a33      	ldr	r2, [pc, #204]	; (8004a90 <DMA_CalcBaseAndBitshift+0x140>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d018      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a32      	ldr	r2, [pc, #200]	; (8004a94 <DMA_CalcBaseAndBitshift+0x144>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a30      	ldr	r2, [pc, #192]	; (8004a98 <DMA_CalcBaseAndBitshift+0x148>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00e      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <DMA_CalcBaseAndBitshift+0x14c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d009      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a2d      	ldr	r2, [pc, #180]	; (8004aa0 <DMA_CalcBaseAndBitshift+0x150>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2c      	ldr	r2, [pc, #176]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x154>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d101      	bne.n	80049fc <DMA_CalcBaseAndBitshift+0xac>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <DMA_CalcBaseAndBitshift+0xae>
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d024      	beq.n	8004a4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3b10      	subs	r3, #16
 8004a0a:	4a27      	ldr	r2, [pc, #156]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x158>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	4a24      	ldr	r2, [pc, #144]	; (8004aac <DMA_CalcBaseAndBitshift+0x15c>)
 8004a1c:	5cd3      	ldrb	r3, [r2, r3]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d908      	bls.n	8004a3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <DMA_CalcBaseAndBitshift+0x160>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	1d1a      	adds	r2, r3, #4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	659a      	str	r2, [r3, #88]	; 0x58
 8004a3a:	e00d      	b.n	8004a58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <DMA_CalcBaseAndBitshift+0x160>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4a:	e005      	b.n	8004a58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40020010 	.word	0x40020010
 8004a6c:	40020028 	.word	0x40020028
 8004a70:	40020040 	.word	0x40020040
 8004a74:	40020058 	.word	0x40020058
 8004a78:	40020070 	.word	0x40020070
 8004a7c:	40020088 	.word	0x40020088
 8004a80:	400200a0 	.word	0x400200a0
 8004a84:	400200b8 	.word	0x400200b8
 8004a88:	40020410 	.word	0x40020410
 8004a8c:	40020428 	.word	0x40020428
 8004a90:	40020440 	.word	0x40020440
 8004a94:	40020458 	.word	0x40020458
 8004a98:	40020470 	.word	0x40020470
 8004a9c:	40020488 	.word	0x40020488
 8004aa0:	400204a0 	.word	0x400204a0
 8004aa4:	400204b8 	.word	0x400204b8
 8004aa8:	aaaaaaab 	.word	0xaaaaaaab
 8004aac:	0800c0a4 	.word	0x0800c0a4
 8004ab0:	fffffc00 	.word	0xfffffc00

08004ab4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d120      	bne.n	8004b0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d858      	bhi.n	8004b82 <DMA_CheckFifoParam+0xce>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <DMA_CheckFifoParam+0x24>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004afb 	.word	0x08004afb
 8004ae0:	08004ae9 	.word	0x08004ae9
 8004ae4:	08004b83 	.word	0x08004b83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d048      	beq.n	8004b86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004af8:	e045      	b.n	8004b86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b02:	d142      	bne.n	8004b8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b08:	e03f      	b.n	8004b8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b12:	d123      	bne.n	8004b5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d838      	bhi.n	8004b8e <DMA_CheckFifoParam+0xda>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <DMA_CheckFifoParam+0x70>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b3b 	.word	0x08004b3b
 8004b2c:	08004b35 	.word	0x08004b35
 8004b30:	08004b4d 	.word	0x08004b4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
        break;
 8004b38:	e030      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d025      	beq.n	8004b92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b4a:	e022      	b.n	8004b92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b54:	d11f      	bne.n	8004b96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b5a:	e01c      	b.n	8004b96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d902      	bls.n	8004b6a <DMA_CheckFifoParam+0xb6>
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d003      	beq.n	8004b70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b68:	e018      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b6e:	e015      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00e      	beq.n	8004b9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8004b80:	e00b      	b.n	8004b9a <DMA_CheckFifoParam+0xe6>
        break;
 8004b82:	bf00      	nop
 8004b84:	e00a      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        break;
 8004b86:	bf00      	nop
 8004b88:	e008      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        break;
 8004b8a:	bf00      	nop
 8004b8c:	e006      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e004      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
    break;
 8004b9a:	bf00      	nop
    }
  }

  return status;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a38      	ldr	r2, [pc, #224]	; (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a36      	ldr	r2, [pc, #216]	; (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01d      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a35      	ldr	r2, [pc, #212]	; (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a33      	ldr	r2, [pc, #204]	; (8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a32      	ldr	r2, [pc, #200]	; (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a30      	ldr	r2, [pc, #192]	; (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2f      	ldr	r2, [pc, #188]	; (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2d      	ldr	r2, [pc, #180]	; (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01a      	beq.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	3b08      	subs	r3, #8
 8004c1c:	4a28      	ldr	r2, [pc, #160]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4b26      	ldr	r3, [pc, #152]	; (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a24      	ldr	r2, [pc, #144]	; (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	2201      	movs	r2, #1
 8004c42:	409a      	lsls	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c48:	e024      	b.n	8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	3b10      	subs	r3, #16
 8004c52:	4a1e      	ldr	r2, [pc, #120]	; (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	; (8004cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d806      	bhi.n	8004c72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d902      	bls.n	8004c72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4b18      	ldr	r3, [pc, #96]	; (8004cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a16      	ldr	r2, [pc, #88]	; (8004cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	58025408 	.word	0x58025408
 8004ca4:	5802541c 	.word	0x5802541c
 8004ca8:	58025430 	.word	0x58025430
 8004cac:	58025444 	.word	0x58025444
 8004cb0:	58025458 	.word	0x58025458
 8004cb4:	5802546c 	.word	0x5802546c
 8004cb8:	58025480 	.word	0x58025480
 8004cbc:	58025494 	.word	0x58025494
 8004cc0:	cccccccd 	.word	0xcccccccd
 8004cc4:	16009600 	.word	0x16009600
 8004cc8:	58025880 	.word	0x58025880
 8004ccc:	aaaaaaab 	.word	0xaaaaaaab
 8004cd0:	400204b8 	.word	0x400204b8
 8004cd4:	4002040f 	.word	0x4002040f
 8004cd8:	10008200 	.word	0x10008200
 8004cdc:	40020880 	.word	0x40020880

08004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d04a      	beq.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d847      	bhi.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a25      	ldr	r2, [pc, #148]	; (8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d022      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a24      	ldr	r2, [pc, #144]	; (8004d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d01d      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a22      	ldr	r2, [pc, #136]	; (8004da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d018      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a21      	ldr	r2, [pc, #132]	; (8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1e      	ldr	r2, [pc, #120]	; (8004dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d009      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d50:	2300      	movs	r3, #0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	461a      	mov	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a15      	ldr	r2, [pc, #84]	; (8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d68:	671a      	str	r2, [r3, #112]	; 0x70
 8004d6a:	e009      	b.n	8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	461a      	mov	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d7e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	2201      	movs	r2, #1
 8004d86:	409a      	lsls	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	58025408 	.word	0x58025408
 8004d9c:	5802541c 	.word	0x5802541c
 8004da0:	58025430 	.word	0x58025430
 8004da4:	58025444 	.word	0x58025444
 8004da8:	58025458 	.word	0x58025458
 8004dac:	5802546c 	.word	0x5802546c
 8004db0:	58025480 	.word	0x58025480
 8004db4:	58025494 	.word	0x58025494
 8004db8:	1600963f 	.word	0x1600963f
 8004dbc:	58025940 	.word	0x58025940
 8004dc0:	1000823f 	.word	0x1000823f
 8004dc4:	40020940 	.word	0x40020940

08004dc8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e0e3      	b.n	8004fa2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2223      	movs	r2, #35	; 0x23
 8004de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7fc fb1d 	bl	800142c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df2:	4b6e      	ldr	r3, [pc, #440]	; (8004fac <HAL_ETH_Init+0x1e4>)
 8004df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004df8:	4a6c      	ldr	r2, [pc, #432]	; (8004fac <HAL_ETH_Init+0x1e4>)
 8004dfa:	f043 0302 	orr.w	r3, r3, #2
 8004dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e02:	4b6a      	ldr	r3, [pc, #424]	; (8004fac <HAL_ETH_Init+0x1e4>)
 8004e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	7a1b      	ldrb	r3, [r3, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d103      	bne.n	8004e20 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f7fd f86d 	bl	8001ef8 <HAL_SYSCFG_ETHInterfaceSelect>
 8004e1e:	e003      	b.n	8004e28 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004e20:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004e24:	f7fd f868 	bl	8001ef8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004e28:	4b61      	ldr	r3, [pc, #388]	; (8004fb0 <HAL_ETH_Init+0x1e8>)
 8004e2a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e44:	f7fd f84c 	bl	8001ee0 <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004e4a:	e011      	b.n	8004e70 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004e4c:	f7fd f848 	bl	8001ee0 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e5a:	d909      	bls.n	8004e70 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2204      	movs	r2, #4
 8004e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	22e0      	movs	r2, #224	; 0xe0
 8004e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e098      	b.n	8004fa2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e4      	bne.n	8004e4c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f89e 	bl	8004fc4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e88:	f001 fcf2 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4a49      	ldr	r2, [pc, #292]	; (8004fb4 <HAL_ETH_Init+0x1ec>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	0c9a      	lsrs	r2, r3, #18
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3a01      	subs	r2, #1
 8004e9c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fa81 	bl	80053a8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004eb2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ebe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ec2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	22e0      	movs	r2, #224	; 0xe0
 8004ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e05d      	b.n	8004fa2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004ef2:	4b31      	ldr	r3, [pc, #196]	; (8004fb8 <HAL_ETH_Init+0x1f0>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6952      	ldr	r2, [r2, #20]
 8004efa:	0051      	lsls	r1, r2, #1
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	430b      	orrs	r3, r1
 8004f02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f06:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fae9 	bl	80054e2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fb2f 	bl	8005574 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	3305      	adds	r3, #5
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	021a      	lsls	r2, r3, #8
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	3304      	adds	r3, #4
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	3303      	adds	r3, #3
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	061a      	lsls	r2, r3, #24
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	3302      	adds	r3, #2
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f54:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f62:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <HAL_ETH_Init+0x1f4>)
 8004f76:	430b      	orrs	r3, r1
 8004f78:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <HAL_ETH_Init+0x1f8>)
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	58000400 	.word	0x58000400
 8004fb4:	431bde83 	.word	0x431bde83
 8004fb8:	ffff8001 	.word	0xffff8001
 8004fbc:	0c020060 	.word	0x0c020060
 8004fc0:	0c20c000 	.word	0x0c20c000

08004fc4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004fde:	f001 fc47 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 8004fe2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d804      	bhi.n	8004ff6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e022      	b.n	800503c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4a16      	ldr	r2, [pc, #88]	; (8005054 <HAL_ETH_SetMDIOClockRange+0x90>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d204      	bcs.n	8005008 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e019      	b.n	800503c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4a13      	ldr	r2, [pc, #76]	; (8005058 <HAL_ETH_SetMDIOClockRange+0x94>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d915      	bls.n	800503c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4a12      	ldr	r2, [pc, #72]	; (800505c <HAL_ETH_SetMDIOClockRange+0x98>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d804      	bhi.n	8005022 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e00c      	b.n	800503c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d804      	bhi.n	8005034 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	e003      	b.n	800503c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800503a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005046:	bf00      	nop
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	02160ebf 	.word	0x02160ebf
 8005054:	03938700 	.word	0x03938700
 8005058:	05f5e0ff 	.word	0x05f5e0ff
 800505c:	08f0d17f 	.word	0x08f0d17f
 8005060:	0ee6b27f 	.word	0x0ee6b27f

08005064 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005076:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	791b      	ldrb	r3, [r3, #4]
 800507c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800507e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	7b1b      	ldrb	r3, [r3, #12]
 8005084:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005086:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	7b5b      	ldrb	r3, [r3, #13]
 800508c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800508e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	7b9b      	ldrb	r3, [r3, #14]
 8005094:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005096:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	7bdb      	ldrb	r3, [r3, #15]
 800509c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800509e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	7c12      	ldrb	r2, [r2, #16]
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	d102      	bne.n	80050ae <ETH_SetMACConfig+0x4a>
 80050a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80050ac:	e000      	b.n	80050b0 <ETH_SetMACConfig+0x4c>
 80050ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80050b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	7c52      	ldrb	r2, [r2, #17]
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	d102      	bne.n	80050c0 <ETH_SetMACConfig+0x5c>
 80050ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050be:	e000      	b.n	80050c2 <ETH_SetMACConfig+0x5e>
 80050c0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80050c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	7c9b      	ldrb	r3, [r3, #18]
 80050c8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80050ca:	431a      	orrs	r2, r3
               macconf->Speed |
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80050d0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80050d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	7f1b      	ldrb	r3, [r3, #28]
 80050dc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80050de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	7f5b      	ldrb	r3, [r3, #29]
 80050e4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80050e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	7f92      	ldrb	r2, [r2, #30]
 80050ec:	2a00      	cmp	r2, #0
 80050ee:	d102      	bne.n	80050f6 <ETH_SetMACConfig+0x92>
 80050f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050f4:	e000      	b.n	80050f8 <ETH_SetMACConfig+0x94>
 80050f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80050f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	7fdb      	ldrb	r3, [r3, #31]
 80050fe:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005100:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005108:	2a00      	cmp	r2, #0
 800510a:	d102      	bne.n	8005112 <ETH_SetMACConfig+0xae>
 800510c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005110:	e000      	b.n	8005114 <ETH_SetMACConfig+0xb0>
 8005112:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005114:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800511a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005122:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005124:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b56      	ldr	r3, [pc, #344]	; (8005290 <ETH_SetMACConfig+0x22c>)
 8005136:	4013      	ands	r3, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	68f9      	ldr	r1, [r7, #12]
 800513e:	430b      	orrs	r3, r1
 8005140:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800514e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005150:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005158:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800515a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005162:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005164:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800516c:	2a00      	cmp	r2, #0
 800516e:	d102      	bne.n	8005176 <ETH_SetMACConfig+0x112>
 8005170:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005174:	e000      	b.n	8005178 <ETH_SetMACConfig+0x114>
 8005176:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005178:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	4b42      	ldr	r3, [pc, #264]	; (8005294 <ETH_SetMACConfig+0x230>)
 800518a:	4013      	ands	r3, r2
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	68f9      	ldr	r1, [r7, #12]
 8005192:	430b      	orrs	r3, r1
 8005194:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800519c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	4b3a      	ldr	r3, [pc, #232]	; (8005298 <ETH_SetMACConfig+0x234>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	430b      	orrs	r3, r1
 80051b8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80051c0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80051c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80051ce:	2a00      	cmp	r2, #0
 80051d0:	d101      	bne.n	80051d6 <ETH_SetMACConfig+0x172>
 80051d2:	2280      	movs	r2, #128	; 0x80
 80051d4:	e000      	b.n	80051d8 <ETH_SetMACConfig+0x174>
 80051d6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80051d8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051de:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051ea:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80051ee:	4013      	ands	r3, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	68f9      	ldr	r1, [r7, #12]
 80051f6:	430b      	orrs	r3, r1
 80051f8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005200:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005208:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f023 0103 	bic.w	r1, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	430a      	orrs	r2, r1
 8005222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800522e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800524a:	2a00      	cmp	r2, #0
 800524c:	d101      	bne.n	8005252 <ETH_SetMACConfig+0x1ee>
 800524e:	2240      	movs	r2, #64	; 0x40
 8005250:	e000      	b.n	8005254 <ETH_SetMACConfig+0x1f0>
 8005252:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005254:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800525c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800525e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005266:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005274:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	430a      	orrs	r2, r1
 8005280:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	00048083 	.word	0x00048083
 8005294:	c0f88000 	.word	0xc0f88000
 8005298:	fffffef0 	.word	0xfffffef0

0800529c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b38      	ldr	r3, [pc, #224]	; (8005394 <ETH_SetDMAConfig+0xf8>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	6811      	ldr	r1, [r2, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	430b      	orrs	r3, r1
 80052be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052c2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	791b      	ldrb	r3, [r3, #4]
 80052c8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80052ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	7b1b      	ldrb	r3, [r3, #12]
 80052d4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	4b2c      	ldr	r3, [pc, #176]	; (8005398 <ETH_SetDMAConfig+0xfc>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	68f9      	ldr	r1, [r7, #12]
 80052ee:	430b      	orrs	r3, r1
 80052f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052f4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	7b5b      	ldrb	r3, [r3, #13]
 80052fa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005310:	4b22      	ldr	r3, [pc, #136]	; (800539c <ETH_SetDMAConfig+0x100>)
 8005312:	4013      	ands	r3, r2
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	68f9      	ldr	r1, [r7, #12]
 800531a:	430b      	orrs	r3, r1
 800531c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005320:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	7d1b      	ldrb	r3, [r3, #20]
 800532c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800532e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	7f5b      	ldrb	r3, [r3, #29]
 8005334:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005342:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005346:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <ETH_SetDMAConfig+0x104>)
 8005348:	4013      	ands	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	430b      	orrs	r3, r1
 8005352:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005356:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	7f1b      	ldrb	r3, [r3, #28]
 800535e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005370:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <ETH_SetDMAConfig+0x108>)
 8005376:	4013      	ands	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	430b      	orrs	r3, r1
 8005380:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005384:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	ffff87fd 	.word	0xffff87fd
 8005398:	ffff2ffe 	.word	0xffff2ffe
 800539c:	fffec000 	.word	0xfffec000
 80053a0:	ffc0efef 	.word	0xffc0efef
 80053a4:	7fc0ffff 	.word	0x7fc0ffff

080053a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b0a4      	sub	sp, #144	; 0x90
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80053b6:	2300      	movs	r3, #0
 80053b8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80053e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053e8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005400:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005404:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800540c:	2300      	movs	r3, #0
 800540e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005410:	2301      	movs	r3, #1
 8005412:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005416:	2300      	movs	r3, #0
 8005418:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800541c:	2300      	movs	r3, #0
 800541e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005422:	2300      	movs	r3, #0
 8005424:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005426:	2300      	movs	r3, #0
 8005428:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800542a:	2300      	movs	r3, #0
 800542c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005434:	2300      	movs	r3, #0
 8005436:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005440:	2320      	movs	r3, #32
 8005442:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800544c:	2300      	movs	r3, #0
 800544e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005452:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005458:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800545c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800545e:	2300      	movs	r3, #0
 8005460:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005464:	2302      	movs	r3, #2
 8005466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800546a:	2300      	movs	r3, #0
 800546c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800547c:	2301      	movs	r3, #1
 800547e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005482:	2300      	movs	r3, #0
 8005484:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800548c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff fde6 	bl	8005064 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005498:	2301      	movs	r3, #1
 800549a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800549c:	2301      	movs	r3, #1
 800549e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80054aa:	2300      	movs	r3, #0
 80054ac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80054b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80054bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80054c8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80054cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fee1 	bl	800529c <ETH_SetDMAConfig>
}
 80054da:	bf00      	nop
 80054dc:	3790      	adds	r7, #144	; 0x90
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	e01d      	b.n	800552c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68d9      	ldr	r1, [r3, #12]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4613      	mov	r3, r2
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	4413      	add	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	440b      	add	r3, r1
 8005500:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2200      	movs	r2, #0
 8005512:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2200      	movs	r2, #0
 8005518:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	3206      	adds	r2, #6
 8005522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b03      	cmp	r3, #3
 8005530:	d9de      	bls.n	80054f0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005540:	461a      	mov	r2, r3
 8005542:	2303      	movs	r3, #3
 8005544:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005554:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005564:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e023      	b.n	80055ca <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6919      	ldr	r1, [r3, #16]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4613      	mov	r3, r2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	4413      	add	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	440b      	add	r3, r1
 8005592:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2200      	movs	r2, #0
 80055a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2200      	movs	r2, #0
 80055aa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2200      	movs	r2, #0
 80055b0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	3212      	adds	r2, #18
 80055c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d9d8      	bls.n	8005582 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f6:	461a      	mov	r2, r3
 80055f8:	2303      	movs	r3, #3
 80055fa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005630:	b480      	push	{r7}
 8005632:	b089      	sub	sp, #36	; 0x24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800563e:	4b86      	ldr	r3, [pc, #536]	; (8005858 <HAL_GPIO_Init+0x228>)
 8005640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005642:	e18c      	b.n	800595e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	2101      	movs	r1, #1
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	fa01 f303 	lsl.w	r3, r1, r3
 8005650:	4013      	ands	r3, r2
 8005652:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 817e 	beq.w	8005958 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	2b01      	cmp	r3, #1
 8005666:	d005      	beq.n	8005674 <HAL_GPIO_Init+0x44>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d130      	bne.n	80056d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	2203      	movs	r2, #3
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	43db      	mvns	r3, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4313      	orrs	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056aa:	2201      	movs	r2, #1
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43db      	mvns	r3, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4013      	ands	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	f003 0201 	and.w	r2, r3, #1
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d017      	beq.n	8005712 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	2203      	movs	r2, #3
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	43db      	mvns	r3, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	4013      	ands	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4313      	orrs	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d123      	bne.n	8005766 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	08da      	lsrs	r2, r3, #3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3208      	adds	r2, #8
 8005726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	220f      	movs	r2, #15
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4013      	ands	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4313      	orrs	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	08da      	lsrs	r2, r3, #3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3208      	adds	r2, #8
 8005760:	69b9      	ldr	r1, [r7, #24]
 8005762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	2203      	movs	r2, #3
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43db      	mvns	r3, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4013      	ands	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f003 0203 	and.w	r2, r3, #3
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4313      	orrs	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 80d8 	beq.w	8005958 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057a8:	4b2c      	ldr	r3, [pc, #176]	; (800585c <HAL_GPIO_Init+0x22c>)
 80057aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057ae:	4a2b      	ldr	r2, [pc, #172]	; (800585c <HAL_GPIO_Init+0x22c>)
 80057b0:	f043 0302 	orr.w	r3, r3, #2
 80057b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80057b8:	4b28      	ldr	r3, [pc, #160]	; (800585c <HAL_GPIO_Init+0x22c>)
 80057ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057c6:	4a26      	ldr	r2, [pc, #152]	; (8005860 <HAL_GPIO_Init+0x230>)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	089b      	lsrs	r3, r3, #2
 80057cc:	3302      	adds	r3, #2
 80057ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	220f      	movs	r2, #15
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43db      	mvns	r3, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1d      	ldr	r2, [pc, #116]	; (8005864 <HAL_GPIO_Init+0x234>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d04a      	beq.n	8005888 <HAL_GPIO_Init+0x258>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1c      	ldr	r2, [pc, #112]	; (8005868 <HAL_GPIO_Init+0x238>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d02b      	beq.n	8005852 <HAL_GPIO_Init+0x222>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1b      	ldr	r2, [pc, #108]	; (800586c <HAL_GPIO_Init+0x23c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d025      	beq.n	800584e <HAL_GPIO_Init+0x21e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1a      	ldr	r2, [pc, #104]	; (8005870 <HAL_GPIO_Init+0x240>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01f      	beq.n	800584a <HAL_GPIO_Init+0x21a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a19      	ldr	r2, [pc, #100]	; (8005874 <HAL_GPIO_Init+0x244>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d019      	beq.n	8005846 <HAL_GPIO_Init+0x216>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a18      	ldr	r2, [pc, #96]	; (8005878 <HAL_GPIO_Init+0x248>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_GPIO_Init+0x212>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a17      	ldr	r2, [pc, #92]	; (800587c <HAL_GPIO_Init+0x24c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00d      	beq.n	800583e <HAL_GPIO_Init+0x20e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <HAL_GPIO_Init+0x250>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d007      	beq.n	800583a <HAL_GPIO_Init+0x20a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a15      	ldr	r2, [pc, #84]	; (8005884 <HAL_GPIO_Init+0x254>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d101      	bne.n	8005836 <HAL_GPIO_Init+0x206>
 8005832:	2309      	movs	r3, #9
 8005834:	e029      	b.n	800588a <HAL_GPIO_Init+0x25a>
 8005836:	230a      	movs	r3, #10
 8005838:	e027      	b.n	800588a <HAL_GPIO_Init+0x25a>
 800583a:	2307      	movs	r3, #7
 800583c:	e025      	b.n	800588a <HAL_GPIO_Init+0x25a>
 800583e:	2306      	movs	r3, #6
 8005840:	e023      	b.n	800588a <HAL_GPIO_Init+0x25a>
 8005842:	2305      	movs	r3, #5
 8005844:	e021      	b.n	800588a <HAL_GPIO_Init+0x25a>
 8005846:	2304      	movs	r3, #4
 8005848:	e01f      	b.n	800588a <HAL_GPIO_Init+0x25a>
 800584a:	2303      	movs	r3, #3
 800584c:	e01d      	b.n	800588a <HAL_GPIO_Init+0x25a>
 800584e:	2302      	movs	r3, #2
 8005850:	e01b      	b.n	800588a <HAL_GPIO_Init+0x25a>
 8005852:	2301      	movs	r3, #1
 8005854:	e019      	b.n	800588a <HAL_GPIO_Init+0x25a>
 8005856:	bf00      	nop
 8005858:	58000080 	.word	0x58000080
 800585c:	58024400 	.word	0x58024400
 8005860:	58000400 	.word	0x58000400
 8005864:	58020000 	.word	0x58020000
 8005868:	58020400 	.word	0x58020400
 800586c:	58020800 	.word	0x58020800
 8005870:	58020c00 	.word	0x58020c00
 8005874:	58021000 	.word	0x58021000
 8005878:	58021400 	.word	0x58021400
 800587c:	58021800 	.word	0x58021800
 8005880:	58021c00 	.word	0x58021c00
 8005884:	58022400 	.word	0x58022400
 8005888:	2300      	movs	r3, #0
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	f002 0203 	and.w	r2, r2, #3
 8005890:	0092      	lsls	r2, r2, #2
 8005892:	4093      	lsls	r3, r2
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800589a:	4938      	ldr	r1, [pc, #224]	; (800597c <HAL_GPIO_Init+0x34c>)
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	089b      	lsrs	r3, r3, #2
 80058a0:	3302      	adds	r3, #2
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	43db      	mvns	r3, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4013      	ands	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80058fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	43db      	mvns	r3, r3
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4013      	ands	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	43db      	mvns	r3, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4013      	ands	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	f47f ae6b 	bne.w	8005644 <HAL_GPIO_Init+0x14>
  }
}
 800596e:	bf00      	nop
 8005970:	bf00      	nop
 8005972:	3724      	adds	r7, #36	; 0x24
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	58000400 	.word	0x58000400

08005980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
 800598c:	4613      	mov	r3, r2
 800598e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005990:	787b      	ldrb	r3, [r7, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800599c:	e003      	b.n	80059a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	041a      	lsls	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	619a      	str	r2, [r3, #24]
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059c4:	887a      	ldrh	r2, [r7, #2]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4013      	ands	r3, r2
 80059ca:	041a      	lsls	r2, r3, #16
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43d9      	mvns	r1, r3
 80059d0:	887b      	ldrh	r3, [r7, #2]
 80059d2:	400b      	ands	r3, r1
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	619a      	str	r2, [r3, #24]
}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80059f0:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <HAL_PWREx_ConfigSupply+0x70>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d00a      	beq.n	8005a12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80059fc:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <HAL_PWREx_ConfigSupply+0x70>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d001      	beq.n	8005a0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e01f      	b.n	8005a4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e01d      	b.n	8005a4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a12:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_PWREx_ConfigSupply+0x70>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f023 0207 	bic.w	r2, r3, #7
 8005a1a:	490f      	ldr	r1, [pc, #60]	; (8005a58 <HAL_PWREx_ConfigSupply+0x70>)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a22:	f7fc fa5d 	bl	8001ee0 <HAL_GetTick>
 8005a26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a28:	e009      	b.n	8005a3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a2a:	f7fc fa59 	bl	8001ee0 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a38:	d901      	bls.n	8005a3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e007      	b.n	8005a4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_PWREx_ConfigSupply+0x70>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4a:	d1ee      	bne.n	8005a2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	58024800 	.word	0x58024800

08005a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08c      	sub	sp, #48	; 0x30
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e3c8      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 8087 	beq.w	8005b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a7c:	4b88      	ldr	r3, [pc, #544]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a86:	4b86      	ldr	r3, [pc, #536]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	2b10      	cmp	r3, #16
 8005a90:	d007      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x46>
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	2b18      	cmp	r3, #24
 8005a96:	d110      	bne.n	8005aba <HAL_RCC_OscConfig+0x5e>
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d10b      	bne.n	8005aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa2:	4b7f      	ldr	r3, [pc, #508]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d06c      	beq.n	8005b88 <HAL_RCC_OscConfig+0x12c>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d168      	bne.n	8005b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e3a2      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac2:	d106      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x76>
 8005ac4:	4b76      	ldr	r3, [pc, #472]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a75      	ldr	r2, [pc, #468]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	e02e      	b.n	8005b30 <HAL_RCC_OscConfig+0xd4>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10c      	bne.n	8005af4 <HAL_RCC_OscConfig+0x98>
 8005ada:	4b71      	ldr	r3, [pc, #452]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a70      	ldr	r2, [pc, #448]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	4b6e      	ldr	r3, [pc, #440]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a6d      	ldr	r2, [pc, #436]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	e01d      	b.n	8005b30 <HAL_RCC_OscConfig+0xd4>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005afc:	d10c      	bne.n	8005b18 <HAL_RCC_OscConfig+0xbc>
 8005afe:	4b68      	ldr	r3, [pc, #416]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a67      	ldr	r2, [pc, #412]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	4b65      	ldr	r3, [pc, #404]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a64      	ldr	r2, [pc, #400]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	e00b      	b.n	8005b30 <HAL_RCC_OscConfig+0xd4>
 8005b18:	4b61      	ldr	r3, [pc, #388]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a60      	ldr	r2, [pc, #384]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	4b5e      	ldr	r3, [pc, #376]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a5d      	ldr	r2, [pc, #372]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d013      	beq.n	8005b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fc f9d2 	bl	8001ee0 <HAL_GetTick>
 8005b3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b40:	f7fc f9ce 	bl	8001ee0 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b64      	cmp	r3, #100	; 0x64
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e356      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b52:	4b53      	ldr	r3, [pc, #332]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCC_OscConfig+0xe4>
 8005b5e:	e014      	b.n	8005b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fc f9be 	bl	8001ee0 <HAL_GetTick>
 8005b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b68:	f7fc f9ba 	bl	8001ee0 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	; 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e342      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b7a:	4b49      	ldr	r3, [pc, #292]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f0      	bne.n	8005b68 <HAL_RCC_OscConfig+0x10c>
 8005b86:	e000      	b.n	8005b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 808c 	beq.w	8005cb0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b98:	4b41      	ldr	r3, [pc, #260]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ba0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ba2:	4b3f      	ldr	r3, [pc, #252]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <HAL_RCC_OscConfig+0x162>
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	2b18      	cmp	r3, #24
 8005bb2:	d137      	bne.n	8005c24 <HAL_RCC_OscConfig+0x1c8>
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d132      	bne.n	8005c24 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bbe:	4b38      	ldr	r3, [pc, #224]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x17a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e314      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bd6:	4b32      	ldr	r3, [pc, #200]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f023 0219 	bic.w	r2, r3, #25
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	492f      	ldr	r1, [pc, #188]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7fc f97a 	bl	8001ee0 <HAL_GetTick>
 8005bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf0:	f7fc f976 	bl	8001ee0 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e2fe      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c02:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0f0      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c0e:	4b24      	ldr	r3, [pc, #144]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	061b      	lsls	r3, r3, #24
 8005c1c:	4920      	ldr	r1, [pc, #128]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c22:	e045      	b.n	8005cb0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d026      	beq.n	8005c7a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f023 0219 	bic.w	r2, r3, #25
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4919      	ldr	r1, [pc, #100]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3e:	f7fc f94f 	bl	8001ee0 <HAL_GetTick>
 8005c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c46:	f7fc f94b 	bl	8001ee0 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e2d3      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c58:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c64:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	061b      	lsls	r3, r3, #24
 8005c72:	490b      	ldr	r1, [pc, #44]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	604b      	str	r3, [r1, #4]
 8005c78:	e01a      	b.n	8005cb0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c7a:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a08      	ldr	r2, [pc, #32]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fc f92b 	bl	8001ee0 <HAL_GetTick>
 8005c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c8c:	e00a      	b.n	8005ca4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c8e:	f7fc f927 	bl	8001ee0 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d903      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e2af      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
 8005ca0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ca4:	4b96      	ldr	r3, [pc, #600]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1ee      	bne.n	8005c8e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0310 	and.w	r3, r3, #16
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d06a      	beq.n	8005d92 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cbc:	4b90      	ldr	r3, [pc, #576]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cc4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cc6:	4b8e      	ldr	r3, [pc, #568]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d007      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x286>
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b18      	cmp	r3, #24
 8005cd6:	d11b      	bne.n	8005d10 <HAL_RCC_OscConfig+0x2b4>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d116      	bne.n	8005d10 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ce2:	4b87      	ldr	r3, [pc, #540]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <HAL_RCC_OscConfig+0x29e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	2b80      	cmp	r3, #128	; 0x80
 8005cf4:	d001      	beq.n	8005cfa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e282      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cfa:	4b81      	ldr	r3, [pc, #516]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	061b      	lsls	r3, r3, #24
 8005d08:	497d      	ldr	r1, [pc, #500]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d0e:	e040      	b.n	8005d92 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d023      	beq.n	8005d60 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d18:	4b79      	ldr	r3, [pc, #484]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a78      	ldr	r2, [pc, #480]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fc f8dc 	bl	8001ee0 <HAL_GetTick>
 8005d28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d2c:	f7fc f8d8 	bl	8001ee0 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e260      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d3e:	4b70      	ldr	r3, [pc, #448]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d4a:	4b6d      	ldr	r3, [pc, #436]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	061b      	lsls	r3, r3, #24
 8005d58:	4969      	ldr	r1, [pc, #420]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60cb      	str	r3, [r1, #12]
 8005d5e:	e018      	b.n	8005d92 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d60:	4b67      	ldr	r3, [pc, #412]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a66      	ldr	r2, [pc, #408]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fc f8b8 	bl	8001ee0 <HAL_GetTick>
 8005d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d74:	f7fc f8b4 	bl	8001ee0 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e23c      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d86:	4b5e      	ldr	r3, [pc, #376]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d036      	beq.n	8005e0c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d019      	beq.n	8005dda <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005da6:	4b56      	ldr	r3, [pc, #344]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005daa:	4a55      	ldr	r2, [pc, #340]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db2:	f7fc f895 	bl	8001ee0 <HAL_GetTick>
 8005db6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dba:	f7fc f891 	bl	8001ee0 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e219      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dcc:	4b4c      	ldr	r3, [pc, #304]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f0      	beq.n	8005dba <HAL_RCC_OscConfig+0x35e>
 8005dd8:	e018      	b.n	8005e0c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dda:	4b49      	ldr	r3, [pc, #292]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dde:	4a48      	ldr	r2, [pc, #288]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de6:	f7fc f87b 	bl	8001ee0 <HAL_GetTick>
 8005dea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dee:	f7fc f877 	bl	8001ee0 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e1ff      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e00:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f0      	bne.n	8005dee <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d036      	beq.n	8005e86 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d019      	beq.n	8005e54 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e20:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a36      	ldr	r2, [pc, #216]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005e26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e2c:	f7fc f858 	bl	8001ee0 <HAL_GetTick>
 8005e30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e34:	f7fc f854 	bl	8001ee0 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e1dc      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e46:	4b2e      	ldr	r3, [pc, #184]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0x3d8>
 8005e52:	e018      	b.n	8005e86 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e54:	4b2a      	ldr	r3, [pc, #168]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a29      	ldr	r2, [pc, #164]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e60:	f7fc f83e 	bl	8001ee0 <HAL_GetTick>
 8005e64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e68:	f7fc f83a 	bl	8001ee0 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e1c2      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e7a:	4b21      	ldr	r3, [pc, #132]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 8086 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e94:	4b1b      	ldr	r3, [pc, #108]	; (8005f04 <HAL_RCC_OscConfig+0x4a8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1a      	ldr	r2, [pc, #104]	; (8005f04 <HAL_RCC_OscConfig+0x4a8>)
 8005e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ea0:	f7fc f81e 	bl	8001ee0 <HAL_GetTick>
 8005ea4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea8:	f7fc f81a 	bl	8001ee0 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	; 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e1a2      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_RCC_OscConfig+0x4a8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d106      	bne.n	8005edc <HAL_RCC_OscConfig+0x480>
 8005ece:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	4a0b      	ldr	r2, [pc, #44]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eda:	e032      	b.n	8005f42 <HAL_RCC_OscConfig+0x4e6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d111      	bne.n	8005f08 <HAL_RCC_OscConfig+0x4ac>
 8005ee4:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	4a05      	ldr	r2, [pc, #20]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005eea:	f023 0301 	bic.w	r3, r3, #1
 8005eee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef0:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	4a02      	ldr	r2, [pc, #8]	; (8005f00 <HAL_RCC_OscConfig+0x4a4>)
 8005ef6:	f023 0304 	bic.w	r3, r3, #4
 8005efa:	6713      	str	r3, [r2, #112]	; 0x70
 8005efc:	e021      	b.n	8005f42 <HAL_RCC_OscConfig+0x4e6>
 8005efe:	bf00      	nop
 8005f00:	58024400 	.word	0x58024400
 8005f04:	58024800 	.word	0x58024800
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	d10c      	bne.n	8005f2a <HAL_RCC_OscConfig+0x4ce>
 8005f10:	4b83      	ldr	r3, [pc, #524]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	4a82      	ldr	r2, [pc, #520]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005f16:	f043 0304 	orr.w	r3, r3, #4
 8005f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1c:	4b80      	ldr	r3, [pc, #512]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a7f      	ldr	r2, [pc, #508]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
 8005f28:	e00b      	b.n	8005f42 <HAL_RCC_OscConfig+0x4e6>
 8005f2a:	4b7d      	ldr	r3, [pc, #500]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	4a7c      	ldr	r2, [pc, #496]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	6713      	str	r3, [r2, #112]	; 0x70
 8005f36:	4b7a      	ldr	r3, [pc, #488]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	4a79      	ldr	r2, [pc, #484]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005f3c:	f023 0304 	bic.w	r3, r3, #4
 8005f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d015      	beq.n	8005f76 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4a:	f7fb ffc9 	bl	8001ee0 <HAL_GetTick>
 8005f4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f50:	e00a      	b.n	8005f68 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f52:	f7fb ffc5 	bl	8001ee0 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e14b      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f68:	4b6d      	ldr	r3, [pc, #436]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0ee      	beq.n	8005f52 <HAL_RCC_OscConfig+0x4f6>
 8005f74:	e014      	b.n	8005fa0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f76:	f7fb ffb3 	bl	8001ee0 <HAL_GetTick>
 8005f7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fb ffaf 	bl	8001ee0 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e135      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f94:	4b62      	ldr	r3, [pc, #392]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1ee      	bne.n	8005f7e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 812a 	beq.w	80061fe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005faa:	4b5d      	ldr	r3, [pc, #372]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fb2:	2b18      	cmp	r3, #24
 8005fb4:	f000 80ba 	beq.w	800612c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	f040 8095 	bne.w	80060ec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc2:	4b57      	ldr	r3, [pc, #348]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a56      	ldr	r2, [pc, #344]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fce:	f7fb ff87 	bl	8001ee0 <HAL_GetTick>
 8005fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd6:	f7fb ff83 	bl	8001ee0 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e10b      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fe8:	4b4d      	ldr	r3, [pc, #308]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ff4:	4b4a      	ldr	r3, [pc, #296]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8005ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff8:	4b4a      	ldr	r3, [pc, #296]	; (8006124 <HAL_RCC_OscConfig+0x6c8>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006004:	0112      	lsls	r2, r2, #4
 8006006:	430a      	orrs	r2, r1
 8006008:	4945      	ldr	r1, [pc, #276]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 800600a:	4313      	orrs	r3, r2
 800600c:	628b      	str	r3, [r1, #40]	; 0x28
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	3b01      	subs	r3, #1
 8006014:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601c:	3b01      	subs	r3, #1
 800601e:	025b      	lsls	r3, r3, #9
 8006020:	b29b      	uxth	r3, r3
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	3b01      	subs	r3, #1
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006036:	3b01      	subs	r3, #1
 8006038:	061b      	lsls	r3, r3, #24
 800603a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800603e:	4938      	ldr	r1, [pc, #224]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8006040:	4313      	orrs	r3, r2
 8006042:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006044:	4b36      	ldr	r3, [pc, #216]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	4a35      	ldr	r2, [pc, #212]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006050:	4b33      	ldr	r3, [pc, #204]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8006052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006054:	4b34      	ldr	r3, [pc, #208]	; (8006128 <HAL_RCC_OscConfig+0x6cc>)
 8006056:	4013      	ands	r3, r2
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800605c:	00d2      	lsls	r2, r2, #3
 800605e:	4930      	ldr	r1, [pc, #192]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8006060:	4313      	orrs	r3, r2
 8006062:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006064:	4b2e      	ldr	r3, [pc, #184]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	f023 020c 	bic.w	r2, r3, #12
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	492b      	ldr	r1, [pc, #172]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8006072:	4313      	orrs	r3, r2
 8006074:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006076:	4b2a      	ldr	r3, [pc, #168]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	f023 0202 	bic.w	r2, r3, #2
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006082:	4927      	ldr	r1, [pc, #156]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8006084:	4313      	orrs	r3, r2
 8006086:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006088:	4b25      	ldr	r3, [pc, #148]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	4a24      	ldr	r2, [pc, #144]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 800608e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006092:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006094:	4b22      	ldr	r3, [pc, #136]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	4a21      	ldr	r2, [pc, #132]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 800609a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060a0:	4b1f      	ldr	r3, [pc, #124]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 80060a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80060ac:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b8:	4b19      	ldr	r3, [pc, #100]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a18      	ldr	r2, [pc, #96]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 80060be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c4:	f7fb ff0c 	bl	8001ee0 <HAL_GetTick>
 80060c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060cc:	f7fb ff08 	bl	8001ee0 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e090      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060de:	4b10      	ldr	r3, [pc, #64]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f0      	beq.n	80060cc <HAL_RCC_OscConfig+0x670>
 80060ea:	e088      	b.n	80061fe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ec:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a0b      	ldr	r2, [pc, #44]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 80060f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fb fef2 	bl	8001ee0 <HAL_GetTick>
 80060fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006100:	f7fb feee 	bl	8001ee0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e076      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006112:	4b03      	ldr	r3, [pc, #12]	; (8006120 <HAL_RCC_OscConfig+0x6c4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x6a4>
 800611e:	e06e      	b.n	80061fe <HAL_RCC_OscConfig+0x7a2>
 8006120:	58024400 	.word	0x58024400
 8006124:	fffffc0c 	.word	0xfffffc0c
 8006128:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800612c:	4b36      	ldr	r3, [pc, #216]	; (8006208 <HAL_RCC_OscConfig+0x7ac>)
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006132:	4b35      	ldr	r3, [pc, #212]	; (8006208 <HAL_RCC_OscConfig+0x7ac>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	2b01      	cmp	r3, #1
 800613e:	d031      	beq.n	80061a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f003 0203 	and.w	r2, r3, #3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614a:	429a      	cmp	r2, r3
 800614c:	d12a      	bne.n	80061a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	091b      	lsrs	r3, r3, #4
 8006152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615a:	429a      	cmp	r2, r3
 800615c:	d122      	bne.n	80061a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d11a      	bne.n	80061a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	0a5b      	lsrs	r3, r3, #9
 8006172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800617c:	429a      	cmp	r2, r3
 800617e:	d111      	bne.n	80061a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800618e:	429a      	cmp	r2, r3
 8006190:	d108      	bne.n	80061a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	0e1b      	lsrs	r3, r3, #24
 8006196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d001      	beq.n	80061a8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e02b      	b.n	8006200 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80061a8:	4b17      	ldr	r3, [pc, #92]	; (8006208 <HAL_RCC_OscConfig+0x7ac>)
 80061aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ac:	08db      	lsrs	r3, r3, #3
 80061ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d01f      	beq.n	80061fe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80061be:	4b12      	ldr	r3, [pc, #72]	; (8006208 <HAL_RCC_OscConfig+0x7ac>)
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	4a11      	ldr	r2, [pc, #68]	; (8006208 <HAL_RCC_OscConfig+0x7ac>)
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061ca:	f7fb fe89 	bl	8001ee0 <HAL_GetTick>
 80061ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80061d0:	bf00      	nop
 80061d2:	f7fb fe85 	bl	8001ee0 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	4293      	cmp	r3, r2
 80061dc:	d0f9      	beq.n	80061d2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061de:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <HAL_RCC_OscConfig+0x7ac>)
 80061e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e2:	4b0a      	ldr	r3, [pc, #40]	; (800620c <HAL_RCC_OscConfig+0x7b0>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061ea:	00d2      	lsls	r2, r2, #3
 80061ec:	4906      	ldr	r1, [pc, #24]	; (8006208 <HAL_RCC_OscConfig+0x7ac>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <HAL_RCC_OscConfig+0x7ac>)
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	4a04      	ldr	r2, [pc, #16]	; (8006208 <HAL_RCC_OscConfig+0x7ac>)
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3730      	adds	r7, #48	; 0x30
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	58024400 	.word	0x58024400
 800620c:	ffff0007 	.word	0xffff0007

08006210 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e19c      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006224:	4b8a      	ldr	r3, [pc, #552]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d910      	bls.n	8006254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b87      	ldr	r3, [pc, #540]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 020f 	bic.w	r2, r3, #15
 800623a:	4985      	ldr	r1, [pc, #532]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006242:	4b83      	ldr	r3, [pc, #524]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d001      	beq.n	8006254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e184      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d010      	beq.n	8006282 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	4b7b      	ldr	r3, [pc, #492]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800626c:	429a      	cmp	r2, r3
 800626e:	d908      	bls.n	8006282 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006270:	4b78      	ldr	r3, [pc, #480]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	4975      	ldr	r1, [pc, #468]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 800627e:	4313      	orrs	r3, r2
 8006280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d010      	beq.n	80062b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	4b70      	ldr	r3, [pc, #448]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800629a:	429a      	cmp	r2, r3
 800629c:	d908      	bls.n	80062b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800629e:	4b6d      	ldr	r3, [pc, #436]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	496a      	ldr	r1, [pc, #424]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d010      	beq.n	80062de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699a      	ldr	r2, [r3, #24]
 80062c0:	4b64      	ldr	r3, [pc, #400]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d908      	bls.n	80062de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062cc:	4b61      	ldr	r3, [pc, #388]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	495e      	ldr	r1, [pc, #376]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d010      	beq.n	800630c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69da      	ldr	r2, [r3, #28]
 80062ee:	4b59      	ldr	r3, [pc, #356]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d908      	bls.n	800630c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062fa:	4b56      	ldr	r3, [pc, #344]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	4953      	ldr	r1, [pc, #332]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006308:	4313      	orrs	r3, r2
 800630a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d010      	beq.n	800633a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	4b4d      	ldr	r3, [pc, #308]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	429a      	cmp	r2, r3
 8006326:	d908      	bls.n	800633a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006328:	4b4a      	ldr	r3, [pc, #296]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f023 020f 	bic.w	r2, r3, #15
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4947      	ldr	r1, [pc, #284]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006336:	4313      	orrs	r3, r2
 8006338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d055      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006346:	4b43      	ldr	r3, [pc, #268]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	4940      	ldr	r1, [pc, #256]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006354:	4313      	orrs	r3, r2
 8006356:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d107      	bne.n	8006370 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006360:	4b3c      	ldr	r3, [pc, #240]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d121      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0f6      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b03      	cmp	r3, #3
 8006376:	d107      	bne.n	8006388 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006378:	4b36      	ldr	r3, [pc, #216]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d115      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0ea      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d107      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006390:	4b30      	ldr	r3, [pc, #192]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0de      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063a0:	4b2c      	ldr	r3, [pc, #176]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0d6      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063b0:	4b28      	ldr	r3, [pc, #160]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f023 0207 	bic.w	r2, r3, #7
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	4925      	ldr	r1, [pc, #148]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063c2:	f7fb fd8d 	bl	8001ee0 <HAL_GetTick>
 80063c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c8:	e00a      	b.n	80063e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ca:	f7fb fd89 	bl	8001ee0 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d8:	4293      	cmp	r3, r2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e0be      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e0:	4b1c      	ldr	r3, [pc, #112]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d1eb      	bne.n	80063ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d010      	beq.n	8006420 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	4b14      	ldr	r3, [pc, #80]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	429a      	cmp	r2, r3
 800640c:	d208      	bcs.n	8006420 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	f023 020f 	bic.w	r2, r3, #15
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	490e      	ldr	r1, [pc, #56]	; (8006454 <HAL_RCC_ClockConfig+0x244>)
 800641c:	4313      	orrs	r3, r2
 800641e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d214      	bcs.n	8006458 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f023 020f 	bic.w	r2, r3, #15
 8006436:	4906      	ldr	r1, [pc, #24]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	4313      	orrs	r3, r2
 800643c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800643e:	4b04      	ldr	r3, [pc, #16]	; (8006450 <HAL_RCC_ClockConfig+0x240>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d005      	beq.n	8006458 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e086      	b.n	800655e <HAL_RCC_ClockConfig+0x34e>
 8006450:	52002000 	.word	0x52002000
 8006454:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d010      	beq.n	8006486 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	4b3f      	ldr	r3, [pc, #252]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006470:	429a      	cmp	r2, r3
 8006472:	d208      	bcs.n	8006486 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006474:	4b3c      	ldr	r3, [pc, #240]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	4939      	ldr	r1, [pc, #228]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006482:	4313      	orrs	r3, r2
 8006484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d010      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695a      	ldr	r2, [r3, #20]
 8006496:	4b34      	ldr	r3, [pc, #208]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800649e:	429a      	cmp	r2, r3
 80064a0:	d208      	bcs.n	80064b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064a2:	4b31      	ldr	r3, [pc, #196]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	492e      	ldr	r1, [pc, #184]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d010      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	4b28      	ldr	r3, [pc, #160]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d208      	bcs.n	80064e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064d0:	4b25      	ldr	r3, [pc, #148]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	4922      	ldr	r1, [pc, #136]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d010      	beq.n	8006510 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69da      	ldr	r2, [r3, #28]
 80064f2:	4b1d      	ldr	r3, [pc, #116]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d208      	bcs.n	8006510 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064fe:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	4917      	ldr	r1, [pc, #92]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 800650c:	4313      	orrs	r3, r2
 800650e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006510:	f000 f834 	bl	800657c <HAL_RCC_GetSysClockFreq>
 8006514:	4602      	mov	r2, r0
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	4912      	ldr	r1, [pc, #72]	; (800656c <HAL_RCC_ClockConfig+0x35c>)
 8006522:	5ccb      	ldrb	r3, [r1, r3]
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
 800652c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800652e:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <HAL_RCC_ClockConfig+0x358>)
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	4a0d      	ldr	r2, [pc, #52]	; (800656c <HAL_RCC_ClockConfig+0x35c>)
 8006538:	5cd3      	ldrb	r3, [r2, r3]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
 8006544:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <HAL_RCC_ClockConfig+0x360>)
 8006546:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006548:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <HAL_RCC_ClockConfig+0x364>)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <HAL_RCC_ClockConfig+0x368>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f7fb fc7a 	bl	8001e4c <HAL_InitTick>
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	58024400 	.word	0x58024400
 800656c:	0800c094 	.word	0x0800c094
 8006570:	24000008 	.word	0x24000008
 8006574:	24000004 	.word	0x24000004
 8006578:	2400000c 	.word	0x2400000c

0800657c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800657c:	b480      	push	{r7}
 800657e:	b089      	sub	sp, #36	; 0x24
 8006580:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006582:	4bb3      	ldr	r3, [pc, #716]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800658a:	2b18      	cmp	r3, #24
 800658c:	f200 8155 	bhi.w	800683a <HAL_RCC_GetSysClockFreq+0x2be>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065fd 	.word	0x080065fd
 800659c:	0800683b 	.word	0x0800683b
 80065a0:	0800683b 	.word	0x0800683b
 80065a4:	0800683b 	.word	0x0800683b
 80065a8:	0800683b 	.word	0x0800683b
 80065ac:	0800683b 	.word	0x0800683b
 80065b0:	0800683b 	.word	0x0800683b
 80065b4:	0800683b 	.word	0x0800683b
 80065b8:	08006623 	.word	0x08006623
 80065bc:	0800683b 	.word	0x0800683b
 80065c0:	0800683b 	.word	0x0800683b
 80065c4:	0800683b 	.word	0x0800683b
 80065c8:	0800683b 	.word	0x0800683b
 80065cc:	0800683b 	.word	0x0800683b
 80065d0:	0800683b 	.word	0x0800683b
 80065d4:	0800683b 	.word	0x0800683b
 80065d8:	08006629 	.word	0x08006629
 80065dc:	0800683b 	.word	0x0800683b
 80065e0:	0800683b 	.word	0x0800683b
 80065e4:	0800683b 	.word	0x0800683b
 80065e8:	0800683b 	.word	0x0800683b
 80065ec:	0800683b 	.word	0x0800683b
 80065f0:	0800683b 	.word	0x0800683b
 80065f4:	0800683b 	.word	0x0800683b
 80065f8:	0800662f 	.word	0x0800662f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065fc:	4b94      	ldr	r3, [pc, #592]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d009      	beq.n	800661c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006608:	4b91      	ldr	r3, [pc, #580]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	08db      	lsrs	r3, r3, #3
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	4a90      	ldr	r2, [pc, #576]	; (8006854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006614:	fa22 f303 	lsr.w	r3, r2, r3
 8006618:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800661a:	e111      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800661c:	4b8d      	ldr	r3, [pc, #564]	; (8006854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800661e:	61bb      	str	r3, [r7, #24]
      break;
 8006620:	e10e      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006622:	4b8d      	ldr	r3, [pc, #564]	; (8006858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006624:	61bb      	str	r3, [r7, #24]
      break;
 8006626:	e10b      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006628:	4b8c      	ldr	r3, [pc, #560]	; (800685c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800662a:	61bb      	str	r3, [r7, #24]
      break;
 800662c:	e108      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800662e:	4b88      	ldr	r3, [pc, #544]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006638:	4b85      	ldr	r3, [pc, #532]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	091b      	lsrs	r3, r3, #4
 800663e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006642:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006644:	4b82      	ldr	r3, [pc, #520]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800664e:	4b80      	ldr	r3, [pc, #512]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	08db      	lsrs	r3, r3, #3
 8006654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	fb02 f303 	mul.w	r3, r2, r3
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006666:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80e1 	beq.w	8006834 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b02      	cmp	r3, #2
 8006676:	f000 8083 	beq.w	8006780 <HAL_RCC_GetSysClockFreq+0x204>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b02      	cmp	r3, #2
 800667e:	f200 80a1 	bhi.w	80067c4 <HAL_RCC_GetSysClockFreq+0x248>
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <HAL_RCC_GetSysClockFreq+0x114>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d056      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0x1c0>
 800668e:	e099      	b.n	80067c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006690:	4b6f      	ldr	r3, [pc, #444]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d02d      	beq.n	80066f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800669c:	4b6c      	ldr	r3, [pc, #432]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	08db      	lsrs	r3, r3, #3
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	4a6b      	ldr	r2, [pc, #428]	; (8006854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c6:	4b62      	ldr	r3, [pc, #392]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80066f6:	e087      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006864 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670a:	4b51      	ldr	r3, [pc, #324]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671a:	ed97 6a02 	vldr	s12, [r7, #8]
 800671e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800672e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006736:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800673a:	e065      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006746:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006868 <HAL_RCC_GetSysClockFreq+0x2ec>
 800674a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674e:	4b40      	ldr	r3, [pc, #256]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006762:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800677e:	e043      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800686c <HAL_RCC_GetSysClockFreq+0x2f0>
 800678e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006792:	4b2f      	ldr	r3, [pc, #188]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067c2:	e021      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006868 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d6:	4b1e      	ldr	r3, [pc, #120]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006802:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006806:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006808:	4b11      	ldr	r3, [pc, #68]	; (8006850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	0a5b      	lsrs	r3, r3, #9
 800680e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006812:	3301      	adds	r3, #1
 8006814:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	ee07 3a90 	vmov	s15, r3
 800681c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006820:	edd7 6a07 	vldr	s13, [r7, #28]
 8006824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800682c:	ee17 3a90 	vmov	r3, s15
 8006830:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006832:	e005      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	61bb      	str	r3, [r7, #24]
      break;
 8006838:	e002      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800683a:	4b07      	ldr	r3, [pc, #28]	; (8006858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800683c:	61bb      	str	r3, [r7, #24]
      break;
 800683e:	bf00      	nop
  }

  return sysclockfreq;
 8006840:	69bb      	ldr	r3, [r7, #24]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3724      	adds	r7, #36	; 0x24
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	58024400 	.word	0x58024400
 8006854:	03d09000 	.word	0x03d09000
 8006858:	003d0900 	.word	0x003d0900
 800685c:	007a1200 	.word	0x007a1200
 8006860:	46000000 	.word	0x46000000
 8006864:	4c742400 	.word	0x4c742400
 8006868:	4a742400 	.word	0x4a742400
 800686c:	4af42400 	.word	0x4af42400

08006870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006876:	f7ff fe81 	bl	800657c <HAL_RCC_GetSysClockFreq>
 800687a:	4602      	mov	r2, r0
 800687c:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	0a1b      	lsrs	r3, r3, #8
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	490f      	ldr	r1, [pc, #60]	; (80068c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006888:	5ccb      	ldrb	r3, [r1, r3]
 800688a:	f003 031f 	and.w	r3, r3, #31
 800688e:	fa22 f303 	lsr.w	r3, r2, r3
 8006892:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006894:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800689e:	5cd3      	ldrb	r3, [r2, r3]
 80068a0:	f003 031f 	and.w	r3, r3, #31
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	fa22 f303 	lsr.w	r3, r2, r3
 80068aa:	4a07      	ldr	r2, [pc, #28]	; (80068c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80068ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068ae:	4a07      	ldr	r2, [pc, #28]	; (80068cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80068b6:	681b      	ldr	r3, [r3, #0]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	58024400 	.word	0x58024400
 80068c4:	0800c094 	.word	0x0800c094
 80068c8:	24000008 	.word	0x24000008
 80068cc:	24000004 	.word	0x24000004

080068d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068d4:	f7ff ffcc 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 80068d8:	4602      	mov	r2, r0
 80068da:	4b06      	ldr	r3, [pc, #24]	; (80068f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	091b      	lsrs	r3, r3, #4
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	4904      	ldr	r1, [pc, #16]	; (80068f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068e6:	5ccb      	ldrb	r3, [r1, r3]
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	58024400 	.word	0x58024400
 80068f8:	0800c094 	.word	0x0800c094

080068fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006900:	f7ff ffb6 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 8006904:	4602      	mov	r2, r0
 8006906:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	4904      	ldr	r1, [pc, #16]	; (8006924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800691c:	4618      	mov	r0, r3
 800691e:	bd80      	pop	{r7, pc}
 8006920:	58024400 	.word	0x58024400
 8006924:	0800c094 	.word	0x0800c094

08006928 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800692c:	b0c6      	sub	sp, #280	; 0x118
 800692e:	af00      	add	r7, sp, #0
 8006930:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006934:	2300      	movs	r3, #0
 8006936:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800693a:	2300      	movs	r3, #0
 800693c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800694c:	2500      	movs	r5, #0
 800694e:	ea54 0305 	orrs.w	r3, r4, r5
 8006952:	d049      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800695a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800695e:	d02f      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006960:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006964:	d828      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800696a:	d01a      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800696c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006970:	d822      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697a:	d007      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800697c:	e01c      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800697e:	4bab      	ldr	r3, [pc, #684]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006982:	4aaa      	ldr	r2, [pc, #680]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006988:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800698a:	e01a      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006990:	3308      	adds	r3, #8
 8006992:	2102      	movs	r1, #2
 8006994:	4618      	mov	r0, r3
 8006996:	f001 fc25 	bl	80081e4 <RCCEx_PLL2_Config>
 800699a:	4603      	mov	r3, r0
 800699c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069a0:	e00f      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a6:	3328      	adds	r3, #40	; 0x28
 80069a8:	2102      	movs	r1, #2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f001 fccc 	bl	8008348 <RCCEx_PLL3_Config>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069b6:	e004      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069be:	e000      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80069c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069ca:	4b98      	ldr	r3, [pc, #608]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d8:	4a94      	ldr	r2, [pc, #592]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069da:	430b      	orrs	r3, r1
 80069dc:	6513      	str	r3, [r2, #80]	; 0x50
 80069de:	e003      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80069f4:	f04f 0900 	mov.w	r9, #0
 80069f8:	ea58 0309 	orrs.w	r3, r8, r9
 80069fc:	d047      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d82a      	bhi.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a08:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a25 	.word	0x08006a25
 8006a14:	08006a33 	.word	0x08006a33
 8006a18:	08006a49 	.word	0x08006a49
 8006a1c:	08006a67 	.word	0x08006a67
 8006a20:	08006a67 	.word	0x08006a67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a24:	4b81      	ldr	r3, [pc, #516]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	4a80      	ldr	r2, [pc, #512]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a30:	e01a      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a36:	3308      	adds	r3, #8
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f001 fbd2 	bl	80081e4 <RCCEx_PLL2_Config>
 8006a40:	4603      	mov	r3, r0
 8006a42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a46:	e00f      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	3328      	adds	r3, #40	; 0x28
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 fc79 	bl	8008348 <RCCEx_PLL3_Config>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a5c:	e004      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a64:	e000      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a70:	4b6e      	ldr	r3, [pc, #440]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a74:	f023 0107 	bic.w	r1, r3, #7
 8006a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7e:	4a6b      	ldr	r2, [pc, #428]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a80:	430b      	orrs	r3, r1
 8006a82:	6513      	str	r3, [r2, #80]	; 0x50
 8006a84:	e003      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006a9a:	f04f 0b00 	mov.w	fp, #0
 8006a9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006aa2:	d05b      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006aac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006ab0:	d03b      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006ab2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006ab6:	d834      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006abc:	d037      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006abe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ac2:	d82e      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ac4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ac8:	d033      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006aca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ace:	d828      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad4:	d01a      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ada:	d822      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ae4:	d007      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006ae6:	e01c      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae8:	4b50      	ldr	r3, [pc, #320]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a4f      	ldr	r2, [pc, #316]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006af4:	e01e      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006afa:	3308      	adds	r3, #8
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f001 fb70 	bl	80081e4 <RCCEx_PLL2_Config>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b0a:	e013      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b10:	3328      	adds	r3, #40	; 0x28
 8006b12:	2100      	movs	r1, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fc17 	bl	8008348 <RCCEx_PLL3_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b20:	e008      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b28:	e004      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b2a:	bf00      	nop
 8006b2c:	e002      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b2e:	bf00      	nop
 8006b30:	e000      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b3c:	4b3b      	ldr	r3, [pc, #236]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b40:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b4c:	4a37      	ldr	r2, [pc, #220]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	6593      	str	r3, [r2, #88]	; 0x58
 8006b52:	e003      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006b76:	460b      	mov	r3, r1
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	d05d      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b84:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b88:	d03b      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006b8a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b8e:	d834      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b94:	d037      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b9a:	d82e      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ba0:	d033      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006ba2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ba6:	d828      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bac:	d01a      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bb2:	d822      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bbc:	d007      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006bbe:	e01c      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc0:	4b1a      	ldr	r3, [pc, #104]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	4a19      	ldr	r2, [pc, #100]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bcc:	e01e      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 fb04 	bl	80081e4 <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006be2:	e013      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be8:	3328      	adds	r3, #40	; 0x28
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 fbab 	bl	8008348 <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bf8:	e008      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c00:	e004      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c02:	bf00      	nop
 8006c04:	e002      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c06:	bf00      	nop
 8006c08:	e000      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10d      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c18:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c24:	4a01      	ldr	r2, [pc, #4]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c26:	430b      	orrs	r3, r1
 8006c28:	6593      	str	r3, [r2, #88]	; 0x58
 8006c2a:	e005      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006c2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c4e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4313      	orrs	r3, r2
 8006c56:	d03a      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5e:	2b30      	cmp	r3, #48	; 0x30
 8006c60:	d01f      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006c62:	2b30      	cmp	r3, #48	; 0x30
 8006c64:	d819      	bhi.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d00c      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	d815      	bhi.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d019      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c72:	2b10      	cmp	r3, #16
 8006c74:	d111      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c76:	4baa      	ldr	r3, [pc, #680]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	4aa9      	ldr	r2, [pc, #676]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006c82:	e011      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c88:	3308      	adds	r3, #8
 8006c8a:	2102      	movs	r1, #2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 faa9 	bl	80081e4 <RCCEx_PLL2_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006c98:	e006      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ca0:	e002      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006ca2:	bf00      	nop
 8006ca4:	e000      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006cb0:	4b9b      	ldr	r3, [pc, #620]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbe:	4a98      	ldr	r2, [pc, #608]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cc4:	e003      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006cda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ce4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4313      	orrs	r3, r2
 8006cec:	d051      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf8:	d035      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cfe:	d82e      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d04:	d031      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006d06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d0a:	d828      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d10:	d01a      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d16:	d822      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d20:	d007      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006d22:	e01c      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d24:	4b7e      	ldr	r3, [pc, #504]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	4a7d      	ldr	r2, [pc, #500]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d30:	e01c      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d36:	3308      	adds	r3, #8
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 fa52 	bl	80081e4 <RCCEx_PLL2_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d46:	e011      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4c:	3328      	adds	r3, #40	; 0x28
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 faf9 	bl	8008348 <RCCEx_PLL3_Config>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d5c:	e006      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d64:	e002      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d66:	bf00      	nop
 8006d68:	e000      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d74:	4b6a      	ldr	r3, [pc, #424]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d78:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d82:	4a67      	ldr	r2, [pc, #412]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6513      	str	r3, [r2, #80]	; 0x50
 8006d88:	e003      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006d9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006da2:	2300      	movs	r3, #0
 8006da4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006da8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4313      	orrs	r3, r2
 8006db0:	d053      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dbc:	d033      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006dbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dc2:	d82c      	bhi.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dc8:	d02f      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006dca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dce:	d826      	bhi.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006dd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dd4:	d02b      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006dd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dda:	d820      	bhi.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de0:	d012      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de6:	d81a      	bhi.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d022      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df0:	d115      	bne.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df6:	3308      	adds	r3, #8
 8006df8:	2101      	movs	r1, #1
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 f9f2 	bl	80081e4 <RCCEx_PLL2_Config>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e06:	e015      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0c:	3328      	adds	r3, #40	; 0x28
 8006e0e:	2101      	movs	r1, #1
 8006e10:	4618      	mov	r0, r3
 8006e12:	f001 fa99 	bl	8008348 <RCCEx_PLL3_Config>
 8006e16:	4603      	mov	r3, r0
 8006e18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e1c:	e00a      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e24:	e006      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e26:	bf00      	nop
 8006e28:	e004      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e2a:	bf00      	nop
 8006e2c:	e002      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e2e:	bf00      	nop
 8006e30:	e000      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e3c:	4b38      	ldr	r3, [pc, #224]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e40:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4a:	4a35      	ldr	r2, [pc, #212]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	6513      	str	r3, [r2, #80]	; 0x50
 8006e50:	e003      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e56:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e70:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e74:	460b      	mov	r3, r1
 8006e76:	4313      	orrs	r3, r2
 8006e78:	d058      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e86:	d033      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e8c:	d82c      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e92:	d02f      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e98:	d826      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e9e:	d02b      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006ea0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ea4:	d820      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eaa:	d012      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb0:	d81a      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d022      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eba:	d115      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 f98d 	bl	80081e4 <RCCEx_PLL2_Config>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ed0:	e015      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed6:	3328      	adds	r3, #40	; 0x28
 8006ed8:	2101      	movs	r1, #1
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 fa34 	bl	8008348 <RCCEx_PLL3_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ee6:	e00a      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006eee:	e006      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ef0:	bf00      	nop
 8006ef2:	e004      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ef4:	bf00      	nop
 8006ef6:	e002      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ef8:	bf00      	nop
 8006efa:	e000      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006efe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10e      	bne.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f16:	4a02      	ldr	r2, [pc, #8]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f1c:	e006      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006f1e:	bf00      	nop
 8006f20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	d037      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f56:	d00e      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f5c:	d816      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d018      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f66:	d111      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f68:	4bc4      	ldr	r3, [pc, #784]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	4ac3      	ldr	r2, [pc, #780]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f74:	e00f      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 f930 	bl	80081e4 <RCCEx_PLL2_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f8a:	e004      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f92:	e000      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10a      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f9e:	4bb7      	ldr	r3, [pc, #732]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fac:	4ab3      	ldr	r2, [pc, #716]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	6513      	str	r3, [r2, #80]	; 0x50
 8006fb2:	e003      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fd2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	d039      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d81c      	bhi.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006fe6:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007029 	.word	0x08007029
 8006ff0:	08006ffd 	.word	0x08006ffd
 8006ff4:	0800700b 	.word	0x0800700b
 8006ff8:	08007029 	.word	0x08007029
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffc:	4b9f      	ldr	r3, [pc, #636]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	4a9e      	ldr	r2, [pc, #632]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007006:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007008:	e00f      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800700a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700e:	3308      	adds	r3, #8
 8007010:	2102      	movs	r1, #2
 8007012:	4618      	mov	r0, r3
 8007014:	f001 f8e6 	bl	80081e4 <RCCEx_PLL2_Config>
 8007018:	4603      	mov	r3, r0
 800701a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800701e:	e004      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007026:	e000      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800702a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007032:	4b92      	ldr	r3, [pc, #584]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007036:	f023 0103 	bic.w	r1, r3, #3
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007040:	4a8e      	ldr	r2, [pc, #568]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007042:	430b      	orrs	r3, r1
 8007044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007046:	e003      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800704c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800705c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007060:	2300      	movs	r3, #0
 8007062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007066:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800706a:	460b      	mov	r3, r1
 800706c:	4313      	orrs	r3, r2
 800706e:	f000 8099 	beq.w	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007072:	4b83      	ldr	r3, [pc, #524]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a82      	ldr	r2, [pc, #520]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800707c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800707e:	f7fa ff2f 	bl	8001ee0 <HAL_GetTick>
 8007082:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007086:	e00b      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007088:	f7fa ff2a 	bl	8001ee0 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b64      	cmp	r3, #100	; 0x64
 8007096:	d903      	bls.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800709e:	e005      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070a0:	4b77      	ldr	r3, [pc, #476]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0ed      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80070ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d173      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80070b4:	4b71      	ldr	r3, [pc, #452]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070c0:	4053      	eors	r3, r2
 80070c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d015      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070ca:	4b6c      	ldr	r3, [pc, #432]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070d6:	4b69      	ldr	r3, [pc, #420]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070da:	4a68      	ldr	r2, [pc, #416]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070e2:	4b66      	ldr	r3, [pc, #408]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	4a65      	ldr	r2, [pc, #404]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070ee:	4a63      	ldr	r2, [pc, #396]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007102:	d118      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007104:	f7fa feec 	bl	8001ee0 <HAL_GetTick>
 8007108:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800710c:	e00d      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800710e:	f7fa fee7 	bl	8001ee0 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007118:	1ad2      	subs	r2, r2, r3
 800711a:	f241 3388 	movw	r3, #5000	; 0x1388
 800711e:	429a      	cmp	r2, r3
 8007120:	d903      	bls.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8007128:	e005      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800712a:	4b54      	ldr	r3, [pc, #336]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800712c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0eb      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007136:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800713a:	2b00      	cmp	r3, #0
 800713c:	d129      	bne.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800713e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800714a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800714e:	d10e      	bne.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007150:	4b4a      	ldr	r3, [pc, #296]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800715c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007160:	091a      	lsrs	r2, r3, #4
 8007162:	4b48      	ldr	r3, [pc, #288]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007164:	4013      	ands	r3, r2
 8007166:	4a45      	ldr	r2, [pc, #276]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007168:	430b      	orrs	r3, r1
 800716a:	6113      	str	r3, [r2, #16]
 800716c:	e005      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800716e:	4b43      	ldr	r3, [pc, #268]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	4a42      	ldr	r2, [pc, #264]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007174:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007178:	6113      	str	r3, [r2, #16]
 800717a:	4b40      	ldr	r3, [pc, #256]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800717c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007182:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800718a:	4a3c      	ldr	r2, [pc, #240]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800718c:	430b      	orrs	r3, r1
 800718e:	6713      	str	r3, [r2, #112]	; 0x70
 8007190:	e008      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007192:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007196:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800719a:	e003      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f002 0301 	and.w	r3, r2, #1
 80071b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071b4:	2300      	movs	r3, #0
 80071b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80071be:	460b      	mov	r3, r1
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f000 808f 	beq.w	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80071c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071cc:	2b28      	cmp	r3, #40	; 0x28
 80071ce:	d871      	bhi.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	080072bd 	.word	0x080072bd
 80071dc:	080072b5 	.word	0x080072b5
 80071e0:	080072b5 	.word	0x080072b5
 80071e4:	080072b5 	.word	0x080072b5
 80071e8:	080072b5 	.word	0x080072b5
 80071ec:	080072b5 	.word	0x080072b5
 80071f0:	080072b5 	.word	0x080072b5
 80071f4:	080072b5 	.word	0x080072b5
 80071f8:	08007289 	.word	0x08007289
 80071fc:	080072b5 	.word	0x080072b5
 8007200:	080072b5 	.word	0x080072b5
 8007204:	080072b5 	.word	0x080072b5
 8007208:	080072b5 	.word	0x080072b5
 800720c:	080072b5 	.word	0x080072b5
 8007210:	080072b5 	.word	0x080072b5
 8007214:	080072b5 	.word	0x080072b5
 8007218:	0800729f 	.word	0x0800729f
 800721c:	080072b5 	.word	0x080072b5
 8007220:	080072b5 	.word	0x080072b5
 8007224:	080072b5 	.word	0x080072b5
 8007228:	080072b5 	.word	0x080072b5
 800722c:	080072b5 	.word	0x080072b5
 8007230:	080072b5 	.word	0x080072b5
 8007234:	080072b5 	.word	0x080072b5
 8007238:	080072bd 	.word	0x080072bd
 800723c:	080072b5 	.word	0x080072b5
 8007240:	080072b5 	.word	0x080072b5
 8007244:	080072b5 	.word	0x080072b5
 8007248:	080072b5 	.word	0x080072b5
 800724c:	080072b5 	.word	0x080072b5
 8007250:	080072b5 	.word	0x080072b5
 8007254:	080072b5 	.word	0x080072b5
 8007258:	080072bd 	.word	0x080072bd
 800725c:	080072b5 	.word	0x080072b5
 8007260:	080072b5 	.word	0x080072b5
 8007264:	080072b5 	.word	0x080072b5
 8007268:	080072b5 	.word	0x080072b5
 800726c:	080072b5 	.word	0x080072b5
 8007270:	080072b5 	.word	0x080072b5
 8007274:	080072b5 	.word	0x080072b5
 8007278:	080072bd 	.word	0x080072bd
 800727c:	58024400 	.word	0x58024400
 8007280:	58024800 	.word	0x58024800
 8007284:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728c:	3308      	adds	r3, #8
 800728e:	2101      	movs	r1, #1
 8007290:	4618      	mov	r0, r3
 8007292:	f000 ffa7 	bl	80081e4 <RCCEx_PLL2_Config>
 8007296:	4603      	mov	r3, r0
 8007298:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800729c:	e00f      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800729e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a2:	3328      	adds	r3, #40	; 0x28
 80072a4:	2101      	movs	r1, #1
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 f84e 	bl	8008348 <RCCEx_PLL3_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072b2:	e004      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80072ba:	e000      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80072bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80072c6:	4bbf      	ldr	r3, [pc, #764]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80072ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d4:	4abb      	ldr	r2, [pc, #748]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072d6:	430b      	orrs	r3, r1
 80072d8:	6553      	str	r3, [r2, #84]	; 0x54
 80072da:	e003      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f002 0302 	and.w	r3, r2, #2
 80072f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072f4:	2300      	movs	r3, #0
 80072f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80072fe:	460b      	mov	r3, r1
 8007300:	4313      	orrs	r3, r2
 8007302:	d041      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800730a:	2b05      	cmp	r3, #5
 800730c:	d824      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007361 	.word	0x08007361
 8007318:	0800732d 	.word	0x0800732d
 800731c:	08007343 	.word	0x08007343
 8007320:	08007361 	.word	0x08007361
 8007324:	08007361 	.word	0x08007361
 8007328:	08007361 	.word	0x08007361
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007330:	3308      	adds	r3, #8
 8007332:	2101      	movs	r1, #1
 8007334:	4618      	mov	r0, r3
 8007336:	f000 ff55 	bl	80081e4 <RCCEx_PLL2_Config>
 800733a:	4603      	mov	r3, r0
 800733c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007340:	e00f      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007346:	3328      	adds	r3, #40	; 0x28
 8007348:	2101      	movs	r1, #1
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fffc 	bl	8008348 <RCCEx_PLL3_Config>
 8007350:	4603      	mov	r3, r0
 8007352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007356:	e004      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800735e:	e000      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007362:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10a      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800736a:	4b96      	ldr	r3, [pc, #600]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f023 0107 	bic.w	r1, r3, #7
 8007372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007378:	4a92      	ldr	r2, [pc, #584]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800737a:	430b      	orrs	r3, r1
 800737c:	6553      	str	r3, [r2, #84]	; 0x54
 800737e:	e003      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007380:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007384:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f002 0304 	and.w	r3, r2, #4
 8007394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007398:	2300      	movs	r3, #0
 800739a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800739e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073a2:	460b      	mov	r3, r1
 80073a4:	4313      	orrs	r3, r2
 80073a6:	d044      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b0:	2b05      	cmp	r3, #5
 80073b2:	d825      	bhi.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80073b4:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	08007409 	.word	0x08007409
 80073c0:	080073d5 	.word	0x080073d5
 80073c4:	080073eb 	.word	0x080073eb
 80073c8:	08007409 	.word	0x08007409
 80073cc:	08007409 	.word	0x08007409
 80073d0:	08007409 	.word	0x08007409
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d8:	3308      	adds	r3, #8
 80073da:	2101      	movs	r1, #1
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 ff01 	bl	80081e4 <RCCEx_PLL2_Config>
 80073e2:	4603      	mov	r3, r0
 80073e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073e8:	e00f      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ee:	3328      	adds	r3, #40	; 0x28
 80073f0:	2101      	movs	r1, #1
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 ffa8 	bl	8008348 <RCCEx_PLL3_Config>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073fe:	e004      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007406:	e000      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800740a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10b      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007412:	4b6c      	ldr	r3, [pc, #432]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007416:	f023 0107 	bic.w	r1, r3, #7
 800741a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007422:	4a68      	ldr	r2, [pc, #416]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007424:	430b      	orrs	r3, r1
 8007426:	6593      	str	r3, [r2, #88]	; 0x58
 8007428:	e003      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800742e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f002 0320 	and.w	r3, r2, #32
 800743e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007442:	2300      	movs	r3, #0
 8007444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007448:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800744c:	460b      	mov	r3, r1
 800744e:	4313      	orrs	r3, r2
 8007450:	d055      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800745a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800745e:	d033      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007464:	d82c      	bhi.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746a:	d02f      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800746c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007470:	d826      	bhi.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007472:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007476:	d02b      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007478:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800747c:	d820      	bhi.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800747e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007482:	d012      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007488:	d81a      	bhi.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d022      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800748e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007492:	d115      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007498:	3308      	adds	r3, #8
 800749a:	2100      	movs	r1, #0
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fea1 	bl	80081e4 <RCCEx_PLL2_Config>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074a8:	e015      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ae:	3328      	adds	r3, #40	; 0x28
 80074b0:	2102      	movs	r1, #2
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 ff48 	bl	8008348 <RCCEx_PLL3_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074be:	e00a      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80074c6:	e006      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074c8:	bf00      	nop
 80074ca:	e004      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074cc:	bf00      	nop
 80074ce:	e002      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074d0:	bf00      	nop
 80074d2:	e000      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10b      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074de:	4b39      	ldr	r3, [pc, #228]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ee:	4a35      	ldr	r2, [pc, #212]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6553      	str	r3, [r2, #84]	; 0x54
 80074f4:	e003      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800750a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800750e:	2300      	movs	r3, #0
 8007510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007514:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007518:	460b      	mov	r3, r1
 800751a:	4313      	orrs	r3, r2
 800751c:	d058      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007526:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800752a:	d033      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800752c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007530:	d82c      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007536:	d02f      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753c:	d826      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800753e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007542:	d02b      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007548:	d820      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800754a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754e:	d012      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007554:	d81a      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d022      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800755a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755e:	d115      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007564:	3308      	adds	r3, #8
 8007566:	2100      	movs	r1, #0
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fe3b 	bl	80081e4 <RCCEx_PLL2_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007574:	e015      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800757a:	3328      	adds	r3, #40	; 0x28
 800757c:	2102      	movs	r1, #2
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fee2 	bl	8008348 <RCCEx_PLL3_Config>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800758a:	e00a      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007592:	e006      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007594:	bf00      	nop
 8007596:	e004      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007598:	bf00      	nop
 800759a:	e002      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800759c:	bf00      	nop
 800759e:	e000      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10e      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075aa:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80075b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075ba:	4a02      	ldr	r2, [pc, #8]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075bc:	430b      	orrs	r3, r1
 80075be:	6593      	str	r3, [r2, #88]	; 0x58
 80075c0:	e006      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80075c2:	bf00      	nop
 80075c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80075dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075e0:	2300      	movs	r3, #0
 80075e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80075ea:	460b      	mov	r3, r1
 80075ec:	4313      	orrs	r3, r2
 80075ee:	d055      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075fc:	d033      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80075fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007602:	d82c      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007608:	d02f      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800760a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800760e:	d826      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007610:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007614:	d02b      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007616:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800761a:	d820      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800761c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007620:	d012      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007626:	d81a      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d022      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800762c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007630:	d115      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007636:	3308      	adds	r3, #8
 8007638:	2100      	movs	r1, #0
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fdd2 	bl	80081e4 <RCCEx_PLL2_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007646:	e015      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800764c:	3328      	adds	r3, #40	; 0x28
 800764e:	2102      	movs	r1, #2
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fe79 	bl	8008348 <RCCEx_PLL3_Config>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800765c:	e00a      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007664:	e006      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007666:	bf00      	nop
 8007668:	e004      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800766a:	bf00      	nop
 800766c:	e002      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800766e:	bf00      	nop
 8007670:	e000      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10b      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800767c:	4ba0      	ldr	r3, [pc, #640]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800767e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007680:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007688:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800768c:	4a9c      	ldr	r2, [pc, #624]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800768e:	430b      	orrs	r3, r1
 8007690:	6593      	str	r3, [r2, #88]	; 0x58
 8007692:	e003      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007694:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007698:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	f002 0308 	and.w	r3, r2, #8
 80076a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076ac:	2300      	movs	r3, #0
 80076ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80076b2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80076b6:	460b      	mov	r3, r1
 80076b8:	4313      	orrs	r3, r2
 80076ba:	d01e      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80076bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c8:	d10c      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ce:	3328      	adds	r3, #40	; 0x28
 80076d0:	2102      	movs	r1, #2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fe38 	bl	8008348 <RCCEx_PLL3_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80076e4:	4b86      	ldr	r3, [pc, #536]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f4:	4a82      	ldr	r2, [pc, #520]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076f6:	430b      	orrs	r3, r1
 80076f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f002 0310 	and.w	r3, r2, #16
 8007706:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800770a:	2300      	movs	r3, #0
 800770c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007710:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007714:	460b      	mov	r3, r1
 8007716:	4313      	orrs	r3, r2
 8007718:	d01e      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800771a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800771e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007726:	d10c      	bne.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800772c:	3328      	adds	r3, #40	; 0x28
 800772e:	2102      	movs	r1, #2
 8007730:	4618      	mov	r0, r3
 8007732:	f000 fe09 	bl	8008348 <RCCEx_PLL3_Config>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007742:	4b6f      	ldr	r3, [pc, #444]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007746:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800774a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800774e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007752:	4a6b      	ldr	r2, [pc, #428]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007754:	430b      	orrs	r3, r1
 8007756:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007764:	67bb      	str	r3, [r7, #120]	; 0x78
 8007766:	2300      	movs	r3, #0
 8007768:	67fb      	str	r3, [r7, #124]	; 0x7c
 800776a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800776e:	460b      	mov	r3, r1
 8007770:	4313      	orrs	r3, r2
 8007772:	d03e      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007778:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800777c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007780:	d022      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007786:	d81b      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800778c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007790:	d00b      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007792:	e015      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007798:	3308      	adds	r3, #8
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fd21 	bl	80081e4 <RCCEx_PLL2_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077a8:	e00f      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ae:	3328      	adds	r3, #40	; 0x28
 80077b0:	2102      	movs	r1, #2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fdc8 	bl	8008348 <RCCEx_PLL3_Config>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077be:	e004      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80077c6:	e000      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80077c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10b      	bne.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077d2:	4b4b      	ldr	r3, [pc, #300]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80077da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077e2:	4a47      	ldr	r2, [pc, #284]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077e4:	430b      	orrs	r3, r1
 80077e6:	6593      	str	r3, [r2, #88]	; 0x58
 80077e8:	e003      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80077fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007800:	2300      	movs	r3, #0
 8007802:	677b      	str	r3, [r7, #116]	; 0x74
 8007804:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007808:	460b      	mov	r3, r1
 800780a:	4313      	orrs	r3, r2
 800780c:	d03b      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800780e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007816:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800781a:	d01f      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800781c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007820:	d818      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007826:	d003      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800782c:	d007      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800782e:	e011      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007830:	4b33      	ldr	r3, [pc, #204]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	4a32      	ldr	r2, [pc, #200]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800783a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800783c:	e00f      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800783e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007842:	3328      	adds	r3, #40	; 0x28
 8007844:	2101      	movs	r1, #1
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fd7e 	bl	8008348 <RCCEx_PLL3_Config>
 800784c:	4603      	mov	r3, r0
 800784e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007852:	e004      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800785a:	e000      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800785c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800785e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10b      	bne.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007866:	4b26      	ldr	r3, [pc, #152]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007876:	4a22      	ldr	r2, [pc, #136]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007878:	430b      	orrs	r3, r1
 800787a:	6553      	str	r3, [r2, #84]	; 0x54
 800787c:	e003      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007882:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007892:	66bb      	str	r3, [r7, #104]	; 0x68
 8007894:	2300      	movs	r3, #0
 8007896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007898:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800789c:	460b      	mov	r3, r1
 800789e:	4313      	orrs	r3, r2
 80078a0:	d034      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80078a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b0:	d007      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80078b2:	e011      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b4:	4b12      	ldr	r3, [pc, #72]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	4a11      	ldr	r2, [pc, #68]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078c0:	e00e      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c6:	3308      	adds	r3, #8
 80078c8:	2102      	movs	r1, #2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fc8a 	bl	80081e4 <RCCEx_PLL2_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078d6:	e003      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80078de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10d      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f6:	4a02      	ldr	r2, [pc, #8]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078f8:	430b      	orrs	r3, r1
 80078fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078fc:	e006      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007908:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007918:	663b      	str	r3, [r7, #96]	; 0x60
 800791a:	2300      	movs	r3, #0
 800791c:	667b      	str	r3, [r7, #100]	; 0x64
 800791e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007922:	460b      	mov	r3, r1
 8007924:	4313      	orrs	r3, r2
 8007926:	d00c      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792c:	3328      	adds	r3, #40	; 0x28
 800792e:	2102      	movs	r1, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fd09 	bl	8008348 <RCCEx_PLL3_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800794e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007950:	2300      	movs	r3, #0
 8007952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007954:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007958:	460b      	mov	r3, r1
 800795a:	4313      	orrs	r3, r2
 800795c:	d036      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007968:	d018      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800796a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800796e:	d811      	bhi.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007974:	d014      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800797a:	d80b      	bhi.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800797c:	2b00      	cmp	r3, #0
 800797e:	d011      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007984:	d106      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007986:	4bb7      	ldr	r3, [pc, #732]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	4ab6      	ldr	r2, [pc, #728]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800798c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007992:	e008      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800799a:	e004      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800799c:	bf00      	nop
 800799e:	e002      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079a0:	bf00      	nop
 80079a2:	e000      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079ae:	4bad      	ldr	r3, [pc, #692]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079bc:	4aa9      	ldr	r2, [pc, #676]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079be:	430b      	orrs	r3, r1
 80079c0:	6553      	str	r3, [r2, #84]	; 0x54
 80079c2:	e003      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80079d8:	653b      	str	r3, [r7, #80]	; 0x50
 80079da:	2300      	movs	r3, #0
 80079dc:	657b      	str	r3, [r7, #84]	; 0x54
 80079de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80079e2:	460b      	mov	r3, r1
 80079e4:	4313      	orrs	r3, r2
 80079e6:	d009      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079e8:	4b9e      	ldr	r3, [pc, #632]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	4a9b      	ldr	r2, [pc, #620]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079f8:	430b      	orrs	r3, r1
 80079fa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a0e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007a12:	460b      	mov	r3, r1
 8007a14:	4313      	orrs	r3, r2
 8007a16:	d009      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a18:	4b92      	ldr	r3, [pc, #584]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a26:	4a8f      	ldr	r2, [pc, #572]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007a38:	643b      	str	r3, [r7, #64]	; 0x40
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007a42:	460b      	mov	r3, r1
 8007a44:	4313      	orrs	r3, r2
 8007a46:	d00e      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a48:	4b86      	ldr	r3, [pc, #536]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	4a85      	ldr	r2, [pc, #532]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a52:	6113      	str	r3, [r2, #16]
 8007a54:	4b83      	ldr	r3, [pc, #524]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a56:	6919      	ldr	r1, [r3, #16]
 8007a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a60:	4a80      	ldr	r2, [pc, #512]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a62:	430b      	orrs	r3, r1
 8007a64:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a74:	2300      	movs	r3, #0
 8007a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a78:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	d009      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a82:	4b78      	ldr	r3, [pc, #480]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a86:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a90:	4a74      	ldr	r2, [pc, #464]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a92:	430b      	orrs	r3, r1
 8007a94:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007aac:	460b      	mov	r3, r1
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ab2:	4b6c      	ldr	r3, [pc, #432]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac2:	4a68      	ldr	r2, [pc, #416]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ada:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	d011      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae8:	3308      	adds	r3, #8
 8007aea:	2100      	movs	r1, #0
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fb79 	bl	80081e4 <RCCEx_PLL2_Config>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007af8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	2100      	movs	r1, #0
 8007b12:	6239      	str	r1, [r7, #32]
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	d011      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b28:	3308      	adds	r3, #8
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fb59 	bl	80081e4 <RCCEx_PLL2_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007b38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	2100      	movs	r1, #0
 8007b52:	61b9      	str	r1, [r7, #24]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	61fb      	str	r3, [r7, #28]
 8007b5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4313      	orrs	r3, r2
 8007b62:	d011      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b68:	3308      	adds	r3, #8
 8007b6a:	2102      	movs	r1, #2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 fb39 	bl	80081e4 <RCCEx_PLL2_Config>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007b78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	2100      	movs	r1, #0
 8007b92:	6139      	str	r1, [r7, #16]
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	d011      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba8:	3328      	adds	r3, #40	; 0x28
 8007baa:	2100      	movs	r1, #0
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fbcb 	bl	8008348 <RCCEx_PLL3_Config>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007bde:	460b      	mov	r3, r1
 8007be0:	4313      	orrs	r3, r2
 8007be2:	d011      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be8:	3328      	adds	r3, #40	; 0x28
 8007bea:	2101      	movs	r1, #1
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fbab 	bl	8008348 <RCCEx_PLL3_Config>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007bf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	2100      	movs	r1, #0
 8007c12:	6039      	str	r1, [r7, #0]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	607b      	str	r3, [r7, #4]
 8007c1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4313      	orrs	r3, r2
 8007c22:	d011      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c28:	3328      	adds	r3, #40	; 0x28
 8007c2a:	2102      	movs	r1, #2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fb8b 	bl	8008348 <RCCEx_PLL3_Config>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007c38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007c48:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	e000      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c62:	bf00      	nop
 8007c64:	58024400 	.word	0x58024400

08007c68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c6c:	f7fe fe00 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 8007c70:	4602      	mov	r2, r0
 8007c72:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	091b      	lsrs	r3, r3, #4
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	4904      	ldr	r1, [pc, #16]	; (8007c90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c7e:	5ccb      	ldrb	r3, [r1, r3]
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	58024400 	.word	0x58024400
 8007c90:	0800c094 	.word	0x0800c094

08007c94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b089      	sub	sp, #36	; 0x24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c9c:	4ba1      	ldr	r3, [pc, #644]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007ca6:	4b9f      	ldr	r3, [pc, #636]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	0b1b      	lsrs	r3, r3, #12
 8007cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007cb2:	4b9c      	ldr	r3, [pc, #624]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	091b      	lsrs	r3, r3, #4
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007cbe:	4b99      	ldr	r3, [pc, #612]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	08db      	lsrs	r3, r3, #3
 8007cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 8111 	beq.w	8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	f000 8083 	beq.w	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	f200 80a1 	bhi.w	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d056      	beq.n	8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007cfe:	e099      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d00:	4b88      	ldr	r3, [pc, #544]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d02d      	beq.n	8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d0c:	4b85      	ldr	r3, [pc, #532]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	08db      	lsrs	r3, r3, #3
 8007d12:	f003 0303 	and.w	r3, r3, #3
 8007d16:	4a84      	ldr	r2, [pc, #528]	; (8007f28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	ee07 3a90 	vmov	s15, r3
 8007d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d36:	4b7b      	ldr	r3, [pc, #492]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d66:	e087      	b.n	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7a:	4b6a      	ldr	r3, [pc, #424]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007daa:	e065      	b.n	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbe:	4b59      	ldr	r3, [pc, #356]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dee:	e043      	b.n	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e02:	4b48      	ldr	r3, [pc, #288]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e32:	e021      	b.n	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e46:	4b37      	ldr	r3, [pc, #220]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007e78:	4b2a      	ldr	r3, [pc, #168]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7c:	0a5b      	lsrs	r3, r3, #9
 8007e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e82:	ee07 3a90 	vmov	s15, r3
 8007e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e9e:	ee17 2a90 	vmov	r2, s15
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007ea6:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	0c1b      	lsrs	r3, r3, #16
 8007eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ecc:	ee17 2a90 	vmov	r2, s15
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007ed4:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed8:	0e1b      	lsrs	r3, r3, #24
 8007eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007efa:	ee17 2a90 	vmov	r2, s15
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007f02:	e008      	b.n	8007f16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	609a      	str	r2, [r3, #8]
}
 8007f16:	bf00      	nop
 8007f18:	3724      	adds	r7, #36	; 0x24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	58024400 	.word	0x58024400
 8007f28:	03d09000 	.word	0x03d09000
 8007f2c:	46000000 	.word	0x46000000
 8007f30:	4c742400 	.word	0x4c742400
 8007f34:	4a742400 	.word	0x4a742400
 8007f38:	4af42400 	.word	0x4af42400

08007f3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f44:	4ba1      	ldr	r3, [pc, #644]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007f4e:	4b9f      	ldr	r3, [pc, #636]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f52:	0d1b      	lsrs	r3, r3, #20
 8007f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f5a:	4b9c      	ldr	r3, [pc, #624]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	0a1b      	lsrs	r3, r3, #8
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007f66:	4b99      	ldr	r3, [pc, #612]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6a:	08db      	lsrs	r3, r3, #3
 8007f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	fb02 f303 	mul.w	r3, r2, r3
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 8111 	beq.w	80081ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	f000 8083 	beq.w	8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	f200 80a1 	bhi.w	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d056      	beq.n	8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007fa6:	e099      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fa8:	4b88      	ldr	r3, [pc, #544]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d02d      	beq.n	8008010 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fb4:	4b85      	ldr	r3, [pc, #532]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	08db      	lsrs	r3, r3, #3
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	4a84      	ldr	r2, [pc, #528]	; (80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	ee07 3a90 	vmov	s15, r3
 8007fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fde:	4b7b      	ldr	r3, [pc, #492]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800800e:	e087      	b.n	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800801e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008022:	4b6a      	ldr	r3, [pc, #424]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008032:	ed97 6a03 	vldr	s12, [r7, #12]
 8008036:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800803a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008052:	e065      	b.n	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b59      	ldr	r3, [pc, #356]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	ed97 6a03 	vldr	s12, [r7, #12]
 800807a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008096:	e043      	b.n	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b48      	ldr	r3, [pc, #288]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80080be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080da:	e021      	b.n	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ee:	4b37      	ldr	r3, [pc, #220]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008102:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800811e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008120:	4b2a      	ldr	r3, [pc, #168]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	0a5b      	lsrs	r3, r3, #9
 8008126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800813a:	edd7 6a07 	vldr	s13, [r7, #28]
 800813e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008146:	ee17 2a90 	vmov	r2, s15
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800814e:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	0c1b      	lsrs	r3, r3, #16
 8008154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008158:	ee07 3a90 	vmov	s15, r3
 800815c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008168:	edd7 6a07 	vldr	s13, [r7, #28]
 800816c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008174:	ee17 2a90 	vmov	r2, s15
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800817c:	4b13      	ldr	r3, [pc, #76]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	0e1b      	lsrs	r3, r3, #24
 8008182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008196:	edd7 6a07 	vldr	s13, [r7, #28]
 800819a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800819e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081a2:	ee17 2a90 	vmov	r2, s15
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80081aa:	e008      	b.n	80081be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	609a      	str	r2, [r3, #8]
}
 80081be:	bf00      	nop
 80081c0:	3724      	adds	r7, #36	; 0x24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
 80081d0:	03d09000 	.word	0x03d09000
 80081d4:	46000000 	.word	0x46000000
 80081d8:	4c742400 	.word	0x4c742400
 80081dc:	4a742400 	.word	0x4a742400
 80081e0:	4af42400 	.word	0x4af42400

080081e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081f2:	4b53      	ldr	r3, [pc, #332]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d101      	bne.n	8008202 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e099      	b.n	8008336 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008202:	4b4f      	ldr	r3, [pc, #316]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a4e      	ldr	r2, [pc, #312]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008208:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800820c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800820e:	f7f9 fe67 	bl	8001ee0 <HAL_GetTick>
 8008212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008214:	e008      	b.n	8008228 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008216:	f7f9 fe63 	bl	8001ee0 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	2b02      	cmp	r3, #2
 8008222:	d901      	bls.n	8008228 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e086      	b.n	8008336 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008228:	4b45      	ldr	r3, [pc, #276]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f0      	bne.n	8008216 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008234:	4b42      	ldr	r3, [pc, #264]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	031b      	lsls	r3, r3, #12
 8008242:	493f      	ldr	r1, [pc, #252]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008244:	4313      	orrs	r3, r2
 8008246:	628b      	str	r3, [r1, #40]	; 0x28
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	3b01      	subs	r3, #1
 800824e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	3b01      	subs	r3, #1
 8008258:	025b      	lsls	r3, r3, #9
 800825a:	b29b      	uxth	r3, r3
 800825c:	431a      	orrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	3b01      	subs	r3, #1
 8008264:	041b      	lsls	r3, r3, #16
 8008266:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	3b01      	subs	r3, #1
 8008272:	061b      	lsls	r3, r3, #24
 8008274:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008278:	4931      	ldr	r1, [pc, #196]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 800827a:	4313      	orrs	r3, r2
 800827c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800827e:	4b30      	ldr	r3, [pc, #192]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	492d      	ldr	r1, [pc, #180]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 800828c:	4313      	orrs	r3, r2
 800828e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008290:	4b2b      	ldr	r3, [pc, #172]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	f023 0220 	bic.w	r2, r3, #32
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	4928      	ldr	r1, [pc, #160]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80082a2:	4b27      	ldr	r3, [pc, #156]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a6:	4a26      	ldr	r2, [pc, #152]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082a8:	f023 0310 	bic.w	r3, r3, #16
 80082ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80082ae:	4b24      	ldr	r3, [pc, #144]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082b2:	4b24      	ldr	r3, [pc, #144]	; (8008344 <RCCEx_PLL2_Config+0x160>)
 80082b4:	4013      	ands	r3, r2
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	69d2      	ldr	r2, [r2, #28]
 80082ba:	00d2      	lsls	r2, r2, #3
 80082bc:	4920      	ldr	r1, [pc, #128]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80082c2:	4b1f      	ldr	r3, [pc, #124]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	4a1e      	ldr	r2, [pc, #120]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082c8:	f043 0310 	orr.w	r3, r3, #16
 80082cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80082d4:	4b1a      	ldr	r3, [pc, #104]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	4a19      	ldr	r2, [pc, #100]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082e0:	e00f      	b.n	8008302 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d106      	bne.n	80082f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082e8:	4b15      	ldr	r3, [pc, #84]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	4a14      	ldr	r2, [pc, #80]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082f4:	e005      	b.n	8008302 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082f6:	4b12      	ldr	r3, [pc, #72]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	4a11      	ldr	r2, [pc, #68]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008300:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008302:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a0e      	ldr	r2, [pc, #56]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800830c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800830e:	f7f9 fde7 	bl	8001ee0 <HAL_GetTick>
 8008312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008314:	e008      	b.n	8008328 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008316:	f7f9 fde3 	bl	8001ee0 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e006      	b.n	8008336 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0f0      	beq.n	8008316 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	58024400 	.word	0x58024400
 8008344:	ffff0007 	.word	0xffff0007

08008348 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008356:	4b53      	ldr	r3, [pc, #332]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	2b03      	cmp	r3, #3
 8008360:	d101      	bne.n	8008366 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e099      	b.n	800849a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008366:	4b4f      	ldr	r3, [pc, #316]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a4e      	ldr	r2, [pc, #312]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800836c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008372:	f7f9 fdb5 	bl	8001ee0 <HAL_GetTick>
 8008376:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008378:	e008      	b.n	800838c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800837a:	f7f9 fdb1 	bl	8001ee0 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b02      	cmp	r3, #2
 8008386:	d901      	bls.n	800838c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e086      	b.n	800849a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800838c:	4b45      	ldr	r3, [pc, #276]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1f0      	bne.n	800837a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008398:	4b42      	ldr	r3, [pc, #264]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	051b      	lsls	r3, r3, #20
 80083a6:	493f      	ldr	r1, [pc, #252]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	628b      	str	r3, [r1, #40]	; 0x28
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	025b      	lsls	r3, r3, #9
 80083be:	b29b      	uxth	r3, r3
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	041b      	lsls	r3, r3, #16
 80083ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083ce:	431a      	orrs	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	061b      	lsls	r3, r3, #24
 80083d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083dc:	4931      	ldr	r1, [pc, #196]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80083e2:	4b30      	ldr	r3, [pc, #192]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	492d      	ldr	r1, [pc, #180]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083f4:	4b2b      	ldr	r3, [pc, #172]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	4928      	ldr	r1, [pc, #160]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008402:	4313      	orrs	r3, r2
 8008404:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008406:	4b27      	ldr	r3, [pc, #156]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	4a26      	ldr	r2, [pc, #152]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800840c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008410:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008412:	4b24      	ldr	r3, [pc, #144]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008416:	4b24      	ldr	r3, [pc, #144]	; (80084a8 <RCCEx_PLL3_Config+0x160>)
 8008418:	4013      	ands	r3, r2
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	69d2      	ldr	r2, [r2, #28]
 800841e:	00d2      	lsls	r2, r2, #3
 8008420:	4920      	ldr	r1, [pc, #128]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008422:	4313      	orrs	r3, r2
 8008424:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008426:	4b1f      	ldr	r3, [pc, #124]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	4a1e      	ldr	r2, [pc, #120]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800842c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008430:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008438:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	4a19      	ldr	r2, [pc, #100]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800843e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008442:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008444:	e00f      	b.n	8008466 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d106      	bne.n	800845a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800844c:	4b15      	ldr	r3, [pc, #84]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	4a14      	ldr	r2, [pc, #80]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008452:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008456:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008458:	e005      	b.n	8008466 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800845a:	4b12      	ldr	r3, [pc, #72]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	4a11      	ldr	r2, [pc, #68]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008464:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008466:	4b0f      	ldr	r3, [pc, #60]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a0e      	ldr	r2, [pc, #56]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800846c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008472:	f7f9 fd35 	bl	8001ee0 <HAL_GetTick>
 8008476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008478:	e008      	b.n	800848c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800847a:	f7f9 fd31 	bl	8001ee0 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e006      	b.n	800849a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0f0      	beq.n	800847a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008498:	7bfb      	ldrb	r3, [r7, #15]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	58024400 	.word	0x58024400
 80084a8:	ffff0007 	.word	0xffff0007

080084ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e10f      	b.n	80086de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a87      	ldr	r2, [pc, #540]	; (80086e8 <HAL_SPI_Init+0x23c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00f      	beq.n	80084ee <HAL_SPI_Init+0x42>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a86      	ldr	r2, [pc, #536]	; (80086ec <HAL_SPI_Init+0x240>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d00a      	beq.n	80084ee <HAL_SPI_Init+0x42>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a84      	ldr	r2, [pc, #528]	; (80086f0 <HAL_SPI_Init+0x244>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d005      	beq.n	80084ee <HAL_SPI_Init+0x42>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	2b0f      	cmp	r3, #15
 80084e8:	d901      	bls.n	80084ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e0f7      	b.n	80086de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fe82 	bl	80091f8 <SPI_GetPacketSize>
 80084f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a7b      	ldr	r2, [pc, #492]	; (80086e8 <HAL_SPI_Init+0x23c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d00c      	beq.n	800851a <HAL_SPI_Init+0x6e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a79      	ldr	r2, [pc, #484]	; (80086ec <HAL_SPI_Init+0x240>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d007      	beq.n	800851a <HAL_SPI_Init+0x6e>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a78      	ldr	r2, [pc, #480]	; (80086f0 <HAL_SPI_Init+0x244>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d002      	beq.n	800851a <HAL_SPI_Init+0x6e>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b08      	cmp	r3, #8
 8008518:	d811      	bhi.n	800853e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800851e:	4a72      	ldr	r2, [pc, #456]	; (80086e8 <HAL_SPI_Init+0x23c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d009      	beq.n	8008538 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a70      	ldr	r2, [pc, #448]	; (80086ec <HAL_SPI_Init+0x240>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d004      	beq.n	8008538 <HAL_SPI_Init+0x8c>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a6f      	ldr	r2, [pc, #444]	; (80086f0 <HAL_SPI_Init+0x244>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d104      	bne.n	8008542 <HAL_SPI_Init+0x96>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b10      	cmp	r3, #16
 800853c:	d901      	bls.n	8008542 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e0cd      	b.n	80086de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d106      	bne.n	800855c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7f9 f836 	bl	80015c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0201 	bic.w	r2, r2, #1
 8008572:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800857e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008588:	d119      	bne.n	80085be <HAL_SPI_Init+0x112>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008592:	d103      	bne.n	800859c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008598:	2b00      	cmp	r3, #0
 800859a:	d008      	beq.n	80085ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10c      	bne.n	80085be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80085a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ac:	d107      	bne.n	80085be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00f      	beq.n	80085ea <HAL_SPI_Init+0x13e>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	2b06      	cmp	r3, #6
 80085d0:	d90b      	bls.n	80085ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	e007      	b.n	80085fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	69da      	ldr	r2, [r3, #28]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008602:	431a      	orrs	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860c:	ea42 0103 	orr.w	r1, r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862a:	431a      	orrs	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	431a      	orrs	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	431a      	orrs	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864e:	431a      	orrs	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	431a      	orrs	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800865a:	ea42 0103 	orr.w	r1, r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d113      	bne.n	800869a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008684:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008698:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 0201 	bic.w	r2, r2, #1
 80086a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40013000 	.word	0x40013000
 80086ec:	40003800 	.word	0x40003800
 80086f0:	40003c00 	.word	0x40003c00

080086f4 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4613      	mov	r3, r2
 8008700:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <HAL_SPI_Transmit_IT+0x1a>
 8008708:	88fb      	ldrh	r3, [r7, #6]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e08b      	b.n	800882a <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b01      	cmp	r3, #1
 800871c:	d001      	beq.n	8008722 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800871e:	2302      	movs	r3, #2
 8008720:	e083      	b.n	800882a <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008728:	2b01      	cmp	r3, #1
 800872a:	d101      	bne.n	8008730 <HAL_SPI_Transmit_IT+0x3c>
 800872c:	2302      	movs	r3, #2
 800872e:	e07c      	b.n	800882a <HAL_SPI_Transmit_IT+0x136>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2203      	movs	r2, #3
 800873c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	88fa      	ldrh	r2, [r7, #6]
 8008752:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	88fa      	ldrh	r2, [r7, #6]
 800875a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b0f      	cmp	r3, #15
 8008780:	d903      	bls.n	800878a <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4a2c      	ldr	r2, [pc, #176]	; (8008838 <HAL_SPI_Transmit_IT+0x144>)
 8008786:	675a      	str	r2, [r3, #116]	; 0x74
 8008788:	e00a      	b.n	80087a0 <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	2b07      	cmp	r3, #7
 8008790:	d903      	bls.n	800879a <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4a29      	ldr	r2, [pc, #164]	; (800883c <HAL_SPI_Transmit_IT+0x148>)
 8008796:	675a      	str	r2, [r3, #116]	; 0x74
 8008798:	e002      	b.n	80087a0 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4a28      	ldr	r2, [pc, #160]	; (8008840 <HAL_SPI_Transmit_IT+0x14c>)
 800879e:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80087a8:	d108      	bne.n	80087bc <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	e009      	b.n	80087d0 <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80087ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	4b1b      	ldr	r3, [pc, #108]	; (8008844 <HAL_SPI_Transmit_IT+0x150>)
 80087d8:	4013      	ands	r3, r2
 80087da:	88f9      	ldrh	r1, [r7, #6]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	430b      	orrs	r3, r1
 80087e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0201 	orr.w	r2, r2, #1
 80087f2:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6919      	ldr	r1, [r3, #16]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	f240 732a 	movw	r3, #1834	; 0x72a
 800880a:	430b      	orrs	r3, r1
 800880c:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008816:	d107      	bne.n	8008828 <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008826:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	08009061 	.word	0x08009061
 800883c:	08009003 	.word	0x08009003
 8008840:	08008fa9 	.word	0x08008fa9
 8008844:	ffff0000 	.word	0xffff0000

08008848 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b01      	cmp	r3, #1
 8008860:	d001      	beq.n	8008866 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008862:	2302      	movs	r3, #2
 8008864:	e126      	b.n	8008ab4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <HAL_SPI_Transmit_DMA+0x2a>
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e11e      	b.n	8008ab4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800887c:	2b01      	cmp	r3, #1
 800887e:	d101      	bne.n	8008884 <HAL_SPI_Transmit_DMA+0x3c>
 8008880:	2302      	movs	r3, #2
 8008882:	e117      	b.n	8008ab4 <HAL_SPI_Transmit_DMA+0x26c>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2203      	movs	r2, #3
 8008890:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	88fa      	ldrh	r2, [r7, #6]
 80088a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	88fa      	ldrh	r2, [r7, #6]
 80088ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80088dc:	d108      	bne.n	80088f0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e009      	b.n	8008904 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008902:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	2b0f      	cmp	r3, #15
 800890a:	d905      	bls.n	8008918 <HAL_SPI_Transmit_DMA+0xd0>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008916:	d10f      	bne.n	8008938 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800891c:	2b07      	cmp	r3, #7
 800891e:	d911      	bls.n	8008944 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800892a:	d00b      	beq.n	8008944 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008930:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008936:	d005      	beq.n	8008944 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0b7      	b.n	8008ab4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	2b07      	cmp	r3, #7
 800894a:	d820      	bhi.n	800898e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008956:	d109      	bne.n	800896c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800895e:	b29b      	uxth	r3, r3
 8008960:	3301      	adds	r3, #1
 8008962:	105b      	asrs	r3, r3, #1
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008976:	d11e      	bne.n	80089b6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800897e:	b29b      	uxth	r3, r3
 8008980:	3303      	adds	r3, #3
 8008982:	109b      	asrs	r3, r3, #2
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800898c:	e013      	b.n	80089b6 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	2b0f      	cmp	r3, #15
 8008994:	d80f      	bhi.n	80089b6 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089a0:	d109      	bne.n	80089b6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	3301      	adds	r3, #1
 80089ac:	105b      	asrs	r3, r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ba:	4a40      	ldr	r2, [pc, #256]	; (8008abc <HAL_SPI_Transmit_DMA+0x274>)
 80089bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089c2:	4a3f      	ldr	r2, [pc, #252]	; (8008ac0 <HAL_SPI_Transmit_DMA+0x278>)
 80089c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ca:	4a3e      	ldr	r2, [pc, #248]	; (8008ac4 <HAL_SPI_Transmit_DMA+0x27c>)
 80089cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089d2:	2200      	movs	r2, #0
 80089d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089e4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ee:	4619      	mov	r1, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3320      	adds	r3, #32
 80089f6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008a00:	f7f9 fef6 	bl	80027f0 <HAL_DMA_Start_IT>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d011      	beq.n	8008a2e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a10:	f043 0210 	orr.w	r2, r3, #16
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e042      	b.n	8008ab4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a38:	d108      	bne.n	8008a4c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6859      	ldr	r1, [r3, #4]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	4b20      	ldr	r3, [pc, #128]	; (8008ac8 <HAL_SPI_Transmit_DMA+0x280>)
 8008a46:	400b      	ands	r3, r1
 8008a48:	6053      	str	r3, [r2, #4]
 8008a4a:	e009      	b.n	8008a60 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	4b1d      	ldr	r3, [pc, #116]	; (8008ac8 <HAL_SPI_Transmit_DMA+0x280>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	88f9      	ldrh	r1, [r7, #6]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689a      	ldr	r2, [r3, #8]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a6e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691a      	ldr	r2, [r3, #16]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8008a7e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0201 	orr.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a98:	d107      	bne.n	8008aaa <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aa8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	08008f13 	.word	0x08008f13
 8008ac0:	08008ecd 	.word	0x08008ecd
 8008ac4:	08008f2f 	.word	0x08008f2f
 8008ac8:	ffff0000 	.word	0xffff0000

08008acc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08a      	sub	sp, #40	; 0x28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008ae4:	6a3a      	ldr	r2, [r7, #32]
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	4013      	ands	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008af4:	2300      	movs	r3, #0
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008afe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3330      	adds	r3, #48	; 0x30
 8008b06:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d010      	beq.n	8008b34 <HAL_SPI_IRQHandler+0x68>
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	f003 0308 	and.w	r3, r3, #8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00b      	beq.n	8008b34 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	699a      	ldr	r2, [r3, #24]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b2a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f9c3 	bl	8008eb8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008b32:	e192      	b.n	8008e5a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d113      	bne.n	8008b66 <HAL_SPI_IRQHandler+0x9a>
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	f003 0320 	and.w	r3, r3, #32
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10e      	bne.n	8008b66 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d009      	beq.n	8008b66 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
    handled = 1UL;
 8008b62:	2301      	movs	r3, #1
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10f      	bne.n	8008b90 <HAL_SPI_IRQHandler+0xc4>
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	4798      	blx	r3
    handled = 1UL;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10f      	bne.n	8008bba <HAL_SPI_IRQHandler+0xee>
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00a      	beq.n	8008bba <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d105      	bne.n	8008bba <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	4798      	blx	r3
    handled = 1UL;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f040 8147 	bne.w	8008e50 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	f003 0308 	and.w	r3, r3, #8
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 808b 	beq.w	8008ce4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	699a      	ldr	r2, [r3, #24]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f042 0208 	orr.w	r2, r2, #8
 8008bdc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	699a      	ldr	r2, [r3, #24]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f042 0210 	orr.w	r2, r2, #16
 8008bec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	699a      	ldr	r2, [r3, #24]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bfc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 0208 	bic.w	r2, r2, #8
 8008c0c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d13d      	bne.n	8008c98 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008c1c:	e036      	b.n	8008c8c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	2b0f      	cmp	r3, #15
 8008c24:	d90b      	bls.n	8008c3e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008c30:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c36:	1d1a      	adds	r2, r3, #4
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	665a      	str	r2, [r3, #100]	; 0x64
 8008c3c:	e01d      	b.n	8008c7a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	2b07      	cmp	r3, #7
 8008c44:	d90b      	bls.n	8008c5e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	8812      	ldrh	r2, [r2, #0]
 8008c4e:	b292      	uxth	r2, r2
 8008c50:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c56:	1c9a      	adds	r2, r3, #2
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	665a      	str	r2, [r3, #100]	; 0x64
 8008c5c:	e00d      	b.n	8008c7a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c6a:	7812      	ldrb	r2, [r2, #0]
 8008c6c:	b2d2      	uxtb	r2, r2
 8008c6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	3b01      	subs	r3, #1
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1c2      	bne.n	8008c1e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa0d 	bl	80090b8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f8f7 	bl	8008ea4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008cb6:	e0d0      	b.n	8008e5a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008cb8:	7cfb      	ldrb	r3, [r7, #19]
 8008cba:	2b05      	cmp	r3, #5
 8008cbc:	d103      	bne.n	8008cc6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f8dc 	bl	8008e7c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008cc4:	e0c6      	b.n	8008e54 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008cc6:	7cfb      	ldrb	r3, [r7, #19]
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	d103      	bne.n	8008cd4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f8cb 	bl	8008e68 <HAL_SPI_RxCpltCallback>
    return;
 8008cd2:	e0bf      	b.n	8008e54 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008cd4:	7cfb      	ldrb	r3, [r7, #19]
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	f040 80bc 	bne.w	8008e54 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7f8 f959 	bl	8000f94 <HAL_SPI_TxCpltCallback>
    return;
 8008ce2:	e0b7      	b.n	8008e54 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 80b5 	beq.w	8008e5a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00f      	beq.n	8008d1a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d00:	f043 0204 	orr.w	r2, r3, #4
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	699a      	ldr	r2, [r3, #24]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d18:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00f      	beq.n	8008d44 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d2a:	f043 0201 	orr.w	r2, r3, #1
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699a      	ldr	r2, [r3, #24]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d42:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00f      	beq.n	8008d6e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d54:	f043 0208 	orr.w	r2, r3, #8
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d6c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	f003 0320 	and.w	r3, r3, #32
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00f      	beq.n	8008d98 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0220 	orr.w	r2, r2, #32
 8008d96:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d05a      	beq.n	8008e58 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0201 	bic.w	r2, r2, #1
 8008db0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6919      	ldr	r1, [r3, #16]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b28      	ldr	r3, [pc, #160]	; (8008e60 <HAL_SPI_IRQHandler+0x394>)
 8008dbe:	400b      	ands	r3, r1
 8008dc0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008dc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008dcc:	d138      	bne.n	8008e40 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008ddc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d013      	beq.n	8008e0e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dea:	4a1e      	ldr	r2, [pc, #120]	; (8008e64 <HAL_SPI_IRQHandler+0x398>)
 8008dec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fa fa84 	bl	8003300 <HAL_DMA_Abort_IT>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d007      	beq.n	8008e0e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d020      	beq.n	8008e58 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e1a:	4a12      	ldr	r2, [pc, #72]	; (8008e64 <HAL_SPI_IRQHandler+0x398>)
 8008e1c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fa fa6c 	bl	8003300 <HAL_DMA_Abort_IT>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d014      	beq.n	8008e58 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008e3e:	e00b      	b.n	8008e58 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f82b 	bl	8008ea4 <HAL_SPI_ErrorCallback>
    return;
 8008e4e:	e003      	b.n	8008e58 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008e50:	bf00      	nop
 8008e52:	e002      	b.n	8008e5a <HAL_SPI_IRQHandler+0x38e>
    return;
 8008e54:	bf00      	nop
 8008e56:	e000      	b.n	8008e5a <HAL_SPI_IRQHandler+0x38e>
    return;
 8008e58:	bf00      	nop
  }
}
 8008e5a:	3728      	adds	r7, #40	; 0x28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	fffffc94 	.word	0xfffffc94
 8008e64:	08008f75 	.word	0x08008f75

08008e68 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b07      	cmp	r3, #7
 8008ee4:	d011      	beq.n	8008f0a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ef0:	d103      	bne.n	8008efa <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7f8 f84e 	bl	8000f94 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008ef8:	e007      	b.n	8008f0a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	691a      	ldr	r2, [r3, #16]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f042 0208 	orr.w	r2, r2, #8
 8008f08:	611a      	str	r2, [r3, #16]
}
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff ffb5 	bl	8008e90 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7fb fb4f 	bl	80045e0 <HAL_DMA_GetError>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d011      	beq.n	8008f6c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 f8b5 	bl	80090b8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f54:	f043 0210 	orr.w	r2, r3, #16
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7ff ff9c 	bl	8008ea4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008f6c:	bf00      	nop
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff ff82 	bl	8008ea4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3320      	adds	r3, #32
 8008fba:	7812      	ldrb	r2, [r2, #0]
 8008fbc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d107      	bne.n	8008ff6 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	691a      	ldr	r2, [r3, #16]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 0202 	bic.w	r2, r2, #2
 8008ff4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8009002:	b480      	push	{r7}
 8009004:	b085      	sub	sp, #20
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3320      	adds	r3, #32
 8009010:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009016:	881a      	ldrh	r2, [r3, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009020:	1c9a      	adds	r2, r3, #2
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800902c:	b29b      	uxth	r3, r3
 800902e:	3b01      	subs	r3, #1
 8009030:	b29a      	uxth	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800903e:	b29b      	uxth	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d107      	bne.n	8009054 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691a      	ldr	r2, [r3, #16]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0202 	bic.w	r2, r2, #2
 8009052:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009054:	bf00      	nop
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6812      	ldr	r2, [r2, #0]
 8009072:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009078:	1d1a      	adds	r2, r3, #4
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	b29a      	uxth	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009096:	b29b      	uxth	r3, r3
 8009098:	2b00      	cmp	r3, #0
 800909a:	d107      	bne.n	80090ac <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691a      	ldr	r2, [r3, #16]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 0202 	bic.w	r2, r2, #2
 80090aa:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	699a      	ldr	r2, [r3, #24]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0208 	orr.w	r2, r2, #8
 80090d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699a      	ldr	r2, [r3, #24]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f042 0210 	orr.w	r2, r2, #16
 80090e6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0201 	bic.w	r2, r2, #1
 80090f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6919      	ldr	r1, [r3, #16]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	4b3c      	ldr	r3, [pc, #240]	; (80091f4 <SPI_CloseTransfer+0x13c>)
 8009104:	400b      	ands	r3, r1
 8009106:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689a      	ldr	r2, [r3, #8]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009116:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b04      	cmp	r3, #4
 8009122:	d014      	beq.n	800914e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00f      	beq.n	800914e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009134:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	699a      	ldr	r2, [r3, #24]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f042 0220 	orr.w	r2, r2, #32
 800914c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b03      	cmp	r3, #3
 8009158:	d014      	beq.n	8009184 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00f      	beq.n	8009184 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800916a:	f043 0204 	orr.w	r2, r3, #4
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	699a      	ldr	r2, [r3, #24]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009182:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00f      	beq.n	80091ae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009194:	f043 0201 	orr.w	r2, r3, #1
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	699a      	ldr	r2, [r3, #24]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00f      	beq.n	80091d8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091be:	f043 0208 	orr.w	r2, r3, #8
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699a      	ldr	r2, [r3, #24]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091d6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80091e8:	bf00      	nop
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	fffffc90 	.word	0xfffffc90

080091f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009204:	095b      	lsrs	r3, r3, #5
 8009206:	3301      	adds	r3, #1
 8009208:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	3301      	adds	r3, #1
 8009210:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	3307      	adds	r3, #7
 8009216:	08db      	lsrs	r3, r3, #3
 8009218:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e049      	b.n	80092d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d106      	bne.n	800925a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7f8 fad7 	bl	8001808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2202      	movs	r2, #2
 800925e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3304      	adds	r3, #4
 800926a:	4619      	mov	r1, r3
 800926c:	4610      	mov	r0, r2
 800926e:	f000 f965 	bl	800953c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d020      	beq.n	8009340 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d01b      	beq.n	8009340 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0202 	mvn.w	r2, #2
 8009310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f8e9 	bl	80094fe <HAL_TIM_IC_CaptureCallback>
 800932c:	e005      	b.n	800933a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f8db 	bl	80094ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f8ec 	bl	8009512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d020      	beq.n	800938c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01b      	beq.n	800938c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f06f 0204 	mvn.w	r2, #4
 800935c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2202      	movs	r2, #2
 8009362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8c3 	bl	80094fe <HAL_TIM_IC_CaptureCallback>
 8009378:	e005      	b.n	8009386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f8b5 	bl	80094ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f8c6 	bl	8009512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 0308 	and.w	r3, r3, #8
 8009392:	2b00      	cmp	r3, #0
 8009394:	d020      	beq.n	80093d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f003 0308 	and.w	r3, r3, #8
 800939c:	2b00      	cmp	r3, #0
 800939e:	d01b      	beq.n	80093d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0208 	mvn.w	r2, #8
 80093a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2204      	movs	r2, #4
 80093ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f89d 	bl	80094fe <HAL_TIM_IC_CaptureCallback>
 80093c4:	e005      	b.n	80093d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f88f 	bl	80094ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f8a0 	bl	8009512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f003 0310 	and.w	r3, r3, #16
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d020      	beq.n	8009424 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f003 0310 	and.w	r3, r3, #16
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d01b      	beq.n	8009424 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f06f 0210 	mvn.w	r2, #16
 80093f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2208      	movs	r2, #8
 80093fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f877 	bl	80094fe <HAL_TIM_IC_CaptureCallback>
 8009410:	e005      	b.n	800941e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f869 	bl	80094ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f87a 	bl	8009512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00c      	beq.n	8009448 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	2b00      	cmp	r3, #0
 8009436:	d007      	beq.n	8009448 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f06f 0201 	mvn.w	r2, #1
 8009440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7f7 fd34 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944e:	2b00      	cmp	r3, #0
 8009450:	d104      	bne.n	800945c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00c      	beq.n	8009476 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009462:	2b00      	cmp	r3, #0
 8009464:	d007      	beq.n	8009476 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800946e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f91f 	bl	80096b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00c      	beq.n	800949a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009486:	2b00      	cmp	r3, #0
 8009488:	d007      	beq.n	800949a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f917 	bl	80096c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00c      	beq.n	80094be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d007      	beq.n	80094be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f834 	bl	8009526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00c      	beq.n	80094e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d007      	beq.n	80094e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f06f 0220 	mvn.w	r2, #32
 80094da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f8df 	bl	80096a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094f2:	bf00      	nop
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094fe:	b480      	push	{r7}
 8009500:	b083      	sub	sp, #12
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800952e:	bf00      	nop
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
	...

0800953c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a4a      	ldr	r2, [pc, #296]	; (8009678 <TIM_Base_SetConfig+0x13c>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d013      	beq.n	800957c <TIM_Base_SetConfig+0x40>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800955a:	d00f      	beq.n	800957c <TIM_Base_SetConfig+0x40>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a47      	ldr	r2, [pc, #284]	; (800967c <TIM_Base_SetConfig+0x140>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00b      	beq.n	800957c <TIM_Base_SetConfig+0x40>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a46      	ldr	r2, [pc, #280]	; (8009680 <TIM_Base_SetConfig+0x144>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d007      	beq.n	800957c <TIM_Base_SetConfig+0x40>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a45      	ldr	r2, [pc, #276]	; (8009684 <TIM_Base_SetConfig+0x148>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d003      	beq.n	800957c <TIM_Base_SetConfig+0x40>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a44      	ldr	r2, [pc, #272]	; (8009688 <TIM_Base_SetConfig+0x14c>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d108      	bne.n	800958e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a39      	ldr	r2, [pc, #228]	; (8009678 <TIM_Base_SetConfig+0x13c>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d027      	beq.n	80095e6 <TIM_Base_SetConfig+0xaa>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800959c:	d023      	beq.n	80095e6 <TIM_Base_SetConfig+0xaa>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a36      	ldr	r2, [pc, #216]	; (800967c <TIM_Base_SetConfig+0x140>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d01f      	beq.n	80095e6 <TIM_Base_SetConfig+0xaa>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a35      	ldr	r2, [pc, #212]	; (8009680 <TIM_Base_SetConfig+0x144>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d01b      	beq.n	80095e6 <TIM_Base_SetConfig+0xaa>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a34      	ldr	r2, [pc, #208]	; (8009684 <TIM_Base_SetConfig+0x148>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d017      	beq.n	80095e6 <TIM_Base_SetConfig+0xaa>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a33      	ldr	r2, [pc, #204]	; (8009688 <TIM_Base_SetConfig+0x14c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d013      	beq.n	80095e6 <TIM_Base_SetConfig+0xaa>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a32      	ldr	r2, [pc, #200]	; (800968c <TIM_Base_SetConfig+0x150>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00f      	beq.n	80095e6 <TIM_Base_SetConfig+0xaa>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a31      	ldr	r2, [pc, #196]	; (8009690 <TIM_Base_SetConfig+0x154>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d00b      	beq.n	80095e6 <TIM_Base_SetConfig+0xaa>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a30      	ldr	r2, [pc, #192]	; (8009694 <TIM_Base_SetConfig+0x158>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d007      	beq.n	80095e6 <TIM_Base_SetConfig+0xaa>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a2f      	ldr	r2, [pc, #188]	; (8009698 <TIM_Base_SetConfig+0x15c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d003      	beq.n	80095e6 <TIM_Base_SetConfig+0xaa>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a2e      	ldr	r2, [pc, #184]	; (800969c <TIM_Base_SetConfig+0x160>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d108      	bne.n	80095f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	4313      	orrs	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	689a      	ldr	r2, [r3, #8]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a16      	ldr	r2, [pc, #88]	; (8009678 <TIM_Base_SetConfig+0x13c>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d00f      	beq.n	8009644 <TIM_Base_SetConfig+0x108>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a18      	ldr	r2, [pc, #96]	; (8009688 <TIM_Base_SetConfig+0x14c>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d00b      	beq.n	8009644 <TIM_Base_SetConfig+0x108>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a17      	ldr	r2, [pc, #92]	; (800968c <TIM_Base_SetConfig+0x150>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d007      	beq.n	8009644 <TIM_Base_SetConfig+0x108>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a16      	ldr	r2, [pc, #88]	; (8009690 <TIM_Base_SetConfig+0x154>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d003      	beq.n	8009644 <TIM_Base_SetConfig+0x108>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a15      	ldr	r2, [pc, #84]	; (8009694 <TIM_Base_SetConfig+0x158>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d103      	bne.n	800964c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	691a      	ldr	r2, [r3, #16]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b01      	cmp	r3, #1
 800965c:	d105      	bne.n	800966a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f023 0201 	bic.w	r2, r3, #1
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	611a      	str	r2, [r3, #16]
  }
}
 800966a:	bf00      	nop
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	40010000 	.word	0x40010000
 800967c:	40000400 	.word	0x40000400
 8009680:	40000800 	.word	0x40000800
 8009684:	40000c00 	.word	0x40000c00
 8009688:	40010400 	.word	0x40010400
 800968c:	40014000 	.word	0x40014000
 8009690:	40014400 	.word	0x40014400
 8009694:	40014800 	.word	0x40014800
 8009698:	4000e000 	.word	0x4000e000
 800969c:	4000e400 	.word	0x4000e400

080096a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e042      	b.n	8009774 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d106      	bne.n	8009706 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7f8 f8a9 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2224      	movs	r2, #36	; 0x24
 800970a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0201 	bic.w	r2, r2, #1
 800971c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 faba 	bl	800aca0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fc4b 	bl	8009fc8 <UART_SetConfig>
 8009732:	4603      	mov	r3, r0
 8009734:	2b01      	cmp	r3, #1
 8009736:	d101      	bne.n	800973c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e01b      	b.n	8009774 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800974a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689a      	ldr	r2, [r3, #8]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800975a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f042 0201 	orr.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f001 fb39 	bl	800ade4 <UART_CheckIdleState>
 8009772:	4603      	mov	r3, r0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08a      	sub	sp, #40	; 0x28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	4613      	mov	r3, r2
 8009788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009790:	2b20      	cmp	r3, #32
 8009792:	d137      	bne.n	8009804 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <HAL_UART_Receive_IT+0x24>
 800979a:	88fb      	ldrh	r3, [r7, #6]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e030      	b.n	8009806 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a18      	ldr	r2, [pc, #96]	; (8009810 <HAL_UART_Receive_IT+0x94>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d01f      	beq.n	80097f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d018      	beq.n	80097f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	613b      	str	r3, [r7, #16]
   return(result);
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	623b      	str	r3, [r7, #32]
 80097e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	69f9      	ldr	r1, [r7, #28]
 80097e6:	6a3a      	ldr	r2, [r7, #32]
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e6      	bne.n	80097c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80097f4:	88fb      	ldrh	r3, [r7, #6]
 80097f6:	461a      	mov	r2, r3
 80097f8:	68b9      	ldr	r1, [r7, #8]
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f001 fc0a 	bl	800b014 <UART_Start_Receive_IT>
 8009800:	4603      	mov	r3, r0
 8009802:	e000      	b.n	8009806 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009804:	2302      	movs	r3, #2
  }
}
 8009806:	4618      	mov	r0, r3
 8009808:	3728      	adds	r7, #40	; 0x28
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	58000c00 	.word	0x58000c00

08009814 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b0ba      	sub	sp, #232	; 0xe8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800983a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800983e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009842:	4013      	ands	r3, r2
 8009844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d11b      	bne.n	8009888 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009854:	f003 0320 	and.w	r3, r3, #32
 8009858:	2b00      	cmp	r3, #0
 800985a:	d015      	beq.n	8009888 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800985c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009860:	f003 0320 	and.w	r3, r3, #32
 8009864:	2b00      	cmp	r3, #0
 8009866:	d105      	bne.n	8009874 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800986c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 8377 	beq.w	8009f6c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	4798      	blx	r3
      }
      return;
 8009886:	e371      	b.n	8009f6c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009888:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 8123 	beq.w	8009ad8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009892:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009896:	4b8d      	ldr	r3, [pc, #564]	; (8009acc <HAL_UART_IRQHandler+0x2b8>)
 8009898:	4013      	ands	r3, r2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d106      	bne.n	80098ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800989e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80098a2:	4b8b      	ldr	r3, [pc, #556]	; (8009ad0 <HAL_UART_IRQHandler+0x2bc>)
 80098a4:	4013      	ands	r3, r2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 8116 	beq.w	8009ad8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d011      	beq.n	80098dc <HAL_UART_IRQHandler+0xc8>
 80098b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2201      	movs	r2, #1
 80098ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d2:	f043 0201 	orr.w	r2, r3, #1
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d011      	beq.n	800990c <HAL_UART_IRQHandler+0xf8>
 80098e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2202      	movs	r2, #2
 80098fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009902:	f043 0204 	orr.w	r2, r3, #4
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009910:	f003 0304 	and.w	r3, r3, #4
 8009914:	2b00      	cmp	r3, #0
 8009916:	d011      	beq.n	800993c <HAL_UART_IRQHandler+0x128>
 8009918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2204      	movs	r2, #4
 800992a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009932:	f043 0202 	orr.w	r2, r3, #2
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800993c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009940:	f003 0308 	and.w	r3, r3, #8
 8009944:	2b00      	cmp	r3, #0
 8009946:	d017      	beq.n	8009978 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800994c:	f003 0320 	and.w	r3, r3, #32
 8009950:	2b00      	cmp	r3, #0
 8009952:	d105      	bne.n	8009960 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009954:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009958:	4b5c      	ldr	r3, [pc, #368]	; (8009acc <HAL_UART_IRQHandler+0x2b8>)
 800995a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2208      	movs	r2, #8
 8009966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800996e:	f043 0208 	orr.w	r2, r3, #8
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009980:	2b00      	cmp	r3, #0
 8009982:	d012      	beq.n	80099aa <HAL_UART_IRQHandler+0x196>
 8009984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009988:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00c      	beq.n	80099aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a0:	f043 0220 	orr.w	r2, r3, #32
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 82dd 	beq.w	8009f70 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ba:	f003 0320 	and.w	r3, r3, #32
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d013      	beq.n	80099ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c6:	f003 0320 	and.w	r3, r3, #32
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d105      	bne.n	80099da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80099ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d007      	beq.n	80099ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fe:	2b40      	cmp	r3, #64	; 0x40
 8009a00:	d005      	beq.n	8009a0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d054      	beq.n	8009ab8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 fc22 	bl	800b258 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1e:	2b40      	cmp	r3, #64	; 0x40
 8009a20:	d146      	bne.n	8009ab0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3308      	adds	r3, #8
 8009a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a30:	e853 3f00 	ldrex	r3, [r3]
 8009a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3308      	adds	r3, #8
 8009a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1d9      	bne.n	8009a22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d017      	beq.n	8009aa8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a7e:	4a15      	ldr	r2, [pc, #84]	; (8009ad4 <HAL_UART_IRQHandler+0x2c0>)
 8009a80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7f9 fc39 	bl	8003300 <HAL_DMA_Abort_IT>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d019      	beq.n	8009ac8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aa6:	e00f      	b.n	8009ac8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fa77 	bl	8009f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aae:	e00b      	b.n	8009ac8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fa73 	bl	8009f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab6:	e007      	b.n	8009ac8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fa6f 	bl	8009f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009ac6:	e253      	b.n	8009f70 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac8:	bf00      	nop
    return;
 8009aca:	e251      	b.n	8009f70 <HAL_UART_IRQHandler+0x75c>
 8009acc:	10000001 	.word	0x10000001
 8009ad0:	04000120 	.word	0x04000120
 8009ad4:	0800b325 	.word	0x0800b325

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	f040 81e7 	bne.w	8009eb0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae6:	f003 0310 	and.w	r3, r3, #16
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 81e0 	beq.w	8009eb0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009af4:	f003 0310 	and.w	r3, r3, #16
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 81d9 	beq.w	8009eb0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2210      	movs	r2, #16
 8009b04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b10:	2b40      	cmp	r3, #64	; 0x40
 8009b12:	f040 8151 	bne.w	8009db8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a96      	ldr	r2, [pc, #600]	; (8009d78 <HAL_UART_IRQHandler+0x564>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d068      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a93      	ldr	r2, [pc, #588]	; (8009d7c <HAL_UART_IRQHandler+0x568>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d061      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a91      	ldr	r2, [pc, #580]	; (8009d80 <HAL_UART_IRQHandler+0x56c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d05a      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a8e      	ldr	r2, [pc, #568]	; (8009d84 <HAL_UART_IRQHandler+0x570>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d053      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a8c      	ldr	r2, [pc, #560]	; (8009d88 <HAL_UART_IRQHandler+0x574>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d04c      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a89      	ldr	r2, [pc, #548]	; (8009d8c <HAL_UART_IRQHandler+0x578>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d045      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a87      	ldr	r2, [pc, #540]	; (8009d90 <HAL_UART_IRQHandler+0x57c>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d03e      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a84      	ldr	r2, [pc, #528]	; (8009d94 <HAL_UART_IRQHandler+0x580>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d037      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a82      	ldr	r2, [pc, #520]	; (8009d98 <HAL_UART_IRQHandler+0x584>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d030      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a7f      	ldr	r2, [pc, #508]	; (8009d9c <HAL_UART_IRQHandler+0x588>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d029      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a7d      	ldr	r2, [pc, #500]	; (8009da0 <HAL_UART_IRQHandler+0x58c>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d022      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a7a      	ldr	r2, [pc, #488]	; (8009da4 <HAL_UART_IRQHandler+0x590>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d01b      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a78      	ldr	r2, [pc, #480]	; (8009da8 <HAL_UART_IRQHandler+0x594>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d014      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a75      	ldr	r2, [pc, #468]	; (8009dac <HAL_UART_IRQHandler+0x598>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d00d      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a73      	ldr	r2, [pc, #460]	; (8009db0 <HAL_UART_IRQHandler+0x59c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d006      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x3e2>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a70      	ldr	r2, [pc, #448]	; (8009db4 <HAL_UART_IRQHandler+0x5a0>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d106      	bne.n	8009c04 <HAL_UART_IRQHandler+0x3f0>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	e005      	b.n	8009c10 <HAL_UART_IRQHandler+0x3fc>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 81ab 	beq.w	8009f74 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	f080 81a3 	bcs.w	8009f74 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c44:	f000 8087 	beq.w	8009d56 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1da      	bne.n	8009c48 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3308      	adds	r3, #8
 8009c98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ca4:	f023 0301 	bic.w	r3, r3, #1
 8009ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009cb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009cba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e1      	bne.n	8009c92 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cd8:	e853 3f00 	ldrex	r3, [r3]
 8009cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3308      	adds	r3, #8
 8009cee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009cf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cfa:	e841 2300 	strex	r3, r2, [r1]
 8009cfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e3      	bne.n	8009cce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2220      	movs	r2, #32
 8009d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d24:	f023 0310 	bic.w	r3, r3, #16
 8009d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d36:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d3e:	e841 2300 	strex	r3, r2, [r1]
 8009d42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1e4      	bne.n	8009d14 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7f8 ffb7 	bl	8002cc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2202      	movs	r2, #2
 8009d5a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f91d 	bl	8009fb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d76:	e0fd      	b.n	8009f74 <HAL_UART_IRQHandler+0x760>
 8009d78:	40020010 	.word	0x40020010
 8009d7c:	40020028 	.word	0x40020028
 8009d80:	40020040 	.word	0x40020040
 8009d84:	40020058 	.word	0x40020058
 8009d88:	40020070 	.word	0x40020070
 8009d8c:	40020088 	.word	0x40020088
 8009d90:	400200a0 	.word	0x400200a0
 8009d94:	400200b8 	.word	0x400200b8
 8009d98:	40020410 	.word	0x40020410
 8009d9c:	40020428 	.word	0x40020428
 8009da0:	40020440 	.word	0x40020440
 8009da4:	40020458 	.word	0x40020458
 8009da8:	40020470 	.word	0x40020470
 8009dac:	40020488 	.word	0x40020488
 8009db0:	400204a0 	.word	0x400204a0
 8009db4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 80cf 	beq.w	8009f78 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009dda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 80ca 	beq.w	8009f78 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dec:	e853 3f00 	ldrex	r3, [r3]
 8009df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	461a      	mov	r2, r3
 8009e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e06:	647b      	str	r3, [r7, #68]	; 0x44
 8009e08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e0e:	e841 2300 	strex	r3, r2, [r1]
 8009e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e4      	bne.n	8009de4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3308      	adds	r3, #8
 8009e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	e853 3f00 	ldrex	r3, [r3]
 8009e28:	623b      	str	r3, [r7, #32]
   return(result);
 8009e2a:	6a3a      	ldr	r2, [r7, #32]
 8009e2c:	4b55      	ldr	r3, [pc, #340]	; (8009f84 <HAL_UART_IRQHandler+0x770>)
 8009e2e:	4013      	ands	r3, r2
 8009e30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	3308      	adds	r3, #8
 8009e3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e3e:	633a      	str	r2, [r7, #48]	; 0x30
 8009e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1e3      	bne.n	8009e1a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2220      	movs	r2, #32
 8009e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	e853 3f00 	ldrex	r3, [r3]
 8009e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0310 	bic.w	r3, r3, #16
 8009e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e88:	61fb      	str	r3, [r7, #28]
 8009e8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8c:	69b9      	ldr	r1, [r7, #24]
 8009e8e:	69fa      	ldr	r2, [r7, #28]
 8009e90:	e841 2300 	strex	r3, r2, [r1]
 8009e94:	617b      	str	r3, [r7, #20]
   return(result);
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1e4      	bne.n	8009e66 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f881 	bl	8009fb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009eae:	e063      	b.n	8009f78 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00e      	beq.n	8009eda <HAL_UART_IRQHandler+0x6c6>
 8009ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d008      	beq.n	8009eda <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ed0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 ff84 	bl	800bde0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ed8:	e051      	b.n	8009f7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d014      	beq.n	8009f10 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d105      	bne.n	8009efe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d008      	beq.n	8009f10 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d03a      	beq.n	8009f7c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	4798      	blx	r3
    }
    return;
 8009f0e:	e035      	b.n	8009f7c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d009      	beq.n	8009f30 <HAL_UART_IRQHandler+0x71c>
 8009f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d003      	beq.n	8009f30 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 fa11 	bl	800b350 <UART_EndTransmit_IT>
    return;
 8009f2e:	e026      	b.n	8009f7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d009      	beq.n	8009f50 <HAL_UART_IRQHandler+0x73c>
 8009f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 ff5d 	bl	800be08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f4e:	e016      	b.n	8009f7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d010      	beq.n	8009f7e <HAL_UART_IRQHandler+0x76a>
 8009f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	da0c      	bge.n	8009f7e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 ff45 	bl	800bdf4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f6a:	e008      	b.n	8009f7e <HAL_UART_IRQHandler+0x76a>
      return;
 8009f6c:	bf00      	nop
 8009f6e:	e006      	b.n	8009f7e <HAL_UART_IRQHandler+0x76a>
    return;
 8009f70:	bf00      	nop
 8009f72:	e004      	b.n	8009f7e <HAL_UART_IRQHandler+0x76a>
      return;
 8009f74:	bf00      	nop
 8009f76:	e002      	b.n	8009f7e <HAL_UART_IRQHandler+0x76a>
      return;
 8009f78:	bf00      	nop
 8009f7a:	e000      	b.n	8009f7e <HAL_UART_IRQHandler+0x76a>
    return;
 8009f7c:	bf00      	nop
  }
}
 8009f7e:	37e8      	adds	r7, #232	; 0xe8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	effffffe 	.word	0xeffffffe

08009f88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fcc:	b092      	sub	sp, #72	; 0x48
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	4bbe      	ldr	r3, [pc, #760]	; (800a2f0 <UART_SetConfig+0x328>)
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	6812      	ldr	r2, [r2, #0]
 8009ffe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a000:	430b      	orrs	r3, r1
 800a002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4ab3      	ldr	r2, [pc, #716]	; (800a2f4 <UART_SetConfig+0x32c>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d004      	beq.n	800a034 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a030:	4313      	orrs	r3, r2
 800a032:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689a      	ldr	r2, [r3, #8]
 800a03a:	4baf      	ldr	r3, [pc, #700]	; (800a2f8 <UART_SetConfig+0x330>)
 800a03c:	4013      	ands	r3, r2
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	6812      	ldr	r2, [r2, #0]
 800a042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a044:	430b      	orrs	r3, r1
 800a046:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04e:	f023 010f 	bic.w	r1, r3, #15
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4aa6      	ldr	r2, [pc, #664]	; (800a2fc <UART_SetConfig+0x334>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d177      	bne.n	800a158 <UART_SetConfig+0x190>
 800a068:	4ba5      	ldr	r3, [pc, #660]	; (800a300 <UART_SetConfig+0x338>)
 800a06a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a06c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a070:	2b28      	cmp	r3, #40	; 0x28
 800a072:	d86d      	bhi.n	800a150 <UART_SetConfig+0x188>
 800a074:	a201      	add	r2, pc, #4	; (adr r2, 800a07c <UART_SetConfig+0xb4>)
 800a076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07a:	bf00      	nop
 800a07c:	0800a121 	.word	0x0800a121
 800a080:	0800a151 	.word	0x0800a151
 800a084:	0800a151 	.word	0x0800a151
 800a088:	0800a151 	.word	0x0800a151
 800a08c:	0800a151 	.word	0x0800a151
 800a090:	0800a151 	.word	0x0800a151
 800a094:	0800a151 	.word	0x0800a151
 800a098:	0800a151 	.word	0x0800a151
 800a09c:	0800a129 	.word	0x0800a129
 800a0a0:	0800a151 	.word	0x0800a151
 800a0a4:	0800a151 	.word	0x0800a151
 800a0a8:	0800a151 	.word	0x0800a151
 800a0ac:	0800a151 	.word	0x0800a151
 800a0b0:	0800a151 	.word	0x0800a151
 800a0b4:	0800a151 	.word	0x0800a151
 800a0b8:	0800a151 	.word	0x0800a151
 800a0bc:	0800a131 	.word	0x0800a131
 800a0c0:	0800a151 	.word	0x0800a151
 800a0c4:	0800a151 	.word	0x0800a151
 800a0c8:	0800a151 	.word	0x0800a151
 800a0cc:	0800a151 	.word	0x0800a151
 800a0d0:	0800a151 	.word	0x0800a151
 800a0d4:	0800a151 	.word	0x0800a151
 800a0d8:	0800a151 	.word	0x0800a151
 800a0dc:	0800a139 	.word	0x0800a139
 800a0e0:	0800a151 	.word	0x0800a151
 800a0e4:	0800a151 	.word	0x0800a151
 800a0e8:	0800a151 	.word	0x0800a151
 800a0ec:	0800a151 	.word	0x0800a151
 800a0f0:	0800a151 	.word	0x0800a151
 800a0f4:	0800a151 	.word	0x0800a151
 800a0f8:	0800a151 	.word	0x0800a151
 800a0fc:	0800a141 	.word	0x0800a141
 800a100:	0800a151 	.word	0x0800a151
 800a104:	0800a151 	.word	0x0800a151
 800a108:	0800a151 	.word	0x0800a151
 800a10c:	0800a151 	.word	0x0800a151
 800a110:	0800a151 	.word	0x0800a151
 800a114:	0800a151 	.word	0x0800a151
 800a118:	0800a151 	.word	0x0800a151
 800a11c:	0800a149 	.word	0x0800a149
 800a120:	2301      	movs	r3, #1
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a126:	e326      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a128:	2304      	movs	r3, #4
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a12e:	e322      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a130:	2308      	movs	r3, #8
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a136:	e31e      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a138:	2310      	movs	r3, #16
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a13e:	e31a      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a140:	2320      	movs	r3, #32
 800a142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a146:	e316      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a14e:	e312      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a150:	2380      	movs	r3, #128	; 0x80
 800a152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a156:	e30e      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a69      	ldr	r2, [pc, #420]	; (800a304 <UART_SetConfig+0x33c>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d130      	bne.n	800a1c4 <UART_SetConfig+0x1fc>
 800a162:	4b67      	ldr	r3, [pc, #412]	; (800a300 <UART_SetConfig+0x338>)
 800a164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b05      	cmp	r3, #5
 800a16c:	d826      	bhi.n	800a1bc <UART_SetConfig+0x1f4>
 800a16e:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <UART_SetConfig+0x1ac>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a18d 	.word	0x0800a18d
 800a178:	0800a195 	.word	0x0800a195
 800a17c:	0800a19d 	.word	0x0800a19d
 800a180:	0800a1a5 	.word	0x0800a1a5
 800a184:	0800a1ad 	.word	0x0800a1ad
 800a188:	0800a1b5 	.word	0x0800a1b5
 800a18c:	2300      	movs	r3, #0
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a192:	e2f0      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a194:	2304      	movs	r3, #4
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a19a:	e2ec      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a19c:	2308      	movs	r3, #8
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1a2:	e2e8      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1aa:	e2e4      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a1ac:	2320      	movs	r3, #32
 800a1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1b2:	e2e0      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a1b4:	2340      	movs	r3, #64	; 0x40
 800a1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ba:	e2dc      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a1bc:	2380      	movs	r3, #128	; 0x80
 800a1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c2:	e2d8      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a4f      	ldr	r2, [pc, #316]	; (800a308 <UART_SetConfig+0x340>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d130      	bne.n	800a230 <UART_SetConfig+0x268>
 800a1ce:	4b4c      	ldr	r3, [pc, #304]	; (800a300 <UART_SetConfig+0x338>)
 800a1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d2:	f003 0307 	and.w	r3, r3, #7
 800a1d6:	2b05      	cmp	r3, #5
 800a1d8:	d826      	bhi.n	800a228 <UART_SetConfig+0x260>
 800a1da:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <UART_SetConfig+0x218>)
 800a1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e0:	0800a1f9 	.word	0x0800a1f9
 800a1e4:	0800a201 	.word	0x0800a201
 800a1e8:	0800a209 	.word	0x0800a209
 800a1ec:	0800a211 	.word	0x0800a211
 800a1f0:	0800a219 	.word	0x0800a219
 800a1f4:	0800a221 	.word	0x0800a221
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1fe:	e2ba      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a200:	2304      	movs	r3, #4
 800a202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a206:	e2b6      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a208:	2308      	movs	r3, #8
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a20e:	e2b2      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a210:	2310      	movs	r3, #16
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a216:	e2ae      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a218:	2320      	movs	r3, #32
 800a21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a21e:	e2aa      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a220:	2340      	movs	r3, #64	; 0x40
 800a222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a226:	e2a6      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a228:	2380      	movs	r3, #128	; 0x80
 800a22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a22e:	e2a2      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a35      	ldr	r2, [pc, #212]	; (800a30c <UART_SetConfig+0x344>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d130      	bne.n	800a29c <UART_SetConfig+0x2d4>
 800a23a:	4b31      	ldr	r3, [pc, #196]	; (800a300 <UART_SetConfig+0x338>)
 800a23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a23e:	f003 0307 	and.w	r3, r3, #7
 800a242:	2b05      	cmp	r3, #5
 800a244:	d826      	bhi.n	800a294 <UART_SetConfig+0x2cc>
 800a246:	a201      	add	r2, pc, #4	; (adr r2, 800a24c <UART_SetConfig+0x284>)
 800a248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24c:	0800a265 	.word	0x0800a265
 800a250:	0800a26d 	.word	0x0800a26d
 800a254:	0800a275 	.word	0x0800a275
 800a258:	0800a27d 	.word	0x0800a27d
 800a25c:	0800a285 	.word	0x0800a285
 800a260:	0800a28d 	.word	0x0800a28d
 800a264:	2300      	movs	r3, #0
 800a266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a26a:	e284      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a26c:	2304      	movs	r3, #4
 800a26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a272:	e280      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a274:	2308      	movs	r3, #8
 800a276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a27a:	e27c      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a27c:	2310      	movs	r3, #16
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a282:	e278      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a284:	2320      	movs	r3, #32
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28a:	e274      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a28c:	2340      	movs	r3, #64	; 0x40
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a292:	e270      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a294:	2380      	movs	r3, #128	; 0x80
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29a:	e26c      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a1b      	ldr	r2, [pc, #108]	; (800a310 <UART_SetConfig+0x348>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d142      	bne.n	800a32c <UART_SetConfig+0x364>
 800a2a6:	4b16      	ldr	r3, [pc, #88]	; (800a300 <UART_SetConfig+0x338>)
 800a2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2aa:	f003 0307 	and.w	r3, r3, #7
 800a2ae:	2b05      	cmp	r3, #5
 800a2b0:	d838      	bhi.n	800a324 <UART_SetConfig+0x35c>
 800a2b2:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <UART_SetConfig+0x2f0>)
 800a2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b8:	0800a2d1 	.word	0x0800a2d1
 800a2bc:	0800a2d9 	.word	0x0800a2d9
 800a2c0:	0800a2e1 	.word	0x0800a2e1
 800a2c4:	0800a2e9 	.word	0x0800a2e9
 800a2c8:	0800a315 	.word	0x0800a315
 800a2cc:	0800a31d 	.word	0x0800a31d
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2d6:	e24e      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a2d8:	2304      	movs	r3, #4
 800a2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2de:	e24a      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a2e0:	2308      	movs	r3, #8
 800a2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2e6:	e246      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a2e8:	2310      	movs	r3, #16
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ee:	e242      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a2f0:	cfff69f3 	.word	0xcfff69f3
 800a2f4:	58000c00 	.word	0x58000c00
 800a2f8:	11fff4ff 	.word	0x11fff4ff
 800a2fc:	40011000 	.word	0x40011000
 800a300:	58024400 	.word	0x58024400
 800a304:	40004400 	.word	0x40004400
 800a308:	40004800 	.word	0x40004800
 800a30c:	40004c00 	.word	0x40004c00
 800a310:	40005000 	.word	0x40005000
 800a314:	2320      	movs	r3, #32
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31a:	e22c      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a31c:	2340      	movs	r3, #64	; 0x40
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a322:	e228      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a324:	2380      	movs	r3, #128	; 0x80
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32a:	e224      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4ab1      	ldr	r2, [pc, #708]	; (800a5f8 <UART_SetConfig+0x630>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d176      	bne.n	800a424 <UART_SetConfig+0x45c>
 800a336:	4bb1      	ldr	r3, [pc, #708]	; (800a5fc <UART_SetConfig+0x634>)
 800a338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a33e:	2b28      	cmp	r3, #40	; 0x28
 800a340:	d86c      	bhi.n	800a41c <UART_SetConfig+0x454>
 800a342:	a201      	add	r2, pc, #4	; (adr r2, 800a348 <UART_SetConfig+0x380>)
 800a344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a348:	0800a3ed 	.word	0x0800a3ed
 800a34c:	0800a41d 	.word	0x0800a41d
 800a350:	0800a41d 	.word	0x0800a41d
 800a354:	0800a41d 	.word	0x0800a41d
 800a358:	0800a41d 	.word	0x0800a41d
 800a35c:	0800a41d 	.word	0x0800a41d
 800a360:	0800a41d 	.word	0x0800a41d
 800a364:	0800a41d 	.word	0x0800a41d
 800a368:	0800a3f5 	.word	0x0800a3f5
 800a36c:	0800a41d 	.word	0x0800a41d
 800a370:	0800a41d 	.word	0x0800a41d
 800a374:	0800a41d 	.word	0x0800a41d
 800a378:	0800a41d 	.word	0x0800a41d
 800a37c:	0800a41d 	.word	0x0800a41d
 800a380:	0800a41d 	.word	0x0800a41d
 800a384:	0800a41d 	.word	0x0800a41d
 800a388:	0800a3fd 	.word	0x0800a3fd
 800a38c:	0800a41d 	.word	0x0800a41d
 800a390:	0800a41d 	.word	0x0800a41d
 800a394:	0800a41d 	.word	0x0800a41d
 800a398:	0800a41d 	.word	0x0800a41d
 800a39c:	0800a41d 	.word	0x0800a41d
 800a3a0:	0800a41d 	.word	0x0800a41d
 800a3a4:	0800a41d 	.word	0x0800a41d
 800a3a8:	0800a405 	.word	0x0800a405
 800a3ac:	0800a41d 	.word	0x0800a41d
 800a3b0:	0800a41d 	.word	0x0800a41d
 800a3b4:	0800a41d 	.word	0x0800a41d
 800a3b8:	0800a41d 	.word	0x0800a41d
 800a3bc:	0800a41d 	.word	0x0800a41d
 800a3c0:	0800a41d 	.word	0x0800a41d
 800a3c4:	0800a41d 	.word	0x0800a41d
 800a3c8:	0800a40d 	.word	0x0800a40d
 800a3cc:	0800a41d 	.word	0x0800a41d
 800a3d0:	0800a41d 	.word	0x0800a41d
 800a3d4:	0800a41d 	.word	0x0800a41d
 800a3d8:	0800a41d 	.word	0x0800a41d
 800a3dc:	0800a41d 	.word	0x0800a41d
 800a3e0:	0800a41d 	.word	0x0800a41d
 800a3e4:	0800a41d 	.word	0x0800a41d
 800a3e8:	0800a415 	.word	0x0800a415
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f2:	e1c0      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a3f4:	2304      	movs	r3, #4
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fa:	e1bc      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a3fc:	2308      	movs	r3, #8
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a402:	e1b8      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a404:	2310      	movs	r3, #16
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a40a:	e1b4      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a40c:	2320      	movs	r3, #32
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a412:	e1b0      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a414:	2340      	movs	r3, #64	; 0x40
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41a:	e1ac      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a41c:	2380      	movs	r3, #128	; 0x80
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a422:	e1a8      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a75      	ldr	r2, [pc, #468]	; (800a600 <UART_SetConfig+0x638>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d130      	bne.n	800a490 <UART_SetConfig+0x4c8>
 800a42e:	4b73      	ldr	r3, [pc, #460]	; (800a5fc <UART_SetConfig+0x634>)
 800a430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	2b05      	cmp	r3, #5
 800a438:	d826      	bhi.n	800a488 <UART_SetConfig+0x4c0>
 800a43a:	a201      	add	r2, pc, #4	; (adr r2, 800a440 <UART_SetConfig+0x478>)
 800a43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a440:	0800a459 	.word	0x0800a459
 800a444:	0800a461 	.word	0x0800a461
 800a448:	0800a469 	.word	0x0800a469
 800a44c:	0800a471 	.word	0x0800a471
 800a450:	0800a479 	.word	0x0800a479
 800a454:	0800a481 	.word	0x0800a481
 800a458:	2300      	movs	r3, #0
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45e:	e18a      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a460:	2304      	movs	r3, #4
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a466:	e186      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a468:	2308      	movs	r3, #8
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46e:	e182      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a470:	2310      	movs	r3, #16
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a476:	e17e      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a478:	2320      	movs	r3, #32
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47e:	e17a      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a480:	2340      	movs	r3, #64	; 0x40
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a486:	e176      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a488:	2380      	movs	r3, #128	; 0x80
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48e:	e172      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a5b      	ldr	r2, [pc, #364]	; (800a604 <UART_SetConfig+0x63c>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d130      	bne.n	800a4fc <UART_SetConfig+0x534>
 800a49a:	4b58      	ldr	r3, [pc, #352]	; (800a5fc <UART_SetConfig+0x634>)
 800a49c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49e:	f003 0307 	and.w	r3, r3, #7
 800a4a2:	2b05      	cmp	r3, #5
 800a4a4:	d826      	bhi.n	800a4f4 <UART_SetConfig+0x52c>
 800a4a6:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <UART_SetConfig+0x4e4>)
 800a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ac:	0800a4c5 	.word	0x0800a4c5
 800a4b0:	0800a4cd 	.word	0x0800a4cd
 800a4b4:	0800a4d5 	.word	0x0800a4d5
 800a4b8:	0800a4dd 	.word	0x0800a4dd
 800a4bc:	0800a4e5 	.word	0x0800a4e5
 800a4c0:	0800a4ed 	.word	0x0800a4ed
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ca:	e154      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a4cc:	2304      	movs	r3, #4
 800a4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4d2:	e150      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a4d4:	2308      	movs	r3, #8
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4da:	e14c      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a4dc:	2310      	movs	r3, #16
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4e2:	e148      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a4e4:	2320      	movs	r3, #32
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ea:	e144      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a4ec:	2340      	movs	r3, #64	; 0x40
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4f2:	e140      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a4f4:	2380      	movs	r3, #128	; 0x80
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4fa:	e13c      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a41      	ldr	r2, [pc, #260]	; (800a608 <UART_SetConfig+0x640>)
 800a502:	4293      	cmp	r3, r2
 800a504:	f040 8082 	bne.w	800a60c <UART_SetConfig+0x644>
 800a508:	4b3c      	ldr	r3, [pc, #240]	; (800a5fc <UART_SetConfig+0x634>)
 800a50a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a510:	2b28      	cmp	r3, #40	; 0x28
 800a512:	d86d      	bhi.n	800a5f0 <UART_SetConfig+0x628>
 800a514:	a201      	add	r2, pc, #4	; (adr r2, 800a51c <UART_SetConfig+0x554>)
 800a516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51a:	bf00      	nop
 800a51c:	0800a5c1 	.word	0x0800a5c1
 800a520:	0800a5f1 	.word	0x0800a5f1
 800a524:	0800a5f1 	.word	0x0800a5f1
 800a528:	0800a5f1 	.word	0x0800a5f1
 800a52c:	0800a5f1 	.word	0x0800a5f1
 800a530:	0800a5f1 	.word	0x0800a5f1
 800a534:	0800a5f1 	.word	0x0800a5f1
 800a538:	0800a5f1 	.word	0x0800a5f1
 800a53c:	0800a5c9 	.word	0x0800a5c9
 800a540:	0800a5f1 	.word	0x0800a5f1
 800a544:	0800a5f1 	.word	0x0800a5f1
 800a548:	0800a5f1 	.word	0x0800a5f1
 800a54c:	0800a5f1 	.word	0x0800a5f1
 800a550:	0800a5f1 	.word	0x0800a5f1
 800a554:	0800a5f1 	.word	0x0800a5f1
 800a558:	0800a5f1 	.word	0x0800a5f1
 800a55c:	0800a5d1 	.word	0x0800a5d1
 800a560:	0800a5f1 	.word	0x0800a5f1
 800a564:	0800a5f1 	.word	0x0800a5f1
 800a568:	0800a5f1 	.word	0x0800a5f1
 800a56c:	0800a5f1 	.word	0x0800a5f1
 800a570:	0800a5f1 	.word	0x0800a5f1
 800a574:	0800a5f1 	.word	0x0800a5f1
 800a578:	0800a5f1 	.word	0x0800a5f1
 800a57c:	0800a5d9 	.word	0x0800a5d9
 800a580:	0800a5f1 	.word	0x0800a5f1
 800a584:	0800a5f1 	.word	0x0800a5f1
 800a588:	0800a5f1 	.word	0x0800a5f1
 800a58c:	0800a5f1 	.word	0x0800a5f1
 800a590:	0800a5f1 	.word	0x0800a5f1
 800a594:	0800a5f1 	.word	0x0800a5f1
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	0800a5e1 	.word	0x0800a5e1
 800a5a0:	0800a5f1 	.word	0x0800a5f1
 800a5a4:	0800a5f1 	.word	0x0800a5f1
 800a5a8:	0800a5f1 	.word	0x0800a5f1
 800a5ac:	0800a5f1 	.word	0x0800a5f1
 800a5b0:	0800a5f1 	.word	0x0800a5f1
 800a5b4:	0800a5f1 	.word	0x0800a5f1
 800a5b8:	0800a5f1 	.word	0x0800a5f1
 800a5bc:	0800a5e9 	.word	0x0800a5e9
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5c6:	e0d6      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ce:	e0d2      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d6:	e0ce      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5de:	e0ca      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e6:	e0c6      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a5e8:	2340      	movs	r3, #64	; 0x40
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ee:	e0c2      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a5f0:	2380      	movs	r3, #128	; 0x80
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f6:	e0be      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a5f8:	40011400 	.word	0x40011400
 800a5fc:	58024400 	.word	0x58024400
 800a600:	40007800 	.word	0x40007800
 800a604:	40007c00 	.word	0x40007c00
 800a608:	40011800 	.word	0x40011800
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4aad      	ldr	r2, [pc, #692]	; (800a8c8 <UART_SetConfig+0x900>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d176      	bne.n	800a704 <UART_SetConfig+0x73c>
 800a616:	4bad      	ldr	r3, [pc, #692]	; (800a8cc <UART_SetConfig+0x904>)
 800a618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a61e:	2b28      	cmp	r3, #40	; 0x28
 800a620:	d86c      	bhi.n	800a6fc <UART_SetConfig+0x734>
 800a622:	a201      	add	r2, pc, #4	; (adr r2, 800a628 <UART_SetConfig+0x660>)
 800a624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a628:	0800a6cd 	.word	0x0800a6cd
 800a62c:	0800a6fd 	.word	0x0800a6fd
 800a630:	0800a6fd 	.word	0x0800a6fd
 800a634:	0800a6fd 	.word	0x0800a6fd
 800a638:	0800a6fd 	.word	0x0800a6fd
 800a63c:	0800a6fd 	.word	0x0800a6fd
 800a640:	0800a6fd 	.word	0x0800a6fd
 800a644:	0800a6fd 	.word	0x0800a6fd
 800a648:	0800a6d5 	.word	0x0800a6d5
 800a64c:	0800a6fd 	.word	0x0800a6fd
 800a650:	0800a6fd 	.word	0x0800a6fd
 800a654:	0800a6fd 	.word	0x0800a6fd
 800a658:	0800a6fd 	.word	0x0800a6fd
 800a65c:	0800a6fd 	.word	0x0800a6fd
 800a660:	0800a6fd 	.word	0x0800a6fd
 800a664:	0800a6fd 	.word	0x0800a6fd
 800a668:	0800a6dd 	.word	0x0800a6dd
 800a66c:	0800a6fd 	.word	0x0800a6fd
 800a670:	0800a6fd 	.word	0x0800a6fd
 800a674:	0800a6fd 	.word	0x0800a6fd
 800a678:	0800a6fd 	.word	0x0800a6fd
 800a67c:	0800a6fd 	.word	0x0800a6fd
 800a680:	0800a6fd 	.word	0x0800a6fd
 800a684:	0800a6fd 	.word	0x0800a6fd
 800a688:	0800a6e5 	.word	0x0800a6e5
 800a68c:	0800a6fd 	.word	0x0800a6fd
 800a690:	0800a6fd 	.word	0x0800a6fd
 800a694:	0800a6fd 	.word	0x0800a6fd
 800a698:	0800a6fd 	.word	0x0800a6fd
 800a69c:	0800a6fd 	.word	0x0800a6fd
 800a6a0:	0800a6fd 	.word	0x0800a6fd
 800a6a4:	0800a6fd 	.word	0x0800a6fd
 800a6a8:	0800a6ed 	.word	0x0800a6ed
 800a6ac:	0800a6fd 	.word	0x0800a6fd
 800a6b0:	0800a6fd 	.word	0x0800a6fd
 800a6b4:	0800a6fd 	.word	0x0800a6fd
 800a6b8:	0800a6fd 	.word	0x0800a6fd
 800a6bc:	0800a6fd 	.word	0x0800a6fd
 800a6c0:	0800a6fd 	.word	0x0800a6fd
 800a6c4:	0800a6fd 	.word	0x0800a6fd
 800a6c8:	0800a6f5 	.word	0x0800a6f5
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6d2:	e050      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6da:	e04c      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a6dc:	2308      	movs	r3, #8
 800a6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6e2:	e048      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a6e4:	2310      	movs	r3, #16
 800a6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ea:	e044      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a6ec:	2320      	movs	r3, #32
 800a6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6f2:	e040      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a6f4:	2340      	movs	r3, #64	; 0x40
 800a6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6fa:	e03c      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a6fc:	2380      	movs	r3, #128	; 0x80
 800a6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a702:	e038      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a71      	ldr	r2, [pc, #452]	; (800a8d0 <UART_SetConfig+0x908>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d130      	bne.n	800a770 <UART_SetConfig+0x7a8>
 800a70e:	4b6f      	ldr	r3, [pc, #444]	; (800a8cc <UART_SetConfig+0x904>)
 800a710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a712:	f003 0307 	and.w	r3, r3, #7
 800a716:	2b05      	cmp	r3, #5
 800a718:	d826      	bhi.n	800a768 <UART_SetConfig+0x7a0>
 800a71a:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <UART_SetConfig+0x758>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a739 	.word	0x0800a739
 800a724:	0800a741 	.word	0x0800a741
 800a728:	0800a749 	.word	0x0800a749
 800a72c:	0800a751 	.word	0x0800a751
 800a730:	0800a759 	.word	0x0800a759
 800a734:	0800a761 	.word	0x0800a761
 800a738:	2302      	movs	r3, #2
 800a73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73e:	e01a      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a740:	2304      	movs	r3, #4
 800a742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a746:	e016      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a748:	2308      	movs	r3, #8
 800a74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a74e:	e012      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a750:	2310      	movs	r3, #16
 800a752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a756:	e00e      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a758:	2320      	movs	r3, #32
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75e:	e00a      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a760:	2340      	movs	r3, #64	; 0x40
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a766:	e006      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a768:	2380      	movs	r3, #128	; 0x80
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76e:	e002      	b.n	800a776 <UART_SetConfig+0x7ae>
 800a770:	2380      	movs	r3, #128	; 0x80
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a55      	ldr	r2, [pc, #340]	; (800a8d0 <UART_SetConfig+0x908>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	f040 80f8 	bne.w	800a972 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a782:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a786:	2b20      	cmp	r3, #32
 800a788:	dc46      	bgt.n	800a818 <UART_SetConfig+0x850>
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	db75      	blt.n	800a87a <UART_SetConfig+0x8b2>
 800a78e:	3b02      	subs	r3, #2
 800a790:	2b1e      	cmp	r3, #30
 800a792:	d872      	bhi.n	800a87a <UART_SetConfig+0x8b2>
 800a794:	a201      	add	r2, pc, #4	; (adr r2, 800a79c <UART_SetConfig+0x7d4>)
 800a796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79a:	bf00      	nop
 800a79c:	0800a81f 	.word	0x0800a81f
 800a7a0:	0800a87b 	.word	0x0800a87b
 800a7a4:	0800a827 	.word	0x0800a827
 800a7a8:	0800a87b 	.word	0x0800a87b
 800a7ac:	0800a87b 	.word	0x0800a87b
 800a7b0:	0800a87b 	.word	0x0800a87b
 800a7b4:	0800a837 	.word	0x0800a837
 800a7b8:	0800a87b 	.word	0x0800a87b
 800a7bc:	0800a87b 	.word	0x0800a87b
 800a7c0:	0800a87b 	.word	0x0800a87b
 800a7c4:	0800a87b 	.word	0x0800a87b
 800a7c8:	0800a87b 	.word	0x0800a87b
 800a7cc:	0800a87b 	.word	0x0800a87b
 800a7d0:	0800a87b 	.word	0x0800a87b
 800a7d4:	0800a847 	.word	0x0800a847
 800a7d8:	0800a87b 	.word	0x0800a87b
 800a7dc:	0800a87b 	.word	0x0800a87b
 800a7e0:	0800a87b 	.word	0x0800a87b
 800a7e4:	0800a87b 	.word	0x0800a87b
 800a7e8:	0800a87b 	.word	0x0800a87b
 800a7ec:	0800a87b 	.word	0x0800a87b
 800a7f0:	0800a87b 	.word	0x0800a87b
 800a7f4:	0800a87b 	.word	0x0800a87b
 800a7f8:	0800a87b 	.word	0x0800a87b
 800a7fc:	0800a87b 	.word	0x0800a87b
 800a800:	0800a87b 	.word	0x0800a87b
 800a804:	0800a87b 	.word	0x0800a87b
 800a808:	0800a87b 	.word	0x0800a87b
 800a80c:	0800a87b 	.word	0x0800a87b
 800a810:	0800a87b 	.word	0x0800a87b
 800a814:	0800a86d 	.word	0x0800a86d
 800a818:	2b40      	cmp	r3, #64	; 0x40
 800a81a:	d02a      	beq.n	800a872 <UART_SetConfig+0x8aa>
 800a81c:	e02d      	b.n	800a87a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a81e:	f7fd fa23 	bl	8007c68 <HAL_RCCEx_GetD3PCLK1Freq>
 800a822:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a824:	e02f      	b.n	800a886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fd fa32 	bl	8007c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a834:	e027      	b.n	800a886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a836:	f107 0318 	add.w	r3, r7, #24
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fd fb7e 	bl	8007f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a844:	e01f      	b.n	800a886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a846:	4b21      	ldr	r3, [pc, #132]	; (800a8cc <UART_SetConfig+0x904>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0320 	and.w	r3, r3, #32
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d009      	beq.n	800a866 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a852:	4b1e      	ldr	r3, [pc, #120]	; (800a8cc <UART_SetConfig+0x904>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	08db      	lsrs	r3, r3, #3
 800a858:	f003 0303 	and.w	r3, r3, #3
 800a85c:	4a1d      	ldr	r2, [pc, #116]	; (800a8d4 <UART_SetConfig+0x90c>)
 800a85e:	fa22 f303 	lsr.w	r3, r2, r3
 800a862:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a864:	e00f      	b.n	800a886 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a866:	4b1b      	ldr	r3, [pc, #108]	; (800a8d4 <UART_SetConfig+0x90c>)
 800a868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a86a:	e00c      	b.n	800a886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a86c:	4b1a      	ldr	r3, [pc, #104]	; (800a8d8 <UART_SetConfig+0x910>)
 800a86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a870:	e009      	b.n	800a886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a878:	e005      	b.n	800a886 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a87a:	2300      	movs	r3, #0
 800a87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a884:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 81ee 	beq.w	800ac6a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	4a12      	ldr	r2, [pc, #72]	; (800a8dc <UART_SetConfig+0x914>)
 800a894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a898:	461a      	mov	r2, r3
 800a89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8a0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	4413      	add	r3, r2
 800a8ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d305      	bcc.n	800a8be <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d910      	bls.n	800a8e0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a8c4:	e1d1      	b.n	800ac6a <UART_SetConfig+0xca2>
 800a8c6:	bf00      	nop
 800a8c8:	40011c00 	.word	0x40011c00
 800a8cc:	58024400 	.word	0x58024400
 800a8d0:	58000c00 	.word	0x58000c00
 800a8d4:	03d09000 	.word	0x03d09000
 800a8d8:	003d0900 	.word	0x003d0900
 800a8dc:	0800c0ac 	.word	0x0800c0ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	60bb      	str	r3, [r7, #8]
 800a8e6:	60fa      	str	r2, [r7, #12]
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	4ac0      	ldr	r2, [pc, #768]	; (800abf0 <UART_SetConfig+0xc28>)
 800a8ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	603b      	str	r3, [r7, #0]
 800a8f8:	607a      	str	r2, [r7, #4]
 800a8fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a902:	f7f5 fd03 	bl	800030c <__aeabi_uldivmod>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4610      	mov	r0, r2
 800a90c:	4619      	mov	r1, r3
 800a90e:	f04f 0200 	mov.w	r2, #0
 800a912:	f04f 0300 	mov.w	r3, #0
 800a916:	020b      	lsls	r3, r1, #8
 800a918:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a91c:	0202      	lsls	r2, r0, #8
 800a91e:	6979      	ldr	r1, [r7, #20]
 800a920:	6849      	ldr	r1, [r1, #4]
 800a922:	0849      	lsrs	r1, r1, #1
 800a924:	2000      	movs	r0, #0
 800a926:	460c      	mov	r4, r1
 800a928:	4605      	mov	r5, r0
 800a92a:	eb12 0804 	adds.w	r8, r2, r4
 800a92e:	eb43 0905 	adc.w	r9, r3, r5
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	469a      	mov	sl, r3
 800a93a:	4693      	mov	fp, r2
 800a93c:	4652      	mov	r2, sl
 800a93e:	465b      	mov	r3, fp
 800a940:	4640      	mov	r0, r8
 800a942:	4649      	mov	r1, r9
 800a944:	f7f5 fce2 	bl	800030c <__aeabi_uldivmod>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	4613      	mov	r3, r2
 800a94e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a956:	d308      	bcc.n	800a96a <UART_SetConfig+0x9a2>
 800a958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a95e:	d204      	bcs.n	800a96a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a966:	60da      	str	r2, [r3, #12]
 800a968:	e17f      	b.n	800ac6a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a970:	e17b      	b.n	800ac6a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a97a:	f040 80bd 	bne.w	800aaf8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a97e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a982:	2b20      	cmp	r3, #32
 800a984:	dc48      	bgt.n	800aa18 <UART_SetConfig+0xa50>
 800a986:	2b00      	cmp	r3, #0
 800a988:	db7b      	blt.n	800aa82 <UART_SetConfig+0xaba>
 800a98a:	2b20      	cmp	r3, #32
 800a98c:	d879      	bhi.n	800aa82 <UART_SetConfig+0xaba>
 800a98e:	a201      	add	r2, pc, #4	; (adr r2, 800a994 <UART_SetConfig+0x9cc>)
 800a990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a994:	0800aa1f 	.word	0x0800aa1f
 800a998:	0800aa27 	.word	0x0800aa27
 800a99c:	0800aa83 	.word	0x0800aa83
 800a9a0:	0800aa83 	.word	0x0800aa83
 800a9a4:	0800aa2f 	.word	0x0800aa2f
 800a9a8:	0800aa83 	.word	0x0800aa83
 800a9ac:	0800aa83 	.word	0x0800aa83
 800a9b0:	0800aa83 	.word	0x0800aa83
 800a9b4:	0800aa3f 	.word	0x0800aa3f
 800a9b8:	0800aa83 	.word	0x0800aa83
 800a9bc:	0800aa83 	.word	0x0800aa83
 800a9c0:	0800aa83 	.word	0x0800aa83
 800a9c4:	0800aa83 	.word	0x0800aa83
 800a9c8:	0800aa83 	.word	0x0800aa83
 800a9cc:	0800aa83 	.word	0x0800aa83
 800a9d0:	0800aa83 	.word	0x0800aa83
 800a9d4:	0800aa4f 	.word	0x0800aa4f
 800a9d8:	0800aa83 	.word	0x0800aa83
 800a9dc:	0800aa83 	.word	0x0800aa83
 800a9e0:	0800aa83 	.word	0x0800aa83
 800a9e4:	0800aa83 	.word	0x0800aa83
 800a9e8:	0800aa83 	.word	0x0800aa83
 800a9ec:	0800aa83 	.word	0x0800aa83
 800a9f0:	0800aa83 	.word	0x0800aa83
 800a9f4:	0800aa83 	.word	0x0800aa83
 800a9f8:	0800aa83 	.word	0x0800aa83
 800a9fc:	0800aa83 	.word	0x0800aa83
 800aa00:	0800aa83 	.word	0x0800aa83
 800aa04:	0800aa83 	.word	0x0800aa83
 800aa08:	0800aa83 	.word	0x0800aa83
 800aa0c:	0800aa83 	.word	0x0800aa83
 800aa10:	0800aa83 	.word	0x0800aa83
 800aa14:	0800aa75 	.word	0x0800aa75
 800aa18:	2b40      	cmp	r3, #64	; 0x40
 800aa1a:	d02e      	beq.n	800aa7a <UART_SetConfig+0xab2>
 800aa1c:	e031      	b.n	800aa82 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa1e:	f7fb ff57 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 800aa22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa24:	e033      	b.n	800aa8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa26:	f7fb ff69 	bl	80068fc <HAL_RCC_GetPCLK2Freq>
 800aa2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa2c:	e02f      	b.n	800aa8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fd f92e 	bl	8007c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa3c:	e027      	b.n	800aa8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa3e:	f107 0318 	add.w	r3, r7, #24
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fd fa7a 	bl	8007f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa4c:	e01f      	b.n	800aa8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa4e:	4b69      	ldr	r3, [pc, #420]	; (800abf4 <UART_SetConfig+0xc2c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0320 	and.w	r3, r3, #32
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d009      	beq.n	800aa6e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa5a:	4b66      	ldr	r3, [pc, #408]	; (800abf4 <UART_SetConfig+0xc2c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	08db      	lsrs	r3, r3, #3
 800aa60:	f003 0303 	and.w	r3, r3, #3
 800aa64:	4a64      	ldr	r2, [pc, #400]	; (800abf8 <UART_SetConfig+0xc30>)
 800aa66:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa6c:	e00f      	b.n	800aa8e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800aa6e:	4b62      	ldr	r3, [pc, #392]	; (800abf8 <UART_SetConfig+0xc30>)
 800aa70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa72:	e00c      	b.n	800aa8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa74:	4b61      	ldr	r3, [pc, #388]	; (800abfc <UART_SetConfig+0xc34>)
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa78:	e009      	b.n	800aa8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa80:	e005      	b.n	800aa8e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aa8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 80ea 	beq.w	800ac6a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9a:	4a55      	ldr	r2, [pc, #340]	; (800abf0 <UART_SetConfig+0xc28>)
 800aa9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaa8:	005a      	lsls	r2, r3, #1
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	085b      	lsrs	r3, r3, #1
 800aab0:	441a      	add	r2, r3
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabe:	2b0f      	cmp	r3, #15
 800aac0:	d916      	bls.n	800aaf0 <UART_SetConfig+0xb28>
 800aac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aac8:	d212      	bcs.n	800aaf0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aacc:	b29b      	uxth	r3, r3
 800aace:	f023 030f 	bic.w	r3, r3, #15
 800aad2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	085b      	lsrs	r3, r3, #1
 800aad8:	b29b      	uxth	r3, r3
 800aada:	f003 0307 	and.w	r3, r3, #7
 800aade:	b29a      	uxth	r2, r3
 800aae0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aae2:	4313      	orrs	r3, r2
 800aae4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aaec:	60da      	str	r2, [r3, #12]
 800aaee:	e0bc      	b.n	800ac6a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aaf6:	e0b8      	b.n	800ac6a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aaf8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aafc:	2b20      	cmp	r3, #32
 800aafe:	dc4b      	bgt.n	800ab98 <UART_SetConfig+0xbd0>
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f2c0 8087 	blt.w	800ac14 <UART_SetConfig+0xc4c>
 800ab06:	2b20      	cmp	r3, #32
 800ab08:	f200 8084 	bhi.w	800ac14 <UART_SetConfig+0xc4c>
 800ab0c:	a201      	add	r2, pc, #4	; (adr r2, 800ab14 <UART_SetConfig+0xb4c>)
 800ab0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab12:	bf00      	nop
 800ab14:	0800ab9f 	.word	0x0800ab9f
 800ab18:	0800aba7 	.word	0x0800aba7
 800ab1c:	0800ac15 	.word	0x0800ac15
 800ab20:	0800ac15 	.word	0x0800ac15
 800ab24:	0800abaf 	.word	0x0800abaf
 800ab28:	0800ac15 	.word	0x0800ac15
 800ab2c:	0800ac15 	.word	0x0800ac15
 800ab30:	0800ac15 	.word	0x0800ac15
 800ab34:	0800abbf 	.word	0x0800abbf
 800ab38:	0800ac15 	.word	0x0800ac15
 800ab3c:	0800ac15 	.word	0x0800ac15
 800ab40:	0800ac15 	.word	0x0800ac15
 800ab44:	0800ac15 	.word	0x0800ac15
 800ab48:	0800ac15 	.word	0x0800ac15
 800ab4c:	0800ac15 	.word	0x0800ac15
 800ab50:	0800ac15 	.word	0x0800ac15
 800ab54:	0800abcf 	.word	0x0800abcf
 800ab58:	0800ac15 	.word	0x0800ac15
 800ab5c:	0800ac15 	.word	0x0800ac15
 800ab60:	0800ac15 	.word	0x0800ac15
 800ab64:	0800ac15 	.word	0x0800ac15
 800ab68:	0800ac15 	.word	0x0800ac15
 800ab6c:	0800ac15 	.word	0x0800ac15
 800ab70:	0800ac15 	.word	0x0800ac15
 800ab74:	0800ac15 	.word	0x0800ac15
 800ab78:	0800ac15 	.word	0x0800ac15
 800ab7c:	0800ac15 	.word	0x0800ac15
 800ab80:	0800ac15 	.word	0x0800ac15
 800ab84:	0800ac15 	.word	0x0800ac15
 800ab88:	0800ac15 	.word	0x0800ac15
 800ab8c:	0800ac15 	.word	0x0800ac15
 800ab90:	0800ac15 	.word	0x0800ac15
 800ab94:	0800ac07 	.word	0x0800ac07
 800ab98:	2b40      	cmp	r3, #64	; 0x40
 800ab9a:	d037      	beq.n	800ac0c <UART_SetConfig+0xc44>
 800ab9c:	e03a      	b.n	800ac14 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab9e:	f7fb fe97 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 800aba2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aba4:	e03c      	b.n	800ac20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aba6:	f7fb fea9 	bl	80068fc <HAL_RCC_GetPCLK2Freq>
 800abaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800abac:	e038      	b.n	800ac20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fd f86e 	bl	8007c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abbc:	e030      	b.n	800ac20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abbe:	f107 0318 	add.w	r3, r7, #24
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fd f9ba 	bl	8007f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abcc:	e028      	b.n	800ac20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abce:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <UART_SetConfig+0xc2c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f003 0320 	and.w	r3, r3, #32
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d012      	beq.n	800ac00 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abda:	4b06      	ldr	r3, [pc, #24]	; (800abf4 <UART_SetConfig+0xc2c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	08db      	lsrs	r3, r3, #3
 800abe0:	f003 0303 	and.w	r3, r3, #3
 800abe4:	4a04      	ldr	r2, [pc, #16]	; (800abf8 <UART_SetConfig+0xc30>)
 800abe6:	fa22 f303 	lsr.w	r3, r2, r3
 800abea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abec:	e018      	b.n	800ac20 <UART_SetConfig+0xc58>
 800abee:	bf00      	nop
 800abf0:	0800c0ac 	.word	0x0800c0ac
 800abf4:	58024400 	.word	0x58024400
 800abf8:	03d09000 	.word	0x03d09000
 800abfc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ac00:	4b24      	ldr	r3, [pc, #144]	; (800ac94 <UART_SetConfig+0xccc>)
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac04:	e00c      	b.n	800ac20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac06:	4b24      	ldr	r3, [pc, #144]	; (800ac98 <UART_SetConfig+0xcd0>)
 800ac08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac0a:	e009      	b.n	800ac20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac12:	e005      	b.n	800ac20 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ac14:	2300      	movs	r3, #0
 800ac16:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac1e:	bf00      	nop
    }

    if (pclk != 0U)
 800ac20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d021      	beq.n	800ac6a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	4a1c      	ldr	r2, [pc, #112]	; (800ac9c <UART_SetConfig+0xcd4>)
 800ac2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac30:	461a      	mov	r2, r3
 800ac32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac34:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	085b      	lsrs	r3, r3, #1
 800ac3e:	441a      	add	r2, r3
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac48:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4c:	2b0f      	cmp	r3, #15
 800ac4e:	d909      	bls.n	800ac64 <UART_SetConfig+0xc9c>
 800ac50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac56:	d205      	bcs.n	800ac64 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	60da      	str	r2, [r3, #12]
 800ac62:	e002      	b.n	800ac6a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	2200      	movs	r2, #0
 800ac84:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ac86:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3748      	adds	r7, #72	; 0x48
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac94:	03d09000 	.word	0x03d09000
 800ac98:	003d0900 	.word	0x003d0900
 800ac9c:	0800c0ac 	.word	0x0800c0ac

0800aca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acac:	f003 0308 	and.w	r3, r3, #8
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00a      	beq.n	800acca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	430a      	orrs	r2, r1
 800acc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00a      	beq.n	800acec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	430a      	orrs	r2, r1
 800acea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf0:	f003 0302 	and.w	r3, r3, #2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00a      	beq.n	800ad0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad12:	f003 0304 	and.w	r3, r3, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00a      	beq.n	800ad30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	430a      	orrs	r2, r1
 800ad2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad34:	f003 0310 	and.w	r3, r3, #16
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00a      	beq.n	800ad52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad56:	f003 0320 	and.w	r3, r3, #32
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00a      	beq.n	800ad74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	430a      	orrs	r2, r1
 800ad72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d01a      	beq.n	800adb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad9e:	d10a      	bne.n	800adb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00a      	beq.n	800add8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	605a      	str	r2, [r3, #4]
  }
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b098      	sub	sp, #96	; 0x60
 800ade8:	af02      	add	r7, sp, #8
 800adea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800adf4:	f7f7 f874 	bl	8001ee0 <HAL_GetTick>
 800adf8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 0308 	and.w	r3, r3, #8
 800ae04:	2b08      	cmp	r3, #8
 800ae06:	d12f      	bne.n	800ae68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae10:	2200      	movs	r2, #0
 800ae12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 f88e 	bl	800af38 <UART_WaitOnFlagUntilTimeout>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d022      	beq.n	800ae68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	e853 3f00 	ldrex	r3, [r3]
 800ae2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae36:	653b      	str	r3, [r7, #80]	; 0x50
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae40:	647b      	str	r3, [r7, #68]	; 0x44
 800ae42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae48:	e841 2300 	strex	r3, r2, [r1]
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1e6      	bne.n	800ae22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2220      	movs	r2, #32
 800ae58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e063      	b.n	800af30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0304 	and.w	r3, r3, #4
 800ae72:	2b04      	cmp	r3, #4
 800ae74:	d149      	bne.n	800af0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f857 	bl	800af38 <UART_WaitOnFlagUntilTimeout>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d03c      	beq.n	800af0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	623b      	str	r3, [r7, #32]
   return(result);
 800ae9e:	6a3b      	ldr	r3, [r7, #32]
 800aea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeae:	633b      	str	r3, [r7, #48]	; 0x30
 800aeb0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aeb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeb6:	e841 2300 	strex	r3, r2, [r1]
 800aeba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1e6      	bne.n	800ae90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3308      	adds	r3, #8
 800aec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	e853 3f00 	ldrex	r3, [r3]
 800aed0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f023 0301 	bic.w	r3, r3, #1
 800aed8:	64bb      	str	r3, [r7, #72]	; 0x48
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3308      	adds	r3, #8
 800aee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aee2:	61fa      	str	r2, [r7, #28]
 800aee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee6:	69b9      	ldr	r1, [r7, #24]
 800aee8:	69fa      	ldr	r2, [r7, #28]
 800aeea:	e841 2300 	strex	r3, r2, [r1]
 800aeee:	617b      	str	r3, [r7, #20]
   return(result);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e5      	bne.n	800aec2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e012      	b.n	800af30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2220      	movs	r2, #32
 800af0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2220      	movs	r2, #32
 800af16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3758      	adds	r7, #88	; 0x58
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	4613      	mov	r3, r2
 800af46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af48:	e04f      	b.n	800afea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af50:	d04b      	beq.n	800afea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af52:	f7f6 ffc5 	bl	8001ee0 <HAL_GetTick>
 800af56:	4602      	mov	r2, r0
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	69ba      	ldr	r2, [r7, #24]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d302      	bcc.n	800af68 <UART_WaitOnFlagUntilTimeout+0x30>
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e04e      	b.n	800b00a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 0304 	and.w	r3, r3, #4
 800af76:	2b00      	cmp	r3, #0
 800af78:	d037      	beq.n	800afea <UART_WaitOnFlagUntilTimeout+0xb2>
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2b80      	cmp	r3, #128	; 0x80
 800af7e:	d034      	beq.n	800afea <UART_WaitOnFlagUntilTimeout+0xb2>
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b40      	cmp	r3, #64	; 0x40
 800af84:	d031      	beq.n	800afea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	69db      	ldr	r3, [r3, #28]
 800af8c:	f003 0308 	and.w	r3, r3, #8
 800af90:	2b08      	cmp	r3, #8
 800af92:	d110      	bne.n	800afb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2208      	movs	r2, #8
 800af9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 f95b 	bl	800b258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2208      	movs	r2, #8
 800afa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e029      	b.n	800b00a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	69db      	ldr	r3, [r3, #28]
 800afbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afc4:	d111      	bne.n	800afea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f941 	bl	800b258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2220      	movs	r2, #32
 800afda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e00f      	b.n	800b00a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69da      	ldr	r2, [r3, #28]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	4013      	ands	r3, r2
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	bf0c      	ite	eq
 800affa:	2301      	moveq	r3, #1
 800affc:	2300      	movne	r3, #0
 800affe:	b2db      	uxtb	r3, r3
 800b000:	461a      	mov	r2, r3
 800b002:	79fb      	ldrb	r3, [r7, #7]
 800b004:	429a      	cmp	r2, r3
 800b006:	d0a0      	beq.n	800af4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b014:	b480      	push	{r7}
 800b016:	b0a3      	sub	sp, #140	; 0x8c
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	4613      	mov	r3, r2
 800b020:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	88fa      	ldrh	r2, [r7, #6]
 800b02c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	88fa      	ldrh	r2, [r7, #6]
 800b034:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b046:	d10e      	bne.n	800b066 <UART_Start_Receive_IT+0x52>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d105      	bne.n	800b05c <UART_Start_Receive_IT+0x48>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b05a:	e02d      	b.n	800b0b8 <UART_Start_Receive_IT+0xa4>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	22ff      	movs	r2, #255	; 0xff
 800b060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b064:	e028      	b.n	800b0b8 <UART_Start_Receive_IT+0xa4>
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10d      	bne.n	800b08a <UART_Start_Receive_IT+0x76>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d104      	bne.n	800b080 <UART_Start_Receive_IT+0x6c>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	22ff      	movs	r2, #255	; 0xff
 800b07a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b07e:	e01b      	b.n	800b0b8 <UART_Start_Receive_IT+0xa4>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	227f      	movs	r2, #127	; 0x7f
 800b084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b088:	e016      	b.n	800b0b8 <UART_Start_Receive_IT+0xa4>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b092:	d10d      	bne.n	800b0b0 <UART_Start_Receive_IT+0x9c>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d104      	bne.n	800b0a6 <UART_Start_Receive_IT+0x92>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	227f      	movs	r2, #127	; 0x7f
 800b0a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b0a4:	e008      	b.n	800b0b8 <UART_Start_Receive_IT+0xa4>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	223f      	movs	r2, #63	; 0x3f
 800b0aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b0ae:	e003      	b.n	800b0b8 <UART_Start_Receive_IT+0xa4>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2222      	movs	r2, #34	; 0x22
 800b0c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0d2:	e853 3f00 	ldrex	r3, [r3]
 800b0d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b0d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0da:	f043 0301 	orr.w	r3, r3, #1
 800b0de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3308      	adds	r3, #8
 800b0e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b0ec:	673a      	str	r2, [r7, #112]	; 0x70
 800b0ee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b0f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b0f4:	e841 2300 	strex	r3, r2, [r1]
 800b0f8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b0fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1e3      	bne.n	800b0c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b108:	d14f      	bne.n	800b1aa <UART_Start_Receive_IT+0x196>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b110:	88fa      	ldrh	r2, [r7, #6]
 800b112:	429a      	cmp	r2, r3
 800b114:	d349      	bcc.n	800b1aa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b11e:	d107      	bne.n	800b130 <UART_Start_Receive_IT+0x11c>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d103      	bne.n	800b130 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4a47      	ldr	r2, [pc, #284]	; (800b248 <UART_Start_Receive_IT+0x234>)
 800b12c:	675a      	str	r2, [r3, #116]	; 0x74
 800b12e:	e002      	b.n	800b136 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	4a46      	ldr	r2, [pc, #280]	; (800b24c <UART_Start_Receive_IT+0x238>)
 800b134:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d01a      	beq.n	800b174 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b146:	e853 3f00 	ldrex	r3, [r3]
 800b14a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b14c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b160:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b162:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b164:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b166:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b168:	e841 2300 	strex	r3, r2, [r1]
 800b16c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b16e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1e4      	bne.n	800b13e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3308      	adds	r3, #8
 800b17a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b17e:	e853 3f00 	ldrex	r3, [r3]
 800b182:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b18a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3308      	adds	r3, #8
 800b192:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b194:	64ba      	str	r2, [r7, #72]	; 0x48
 800b196:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b19a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b19c:	e841 2300 	strex	r3, r2, [r1]
 800b1a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1e5      	bne.n	800b174 <UART_Start_Receive_IT+0x160>
 800b1a8:	e046      	b.n	800b238 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1b2:	d107      	bne.n	800b1c4 <UART_Start_Receive_IT+0x1b0>
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d103      	bne.n	800b1c4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4a24      	ldr	r2, [pc, #144]	; (800b250 <UART_Start_Receive_IT+0x23c>)
 800b1c0:	675a      	str	r2, [r3, #116]	; 0x74
 800b1c2:	e002      	b.n	800b1ca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4a23      	ldr	r2, [pc, #140]	; (800b254 <UART_Start_Receive_IT+0x240>)
 800b1c8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	691b      	ldr	r3, [r3, #16]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d019      	beq.n	800b206 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	e853 3f00 	ldrex	r3, [r3]
 800b1de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b1e6:	677b      	str	r3, [r7, #116]	; 0x74
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b1f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1f8:	e841 2300 	strex	r3, r2, [r1]
 800b1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1e6      	bne.n	800b1d2 <UART_Start_Receive_IT+0x1be>
 800b204:	e018      	b.n	800b238 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	e853 3f00 	ldrex	r3, [r3]
 800b212:	613b      	str	r3, [r7, #16]
   return(result);
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	f043 0320 	orr.w	r3, r3, #32
 800b21a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	461a      	mov	r2, r3
 800b222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b224:	623b      	str	r3, [r7, #32]
 800b226:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b228:	69f9      	ldr	r1, [r7, #28]
 800b22a:	6a3a      	ldr	r2, [r7, #32]
 800b22c:	e841 2300 	strex	r3, r2, [r1]
 800b230:	61bb      	str	r3, [r7, #24]
   return(result);
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e6      	bne.n	800b206 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	378c      	adds	r7, #140	; 0x8c
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	0800ba79 	.word	0x0800ba79
 800b24c:	0800b719 	.word	0x0800b719
 800b250:	0800b561 	.word	0x0800b561
 800b254:	0800b3a9 	.word	0x0800b3a9

0800b258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b258:	b480      	push	{r7}
 800b25a:	b095      	sub	sp, #84	; 0x54
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b268:	e853 3f00 	ldrex	r3, [r3]
 800b26c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b274:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27e:	643b      	str	r3, [r7, #64]	; 0x40
 800b280:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b286:	e841 2300 	strex	r3, r2, [r1]
 800b28a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1e6      	bne.n	800b260 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3308      	adds	r3, #8
 800b298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	e853 3f00 	ldrex	r3, [r3]
 800b2a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2a2:	69fa      	ldr	r2, [r7, #28]
 800b2a4:	4b1e      	ldr	r3, [pc, #120]	; (800b320 <UART_EndRxTransfer+0xc8>)
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	3308      	adds	r3, #8
 800b2b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e5      	bne.n	800b292 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d118      	bne.n	800b300 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	e853 3f00 	ldrex	r3, [r3]
 800b2da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	f023 0310 	bic.w	r3, r3, #16
 800b2e2:	647b      	str	r3, [r7, #68]	; 0x44
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ec:	61bb      	str	r3, [r7, #24]
 800b2ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f0:	6979      	ldr	r1, [r7, #20]
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	e841 2300 	strex	r3, r2, [r1]
 800b2f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e6      	bne.n	800b2ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2220      	movs	r2, #32
 800b304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b314:	bf00      	nop
 800b316:	3754      	adds	r7, #84	; 0x54
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	effffffe 	.word	0xeffffffe

0800b324 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7fe fe2a 	bl	8009f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b348:	bf00      	nop
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	e853 3f00 	ldrex	r3, [r3]
 800b364:	60bb      	str	r3, [r7, #8]
   return(result);
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b36c:	61fb      	str	r3, [r7, #28]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	461a      	mov	r2, r3
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	61bb      	str	r3, [r7, #24]
 800b378:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37a:	6979      	ldr	r1, [r7, #20]
 800b37c:	69ba      	ldr	r2, [r7, #24]
 800b37e:	e841 2300 	strex	r3, r2, [r1]
 800b382:	613b      	str	r3, [r7, #16]
   return(result);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1e6      	bne.n	800b358 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2220      	movs	r2, #32
 800b38e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7fe fdf5 	bl	8009f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b39e:	bf00      	nop
 800b3a0:	3720      	adds	r7, #32
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
	...

0800b3a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b09c      	sub	sp, #112	; 0x70
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b3b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3c0:	2b22      	cmp	r3, #34	; 0x22
 800b3c2:	f040 80be 	bne.w	800b542 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b3d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b3d4:	b2d9      	uxtb	r1, r3
 800b3d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3e0:	400a      	ands	r2, r1
 800b3e2:	b2d2      	uxtb	r2, r2
 800b3e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b408:	b29b      	uxth	r3, r3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f040 80a1 	bne.w	800b552 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b418:	e853 3f00 	ldrex	r3, [r3]
 800b41c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b41e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b424:	66bb      	str	r3, [r7, #104]	; 0x68
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b42e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b430:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b432:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b434:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b436:	e841 2300 	strex	r3, r2, [r1]
 800b43a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1e6      	bne.n	800b410 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3308      	adds	r3, #8
 800b448:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44c:	e853 3f00 	ldrex	r3, [r3]
 800b450:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b454:	f023 0301 	bic.w	r3, r3, #1
 800b458:	667b      	str	r3, [r7, #100]	; 0x64
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3308      	adds	r3, #8
 800b460:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b462:	647a      	str	r2, [r7, #68]	; 0x44
 800b464:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b466:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b46a:	e841 2300 	strex	r3, r2, [r1]
 800b46e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1e5      	bne.n	800b442 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2220      	movs	r2, #32
 800b47a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a33      	ldr	r2, [pc, #204]	; (800b55c <UART_RxISR_8BIT+0x1b4>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d01f      	beq.n	800b4d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d018      	beq.n	800b4d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	623b      	str	r3, [r7, #32]
   return(result);
 800b4b0:	6a3b      	ldr	r3, [r7, #32]
 800b4b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b4b6:	663b      	str	r3, [r7, #96]	; 0x60
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4c0:	633b      	str	r3, [r7, #48]	; 0x30
 800b4c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c8:	e841 2300 	strex	r3, r2, [r1]
 800b4cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1e6      	bne.n	800b4a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d12e      	bne.n	800b53a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	e853 3f00 	ldrex	r3, [r3]
 800b4ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f023 0310 	bic.w	r3, r3, #16
 800b4f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b500:	61fb      	str	r3, [r7, #28]
 800b502:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	69b9      	ldr	r1, [r7, #24]
 800b506:	69fa      	ldr	r2, [r7, #28]
 800b508:	e841 2300 	strex	r3, r2, [r1]
 800b50c:	617b      	str	r3, [r7, #20]
   return(result);
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e6      	bne.n	800b4e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	f003 0310 	and.w	r3, r3, #16
 800b51e:	2b10      	cmp	r3, #16
 800b520:	d103      	bne.n	800b52a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2210      	movs	r2, #16
 800b528:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7fe fd3c 	bl	8009fb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b538:	e00b      	b.n	800b552 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7f5 fd62 	bl	8001004 <HAL_UART_RxCpltCallback>
}
 800b540:	e007      	b.n	800b552 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	699a      	ldr	r2, [r3, #24]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f042 0208 	orr.w	r2, r2, #8
 800b550:	619a      	str	r2, [r3, #24]
}
 800b552:	bf00      	nop
 800b554:	3770      	adds	r7, #112	; 0x70
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	58000c00 	.word	0x58000c00

0800b560 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b09c      	sub	sp, #112	; 0x70
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b56e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b578:	2b22      	cmp	r3, #34	; 0x22
 800b57a:	f040 80be 	bne.w	800b6fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b58c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b58e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b592:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b596:	4013      	ands	r3, r2
 800b598:	b29a      	uxth	r2, r3
 800b59a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b59c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a2:	1c9a      	adds	r2, r3, #2
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f040 80a1 	bne.w	800b70a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5d0:	e853 3f00 	ldrex	r3, [r3]
 800b5d4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5dc:	667b      	str	r3, [r7, #100]	; 0x64
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5e6:	657b      	str	r3, [r7, #84]	; 0x54
 800b5e8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5ee:	e841 2300 	strex	r3, r2, [r1]
 800b5f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1e6      	bne.n	800b5c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	3308      	adds	r3, #8
 800b600:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b604:	e853 3f00 	ldrex	r3, [r3]
 800b608:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	f023 0301 	bic.w	r3, r3, #1
 800b610:	663b      	str	r3, [r7, #96]	; 0x60
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3308      	adds	r3, #8
 800b618:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b61a:	643a      	str	r2, [r7, #64]	; 0x40
 800b61c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b622:	e841 2300 	strex	r3, r2, [r1]
 800b626:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1e5      	bne.n	800b5fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2220      	movs	r2, #32
 800b632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a33      	ldr	r2, [pc, #204]	; (800b714 <UART_RxISR_16BIT+0x1b4>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d01f      	beq.n	800b68c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d018      	beq.n	800b68c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	e853 3f00 	ldrex	r3, [r3]
 800b666:	61fb      	str	r3, [r7, #28]
   return(result);
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b66e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	461a      	mov	r2, r3
 800b676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b67a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b67e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b680:	e841 2300 	strex	r3, r2, [r1]
 800b684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e6      	bne.n	800b65a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b690:	2b01      	cmp	r3, #1
 800b692:	d12e      	bne.n	800b6f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	e853 3f00 	ldrex	r3, [r3]
 800b6a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	f023 0310 	bic.w	r3, r3, #16
 800b6ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6b8:	61bb      	str	r3, [r7, #24]
 800b6ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6bc:	6979      	ldr	r1, [r7, #20]
 800b6be:	69ba      	ldr	r2, [r7, #24]
 800b6c0:	e841 2300 	strex	r3, r2, [r1]
 800b6c4:	613b      	str	r3, [r7, #16]
   return(result);
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1e6      	bne.n	800b69a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	69db      	ldr	r3, [r3, #28]
 800b6d2:	f003 0310 	and.w	r3, r3, #16
 800b6d6:	2b10      	cmp	r3, #16
 800b6d8:	d103      	bne.n	800b6e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2210      	movs	r2, #16
 800b6e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7fe fc60 	bl	8009fb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b6f0:	e00b      	b.n	800b70a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7f5 fc86 	bl	8001004 <HAL_UART_RxCpltCallback>
}
 800b6f8:	e007      	b.n	800b70a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	699a      	ldr	r2, [r3, #24]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f042 0208 	orr.w	r2, r2, #8
 800b708:	619a      	str	r2, [r3, #24]
}
 800b70a:	bf00      	nop
 800b70c:	3770      	adds	r7, #112	; 0x70
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	58000c00 	.word	0x58000c00

0800b718 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b0ac      	sub	sp, #176	; 0xb0
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b726:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b74e:	2b22      	cmp	r3, #34	; 0x22
 800b750:	f040 8180 	bne.w	800ba54 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b75a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b75e:	e123      	b.n	800b9a8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b766:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b76a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b76e:	b2d9      	uxtb	r1, r3
 800b770:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b774:	b2da      	uxtb	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b77a:	400a      	ands	r2, r1
 800b77c:	b2d2      	uxtb	r2, r2
 800b77e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b784:	1c5a      	adds	r2, r3, #1
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b790:	b29b      	uxth	r3, r3
 800b792:	3b01      	subs	r3, #1
 800b794:	b29a      	uxth	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	69db      	ldr	r3, [r3, #28]
 800b7a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b7a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7aa:	f003 0307 	and.w	r3, r3, #7
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d053      	beq.n	800b85a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d011      	beq.n	800b7e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b7be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b7c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00b      	beq.n	800b7e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7d8:	f043 0201 	orr.w	r2, r3, #1
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7e6:	f003 0302 	and.w	r3, r3, #2
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d011      	beq.n	800b812 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b7ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7f2:	f003 0301 	and.w	r3, r3, #1
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00b      	beq.n	800b812 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2202      	movs	r2, #2
 800b800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b808:	f043 0204 	orr.w	r2, r3, #4
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b816:	f003 0304 	and.w	r3, r3, #4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d011      	beq.n	800b842 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b81e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00b      	beq.n	800b842 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2204      	movs	r2, #4
 800b830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b838:	f043 0202 	orr.w	r2, r3, #2
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d006      	beq.n	800b85a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7fe fba5 	bl	8009f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b860:	b29b      	uxth	r3, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	f040 80a0 	bne.w	800b9a8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b87c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	461a      	mov	r2, r3
 800b886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b88a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b88c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b890:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e4      	bne.n	800b868 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8a8:	e853 3f00 	ldrex	r3, [r3]
 800b8ac:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b8ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8b0:	4b6e      	ldr	r3, [pc, #440]	; (800ba6c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3308      	adds	r3, #8
 800b8be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8c2:	66ba      	str	r2, [r7, #104]	; 0x68
 800b8c4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b8c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b8ca:	e841 2300 	strex	r3, r2, [r1]
 800b8ce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b8d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1e3      	bne.n	800b89e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2220      	movs	r2, #32
 800b8da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a60      	ldr	r2, [pc, #384]	; (800ba70 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d021      	beq.n	800b938 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d01a      	beq.n	800b938 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b90a:	e853 3f00 	ldrex	r3, [r3]
 800b90e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	461a      	mov	r2, r3
 800b920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b924:	657b      	str	r3, [r7, #84]	; 0x54
 800b926:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b928:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b92a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b92c:	e841 2300 	strex	r3, r2, [r1]
 800b930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1e4      	bne.n	800b902 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d130      	bne.n	800b9a2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b94e:	e853 3f00 	ldrex	r3, [r3]
 800b952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b956:	f023 0310 	bic.w	r3, r3, #16
 800b95a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	461a      	mov	r2, r3
 800b964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b968:	643b      	str	r3, [r7, #64]	; 0x40
 800b96a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b96e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b970:	e841 2300 	strex	r3, r2, [r1]
 800b974:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1e4      	bne.n	800b946 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	69db      	ldr	r3, [r3, #28]
 800b982:	f003 0310 	and.w	r3, r3, #16
 800b986:	2b10      	cmp	r3, #16
 800b988:	d103      	bne.n	800b992 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2210      	movs	r2, #16
 800b990:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7fe fb08 	bl	8009fb0 <HAL_UARTEx_RxEventCallback>
 800b9a0:	e002      	b.n	800b9a8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7f5 fb2e 	bl	8001004 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b9a8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d006      	beq.n	800b9be <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b9b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9b4:	f003 0320 	and.w	r3, r3, #32
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f47f aed1 	bne.w	800b760 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9c4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b9c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d049      	beq.n	800ba64 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b9d6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d242      	bcs.n	800ba64 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	e853 3f00 	ldrex	r3, [r3]
 800b9ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3308      	adds	r3, #8
 800b9fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ba02:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba0a:	e841 2300 	strex	r3, r2, [r1]
 800ba0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d1e3      	bne.n	800b9de <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a16      	ldr	r2, [pc, #88]	; (800ba74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ba1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	e853 3f00 	ldrex	r3, [r3]
 800ba28:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	f043 0320 	orr.w	r3, r3, #32
 800ba30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ba3e:	61bb      	str	r3, [r7, #24]
 800ba40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba42:	6979      	ldr	r1, [r7, #20]
 800ba44:	69ba      	ldr	r2, [r7, #24]
 800ba46:	e841 2300 	strex	r3, r2, [r1]
 800ba4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1e4      	bne.n	800ba1c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba52:	e007      	b.n	800ba64 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	699a      	ldr	r2, [r3, #24]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f042 0208 	orr.w	r2, r2, #8
 800ba62:	619a      	str	r2, [r3, #24]
}
 800ba64:	bf00      	nop
 800ba66:	37b0      	adds	r7, #176	; 0xb0
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	effffffe 	.word	0xeffffffe
 800ba70:	58000c00 	.word	0x58000c00
 800ba74:	0800b3a9 	.word	0x0800b3a9

0800ba78 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b0ae      	sub	sp, #184	; 0xb8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba86:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	69db      	ldr	r3, [r3, #28]
 800ba90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baae:	2b22      	cmp	r3, #34	; 0x22
 800bab0:	f040 8184 	bne.w	800bdbc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800baba:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800babe:	e127      	b.n	800bd10 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bad2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800bad6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800bada:	4013      	ands	r3, r2
 800badc:	b29a      	uxth	r2, r3
 800bade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bae2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bae8:	1c9a      	adds	r2, r3, #2
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	3b01      	subs	r3, #1
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bb0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb0e:	f003 0307 	and.w	r3, r3, #7
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d053      	beq.n	800bbbe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb1a:	f003 0301 	and.w	r3, r3, #1
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d011      	beq.n	800bb46 <UART_RxISR_16BIT_FIFOEN+0xce>
 800bb22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00b      	beq.n	800bb46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2201      	movs	r2, #1
 800bb34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb3c:	f043 0201 	orr.w	r2, r3, #1
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb4a:	f003 0302 	and.w	r3, r3, #2
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d011      	beq.n	800bb76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bb52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00b      	beq.n	800bb76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2202      	movs	r2, #2
 800bb64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb6c:	f043 0204 	orr.w	r2, r3, #4
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb7a:	f003 0304 	and.w	r3, r3, #4
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d011      	beq.n	800bba6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bb82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb86:	f003 0301 	and.w	r3, r3, #1
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00b      	beq.n	800bba6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2204      	movs	r2, #4
 800bb94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb9c:	f043 0202 	orr.w	r2, r3, #2
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d006      	beq.n	800bbbe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7fe f9f3 	bl	8009f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f040 80a2 	bne.w	800bd10 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbd4:	e853 3f00 	ldrex	r3, [r3]
 800bbd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bbda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	461a      	mov	r2, r3
 800bbea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbf2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bbf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bbfa:	e841 2300 	strex	r3, r2, [r1]
 800bbfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1e2      	bne.n	800bbcc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc10:	e853 3f00 	ldrex	r3, [r3]
 800bc14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc18:	4b6e      	ldr	r3, [pc, #440]	; (800bdd4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3308      	adds	r3, #8
 800bc26:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bc2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc32:	e841 2300 	strex	r3, r2, [r1]
 800bc36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1e3      	bne.n	800bc06 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2220      	movs	r2, #32
 800bc42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a60      	ldr	r2, [pc, #384]	; (800bdd8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d021      	beq.n	800bca0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d01a      	beq.n	800bca0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc72:	e853 3f00 	ldrex	r3, [r3]
 800bc76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bc7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	461a      	mov	r2, r3
 800bc88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc8c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc94:	e841 2300 	strex	r3, r2, [r1]
 800bc98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1e4      	bne.n	800bc6a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d130      	bne.n	800bd0a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb6:	e853 3f00 	ldrex	r3, [r3]
 800bcba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bcbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcbe:	f023 0310 	bic.w	r3, r3, #16
 800bcc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcd0:	647b      	str	r3, [r7, #68]	; 0x44
 800bcd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bcd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcd8:	e841 2300 	strex	r3, r2, [r1]
 800bcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bcde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1e4      	bne.n	800bcae <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	69db      	ldr	r3, [r3, #28]
 800bcea:	f003 0310 	and.w	r3, r3, #16
 800bcee:	2b10      	cmp	r3, #16
 800bcf0:	d103      	bne.n	800bcfa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2210      	movs	r2, #16
 800bcf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd00:	4619      	mov	r1, r3
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7fe f954 	bl	8009fb0 <HAL_UARTEx_RxEventCallback>
 800bd08:	e002      	b.n	800bd10 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7f5 f97a 	bl	8001004 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bd10:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d006      	beq.n	800bd26 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800bd18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bd1c:	f003 0320 	and.w	r3, r3, #32
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f47f aecd 	bne.w	800bac0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd2c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bd30:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d049      	beq.n	800bdcc <UART_RxISR_16BIT_FIFOEN+0x354>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd3e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d242      	bcs.n	800bdcc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3308      	adds	r3, #8
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	e853 3f00 	ldrex	r3, [r3]
 800bd54:	623b      	str	r3, [r7, #32]
   return(result);
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3308      	adds	r3, #8
 800bd66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bd6a:	633a      	str	r2, [r7, #48]	; 0x30
 800bd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd72:	e841 2300 	strex	r3, r2, [r1]
 800bd76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1e3      	bne.n	800bd46 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a16      	ldr	r2, [pc, #88]	; (800bddc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800bd82:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	e853 3f00 	ldrex	r3, [r3]
 800bd90:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f043 0320 	orr.w	r3, r3, #32
 800bd98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	461a      	mov	r2, r3
 800bda2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bda6:	61fb      	str	r3, [r7, #28]
 800bda8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdaa:	69b9      	ldr	r1, [r7, #24]
 800bdac:	69fa      	ldr	r2, [r7, #28]
 800bdae:	e841 2300 	strex	r3, r2, [r1]
 800bdb2:	617b      	str	r3, [r7, #20]
   return(result);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1e4      	bne.n	800bd84 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdba:	e007      	b.n	800bdcc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	699a      	ldr	r2, [r3, #24]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f042 0208 	orr.w	r2, r2, #8
 800bdca:	619a      	str	r2, [r3, #24]
}
 800bdcc:	bf00      	nop
 800bdce:	37b8      	adds	r7, #184	; 0xb8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	effffffe 	.word	0xeffffffe
 800bdd8:	58000c00 	.word	0x58000c00
 800bddc:	0800b561 	.word	0x0800b561

0800bde0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be10:	bf00      	nop
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d101      	bne.n	800be32 <HAL_UARTEx_DisableFifoMode+0x16>
 800be2e:	2302      	movs	r3, #2
 800be30:	e027      	b.n	800be82 <HAL_UARTEx_DisableFifoMode+0x66>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2224      	movs	r2, #36	; 0x24
 800be3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f022 0201 	bic.w	r2, r2, #1
 800be58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2220      	movs	r2, #32
 800be74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b084      	sub	sp, #16
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d101      	bne.n	800bea6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bea2:	2302      	movs	r3, #2
 800bea4:	e02d      	b.n	800bf02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2224      	movs	r2, #36	; 0x24
 800beb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f022 0201 	bic.w	r2, r2, #1
 800becc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	430a      	orrs	r2, r1
 800bee0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f850 	bl	800bf88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2220      	movs	r2, #32
 800bef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b084      	sub	sp, #16
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d101      	bne.n	800bf22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf1e:	2302      	movs	r3, #2
 800bf20:	e02d      	b.n	800bf7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2201      	movs	r2, #1
 800bf26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2224      	movs	r2, #36	; 0x24
 800bf2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f022 0201 	bic.w	r2, r2, #1
 800bf48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f812 	bl	800bf88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2220      	movs	r2, #32
 800bf70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
	...

0800bf88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d108      	bne.n	800bfaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfa8:	e031      	b.n	800c00e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfaa:	2310      	movs	r3, #16
 800bfac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfae:	2310      	movs	r3, #16
 800bfb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	0e5b      	lsrs	r3, r3, #25
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	f003 0307 	and.w	r3, r3, #7
 800bfc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	0f5b      	lsrs	r3, r3, #29
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	f003 0307 	and.w	r3, r3, #7
 800bfd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	7b3a      	ldrb	r2, [r7, #12]
 800bfd6:	4911      	ldr	r1, [pc, #68]	; (800c01c <UARTEx_SetNbDataToProcess+0x94>)
 800bfd8:	5c8a      	ldrb	r2, [r1, r2]
 800bfda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bfde:	7b3a      	ldrb	r2, [r7, #12]
 800bfe0:	490f      	ldr	r1, [pc, #60]	; (800c020 <UARTEx_SetNbDataToProcess+0x98>)
 800bfe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfe4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
 800bff2:	7b7a      	ldrb	r2, [r7, #13]
 800bff4:	4909      	ldr	r1, [pc, #36]	; (800c01c <UARTEx_SetNbDataToProcess+0x94>)
 800bff6:	5c8a      	ldrb	r2, [r1, r2]
 800bff8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bffc:	7b7a      	ldrb	r2, [r7, #13]
 800bffe:	4908      	ldr	r1, [pc, #32]	; (800c020 <UARTEx_SetNbDataToProcess+0x98>)
 800c000:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c002:	fb93 f3f2 	sdiv	r3, r3, r2
 800c006:	b29a      	uxth	r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c00e:	bf00      	nop
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	0800c0c4 	.word	0x0800c0c4
 800c020:	0800c0cc 	.word	0x0800c0cc

0800c024 <memset>:
 800c024:	4402      	add	r2, r0
 800c026:	4603      	mov	r3, r0
 800c028:	4293      	cmp	r3, r2
 800c02a:	d100      	bne.n	800c02e <memset+0xa>
 800c02c:	4770      	bx	lr
 800c02e:	f803 1b01 	strb.w	r1, [r3], #1
 800c032:	e7f9      	b.n	800c028 <memset+0x4>

0800c034 <__libc_init_array>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	4d0d      	ldr	r5, [pc, #52]	; (800c06c <__libc_init_array+0x38>)
 800c038:	4c0d      	ldr	r4, [pc, #52]	; (800c070 <__libc_init_array+0x3c>)
 800c03a:	1b64      	subs	r4, r4, r5
 800c03c:	10a4      	asrs	r4, r4, #2
 800c03e:	2600      	movs	r6, #0
 800c040:	42a6      	cmp	r6, r4
 800c042:	d109      	bne.n	800c058 <__libc_init_array+0x24>
 800c044:	4d0b      	ldr	r5, [pc, #44]	; (800c074 <__libc_init_array+0x40>)
 800c046:	4c0c      	ldr	r4, [pc, #48]	; (800c078 <__libc_init_array+0x44>)
 800c048:	f000 f818 	bl	800c07c <_init>
 800c04c:	1b64      	subs	r4, r4, r5
 800c04e:	10a4      	asrs	r4, r4, #2
 800c050:	2600      	movs	r6, #0
 800c052:	42a6      	cmp	r6, r4
 800c054:	d105      	bne.n	800c062 <__libc_init_array+0x2e>
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	f855 3b04 	ldr.w	r3, [r5], #4
 800c05c:	4798      	blx	r3
 800c05e:	3601      	adds	r6, #1
 800c060:	e7ee      	b.n	800c040 <__libc_init_array+0xc>
 800c062:	f855 3b04 	ldr.w	r3, [r5], #4
 800c066:	4798      	blx	r3
 800c068:	3601      	adds	r6, #1
 800c06a:	e7f2      	b.n	800c052 <__libc_init_array+0x1e>
 800c06c:	0800c0dc 	.word	0x0800c0dc
 800c070:	0800c0dc 	.word	0x0800c0dc
 800c074:	0800c0dc 	.word	0x0800c0dc
 800c078:	0800c0e0 	.word	0x0800c0e0

0800c07c <_init>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	bf00      	nop
 800c080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c082:	bc08      	pop	{r3}
 800c084:	469e      	mov	lr, r3
 800c086:	4770      	bx	lr

0800c088 <_fini>:
 800c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08a:	bf00      	nop
 800c08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c08e:	bc08      	pop	{r3}
 800c090:	469e      	mov	lr, r3
 800c092:	4770      	bx	lr
