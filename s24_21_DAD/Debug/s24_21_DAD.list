
s24_21_DAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c488  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c754  0800c754  0001c754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c794  0800c794  0001c794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c79c  0800c79c  0001c79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c7a0  0800c7a0  0001c7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800c7a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800c7b8  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800c818  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  240000d8  0800c878  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000988  0800c878  00020988  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce1d  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bbb  00000000  00000000  0003cf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  0003fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010dd  00000000  00000000  00041090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034a5f  00000000  00000000  0004216d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bde1  00000000  00000000  00076bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00157f91  00000000  00000000  000929ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d00  00000000  00000000  001ea940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001f0640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d8 	.word	0x240000d8
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800c73c 	.word	0x0800c73c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000dc 	.word	0x240000dc
 8000308:	0800c73c 	.word	0x0800c73c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 ff42 	bl	8002494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f85c 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fc26 	bl	8000e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 fc04 	bl	8000e24 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800061c:	f000 fb62 	bl	8000ce4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000620:	f000 fbf8 	bl	8000e14 <MX_USB_OTG_HS_USB_Init>
  MX_USART1_UART_Init();
 8000624:	f000 fac6 	bl	8000bb4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000628:	f000 fb10 	bl	8000c4c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800062c:	f000 fba6 	bl	8000d7c <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000630:	f000 f908 	bl	8000844 <MX_SPI1_Init>
  MX_SPI5_Init();
 8000634:	f000 f95c 	bl	80008f0 <MX_SPI5_Init>
  MX_ETH_Init();
 8000638:	f000 f8b8 	bl	80007ac <MX_ETH_Init>
  MX_TIM16_Init();
 800063c:	f000 f9ae 	bl	800099c <MX_TIM16_Init>
  MX_UART4_Init();
 8000640:	f000 f9d4 	bl	80009ec <MX_UART4_Init>
  MX_UART5_Init();
 8000644:	f000 fa1e 	bl	8000a84 <MX_UART5_Init>
  MX_UART7_Init();
 8000648:	f000 fa68 	bl	8000b1c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, rx_data1, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	4911      	ldr	r1, [pc, #68]	; (8000694 <main+0x8c>)
 8000650:	4811      	ldr	r0, [pc, #68]	; (8000698 <main+0x90>)
 8000652:	f009 fbf3 	bl	8009e3c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, rx_data2, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	4910      	ldr	r1, [pc, #64]	; (800069c <main+0x94>)
 800065a:	4811      	ldr	r0, [pc, #68]	; (80006a0 <main+0x98>)
 800065c:	f009 fbee 	bl	8009e3c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, rx_data3, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	4910      	ldr	r1, [pc, #64]	; (80006a4 <main+0x9c>)
 8000664:	4810      	ldr	r0, [pc, #64]	; (80006a8 <main+0xa0>)
 8000666:	f009 fbe9 	bl	8009e3c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, rx_data4, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	490f      	ldr	r1, [pc, #60]	; (80006ac <main+0xa4>)
 800066e:	4810      	ldr	r0, [pc, #64]	; (80006b0 <main+0xa8>)
 8000670:	f009 fbe4 	bl	8009e3c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, rx_data5, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	490f      	ldr	r1, [pc, #60]	; (80006b4 <main+0xac>)
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <main+0xb0>)
 800067a:	f009 fbdf 	bl	8009e3c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, rx_data6, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	490e      	ldr	r1, [pc, #56]	; (80006bc <main+0xb4>)
 8000682:	480f      	ldr	r0, [pc, #60]	; (80006c0 <main+0xb8>)
 8000684:	f009 fbda 	bl	8009e3c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart7, rx_data7, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	490e      	ldr	r1, [pc, #56]	; (80006c4 <main+0xbc>)
 800068c:	480e      	ldr	r0, [pc, #56]	; (80006c8 <main+0xc0>)
 800068e:	f009 fbd5 	bl	8009e3c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x8a>
 8000694:	240007bc 	.word	0x240007bc
 8000698:	2400056c 	.word	0x2400056c
 800069c:	240007ec 	.word	0x240007ec
 80006a0:	24000600 	.word	0x24000600
 80006a4:	2400081c 	.word	0x2400081c
 80006a8:	24000694 	.word	0x24000694
 80006ac:	2400084c 	.word	0x2400084c
 80006b0:	240003b0 	.word	0x240003b0
 80006b4:	2400087c 	.word	0x2400087c
 80006b8:	24000444 	.word	0x24000444
 80006bc:	240008ac 	.word	0x240008ac
 80006c0:	24000728 	.word	0x24000728
 80006c4:	240008dc 	.word	0x240008dc
 80006c8:	240004d8 	.word	0x240004d8

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b09c      	sub	sp, #112	; 0x70
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d6:	224c      	movs	r2, #76	; 0x4c
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f00c f802 	bl	800c6e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2220      	movs	r2, #32
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00b fffc 	bl	800c6e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ec:	2002      	movs	r0, #2
 80006ee:	f005 fcdb 	bl	80060a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <SystemClock_Config+0xdc>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <SystemClock_Config+0xdc>)
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xdc>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800070e:	bf00      	nop
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemClock_Config+0xdc>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800071c:	d1f8      	bne.n	8000710 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800071e:	2321      	movs	r3, #33	; 0x21
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000722:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000730:	2302      	movs	r3, #2
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000738:	f240 1313 	movw	r3, #275	; 0x113
 800073c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000742:	2304      	movs	r3, #4
 8000744:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800074a:	2304      	movs	r3, #4
 800074c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800074e:	2300      	movs	r3, #0
 8000750:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	4618      	mov	r0, r3
 800075c:	f005 fcde 	bl	800611c <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000766:	f000 ff98 	bl	800169a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	233f      	movs	r3, #63	; 0x3f
 800076c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2303      	movs	r3, #3
 8000770:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000776:	2308      	movs	r3, #8
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800077a:	2340      	movs	r3, #64	; 0x40
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000786:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000788:	2340      	movs	r3, #64	; 0x40
 800078a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2103      	movs	r1, #3
 8000790:	4618      	mov	r0, r3
 8000792:	f006 f89d 	bl	80068d0 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800079c:	f000 ff7d 	bl	800169a <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3770      	adds	r7, #112	; 0x70
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	58024800 	.word	0x58024800

080007ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ETH_Init+0x80>)
 80007b2:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <MX_ETH_Init+0x84>)
 80007b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_ETH_Init+0x88>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <MX_ETH_Init+0x88>)
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_ETH_Init+0x88>)
 80007c4:	22e1      	movs	r2, #225	; 0xe1
 80007c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_ETH_Init+0x88>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_ETH_Init+0x88>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_ETH_Init+0x88>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_ETH_Init+0x80>)
 80007dc:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_ETH_Init+0x88>)
 80007de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_ETH_Init+0x80>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_ETH_Init+0x80>)
 80007e8:	4a13      	ldr	r2, [pc, #76]	; (8000838 <MX_ETH_Init+0x8c>)
 80007ea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_ETH_Init+0x80>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_ETH_Init+0x90>)
 80007f0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_ETH_Init+0x80>)
 80007f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007f8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_ETH_Init+0x80>)
 80007fc:	f004 fe44 	bl	8005488 <HAL_ETH_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000806:	f000 ff48 	bl	800169a <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800080a:	2238      	movs	r2, #56	; 0x38
 800080c:	2100      	movs	r1, #0
 800080e:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_ETH_Init+0x94>)
 8000810:	f00b ff68 	bl	800c6e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_ETH_Init+0x94>)
 8000816:	2221      	movs	r2, #33	; 0x21
 8000818:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_ETH_Init+0x94>)
 800081c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000820:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MX_ETH_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2400012c 	.word	0x2400012c
 8000830:	40028000 	.word	0x40028000
 8000834:	2400097c 	.word	0x2400097c
 8000838:	24000074 	.word	0x24000074
 800083c:	24000014 	.word	0x24000014
 8000840:	240000f4 	.word	0x240000f4

08000844 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <MX_SPI1_Init+0xa4>)
 800084a:	4a28      	ldr	r2, [pc, #160]	; (80008ec <MX_SPI1_Init+0xa8>)
 800084c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_SPI1_Init+0xa4>)
 8000850:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000854:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_SPI1_Init+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_SPI1_Init+0xa4>)
 800085e:	2207      	movs	r2, #7
 8000860:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_SPI1_Init+0xa4>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_SPI1_Init+0xa4>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_SPI1_Init+0xa4>)
 8000870:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000874:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_SPI1_Init+0xa4>)
 8000878:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800087c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_SPI1_Init+0xa4>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_SPI1_Init+0xa4>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI1_Init+0xa4>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_SPI1_Init+0xa4>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI1_Init+0xa4>)
 8000898:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI1_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_SPI1_Init+0xa4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI1_Init+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_SPI1_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI1_Init+0xa4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0xa4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI1_Init+0xa4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0xa4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI1_Init+0xa4>)
 80008d6:	f008 f949 	bl	8008b6c <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80008e0:	f000 fedb 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	240001dc 	.word	0x240001dc
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <MX_SPI5_Init+0xa4>)
 80008f6:	4a28      	ldr	r2, [pc, #160]	; (8000998 <MX_SPI5_Init+0xa8>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b26      	ldr	r3, [pc, #152]	; (8000994 <MX_SPI5_Init+0xa4>)
 80008fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000900:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b24      	ldr	r3, [pc, #144]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <MX_SPI5_Init+0xa4>)
 800090a:	2207      	movs	r2, #7
 800090c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_SPI5_Init+0xa4>)
 800091c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000920:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000924:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000928:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_SPI5_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_SPI5_Init+0xa4>)
 800093e:	2200      	movs	r2, #0
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_SPI5_Init+0xa4>)
 800094c:	2200      	movs	r2, #0
 800094e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <MX_SPI5_Init+0xa4>)
 800095e:	2200      	movs	r2, #0
 8000960:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000964:	2200      	movs	r2, #0
 8000966:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <MX_SPI5_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000976:	2200      	movs	r2, #0
 8000978:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_SPI5_Init+0xa4>)
 800097c:	2200      	movs	r2, #0
 800097e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_SPI5_Init+0xa4>)
 8000982:	f008 f8f3 	bl	8008b6c <HAL_SPI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 800098c:	f000 fe85 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	24000264 	.word	0x24000264
 8000998:	40015000 	.word	0x40015000

0800099c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_TIM16_Init+0x48>)
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <MX_TIM16_Init+0x4c>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_TIM16_Init+0x48>)
 80009a8:	f240 2226 	movw	r2, #550	; 0x226
 80009ac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <MX_TIM16_Init+0x48>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_TIM16_Init+0x48>)
 80009b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80009ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_TIM16_Init+0x48>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_TIM16_Init+0x48>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_TIM16_Init+0x48>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_TIM16_Init+0x48>)
 80009d0:	f008 ff8d 	bl	80098ee <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80009da:	f000 fe5e 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24000364 	.word	0x24000364
 80009e8:	40014400 	.word	0x40014400

080009ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_UART4_Init+0x90>)
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <MX_UART4_Init+0x94>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_UART4_Init+0x90>)
 80009f8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80009fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a36:	f009 f9b1 	bl	8009d9c <HAL_UART_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a40:	f000 fe2b 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a48:	f00b fd81 	bl	800c54e <HAL_UARTEx_SetTxFifoThreshold>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a52:	f000 fe22 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a5a:	f00b fdb6 	bl	800c5ca <HAL_UARTEx_SetRxFifoThreshold>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 fe19 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_UART4_Init+0x90>)
 8000a6a:	f00b fd37 	bl	800c4dc <HAL_UARTEx_DisableFifoMode>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 fe11 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	240003b0 	.word	0x240003b0
 8000a80:	40004c00 	.word	0x40004c00

08000a84 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <MX_UART5_Init+0x90>)
 8000a8a:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <MX_UART5_Init+0x94>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_UART5_Init+0x90>)
 8000a90:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000a94:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_UART5_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_UART5_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_UART5_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_UART5_Init+0x90>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <MX_UART5_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_UART5_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_UART5_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_UART5_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_UART5_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000acc:	4811      	ldr	r0, [pc, #68]	; (8000b14 <MX_UART5_Init+0x90>)
 8000ace:	f009 f965 	bl	8009d9c <HAL_UART_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000ad8:	f000 fddf 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000adc:	2100      	movs	r1, #0
 8000ade:	480d      	ldr	r0, [pc, #52]	; (8000b14 <MX_UART5_Init+0x90>)
 8000ae0:	f00b fd35 	bl	800c54e <HAL_UARTEx_SetTxFifoThreshold>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000aea:	f000 fdd6 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4808      	ldr	r0, [pc, #32]	; (8000b14 <MX_UART5_Init+0x90>)
 8000af2:	f00b fd6a 	bl	800c5ca <HAL_UARTEx_SetRxFifoThreshold>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000afc:	f000 fdcd 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_UART5_Init+0x90>)
 8000b02:	f00b fceb 	bl	800c4dc <HAL_UARTEx_DisableFifoMode>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000b0c:	f000 fdc5 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	24000444 	.word	0x24000444
 8000b18:	40005000 	.word	0x40005000

08000b1c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MX_UART7_Init+0x90>)
 8000b22:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <MX_UART7_Init+0x94>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_UART7_Init+0x90>)
 8000b28:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000b2c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_UART7_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <MX_UART7_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_UART7_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_UART7_Init+0x90>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_UART7_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_UART7_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_UART7_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_UART7_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_UART7_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <MX_UART7_Init+0x90>)
 8000b66:	f009 f919 	bl	8009d9c <HAL_UART_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000b70:	f000 fd93 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b74:	2100      	movs	r1, #0
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_UART7_Init+0x90>)
 8000b78:	f00b fce9 	bl	800c54e <HAL_UARTEx_SetTxFifoThreshold>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000b82:	f000 fd8a 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <MX_UART7_Init+0x90>)
 8000b8a:	f00b fd1e 	bl	800c5ca <HAL_UARTEx_SetRxFifoThreshold>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000b94:	f000 fd81 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_UART7_Init+0x90>)
 8000b9a:	f00b fc9f 	bl	800c4dc <HAL_UARTEx_DisableFifoMode>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 fd79 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	240004d8 	.word	0x240004d8
 8000bb0:	40007800 	.word	0x40007800

08000bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <MX_USART1_UART_Init+0x94>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfc:	4811      	ldr	r0, [pc, #68]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bfe:	f009 f8cd 	bl	8009d9c <HAL_UART_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c08:	f000 fd47 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000c10:	f00b fc9d 	bl	800c54e <HAL_UARTEx_SetTxFifoThreshold>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c1a:	f000 fd3e 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000c22:	f00b fcd2 	bl	800c5ca <HAL_UARTEx_SetRxFifoThreshold>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c2c:	f000 fd35 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000c32:	f00b fc53 	bl	800c4dc <HAL_UARTEx_DisableFifoMode>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c3c:	f000 fd2d 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2400056c 	.word	0x2400056c
 8000c48:	40011000 	.word	0x40011000

08000c4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <MX_USART2_UART_Init+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c58:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c94:	4811      	ldr	r0, [pc, #68]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000c96:	f009 f881 	bl	8009d9c <HAL_UART_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 fcfb 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000ca8:	f00b fc51 	bl	800c54e <HAL_UARTEx_SetTxFifoThreshold>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 fcf2 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000cba:	f00b fc86 	bl	800c5ca <HAL_UARTEx_SetRxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 fce9 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_USART2_UART_Init+0x90>)
 8000cca:	f00b fc07 	bl	800c4dc <HAL_UARTEx_DisableFifoMode>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 fce1 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	24000600 	.word	0x24000600
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MX_USART3_UART_Init+0x94>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cf0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000cf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d2e:	f009 f835 	bl	8009d9c <HAL_UART_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d38:	f000 fcaf 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d40:	f00b fc05 	bl	800c54e <HAL_UARTEx_SetTxFifoThreshold>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4a:	f000 fca6 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d52:	f00b fc3a 	bl	800c5ca <HAL_UARTEx_SetRxFifoThreshold>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d5c:	f000 fc9d 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_USART3_UART_Init+0x90>)
 8000d62:	f00b fbbb 	bl	800c4dc <HAL_UARTEx_DisableFifoMode>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 fc95 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	24000694 	.word	0x24000694
 8000d78:	40004800 	.word	0x40004800

08000d7c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000d82:	4a23      	ldr	r2, [pc, #140]	; (8000e10 <MX_USART6_UART_Init+0x94>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000d88:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000d8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000dc4:	4811      	ldr	r0, [pc, #68]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000dc6:	f008 ffe9 	bl	8009d9c <HAL_UART_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000dd0:	f000 fc63 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480d      	ldr	r0, [pc, #52]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000dd8:	f00b fbb9 	bl	800c54e <HAL_UARTEx_SetTxFifoThreshold>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000de2:	f000 fc5a 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4808      	ldr	r0, [pc, #32]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000dea:	f00b fbee 	bl	800c5ca <HAL_UARTEx_SetRxFifoThreshold>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000df4:	f000 fc51 	bl	800169a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_USART6_UART_Init+0x90>)
 8000dfa:	f00b fb6f 	bl	800c4dc <HAL_UARTEx_DisableFifoMode>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000e04:	f000 fc49 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24000728 	.word	0x24000728
 8000e10:	40011400 	.word	0x40011400

08000e14 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_DMA_Init+0x3c>)
 8000e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e30:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <MX_DMA_Init+0x3c>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_DMA_Init+0x3c>)
 8000e3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	200b      	movs	r0, #11
 8000e4e:	f001 fca2 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e52:	200b      	movs	r0, #11
 8000e54:	f001 fcb9 	bl	80027ca <HAL_NVIC_EnableIRQ>

}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	4b78      	ldr	r3, [pc, #480]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	4a76      	ldr	r2, [pc, #472]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8a:	4b74      	ldr	r3, [pc, #464]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	623b      	str	r3, [r7, #32]
 8000e96:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e98:	4b70      	ldr	r3, [pc, #448]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	4a6f      	ldr	r2, [pc, #444]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea8:	4b6c      	ldr	r3, [pc, #432]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb6:	4b69      	ldr	r3, [pc, #420]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	4a67      	ldr	r2, [pc, #412]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000ebe:	f043 0320 	orr.w	r3, r3, #32
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec6:	4b65      	ldr	r3, [pc, #404]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	f003 0320 	and.w	r3, r3, #32
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed4:	4b61      	ldr	r3, [pc, #388]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	4a60      	ldr	r2, [pc, #384]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee4:	4b5d      	ldr	r3, [pc, #372]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b5a      	ldr	r3, [pc, #360]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	4a58      	ldr	r2, [pc, #352]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f02:	4b56      	ldr	r3, [pc, #344]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	4b52      	ldr	r3, [pc, #328]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	4a51      	ldr	r2, [pc, #324]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f20:	4b4e      	ldr	r3, [pc, #312]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	4b4b      	ldr	r3, [pc, #300]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	4a49      	ldr	r2, [pc, #292]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3e:	4b47      	ldr	r3, [pc, #284]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f4c:	4b43      	ldr	r3, [pc, #268]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f52:	4a42      	ldr	r2, [pc, #264]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5c:	4b3f      	ldr	r3, [pc, #252]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2112      	movs	r1, #18
 8000f6e:	483c      	ldr	r0, [pc, #240]	; (8001060 <MX_GPIO_Init+0x1fc>)
 8000f70:	f005 f866 	bl	8006040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f7a:	483a      	ldr	r0, [pc, #232]	; (8001064 <MX_GPIO_Init+0x200>)
 8000f7c:	f005 f860 	bl	8006040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f86:	4838      	ldr	r0, [pc, #224]	; (8001068 <MX_GPIO_Init+0x204>)
 8000f88:	f005 f85a 	bl	8006040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LED_YELLOW_Pin;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	482f      	ldr	r0, [pc, #188]	; (8001060 <MX_GPIO_Init+0x1fc>)
 8000fa4:	f004 fea4 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482b      	ldr	r0, [pc, #172]	; (800106c <MX_GPIO_Init+0x208>)
 8000fbe:	f004 fe97 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin PB7 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|GPIO_PIN_7;
 8000fc2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4822      	ldr	r0, [pc, #136]	; (8001064 <MX_GPIO_Init+0x200>)
 8000fdc:	f004 fe88 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481b      	ldr	r0, [pc, #108]	; (8001068 <MX_GPIO_Init+0x204>)
 8000ffa:	f004 fe79 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001002:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	4817      	ldr	r0, [pc, #92]	; (8001070 <MX_GPIO_Init+0x20c>)
 8001014:	f004 fe6c 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4811      	ldr	r0, [pc, #68]	; (8001074 <MX_GPIO_Init+0x210>)
 800102e:	f004 fe5f 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001044:	230a      	movs	r3, #10
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4809      	ldr	r0, [pc, #36]	; (8001074 <MX_GPIO_Init+0x210>)
 8001050:	f004 fe4e 	bl	8005cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001054:	bf00      	nop
 8001056:	3738      	adds	r7, #56	; 0x38
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	58024400 	.word	0x58024400
 8001060:	58021000 	.word	0x58021000
 8001064:	58020400 	.word	0x58020400
 8001068:	58020c00 	.word	0x58020c00
 800106c:	58020800 	.word	0x58020800
 8001070:	58021800 	.word	0x58021800
 8001074:	58020000 	.word	0x58020000

08001078 <GetFifo6>:
    return 1;

}


int GetFifo6(SensorDataPacket* data) {
 8001078:	b4b0      	push	{r4, r5, r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

    if (GetPt6 == PutPt6) {
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <GetFifo6+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <GetFifo6+0x58>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d101      	bne.n	8001090 <GetFifo6+0x18>

        return 0; // buffer is empty
 800108c:	2300      	movs	r3, #0
 800108e:	e017      	b.n	80010c0 <GetFifo6+0x48>
    }
    //data pointer gets pointed to the next GetPointer
    *data = *(GetPt6++);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <GetFifo6+0x54>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f103 0218 	add.w	r2, r3, #24
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <GetFifo6+0x54>)
 800109a:	600a      	str	r2, [r1, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4614      	mov	r4, r2
 80010a0:	461d      	mov	r5, r3
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010aa:	e884 0003 	stmia.w	r4, {r0, r1}
    if (GetPt6 == &Fifo6[FIFO_SIZE]) {
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <GetFifo6+0x54>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <GetFifo6+0x5c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d102      	bne.n	80010be <GetFifo6+0x46>

        GetPt6 = &Fifo6[0];
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <GetFifo6+0x54>)
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <GetFifo6+0x60>)
 80010bc:	601a      	str	r2, [r3, #0]
    }
    return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bcb0      	pop	{r4, r5, r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	24000910 	.word	0x24000910
 80010d0:	2400090c 	.word	0x2400090c
 80010d4:	24000978 	.word	0x24000978
 80010d8:	24000918 	.word	0x24000918

080010dc <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b09c      	sub	sp, #112	; 0x70
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	__NOP();
 80010e4:	bf00      	nop

	if (htim == &htim16)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a30      	ldr	r2, [pc, #192]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d15a      	bne.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0xc8>
	{

		timer_counter++;
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010f8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
		HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&data1, sizeof(data1));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
		*/
		//SensorDataPacket data3[220];
		for(int i = 0; i < 4; i++){
 80010fa:	2300      	movs	r3, #0
 80010fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010fe:	e00d      	b.n	800111c <HAL_TIM_PeriodElapsedCallback+0x40>
			GetFifo6(&data1[i]);
 8001100:	f107 0108 	add.w	r1, r7, #8
 8001104:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ffb1 	bl	8001078 <GetFifo6>
		for(int i = 0; i < 4; i++){
 8001116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001118:	3301      	adds	r3, #1
 800111a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800111c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800111e:	2b03      	cmp	r3, #3
 8001120:	ddee      	ble.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x24>

		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	4823      	ldr	r0, [pc, #140]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001128:	f004 ff8a 	bl	8006040 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&data1, sizeof(data1));
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2260      	movs	r2, #96	; 0x60
 8001132:	4619      	mov	r1, r3
 8001134:	4820      	ldr	r0, [pc, #128]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001136:	f007 fee7 	bl	8008f08 <HAL_SPI_Transmit_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800113a:	2201      	movs	r2, #1
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	481d      	ldr	r0, [pc, #116]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001140:	f004 ff7e 	bl	8006040 <HAL_GPIO_WritePin>



		//SensorDataPacket data6[220];
		for(int i = 0; i < 220; i++){
 8001144:	2300      	movs	r3, #0
 8001146:	66bb      	str	r3, [r7, #104]	; 0x68
 8001148:	e00d      	b.n	8001166 <HAL_TIM_PeriodElapsedCallback+0x8a>
			GetFifo6(&data1[i]);
 800114a:	f107 0108 	add.w	r1, r7, #8
 800114e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	440b      	add	r3, r1
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff8c 	bl	8001078 <GetFifo6>
		for(int i = 0; i < 220; i++){
 8001160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001162:	3301      	adds	r3, #1
 8001164:	66bb      	str	r3, [r7, #104]	; 0x68
 8001166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001168:	2bdb      	cmp	r3, #219	; 0xdb
 800116a:	ddee      	ble.n	800114a <HAL_TIM_PeriodElapsedCallback+0x6e>

		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001172:	f004 ff65 	bl	8006040 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&data1, sizeof(data1));
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2260      	movs	r2, #96	; 0x60
 800117c:	4619      	mov	r1, r3
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001180:	f007 fec2 	bl	8008f08 <HAL_SPI_Transmit_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001184:	2201      	movs	r2, #1
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800118a:	f004 ff59 	bl	8006040 <HAL_GPIO_WritePin>
		if(timer_counter == 25){
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b19      	cmp	r3, #25
 8001194:	d106      	bne.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0xc8>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); //yellow
 8001196:	2102      	movs	r1, #2
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800119a:	f004 ff6a 	bl	8006072 <HAL_GPIO_TogglePin>
			timer_counter = 0;
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
	}




}
 80011a4:	bf00      	nop
 80011a6:	3770      	adds	r7, #112	; 0x70
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	24000364 	.word	0x24000364
 80011b0:	24000978 	.word	0x24000978
 80011b4:	58020400 	.word	0x58020400
 80011b8:	240001dc 	.word	0x240001dc
 80011bc:	58021000 	.word	0x58021000

080011c0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	__NOP();
 80011c8:	bf00      	nop

	if(hspi->Instance == SPI1){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_SPI_TxCpltCallback+0x58>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d111      	bne.n	80011f8 <HAL_SPI_TxCpltCallback+0x38>
		test_timer++;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_SPI_TxCpltCallback+0x5c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_SPI_TxCpltCallback+0x5c>)
 80011de:	701a      	strb	r2, [r3, #0]
		if(test_timer == 10)
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_SPI_TxCpltCallback+0x5c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b0a      	cmp	r3, #10
 80011e6:	d113      	bne.n	8001210 <HAL_SPI_TxCpltCallback+0x50>
		{
			test_timer = 0;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_SPI_TxCpltCallback+0x5c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //green
 80011ee:	2101      	movs	r1, #1
 80011f0:	480b      	ldr	r0, [pc, #44]	; (8001220 <HAL_SPI_TxCpltCallback+0x60>)
 80011f2:	f004 ff3e 	bl	8006072 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); //yellow
	}



}
 80011f6:	e00b      	b.n	8001210 <HAL_SPI_TxCpltCallback+0x50>
	else if (hspi->Instance == SPI5){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a09      	ldr	r2, [pc, #36]	; (8001224 <HAL_SPI_TxCpltCallback+0x64>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d106      	bne.n	8001210 <HAL_SPI_TxCpltCallback+0x50>
		spiReady = true; // Set the flag to indicate SPI is ready for the next transmission
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_SPI_TxCpltCallback+0x68>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); //yellow
 8001208:	2102      	movs	r1, #2
 800120a:	4808      	ldr	r0, [pc, #32]	; (800122c <HAL_SPI_TxCpltCallback+0x6c>)
 800120c:	f004 ff31 	bl	8006072 <HAL_GPIO_TogglePin>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40013000 	.word	0x40013000
 800121c:	24000979 	.word	0x24000979
 8001220:	58020400 	.word	0x58020400
 8001224:	40015000 	.word	0x40015000
 8001228:	24000000 	.word	0x24000000
 800122c:	58021000 	.word	0x58021000

08001230 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af04      	add	r7, sp, #16
 8001236:	6078      	str	r0, [r7, #4]
	//test_U2++;
	//if(test_U2 == 2){
    if(huart->Instance == USART1) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a65      	ldr	r2, [pc, #404]	; (80013d4 <HAL_UART_RxCpltCallback+0x1a4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d10c      	bne.n	800125c <HAL_UART_RxCpltCallback+0x2c>
        // Process data from USART1
    	processUartData(huart, &sensorData1, rx_data1, &uartState1, &timestampBuffer1, &dataBuffer1, &dataIndex1);
 8001242:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <HAL_UART_RxCpltCallback+0x1a8>)
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	4b65      	ldr	r3, [pc, #404]	; (80013dc <HAL_UART_RxCpltCallback+0x1ac>)
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <HAL_UART_RxCpltCallback+0x1b0>)
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4b65      	ldr	r3, [pc, #404]	; (80013e4 <HAL_UART_RxCpltCallback+0x1b4>)
 8001250:	4a65      	ldr	r2, [pc, #404]	; (80013e8 <HAL_UART_RxCpltCallback+0x1b8>)
 8001252:	4966      	ldr	r1, [pc, #408]	; (80013ec <HAL_UART_RxCpltCallback+0x1bc>)
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f92d 	bl	80014b4 <processUartData>
 800125a:	e06a      	b.n	8001332 <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == USART2) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a63      	ldr	r2, [pc, #396]	; (80013f0 <HAL_UART_RxCpltCallback+0x1c0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10c      	bne.n	8001280 <HAL_UART_RxCpltCallback+0x50>
        // Process data from USART2
    	//test_U2++;
    	processUartData(huart, &sensorData2, rx_data2, &uartState2, &timestampBuffer2, &dataBuffer2, &dataIndex2);
 8001266:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001268:	9302      	str	r3, [sp, #8]
 800126a:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <HAL_UART_RxCpltCallback+0x1c8>)
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <HAL_UART_RxCpltCallback+0x1cc>)
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	4b63      	ldr	r3, [pc, #396]	; (8001400 <HAL_UART_RxCpltCallback+0x1d0>)
 8001274:	4a63      	ldr	r2, [pc, #396]	; (8001404 <HAL_UART_RxCpltCallback+0x1d4>)
 8001276:	4964      	ldr	r1, [pc, #400]	; (8001408 <HAL_UART_RxCpltCallback+0x1d8>)
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f91b 	bl	80014b4 <processUartData>
 800127e:	e058      	b.n	8001332 <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == USART3) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a61      	ldr	r2, [pc, #388]	; (800140c <HAL_UART_RxCpltCallback+0x1dc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10c      	bne.n	80012a4 <HAL_UART_RxCpltCallback+0x74>
        // Process data from USART2
    	processUartData(huart, &sensorData3, rx_data3, &uartState3, &timestampBuffer3, &dataBuffer3, &dataIndex3);
 800128a:	4b61      	ldr	r3, [pc, #388]	; (8001410 <HAL_UART_RxCpltCallback+0x1e0>)
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	4b61      	ldr	r3, [pc, #388]	; (8001414 <HAL_UART_RxCpltCallback+0x1e4>)
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	4b61      	ldr	r3, [pc, #388]	; (8001418 <HAL_UART_RxCpltCallback+0x1e8>)
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4b61      	ldr	r3, [pc, #388]	; (800141c <HAL_UART_RxCpltCallback+0x1ec>)
 8001298:	4a61      	ldr	r2, [pc, #388]	; (8001420 <HAL_UART_RxCpltCallback+0x1f0>)
 800129a:	4962      	ldr	r1, [pc, #392]	; (8001424 <HAL_UART_RxCpltCallback+0x1f4>)
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f909 	bl	80014b4 <processUartData>
 80012a2:	e046      	b.n	8001332 <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == UART4) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a5f      	ldr	r2, [pc, #380]	; (8001428 <HAL_UART_RxCpltCallback+0x1f8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10c      	bne.n	80012c8 <HAL_UART_RxCpltCallback+0x98>
        // Process data from USART2
    	processUartData(huart, &sensorData4, rx_data4, &uartState4, &timestampBuffer4, &dataBuffer4, &dataIndex4);
 80012ae:	4b5f      	ldr	r3, [pc, #380]	; (800142c <HAL_UART_RxCpltCallback+0x1fc>)
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <HAL_UART_RxCpltCallback+0x200>)
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <HAL_UART_RxCpltCallback+0x204>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4b5f      	ldr	r3, [pc, #380]	; (8001438 <HAL_UART_RxCpltCallback+0x208>)
 80012bc:	4a5f      	ldr	r2, [pc, #380]	; (800143c <HAL_UART_RxCpltCallback+0x20c>)
 80012be:	4960      	ldr	r1, [pc, #384]	; (8001440 <HAL_UART_RxCpltCallback+0x210>)
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f8f7 	bl	80014b4 <processUartData>
 80012c6:	e034      	b.n	8001332 <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == UART5) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a5d      	ldr	r2, [pc, #372]	; (8001444 <HAL_UART_RxCpltCallback+0x214>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10c      	bne.n	80012ec <HAL_UART_RxCpltCallback+0xbc>
        // Process data from USART2
    	processUartData(huart, &sensorData5, rx_data5, &uartState5, &timestampBuffer5, &dataBuffer5, &dataIndex5);
 80012d2:	4b5d      	ldr	r3, [pc, #372]	; (8001448 <HAL_UART_RxCpltCallback+0x218>)
 80012d4:	9302      	str	r3, [sp, #8]
 80012d6:	4b5d      	ldr	r3, [pc, #372]	; (800144c <HAL_UART_RxCpltCallback+0x21c>)
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_UART_RxCpltCallback+0x220>)
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	4b5d      	ldr	r3, [pc, #372]	; (8001454 <HAL_UART_RxCpltCallback+0x224>)
 80012e0:	4a5d      	ldr	r2, [pc, #372]	; (8001458 <HAL_UART_RxCpltCallback+0x228>)
 80012e2:	495e      	ldr	r1, [pc, #376]	; (800145c <HAL_UART_RxCpltCallback+0x22c>)
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f8e5 	bl	80014b4 <processUartData>
 80012ea:	e022      	b.n	8001332 <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == USART6) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <HAL_UART_RxCpltCallback+0x230>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10c      	bne.n	8001310 <HAL_UART_RxCpltCallback+0xe0>
        // Process data from USART2
    	processUartData(huart, &sensorData6, rx_data6, &uartState6, &timestampBuffer6, &dataBuffer6, &dataIndex6);
 80012f6:	4b5b      	ldr	r3, [pc, #364]	; (8001464 <HAL_UART_RxCpltCallback+0x234>)
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <HAL_UART_RxCpltCallback+0x238>)
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	4b5b      	ldr	r3, [pc, #364]	; (800146c <HAL_UART_RxCpltCallback+0x23c>)
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <HAL_UART_RxCpltCallback+0x240>)
 8001304:	4a5b      	ldr	r2, [pc, #364]	; (8001474 <HAL_UART_RxCpltCallback+0x244>)
 8001306:	495c      	ldr	r1, [pc, #368]	; (8001478 <HAL_UART_RxCpltCallback+0x248>)
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f8d3 	bl	80014b4 <processUartData>
 800130e:	e010      	b.n	8001332 <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == UART7) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a59      	ldr	r2, [pc, #356]	; (800147c <HAL_UART_RxCpltCallback+0x24c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10b      	bne.n	8001332 <HAL_UART_RxCpltCallback+0x102>
        // Process data from USART2
    	processUartData(huart, &sensorData7, rx_data7, &uartState7, &timestampBuffer7, &dataBuffer7, &dataIndex7);
 800131a:	4b59      	ldr	r3, [pc, #356]	; (8001480 <HAL_UART_RxCpltCallback+0x250>)
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	4b59      	ldr	r3, [pc, #356]	; (8001484 <HAL_UART_RxCpltCallback+0x254>)
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	4b59      	ldr	r3, [pc, #356]	; (8001488 <HAL_UART_RxCpltCallback+0x258>)
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	4b59      	ldr	r3, [pc, #356]	; (800148c <HAL_UART_RxCpltCallback+0x25c>)
 8001328:	4a59      	ldr	r2, [pc, #356]	; (8001490 <HAL_UART_RxCpltCallback+0x260>)
 800132a:	495a      	ldr	r1, [pc, #360]	; (8001494 <HAL_UART_RxCpltCallback+0x264>)
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f8c1 	bl	80014b4 <processUartData>
    }
	//}

    // Re-enable UART reception interrupt correctly for each port
    if (huart->Instance == USART1) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <HAL_UART_RxCpltCallback+0x1a4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d105      	bne.n	8001348 <HAL_UART_RxCpltCallback+0x118>
        HAL_UART_Receive_IT(&huart1, rx_data1, 1);
 800133c:	2201      	movs	r2, #1
 800133e:	492a      	ldr	r1, [pc, #168]	; (80013e8 <HAL_UART_RxCpltCallback+0x1b8>)
 8001340:	4855      	ldr	r0, [pc, #340]	; (8001498 <HAL_UART_RxCpltCallback+0x268>)
 8001342:	f008 fd7b 	bl	8009e3c <HAL_UART_Receive_IT>
    	HAL_UART_Receive_IT(&huart6, rx_data6, 1);
    }
    else if (huart->Instance == UART7) {
    	HAL_UART_Receive_IT(&huart7, rx_data7, 1);
    }
}
 8001346:	e040      	b.n	80013ca <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == USART2) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <HAL_UART_RxCpltCallback+0x1c0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d105      	bne.n	800135e <HAL_UART_RxCpltCallback+0x12e>
        HAL_UART_Receive_IT(&huart2, rx_data2, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	492b      	ldr	r1, [pc, #172]	; (8001404 <HAL_UART_RxCpltCallback+0x1d4>)
 8001356:	4851      	ldr	r0, [pc, #324]	; (800149c <HAL_UART_RxCpltCallback+0x26c>)
 8001358:	f008 fd70 	bl	8009e3c <HAL_UART_Receive_IT>
}
 800135c:	e035      	b.n	80013ca <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == USART3) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a2a      	ldr	r2, [pc, #168]	; (800140c <HAL_UART_RxCpltCallback+0x1dc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d105      	bne.n	8001374 <HAL_UART_RxCpltCallback+0x144>
    	HAL_UART_Receive_IT(&huart3, rx_data3, 1);
 8001368:	2201      	movs	r2, #1
 800136a:	492d      	ldr	r1, [pc, #180]	; (8001420 <HAL_UART_RxCpltCallback+0x1f0>)
 800136c:	484c      	ldr	r0, [pc, #304]	; (80014a0 <HAL_UART_RxCpltCallback+0x270>)
 800136e:	f008 fd65 	bl	8009e3c <HAL_UART_Receive_IT>
}
 8001372:	e02a      	b.n	80013ca <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == UART4) {
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a2b      	ldr	r2, [pc, #172]	; (8001428 <HAL_UART_RxCpltCallback+0x1f8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d105      	bne.n	800138a <HAL_UART_RxCpltCallback+0x15a>
        HAL_UART_Receive_IT(&huart4, rx_data4, 1);
 800137e:	2201      	movs	r2, #1
 8001380:	492e      	ldr	r1, [pc, #184]	; (800143c <HAL_UART_RxCpltCallback+0x20c>)
 8001382:	4848      	ldr	r0, [pc, #288]	; (80014a4 <HAL_UART_RxCpltCallback+0x274>)
 8001384:	f008 fd5a 	bl	8009e3c <HAL_UART_Receive_IT>
}
 8001388:	e01f      	b.n	80013ca <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == UART5) {
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a2d      	ldr	r2, [pc, #180]	; (8001444 <HAL_UART_RxCpltCallback+0x214>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d105      	bne.n	80013a0 <HAL_UART_RxCpltCallback+0x170>
    	HAL_UART_Receive_IT(&huart5, rx_data5, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	4930      	ldr	r1, [pc, #192]	; (8001458 <HAL_UART_RxCpltCallback+0x228>)
 8001398:	4843      	ldr	r0, [pc, #268]	; (80014a8 <HAL_UART_RxCpltCallback+0x278>)
 800139a:	f008 fd4f 	bl	8009e3c <HAL_UART_Receive_IT>
}
 800139e:	e014      	b.n	80013ca <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == USART6) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <HAL_UART_RxCpltCallback+0x230>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d105      	bne.n	80013b6 <HAL_UART_RxCpltCallback+0x186>
    	HAL_UART_Receive_IT(&huart6, rx_data6, 1);
 80013aa:	2201      	movs	r2, #1
 80013ac:	4931      	ldr	r1, [pc, #196]	; (8001474 <HAL_UART_RxCpltCallback+0x244>)
 80013ae:	483f      	ldr	r0, [pc, #252]	; (80014ac <HAL_UART_RxCpltCallback+0x27c>)
 80013b0:	f008 fd44 	bl	8009e3c <HAL_UART_Receive_IT>
}
 80013b4:	e009      	b.n	80013ca <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == UART7) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a30      	ldr	r2, [pc, #192]	; (800147c <HAL_UART_RxCpltCallback+0x24c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d104      	bne.n	80013ca <HAL_UART_RxCpltCallback+0x19a>
    	HAL_UART_Receive_IT(&huart7, rx_data7, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	4933      	ldr	r1, [pc, #204]	; (8001490 <HAL_UART_RxCpltCallback+0x260>)
 80013c4:	483a      	ldr	r0, [pc, #232]	; (80014b0 <HAL_UART_RxCpltCallback+0x280>)
 80013c6:	f008 fd39 	bl	8009e3c <HAL_UART_Receive_IT>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40011000 	.word	0x40011000
 80013d8:	240007e8 	.word	0x240007e8
 80013dc:	240007e0 	.word	0x240007e0
 80013e0:	240007dc 	.word	0x240007dc
 80013e4:	240007d8 	.word	0x240007d8
 80013e8:	240007bc 	.word	0x240007bc
 80013ec:	240007c0 	.word	0x240007c0
 80013f0:	40004400 	.word	0x40004400
 80013f4:	24000818 	.word	0x24000818
 80013f8:	24000810 	.word	0x24000810
 80013fc:	2400080c 	.word	0x2400080c
 8001400:	24000808 	.word	0x24000808
 8001404:	240007ec 	.word	0x240007ec
 8001408:	240007f0 	.word	0x240007f0
 800140c:	40004800 	.word	0x40004800
 8001410:	24000848 	.word	0x24000848
 8001414:	24000840 	.word	0x24000840
 8001418:	2400083c 	.word	0x2400083c
 800141c:	24000838 	.word	0x24000838
 8001420:	2400081c 	.word	0x2400081c
 8001424:	24000820 	.word	0x24000820
 8001428:	40004c00 	.word	0x40004c00
 800142c:	24000878 	.word	0x24000878
 8001430:	24000870 	.word	0x24000870
 8001434:	2400086c 	.word	0x2400086c
 8001438:	24000868 	.word	0x24000868
 800143c:	2400084c 	.word	0x2400084c
 8001440:	24000850 	.word	0x24000850
 8001444:	40005000 	.word	0x40005000
 8001448:	240008a8 	.word	0x240008a8
 800144c:	240008a0 	.word	0x240008a0
 8001450:	2400089c 	.word	0x2400089c
 8001454:	24000898 	.word	0x24000898
 8001458:	2400087c 	.word	0x2400087c
 800145c:	24000880 	.word	0x24000880
 8001460:	40011400 	.word	0x40011400
 8001464:	240008d8 	.word	0x240008d8
 8001468:	240008d0 	.word	0x240008d0
 800146c:	240008cc 	.word	0x240008cc
 8001470:	240008c8 	.word	0x240008c8
 8001474:	240008ac 	.word	0x240008ac
 8001478:	240008b0 	.word	0x240008b0
 800147c:	40007800 	.word	0x40007800
 8001480:	24000908 	.word	0x24000908
 8001484:	24000900 	.word	0x24000900
 8001488:	240008fc 	.word	0x240008fc
 800148c:	240008f8 	.word	0x240008f8
 8001490:	240008dc 	.word	0x240008dc
 8001494:	240008e0 	.word	0x240008e0
 8001498:	2400056c 	.word	0x2400056c
 800149c:	24000600 	.word	0x24000600
 80014a0:	24000694 	.word	0x24000694
 80014a4:	240003b0 	.word	0x240003b0
 80014a8:	24000444 	.word	0x24000444
 80014ac:	24000728 	.word	0x24000728
 80014b0:	240004d8 	.word	0x240004d8

080014b4 <processUartData>:



void processUartData(UART_HandleTypeDef *huart, SensorDataPacket *sensorData, uint8_t *rxData,
                     UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer, uint32_t *dataIndex) {    // Your existing switch case logic here, adapted for the specific sensorData and rx_data
 80014b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b8:	b087      	sub	sp, #28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	603b      	str	r3, [r7, #0]
    // This function needs to be adapted from your existing HAL_UART_RxCpltCallback logic
	uint8_t rxByte = *rxData; // The received byte
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	75fb      	strb	r3, [r7, #23]
//    	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//    	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
    switch (*uartState) {
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	f200 80c1 	bhi.w	8001656 <processUartData+0x1a2>
 80014d4:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <processUartData+0x28>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	080014fd 	.word	0x080014fd
 80014e0:	08001513 	.word	0x08001513
 80014e4:	08001521 	.word	0x08001521
 80014e8:	08001535 	.word	0x08001535
 80014ec:	0800157b 	.word	0x0800157b
 80014f0:	080015f5 	.word	0x080015f5
 80014f4:	08001609 	.word	0x08001609
 80014f8:	08001623 	.word	0x08001623
        case UART_WAIT_FOR_SOP: // SOP Case
            if (rxByte == 0x53) { // SOP byte = 0x53 ('S')
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b53      	cmp	r3, #83	; 0x53
 8001500:	f040 80a2 	bne.w	8001648 <processUartData+0x194>
            	sensorData->sop = rxByte; // Set the sop
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	7dfa      	ldrb	r2, [r7, #23]
 8001508:	701a      	strb	r2, [r3, #0]
            	*uartState = UART_DATATYPE;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            }
            break;
 8001510:	e09a      	b.n	8001648 <processUartData+0x194>
        case UART_DATATYPE: // Data type Case
        	sensorData->datatype = rxByte; // Set th		e data type (Temp = 00, Humidity = 01, Sound = 10, Vibration = 11)
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	7dfa      	ldrb	r2, [r7, #23]
 8001516:	705a      	strb	r2, [r3, #1]
            *uartState = UART_SENSOR_ID; // Next parameter
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2202      	movs	r2, #2
 800151c:	701a      	strb	r2, [r3, #0]
            break;
 800151e:	e09a      	b.n	8001656 <processUartData+0x1a2>

        case UART_SENSOR_ID: // Sensor ID Case
        	sensorData->sensorId = rxByte; // Set the sensor ID (000, 001, 010, 011, 100, 101, 110, 111 (i.e. Sensor 1-8)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	7dfa      	ldrb	r2, [r7, #23]
 8001524:	709a      	strb	r2, [r3, #2]
        	*dataIndex = 0; // Reset dataIndex for the next field
 8001526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
            *uartState = UART_TIMESTAMP; // Next parameter
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2203      	movs	r2, #3
 8001530:	701a      	strb	r2, [r3, #0]
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 8001532:	e090      	b.n	8001656 <processUartData+0x1a2>

        case UART_TIMESTAMP: // Timestamp Case
            // Combine byte into timestamp assuming little endian - least significant byte first
//            	timestampBuffer |= ((uint32_t)rxByte << (24 - (dataIndex * 8)));
        	*timestampBuffer |= ((uint32_t)rxByte << ((*dataIndex-1) * 8));
 8001534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	7df9      	ldrb	r1, [r7, #23]
 800153a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	431a      	orrs	r2, r3
 8001548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800154a:	601a      	str	r2, [r3, #0]
//            	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
//            	sprintf(buffer, "Timestamp partial: 0x%08lX\r\n", timestampBuffer);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 800154c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001554:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->timestamp)) {
 8001556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d976      	bls.n	800164c <processUartData+0x198>
                sensorData->timestamp = *timestampBuffer; // Assign the complete timestamp
 800155e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	605a      	str	r2, [r3, #4]
                *dataIndex = 0; // Reset dataIndex for the data field
 8001566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
                *timestampBuffer = 0; // Clear the buffer for the next use
 800156c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
                *uartState = UART_DATA; // Move to the next state
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2204      	movs	r2, #4
 8001576:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001578:	e068      	b.n	800164c <processUartData+0x198>

        case UART_DATA: // Data Case
            // Combine byte into data assuming little endian - least significant byte first
        	*dataBuffer |= ((uint64_t)rxByte << ((*dataIndex-1) * 8));//            	sprintf(buffer, "Data partial: 0x%016llx\r\n", dataBuffer);
 800157a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	2200      	movs	r2, #0
 8001584:	4698      	mov	r8, r3
 8001586:	4691      	mov	r9, r2
 8001588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3b01      	subs	r3, #1
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	f1a3 0620 	sub.w	r6, r3, #32
 8001594:	f1c3 0220 	rsb	r2, r3, #32
 8001598:	fa09 f503 	lsl.w	r5, r9, r3
 800159c:	fa08 f606 	lsl.w	r6, r8, r6
 80015a0:	4335      	orrs	r5, r6
 80015a2:	fa28 f202 	lsr.w	r2, r8, r2
 80015a6:	4315      	orrs	r5, r2
 80015a8:	fa08 f403 	lsl.w	r4, r8, r3
 80015ac:	ea40 0a04 	orr.w	sl, r0, r4
 80015b0:	ea41 0b05 	orr.w	fp, r1, r5
 80015b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b6:	e9c3 ab00 	strd	sl, fp, [r3]
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 80015ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c2:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->data)) {
 80015c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	d941      	bls.n	8001650 <processUartData+0x19c>
                sensorData->data = *dataBuffer; // Assign the complete data
 80015cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
                *dataIndex = 0; // Reset dataIndex for the CRC field
 80015d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
                *dataBuffer = 0; // Clear the buffer for the next use
 80015de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]
                *uartState = UART_CRC; // Move to the next state
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2205      	movs	r2, #5
 80015f0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80015f2:	e02d      	b.n	8001650 <processUartData+0x19c>

        case UART_CRC: // CRC Case
        	if(rxByte != 0){
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d02c      	beq.n	8001654 <processUartData+0x1a0>
                sensorData->crc = rxByte; // Set the CRC value based on algorithm
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	7dfa      	ldrb	r2, [r7, #23]
 80015fe:	741a      	strb	r2, [r3, #16]
                *uartState = UART_EOP; // Next parameter
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2206      	movs	r2, #6
 8001604:	701a      	strb	r2, [r3, #0]
        	}
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 8001606:	e025      	b.n	8001654 <processUartData+0x1a0>

        case UART_EOP:
            if (rxByte == 0x45) { // EOP byte = 0x45 ('E')
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b45      	cmp	r3, #69	; 0x45
 800160c:	d106      	bne.n	800161c <processUartData+0x168>
                *uartState = UART_DONE; // Packet reception is complete
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2207      	movs	r2, #7
 8001612:	701a      	strb	r2, [r3, #0]
                sensorData->eop = rxByte; // Set the eop
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	7dfa      	ldrb	r2, [r7, #23]
 8001618:	745a      	strb	r2, [r3, #17]
//                    uartState = UART_DONE; // Packet reception is complete
//                    sensorData.eop = rxByte; // Set the eop
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
            }
            break;
 800161a:	e01c      	b.n	8001656 <processUartData+0x1a2>
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
 800161c:	2300      	movs	r3, #0
 800161e:	603b      	str	r3, [r7, #0]
            break;
 8001620:	e019      	b.n	8001656 <processUartData+0x1a2>
        	*/
//        	for(size_t i = 0; i < sizeof(SensorDataPacket); i++) {
//        	    uint8_t* bytePtr = ((uint8_t*)sensorData) + i; // Point to each byte in sequence
//        	    HAL_SPI_Transmit(&hspi5, bytePtr, 1, 100); // Transmit one byte at a time
//        	}
        	if(spiReady) {
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <processUartData+0x1ac>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <processUartData+0x188>
        		spiReady = false; // Clear the flag to indicate SPI is busy
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <processUartData+0x1ac>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
        	    HAL_SPI_Transmit_IT(&hspi5, (uint8_t*)sensorData, sizeof(SensorDataPacket)); // Transmit the data over SPI
 8001632:	2218      	movs	r2, #24
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <processUartData+0x1b0>)
 8001638:	f007 fbbc 	bl	8008db4 <HAL_SPI_Transmit_IT>
        	    }
        	else if (huart->Instance == USART6) {
        		 PutFifo6(*sensorData);
        	    }
        	    */
        	resetUartState(uartState, timestampBuffer, dataBuffer);
 800163c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800163e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001640:	6838      	ldr	r0, [r7, #0]
 8001642:	f000 f811 	bl	8001668 <resetUartState>
            break;
 8001646:	e006      	b.n	8001656 <processUartData+0x1a2>
            break;
 8001648:	bf00      	nop
 800164a:	e004      	b.n	8001656 <processUartData+0x1a2>
            break;
 800164c:	bf00      	nop
 800164e:	e002      	b.n	8001656 <processUartData+0x1a2>
            break;
 8001650:	bf00      	nop
 8001652:	e000      	b.n	8001656 <processUartData+0x1a2>
            break;
 8001654:	bf00      	nop
    }
    // Ready to receive the next byte
   // HAL_UART_Receive_IT(huart, rxData, 1);
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001660:	24000000 	.word	0x24000000
 8001664:	24000264 	.word	0x24000264

08001668 <resetUartState>:
	HAL_SPI_Transmit(&hspi5, tx_data, 2, 10);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
}


void resetUartState(UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer) {
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
    *uartState = UART_WAIT_FOR_SOP; // Reset UART state
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
    *timestampBuffer = 0; // Clear the timestamp buffer
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
    *dataBuffer = 0; // Clear the data buffer
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e9c1 2300 	strd	r2, r3, [r1]
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169e:	b672      	cpsid	i
}
 80016a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <Error_Handler+0x8>

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_MspInit+0x30>)
 80016ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b0:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_MspInit+0x30>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_MspInit+0x30>)
 80016bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	58024400 	.word	0x58024400

080016d8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08e      	sub	sp, #56	; 0x38
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a59      	ldr	r2, [pc, #356]	; (800185c <HAL_ETH_MspInit+0x184>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	f040 80ab 	bne.w	8001852 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80016fc:	4b58      	ldr	r3, [pc, #352]	; (8001860 <HAL_ETH_MspInit+0x188>)
 80016fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001702:	4a57      	ldr	r2, [pc, #348]	; (8001860 <HAL_ETH_MspInit+0x188>)
 8001704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001708:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800170c:	4b54      	ldr	r3, [pc, #336]	; (8001860 <HAL_ETH_MspInit+0x188>)
 800170e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001716:	623b      	str	r3, [r7, #32]
 8001718:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_ETH_MspInit+0x188>)
 800171c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001720:	4a4f      	ldr	r2, [pc, #316]	; (8001860 <HAL_ETH_MspInit+0x188>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001726:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800172a:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <HAL_ETH_MspInit+0x188>)
 800172c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001738:	4b49      	ldr	r3, [pc, #292]	; (8001860 <HAL_ETH_MspInit+0x188>)
 800173a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800173e:	4a48      	ldr	r2, [pc, #288]	; (8001860 <HAL_ETH_MspInit+0x188>)
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001748:	4b45      	ldr	r3, [pc, #276]	; (8001860 <HAL_ETH_MspInit+0x188>)
 800174a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	4b42      	ldr	r3, [pc, #264]	; (8001860 <HAL_ETH_MspInit+0x188>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	4a40      	ldr	r2, [pc, #256]	; (8001860 <HAL_ETH_MspInit+0x188>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_ETH_MspInit+0x188>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <HAL_ETH_MspInit+0x188>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177a:	4a39      	ldr	r2, [pc, #228]	; (8001860 <HAL_ETH_MspInit+0x188>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001784:	4b36      	ldr	r3, [pc, #216]	; (8001860 <HAL_ETH_MspInit+0x188>)
 8001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	4b33      	ldr	r3, [pc, #204]	; (8001860 <HAL_ETH_MspInit+0x188>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	4a31      	ldr	r2, [pc, #196]	; (8001860 <HAL_ETH_MspInit+0x188>)
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_ETH_MspInit+0x188>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_ETH_MspInit+0x188>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <HAL_ETH_MspInit+0x188>)
 80017b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_ETH_MspInit+0x188>)
 80017c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017ce:	2332      	movs	r3, #50	; 0x32
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017de:	230b      	movs	r3, #11
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	481e      	ldr	r0, [pc, #120]	; (8001864 <HAL_ETH_MspInit+0x18c>)
 80017ea:	f004 fa81 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017ee:	2386      	movs	r3, #134	; 0x86
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017fe:	230b      	movs	r3, #11
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	4817      	ldr	r0, [pc, #92]	; (8001868 <HAL_ETH_MspInit+0x190>)
 800180a:	f004 fa71 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800180e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001820:	230b      	movs	r3, #11
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	4810      	ldr	r0, [pc, #64]	; (800186c <HAL_ETH_MspInit+0x194>)
 800182c:	f004 fa60 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001830:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001842:	230b      	movs	r3, #11
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184a:	4619      	mov	r1, r3
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <HAL_ETH_MspInit+0x198>)
 800184e:	f004 fa4f 	bl	8005cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3738      	adds	r7, #56	; 0x38
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40028000 	.word	0x40028000
 8001860:	58024400 	.word	0x58024400
 8001864:	58020800 	.word	0x58020800
 8001868:	58020000 	.word	0x58020000
 800186c:	58020400 	.word	0x58020400
 8001870:	58021800 	.word	0x58021800

08001874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0bc      	sub	sp, #240	; 0xf0
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	22b8      	movs	r2, #184	; 0xb8
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f00a ff25 	bl	800c6e4 <memset>
  if(hspi->Instance==SPI1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7d      	ldr	r2, [pc, #500]	; (8001a94 <HAL_SPI_MspInit+0x220>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	f040 809f 	bne.w	80019e4 <HAL_SPI_MspInit+0x170>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80018a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 fb94 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80018c6:	f7ff fee8 	bl	800169a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 80018cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018d0:	4a71      	ldr	r2, [pc, #452]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 80018d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018da:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 80018dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ee:	4a6a      	ldr	r2, [pc, #424]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f8:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190c:	4a62      	ldr	r2, [pc, #392]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001916:	4b60      	ldr	r3, [pc, #384]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 8001918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001924:	2360      	movs	r3, #96	; 0x60
 8001926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193c:	2305      	movs	r3, #5
 800193e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001946:	4619      	mov	r1, r3
 8001948:	4854      	ldr	r0, [pc, #336]	; (8001a9c <HAL_SPI_MspInit+0x228>)
 800194a:	f004 f9d1 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001966:	2305      	movs	r3, #5
 8001968:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001970:	4619      	mov	r1, r3
 8001972:	484b      	ldr	r0, [pc, #300]	; (8001aa0 <HAL_SPI_MspInit+0x22c>)
 8001974:	f004 f9bc 	bl	8005cf0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001978:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 800197a:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <HAL_SPI_MspInit+0x234>)
 800197c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800197e:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 8001980:	2226      	movs	r2, #38	; 0x26
 8001982:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001984:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198a:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001990:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 8001992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001996:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001998:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019a4:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019aa:	4b3e      	ldr	r3, [pc, #248]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b0:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019b6:	483b      	ldr	r0, [pc, #236]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 80019b8:	f000 ff22 	bl	8002800 <HAL_DMA_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 80019c2:	f7ff fe6a 	bl	800169a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a36      	ldr	r2, [pc, #216]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 80019ca:	679a      	str	r2, [r3, #120]	; 0x78
 80019cc:	4a35      	ldr	r2, [pc, #212]	; (8001aa4 <HAL_SPI_MspInit+0x230>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	2023      	movs	r0, #35	; 0x23
 80019d8:	f000 fedd 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019dc:	2023      	movs	r0, #35	; 0x23
 80019de:	f000 fef4 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80019e2:	e053      	b.n	8001a8c <HAL_SPI_MspInit+0x218>
  else if(hspi->Instance==SPI5)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a30      	ldr	r2, [pc, #192]	; (8001aac <HAL_SPI_MspInit+0x238>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d14e      	bne.n	8001a8c <HAL_SPI_MspInit+0x218>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80019ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f005 faef 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_SPI_MspInit+0x1a0>
      Error_Handler();
 8001a10:	f7ff fe43 	bl	800169a <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001a14:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 8001a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 8001a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 8001a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 8001a3a:	f043 0320 	orr.w	r3, r3, #32
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_SPI_MspInit+0x224>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a50:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a74:	4619      	mov	r1, r3
 8001a76:	480e      	ldr	r0, [pc, #56]	; (8001ab0 <HAL_SPI_MspInit+0x23c>)
 8001a78:	f004 f93a 	bl	8005cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2055      	movs	r0, #85	; 0x55
 8001a82:	f000 fe88 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8001a86:	2055      	movs	r0, #85	; 0x55
 8001a88:	f000 fe9f 	bl	80027ca <HAL_NVIC_EnableIRQ>
}
 8001a8c:	bf00      	nop
 8001a8e:	37f0      	adds	r7, #240	; 0xf0
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40013000 	.word	0x40013000
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	58020000 	.word	0x58020000
 8001aa0:	58020c00 	.word	0x58020c00
 8001aa4:	240002ec 	.word	0x240002ec
 8001aa8:	40020010 	.word	0x40020010
 8001aac:	40015000 	.word	0x40015000
 8001ab0:	58021400 	.word	0x58021400

08001ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_TIM_Base_MspInit+0x48>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d116      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_TIM_Base_MspInit+0x4c>)
 8001ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001acc:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <HAL_TIM_Base_MspInit+0x4c>)
 8001ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_TIM_Base_MspInit+0x4c>)
 8001ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2075      	movs	r0, #117	; 0x75
 8001aea:	f000 fe54 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001aee:	2075      	movs	r0, #117	; 0x75
 8001af0:	f000 fe6b 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40014400 	.word	0x40014400
 8001b00:	58024400 	.word	0x58024400

08001b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0c8      	sub	sp, #288	; 0x120
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001b0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b12:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b28:	22b8      	movs	r2, #184	; 0xb8
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00a fdd9 	bl	800c6e4 <memset>
  if(huart->Instance==UART4)
 8001b32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001b36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4ab9      	ldr	r2, [pc, #740]	; (8001e24 <HAL_UART_MspInit+0x320>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d173      	bne.n	8001c2c <HAL_UART_MspInit+0x128>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b44:	f04f 0202 	mov.w	r2, #2
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f005 fa44 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8001b66:	f7ff fd98 	bl	800169a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b6a:	4baf      	ldr	r3, [pc, #700]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b70:	4aad      	ldr	r2, [pc, #692]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001b72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b7a:	4bab      	ldr	r3, [pc, #684]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4ba7      	ldr	r3, [pc, #668]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8e:	4aa6      	ldr	r2, [pc, #664]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b98:	4ba3      	ldr	r3, [pc, #652]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	4ba0      	ldr	r3, [pc, #640]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bac:	4a9e      	ldr	r2, [pc, #632]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb6:	4b9c      	ldr	r3, [pc, #624]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001be6:	4619      	mov	r1, r3
 8001be8:	4890      	ldr	r0, [pc, #576]	; (8001e2c <HAL_UART_MspInit+0x328>)
 8001bea:	f004 f881 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bf2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001c12:	4619      	mov	r1, r3
 8001c14:	4886      	ldr	r0, [pc, #536]	; (8001e30 <HAL_UART_MspInit+0x32c>)
 8001c16:	f004 f86b 	bl	8005cf0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2034      	movs	r0, #52	; 0x34
 8001c20:	f000 fdb9 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c24:	2034      	movs	r0, #52	; 0x34
 8001c26:	f000 fdd0 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c2a:	e2ee      	b.n	800220a <HAL_UART_MspInit+0x706>
  else if(huart->Instance==UART5)
 8001c2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a7e      	ldr	r2, [pc, #504]	; (8001e34 <HAL_UART_MspInit+0x330>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d174      	bne.n	8001d28 <HAL_UART_MspInit+0x224>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001c3e:	f04f 0202 	mov.w	r2, #2
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c54:	4618      	mov	r0, r3
 8001c56:	f005 f9c7 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_MspInit+0x160>
      Error_Handler();
 8001c60:	f7ff fd1b 	bl	800169a <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c64:	4b70      	ldr	r3, [pc, #448]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c6a:	4a6f      	ldr	r2, [pc, #444]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c74:	4b6c      	ldr	r3, [pc, #432]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001c76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4b69      	ldr	r3, [pc, #420]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c92:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca0:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca6:	4a60      	ldr	r2, [pc, #384]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb0:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001cd8:	230e      	movs	r3, #14
 8001cda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4854      	ldr	r0, [pc, #336]	; (8001e38 <HAL_UART_MspInit+0x334>)
 8001ce6:	f004 f803 	bl	8005cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d04:	2308      	movs	r3, #8
 8001d06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4847      	ldr	r0, [pc, #284]	; (8001e30 <HAL_UART_MspInit+0x32c>)
 8001d12:	f003 ffed 	bl	8005cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2035      	movs	r0, #53	; 0x35
 8001d1c:	f000 fd3b 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d20:	2035      	movs	r0, #53	; 0x35
 8001d22:	f000 fd52 	bl	80027ca <HAL_NVIC_EnableIRQ>
}
 8001d26:	e270      	b.n	800220a <HAL_UART_MspInit+0x706>
  else if(huart->Instance==UART7)
 8001d28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a41      	ldr	r2, [pc, #260]	; (8001e3c <HAL_UART_MspInit+0x338>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	f040 8086 	bne.w	8001e48 <HAL_UART_MspInit+0x344>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001d3c:	f04f 0202 	mov.w	r2, #2
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d52:	4618      	mov	r0, r3
 8001d54:	f005 f948 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8001d5e:	f7ff fc9c 	bl	800169a <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001d62:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d68:	4a2f      	ldr	r2, [pc, #188]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d86:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001d88:	f043 0320 	orr.w	r3, r3, #32
 8001d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001da6:	f043 0310 	orr.w	r3, r3, #16
 8001daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_UART_MspInit+0x324>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dbc:	2340      	movs	r3, #64	; 0x40
 8001dbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001dd4:	2307      	movs	r3, #7
 8001dd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dda:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001dde:	4619      	mov	r1, r3
 8001de0:	4817      	ldr	r0, [pc, #92]	; (8001e40 <HAL_UART_MspInit+0x33c>)
 8001de2:	f003 ff85 	bl	8005cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001e00:	2307      	movs	r3, #7
 8001e02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e06:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <HAL_UART_MspInit+0x340>)
 8001e0e:	f003 ff6f 	bl	8005cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2052      	movs	r0, #82	; 0x52
 8001e18:	f000 fcbd 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001e1c:	2052      	movs	r0, #82	; 0x52
 8001e1e:	f000 fcd4 	bl	80027ca <HAL_NVIC_EnableIRQ>
}
 8001e22:	e1f2      	b.n	800220a <HAL_UART_MspInit+0x706>
 8001e24:	40004c00 	.word	0x40004c00
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	58020000 	.word	0x58020000
 8001e30:	58020800 	.word	0x58020800
 8001e34:	40005000 	.word	0x40005000
 8001e38:	58020400 	.word	0x58020400
 8001e3c:	40007800 	.word	0x40007800
 8001e40:	58021400 	.word	0x58021400
 8001e44:	58021000 	.word	0x58021000
  else if(huart->Instance==USART1)
 8001e48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4ab2      	ldr	r2, [pc, #712]	; (8002120 <HAL_UART_MspInit+0x61c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d164      	bne.n	8001f24 <HAL_UART_MspInit+0x420>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e5a:	f04f 0201 	mov.w	r2, #1
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e70:	4618      	mov	r0, r3
 8001e72:	f005 f8b9 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_UART_MspInit+0x37c>
      Error_Handler();
 8001e7c:	f7ff fc0d 	bl	800169a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e80:	4ba8      	ldr	r3, [pc, #672]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e86:	4aa7      	ldr	r2, [pc, #668]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001e88:	f043 0310 	orr.w	r3, r3, #16
 8001e8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e90:	4ba4      	ldr	r3, [pc, #656]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	4ba1      	ldr	r3, [pc, #644]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	4a9f      	ldr	r2, [pc, #636]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eae:	4b9d      	ldr	r3, [pc, #628]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4891      	ldr	r0, [pc, #580]	; (8002128 <HAL_UART_MspInit+0x624>)
 8001ee4:	f003 ff04 	bl	8005cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ee8:	2340      	movs	r3, #64	; 0x40
 8001eea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f00:	2307      	movs	r3, #7
 8001f02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4886      	ldr	r0, [pc, #536]	; (8002128 <HAL_UART_MspInit+0x624>)
 8001f0e:	f003 feef 	bl	8005cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2025      	movs	r0, #37	; 0x25
 8001f18:	f000 fc3d 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f1c:	2025      	movs	r0, #37	; 0x25
 8001f1e:	f000 fc54 	bl	80027ca <HAL_NVIC_EnableIRQ>
}
 8001f22:	e172      	b.n	800220a <HAL_UART_MspInit+0x706>
  else if(huart->Instance==USART2)
 8001f24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a7e      	ldr	r2, [pc, #504]	; (800212c <HAL_UART_MspInit+0x628>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	f040 808b 	bne.w	800204e <HAL_UART_MspInit+0x54a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f38:	f04f 0202 	mov.w	r2, #2
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f005 f84a 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_UART_MspInit+0x45a>
      Error_Handler();
 8001f5a:	f7ff fb9e 	bl	800169a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f5e:	4b71      	ldr	r3, [pc, #452]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f64:	4a6f      	ldr	r2, [pc, #444]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f74:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8001f78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f86:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f8a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b65      	ldr	r3, [pc, #404]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f92:	4a64      	ldr	r2, [pc, #400]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9c:	4b61      	ldr	r3, [pc, #388]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa2:	f003 0201 	and.w	r2, r3, #1
 8001fa6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001fb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fb8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fba:	4b5a      	ldr	r3, [pc, #360]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc0:	4a58      	ldr	r2, [pc, #352]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001fc2:	f043 0308 	orr.w	r3, r3, #8
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fca:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_UART_MspInit+0x620>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd0:	f003 0208 	and.w	r2, r3, #8
 8001fd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fe6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002000:	2307      	movs	r3, #7
 8002002:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800200a:	4619      	mov	r1, r3
 800200c:	4848      	ldr	r0, [pc, #288]	; (8002130 <HAL_UART_MspInit+0x62c>)
 800200e:	f003 fe6f 	bl	8005cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002012:	2320      	movs	r3, #32
 8002014:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800202a:	2307      	movs	r3, #7
 800202c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002030:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002034:	4619      	mov	r1, r3
 8002036:	483f      	ldr	r0, [pc, #252]	; (8002134 <HAL_UART_MspInit+0x630>)
 8002038:	f003 fe5a 	bl	8005cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2026      	movs	r0, #38	; 0x26
 8002042:	f000 fba8 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002046:	2026      	movs	r0, #38	; 0x26
 8002048:	f000 fbbf 	bl	80027ca <HAL_NVIC_EnableIRQ>
}
 800204c:	e0dd      	b.n	800220a <HAL_UART_MspInit+0x706>
  else if(huart->Instance==USART3)
 800204e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002052:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a37      	ldr	r2, [pc, #220]	; (8002138 <HAL_UART_MspInit+0x634>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d16d      	bne.n	800213c <HAL_UART_MspInit+0x638>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002060:	f04f 0202 	mov.w	r2, #2
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002072:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002076:	4618      	mov	r0, r3
 8002078:	f004 ffb6 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_UART_MspInit+0x582>
      Error_Handler();
 8002082:	f7ff fb0a 	bl	800169a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_UART_MspInit+0x620>)
 8002088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800208c:	4a25      	ldr	r2, [pc, #148]	; (8002124 <HAL_UART_MspInit+0x620>)
 800208e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002092:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002096:	4b23      	ldr	r3, [pc, #140]	; (8002124 <HAL_UART_MspInit+0x620>)
 8002098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800209c:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80020a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80020a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80020ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020b2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_UART_MspInit+0x620>)
 80020b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ba:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <HAL_UART_MspInit+0x620>)
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <HAL_UART_MspInit+0x620>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ca:	f003 0208 	and.w	r2, r3, #8
 80020ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80020d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80020dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020e0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80020e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020fc:	2307      	movs	r3, #7
 80020fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002102:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002106:	4619      	mov	r1, r3
 8002108:	480a      	ldr	r0, [pc, #40]	; (8002134 <HAL_UART_MspInit+0x630>)
 800210a:	f003 fdf1 	bl	8005cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2027      	movs	r0, #39	; 0x27
 8002114:	f000 fb3f 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002118:	2027      	movs	r0, #39	; 0x27
 800211a:	f000 fb56 	bl	80027ca <HAL_NVIC_EnableIRQ>
}
 800211e:	e074      	b.n	800220a <HAL_UART_MspInit+0x706>
 8002120:	40011000 	.word	0x40011000
 8002124:	58024400 	.word	0x58024400
 8002128:	58020400 	.word	0x58020400
 800212c:	40004400 	.word	0x40004400
 8002130:	58020000 	.word	0x58020000
 8002134:	58020c00 	.word	0x58020c00
 8002138:	40004800 	.word	0x40004800
  else if(huart->Instance==USART6)
 800213c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002140:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a32      	ldr	r2, [pc, #200]	; (8002214 <HAL_UART_MspInit+0x710>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d15d      	bne.n	800220a <HAL_UART_MspInit+0x706>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800214e:	f04f 0201 	mov.w	r2, #1
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002160:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002164:	4618      	mov	r0, r3
 8002166:	f004 ff3f 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_UART_MspInit+0x670>
      Error_Handler();
 8002170:	f7ff fa93 	bl	800169a <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002174:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_UART_MspInit+0x714>)
 8002176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800217a:	4a27      	ldr	r2, [pc, #156]	; (8002218 <HAL_UART_MspInit+0x714>)
 800217c:	f043 0320 	orr.w	r3, r3, #32
 8002180:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_UART_MspInit+0x714>)
 8002186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800218a:	f003 0220 	and.w	r2, r3, #32
 800218e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002192:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800219c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021a0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_UART_MspInit+0x714>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a8:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_UART_MspInit+0x714>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_UART_MspInit+0x714>)
 80021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b8:	f003 0204 	and.w	r2, r3, #4
 80021bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80021c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80021ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021ce:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80021e8:	2307      	movs	r3, #7
 80021ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ee:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80021f2:	4619      	mov	r1, r3
 80021f4:	4809      	ldr	r0, [pc, #36]	; (800221c <HAL_UART_MspInit+0x718>)
 80021f6:	f003 fd7b 	bl	8005cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	2047      	movs	r0, #71	; 0x47
 8002200:	f000 fac9 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002204:	2047      	movs	r0, #71	; 0x47
 8002206:	f000 fae0 	bl	80027ca <HAL_NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40011400 	.word	0x40011400
 8002218:	58024400 	.word	0x58024400
 800221c:	58020800 	.word	0x58020800

08002220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002224:	e7fe      	b.n	8002224 <NMI_Handler+0x4>

08002226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <HardFault_Handler+0x4>

0800222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <MemManage_Handler+0x4>

08002232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <UsageFault_Handler+0x4>

0800223e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226c:	f000 f984 	bl	8002578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}

08002274 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <DMA1_Stream0_IRQHandler+0x10>)
 800227a:	f001 fde7 	bl	8003e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	240002ec 	.word	0x240002ec

08002288 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <SPI1_IRQHandler+0x10>)
 800228e:	f006 ff7d 	bl	800918c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	240001dc 	.word	0x240001dc

0800229c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <USART1_IRQHandler+0x10>)
 80022a2:	f007 fe17 	bl	8009ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2400056c 	.word	0x2400056c

080022b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <USART2_IRQHandler+0x10>)
 80022b6:	f007 fe0d 	bl	8009ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	24000600 	.word	0x24000600

080022c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <USART3_IRQHandler+0x10>)
 80022ca:	f007 fe03 	bl	8009ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	24000694 	.word	0x24000694

080022d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <UART4_IRQHandler+0x10>)
 80022de:	f007 fdf9 	bl	8009ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	240003b0 	.word	0x240003b0

080022ec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <UART5_IRQHandler+0x10>)
 80022f2:	f007 fdef 	bl	8009ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	24000444 	.word	0x24000444

08002300 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <USART6_IRQHandler+0x10>)
 8002306:	f007 fde5 	bl	8009ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	24000728 	.word	0x24000728

08002314 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <UART7_IRQHandler+0x10>)
 800231a:	f007 fddb 	bl	8009ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	240004d8 	.word	0x240004d8

08002328 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <SPI5_IRQHandler+0x10>)
 800232e:	f006 ff2d 	bl	800918c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	24000264 	.word	0x24000264

0800233c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <TIM16_IRQHandler+0x10>)
 8002342:	f007 fb2b 	bl	800999c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	24000364 	.word	0x24000364

08002350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <SystemInit+0xd0>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	4a31      	ldr	r2, [pc, #196]	; (8002420 <SystemInit+0xd0>)
 800235c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002364:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <SystemInit+0xd4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	2b06      	cmp	r3, #6
 800236e:	d807      	bhi.n	8002380 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002370:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <SystemInit+0xd4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 030f 	bic.w	r3, r3, #15
 8002378:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <SystemInit+0xd4>)
 800237a:	f043 0307 	orr.w	r3, r3, #7
 800237e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <SystemInit+0xd8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a28      	ldr	r2, [pc, #160]	; (8002428 <SystemInit+0xd8>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <SystemInit+0xd8>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <SystemInit+0xd8>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4924      	ldr	r1, [pc, #144]	; (8002428 <SystemInit+0xd8>)
 8002398:	4b24      	ldr	r3, [pc, #144]	; (800242c <SystemInit+0xdc>)
 800239a:	4013      	ands	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <SystemInit+0xd4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <SystemInit+0xd4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 030f 	bic.w	r3, r3, #15
 80023b2:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <SystemInit+0xd4>)
 80023b4:	f043 0307 	orr.w	r3, r3, #7
 80023b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <SystemInit+0xd8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <SystemInit+0xd8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <SystemInit+0xd8>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <SystemInit+0xd8>)
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <SystemInit+0xe0>)
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <SystemInit+0xd8>)
 80023d4:	4a17      	ldr	r2, [pc, #92]	; (8002434 <SystemInit+0xe4>)
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <SystemInit+0xd8>)
 80023da:	4a17      	ldr	r2, [pc, #92]	; (8002438 <SystemInit+0xe8>)
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <SystemInit+0xd8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <SystemInit+0xd8>)
 80023e6:	4a14      	ldr	r2, [pc, #80]	; (8002438 <SystemInit+0xe8>)
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023ea:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <SystemInit+0xd8>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <SystemInit+0xd8>)
 80023f2:	4a11      	ldr	r2, [pc, #68]	; (8002438 <SystemInit+0xe8>)
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <SystemInit+0xd8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <SystemInit+0xd8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a09      	ldr	r2, [pc, #36]	; (8002428 <SystemInit+0xd8>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002406:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <SystemInit+0xd8>)
 800240a:	2200      	movs	r2, #0
 800240c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <SystemInit+0xec>)
 8002410:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002414:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00
 8002424:	52002000 	.word	0x52002000
 8002428:	58024400 	.word	0x58024400
 800242c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002430:	02020200 	.word	0x02020200
 8002434:	01ff0000 	.word	0x01ff0000
 8002438:	01010280 	.word	0x01010280
 800243c:	52004000 	.word	0x52004000

08002440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002444:	f7ff ff84 	bl	8002350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800244a:	490d      	ldr	r1, [pc, #52]	; (8002480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002450:	e002      	b.n	8002458 <LoopCopyDataInit>

08002452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002456:	3304      	adds	r3, #4

08002458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800245c:	d3f9      	bcc.n	8002452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002460:	4c0a      	ldr	r4, [pc, #40]	; (800248c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002464:	e001      	b.n	800246a <LoopFillZerobss>

08002466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002468:	3204      	adds	r2, #4

0800246a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800246c:	d3fb      	bcc.n	8002466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246e:	f00a f941 	bl	800c6f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002472:	f7fe f8c9 	bl	8000608 <main>
  bx  lr
 8002476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002478:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800247c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002480:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002484:	0800c7a4 	.word	0x0800c7a4
  ldr r2, =_sbss
 8002488:	240000d8 	.word	0x240000d8
  ldr r4, =_ebss
 800248c:	24000988 	.word	0x24000988

08002490 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002490:	e7fe      	b.n	8002490 <ADC3_IRQHandler>
	...

08002494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249a:	2003      	movs	r0, #3
 800249c:	f000 f970 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024a0:	f004 fbcc 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_Init+0x68>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	4913      	ldr	r1, [pc, #76]	; (8002500 <HAL_Init+0x6c>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_Init+0x68>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_Init+0x6c>)
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_Init+0x70>)
 80024d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024d8:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_Init+0x74>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024de:	2000      	movs	r0, #0
 80024e0:	f000 f814 	bl	800250c <HAL_InitTick>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e002      	b.n	80024f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024ee:	f7ff f8d9 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	58024400 	.word	0x58024400
 8002500:	0800c754 	.word	0x0800c754
 8002504:	24000008 	.word	0x24000008
 8002508:	24000004 	.word	0x24000004

0800250c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_InitTick+0x60>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e021      	b.n	8002564 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_InitTick+0x64>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_InitTick+0x60>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f955 	bl	80027e6 <HAL_SYSTICK_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00e      	b.n	8002564 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b0f      	cmp	r3, #15
 800254a:	d80a      	bhi.n	8002562 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800254c:	2200      	movs	r2, #0
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f000 f91f 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002558:	4a06      	ldr	r2, [pc, #24]	; (8002574 <HAL_InitTick+0x68>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	24000010 	.word	0x24000010
 8002570:	24000004 	.word	0x24000004
 8002574:	2400000c 	.word	0x2400000c

08002578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x20>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x24>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_IncTick+0x24>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	24000010 	.word	0x24000010
 800259c:	24000984 	.word	0x24000984

080025a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_GetTick+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	24000984 	.word	0x24000984

080025b8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80025c8:	4904      	ldr	r1, [pc, #16]	; (80025dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	58000400 	.word	0x58000400

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <__NVIC_SetPriorityGrouping+0x40>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 800260a:	4313      	orrs	r3, r2
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <__NVIC_SetPriorityGrouping+0x40>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00
 8002624:	05fa0000 	.word	0x05fa0000

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff40 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff90 	bl	80026d4 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff5f 	bl	8002680 <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff33 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffa4 	bl	800273c <SysTick_Config>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff feca 	bl	80025a0 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e312      	b.n	8002e3e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a66      	ldr	r2, [pc, #408]	; (80029b8 <HAL_DMA_Init+0x1b8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d04a      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a65      	ldr	r2, [pc, #404]	; (80029bc <HAL_DMA_Init+0x1bc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d045      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a63      	ldr	r2, [pc, #396]	; (80029c0 <HAL_DMA_Init+0x1c0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d040      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a62      	ldr	r2, [pc, #392]	; (80029c4 <HAL_DMA_Init+0x1c4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d03b      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a60      	ldr	r2, [pc, #384]	; (80029c8 <HAL_DMA_Init+0x1c8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d036      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a5f      	ldr	r2, [pc, #380]	; (80029cc <HAL_DMA_Init+0x1cc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d031      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a5d      	ldr	r2, [pc, #372]	; (80029d0 <HAL_DMA_Init+0x1d0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02c      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a5c      	ldr	r2, [pc, #368]	; (80029d4 <HAL_DMA_Init+0x1d4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d027      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a5a      	ldr	r2, [pc, #360]	; (80029d8 <HAL_DMA_Init+0x1d8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d022      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a59      	ldr	r2, [pc, #356]	; (80029dc <HAL_DMA_Init+0x1dc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d01d      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a57      	ldr	r2, [pc, #348]	; (80029e0 <HAL_DMA_Init+0x1e0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d018      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <HAL_DMA_Init+0x1e4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d013      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a54      	ldr	r2, [pc, #336]	; (80029e8 <HAL_DMA_Init+0x1e8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00e      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a53      	ldr	r2, [pc, #332]	; (80029ec <HAL_DMA_Init+0x1ec>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d009      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a51      	ldr	r2, [pc, #324]	; (80029f0 <HAL_DMA_Init+0x1f0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_DMA_Init+0xb8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a50      	ldr	r2, [pc, #320]	; (80029f4 <HAL_DMA_Init+0x1f4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_DMA_Init+0xbc>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_DMA_Init+0xbe>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 813c 	beq.w	8002b3c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a37      	ldr	r2, [pc, #220]	; (80029b8 <HAL_DMA_Init+0x1b8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04a      	beq.n	8002974 <HAL_DMA_Init+0x174>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a36      	ldr	r2, [pc, #216]	; (80029bc <HAL_DMA_Init+0x1bc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d045      	beq.n	8002974 <HAL_DMA_Init+0x174>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a34      	ldr	r2, [pc, #208]	; (80029c0 <HAL_DMA_Init+0x1c0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d040      	beq.n	8002974 <HAL_DMA_Init+0x174>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a33      	ldr	r2, [pc, #204]	; (80029c4 <HAL_DMA_Init+0x1c4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d03b      	beq.n	8002974 <HAL_DMA_Init+0x174>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <HAL_DMA_Init+0x1c8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d036      	beq.n	8002974 <HAL_DMA_Init+0x174>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a30      	ldr	r2, [pc, #192]	; (80029cc <HAL_DMA_Init+0x1cc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d031      	beq.n	8002974 <HAL_DMA_Init+0x174>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2e      	ldr	r2, [pc, #184]	; (80029d0 <HAL_DMA_Init+0x1d0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02c      	beq.n	8002974 <HAL_DMA_Init+0x174>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2d      	ldr	r2, [pc, #180]	; (80029d4 <HAL_DMA_Init+0x1d4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d027      	beq.n	8002974 <HAL_DMA_Init+0x174>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <HAL_DMA_Init+0x1d8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d022      	beq.n	8002974 <HAL_DMA_Init+0x174>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <HAL_DMA_Init+0x1dc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d01d      	beq.n	8002974 <HAL_DMA_Init+0x174>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a28      	ldr	r2, [pc, #160]	; (80029e0 <HAL_DMA_Init+0x1e0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d018      	beq.n	8002974 <HAL_DMA_Init+0x174>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <HAL_DMA_Init+0x1e4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_DMA_Init+0x174>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a25      	ldr	r2, [pc, #148]	; (80029e8 <HAL_DMA_Init+0x1e8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_DMA_Init+0x174>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a24      	ldr	r2, [pc, #144]	; (80029ec <HAL_DMA_Init+0x1ec>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_DMA_Init+0x174>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_DMA_Init+0x1f0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_DMA_Init+0x174>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <HAL_DMA_Init+0x1f4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d108      	bne.n	8002986 <HAL_DMA_Init+0x186>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e007      	b.n	8002996 <HAL_DMA_Init+0x196>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002996:	e02f      	b.n	80029f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002998:	f7ff fe02 	bl	80025a0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d928      	bls.n	80029f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2203      	movs	r2, #3
 80029b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e242      	b.n	8002e3e <HAL_DMA_Init+0x63e>
 80029b8:	40020010 	.word	0x40020010
 80029bc:	40020028 	.word	0x40020028
 80029c0:	40020040 	.word	0x40020040
 80029c4:	40020058 	.word	0x40020058
 80029c8:	40020070 	.word	0x40020070
 80029cc:	40020088 	.word	0x40020088
 80029d0:	400200a0 	.word	0x400200a0
 80029d4:	400200b8 	.word	0x400200b8
 80029d8:	40020410 	.word	0x40020410
 80029dc:	40020428 	.word	0x40020428
 80029e0:	40020440 	.word	0x40020440
 80029e4:	40020458 	.word	0x40020458
 80029e8:	40020470 	.word	0x40020470
 80029ec:	40020488 	.word	0x40020488
 80029f0:	400204a0 	.word	0x400204a0
 80029f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1c8      	bne.n	8002998 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4b83      	ldr	r3, [pc, #524]	; (8002c20 <HAL_DMA_Init+0x420>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002a1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a36:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d107      	bne.n	8002a5c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	4313      	orrs	r3, r2
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b28      	cmp	r3, #40	; 0x28
 8002a62:	d903      	bls.n	8002a6c <HAL_DMA_Init+0x26c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b2e      	cmp	r3, #46	; 0x2e
 8002a6a:	d91f      	bls.n	8002aac <HAL_DMA_Init+0x2ac>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b3e      	cmp	r3, #62	; 0x3e
 8002a72:	d903      	bls.n	8002a7c <HAL_DMA_Init+0x27c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b42      	cmp	r3, #66	; 0x42
 8002a7a:	d917      	bls.n	8002aac <HAL_DMA_Init+0x2ac>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b46      	cmp	r3, #70	; 0x46
 8002a82:	d903      	bls.n	8002a8c <HAL_DMA_Init+0x28c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b48      	cmp	r3, #72	; 0x48
 8002a8a:	d90f      	bls.n	8002aac <HAL_DMA_Init+0x2ac>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b4e      	cmp	r3, #78	; 0x4e
 8002a92:	d903      	bls.n	8002a9c <HAL_DMA_Init+0x29c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b52      	cmp	r3, #82	; 0x52
 8002a9a:	d907      	bls.n	8002aac <HAL_DMA_Init+0x2ac>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b73      	cmp	r3, #115	; 0x73
 8002aa2:	d905      	bls.n	8002ab0 <HAL_DMA_Init+0x2b0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b77      	cmp	r3, #119	; 0x77
 8002aaa:	d801      	bhi.n	8002ab0 <HAL_DMA_Init+0x2b0>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_DMA_Init+0x2b2>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002abc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 0307 	bic.w	r3, r3, #7
 8002ad4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d117      	bne.n	8002b18 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f002 fb3a 	bl	8005174 <DMA_CheckFifoParam>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2240      	movs	r2, #64	; 0x40
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e192      	b.n	8002e3e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f002 fa75 	bl	8005010 <DMA_CalcBaseAndBitshift>
 8002b26:	4603      	mov	r3, r0
 8002b28:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	223f      	movs	r2, #63	; 0x3f
 8002b34:	409a      	lsls	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	e0c8      	b.n	8002cce <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a38      	ldr	r2, [pc, #224]	; (8002c24 <HAL_DMA_Init+0x424>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d022      	beq.n	8002b8c <HAL_DMA_Init+0x38c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a37      	ldr	r2, [pc, #220]	; (8002c28 <HAL_DMA_Init+0x428>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d01d      	beq.n	8002b8c <HAL_DMA_Init+0x38c>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a35      	ldr	r2, [pc, #212]	; (8002c2c <HAL_DMA_Init+0x42c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d018      	beq.n	8002b8c <HAL_DMA_Init+0x38c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a34      	ldr	r2, [pc, #208]	; (8002c30 <HAL_DMA_Init+0x430>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d013      	beq.n	8002b8c <HAL_DMA_Init+0x38c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <HAL_DMA_Init+0x434>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00e      	beq.n	8002b8c <HAL_DMA_Init+0x38c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a31      	ldr	r2, [pc, #196]	; (8002c38 <HAL_DMA_Init+0x438>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_DMA_Init+0x38c>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2f      	ldr	r2, [pc, #188]	; (8002c3c <HAL_DMA_Init+0x43c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d004      	beq.n	8002b8c <HAL_DMA_Init+0x38c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <HAL_DMA_Init+0x440>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_DMA_Init+0x390>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_DMA_Init+0x392>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8092 	beq.w	8002cbc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <HAL_DMA_Init+0x424>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d021      	beq.n	8002be6 <HAL_DMA_Init+0x3e6>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a20      	ldr	r2, [pc, #128]	; (8002c28 <HAL_DMA_Init+0x428>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d01c      	beq.n	8002be6 <HAL_DMA_Init+0x3e6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <HAL_DMA_Init+0x42c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d017      	beq.n	8002be6 <HAL_DMA_Init+0x3e6>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_DMA_Init+0x430>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d012      	beq.n	8002be6 <HAL_DMA_Init+0x3e6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <HAL_DMA_Init+0x434>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00d      	beq.n	8002be6 <HAL_DMA_Init+0x3e6>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <HAL_DMA_Init+0x438>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d008      	beq.n	8002be6 <HAL_DMA_Init+0x3e6>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_DMA_Init+0x43c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <HAL_DMA_Init+0x3e6>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <HAL_DMA_Init+0x440>)
 8002be4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <HAL_DMA_Init+0x444>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d01c      	beq.n	8002c48 <HAL_DMA_Init+0x448>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b80      	cmp	r3, #128	; 0x80
 8002c14:	d102      	bne.n	8002c1c <HAL_DMA_Init+0x41c>
 8002c16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c1a:	e016      	b.n	8002c4a <HAL_DMA_Init+0x44a>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e014      	b.n	8002c4a <HAL_DMA_Init+0x44a>
 8002c20:	fe10803f 	.word	0xfe10803f
 8002c24:	58025408 	.word	0x58025408
 8002c28:	5802541c 	.word	0x5802541c
 8002c2c:	58025430 	.word	0x58025430
 8002c30:	58025444 	.word	0x58025444
 8002c34:	58025458 	.word	0x58025458
 8002c38:	5802546c 	.word	0x5802546c
 8002c3c:	58025480 	.word	0x58025480
 8002c40:	58025494 	.word	0x58025494
 8002c44:	fffe000f 	.word	0xfffe000f
 8002c48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b6e      	ldr	r3, [pc, #440]	; (8002e48 <HAL_DMA_Init+0x648>)
 8002c90:	4413      	add	r3, r2
 8002c92:	4a6e      	ldr	r2, [pc, #440]	; (8002e4c <HAL_DMA_Init+0x64c>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	009a      	lsls	r2, r3, #2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f002 f9b5 	bl	8005010 <DMA_CalcBaseAndBitshift>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e008      	b.n	8002cce <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2240      	movs	r2, #64	; 0x40
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0b7      	b.n	8002e3e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5f      	ldr	r2, [pc, #380]	; (8002e50 <HAL_DMA_Init+0x650>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d072      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a5d      	ldr	r2, [pc, #372]	; (8002e54 <HAL_DMA_Init+0x654>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d06d      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5c      	ldr	r2, [pc, #368]	; (8002e58 <HAL_DMA_Init+0x658>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d068      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a5a      	ldr	r2, [pc, #360]	; (8002e5c <HAL_DMA_Init+0x65c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d063      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a59      	ldr	r2, [pc, #356]	; (8002e60 <HAL_DMA_Init+0x660>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d05e      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a57      	ldr	r2, [pc, #348]	; (8002e64 <HAL_DMA_Init+0x664>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d059      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a56      	ldr	r2, [pc, #344]	; (8002e68 <HAL_DMA_Init+0x668>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d054      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a54      	ldr	r2, [pc, #336]	; (8002e6c <HAL_DMA_Init+0x66c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d04f      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a53      	ldr	r2, [pc, #332]	; (8002e70 <HAL_DMA_Init+0x670>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d04a      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a51      	ldr	r2, [pc, #324]	; (8002e74 <HAL_DMA_Init+0x674>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d045      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a50      	ldr	r2, [pc, #320]	; (8002e78 <HAL_DMA_Init+0x678>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d040      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a4e      	ldr	r2, [pc, #312]	; (8002e7c <HAL_DMA_Init+0x67c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d03b      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a4d      	ldr	r2, [pc, #308]	; (8002e80 <HAL_DMA_Init+0x680>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d036      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a4b      	ldr	r2, [pc, #300]	; (8002e84 <HAL_DMA_Init+0x684>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d031      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <HAL_DMA_Init+0x688>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d02c      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a48      	ldr	r2, [pc, #288]	; (8002e8c <HAL_DMA_Init+0x68c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d027      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a47      	ldr	r2, [pc, #284]	; (8002e90 <HAL_DMA_Init+0x690>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a45      	ldr	r2, [pc, #276]	; (8002e94 <HAL_DMA_Init+0x694>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a44      	ldr	r2, [pc, #272]	; (8002e98 <HAL_DMA_Init+0x698>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a42      	ldr	r2, [pc, #264]	; (8002e9c <HAL_DMA_Init+0x69c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a41      	ldr	r2, [pc, #260]	; (8002ea0 <HAL_DMA_Init+0x6a0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a3f      	ldr	r2, [pc, #252]	; (8002ea4 <HAL_DMA_Init+0x6a4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a3e      	ldr	r2, [pc, #248]	; (8002ea8 <HAL_DMA_Init+0x6a8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_DMA_Init+0x5be>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a3c      	ldr	r2, [pc, #240]	; (8002eac <HAL_DMA_Init+0x6ac>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_DMA_Init+0x5c2>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_DMA_Init+0x5c4>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d032      	beq.n	8002e2e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f002 fa4f 	bl	800526c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d102      	bne.n	8002ddc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002df0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d010      	beq.n	8002e1c <HAL_DMA_Init+0x61c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d80c      	bhi.n	8002e1c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f002 facc 	bl	80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e008      	b.n	8002e2e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	a7fdabf8 	.word	0xa7fdabf8
 8002e4c:	cccccccd 	.word	0xcccccccd
 8002e50:	40020010 	.word	0x40020010
 8002e54:	40020028 	.word	0x40020028
 8002e58:	40020040 	.word	0x40020040
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	40020070 	.word	0x40020070
 8002e64:	40020088 	.word	0x40020088
 8002e68:	400200a0 	.word	0x400200a0
 8002e6c:	400200b8 	.word	0x400200b8
 8002e70:	40020410 	.word	0x40020410
 8002e74:	40020428 	.word	0x40020428
 8002e78:	40020440 	.word	0x40020440
 8002e7c:	40020458 	.word	0x40020458
 8002e80:	40020470 	.word	0x40020470
 8002e84:	40020488 	.word	0x40020488
 8002e88:	400204a0 	.word	0x400204a0
 8002e8c:	400204b8 	.word	0x400204b8
 8002e90:	58025408 	.word	0x58025408
 8002e94:	5802541c 	.word	0x5802541c
 8002e98:	58025430 	.word	0x58025430
 8002e9c:	58025444 	.word	0x58025444
 8002ea0:	58025458 	.word	0x58025458
 8002ea4:	5802546c 	.word	0x5802546c
 8002ea8:	58025480 	.word	0x58025480
 8002eac:	58025494 	.word	0x58025494

08002eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e226      	b.n	800331a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_DMA_Start_IT+0x2a>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e21f      	b.n	800331a <HAL_DMA_Start_IT+0x46a>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	f040 820a 	bne.w	8003304 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a68      	ldr	r2, [pc, #416]	; (80030a4 <HAL_DMA_Start_IT+0x1f4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d04a      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a66      	ldr	r2, [pc, #408]	; (80030a8 <HAL_DMA_Start_IT+0x1f8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d045      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_DMA_Start_IT+0x1fc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d040      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a63      	ldr	r2, [pc, #396]	; (80030b0 <HAL_DMA_Start_IT+0x200>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d03b      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a62      	ldr	r2, [pc, #392]	; (80030b4 <HAL_DMA_Start_IT+0x204>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d036      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a60      	ldr	r2, [pc, #384]	; (80030b8 <HAL_DMA_Start_IT+0x208>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d031      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a5f      	ldr	r2, [pc, #380]	; (80030bc <HAL_DMA_Start_IT+0x20c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d02c      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a5d      	ldr	r2, [pc, #372]	; (80030c0 <HAL_DMA_Start_IT+0x210>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d027      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a5c      	ldr	r2, [pc, #368]	; (80030c4 <HAL_DMA_Start_IT+0x214>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d022      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5a      	ldr	r2, [pc, #360]	; (80030c8 <HAL_DMA_Start_IT+0x218>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01d      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a59      	ldr	r2, [pc, #356]	; (80030cc <HAL_DMA_Start_IT+0x21c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d018      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_DMA_Start_IT+0x220>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <HAL_DMA_Start_IT+0x224>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00e      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a54      	ldr	r2, [pc, #336]	; (80030d8 <HAL_DMA_Start_IT+0x228>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a53      	ldr	r2, [pc, #332]	; (80030dc <HAL_DMA_Start_IT+0x22c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a51      	ldr	r2, [pc, #324]	; (80030e0 <HAL_DMA_Start_IT+0x230>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d108      	bne.n	8002fb0 <HAL_DMA_Start_IT+0x100>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0201 	bic.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e007      	b.n	8002fc0 <HAL_DMA_Start_IT+0x110>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f001 fe76 	bl	8004cb8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a34      	ldr	r2, [pc, #208]	; (80030a4 <HAL_DMA_Start_IT+0x1f4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d04a      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a33      	ldr	r2, [pc, #204]	; (80030a8 <HAL_DMA_Start_IT+0x1f8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d045      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a31      	ldr	r2, [pc, #196]	; (80030ac <HAL_DMA_Start_IT+0x1fc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d040      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a30      	ldr	r2, [pc, #192]	; (80030b0 <HAL_DMA_Start_IT+0x200>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d03b      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a2e      	ldr	r2, [pc, #184]	; (80030b4 <HAL_DMA_Start_IT+0x204>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d036      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <HAL_DMA_Start_IT+0x208>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d031      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a2b      	ldr	r2, [pc, #172]	; (80030bc <HAL_DMA_Start_IT+0x20c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d02c      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <HAL_DMA_Start_IT+0x210>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d027      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a28      	ldr	r2, [pc, #160]	; (80030c4 <HAL_DMA_Start_IT+0x214>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d022      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a27      	ldr	r2, [pc, #156]	; (80030c8 <HAL_DMA_Start_IT+0x218>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d01d      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a25      	ldr	r2, [pc, #148]	; (80030cc <HAL_DMA_Start_IT+0x21c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d018      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a24      	ldr	r2, [pc, #144]	; (80030d0 <HAL_DMA_Start_IT+0x220>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <HAL_DMA_Start_IT+0x224>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00e      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a21      	ldr	r2, [pc, #132]	; (80030d8 <HAL_DMA_Start_IT+0x228>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d009      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_DMA_Start_IT+0x22c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d004      	beq.n	800306c <HAL_DMA_Start_IT+0x1bc>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_DMA_Start_IT+0x230>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_DMA_Start_IT+0x1c0>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <HAL_DMA_Start_IT+0x1c2>
 8003070:	2300      	movs	r3, #0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d036      	beq.n	80030e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 021e 	bic.w	r2, r3, #30
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0216 	orr.w	r2, r2, #22
 8003088:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d03e      	beq.n	8003110 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0208 	orr.w	r2, r2, #8
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e035      	b.n	8003110 <HAL_DMA_Start_IT+0x260>
 80030a4:	40020010 	.word	0x40020010
 80030a8:	40020028 	.word	0x40020028
 80030ac:	40020040 	.word	0x40020040
 80030b0:	40020058 	.word	0x40020058
 80030b4:	40020070 	.word	0x40020070
 80030b8:	40020088 	.word	0x40020088
 80030bc:	400200a0 	.word	0x400200a0
 80030c0:	400200b8 	.word	0x400200b8
 80030c4:	40020410 	.word	0x40020410
 80030c8:	40020428 	.word	0x40020428
 80030cc:	40020440 	.word	0x40020440
 80030d0:	40020458 	.word	0x40020458
 80030d4:	40020470 	.word	0x40020470
 80030d8:	40020488 	.word	0x40020488
 80030dc:	400204a0 	.word	0x400204a0
 80030e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 020e 	bic.w	r2, r3, #14
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 020a 	orr.w	r2, r2, #10
 80030f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0204 	orr.w	r2, r2, #4
 800310e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a83      	ldr	r2, [pc, #524]	; (8003324 <HAL_DMA_Start_IT+0x474>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d072      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a82      	ldr	r2, [pc, #520]	; (8003328 <HAL_DMA_Start_IT+0x478>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d06d      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a80      	ldr	r2, [pc, #512]	; (800332c <HAL_DMA_Start_IT+0x47c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d068      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a7f      	ldr	r2, [pc, #508]	; (8003330 <HAL_DMA_Start_IT+0x480>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d063      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a7d      	ldr	r2, [pc, #500]	; (8003334 <HAL_DMA_Start_IT+0x484>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d05e      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a7c      	ldr	r2, [pc, #496]	; (8003338 <HAL_DMA_Start_IT+0x488>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d059      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a7a      	ldr	r2, [pc, #488]	; (800333c <HAL_DMA_Start_IT+0x48c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d054      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a79      	ldr	r2, [pc, #484]	; (8003340 <HAL_DMA_Start_IT+0x490>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d04f      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a77      	ldr	r2, [pc, #476]	; (8003344 <HAL_DMA_Start_IT+0x494>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d04a      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a76      	ldr	r2, [pc, #472]	; (8003348 <HAL_DMA_Start_IT+0x498>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d045      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a74      	ldr	r2, [pc, #464]	; (800334c <HAL_DMA_Start_IT+0x49c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d040      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a73      	ldr	r2, [pc, #460]	; (8003350 <HAL_DMA_Start_IT+0x4a0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d03b      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a71      	ldr	r2, [pc, #452]	; (8003354 <HAL_DMA_Start_IT+0x4a4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d036      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a70      	ldr	r2, [pc, #448]	; (8003358 <HAL_DMA_Start_IT+0x4a8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d031      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6e      	ldr	r2, [pc, #440]	; (800335c <HAL_DMA_Start_IT+0x4ac>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d02c      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6d      	ldr	r2, [pc, #436]	; (8003360 <HAL_DMA_Start_IT+0x4b0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d027      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a6b      	ldr	r2, [pc, #428]	; (8003364 <HAL_DMA_Start_IT+0x4b4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d022      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6a      	ldr	r2, [pc, #424]	; (8003368 <HAL_DMA_Start_IT+0x4b8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d01d      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a68      	ldr	r2, [pc, #416]	; (800336c <HAL_DMA_Start_IT+0x4bc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d018      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a67      	ldr	r2, [pc, #412]	; (8003370 <HAL_DMA_Start_IT+0x4c0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a65      	ldr	r2, [pc, #404]	; (8003374 <HAL_DMA_Start_IT+0x4c4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a64      	ldr	r2, [pc, #400]	; (8003378 <HAL_DMA_Start_IT+0x4c8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a62      	ldr	r2, [pc, #392]	; (800337c <HAL_DMA_Start_IT+0x4cc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_DMA_Start_IT+0x350>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a61      	ldr	r2, [pc, #388]	; (8003380 <HAL_DMA_Start_IT+0x4d0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_DMA_Start_IT+0x354>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_DMA_Start_IT+0x356>
 8003204:	2300      	movs	r3, #0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01a      	beq.n	8003240 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003226:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800323e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a37      	ldr	r2, [pc, #220]	; (8003324 <HAL_DMA_Start_IT+0x474>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d04a      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a36      	ldr	r2, [pc, #216]	; (8003328 <HAL_DMA_Start_IT+0x478>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d045      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a34      	ldr	r2, [pc, #208]	; (800332c <HAL_DMA_Start_IT+0x47c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d040      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a33      	ldr	r2, [pc, #204]	; (8003330 <HAL_DMA_Start_IT+0x480>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d03b      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_DMA_Start_IT+0x484>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d036      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a30      	ldr	r2, [pc, #192]	; (8003338 <HAL_DMA_Start_IT+0x488>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d031      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a2e      	ldr	r2, [pc, #184]	; (800333c <HAL_DMA_Start_IT+0x48c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d02c      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2d      	ldr	r2, [pc, #180]	; (8003340 <HAL_DMA_Start_IT+0x490>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d027      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2b      	ldr	r2, [pc, #172]	; (8003344 <HAL_DMA_Start_IT+0x494>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d022      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2a      	ldr	r2, [pc, #168]	; (8003348 <HAL_DMA_Start_IT+0x498>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d01d      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a28      	ldr	r2, [pc, #160]	; (800334c <HAL_DMA_Start_IT+0x49c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d018      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a27      	ldr	r2, [pc, #156]	; (8003350 <HAL_DMA_Start_IT+0x4a0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d013      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <HAL_DMA_Start_IT+0x4a4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00e      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a24      	ldr	r2, [pc, #144]	; (8003358 <HAL_DMA_Start_IT+0x4a8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d009      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_DMA_Start_IT+0x4ac>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_DMA_Start_IT+0x430>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a21      	ldr	r2, [pc, #132]	; (8003360 <HAL_DMA_Start_IT+0x4b0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d108      	bne.n	80032f2 <HAL_DMA_Start_IT+0x442>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e012      	b.n	8003318 <HAL_DMA_Start_IT+0x468>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e009      	b.n	8003318 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800330a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003318:	7dfb      	ldrb	r3, [r7, #23]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40020010 	.word	0x40020010
 8003328:	40020028 	.word	0x40020028
 800332c:	40020040 	.word	0x40020040
 8003330:	40020058 	.word	0x40020058
 8003334:	40020070 	.word	0x40020070
 8003338:	40020088 	.word	0x40020088
 800333c:	400200a0 	.word	0x400200a0
 8003340:	400200b8 	.word	0x400200b8
 8003344:	40020410 	.word	0x40020410
 8003348:	40020428 	.word	0x40020428
 800334c:	40020440 	.word	0x40020440
 8003350:	40020458 	.word	0x40020458
 8003354:	40020470 	.word	0x40020470
 8003358:	40020488 	.word	0x40020488
 800335c:	400204a0 	.word	0x400204a0
 8003360:	400204b8 	.word	0x400204b8
 8003364:	58025408 	.word	0x58025408
 8003368:	5802541c 	.word	0x5802541c
 800336c:	58025430 	.word	0x58025430
 8003370:	58025444 	.word	0x58025444
 8003374:	58025458 	.word	0x58025458
 8003378:	5802546c 	.word	0x5802546c
 800337c:	58025480 	.word	0x58025480
 8003380:	58025494 	.word	0x58025494

08003384 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800338c:	f7ff f908 	bl	80025a0 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e2dc      	b.n	8003956 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d008      	beq.n	80033ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e2cd      	b.n	8003956 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a76      	ldr	r2, [pc, #472]	; (8003598 <HAL_DMA_Abort+0x214>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d04a      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a74      	ldr	r2, [pc, #464]	; (800359c <HAL_DMA_Abort+0x218>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d045      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a73      	ldr	r2, [pc, #460]	; (80035a0 <HAL_DMA_Abort+0x21c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d040      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a71      	ldr	r2, [pc, #452]	; (80035a4 <HAL_DMA_Abort+0x220>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d03b      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a70      	ldr	r2, [pc, #448]	; (80035a8 <HAL_DMA_Abort+0x224>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d036      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a6e      	ldr	r2, [pc, #440]	; (80035ac <HAL_DMA_Abort+0x228>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d031      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6d      	ldr	r2, [pc, #436]	; (80035b0 <HAL_DMA_Abort+0x22c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d02c      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6b      	ldr	r2, [pc, #428]	; (80035b4 <HAL_DMA_Abort+0x230>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d027      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6a      	ldr	r2, [pc, #424]	; (80035b8 <HAL_DMA_Abort+0x234>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d022      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a68      	ldr	r2, [pc, #416]	; (80035bc <HAL_DMA_Abort+0x238>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01d      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a67      	ldr	r2, [pc, #412]	; (80035c0 <HAL_DMA_Abort+0x23c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d018      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a65      	ldr	r2, [pc, #404]	; (80035c4 <HAL_DMA_Abort+0x240>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a64      	ldr	r2, [pc, #400]	; (80035c8 <HAL_DMA_Abort+0x244>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a62      	ldr	r2, [pc, #392]	; (80035cc <HAL_DMA_Abort+0x248>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a61      	ldr	r2, [pc, #388]	; (80035d0 <HAL_DMA_Abort+0x24c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_DMA_Abort+0xd6>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a5f      	ldr	r2, [pc, #380]	; (80035d4 <HAL_DMA_Abort+0x250>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_DMA_Abort+0xda>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_DMA_Abort+0xdc>
 800345e:	2300      	movs	r3, #0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 021e 	bic.w	r2, r2, #30
 8003472:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003482:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e00a      	b.n	80034a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 020e 	bic.w	r2, r2, #14
 800349a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a3c      	ldr	r2, [pc, #240]	; (8003598 <HAL_DMA_Abort+0x214>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d072      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a3a      	ldr	r2, [pc, #232]	; (800359c <HAL_DMA_Abort+0x218>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d06d      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a39      	ldr	r2, [pc, #228]	; (80035a0 <HAL_DMA_Abort+0x21c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d068      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a37      	ldr	r2, [pc, #220]	; (80035a4 <HAL_DMA_Abort+0x220>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d063      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a36      	ldr	r2, [pc, #216]	; (80035a8 <HAL_DMA_Abort+0x224>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d05e      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a34      	ldr	r2, [pc, #208]	; (80035ac <HAL_DMA_Abort+0x228>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d059      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a33      	ldr	r2, [pc, #204]	; (80035b0 <HAL_DMA_Abort+0x22c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d054      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a31      	ldr	r2, [pc, #196]	; (80035b4 <HAL_DMA_Abort+0x230>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d04f      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a30      	ldr	r2, [pc, #192]	; (80035b8 <HAL_DMA_Abort+0x234>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d04a      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a2e      	ldr	r2, [pc, #184]	; (80035bc <HAL_DMA_Abort+0x238>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d045      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2d      	ldr	r2, [pc, #180]	; (80035c0 <HAL_DMA_Abort+0x23c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d040      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a2b      	ldr	r2, [pc, #172]	; (80035c4 <HAL_DMA_Abort+0x240>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d03b      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <HAL_DMA_Abort+0x244>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d036      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a28      	ldr	r2, [pc, #160]	; (80035cc <HAL_DMA_Abort+0x248>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d031      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a27      	ldr	r2, [pc, #156]	; (80035d0 <HAL_DMA_Abort+0x24c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d02c      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <HAL_DMA_Abort+0x250>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d027      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <HAL_DMA_Abort+0x254>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d022      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a22      	ldr	r2, [pc, #136]	; (80035dc <HAL_DMA_Abort+0x258>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01d      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a21      	ldr	r2, [pc, #132]	; (80035e0 <HAL_DMA_Abort+0x25c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d018      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <HAL_DMA_Abort+0x260>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <HAL_DMA_Abort+0x264>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <HAL_DMA_Abort+0x268>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <HAL_DMA_Abort+0x26c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_DMA_Abort+0x20e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_DMA_Abort+0x270>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d132      	bne.n	80035f8 <HAL_DMA_Abort+0x274>
 8003592:	2301      	movs	r3, #1
 8003594:	e031      	b.n	80035fa <HAL_DMA_Abort+0x276>
 8003596:	bf00      	nop
 8003598:	40020010 	.word	0x40020010
 800359c:	40020028 	.word	0x40020028
 80035a0:	40020040 	.word	0x40020040
 80035a4:	40020058 	.word	0x40020058
 80035a8:	40020070 	.word	0x40020070
 80035ac:	40020088 	.word	0x40020088
 80035b0:	400200a0 	.word	0x400200a0
 80035b4:	400200b8 	.word	0x400200b8
 80035b8:	40020410 	.word	0x40020410
 80035bc:	40020428 	.word	0x40020428
 80035c0:	40020440 	.word	0x40020440
 80035c4:	40020458 	.word	0x40020458
 80035c8:	40020470 	.word	0x40020470
 80035cc:	40020488 	.word	0x40020488
 80035d0:	400204a0 	.word	0x400204a0
 80035d4:	400204b8 	.word	0x400204b8
 80035d8:	58025408 	.word	0x58025408
 80035dc:	5802541c 	.word	0x5802541c
 80035e0:	58025430 	.word	0x58025430
 80035e4:	58025444 	.word	0x58025444
 80035e8:	58025458 	.word	0x58025458
 80035ec:	5802546c 	.word	0x5802546c
 80035f0:	58025480 	.word	0x58025480
 80035f4:	58025494 	.word	0x58025494
 80035f8:	2300      	movs	r3, #0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800360c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6d      	ldr	r2, [pc, #436]	; (80037c8 <HAL_DMA_Abort+0x444>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d04a      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a6b      	ldr	r2, [pc, #428]	; (80037cc <HAL_DMA_Abort+0x448>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d045      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a6a      	ldr	r2, [pc, #424]	; (80037d0 <HAL_DMA_Abort+0x44c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d040      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a68      	ldr	r2, [pc, #416]	; (80037d4 <HAL_DMA_Abort+0x450>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d03b      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a67      	ldr	r2, [pc, #412]	; (80037d8 <HAL_DMA_Abort+0x454>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d036      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a65      	ldr	r2, [pc, #404]	; (80037dc <HAL_DMA_Abort+0x458>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d031      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a64      	ldr	r2, [pc, #400]	; (80037e0 <HAL_DMA_Abort+0x45c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d02c      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a62      	ldr	r2, [pc, #392]	; (80037e4 <HAL_DMA_Abort+0x460>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d027      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a61      	ldr	r2, [pc, #388]	; (80037e8 <HAL_DMA_Abort+0x464>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d022      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a5f      	ldr	r2, [pc, #380]	; (80037ec <HAL_DMA_Abort+0x468>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01d      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a5e      	ldr	r2, [pc, #376]	; (80037f0 <HAL_DMA_Abort+0x46c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a5c      	ldr	r2, [pc, #368]	; (80037f4 <HAL_DMA_Abort+0x470>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a5b      	ldr	r2, [pc, #364]	; (80037f8 <HAL_DMA_Abort+0x474>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a59      	ldr	r2, [pc, #356]	; (80037fc <HAL_DMA_Abort+0x478>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a58      	ldr	r2, [pc, #352]	; (8003800 <HAL_DMA_Abort+0x47c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_DMA_Abort+0x32a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a56      	ldr	r2, [pc, #344]	; (8003804 <HAL_DMA_Abort+0x480>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d108      	bne.n	80036c0 <HAL_DMA_Abort+0x33c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e007      	b.n	80036d0 <HAL_DMA_Abort+0x34c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80036d0:	e013      	b.n	80036fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036d2:	f7fe ff65 	bl	80025a0 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b05      	cmp	r3, #5
 80036de:	d90c      	bls.n	80036fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2203      	movs	r2, #3
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e12d      	b.n	8003956 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e5      	bne.n	80036d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <HAL_DMA_Abort+0x444>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d04a      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <HAL_DMA_Abort+0x448>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d045      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <HAL_DMA_Abort+0x44c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d040      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <HAL_DMA_Abort+0x450>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d03b      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <HAL_DMA_Abort+0x454>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d036      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a27      	ldr	r2, [pc, #156]	; (80037dc <HAL_DMA_Abort+0x458>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d031      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_DMA_Abort+0x45c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d02c      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <HAL_DMA_Abort+0x460>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d027      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <HAL_DMA_Abort+0x464>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d022      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_DMA_Abort+0x468>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01d      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a20      	ldr	r2, [pc, #128]	; (80037f0 <HAL_DMA_Abort+0x46c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d018      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <HAL_DMA_Abort+0x470>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_DMA_Abort+0x474>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00e      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1b      	ldr	r2, [pc, #108]	; (80037fc <HAL_DMA_Abort+0x478>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d009      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <HAL_DMA_Abort+0x47c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_DMA_Abort+0x422>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a18      	ldr	r2, [pc, #96]	; (8003804 <HAL_DMA_Abort+0x480>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d101      	bne.n	80037aa <HAL_DMA_Abort+0x426>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_DMA_Abort+0x428>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d02b      	beq.n	8003808 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	223f      	movs	r2, #63	; 0x3f
 80037c0:	409a      	lsls	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	e02a      	b.n	800381e <HAL_DMA_Abort+0x49a>
 80037c8:	40020010 	.word	0x40020010
 80037cc:	40020028 	.word	0x40020028
 80037d0:	40020040 	.word	0x40020040
 80037d4:	40020058 	.word	0x40020058
 80037d8:	40020070 	.word	0x40020070
 80037dc:	40020088 	.word	0x40020088
 80037e0:	400200a0 	.word	0x400200a0
 80037e4:	400200b8 	.word	0x400200b8
 80037e8:	40020410 	.word	0x40020410
 80037ec:	40020428 	.word	0x40020428
 80037f0:	40020440 	.word	0x40020440
 80037f4:	40020458 	.word	0x40020458
 80037f8:	40020470 	.word	0x40020470
 80037fc:	40020488 	.word	0x40020488
 8003800:	400204a0 	.word	0x400204a0
 8003804:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2201      	movs	r2, #1
 8003818:	409a      	lsls	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a4f      	ldr	r2, [pc, #316]	; (8003960 <HAL_DMA_Abort+0x5dc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d072      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a4d      	ldr	r2, [pc, #308]	; (8003964 <HAL_DMA_Abort+0x5e0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d06d      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a4c      	ldr	r2, [pc, #304]	; (8003968 <HAL_DMA_Abort+0x5e4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d068      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a4a      	ldr	r2, [pc, #296]	; (800396c <HAL_DMA_Abort+0x5e8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d063      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a49      	ldr	r2, [pc, #292]	; (8003970 <HAL_DMA_Abort+0x5ec>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d05e      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a47      	ldr	r2, [pc, #284]	; (8003974 <HAL_DMA_Abort+0x5f0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d059      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a46      	ldr	r2, [pc, #280]	; (8003978 <HAL_DMA_Abort+0x5f4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d054      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a44      	ldr	r2, [pc, #272]	; (800397c <HAL_DMA_Abort+0x5f8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d04f      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a43      	ldr	r2, [pc, #268]	; (8003980 <HAL_DMA_Abort+0x5fc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d04a      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a41      	ldr	r2, [pc, #260]	; (8003984 <HAL_DMA_Abort+0x600>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d045      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a40      	ldr	r2, [pc, #256]	; (8003988 <HAL_DMA_Abort+0x604>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d040      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a3e      	ldr	r2, [pc, #248]	; (800398c <HAL_DMA_Abort+0x608>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d03b      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a3d      	ldr	r2, [pc, #244]	; (8003990 <HAL_DMA_Abort+0x60c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d036      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <HAL_DMA_Abort+0x610>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d031      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a3a      	ldr	r2, [pc, #232]	; (8003998 <HAL_DMA_Abort+0x614>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d02c      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a38      	ldr	r2, [pc, #224]	; (800399c <HAL_DMA_Abort+0x618>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d027      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a37      	ldr	r2, [pc, #220]	; (80039a0 <HAL_DMA_Abort+0x61c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a35      	ldr	r2, [pc, #212]	; (80039a4 <HAL_DMA_Abort+0x620>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01d      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a34      	ldr	r2, [pc, #208]	; (80039a8 <HAL_DMA_Abort+0x624>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a32      	ldr	r2, [pc, #200]	; (80039ac <HAL_DMA_Abort+0x628>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a31      	ldr	r2, [pc, #196]	; (80039b0 <HAL_DMA_Abort+0x62c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2f      	ldr	r2, [pc, #188]	; (80039b4 <HAL_DMA_Abort+0x630>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2e      	ldr	r2, [pc, #184]	; (80039b8 <HAL_DMA_Abort+0x634>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_DMA_Abort+0x58a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2c      	ldr	r2, [pc, #176]	; (80039bc <HAL_DMA_Abort+0x638>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_DMA_Abort+0x58e>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_DMA_Abort+0x590>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d015      	beq.n	8003944 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003920:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003938:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003942:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40020010 	.word	0x40020010
 8003964:	40020028 	.word	0x40020028
 8003968:	40020040 	.word	0x40020040
 800396c:	40020058 	.word	0x40020058
 8003970:	40020070 	.word	0x40020070
 8003974:	40020088 	.word	0x40020088
 8003978:	400200a0 	.word	0x400200a0
 800397c:	400200b8 	.word	0x400200b8
 8003980:	40020410 	.word	0x40020410
 8003984:	40020428 	.word	0x40020428
 8003988:	40020440 	.word	0x40020440
 800398c:	40020458 	.word	0x40020458
 8003990:	40020470 	.word	0x40020470
 8003994:	40020488 	.word	0x40020488
 8003998:	400204a0 	.word	0x400204a0
 800399c:	400204b8 	.word	0x400204b8
 80039a0:	58025408 	.word	0x58025408
 80039a4:	5802541c 	.word	0x5802541c
 80039a8:	58025430 	.word	0x58025430
 80039ac:	58025444 	.word	0x58025444
 80039b0:	58025458 	.word	0x58025458
 80039b4:	5802546c 	.word	0x5802546c
 80039b8:	58025480 	.word	0x58025480
 80039bc:	58025494 	.word	0x58025494

080039c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e237      	b.n	8003e42 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d004      	beq.n	80039e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e22c      	b.n	8003e42 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a5c      	ldr	r2, [pc, #368]	; (8003b60 <HAL_DMA_Abort_IT+0x1a0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d04a      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5b      	ldr	r2, [pc, #364]	; (8003b64 <HAL_DMA_Abort_IT+0x1a4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d045      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a59      	ldr	r2, [pc, #356]	; (8003b68 <HAL_DMA_Abort_IT+0x1a8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d040      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a58      	ldr	r2, [pc, #352]	; (8003b6c <HAL_DMA_Abort_IT+0x1ac>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d03b      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a56      	ldr	r2, [pc, #344]	; (8003b70 <HAL_DMA_Abort_IT+0x1b0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d036      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a55      	ldr	r2, [pc, #340]	; (8003b74 <HAL_DMA_Abort_IT+0x1b4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d031      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a53      	ldr	r2, [pc, #332]	; (8003b78 <HAL_DMA_Abort_IT+0x1b8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d02c      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_DMA_Abort_IT+0x1bc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d027      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a50      	ldr	r2, [pc, #320]	; (8003b80 <HAL_DMA_Abort_IT+0x1c0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d022      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a4f      	ldr	r2, [pc, #316]	; (8003b84 <HAL_DMA_Abort_IT+0x1c4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d01d      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a4d      	ldr	r2, [pc, #308]	; (8003b88 <HAL_DMA_Abort_IT+0x1c8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d018      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a4c      	ldr	r2, [pc, #304]	; (8003b8c <HAL_DMA_Abort_IT+0x1cc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d013      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a4a      	ldr	r2, [pc, #296]	; (8003b90 <HAL_DMA_Abort_IT+0x1d0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00e      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a49      	ldr	r2, [pc, #292]	; (8003b94 <HAL_DMA_Abort_IT+0x1d4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d009      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a47      	ldr	r2, [pc, #284]	; (8003b98 <HAL_DMA_Abort_IT+0x1d8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xc8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a46      	ldr	r2, [pc, #280]	; (8003b9c <HAL_DMA_Abort_IT+0x1dc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA_Abort_IT+0xcc>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <HAL_DMA_Abort_IT+0xce>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8086 	beq.w	8003ba0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2f      	ldr	r2, [pc, #188]	; (8003b60 <HAL_DMA_Abort_IT+0x1a0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d04a      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2e      	ldr	r2, [pc, #184]	; (8003b64 <HAL_DMA_Abort_IT+0x1a4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d045      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <HAL_DMA_Abort_IT+0x1a8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d040      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <HAL_DMA_Abort_IT+0x1ac>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d03b      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <HAL_DMA_Abort_IT+0x1b0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d036      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a28      	ldr	r2, [pc, #160]	; (8003b74 <HAL_DMA_Abort_IT+0x1b4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d031      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <HAL_DMA_Abort_IT+0x1b8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d02c      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <HAL_DMA_Abort_IT+0x1bc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d027      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a23      	ldr	r2, [pc, #140]	; (8003b80 <HAL_DMA_Abort_IT+0x1c0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d022      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <HAL_DMA_Abort_IT+0x1c4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d01d      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a20      	ldr	r2, [pc, #128]	; (8003b88 <HAL_DMA_Abort_IT+0x1c8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <HAL_DMA_Abort_IT+0x1cc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_DMA_Abort_IT+0x1d0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00e      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <HAL_DMA_Abort_IT+0x1d4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <HAL_DMA_Abort_IT+0x1d8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x17c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_DMA_Abort_IT+0x1dc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <HAL_DMA_Abort_IT+0x18e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e178      	b.n	8003e40 <HAL_DMA_Abort_IT+0x480>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e16f      	b.n	8003e40 <HAL_DMA_Abort_IT+0x480>
 8003b60:	40020010 	.word	0x40020010
 8003b64:	40020028 	.word	0x40020028
 8003b68:	40020040 	.word	0x40020040
 8003b6c:	40020058 	.word	0x40020058
 8003b70:	40020070 	.word	0x40020070
 8003b74:	40020088 	.word	0x40020088
 8003b78:	400200a0 	.word	0x400200a0
 8003b7c:	400200b8 	.word	0x400200b8
 8003b80:	40020410 	.word	0x40020410
 8003b84:	40020428 	.word	0x40020428
 8003b88:	40020440 	.word	0x40020440
 8003b8c:	40020458 	.word	0x40020458
 8003b90:	40020470 	.word	0x40020470
 8003b94:	40020488 	.word	0x40020488
 8003b98:	400204a0 	.word	0x400204a0
 8003b9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 020e 	bic.w	r2, r2, #14
 8003bae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6c      	ldr	r2, [pc, #432]	; (8003d68 <HAL_DMA_Abort_IT+0x3a8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d04a      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6b      	ldr	r2, [pc, #428]	; (8003d6c <HAL_DMA_Abort_IT+0x3ac>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d045      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a69      	ldr	r2, [pc, #420]	; (8003d70 <HAL_DMA_Abort_IT+0x3b0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d040      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a68      	ldr	r2, [pc, #416]	; (8003d74 <HAL_DMA_Abort_IT+0x3b4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d03b      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a66      	ldr	r2, [pc, #408]	; (8003d78 <HAL_DMA_Abort_IT+0x3b8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d036      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a65      	ldr	r2, [pc, #404]	; (8003d7c <HAL_DMA_Abort_IT+0x3bc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d031      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a63      	ldr	r2, [pc, #396]	; (8003d80 <HAL_DMA_Abort_IT+0x3c0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d02c      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a62      	ldr	r2, [pc, #392]	; (8003d84 <HAL_DMA_Abort_IT+0x3c4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d027      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a60      	ldr	r2, [pc, #384]	; (8003d88 <HAL_DMA_Abort_IT+0x3c8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d022      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a5f      	ldr	r2, [pc, #380]	; (8003d8c <HAL_DMA_Abort_IT+0x3cc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d01d      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a5d      	ldr	r2, [pc, #372]	; (8003d90 <HAL_DMA_Abort_IT+0x3d0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d018      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a5c      	ldr	r2, [pc, #368]	; (8003d94 <HAL_DMA_Abort_IT+0x3d4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d013      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a5a      	ldr	r2, [pc, #360]	; (8003d98 <HAL_DMA_Abort_IT+0x3d8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00e      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a59      	ldr	r2, [pc, #356]	; (8003d9c <HAL_DMA_Abort_IT+0x3dc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d009      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a57      	ldr	r2, [pc, #348]	; (8003da0 <HAL_DMA_Abort_IT+0x3e0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x290>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a56      	ldr	r2, [pc, #344]	; (8003da4 <HAL_DMA_Abort_IT+0x3e4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d108      	bne.n	8003c62 <HAL_DMA_Abort_IT+0x2a2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e007      	b.n	8003c72 <HAL_DMA_Abort_IT+0x2b2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a3c      	ldr	r2, [pc, #240]	; (8003d68 <HAL_DMA_Abort_IT+0x3a8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d072      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3a      	ldr	r2, [pc, #232]	; (8003d6c <HAL_DMA_Abort_IT+0x3ac>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d06d      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a39      	ldr	r2, [pc, #228]	; (8003d70 <HAL_DMA_Abort_IT+0x3b0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d068      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a37      	ldr	r2, [pc, #220]	; (8003d74 <HAL_DMA_Abort_IT+0x3b4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d063      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a36      	ldr	r2, [pc, #216]	; (8003d78 <HAL_DMA_Abort_IT+0x3b8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d05e      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a34      	ldr	r2, [pc, #208]	; (8003d7c <HAL_DMA_Abort_IT+0x3bc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d059      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a33      	ldr	r2, [pc, #204]	; (8003d80 <HAL_DMA_Abort_IT+0x3c0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d054      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a31      	ldr	r2, [pc, #196]	; (8003d84 <HAL_DMA_Abort_IT+0x3c4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d04f      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a30      	ldr	r2, [pc, #192]	; (8003d88 <HAL_DMA_Abort_IT+0x3c8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d04a      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a2e      	ldr	r2, [pc, #184]	; (8003d8c <HAL_DMA_Abort_IT+0x3cc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d045      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2d      	ldr	r2, [pc, #180]	; (8003d90 <HAL_DMA_Abort_IT+0x3d0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d040      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a2b      	ldr	r2, [pc, #172]	; (8003d94 <HAL_DMA_Abort_IT+0x3d4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d03b      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2a      	ldr	r2, [pc, #168]	; (8003d98 <HAL_DMA_Abort_IT+0x3d8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d036      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a28      	ldr	r2, [pc, #160]	; (8003d9c <HAL_DMA_Abort_IT+0x3dc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d031      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a27      	ldr	r2, [pc, #156]	; (8003da0 <HAL_DMA_Abort_IT+0x3e0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d02c      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a25      	ldr	r2, [pc, #148]	; (8003da4 <HAL_DMA_Abort_IT+0x3e4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d027      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a24      	ldr	r2, [pc, #144]	; (8003da8 <HAL_DMA_Abort_IT+0x3e8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a22      	ldr	r2, [pc, #136]	; (8003dac <HAL_DMA_Abort_IT+0x3ec>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a21      	ldr	r2, [pc, #132]	; (8003db0 <HAL_DMA_Abort_IT+0x3f0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d018      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <HAL_DMA_Abort_IT+0x3f4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_DMA_Abort_IT+0x3f8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <HAL_DMA_Abort_IT+0x3fc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <HAL_DMA_Abort_IT+0x400>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x3a2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <HAL_DMA_Abort_IT+0x404>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d132      	bne.n	8003dc8 <HAL_DMA_Abort_IT+0x408>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e031      	b.n	8003dca <HAL_DMA_Abort_IT+0x40a>
 8003d66:	bf00      	nop
 8003d68:	40020010 	.word	0x40020010
 8003d6c:	40020028 	.word	0x40020028
 8003d70:	40020040 	.word	0x40020040
 8003d74:	40020058 	.word	0x40020058
 8003d78:	40020070 	.word	0x40020070
 8003d7c:	40020088 	.word	0x40020088
 8003d80:	400200a0 	.word	0x400200a0
 8003d84:	400200b8 	.word	0x400200b8
 8003d88:	40020410 	.word	0x40020410
 8003d8c:	40020428 	.word	0x40020428
 8003d90:	40020440 	.word	0x40020440
 8003d94:	40020458 	.word	0x40020458
 8003d98:	40020470 	.word	0x40020470
 8003d9c:	40020488 	.word	0x40020488
 8003da0:	400204a0 	.word	0x400204a0
 8003da4:	400204b8 	.word	0x400204b8
 8003da8:	58025408 	.word	0x58025408
 8003dac:	5802541c 	.word	0x5802541c
 8003db0:	58025430 	.word	0x58025430
 8003db4:	58025444 	.word	0x58025444
 8003db8:	58025458 	.word	0x58025458
 8003dbc:	5802546c 	.word	0x5802546c
 8003dc0:	58025480 	.word	0x58025480
 8003dc4:	58025494 	.word	0x58025494
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d028      	beq.n	8003e20 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ddc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2201      	movs	r2, #1
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003dfc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00c      	beq.n	8003e20 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop

08003e4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e58:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <HAL_DMA_IRQHandler+0x1ac>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a67      	ldr	r2, [pc, #412]	; (8003ffc <HAL_DMA_IRQHandler+0x1b0>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	0a9b      	lsrs	r3, r3, #10
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a5f      	ldr	r2, [pc, #380]	; (8004000 <HAL_DMA_IRQHandler+0x1b4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d04a      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5d      	ldr	r2, [pc, #372]	; (8004004 <HAL_DMA_IRQHandler+0x1b8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d045      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a5c      	ldr	r2, [pc, #368]	; (8004008 <HAL_DMA_IRQHandler+0x1bc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d040      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5a      	ldr	r2, [pc, #360]	; (800400c <HAL_DMA_IRQHandler+0x1c0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d03b      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a59      	ldr	r2, [pc, #356]	; (8004010 <HAL_DMA_IRQHandler+0x1c4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d036      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a57      	ldr	r2, [pc, #348]	; (8004014 <HAL_DMA_IRQHandler+0x1c8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d031      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a56      	ldr	r2, [pc, #344]	; (8004018 <HAL_DMA_IRQHandler+0x1cc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d02c      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a54      	ldr	r2, [pc, #336]	; (800401c <HAL_DMA_IRQHandler+0x1d0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d027      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a53      	ldr	r2, [pc, #332]	; (8004020 <HAL_DMA_IRQHandler+0x1d4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a51      	ldr	r2, [pc, #324]	; (8004024 <HAL_DMA_IRQHandler+0x1d8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01d      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a50      	ldr	r2, [pc, #320]	; (8004028 <HAL_DMA_IRQHandler+0x1dc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a4e      	ldr	r2, [pc, #312]	; (800402c <HAL_DMA_IRQHandler+0x1e0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_DMA_IRQHandler+0x1e4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a4b      	ldr	r2, [pc, #300]	; (8004034 <HAL_DMA_IRQHandler+0x1e8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a4a      	ldr	r2, [pc, #296]	; (8004038 <HAL_DMA_IRQHandler+0x1ec>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a48      	ldr	r2, [pc, #288]	; (800403c <HAL_DMA_IRQHandler+0x1f0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_DMA_IRQHandler+0xd6>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_DMA_IRQHandler+0xd8>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 842b 	beq.w	8004780 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2208      	movs	r2, #8
 8003f34:	409a      	lsls	r2, r3
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80a2 	beq.w	8004084 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a2e      	ldr	r2, [pc, #184]	; (8004000 <HAL_DMA_IRQHandler+0x1b4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d04a      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2d      	ldr	r2, [pc, #180]	; (8004004 <HAL_DMA_IRQHandler+0x1b8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d045      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2b      	ldr	r2, [pc, #172]	; (8004008 <HAL_DMA_IRQHandler+0x1bc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d040      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2a      	ldr	r2, [pc, #168]	; (800400c <HAL_DMA_IRQHandler+0x1c0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d03b      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a28      	ldr	r2, [pc, #160]	; (8004010 <HAL_DMA_IRQHandler+0x1c4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d036      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a27      	ldr	r2, [pc, #156]	; (8004014 <HAL_DMA_IRQHandler+0x1c8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d031      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a25      	ldr	r2, [pc, #148]	; (8004018 <HAL_DMA_IRQHandler+0x1cc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02c      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a24      	ldr	r2, [pc, #144]	; (800401c <HAL_DMA_IRQHandler+0x1d0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d027      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a22      	ldr	r2, [pc, #136]	; (8004020 <HAL_DMA_IRQHandler+0x1d4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d022      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a21      	ldr	r2, [pc, #132]	; (8004024 <HAL_DMA_IRQHandler+0x1d8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d01d      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_DMA_IRQHandler+0x1dc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1e      	ldr	r2, [pc, #120]	; (800402c <HAL_DMA_IRQHandler+0x1e0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <HAL_DMA_IRQHandler+0x1e4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1b      	ldr	r2, [pc, #108]	; (8004034 <HAL_DMA_IRQHandler+0x1e8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_DMA_IRQHandler+0x1ec>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a18      	ldr	r2, [pc, #96]	; (800403c <HAL_DMA_IRQHandler+0x1f0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d12f      	bne.n	8004040 <HAL_DMA_IRQHandler+0x1f4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	e02e      	b.n	8004054 <HAL_DMA_IRQHandler+0x208>
 8003ff6:	bf00      	nop
 8003ff8:	24000004 	.word	0x24000004
 8003ffc:	1b4e81b5 	.word	0x1b4e81b5
 8004000:	40020010 	.word	0x40020010
 8004004:	40020028 	.word	0x40020028
 8004008:	40020040 	.word	0x40020040
 800400c:	40020058 	.word	0x40020058
 8004010:	40020070 	.word	0x40020070
 8004014:	40020088 	.word	0x40020088
 8004018:	400200a0 	.word	0x400200a0
 800401c:	400200b8 	.word	0x400200b8
 8004020:	40020410 	.word	0x40020410
 8004024:	40020428 	.word	0x40020428
 8004028:	40020440 	.word	0x40020440
 800402c:	40020458 	.word	0x40020458
 8004030:	40020470 	.word	0x40020470
 8004034:	40020488 	.word	0x40020488
 8004038:	400204a0 	.word	0x400204a0
 800403c:	400204b8 	.word	0x400204b8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0204 	bic.w	r2, r2, #4
 8004066:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2208      	movs	r2, #8
 8004072:	409a      	lsls	r2, r3
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	f043 0201 	orr.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d06e      	beq.n	8004178 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a69      	ldr	r2, [pc, #420]	; (8004244 <HAL_DMA_IRQHandler+0x3f8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d04a      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_DMA_IRQHandler+0x3fc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d045      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a66      	ldr	r2, [pc, #408]	; (800424c <HAL_DMA_IRQHandler+0x400>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d040      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a64      	ldr	r2, [pc, #400]	; (8004250 <HAL_DMA_IRQHandler+0x404>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d03b      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a63      	ldr	r2, [pc, #396]	; (8004254 <HAL_DMA_IRQHandler+0x408>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d036      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a61      	ldr	r2, [pc, #388]	; (8004258 <HAL_DMA_IRQHandler+0x40c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d031      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a60      	ldr	r2, [pc, #384]	; (800425c <HAL_DMA_IRQHandler+0x410>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d02c      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a5e      	ldr	r2, [pc, #376]	; (8004260 <HAL_DMA_IRQHandler+0x414>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d027      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5d      	ldr	r2, [pc, #372]	; (8004264 <HAL_DMA_IRQHandler+0x418>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d022      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a5b      	ldr	r2, [pc, #364]	; (8004268 <HAL_DMA_IRQHandler+0x41c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d01d      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a5a      	ldr	r2, [pc, #360]	; (800426c <HAL_DMA_IRQHandler+0x420>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d018      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a58      	ldr	r2, [pc, #352]	; (8004270 <HAL_DMA_IRQHandler+0x424>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a57      	ldr	r2, [pc, #348]	; (8004274 <HAL_DMA_IRQHandler+0x428>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00e      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a55      	ldr	r2, [pc, #340]	; (8004278 <HAL_DMA_IRQHandler+0x42c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a54      	ldr	r2, [pc, #336]	; (800427c <HAL_DMA_IRQHandler+0x430>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a52      	ldr	r2, [pc, #328]	; (8004280 <HAL_DMA_IRQHandler+0x434>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10a      	bne.n	8004150 <HAL_DMA_IRQHandler+0x304>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e003      	b.n	8004158 <HAL_DMA_IRQHandler+0x30c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	2201      	movs	r2, #1
 8004166:	409a      	lsls	r2, r3
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	f043 0202 	orr.w	r2, r3, #2
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2204      	movs	r2, #4
 8004182:	409a      	lsls	r2, r3
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 808f 	beq.w	80042ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <HAL_DMA_IRQHandler+0x3f8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d04a      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <HAL_DMA_IRQHandler+0x3fc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d045      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a29      	ldr	r2, [pc, #164]	; (800424c <HAL_DMA_IRQHandler+0x400>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d040      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a27      	ldr	r2, [pc, #156]	; (8004250 <HAL_DMA_IRQHandler+0x404>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d03b      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a26      	ldr	r2, [pc, #152]	; (8004254 <HAL_DMA_IRQHandler+0x408>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d036      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a24      	ldr	r2, [pc, #144]	; (8004258 <HAL_DMA_IRQHandler+0x40c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d031      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a23      	ldr	r2, [pc, #140]	; (800425c <HAL_DMA_IRQHandler+0x410>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d02c      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a21      	ldr	r2, [pc, #132]	; (8004260 <HAL_DMA_IRQHandler+0x414>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d027      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a20      	ldr	r2, [pc, #128]	; (8004264 <HAL_DMA_IRQHandler+0x418>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d022      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_DMA_IRQHandler+0x41c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01d      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1d      	ldr	r2, [pc, #116]	; (800426c <HAL_DMA_IRQHandler+0x420>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d018      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_DMA_IRQHandler+0x424>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <HAL_DMA_IRQHandler+0x428>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_DMA_IRQHandler+0x42c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_DMA_IRQHandler+0x430>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a15      	ldr	r2, [pc, #84]	; (8004280 <HAL_DMA_IRQHandler+0x434>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d12a      	bne.n	8004284 <HAL_DMA_IRQHandler+0x438>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e023      	b.n	800428c <HAL_DMA_IRQHandler+0x440>
 8004244:	40020010 	.word	0x40020010
 8004248:	40020028 	.word	0x40020028
 800424c:	40020040 	.word	0x40020040
 8004250:	40020058 	.word	0x40020058
 8004254:	40020070 	.word	0x40020070
 8004258:	40020088 	.word	0x40020088
 800425c:	400200a0 	.word	0x400200a0
 8004260:	400200b8 	.word	0x400200b8
 8004264:	40020410 	.word	0x40020410
 8004268:	40020428 	.word	0x40020428
 800426c:	40020440 	.word	0x40020440
 8004270:	40020458 	.word	0x40020458
 8004274:	40020470 	.word	0x40020470
 8004278:	40020488 	.word	0x40020488
 800427c:	400204a0 	.word	0x400204a0
 8004280:	400204b8 	.word	0x400204b8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00d      	beq.n	80042ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	2204      	movs	r2, #4
 800429a:	409a      	lsls	r2, r3
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0204 	orr.w	r2, r3, #4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2210      	movs	r2, #16
 80042b6:	409a      	lsls	r2, r3
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80a6 	beq.w	800440e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a85      	ldr	r2, [pc, #532]	; (80044dc <HAL_DMA_IRQHandler+0x690>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d04a      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a83      	ldr	r2, [pc, #524]	; (80044e0 <HAL_DMA_IRQHandler+0x694>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d045      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a82      	ldr	r2, [pc, #520]	; (80044e4 <HAL_DMA_IRQHandler+0x698>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d040      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a80      	ldr	r2, [pc, #512]	; (80044e8 <HAL_DMA_IRQHandler+0x69c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d03b      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7f      	ldr	r2, [pc, #508]	; (80044ec <HAL_DMA_IRQHandler+0x6a0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d036      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7d      	ldr	r2, [pc, #500]	; (80044f0 <HAL_DMA_IRQHandler+0x6a4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d031      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a7c      	ldr	r2, [pc, #496]	; (80044f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d02c      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a7a      	ldr	r2, [pc, #488]	; (80044f8 <HAL_DMA_IRQHandler+0x6ac>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d027      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a79      	ldr	r2, [pc, #484]	; (80044fc <HAL_DMA_IRQHandler+0x6b0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a77      	ldr	r2, [pc, #476]	; (8004500 <HAL_DMA_IRQHandler+0x6b4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01d      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a76      	ldr	r2, [pc, #472]	; (8004504 <HAL_DMA_IRQHandler+0x6b8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a74      	ldr	r2, [pc, #464]	; (8004508 <HAL_DMA_IRQHandler+0x6bc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a73      	ldr	r2, [pc, #460]	; (800450c <HAL_DMA_IRQHandler+0x6c0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a71      	ldr	r2, [pc, #452]	; (8004510 <HAL_DMA_IRQHandler+0x6c4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a70      	ldr	r2, [pc, #448]	; (8004514 <HAL_DMA_IRQHandler+0x6c8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6e      	ldr	r2, [pc, #440]	; (8004518 <HAL_DMA_IRQHandler+0x6cc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10a      	bne.n	8004378 <HAL_DMA_IRQHandler+0x52c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e009      	b.n	800438c <HAL_DMA_IRQHandler+0x540>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d03e      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2210      	movs	r2, #16
 800439a:	409a      	lsls	r2, r3
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d108      	bne.n	80043ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d024      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
 80043cc:	e01f      	b.n	800440e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01b      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
 80043de:	e016      	b.n	800440e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d107      	bne.n	80043fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0208 	bic.w	r2, r2, #8
 80043fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2220      	movs	r2, #32
 8004418:	409a      	lsls	r2, r3
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8110 	beq.w	8004644 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <HAL_DMA_IRQHandler+0x690>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <HAL_DMA_IRQHandler+0x694>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d045      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a29      	ldr	r2, [pc, #164]	; (80044e4 <HAL_DMA_IRQHandler+0x698>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d040      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <HAL_DMA_IRQHandler+0x69c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d03b      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a26      	ldr	r2, [pc, #152]	; (80044ec <HAL_DMA_IRQHandler+0x6a0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d036      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a25      	ldr	r2, [pc, #148]	; (80044f0 <HAL_DMA_IRQHandler+0x6a4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d031      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a22      	ldr	r2, [pc, #136]	; (80044f8 <HAL_DMA_IRQHandler+0x6ac>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d027      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <HAL_DMA_IRQHandler+0x6b0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_DMA_IRQHandler+0x6b4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d01d      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <HAL_DMA_IRQHandler+0x6b8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <HAL_DMA_IRQHandler+0x6bc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1a      	ldr	r2, [pc, #104]	; (800450c <HAL_DMA_IRQHandler+0x6c0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a19      	ldr	r2, [pc, #100]	; (8004510 <HAL_DMA_IRQHandler+0x6c4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a17      	ldr	r2, [pc, #92]	; (8004514 <HAL_DMA_IRQHandler+0x6c8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a16      	ldr	r2, [pc, #88]	; (8004518 <HAL_DMA_IRQHandler+0x6cc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d12b      	bne.n	800451c <HAL_DMA_IRQHandler+0x6d0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e02a      	b.n	8004530 <HAL_DMA_IRQHandler+0x6e4>
 80044da:	bf00      	nop
 80044dc:	40020010 	.word	0x40020010
 80044e0:	40020028 	.word	0x40020028
 80044e4:	40020040 	.word	0x40020040
 80044e8:	40020058 	.word	0x40020058
 80044ec:	40020070 	.word	0x40020070
 80044f0:	40020088 	.word	0x40020088
 80044f4:	400200a0 	.word	0x400200a0
 80044f8:	400200b8 	.word	0x400200b8
 80044fc:	40020410 	.word	0x40020410
 8004500:	40020428 	.word	0x40020428
 8004504:	40020440 	.word	0x40020440
 8004508:	40020458 	.word	0x40020458
 800450c:	40020470 	.word	0x40020470
 8004510:	40020488 	.word	0x40020488
 8004514:	400204a0 	.word	0x400204a0
 8004518:	400204b8 	.word	0x400204b8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	bf14      	ite	ne
 800452a:	2301      	movne	r3, #1
 800452c:	2300      	moveq	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8087 	beq.w	8004644 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2220      	movs	r2, #32
 8004540:	409a      	lsls	r2, r3
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b04      	cmp	r3, #4
 8004550:	d139      	bne.n	80045c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0216 	bic.w	r2, r2, #22
 8004560:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004570:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <HAL_DMA_IRQHandler+0x736>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0208 	bic.w	r2, r2, #8
 8004590:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	223f      	movs	r2, #63	; 0x3f
 800459c:	409a      	lsls	r2, r3
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 834a 	beq.w	8004c50 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
          }
          return;
 80045c4:	e344      	b.n	8004c50 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d018      	beq.n	8004606 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02c      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
 80045f2:	e027      	b.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d023      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
 8004604:	e01e      	b.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10f      	bne.n	8004634 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0210 	bic.w	r2, r2, #16
 8004622:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8306 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8088 	beq.w	800476c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2204      	movs	r2, #4
 8004660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a7a      	ldr	r2, [pc, #488]	; (8004854 <HAL_DMA_IRQHandler+0xa08>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d04a      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a79      	ldr	r2, [pc, #484]	; (8004858 <HAL_DMA_IRQHandler+0xa0c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d045      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a77      	ldr	r2, [pc, #476]	; (800485c <HAL_DMA_IRQHandler+0xa10>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d040      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a76      	ldr	r2, [pc, #472]	; (8004860 <HAL_DMA_IRQHandler+0xa14>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d03b      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a74      	ldr	r2, [pc, #464]	; (8004864 <HAL_DMA_IRQHandler+0xa18>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d036      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a73      	ldr	r2, [pc, #460]	; (8004868 <HAL_DMA_IRQHandler+0xa1c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d031      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a71      	ldr	r2, [pc, #452]	; (800486c <HAL_DMA_IRQHandler+0xa20>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d02c      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a70      	ldr	r2, [pc, #448]	; (8004870 <HAL_DMA_IRQHandler+0xa24>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d027      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6e      	ldr	r2, [pc, #440]	; (8004874 <HAL_DMA_IRQHandler+0xa28>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d022      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6d      	ldr	r2, [pc, #436]	; (8004878 <HAL_DMA_IRQHandler+0xa2c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d01d      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6b      	ldr	r2, [pc, #428]	; (800487c <HAL_DMA_IRQHandler+0xa30>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6a      	ldr	r2, [pc, #424]	; (8004880 <HAL_DMA_IRQHandler+0xa34>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_DMA_IRQHandler+0xa38>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a67      	ldr	r2, [pc, #412]	; (8004888 <HAL_DMA_IRQHandler+0xa3c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a65      	ldr	r2, [pc, #404]	; (800488c <HAL_DMA_IRQHandler+0xa40>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a64      	ldr	r2, [pc, #400]	; (8004890 <HAL_DMA_IRQHandler+0xa44>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d108      	bne.n	8004716 <HAL_DMA_IRQHandler+0x8ca>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e007      	b.n	8004726 <HAL_DMA_IRQHandler+0x8da>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3301      	adds	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472e:	429a      	cmp	r2, r3
 8004730:	d307      	bcc.n	8004742 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f2      	bne.n	8004726 <HAL_DMA_IRQHandler+0x8da>
 8004740:	e000      	b.n	8004744 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004742:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d004      	beq.n	800475c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2203      	movs	r2, #3
 8004756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800475a:	e003      	b.n	8004764 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8272 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
 800477e:	e26c      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a43      	ldr	r2, [pc, #268]	; (8004894 <HAL_DMA_IRQHandler+0xa48>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d022      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a42      	ldr	r2, [pc, #264]	; (8004898 <HAL_DMA_IRQHandler+0xa4c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d01d      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a40      	ldr	r2, [pc, #256]	; (800489c <HAL_DMA_IRQHandler+0xa50>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d018      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a3f      	ldr	r2, [pc, #252]	; (80048a0 <HAL_DMA_IRQHandler+0xa54>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d013      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a3d      	ldr	r2, [pc, #244]	; (80048a4 <HAL_DMA_IRQHandler+0xa58>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a3c      	ldr	r2, [pc, #240]	; (80048a8 <HAL_DMA_IRQHandler+0xa5c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d009      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a3a      	ldr	r2, [pc, #232]	; (80048ac <HAL_DMA_IRQHandler+0xa60>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a39      	ldr	r2, [pc, #228]	; (80048b0 <HAL_DMA_IRQHandler+0xa64>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d101      	bne.n	80047d4 <HAL_DMA_IRQHandler+0x988>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_DMA_IRQHandler+0x98a>
 80047d4:	2300      	movs	r3, #0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 823f 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2204      	movs	r2, #4
 80047ee:	409a      	lsls	r2, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80cd 	beq.w	8004994 <HAL_DMA_IRQHandler+0xb48>
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80c7 	beq.w	8004994 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	2204      	movs	r2, #4
 8004810:	409a      	lsls	r2, r3
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d049      	beq.n	80048b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8210 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483c:	e20a      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8206 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004850:	e200      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe08>
 8004852:	bf00      	nop
 8004854:	40020010 	.word	0x40020010
 8004858:	40020028 	.word	0x40020028
 800485c:	40020040 	.word	0x40020040
 8004860:	40020058 	.word	0x40020058
 8004864:	40020070 	.word	0x40020070
 8004868:	40020088 	.word	0x40020088
 800486c:	400200a0 	.word	0x400200a0
 8004870:	400200b8 	.word	0x400200b8
 8004874:	40020410 	.word	0x40020410
 8004878:	40020428 	.word	0x40020428
 800487c:	40020440 	.word	0x40020440
 8004880:	40020458 	.word	0x40020458
 8004884:	40020470 	.word	0x40020470
 8004888:	40020488 	.word	0x40020488
 800488c:	400204a0 	.word	0x400204a0
 8004890:	400204b8 	.word	0x400204b8
 8004894:	58025408 	.word	0x58025408
 8004898:	5802541c 	.word	0x5802541c
 800489c:	58025430 	.word	0x58025430
 80048a0:	58025444 	.word	0x58025444
 80048a4:	58025458 	.word	0x58025458
 80048a8:	5802546c 	.word	0x5802546c
 80048ac:	58025480 	.word	0x58025480
 80048b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d160      	bne.n	8004980 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a7f      	ldr	r2, [pc, #508]	; (8004ac0 <HAL_DMA_IRQHandler+0xc74>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d04a      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a7d      	ldr	r2, [pc, #500]	; (8004ac4 <HAL_DMA_IRQHandler+0xc78>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d045      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7c      	ldr	r2, [pc, #496]	; (8004ac8 <HAL_DMA_IRQHandler+0xc7c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d040      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a7a      	ldr	r2, [pc, #488]	; (8004acc <HAL_DMA_IRQHandler+0xc80>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d03b      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a79      	ldr	r2, [pc, #484]	; (8004ad0 <HAL_DMA_IRQHandler+0xc84>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d036      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a77      	ldr	r2, [pc, #476]	; (8004ad4 <HAL_DMA_IRQHandler+0xc88>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d031      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a76      	ldr	r2, [pc, #472]	; (8004ad8 <HAL_DMA_IRQHandler+0xc8c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d02c      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a74      	ldr	r2, [pc, #464]	; (8004adc <HAL_DMA_IRQHandler+0xc90>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d027      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a73      	ldr	r2, [pc, #460]	; (8004ae0 <HAL_DMA_IRQHandler+0xc94>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d022      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a71      	ldr	r2, [pc, #452]	; (8004ae4 <HAL_DMA_IRQHandler+0xc98>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01d      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a70      	ldr	r2, [pc, #448]	; (8004ae8 <HAL_DMA_IRQHandler+0xc9c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d018      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a6e      	ldr	r2, [pc, #440]	; (8004aec <HAL_DMA_IRQHandler+0xca0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6d      	ldr	r2, [pc, #436]	; (8004af0 <HAL_DMA_IRQHandler+0xca4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00e      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a6b      	ldr	r2, [pc, #428]	; (8004af4 <HAL_DMA_IRQHandler+0xca8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a6a      	ldr	r2, [pc, #424]	; (8004af8 <HAL_DMA_IRQHandler+0xcac>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a68      	ldr	r2, [pc, #416]	; (8004afc <HAL_DMA_IRQHandler+0xcb0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d108      	bne.n	8004970 <HAL_DMA_IRQHandler+0xb24>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0208 	bic.w	r2, r2, #8
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	e007      	b.n	8004980 <HAL_DMA_IRQHandler+0xb34>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0204 	bic.w	r2, r2, #4
 800497e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8165 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004992:	e15f      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2202      	movs	r2, #2
 800499e:	409a      	lsls	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80c5 	beq.w	8004b34 <HAL_DMA_IRQHandler+0xce8>
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80bf 	beq.w	8004b34 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2202      	movs	r2, #2
 80049c0:	409a      	lsls	r2, r3
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d018      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 813a 	beq.w	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ec:	e134      	b.n	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8130 	beq.w	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a00:	e12a      	b.n	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f040 8089 	bne.w	8004b20 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2b      	ldr	r2, [pc, #172]	; (8004ac0 <HAL_DMA_IRQHandler+0xc74>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d04a      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <HAL_DMA_IRQHandler+0xc78>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d045      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a28      	ldr	r2, [pc, #160]	; (8004ac8 <HAL_DMA_IRQHandler+0xc7c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d040      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a26      	ldr	r2, [pc, #152]	; (8004acc <HAL_DMA_IRQHandler+0xc80>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d03b      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a25      	ldr	r2, [pc, #148]	; (8004ad0 <HAL_DMA_IRQHandler+0xc84>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d036      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a23      	ldr	r2, [pc, #140]	; (8004ad4 <HAL_DMA_IRQHandler+0xc88>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d031      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a22      	ldr	r2, [pc, #136]	; (8004ad8 <HAL_DMA_IRQHandler+0xc8c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d02c      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a20      	ldr	r2, [pc, #128]	; (8004adc <HAL_DMA_IRQHandler+0xc90>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d027      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <HAL_DMA_IRQHandler+0xc94>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d022      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <HAL_DMA_IRQHandler+0xc98>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01d      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1c      	ldr	r2, [pc, #112]	; (8004ae8 <HAL_DMA_IRQHandler+0xc9c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d018      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <HAL_DMA_IRQHandler+0xca0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <HAL_DMA_IRQHandler+0xca4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <HAL_DMA_IRQHandler+0xca8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <HAL_DMA_IRQHandler+0xcac>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_DMA_IRQHandler+0xc62>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a14      	ldr	r2, [pc, #80]	; (8004afc <HAL_DMA_IRQHandler+0xcb0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d128      	bne.n	8004b00 <HAL_DMA_IRQHandler+0xcb4>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0214 	bic.w	r2, r2, #20
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e027      	b.n	8004b10 <HAL_DMA_IRQHandler+0xcc4>
 8004ac0:	40020010 	.word	0x40020010
 8004ac4:	40020028 	.word	0x40020028
 8004ac8:	40020040 	.word	0x40020040
 8004acc:	40020058 	.word	0x40020058
 8004ad0:	40020070 	.word	0x40020070
 8004ad4:	40020088 	.word	0x40020088
 8004ad8:	400200a0 	.word	0x400200a0
 8004adc:	400200b8 	.word	0x400200b8
 8004ae0:	40020410 	.word	0x40020410
 8004ae4:	40020428 	.word	0x40020428
 8004ae8:	40020440 	.word	0x40020440
 8004aec:	40020458 	.word	0x40020458
 8004af0:	40020470 	.word	0x40020470
 8004af4:	40020488 	.word	0x40020488
 8004af8:	400204a0 	.word	0x400204a0
 8004afc:	400204b8 	.word	0x400204b8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 020a 	bic.w	r2, r2, #10
 8004b0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8097 	beq.w	8004c58 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b32:	e091      	b.n	8004c58 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8088 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8082 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a41      	ldr	r2, [pc, #260]	; (8004c60 <HAL_DMA_IRQHandler+0xe14>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d04a      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a3f      	ldr	r2, [pc, #252]	; (8004c64 <HAL_DMA_IRQHandler+0xe18>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d045      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a3e      	ldr	r2, [pc, #248]	; (8004c68 <HAL_DMA_IRQHandler+0xe1c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d040      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <HAL_DMA_IRQHandler+0xe20>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d03b      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a3b      	ldr	r2, [pc, #236]	; (8004c70 <HAL_DMA_IRQHandler+0xe24>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d036      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a39      	ldr	r2, [pc, #228]	; (8004c74 <HAL_DMA_IRQHandler+0xe28>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d031      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <HAL_DMA_IRQHandler+0xe2c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d02c      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a36      	ldr	r2, [pc, #216]	; (8004c7c <HAL_DMA_IRQHandler+0xe30>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d027      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a35      	ldr	r2, [pc, #212]	; (8004c80 <HAL_DMA_IRQHandler+0xe34>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d022      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a33      	ldr	r2, [pc, #204]	; (8004c84 <HAL_DMA_IRQHandler+0xe38>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01d      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a32      	ldr	r2, [pc, #200]	; (8004c88 <HAL_DMA_IRQHandler+0xe3c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d018      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <HAL_DMA_IRQHandler+0xe40>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	; (8004c90 <HAL_DMA_IRQHandler+0xe44>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <HAL_DMA_IRQHandler+0xe48>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d009      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <HAL_DMA_IRQHandler+0xe4c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d004      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	; (8004c9c <HAL_DMA_IRQHandler+0xe50>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d108      	bne.n	8004c08 <HAL_DMA_IRQHandler+0xdbc>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 021c 	bic.w	r2, r2, #28
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e007      	b.n	8004c18 <HAL_DMA_IRQHandler+0xdcc>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 020e 	bic.w	r2, r2, #14
 8004c16:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2201      	movs	r2, #1
 8004c22:	409a      	lsls	r2, r3
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
 8004c4e:	e004      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c50:	bf00      	nop
 8004c52:	e002      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c58:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c5a:	3728      	adds	r7, #40	; 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40020010 	.word	0x40020010
 8004c64:	40020028 	.word	0x40020028
 8004c68:	40020040 	.word	0x40020040
 8004c6c:	40020058 	.word	0x40020058
 8004c70:	40020070 	.word	0x40020070
 8004c74:	40020088 	.word	0x40020088
 8004c78:	400200a0 	.word	0x400200a0
 8004c7c:	400200b8 	.word	0x400200b8
 8004c80:	40020410 	.word	0x40020410
 8004c84:	40020428 	.word	0x40020428
 8004c88:	40020440 	.word	0x40020440
 8004c8c:	40020458 	.word	0x40020458
 8004c90:	40020470 	.word	0x40020470
 8004c94:	40020488 	.word	0x40020488
 8004c98:	400204a0 	.word	0x400204a0
 8004c9c:	400204b8 	.word	0x400204b8

08004ca0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a7f      	ldr	r2, [pc, #508]	; (8004ed4 <DMA_SetConfig+0x21c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d072      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a7d      	ldr	r2, [pc, #500]	; (8004ed8 <DMA_SetConfig+0x220>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d06d      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a7c      	ldr	r2, [pc, #496]	; (8004edc <DMA_SetConfig+0x224>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d068      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a7a      	ldr	r2, [pc, #488]	; (8004ee0 <DMA_SetConfig+0x228>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d063      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a79      	ldr	r2, [pc, #484]	; (8004ee4 <DMA_SetConfig+0x22c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d05e      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a77      	ldr	r2, [pc, #476]	; (8004ee8 <DMA_SetConfig+0x230>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d059      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a76      	ldr	r2, [pc, #472]	; (8004eec <DMA_SetConfig+0x234>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d054      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a74      	ldr	r2, [pc, #464]	; (8004ef0 <DMA_SetConfig+0x238>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d04f      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a73      	ldr	r2, [pc, #460]	; (8004ef4 <DMA_SetConfig+0x23c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d04a      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a71      	ldr	r2, [pc, #452]	; (8004ef8 <DMA_SetConfig+0x240>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d045      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a70      	ldr	r2, [pc, #448]	; (8004efc <DMA_SetConfig+0x244>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d040      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a6e      	ldr	r2, [pc, #440]	; (8004f00 <DMA_SetConfig+0x248>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d03b      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a6d      	ldr	r2, [pc, #436]	; (8004f04 <DMA_SetConfig+0x24c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d036      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a6b      	ldr	r2, [pc, #428]	; (8004f08 <DMA_SetConfig+0x250>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d031      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6a      	ldr	r2, [pc, #424]	; (8004f0c <DMA_SetConfig+0x254>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d02c      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a68      	ldr	r2, [pc, #416]	; (8004f10 <DMA_SetConfig+0x258>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d027      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a67      	ldr	r2, [pc, #412]	; (8004f14 <DMA_SetConfig+0x25c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d022      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a65      	ldr	r2, [pc, #404]	; (8004f18 <DMA_SetConfig+0x260>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01d      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a64      	ldr	r2, [pc, #400]	; (8004f1c <DMA_SetConfig+0x264>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d018      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a62      	ldr	r2, [pc, #392]	; (8004f20 <DMA_SetConfig+0x268>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a61      	ldr	r2, [pc, #388]	; (8004f24 <DMA_SetConfig+0x26c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00e      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a5f      	ldr	r2, [pc, #380]	; (8004f28 <DMA_SetConfig+0x270>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a5e      	ldr	r2, [pc, #376]	; (8004f2c <DMA_SetConfig+0x274>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <DMA_SetConfig+0x10a>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a5c      	ldr	r2, [pc, #368]	; (8004f30 <DMA_SetConfig+0x278>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d101      	bne.n	8004dc6 <DMA_SetConfig+0x10e>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <DMA_SetConfig+0x110>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004dd4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d004      	beq.n	8004de8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004de6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a39      	ldr	r2, [pc, #228]	; (8004ed4 <DMA_SetConfig+0x21c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d04a      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a38      	ldr	r2, [pc, #224]	; (8004ed8 <DMA_SetConfig+0x220>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d045      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a36      	ldr	r2, [pc, #216]	; (8004edc <DMA_SetConfig+0x224>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d040      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a35      	ldr	r2, [pc, #212]	; (8004ee0 <DMA_SetConfig+0x228>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d03b      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a33      	ldr	r2, [pc, #204]	; (8004ee4 <DMA_SetConfig+0x22c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d036      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a32      	ldr	r2, [pc, #200]	; (8004ee8 <DMA_SetConfig+0x230>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d031      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a30      	ldr	r2, [pc, #192]	; (8004eec <DMA_SetConfig+0x234>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d02c      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2f      	ldr	r2, [pc, #188]	; (8004ef0 <DMA_SetConfig+0x238>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d027      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <DMA_SetConfig+0x23c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d022      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <DMA_SetConfig+0x240>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d01d      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <DMA_SetConfig+0x244>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d018      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a29      	ldr	r2, [pc, #164]	; (8004f00 <DMA_SetConfig+0x248>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <DMA_SetConfig+0x24c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00e      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <DMA_SetConfig+0x250>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d009      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <DMA_SetConfig+0x254>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <DMA_SetConfig+0x1d0>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a23      	ldr	r2, [pc, #140]	; (8004f10 <DMA_SetConfig+0x258>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d101      	bne.n	8004e8c <DMA_SetConfig+0x1d4>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <DMA_SetConfig+0x1d6>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d059      	beq.n	8004f46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	223f      	movs	r2, #63	; 0x3f
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004eb0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b40      	cmp	r3, #64	; 0x40
 8004ec0:	d138      	bne.n	8004f34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ed2:	e086      	b.n	8004fe2 <DMA_SetConfig+0x32a>
 8004ed4:	40020010 	.word	0x40020010
 8004ed8:	40020028 	.word	0x40020028
 8004edc:	40020040 	.word	0x40020040
 8004ee0:	40020058 	.word	0x40020058
 8004ee4:	40020070 	.word	0x40020070
 8004ee8:	40020088 	.word	0x40020088
 8004eec:	400200a0 	.word	0x400200a0
 8004ef0:	400200b8 	.word	0x400200b8
 8004ef4:	40020410 	.word	0x40020410
 8004ef8:	40020428 	.word	0x40020428
 8004efc:	40020440 	.word	0x40020440
 8004f00:	40020458 	.word	0x40020458
 8004f04:	40020470 	.word	0x40020470
 8004f08:	40020488 	.word	0x40020488
 8004f0c:	400204a0 	.word	0x400204a0
 8004f10:	400204b8 	.word	0x400204b8
 8004f14:	58025408 	.word	0x58025408
 8004f18:	5802541c 	.word	0x5802541c
 8004f1c:	58025430 	.word	0x58025430
 8004f20:	58025444 	.word	0x58025444
 8004f24:	58025458 	.word	0x58025458
 8004f28:	5802546c 	.word	0x5802546c
 8004f2c:	58025480 	.word	0x58025480
 8004f30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	60da      	str	r2, [r3, #12]
}
 8004f44:	e04d      	b.n	8004fe2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a29      	ldr	r2, [pc, #164]	; (8004ff0 <DMA_SetConfig+0x338>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <DMA_SetConfig+0x2de>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a27      	ldr	r2, [pc, #156]	; (8004ff4 <DMA_SetConfig+0x33c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01d      	beq.n	8004f96 <DMA_SetConfig+0x2de>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <DMA_SetConfig+0x340>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d018      	beq.n	8004f96 <DMA_SetConfig+0x2de>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a24      	ldr	r2, [pc, #144]	; (8004ffc <DMA_SetConfig+0x344>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <DMA_SetConfig+0x2de>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a23      	ldr	r2, [pc, #140]	; (8005000 <DMA_SetConfig+0x348>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <DMA_SetConfig+0x2de>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a21      	ldr	r2, [pc, #132]	; (8005004 <DMA_SetConfig+0x34c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <DMA_SetConfig+0x2de>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a20      	ldr	r2, [pc, #128]	; (8005008 <DMA_SetConfig+0x350>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <DMA_SetConfig+0x2de>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1e      	ldr	r2, [pc, #120]	; (800500c <DMA_SetConfig+0x354>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <DMA_SetConfig+0x2e2>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <DMA_SetConfig+0x2e4>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d020      	beq.n	8004fe2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2201      	movs	r2, #1
 8004faa:	409a      	lsls	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b40      	cmp	r3, #64	; 0x40
 8004fbe:	d108      	bne.n	8004fd2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	60da      	str	r2, [r3, #12]
}
 8004fd0:	e007      	b.n	8004fe2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	60da      	str	r2, [r3, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	58025408 	.word	0x58025408
 8004ff4:	5802541c 	.word	0x5802541c
 8004ff8:	58025430 	.word	0x58025430
 8004ffc:	58025444 	.word	0x58025444
 8005000:	58025458 	.word	0x58025458
 8005004:	5802546c 	.word	0x5802546c
 8005008:	58025480 	.word	0x58025480
 800500c:	58025494 	.word	0x58025494

08005010 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a42      	ldr	r2, [pc, #264]	; (8005128 <DMA_CalcBaseAndBitshift+0x118>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d04a      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a41      	ldr	r2, [pc, #260]	; (800512c <DMA_CalcBaseAndBitshift+0x11c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d045      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3f      	ldr	r2, [pc, #252]	; (8005130 <DMA_CalcBaseAndBitshift+0x120>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d040      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3e      	ldr	r2, [pc, #248]	; (8005134 <DMA_CalcBaseAndBitshift+0x124>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d03b      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3c      	ldr	r2, [pc, #240]	; (8005138 <DMA_CalcBaseAndBitshift+0x128>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d036      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a3b      	ldr	r2, [pc, #236]	; (800513c <DMA_CalcBaseAndBitshift+0x12c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d031      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a39      	ldr	r2, [pc, #228]	; (8005140 <DMA_CalcBaseAndBitshift+0x130>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d02c      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a38      	ldr	r2, [pc, #224]	; (8005144 <DMA_CalcBaseAndBitshift+0x134>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d027      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a36      	ldr	r2, [pc, #216]	; (8005148 <DMA_CalcBaseAndBitshift+0x138>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d022      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a35      	ldr	r2, [pc, #212]	; (800514c <DMA_CalcBaseAndBitshift+0x13c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d01d      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a33      	ldr	r2, [pc, #204]	; (8005150 <DMA_CalcBaseAndBitshift+0x140>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d018      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a32      	ldr	r2, [pc, #200]	; (8005154 <DMA_CalcBaseAndBitshift+0x144>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a30      	ldr	r2, [pc, #192]	; (8005158 <DMA_CalcBaseAndBitshift+0x148>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00e      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2f      	ldr	r2, [pc, #188]	; (800515c <DMA_CalcBaseAndBitshift+0x14c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d009      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a2d      	ldr	r2, [pc, #180]	; (8005160 <DMA_CalcBaseAndBitshift+0x150>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <DMA_CalcBaseAndBitshift+0xa8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <DMA_CalcBaseAndBitshift+0x154>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d101      	bne.n	80050bc <DMA_CalcBaseAndBitshift+0xac>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <DMA_CalcBaseAndBitshift+0xae>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d024      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	3b10      	subs	r3, #16
 80050ca:	4a27      	ldr	r2, [pc, #156]	; (8005168 <DMA_CalcBaseAndBitshift+0x158>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	4a24      	ldr	r2, [pc, #144]	; (800516c <DMA_CalcBaseAndBitshift+0x15c>)
 80050dc:	5cd3      	ldrb	r3, [r2, r3]
 80050de:	461a      	mov	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d908      	bls.n	80050fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <DMA_CalcBaseAndBitshift+0x160>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	1d1a      	adds	r2, r3, #4
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	659a      	str	r2, [r3, #88]	; 0x58
 80050fa:	e00d      	b.n	8005118 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <DMA_CalcBaseAndBitshift+0x160>)
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6593      	str	r3, [r2, #88]	; 0x58
 800510a:	e005      	b.n	8005118 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40020010 	.word	0x40020010
 800512c:	40020028 	.word	0x40020028
 8005130:	40020040 	.word	0x40020040
 8005134:	40020058 	.word	0x40020058
 8005138:	40020070 	.word	0x40020070
 800513c:	40020088 	.word	0x40020088
 8005140:	400200a0 	.word	0x400200a0
 8005144:	400200b8 	.word	0x400200b8
 8005148:	40020410 	.word	0x40020410
 800514c:	40020428 	.word	0x40020428
 8005150:	40020440 	.word	0x40020440
 8005154:	40020458 	.word	0x40020458
 8005158:	40020470 	.word	0x40020470
 800515c:	40020488 	.word	0x40020488
 8005160:	400204a0 	.word	0x400204a0
 8005164:	400204b8 	.word	0x400204b8
 8005168:	aaaaaaab 	.word	0xaaaaaaab
 800516c:	0800c764 	.word	0x0800c764
 8005170:	fffffc00 	.word	0xfffffc00

08005174 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d120      	bne.n	80051ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	2b03      	cmp	r3, #3
 800518e:	d858      	bhi.n	8005242 <DMA_CheckFifoParam+0xce>
 8005190:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <DMA_CheckFifoParam+0x24>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	080051a9 	.word	0x080051a9
 800519c:	080051bb 	.word	0x080051bb
 80051a0:	080051a9 	.word	0x080051a9
 80051a4:	08005243 	.word	0x08005243
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d048      	beq.n	8005246 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051b8:	e045      	b.n	8005246 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051c2:	d142      	bne.n	800524a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051c8:	e03f      	b.n	800524a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d2:	d123      	bne.n	800521c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d838      	bhi.n	800524e <DMA_CheckFifoParam+0xda>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <DMA_CheckFifoParam+0x70>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	080051fb 	.word	0x080051fb
 80051ec:	080051f5 	.word	0x080051f5
 80051f0:	0800520d 	.word	0x0800520d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
        break;
 80051f8:	e030      	b.n	800525c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d025      	beq.n	8005252 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800520a:	e022      	b.n	8005252 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005214:	d11f      	bne.n	8005256 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800521a:	e01c      	b.n	8005256 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	2b02      	cmp	r3, #2
 8005222:	d902      	bls.n	800522a <DMA_CheckFifoParam+0xb6>
 8005224:	2b03      	cmp	r3, #3
 8005226:	d003      	beq.n	8005230 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005228:	e018      	b.n	800525c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
        break;
 800522e:	e015      	b.n	800525c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00e      	beq.n	800525a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
    break;
 8005240:	e00b      	b.n	800525a <DMA_CheckFifoParam+0xe6>
        break;
 8005242:	bf00      	nop
 8005244:	e00a      	b.n	800525c <DMA_CheckFifoParam+0xe8>
        break;
 8005246:	bf00      	nop
 8005248:	e008      	b.n	800525c <DMA_CheckFifoParam+0xe8>
        break;
 800524a:	bf00      	nop
 800524c:	e006      	b.n	800525c <DMA_CheckFifoParam+0xe8>
        break;
 800524e:	bf00      	nop
 8005250:	e004      	b.n	800525c <DMA_CheckFifoParam+0xe8>
        break;
 8005252:	bf00      	nop
 8005254:	e002      	b.n	800525c <DMA_CheckFifoParam+0xe8>
        break;
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <DMA_CheckFifoParam+0xe8>
    break;
 800525a:	bf00      	nop
    }
  }

  return status;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop

0800526c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a38      	ldr	r2, [pc, #224]	; (8005360 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a36      	ldr	r2, [pc, #216]	; (8005364 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01d      	beq.n	80052ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a35      	ldr	r2, [pc, #212]	; (8005368 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a33      	ldr	r2, [pc, #204]	; (800536c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a32      	ldr	r2, [pc, #200]	; (8005370 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a30      	ldr	r2, [pc, #192]	; (8005374 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2f      	ldr	r2, [pc, #188]	; (8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2d      	ldr	r2, [pc, #180]	; (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d101      	bne.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80052ce:	2300      	movs	r3, #0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01a      	beq.n	800530a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	3b08      	subs	r3, #8
 80052dc:	4a28      	ldr	r2, [pc, #160]	; (8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4b26      	ldr	r3, [pc, #152]	; (8005384 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	461a      	mov	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a24      	ldr	r2, [pc, #144]	; (8005388 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80052f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	2201      	movs	r2, #1
 8005302:	409a      	lsls	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005308:	e024      	b.n	8005354 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	3b10      	subs	r3, #16
 8005312:	4a1e      	ldr	r2, [pc, #120]	; (800538c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d806      	bhi.n	8005332 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d902      	bls.n	8005332 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3308      	adds	r3, #8
 8005330:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4b18      	ldr	r3, [pc, #96]	; (8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a16      	ldr	r2, [pc, #88]	; (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005344:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	2201      	movs	r2, #1
 800534e:	409a      	lsls	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	58025408 	.word	0x58025408
 8005364:	5802541c 	.word	0x5802541c
 8005368:	58025430 	.word	0x58025430
 800536c:	58025444 	.word	0x58025444
 8005370:	58025458 	.word	0x58025458
 8005374:	5802546c 	.word	0x5802546c
 8005378:	58025480 	.word	0x58025480
 800537c:	58025494 	.word	0x58025494
 8005380:	cccccccd 	.word	0xcccccccd
 8005384:	16009600 	.word	0x16009600
 8005388:	58025880 	.word	0x58025880
 800538c:	aaaaaaab 	.word	0xaaaaaaab
 8005390:	400204b8 	.word	0x400204b8
 8005394:	4002040f 	.word	0x4002040f
 8005398:	10008200 	.word	0x10008200
 800539c:	40020880 	.word	0x40020880

080053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04a      	beq.n	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d847      	bhi.n	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a25      	ldr	r2, [pc, #148]	; (8005458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d022      	beq.n	800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a24      	ldr	r2, [pc, #144]	; (800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d01d      	beq.n	800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a22      	ldr	r2, [pc, #136]	; (8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d018      	beq.n	800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a21      	ldr	r2, [pc, #132]	; (8005464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1e      	ldr	r2, [pc, #120]	; (800546c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d101      	bne.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005410:	2300      	movs	r3, #0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4b17      	ldr	r3, [pc, #92]	; (8005478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	461a      	mov	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a15      	ldr	r2, [pc, #84]	; (800547c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005428:	671a      	str	r2, [r3, #112]	; 0x70
 800542a:	e009      	b.n	8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4b14      	ldr	r3, [pc, #80]	; (8005480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	461a      	mov	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a11      	ldr	r2, [pc, #68]	; (8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800543e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3b01      	subs	r3, #1
 8005444:	2201      	movs	r2, #1
 8005446:	409a      	lsls	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800544c:	bf00      	nop
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	58025408 	.word	0x58025408
 800545c:	5802541c 	.word	0x5802541c
 8005460:	58025430 	.word	0x58025430
 8005464:	58025444 	.word	0x58025444
 8005468:	58025458 	.word	0x58025458
 800546c:	5802546c 	.word	0x5802546c
 8005470:	58025480 	.word	0x58025480
 8005474:	58025494 	.word	0x58025494
 8005478:	1600963f 	.word	0x1600963f
 800547c:	58025940 	.word	0x58025940
 8005480:	1000823f 	.word	0x1000823f
 8005484:	40020940 	.word	0x40020940

08005488 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e0e3      	b.n	8005662 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2223      	movs	r2, #35	; 0x23
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fc f913 	bl	80016d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054b2:	4b6e      	ldr	r3, [pc, #440]	; (800566c <HAL_ETH_Init+0x1e4>)
 80054b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054b8:	4a6c      	ldr	r2, [pc, #432]	; (800566c <HAL_ETH_Init+0x1e4>)
 80054ba:	f043 0302 	orr.w	r3, r3, #2
 80054be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054c2:	4b6a      	ldr	r3, [pc, #424]	; (800566c <HAL_ETH_Init+0x1e4>)
 80054c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	7a1b      	ldrb	r3, [r3, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d103      	bne.n	80054e0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80054d8:	2000      	movs	r0, #0
 80054da:	f7fd f86d 	bl	80025b8 <HAL_SYSCFG_ETHInterfaceSelect>
 80054de:	e003      	b.n	80054e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80054e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80054e4:	f7fd f868 	bl	80025b8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80054e8:	4b61      	ldr	r3, [pc, #388]	; (8005670 <HAL_ETH_Init+0x1e8>)
 80054ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005502:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005504:	f7fd f84c 	bl	80025a0 <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800550a:	e011      	b.n	8005530 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800550c:	f7fd f848 	bl	80025a0 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800551a:	d909      	bls.n	8005530 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2204      	movs	r2, #4
 8005520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	22e0      	movs	r2, #224	; 0xe0
 8005528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e098      	b.n	8005662 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e4      	bne.n	800550c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f89e 	bl	8005684 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005548:	f001 fcf2 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 800554c:	4603      	mov	r3, r0
 800554e:	4a49      	ldr	r2, [pc, #292]	; (8005674 <HAL_ETH_Init+0x1ec>)
 8005550:	fba2 2303 	umull	r2, r3, r2, r3
 8005554:	0c9a      	lsrs	r2, r3, #18
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3a01      	subs	r2, #1
 800555c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fa81 	bl	8005a68 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005572:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800557e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005582:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	22e0      	movs	r2, #224	; 0xe0
 800559e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e05d      	b.n	8005662 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80055b2:	4b31      	ldr	r3, [pc, #196]	; (8005678 <HAL_ETH_Init+0x1f0>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6952      	ldr	r2, [r2, #20]
 80055ba:	0051      	lsls	r1, r2, #1
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055c6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fae9 	bl	8005ba2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fb2f 	bl	8005c34 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	3305      	adds	r3, #5
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	021a      	lsls	r2, r3, #8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	4619      	mov	r1, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	3303      	adds	r3, #3
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	061a      	lsls	r2, r3, #24
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	3302      	adds	r3, #2
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	041b      	lsls	r3, r3, #16
 8005608:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	3301      	adds	r3, #1
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005614:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005622:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005624:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	4b11      	ldr	r3, [pc, #68]	; (800567c <HAL_ETH_Init+0x1f4>)
 8005636:	430b      	orrs	r3, r1
 8005638:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <HAL_ETH_Init+0x1f8>)
 800564a:	430b      	orrs	r3, r1
 800564c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2210      	movs	r2, #16
 800565c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
 8005670:	58000400 	.word	0x58000400
 8005674:	431bde83 	.word	0x431bde83
 8005678:	ffff8001 	.word	0xffff8001
 800567c:	0c020060 	.word	0x0c020060
 8005680:	0c20c000 	.word	0x0c20c000

08005684 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005694:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800569c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800569e:	f001 fc47 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 80056a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4a1a      	ldr	r2, [pc, #104]	; (8005710 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d804      	bhi.n	80056b6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e022      	b.n	80056fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4a16      	ldr	r2, [pc, #88]	; (8005714 <HAL_ETH_SetMDIOClockRange+0x90>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d204      	bcs.n	80056c8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	e019      	b.n	80056fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4a13      	ldr	r2, [pc, #76]	; (8005718 <HAL_ETH_SetMDIOClockRange+0x94>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d915      	bls.n	80056fc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4a12      	ldr	r2, [pc, #72]	; (800571c <HAL_ETH_SetMDIOClockRange+0x98>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d804      	bhi.n	80056e2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e00c      	b.n	80056fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4a0e      	ldr	r2, [pc, #56]	; (8005720 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d804      	bhi.n	80056f4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	e003      	b.n	80056fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80056fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	02160ebf 	.word	0x02160ebf
 8005714:	03938700 	.word	0x03938700
 8005718:	05f5e0ff 	.word	0x05f5e0ff
 800571c:	08f0d17f 	.word	0x08f0d17f
 8005720:	0ee6b27f 	.word	0x0ee6b27f

08005724 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005736:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	791b      	ldrb	r3, [r3, #4]
 800573c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800573e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	7b1b      	ldrb	r3, [r3, #12]
 8005744:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005746:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	7b5b      	ldrb	r3, [r3, #13]
 800574c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800574e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	7b9b      	ldrb	r3, [r3, #14]
 8005754:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005756:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	7bdb      	ldrb	r3, [r3, #15]
 800575c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800575e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	7c12      	ldrb	r2, [r2, #16]
 8005764:	2a00      	cmp	r2, #0
 8005766:	d102      	bne.n	800576e <ETH_SetMACConfig+0x4a>
 8005768:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800576c:	e000      	b.n	8005770 <ETH_SetMACConfig+0x4c>
 800576e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005770:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	7c52      	ldrb	r2, [r2, #17]
 8005776:	2a00      	cmp	r2, #0
 8005778:	d102      	bne.n	8005780 <ETH_SetMACConfig+0x5c>
 800577a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800577e:	e000      	b.n	8005782 <ETH_SetMACConfig+0x5e>
 8005780:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005782:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	7c9b      	ldrb	r3, [r3, #18]
 8005788:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800578a:	431a      	orrs	r2, r3
               macconf->Speed |
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005790:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005796:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	7f1b      	ldrb	r3, [r3, #28]
 800579c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800579e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	7f5b      	ldrb	r3, [r3, #29]
 80057a4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80057a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	7f92      	ldrb	r2, [r2, #30]
 80057ac:	2a00      	cmp	r2, #0
 80057ae:	d102      	bne.n	80057b6 <ETH_SetMACConfig+0x92>
 80057b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057b4:	e000      	b.n	80057b8 <ETH_SetMACConfig+0x94>
 80057b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80057b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	7fdb      	ldrb	r3, [r3, #31]
 80057be:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80057c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d102      	bne.n	80057d2 <ETH_SetMACConfig+0xae>
 80057cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d0:	e000      	b.n	80057d4 <ETH_SetMACConfig+0xb0>
 80057d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80057d4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80057da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80057e4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b56      	ldr	r3, [pc, #344]	; (8005950 <ETH_SetMACConfig+0x22c>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	430b      	orrs	r3, r1
 8005800:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005806:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800580e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005810:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005818:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800581a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005822:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005824:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800582c:	2a00      	cmp	r2, #0
 800582e:	d102      	bne.n	8005836 <ETH_SetMACConfig+0x112>
 8005830:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005834:	e000      	b.n	8005838 <ETH_SetMACConfig+0x114>
 8005836:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005838:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	4b42      	ldr	r3, [pc, #264]	; (8005954 <ETH_SetMACConfig+0x230>)
 800584a:	4013      	ands	r3, r2
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	68f9      	ldr	r1, [r7, #12]
 8005852:	430b      	orrs	r3, r1
 8005854:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800585c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	4b3a      	ldr	r3, [pc, #232]	; (8005958 <ETH_SetMACConfig+0x234>)
 800586e:	4013      	ands	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	430b      	orrs	r3, r1
 8005878:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005880:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005886:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800588e:	2a00      	cmp	r2, #0
 8005890:	d101      	bne.n	8005896 <ETH_SetMACConfig+0x172>
 8005892:	2280      	movs	r2, #128	; 0x80
 8005894:	e000      	b.n	8005898 <ETH_SetMACConfig+0x174>
 8005896:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005898:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058aa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80058ae:	4013      	ands	r3, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	430b      	orrs	r3, r1
 80058b8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80058c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80058c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d6:	f023 0103 	bic.w	r1, r3, #3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80058ee:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800590a:	2a00      	cmp	r2, #0
 800590c:	d101      	bne.n	8005912 <ETH_SetMACConfig+0x1ee>
 800590e:	2240      	movs	r2, #64	; 0x40
 8005910:	e000      	b.n	8005914 <ETH_SetMACConfig+0x1f0>
 8005912:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005914:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800591c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800591e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005926:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005934:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	430a      	orrs	r2, r1
 8005940:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	00048083 	.word	0x00048083
 8005954:	c0f88000 	.word	0xc0f88000
 8005958:	fffffef0 	.word	0xfffffef0

0800595c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4b38      	ldr	r3, [pc, #224]	; (8005a54 <ETH_SetDMAConfig+0xf8>)
 8005972:	4013      	ands	r3, r2
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	6811      	ldr	r1, [r2, #0]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	430b      	orrs	r3, r1
 800597e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005982:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	791b      	ldrb	r3, [r3, #4]
 8005988:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800598e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	7b1b      	ldrb	r3, [r3, #12]
 8005994:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <ETH_SetDMAConfig+0xfc>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	430b      	orrs	r3, r1
 80059b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059b4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	7b5b      	ldrb	r3, [r3, #13]
 80059ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80059d0:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <ETH_SetDMAConfig+0x100>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	68f9      	ldr	r1, [r7, #12]
 80059da:	430b      	orrs	r3, r1
 80059dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	7d1b      	ldrb	r3, [r3, #20]
 80059ec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80059ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	7f5b      	ldrb	r3, [r3, #29]
 80059f4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a02:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005a06:	4b16      	ldr	r3, [pc, #88]	; (8005a60 <ETH_SetDMAConfig+0x104>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	430b      	orrs	r3, r1
 8005a12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a16:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	7f1b      	ldrb	r3, [r3, #28]
 8005a1e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a30:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005a34:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <ETH_SetDMAConfig+0x108>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	68f9      	ldr	r1, [r7, #12]
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a44:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	ffff87fd 	.word	0xffff87fd
 8005a58:	ffff2ffe 	.word	0xffff2ffe
 8005a5c:	fffec000 	.word	0xfffec000
 8005a60:	ffc0efef 	.word	0xffc0efef
 8005a64:	7fc0ffff 	.word	0x7fc0ffff

08005a68 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b0a4      	sub	sp, #144	; 0x90
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005a76:	2300      	movs	r3, #0
 8005a78:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005aa8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005ac0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005ac4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005acc:	2300      	movs	r3, #0
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005aea:	2300      	movs	r3, #0
 8005aec:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005af4:	2300      	movs	r3, #0
 8005af6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005b00:	2320      	movs	r3, #32
 8005b02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005b12:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005b18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b1c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005b24:	2302      	movs	r3, #2
 8005b26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005b42:	2300      	movs	r3, #0
 8005b44:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fde6 	bl	8005724 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005b72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005b7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005b88:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005b8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005b8e:	f107 0308 	add.w	r3, r7, #8
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff fee1 	bl	800595c <ETH_SetDMAConfig>
}
 8005b9a:	bf00      	nop
 8005b9c:	3790      	adds	r7, #144	; 0x90
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e01d      	b.n	8005bec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68d9      	ldr	r1, [r3, #12]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	4413      	add	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	440b      	add	r3, r1
 8005bc0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	3206      	adds	r2, #6
 8005be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d9de      	bls.n	8005bb0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c00:	461a      	mov	r2, r3
 8005c02:	2303      	movs	r3, #3
 8005c04:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c14:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c24:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e023      	b.n	8005c8a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6919      	ldr	r1, [r3, #16]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	440b      	add	r3, r1
 8005c52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2200      	movs	r2, #0
 8005c76:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	3212      	adds	r2, #18
 8005c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d9d8      	bls.n	8005c42 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2303      	movs	r3, #3
 8005cba:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cca:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005cfe:	4b86      	ldr	r3, [pc, #536]	; (8005f18 <HAL_GPIO_Init+0x228>)
 8005d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d02:	e18c      	b.n	800601e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	2101      	movs	r1, #1
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	4013      	ands	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 817e 	beq.w	8006018 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d005      	beq.n	8005d34 <HAL_GPIO_Init+0x44>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d130      	bne.n	8005d96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	2203      	movs	r2, #3
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43db      	mvns	r3, r3
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	4013      	ands	r3, r2
 8005d78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	091b      	lsrs	r3, r3, #4
 8005d80:	f003 0201 	and.w	r2, r3, #1
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d017      	beq.n	8005dd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	2203      	movs	r2, #3
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43db      	mvns	r3, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	4013      	ands	r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d123      	bne.n	8005e26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	08da      	lsrs	r2, r3, #3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3208      	adds	r2, #8
 8005de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	220f      	movs	r2, #15
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	08da      	lsrs	r2, r3, #3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3208      	adds	r2, #8
 8005e20:	69b9      	ldr	r1, [r7, #24]
 8005e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	2203      	movs	r2, #3
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43db      	mvns	r3, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f003 0203 	and.w	r2, r3, #3
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 80d8 	beq.w	8006018 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e68:	4b2c      	ldr	r3, [pc, #176]	; (8005f1c <HAL_GPIO_Init+0x22c>)
 8005e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e6e:	4a2b      	ldr	r2, [pc, #172]	; (8005f1c <HAL_GPIO_Init+0x22c>)
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e78:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <HAL_GPIO_Init+0x22c>)
 8005e7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e86:	4a26      	ldr	r2, [pc, #152]	; (8005f20 <HAL_GPIO_Init+0x230>)
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	089b      	lsrs	r3, r3, #2
 8005e8c:	3302      	adds	r3, #2
 8005e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	220f      	movs	r2, #15
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1d      	ldr	r2, [pc, #116]	; (8005f24 <HAL_GPIO_Init+0x234>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d04a      	beq.n	8005f48 <HAL_GPIO_Init+0x258>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <HAL_GPIO_Init+0x238>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d02b      	beq.n	8005f12 <HAL_GPIO_Init+0x222>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <HAL_GPIO_Init+0x23c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d025      	beq.n	8005f0e <HAL_GPIO_Init+0x21e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a1a      	ldr	r2, [pc, #104]	; (8005f30 <HAL_GPIO_Init+0x240>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d01f      	beq.n	8005f0a <HAL_GPIO_Init+0x21a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a19      	ldr	r2, [pc, #100]	; (8005f34 <HAL_GPIO_Init+0x244>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d019      	beq.n	8005f06 <HAL_GPIO_Init+0x216>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <HAL_GPIO_Init+0x248>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d013      	beq.n	8005f02 <HAL_GPIO_Init+0x212>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a17      	ldr	r2, [pc, #92]	; (8005f3c <HAL_GPIO_Init+0x24c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00d      	beq.n	8005efe <HAL_GPIO_Init+0x20e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a16      	ldr	r2, [pc, #88]	; (8005f40 <HAL_GPIO_Init+0x250>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d007      	beq.n	8005efa <HAL_GPIO_Init+0x20a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a15      	ldr	r2, [pc, #84]	; (8005f44 <HAL_GPIO_Init+0x254>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d101      	bne.n	8005ef6 <HAL_GPIO_Init+0x206>
 8005ef2:	2309      	movs	r3, #9
 8005ef4:	e029      	b.n	8005f4a <HAL_GPIO_Init+0x25a>
 8005ef6:	230a      	movs	r3, #10
 8005ef8:	e027      	b.n	8005f4a <HAL_GPIO_Init+0x25a>
 8005efa:	2307      	movs	r3, #7
 8005efc:	e025      	b.n	8005f4a <HAL_GPIO_Init+0x25a>
 8005efe:	2306      	movs	r3, #6
 8005f00:	e023      	b.n	8005f4a <HAL_GPIO_Init+0x25a>
 8005f02:	2305      	movs	r3, #5
 8005f04:	e021      	b.n	8005f4a <HAL_GPIO_Init+0x25a>
 8005f06:	2304      	movs	r3, #4
 8005f08:	e01f      	b.n	8005f4a <HAL_GPIO_Init+0x25a>
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e01d      	b.n	8005f4a <HAL_GPIO_Init+0x25a>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e01b      	b.n	8005f4a <HAL_GPIO_Init+0x25a>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e019      	b.n	8005f4a <HAL_GPIO_Init+0x25a>
 8005f16:	bf00      	nop
 8005f18:	58000080 	.word	0x58000080
 8005f1c:	58024400 	.word	0x58024400
 8005f20:	58000400 	.word	0x58000400
 8005f24:	58020000 	.word	0x58020000
 8005f28:	58020400 	.word	0x58020400
 8005f2c:	58020800 	.word	0x58020800
 8005f30:	58020c00 	.word	0x58020c00
 8005f34:	58021000 	.word	0x58021000
 8005f38:	58021400 	.word	0x58021400
 8005f3c:	58021800 	.word	0x58021800
 8005f40:	58021c00 	.word	0x58021c00
 8005f44:	58022400 	.word	0x58022400
 8005f48:	2300      	movs	r3, #0
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	f002 0203 	and.w	r2, r2, #3
 8005f50:	0092      	lsls	r2, r2, #2
 8005f52:	4093      	lsls	r3, r2
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f5a:	4938      	ldr	r1, [pc, #224]	; (800603c <HAL_GPIO_Init+0x34c>)
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	089b      	lsrs	r3, r3, #2
 8005f60:	3302      	adds	r3, #2
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	43db      	mvns	r3, r3
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	4013      	ands	r3, r2
 8005f78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	3301      	adds	r3, #1
 800601c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	fa22 f303 	lsr.w	r3, r2, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	f47f ae6b 	bne.w	8005d04 <HAL_GPIO_Init+0x14>
  }
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	3724      	adds	r7, #36	; 0x24
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	58000400 	.word	0x58000400

08006040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	807b      	strh	r3, [r7, #2]
 800604c:	4613      	mov	r3, r2
 800604e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006050:	787b      	ldrb	r3, [r7, #1]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006056:	887a      	ldrh	r2, [r7, #2]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800605c:	e003      	b.n	8006066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800605e:	887b      	ldrh	r3, [r7, #2]
 8006060:	041a      	lsls	r2, r3, #16
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	619a      	str	r2, [r3, #24]
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006084:	887a      	ldrh	r2, [r7, #2]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4013      	ands	r3, r2
 800608a:	041a      	lsls	r2, r3, #16
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	43d9      	mvns	r1, r3
 8006090:	887b      	ldrh	r3, [r7, #2]
 8006092:	400b      	ands	r3, r1
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	619a      	str	r2, [r3, #24]
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
	...

080060a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80060b0:	4b19      	ldr	r3, [pc, #100]	; (8006118 <HAL_PWREx_ConfigSupply+0x70>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d00a      	beq.n	80060d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80060bc:	4b16      	ldr	r3, [pc, #88]	; (8006118 <HAL_PWREx_ConfigSupply+0x70>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d001      	beq.n	80060ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e01f      	b.n	800610e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	e01d      	b.n	800610e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80060d2:	4b11      	ldr	r3, [pc, #68]	; (8006118 <HAL_PWREx_ConfigSupply+0x70>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f023 0207 	bic.w	r2, r3, #7
 80060da:	490f      	ldr	r1, [pc, #60]	; (8006118 <HAL_PWREx_ConfigSupply+0x70>)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80060e2:	f7fc fa5d 	bl	80025a0 <HAL_GetTick>
 80060e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060e8:	e009      	b.n	80060fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80060ea:	f7fc fa59 	bl	80025a0 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060f8:	d901      	bls.n	80060fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e007      	b.n	800610e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060fe:	4b06      	ldr	r3, [pc, #24]	; (8006118 <HAL_PWREx_ConfigSupply+0x70>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610a:	d1ee      	bne.n	80060ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	58024800 	.word	0x58024800

0800611c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08c      	sub	sp, #48	; 0x30
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e3c8      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 8087 	beq.w	800624a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800613c:	4b88      	ldr	r3, [pc, #544]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006146:	4b86      	ldr	r3, [pc, #536]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	2b10      	cmp	r3, #16
 8006150:	d007      	beq.n	8006162 <HAL_RCC_OscConfig+0x46>
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2b18      	cmp	r3, #24
 8006156:	d110      	bne.n	800617a <HAL_RCC_OscConfig+0x5e>
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d10b      	bne.n	800617a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006162:	4b7f      	ldr	r3, [pc, #508]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d06c      	beq.n	8006248 <HAL_RCC_OscConfig+0x12c>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d168      	bne.n	8006248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e3a2      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006182:	d106      	bne.n	8006192 <HAL_RCC_OscConfig+0x76>
 8006184:	4b76      	ldr	r3, [pc, #472]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a75      	ldr	r2, [pc, #468]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 800618a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	e02e      	b.n	80061f0 <HAL_RCC_OscConfig+0xd4>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10c      	bne.n	80061b4 <HAL_RCC_OscConfig+0x98>
 800619a:	4b71      	ldr	r3, [pc, #452]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a70      	ldr	r2, [pc, #448]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	4b6e      	ldr	r3, [pc, #440]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a6d      	ldr	r2, [pc, #436]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e01d      	b.n	80061f0 <HAL_RCC_OscConfig+0xd4>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061bc:	d10c      	bne.n	80061d8 <HAL_RCC_OscConfig+0xbc>
 80061be:	4b68      	ldr	r3, [pc, #416]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a67      	ldr	r2, [pc, #412]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	4b65      	ldr	r3, [pc, #404]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a64      	ldr	r2, [pc, #400]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e00b      	b.n	80061f0 <HAL_RCC_OscConfig+0xd4>
 80061d8:	4b61      	ldr	r3, [pc, #388]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a60      	ldr	r2, [pc, #384]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	4b5e      	ldr	r3, [pc, #376]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a5d      	ldr	r2, [pc, #372]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80061ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d013      	beq.n	8006220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fc f9d2 	bl	80025a0 <HAL_GetTick>
 80061fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006200:	f7fc f9ce 	bl	80025a0 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b64      	cmp	r3, #100	; 0x64
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e356      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006212:	4b53      	ldr	r3, [pc, #332]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0f0      	beq.n	8006200 <HAL_RCC_OscConfig+0xe4>
 800621e:	e014      	b.n	800624a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006220:	f7fc f9be 	bl	80025a0 <HAL_GetTick>
 8006224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006228:	f7fc f9ba 	bl	80025a0 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b64      	cmp	r3, #100	; 0x64
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e342      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800623a:	4b49      	ldr	r3, [pc, #292]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f0      	bne.n	8006228 <HAL_RCC_OscConfig+0x10c>
 8006246:	e000      	b.n	800624a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 808c 	beq.w	8006370 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006258:	4b41      	ldr	r3, [pc, #260]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006260:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006262:	4b3f      	ldr	r3, [pc, #252]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <HAL_RCC_OscConfig+0x162>
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	2b18      	cmp	r3, #24
 8006272:	d137      	bne.n	80062e4 <HAL_RCC_OscConfig+0x1c8>
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d132      	bne.n	80062e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800627e:	4b38      	ldr	r3, [pc, #224]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <HAL_RCC_OscConfig+0x17a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e314      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006296:	4b32      	ldr	r3, [pc, #200]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f023 0219 	bic.w	r2, r3, #25
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	492f      	ldr	r1, [pc, #188]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fc f97a 	bl	80025a0 <HAL_GetTick>
 80062ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062b0:	f7fc f976 	bl	80025a0 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e2fe      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062c2:	4b27      	ldr	r3, [pc, #156]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ce:	4b24      	ldr	r3, [pc, #144]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	061b      	lsls	r3, r3, #24
 80062dc:	4920      	ldr	r1, [pc, #128]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062e2:	e045      	b.n	8006370 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d026      	beq.n	800633a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062ec:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f023 0219 	bic.w	r2, r3, #25
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4919      	ldr	r1, [pc, #100]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fe:	f7fc f94f 	bl	80025a0 <HAL_GetTick>
 8006302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006306:	f7fc f94b 	bl	80025a0 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e2d3      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006318:	4b11      	ldr	r3, [pc, #68]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0f0      	beq.n	8006306 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	061b      	lsls	r3, r3, #24
 8006332:	490b      	ldr	r1, [pc, #44]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 8006334:	4313      	orrs	r3, r2
 8006336:	604b      	str	r3, [r1, #4]
 8006338:	e01a      	b.n	8006370 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800633a:	4b09      	ldr	r3, [pc, #36]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a08      	ldr	r2, [pc, #32]	; (8006360 <HAL_RCC_OscConfig+0x244>)
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006346:	f7fc f92b 	bl	80025a0 <HAL_GetTick>
 800634a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800634c:	e00a      	b.n	8006364 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800634e:	f7fc f927 	bl	80025a0 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d903      	bls.n	8006364 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e2af      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
 8006360:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006364:	4b96      	ldr	r3, [pc, #600]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1ee      	bne.n	800634e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	d06a      	beq.n	8006452 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800637c:	4b90      	ldr	r3, [pc, #576]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006384:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006386:	4b8e      	ldr	r3, [pc, #568]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b08      	cmp	r3, #8
 8006390:	d007      	beq.n	80063a2 <HAL_RCC_OscConfig+0x286>
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b18      	cmp	r3, #24
 8006396:	d11b      	bne.n	80063d0 <HAL_RCC_OscConfig+0x2b4>
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d116      	bne.n	80063d0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063a2:	4b87      	ldr	r3, [pc, #540]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_RCC_OscConfig+0x29e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	2b80      	cmp	r3, #128	; 0x80
 80063b4:	d001      	beq.n	80063ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e282      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063ba:	4b81      	ldr	r3, [pc, #516]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	061b      	lsls	r3, r3, #24
 80063c8:	497d      	ldr	r1, [pc, #500]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063ce:	e040      	b.n	8006452 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d023      	beq.n	8006420 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80063d8:	4b79      	ldr	r3, [pc, #484]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a78      	ldr	r2, [pc, #480]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80063de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fc f8dc 	bl	80025a0 <HAL_GetTick>
 80063e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80063ec:	f7fc f8d8 	bl	80025a0 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e260      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063fe:	4b70      	ldr	r3, [pc, #448]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f0      	beq.n	80063ec <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800640a:	4b6d      	ldr	r3, [pc, #436]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	061b      	lsls	r3, r3, #24
 8006418:	4969      	ldr	r1, [pc, #420]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 800641a:	4313      	orrs	r3, r2
 800641c:	60cb      	str	r3, [r1, #12]
 800641e:	e018      	b.n	8006452 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006420:	4b67      	ldr	r3, [pc, #412]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a66      	ldr	r2, [pc, #408]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800642a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642c:	f7fc f8b8 	bl	80025a0 <HAL_GetTick>
 8006430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006434:	f7fc f8b4 	bl	80025a0 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e23c      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006446:	4b5e      	ldr	r3, [pc, #376]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d036      	beq.n	80064cc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d019      	beq.n	800649a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006466:	4b56      	ldr	r3, [pc, #344]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646a:	4a55      	ldr	r2, [pc, #340]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006472:	f7fc f895 	bl	80025a0 <HAL_GetTick>
 8006476:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800647a:	f7fc f891 	bl	80025a0 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e219      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800648c:	4b4c      	ldr	r3, [pc, #304]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 800648e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f0      	beq.n	800647a <HAL_RCC_OscConfig+0x35e>
 8006498:	e018      	b.n	80064cc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800649a:	4b49      	ldr	r3, [pc, #292]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 800649c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649e:	4a48      	ldr	r2, [pc, #288]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80064a0:	f023 0301 	bic.w	r3, r3, #1
 80064a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a6:	f7fc f87b 	bl	80025a0 <HAL_GetTick>
 80064aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ae:	f7fc f877 	bl	80025a0 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e1ff      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064c0:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80064c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1f0      	bne.n	80064ae <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d036      	beq.n	8006546 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d019      	beq.n	8006514 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064e0:	4b37      	ldr	r3, [pc, #220]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a36      	ldr	r2, [pc, #216]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80064e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064ec:	f7fc f858 	bl	80025a0 <HAL_GetTick>
 80064f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064f4:	f7fc f854 	bl	80025a0 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e1dc      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006506:	4b2e      	ldr	r3, [pc, #184]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x3d8>
 8006512:	e018      	b.n	8006546 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006514:	4b2a      	ldr	r3, [pc, #168]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a29      	ldr	r2, [pc, #164]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 800651a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800651e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006520:	f7fc f83e 	bl	80025a0 <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006528:	f7fc f83a 	bl	80025a0 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e1c2      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800653a:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8086 	beq.w	8006660 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006554:	4b1b      	ldr	r3, [pc, #108]	; (80065c4 <HAL_RCC_OscConfig+0x4a8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1a      	ldr	r2, [pc, #104]	; (80065c4 <HAL_RCC_OscConfig+0x4a8>)
 800655a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006560:	f7fc f81e 	bl	80025a0 <HAL_GetTick>
 8006564:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006568:	f7fc f81a 	bl	80025a0 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b64      	cmp	r3, #100	; 0x64
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e1a2      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800657a:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <HAL_RCC_OscConfig+0x4a8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f0      	beq.n	8006568 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d106      	bne.n	800659c <HAL_RCC_OscConfig+0x480>
 800658e:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006592:	4a0b      	ldr	r2, [pc, #44]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	6713      	str	r3, [r2, #112]	; 0x70
 800659a:	e032      	b.n	8006602 <HAL_RCC_OscConfig+0x4e6>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d111      	bne.n	80065c8 <HAL_RCC_OscConfig+0x4ac>
 80065a4:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80065a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a8:	4a05      	ldr	r2, [pc, #20]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	6713      	str	r3, [r2, #112]	; 0x70
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b4:	4a02      	ldr	r2, [pc, #8]	; (80065c0 <HAL_RCC_OscConfig+0x4a4>)
 80065b6:	f023 0304 	bic.w	r3, r3, #4
 80065ba:	6713      	str	r3, [r2, #112]	; 0x70
 80065bc:	e021      	b.n	8006602 <HAL_RCC_OscConfig+0x4e6>
 80065be:	bf00      	nop
 80065c0:	58024400 	.word	0x58024400
 80065c4:	58024800 	.word	0x58024800
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b05      	cmp	r3, #5
 80065ce:	d10c      	bne.n	80065ea <HAL_RCC_OscConfig+0x4ce>
 80065d0:	4b83      	ldr	r3, [pc, #524]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d4:	4a82      	ldr	r2, [pc, #520]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80065d6:	f043 0304 	orr.w	r3, r3, #4
 80065da:	6713      	str	r3, [r2, #112]	; 0x70
 80065dc:	4b80      	ldr	r3, [pc, #512]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	4a7f      	ldr	r2, [pc, #508]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	6713      	str	r3, [r2, #112]	; 0x70
 80065e8:	e00b      	b.n	8006602 <HAL_RCC_OscConfig+0x4e6>
 80065ea:	4b7d      	ldr	r3, [pc, #500]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	4a7c      	ldr	r2, [pc, #496]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	6713      	str	r3, [r2, #112]	; 0x70
 80065f6:	4b7a      	ldr	r3, [pc, #488]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	4a79      	ldr	r2, [pc, #484]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80065fc:	f023 0304 	bic.w	r3, r3, #4
 8006600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d015      	beq.n	8006636 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660a:	f7fb ffc9 	bl	80025a0 <HAL_GetTick>
 800660e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006610:	e00a      	b.n	8006628 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006612:	f7fb ffc5 	bl	80025a0 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006620:	4293      	cmp	r3, r2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e14b      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006628:	4b6d      	ldr	r3, [pc, #436]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0ee      	beq.n	8006612 <HAL_RCC_OscConfig+0x4f6>
 8006634:	e014      	b.n	8006660 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006636:	f7fb ffb3 	bl	80025a0 <HAL_GetTick>
 800663a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800663c:	e00a      	b.n	8006654 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663e:	f7fb ffaf 	bl	80025a0 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	f241 3288 	movw	r2, #5000	; 0x1388
 800664c:	4293      	cmp	r3, r2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e135      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006654:	4b62      	ldr	r3, [pc, #392]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1ee      	bne.n	800663e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 812a 	beq.w	80068be <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800666a:	4b5d      	ldr	r3, [pc, #372]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006672:	2b18      	cmp	r3, #24
 8006674:	f000 80ba 	beq.w	80067ec <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b02      	cmp	r3, #2
 800667e:	f040 8095 	bne.w	80067ac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006682:	4b57      	ldr	r3, [pc, #348]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a56      	ldr	r2, [pc, #344]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800668c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fb ff87 	bl	80025a0 <HAL_GetTick>
 8006692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006696:	f7fb ff83 	bl	80025a0 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e10b      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066a8:	4b4d      	ldr	r3, [pc, #308]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f0      	bne.n	8006696 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066b4:	4b4a      	ldr	r3, [pc, #296]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80066b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066b8:	4b4a      	ldr	r3, [pc, #296]	; (80067e4 <HAL_RCC_OscConfig+0x6c8>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80066c4:	0112      	lsls	r2, r2, #4
 80066c6:	430a      	orrs	r2, r1
 80066c8:	4945      	ldr	r1, [pc, #276]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	628b      	str	r3, [r1, #40]	; 0x28
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	3b01      	subs	r3, #1
 80066d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	3b01      	subs	r3, #1
 80066de:	025b      	lsls	r3, r3, #9
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	3b01      	subs	r3, #1
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f6:	3b01      	subs	r3, #1
 80066f8:	061b      	lsls	r3, r3, #24
 80066fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066fe:	4938      	ldr	r1, [pc, #224]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006700:	4313      	orrs	r3, r2
 8006702:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006704:	4b36      	ldr	r3, [pc, #216]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	4a35      	ldr	r2, [pc, #212]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 800670a:	f023 0301 	bic.w	r3, r3, #1
 800670e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006710:	4b33      	ldr	r3, [pc, #204]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006714:	4b34      	ldr	r3, [pc, #208]	; (80067e8 <HAL_RCC_OscConfig+0x6cc>)
 8006716:	4013      	ands	r3, r2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800671c:	00d2      	lsls	r2, r2, #3
 800671e:	4930      	ldr	r1, [pc, #192]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006720:	4313      	orrs	r3, r2
 8006722:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006724:	4b2e      	ldr	r3, [pc, #184]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	f023 020c 	bic.w	r2, r3, #12
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	492b      	ldr	r1, [pc, #172]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006732:	4313      	orrs	r3, r2
 8006734:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006736:	4b2a      	ldr	r3, [pc, #168]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	f023 0202 	bic.w	r2, r3, #2
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	4927      	ldr	r1, [pc, #156]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006744:	4313      	orrs	r3, r2
 8006746:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006748:	4b25      	ldr	r3, [pc, #148]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	4a24      	ldr	r2, [pc, #144]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 800674e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006754:	4b22      	ldr	r3, [pc, #136]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	4a21      	ldr	r2, [pc, #132]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 800675a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006760:	4b1f      	ldr	r3, [pc, #124]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	4a1e      	ldr	r2, [pc, #120]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800676a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800676c:	4b1c      	ldr	r3, [pc, #112]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	4a1b      	ldr	r2, [pc, #108]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006778:	4b19      	ldr	r3, [pc, #100]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a18      	ldr	r2, [pc, #96]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 800677e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006784:	f7fb ff0c 	bl	80025a0 <HAL_GetTick>
 8006788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800678c:	f7fb ff08 	bl	80025a0 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e090      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800679e:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0x670>
 80067aa:	e088      	b.n	80068be <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ac:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a0b      	ldr	r2, [pc, #44]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80067b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b8:	f7fb fef2 	bl	80025a0 <HAL_GetTick>
 80067bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c0:	f7fb feee 	bl	80025a0 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e076      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067d2:	4b03      	ldr	r3, [pc, #12]	; (80067e0 <HAL_RCC_OscConfig+0x6c4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x6a4>
 80067de:	e06e      	b.n	80068be <HAL_RCC_OscConfig+0x7a2>
 80067e0:	58024400 	.word	0x58024400
 80067e4:	fffffc0c 	.word	0xfffffc0c
 80067e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067ec:	4b36      	ldr	r3, [pc, #216]	; (80068c8 <HAL_RCC_OscConfig+0x7ac>)
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067f2:	4b35      	ldr	r3, [pc, #212]	; (80068c8 <HAL_RCC_OscConfig+0x7ac>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d031      	beq.n	8006864 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f003 0203 	and.w	r2, r3, #3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d12a      	bne.n	8006864 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800681a:	429a      	cmp	r2, r3
 800681c:	d122      	bne.n	8006864 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006828:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800682a:	429a      	cmp	r2, r3
 800682c:	d11a      	bne.n	8006864 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	0a5b      	lsrs	r3, r3, #9
 8006832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800683c:	429a      	cmp	r2, r3
 800683e:	d111      	bne.n	8006864 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	0c1b      	lsrs	r3, r3, #16
 8006844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800684e:	429a      	cmp	r2, r3
 8006850:	d108      	bne.n	8006864 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	0e1b      	lsrs	r3, r3, #24
 8006856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006860:	429a      	cmp	r2, r3
 8006862:	d001      	beq.n	8006868 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e02b      	b.n	80068c0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006868:	4b17      	ldr	r3, [pc, #92]	; (80068c8 <HAL_RCC_OscConfig+0x7ac>)
 800686a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686c:	08db      	lsrs	r3, r3, #3
 800686e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006872:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	429a      	cmp	r2, r3
 800687c:	d01f      	beq.n	80068be <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <HAL_RCC_OscConfig+0x7ac>)
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	4a11      	ldr	r2, [pc, #68]	; (80068c8 <HAL_RCC_OscConfig+0x7ac>)
 8006884:	f023 0301 	bic.w	r3, r3, #1
 8006888:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800688a:	f7fb fe89 	bl	80025a0 <HAL_GetTick>
 800688e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006890:	bf00      	nop
 8006892:	f7fb fe85 	bl	80025a0 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	4293      	cmp	r3, r2
 800689c:	d0f9      	beq.n	8006892 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800689e:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <HAL_RCC_OscConfig+0x7ac>)
 80068a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a2:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <HAL_RCC_OscConfig+0x7b0>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068aa:	00d2      	lsls	r2, r2, #3
 80068ac:	4906      	ldr	r1, [pc, #24]	; (80068c8 <HAL_RCC_OscConfig+0x7ac>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <HAL_RCC_OscConfig+0x7ac>)
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	4a04      	ldr	r2, [pc, #16]	; (80068c8 <HAL_RCC_OscConfig+0x7ac>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3730      	adds	r7, #48	; 0x30
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	58024400 	.word	0x58024400
 80068cc:	ffff0007 	.word	0xffff0007

080068d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e19c      	b.n	8006c1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068e4:	4b8a      	ldr	r3, [pc, #552]	; (8006b10 <HAL_RCC_ClockConfig+0x240>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d910      	bls.n	8006914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f2:	4b87      	ldr	r3, [pc, #540]	; (8006b10 <HAL_RCC_ClockConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 020f 	bic.w	r2, r3, #15
 80068fa:	4985      	ldr	r1, [pc, #532]	; (8006b10 <HAL_RCC_ClockConfig+0x240>)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	4313      	orrs	r3, r2
 8006900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006902:	4b83      	ldr	r3, [pc, #524]	; (8006b10 <HAL_RCC_ClockConfig+0x240>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d001      	beq.n	8006914 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e184      	b.n	8006c1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d010      	beq.n	8006942 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	4b7b      	ldr	r3, [pc, #492]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800692c:	429a      	cmp	r2, r3
 800692e:	d908      	bls.n	8006942 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006930:	4b78      	ldr	r3, [pc, #480]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	4975      	ldr	r1, [pc, #468]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 800693e:	4313      	orrs	r3, r2
 8006940:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d010      	beq.n	8006970 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	4b70      	ldr	r3, [pc, #448]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800695a:	429a      	cmp	r2, r3
 800695c:	d908      	bls.n	8006970 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800695e:	4b6d      	ldr	r3, [pc, #436]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	496a      	ldr	r1, [pc, #424]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 800696c:	4313      	orrs	r3, r2
 800696e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	d010      	beq.n	800699e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	4b64      	ldr	r3, [pc, #400]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006988:	429a      	cmp	r2, r3
 800698a:	d908      	bls.n	800699e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800698c:	4b61      	ldr	r3, [pc, #388]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	495e      	ldr	r1, [pc, #376]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 800699a:	4313      	orrs	r3, r2
 800699c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d010      	beq.n	80069cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69da      	ldr	r2, [r3, #28]
 80069ae:	4b59      	ldr	r3, [pc, #356]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d908      	bls.n	80069cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069ba:	4b56      	ldr	r3, [pc, #344]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	4953      	ldr	r1, [pc, #332]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d010      	beq.n	80069fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	4b4d      	ldr	r3, [pc, #308]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d908      	bls.n	80069fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e8:	4b4a      	ldr	r3, [pc, #296]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f023 020f 	bic.w	r2, r3, #15
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4947      	ldr	r1, [pc, #284]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d055      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a06:	4b43      	ldr	r3, [pc, #268]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	4940      	ldr	r1, [pc, #256]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d107      	bne.n	8006a30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a20:	4b3c      	ldr	r3, [pc, #240]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d121      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e0f6      	b.n	8006c1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d107      	bne.n	8006a48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a38:	4b36      	ldr	r3, [pc, #216]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d115      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0ea      	b.n	8006c1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d107      	bne.n	8006a60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a50:	4b30      	ldr	r3, [pc, #192]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d109      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e0de      	b.n	8006c1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a60:	4b2c      	ldr	r3, [pc, #176]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0d6      	b.n	8006c1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a70:	4b28      	ldr	r3, [pc, #160]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f023 0207 	bic.w	r2, r3, #7
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4925      	ldr	r1, [pc, #148]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a82:	f7fb fd8d 	bl	80025a0 <HAL_GetTick>
 8006a86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a88:	e00a      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a8a:	f7fb fd89 	bl	80025a0 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e0be      	b.n	8006c1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aa0:	4b1c      	ldr	r3, [pc, #112]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	00db      	lsls	r3, r3, #3
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d1eb      	bne.n	8006a8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d010      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d208      	bcs.n	8006ae0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ace:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f023 020f 	bic.w	r2, r3, #15
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	490e      	ldr	r1, [pc, #56]	; (8006b14 <HAL_RCC_ClockConfig+0x244>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <HAL_RCC_ClockConfig+0x240>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d214      	bcs.n	8006b18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aee:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <HAL_RCC_ClockConfig+0x240>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f023 020f 	bic.w	r2, r3, #15
 8006af6:	4906      	ldr	r1, [pc, #24]	; (8006b10 <HAL_RCC_ClockConfig+0x240>)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006afe:	4b04      	ldr	r3, [pc, #16]	; (8006b10 <HAL_RCC_ClockConfig+0x240>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d005      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e086      	b.n	8006c1e <HAL_RCC_ClockConfig+0x34e>
 8006b10:	52002000 	.word	0x52002000
 8006b14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d010      	beq.n	8006b46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d208      	bcs.n	8006b46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b34:	4b3c      	ldr	r3, [pc, #240]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	4939      	ldr	r1, [pc, #228]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d010      	beq.n	8006b74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695a      	ldr	r2, [r3, #20]
 8006b56:	4b34      	ldr	r3, [pc, #208]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d208      	bcs.n	8006b74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b62:	4b31      	ldr	r3, [pc, #196]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	492e      	ldr	r1, [pc, #184]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d010      	beq.n	8006ba2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699a      	ldr	r2, [r3, #24]
 8006b84:	4b28      	ldr	r3, [pc, #160]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d208      	bcs.n	8006ba2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b90:	4b25      	ldr	r3, [pc, #148]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	4922      	ldr	r1, [pc, #136]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d010      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69da      	ldr	r2, [r3, #28]
 8006bb2:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d208      	bcs.n	8006bd0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	4917      	ldr	r1, [pc, #92]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bd0:	f000 f834 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	0a1b      	lsrs	r3, r3, #8
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	4912      	ldr	r1, [pc, #72]	; (8006c2c <HAL_RCC_ClockConfig+0x35c>)
 8006be2:	5ccb      	ldrb	r3, [r1, r3]
 8006be4:	f003 031f 	and.w	r3, r3, #31
 8006be8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bee:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <HAL_RCC_ClockConfig+0x358>)
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <HAL_RCC_ClockConfig+0x35c>)
 8006bf8:	5cd3      	ldrb	r3, [r2, r3]
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	fa22 f303 	lsr.w	r3, r2, r3
 8006c04:	4a0a      	ldr	r2, [pc, #40]	; (8006c30 <HAL_RCC_ClockConfig+0x360>)
 8006c06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c08:	4a0a      	ldr	r2, [pc, #40]	; (8006c34 <HAL_RCC_ClockConfig+0x364>)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006c0e:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <HAL_RCC_ClockConfig+0x368>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fb fc7a 	bl	800250c <HAL_InitTick>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	0800c754 	.word	0x0800c754
 8006c30:	24000008 	.word	0x24000008
 8006c34:	24000004 	.word	0x24000004
 8006c38:	2400000c 	.word	0x2400000c

08006c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b089      	sub	sp, #36	; 0x24
 8006c40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c42:	4bb3      	ldr	r3, [pc, #716]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c4a:	2b18      	cmp	r3, #24
 8006c4c:	f200 8155 	bhi.w	8006efa <HAL_RCC_GetSysClockFreq+0x2be>
 8006c50:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c56:	bf00      	nop
 8006c58:	08006cbd 	.word	0x08006cbd
 8006c5c:	08006efb 	.word	0x08006efb
 8006c60:	08006efb 	.word	0x08006efb
 8006c64:	08006efb 	.word	0x08006efb
 8006c68:	08006efb 	.word	0x08006efb
 8006c6c:	08006efb 	.word	0x08006efb
 8006c70:	08006efb 	.word	0x08006efb
 8006c74:	08006efb 	.word	0x08006efb
 8006c78:	08006ce3 	.word	0x08006ce3
 8006c7c:	08006efb 	.word	0x08006efb
 8006c80:	08006efb 	.word	0x08006efb
 8006c84:	08006efb 	.word	0x08006efb
 8006c88:	08006efb 	.word	0x08006efb
 8006c8c:	08006efb 	.word	0x08006efb
 8006c90:	08006efb 	.word	0x08006efb
 8006c94:	08006efb 	.word	0x08006efb
 8006c98:	08006ce9 	.word	0x08006ce9
 8006c9c:	08006efb 	.word	0x08006efb
 8006ca0:	08006efb 	.word	0x08006efb
 8006ca4:	08006efb 	.word	0x08006efb
 8006ca8:	08006efb 	.word	0x08006efb
 8006cac:	08006efb 	.word	0x08006efb
 8006cb0:	08006efb 	.word	0x08006efb
 8006cb4:	08006efb 	.word	0x08006efb
 8006cb8:	08006cef 	.word	0x08006cef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cbc:	4b94      	ldr	r3, [pc, #592]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cc8:	4b91      	ldr	r3, [pc, #580]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	08db      	lsrs	r3, r3, #3
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	4a90      	ldr	r2, [pc, #576]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006cda:	e111      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006cdc:	4b8d      	ldr	r3, [pc, #564]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cde:	61bb      	str	r3, [r7, #24]
      break;
 8006ce0:	e10e      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ce2:	4b8d      	ldr	r3, [pc, #564]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ce4:	61bb      	str	r3, [r7, #24]
      break;
 8006ce6:	e10b      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ce8:	4b8c      	ldr	r3, [pc, #560]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006cea:	61bb      	str	r3, [r7, #24]
      break;
 8006cec:	e108      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cee:	4b88      	ldr	r3, [pc, #544]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006cf8:	4b85      	ldr	r3, [pc, #532]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	091b      	lsrs	r3, r3, #4
 8006cfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d04:	4b82      	ldr	r3, [pc, #520]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d0e:	4b80      	ldr	r3, [pc, #512]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	08db      	lsrs	r3, r3, #3
 8006d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	fb02 f303 	mul.w	r3, r2, r3
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 80e1 	beq.w	8006ef4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	f000 8083 	beq.w	8006e40 <HAL_RCC_GetSysClockFreq+0x204>
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	f200 80a1 	bhi.w	8006e84 <HAL_RCC_GetSysClockFreq+0x248>
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_RCC_GetSysClockFreq+0x114>
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d056      	beq.n	8006dfc <HAL_RCC_GetSysClockFreq+0x1c0>
 8006d4e:	e099      	b.n	8006e84 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d50:	4b6f      	ldr	r3, [pc, #444]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d02d      	beq.n	8006db8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d5c:	4b6c      	ldr	r3, [pc, #432]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	08db      	lsrs	r3, r3, #3
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	4a6b      	ldr	r2, [pc, #428]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d68:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	ee07 3a90 	vmov	s15, r3
 8006d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d86:	4b62      	ldr	r3, [pc, #392]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006db6:	e087      	b.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006f24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dca:	4b51      	ldr	r3, [pc, #324]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dde:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dfa:	e065      	b.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006f28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0e:	4b40      	ldr	r3, [pc, #256]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e3e:	e043      	b.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006f2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e52:	4b2f      	ldr	r3, [pc, #188]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5a:	ee07 3a90 	vmov	s15, r3
 8006e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e82:	e021      	b.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006f28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e96:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eaa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ec6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006ec8:	4b11      	ldr	r3, [pc, #68]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	0a5b      	lsrs	r3, r3, #9
 8006ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	ee07 3a90 	vmov	s15, r3
 8006edc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eec:	ee17 3a90 	vmov	r3, s15
 8006ef0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006ef2:	e005      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61bb      	str	r3, [r7, #24]
      break;
 8006ef8:	e002      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006efa:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006efc:	61bb      	str	r3, [r7, #24]
      break;
 8006efe:	bf00      	nop
  }

  return sysclockfreq;
 8006f00:	69bb      	ldr	r3, [r7, #24]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3724      	adds	r7, #36	; 0x24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	58024400 	.word	0x58024400
 8006f14:	03d09000 	.word	0x03d09000
 8006f18:	003d0900 	.word	0x003d0900
 8006f1c:	007a1200 	.word	0x007a1200
 8006f20:	46000000 	.word	0x46000000
 8006f24:	4c742400 	.word	0x4c742400
 8006f28:	4a742400 	.word	0x4a742400
 8006f2c:	4af42400 	.word	0x4af42400

08006f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006f36:	f7ff fe81 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	0a1b      	lsrs	r3, r3, #8
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	490f      	ldr	r1, [pc, #60]	; (8006f84 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f48:	5ccb      	ldrb	r3, [r1, r3]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f54:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	f003 030f 	and.w	r3, r3, #15
 8006f5c:	4a09      	ldr	r2, [pc, #36]	; (8006f84 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f5e:	5cd3      	ldrb	r3, [r2, r3]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6a:	4a07      	ldr	r2, [pc, #28]	; (8006f88 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f6e:	4a07      	ldr	r2, [pc, #28]	; (8006f8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f74:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f76:	681b      	ldr	r3, [r3, #0]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	58024400 	.word	0x58024400
 8006f84:	0800c754 	.word	0x0800c754
 8006f88:	24000008 	.word	0x24000008
 8006f8c:	24000004 	.word	0x24000004

08006f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f94:	f7ff ffcc 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	091b      	lsrs	r3, r3, #4
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	4904      	ldr	r1, [pc, #16]	; (8006fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fa6:	5ccb      	ldrb	r3, [r1, r3]
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	0800c754 	.word	0x0800c754

08006fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006fc0:	f7ff ffb6 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	4904      	ldr	r1, [pc, #16]	; (8006fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fd2:	5ccb      	ldrb	r3, [r1, r3]
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	0800c754 	.word	0x0800c754

08006fe8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fec:	b0c6      	sub	sp, #280	; 0x118
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800700c:	2500      	movs	r5, #0
 800700e:	ea54 0305 	orrs.w	r3, r4, r5
 8007012:	d049      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800701a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800701e:	d02f      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007020:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007024:	d828      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800702a:	d01a      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800702c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007030:	d822      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800703a:	d007      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800703c:	e01c      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703e:	4bab      	ldr	r3, [pc, #684]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	4aaa      	ldr	r2, [pc, #680]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007048:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800704a:	e01a      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007050:	3308      	adds	r3, #8
 8007052:	2102      	movs	r1, #2
 8007054:	4618      	mov	r0, r3
 8007056:	f001 fc25 	bl	80088a4 <RCCEx_PLL2_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007060:	e00f      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007066:	3328      	adds	r3, #40	; 0x28
 8007068:	2102      	movs	r1, #2
 800706a:	4618      	mov	r0, r3
 800706c:	f001 fccc 	bl	8008a08 <RCCEx_PLL3_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007076:	e004      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800707e:	e000      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007082:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800708a:	4b98      	ldr	r3, [pc, #608]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800708c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007098:	4a94      	ldr	r2, [pc, #592]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800709a:	430b      	orrs	r3, r1
 800709c:	6513      	str	r3, [r2, #80]	; 0x50
 800709e:	e003      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80070b4:	f04f 0900 	mov.w	r9, #0
 80070b8:	ea58 0309 	orrs.w	r3, r8, r9
 80070bc:	d047      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80070be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d82a      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070e5 	.word	0x080070e5
 80070d4:	080070f3 	.word	0x080070f3
 80070d8:	08007109 	.word	0x08007109
 80070dc:	08007127 	.word	0x08007127
 80070e0:	08007127 	.word	0x08007127
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e4:	4b81      	ldr	r3, [pc, #516]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e8:	4a80      	ldr	r2, [pc, #512]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070f0:	e01a      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f6:	3308      	adds	r3, #8
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 fbd2 	bl	80088a4 <RCCEx_PLL2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007106:	e00f      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710c:	3328      	adds	r3, #40	; 0x28
 800710e:	2100      	movs	r1, #0
 8007110:	4618      	mov	r0, r3
 8007112:	f001 fc79 	bl	8008a08 <RCCEx_PLL3_Config>
 8007116:	4603      	mov	r3, r0
 8007118:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800711c:	e004      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007124:	e000      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007128:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007130:	4b6e      	ldr	r3, [pc, #440]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007134:	f023 0107 	bic.w	r1, r3, #7
 8007138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713e:	4a6b      	ldr	r2, [pc, #428]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007140:	430b      	orrs	r3, r1
 8007142:	6513      	str	r3, [r2, #80]	; 0x50
 8007144:	e003      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007146:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800714a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800715a:	f04f 0b00 	mov.w	fp, #0
 800715e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007162:	d05b      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007168:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800716c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007170:	d03b      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007172:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007176:	d834      	bhi.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007178:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800717c:	d037      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 800717e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007182:	d82e      	bhi.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007184:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007188:	d033      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800718a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800718e:	d828      	bhi.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007194:	d01a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800719a:	d822      	bhi.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80071a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071a4:	d007      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80071a6:	e01c      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a8:	4b50      	ldr	r3, [pc, #320]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	4a4f      	ldr	r2, [pc, #316]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071b4:	e01e      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ba:	3308      	adds	r3, #8
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 fb70 	bl	80088a4 <RCCEx_PLL2_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80071ca:	e013      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d0:	3328      	adds	r3, #40	; 0x28
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f001 fc17 	bl	8008a08 <RCCEx_PLL3_Config>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071e0:	e008      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80071e8:	e004      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80071ea:	bf00      	nop
 80071ec:	e002      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80071ee:	bf00      	nop
 80071f0:	e000      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80071f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071fc:	4b3b      	ldr	r3, [pc, #236]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007200:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007208:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800720c:	4a37      	ldr	r2, [pc, #220]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800720e:	430b      	orrs	r3, r1
 8007210:	6593      	str	r3, [r2, #88]	; 0x58
 8007212:	e003      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007218:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800722c:	2300      	movs	r3, #0
 800722e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007232:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007236:	460b      	mov	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	d05d      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007240:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007244:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007248:	d03b      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800724a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800724e:	d834      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007254:	d037      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800725a:	d82e      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800725c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007260:	d033      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007262:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007266:	d828      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800726c:	d01a      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800726e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007272:	d822      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800727c:	d007      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800727e:	e01c      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007280:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	4a19      	ldr	r2, [pc, #100]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800728a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800728c:	e01e      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800728e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007292:	3308      	adds	r3, #8
 8007294:	2100      	movs	r1, #0
 8007296:	4618      	mov	r0, r3
 8007298:	f001 fb04 	bl	80088a4 <RCCEx_PLL2_Config>
 800729c:	4603      	mov	r3, r0
 800729e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80072a2:	e013      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a8:	3328      	adds	r3, #40	; 0x28
 80072aa:	2100      	movs	r1, #0
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 fbab 	bl	8008a08 <RCCEx_PLL3_Config>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072b8:	e008      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80072c0:	e004      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80072c2:	bf00      	nop
 80072c4:	e002      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80072c6:	bf00      	nop
 80072c8:	e000      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80072ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10d      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072e4:	4a01      	ldr	r2, [pc, #4]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072e6:	430b      	orrs	r3, r1
 80072e8:	6593      	str	r3, [r2, #88]	; 0x58
 80072ea:	e005      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80072ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007304:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007308:	2300      	movs	r3, #0
 800730a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800730e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007312:	460b      	mov	r3, r1
 8007314:	4313      	orrs	r3, r2
 8007316:	d03a      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731e:	2b30      	cmp	r3, #48	; 0x30
 8007320:	d01f      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007322:	2b30      	cmp	r3, #48	; 0x30
 8007324:	d819      	bhi.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007326:	2b20      	cmp	r3, #32
 8007328:	d00c      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800732a:	2b20      	cmp	r3, #32
 800732c:	d815      	bhi.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d019      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007332:	2b10      	cmp	r3, #16
 8007334:	d111      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007336:	4baa      	ldr	r3, [pc, #680]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	4aa9      	ldr	r2, [pc, #676]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800733c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007340:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007342:	e011      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007348:	3308      	adds	r3, #8
 800734a:	2102      	movs	r1, #2
 800734c:	4618      	mov	r0, r3
 800734e:	f001 faa9 	bl	80088a4 <RCCEx_PLL2_Config>
 8007352:	4603      	mov	r3, r0
 8007354:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007358:	e006      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007362:	bf00      	nop
 8007364:	e000      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007368:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007370:	4b9b      	ldr	r3, [pc, #620]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007374:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737e:	4a98      	ldr	r2, [pc, #608]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007380:	430b      	orrs	r3, r1
 8007382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007384:	e003      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007386:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800738a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800738e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800739a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800739e:	2300      	movs	r3, #0
 80073a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80073a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d051      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073b8:	d035      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80073ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073be:	d82e      	bhi.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073c4:	d031      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80073c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073ca:	d828      	bhi.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d0:	d01a      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80073d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d6:	d822      	bhi.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80073dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e0:	d007      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80073e2:	e01c      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e4:	4b7e      	ldr	r3, [pc, #504]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	4a7d      	ldr	r2, [pc, #500]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073f0:	e01c      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f6:	3308      	adds	r3, #8
 80073f8:	2100      	movs	r1, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 fa52 	bl	80088a4 <RCCEx_PLL2_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007406:	e011      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740c:	3328      	adds	r3, #40	; 0x28
 800740e:	2100      	movs	r1, #0
 8007410:	4618      	mov	r0, r3
 8007412:	f001 faf9 	bl	8008a08 <RCCEx_PLL3_Config>
 8007416:	4603      	mov	r3, r0
 8007418:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800741c:	e006      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007424:	e002      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800742a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800742c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007434:	4b6a      	ldr	r3, [pc, #424]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007438:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007442:	4a67      	ldr	r2, [pc, #412]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007444:	430b      	orrs	r3, r1
 8007446:	6513      	str	r3, [r2, #80]	; 0x50
 8007448:	e003      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800744e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800745e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007462:	2300      	movs	r3, #0
 8007464:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007468:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800746c:	460b      	mov	r3, r1
 800746e:	4313      	orrs	r3, r2
 8007470:	d053      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800747c:	d033      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800747e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007482:	d82c      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007484:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007488:	d02f      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x502>
 800748a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800748e:	d826      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007490:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007494:	d02b      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007496:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800749a:	d820      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800749c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074a0:	d012      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80074a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074a6:	d81a      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d022      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80074ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b0:	d115      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b6:	3308      	adds	r3, #8
 80074b8:	2101      	movs	r1, #1
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 f9f2 	bl	80088a4 <RCCEx_PLL2_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074c6:	e015      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074cc:	3328      	adds	r3, #40	; 0x28
 80074ce:	2101      	movs	r1, #1
 80074d0:	4618      	mov	r0, r3
 80074d2:	f001 fa99 	bl	8008a08 <RCCEx_PLL3_Config>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074dc:	e00a      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80074e4:	e006      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074e6:	bf00      	nop
 80074e8:	e004      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074ea:	bf00      	nop
 80074ec:	e002      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074ee:	bf00      	nop
 80074f0:	e000      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074fc:	4b38      	ldr	r3, [pc, #224]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007500:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750a:	4a35      	ldr	r2, [pc, #212]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800750c:	430b      	orrs	r3, r1
 800750e:	6513      	str	r3, [r2, #80]	; 0x50
 8007510:	e003      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007512:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007516:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800751a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800752a:	2300      	movs	r3, #0
 800752c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007530:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007534:	460b      	mov	r3, r1
 8007536:	4313      	orrs	r3, r2
 8007538:	d058      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007546:	d033      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800754c:	d82c      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007552:	d02f      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007558:	d826      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800755a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800755e:	d02b      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007560:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007564:	d820      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800756a:	d012      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800756c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007570:	d81a      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d022      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800757a:	d115      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800757c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007580:	3308      	adds	r3, #8
 8007582:	2101      	movs	r1, #1
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f98d 	bl	80088a4 <RCCEx_PLL2_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007590:	e015      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007596:	3328      	adds	r3, #40	; 0x28
 8007598:	2101      	movs	r1, #1
 800759a:	4618      	mov	r0, r3
 800759c:	f001 fa34 	bl	8008a08 <RCCEx_PLL3_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075a6:	e00a      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80075ae:	e006      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075b0:	bf00      	nop
 80075b2:	e004      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075b4:	bf00      	nop
 80075b6:	e002      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075b8:	bf00      	nop
 80075ba:	e000      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10e      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80075c6:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80075ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075d6:	4a02      	ldr	r2, [pc, #8]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075d8:	430b      	orrs	r3, r1
 80075da:	6593      	str	r3, [r2, #88]	; 0x58
 80075dc:	e006      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 80075de:	bf00      	nop
 80075e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80075f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075fc:	2300      	movs	r3, #0
 80075fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007602:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007606:	460b      	mov	r3, r1
 8007608:	4313      	orrs	r3, r2
 800760a:	d037      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800760c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007616:	d00e      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800761c:	d816      	bhi.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d018      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007626:	d111      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007628:	4bc4      	ldr	r3, [pc, #784]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	4ac3      	ldr	r2, [pc, #780]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800762e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007634:	e00f      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800763a:	3308      	adds	r3, #8
 800763c:	2101      	movs	r1, #1
 800763e:	4618      	mov	r0, r3
 8007640:	f001 f930 	bl	80088a4 <RCCEx_PLL2_Config>
 8007644:	4603      	mov	r3, r0
 8007646:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800764a:	e004      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007652:	e000      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007656:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800765e:	4bb7      	ldr	r3, [pc, #732]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007662:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800766c:	4ab3      	ldr	r2, [pc, #716]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800766e:	430b      	orrs	r3, r1
 8007670:	6513      	str	r3, [r2, #80]	; 0x50
 8007672:	e003      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007678:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800768c:	2300      	movs	r3, #0
 800768e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007692:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007696:	460b      	mov	r3, r1
 8007698:	4313      	orrs	r3, r2
 800769a:	d039      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d81c      	bhi.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80076a6:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076e9 	.word	0x080076e9
 80076b0:	080076bd 	.word	0x080076bd
 80076b4:	080076cb 	.word	0x080076cb
 80076b8:	080076e9 	.word	0x080076e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076bc:	4b9f      	ldr	r3, [pc, #636]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	4a9e      	ldr	r2, [pc, #632]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076c8:	e00f      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ce:	3308      	adds	r3, #8
 80076d0:	2102      	movs	r1, #2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 f8e6 	bl	80088a4 <RCCEx_PLL2_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076de:	e004      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80076e6:	e000      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80076e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076f2:	4b92      	ldr	r3, [pc, #584]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f6:	f023 0103 	bic.w	r1, r3, #3
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007700:	4a8e      	ldr	r2, [pc, #568]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007702:	430b      	orrs	r3, r1
 8007704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007706:	e003      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800770c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800771c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007720:	2300      	movs	r3, #0
 8007722:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007726:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	f000 8099 	beq.w	8007864 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007732:	4b83      	ldr	r3, [pc, #524]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a82      	ldr	r2, [pc, #520]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800773c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800773e:	f7fa ff2f 	bl	80025a0 <HAL_GetTick>
 8007742:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007746:	e00b      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007748:	f7fa ff2a 	bl	80025a0 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b64      	cmp	r3, #100	; 0x64
 8007756:	d903      	bls.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800775e:	e005      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007760:	4b77      	ldr	r3, [pc, #476]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0ed      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800776c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007770:	2b00      	cmp	r3, #0
 8007772:	d173      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007774:	4b71      	ldr	r3, [pc, #452]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007776:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007780:	4053      	eors	r3, r2
 8007782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007786:	2b00      	cmp	r3, #0
 8007788:	d015      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800778a:	4b6c      	ldr	r3, [pc, #432]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800778c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007792:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007796:	4b69      	ldr	r3, [pc, #420]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779a:	4a68      	ldr	r2, [pc, #416]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800779c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077a2:	4b66      	ldr	r3, [pc, #408]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	4a65      	ldr	r2, [pc, #404]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077ae:	4a63      	ldr	r2, [pc, #396]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c2:	d118      	bne.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c4:	f7fa feec 	bl	80025a0 <HAL_GetTick>
 80077c8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077cc:	e00d      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ce:	f7fa fee7 	bl	80025a0 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80077d8:	1ad2      	subs	r2, r2, r3
 80077da:	f241 3388 	movw	r3, #5000	; 0x1388
 80077de:	429a      	cmp	r2, r3
 80077e0:	d903      	bls.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80077e8:	e005      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077ea:	4b54      	ldr	r3, [pc, #336]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0eb      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80077f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d129      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780e:	d10e      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007810:	4b4a      	ldr	r3, [pc, #296]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007820:	091a      	lsrs	r2, r3, #4
 8007822:	4b48      	ldr	r3, [pc, #288]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007824:	4013      	ands	r3, r2
 8007826:	4a45      	ldr	r2, [pc, #276]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007828:	430b      	orrs	r3, r1
 800782a:	6113      	str	r3, [r2, #16]
 800782c:	e005      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800782e:	4b43      	ldr	r3, [pc, #268]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	4a42      	ldr	r2, [pc, #264]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007834:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007838:	6113      	str	r3, [r2, #16]
 800783a:	4b40      	ldr	r3, [pc, #256]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800783c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800783e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007842:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800784a:	4a3c      	ldr	r2, [pc, #240]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800784c:	430b      	orrs	r3, r1
 800784e:	6713      	str	r3, [r2, #112]	; 0x70
 8007850:	e008      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007852:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007856:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800785a:	e003      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007860:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f002 0301 	and.w	r3, r2, #1
 8007870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007874:	2300      	movs	r3, #0
 8007876:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800787a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800787e:	460b      	mov	r3, r1
 8007880:	4313      	orrs	r3, r2
 8007882:	f000 808f 	beq.w	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800788c:	2b28      	cmp	r3, #40	; 0x28
 800788e:	d871      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007890:	a201      	add	r2, pc, #4	; (adr r2, 8007898 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007896:	bf00      	nop
 8007898:	0800797d 	.word	0x0800797d
 800789c:	08007975 	.word	0x08007975
 80078a0:	08007975 	.word	0x08007975
 80078a4:	08007975 	.word	0x08007975
 80078a8:	08007975 	.word	0x08007975
 80078ac:	08007975 	.word	0x08007975
 80078b0:	08007975 	.word	0x08007975
 80078b4:	08007975 	.word	0x08007975
 80078b8:	08007949 	.word	0x08007949
 80078bc:	08007975 	.word	0x08007975
 80078c0:	08007975 	.word	0x08007975
 80078c4:	08007975 	.word	0x08007975
 80078c8:	08007975 	.word	0x08007975
 80078cc:	08007975 	.word	0x08007975
 80078d0:	08007975 	.word	0x08007975
 80078d4:	08007975 	.word	0x08007975
 80078d8:	0800795f 	.word	0x0800795f
 80078dc:	08007975 	.word	0x08007975
 80078e0:	08007975 	.word	0x08007975
 80078e4:	08007975 	.word	0x08007975
 80078e8:	08007975 	.word	0x08007975
 80078ec:	08007975 	.word	0x08007975
 80078f0:	08007975 	.word	0x08007975
 80078f4:	08007975 	.word	0x08007975
 80078f8:	0800797d 	.word	0x0800797d
 80078fc:	08007975 	.word	0x08007975
 8007900:	08007975 	.word	0x08007975
 8007904:	08007975 	.word	0x08007975
 8007908:	08007975 	.word	0x08007975
 800790c:	08007975 	.word	0x08007975
 8007910:	08007975 	.word	0x08007975
 8007914:	08007975 	.word	0x08007975
 8007918:	0800797d 	.word	0x0800797d
 800791c:	08007975 	.word	0x08007975
 8007920:	08007975 	.word	0x08007975
 8007924:	08007975 	.word	0x08007975
 8007928:	08007975 	.word	0x08007975
 800792c:	08007975 	.word	0x08007975
 8007930:	08007975 	.word	0x08007975
 8007934:	08007975 	.word	0x08007975
 8007938:	0800797d 	.word	0x0800797d
 800793c:	58024400 	.word	0x58024400
 8007940:	58024800 	.word	0x58024800
 8007944:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800794c:	3308      	adds	r3, #8
 800794e:	2101      	movs	r1, #1
 8007950:	4618      	mov	r0, r3
 8007952:	f000 ffa7 	bl	80088a4 <RCCEx_PLL2_Config>
 8007956:	4603      	mov	r3, r0
 8007958:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800795c:	e00f      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007962:	3328      	adds	r3, #40	; 0x28
 8007964:	2101      	movs	r1, #1
 8007966:	4618      	mov	r0, r3
 8007968:	f001 f84e 	bl	8008a08 <RCCEx_PLL3_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007972:	e004      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800797a:	e000      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800797c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800797e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007986:	4bbf      	ldr	r3, [pc, #764]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007994:	4abb      	ldr	r2, [pc, #748]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007996:	430b      	orrs	r3, r1
 8007998:	6553      	str	r3, [r2, #84]	; 0x54
 800799a:	e003      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f002 0302 	and.w	r3, r2, #2
 80079b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079b4:	2300      	movs	r3, #0
 80079b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80079be:	460b      	mov	r3, r1
 80079c0:	4313      	orrs	r3, r2
 80079c2:	d041      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ca:	2b05      	cmp	r3, #5
 80079cc:	d824      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80079ce:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	08007a21 	.word	0x08007a21
 80079d8:	080079ed 	.word	0x080079ed
 80079dc:	08007a03 	.word	0x08007a03
 80079e0:	08007a21 	.word	0x08007a21
 80079e4:	08007a21 	.word	0x08007a21
 80079e8:	08007a21 	.word	0x08007a21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f0:	3308      	adds	r3, #8
 80079f2:	2101      	movs	r1, #1
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 ff55 	bl	80088a4 <RCCEx_PLL2_Config>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a00:	e00f      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a06:	3328      	adds	r3, #40	; 0x28
 8007a08:	2101      	movs	r1, #1
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fffc 	bl	8008a08 <RCCEx_PLL3_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a16:	e004      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007a1e:	e000      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a2a:	4b96      	ldr	r3, [pc, #600]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	f023 0107 	bic.w	r1, r3, #7
 8007a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a38:	4a92      	ldr	r2, [pc, #584]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	6553      	str	r3, [r2, #84]	; 0x54
 8007a3e:	e003      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f002 0304 	and.w	r3, r2, #4
 8007a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a5e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a62:	460b      	mov	r3, r1
 8007a64:	4313      	orrs	r3, r2
 8007a66:	d044      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a70:	2b05      	cmp	r3, #5
 8007a72:	d825      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007a74:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7a:	bf00      	nop
 8007a7c:	08007ac9 	.word	0x08007ac9
 8007a80:	08007a95 	.word	0x08007a95
 8007a84:	08007aab 	.word	0x08007aab
 8007a88:	08007ac9 	.word	0x08007ac9
 8007a8c:	08007ac9 	.word	0x08007ac9
 8007a90:	08007ac9 	.word	0x08007ac9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a98:	3308      	adds	r3, #8
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 ff01 	bl	80088a4 <RCCEx_PLL2_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007aa8:	e00f      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aae:	3328      	adds	r3, #40	; 0x28
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 ffa8 	bl	8008a08 <RCCEx_PLL3_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007abe:	e004      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007ac6:	e000      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ad2:	4b6c      	ldr	r3, [pc, #432]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad6:	f023 0107 	bic.w	r1, r3, #7
 8007ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae2:	4a68      	ldr	r2, [pc, #416]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ae4:	430b      	orrs	r3, r1
 8007ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8007ae8:	e003      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007aee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	f002 0320 	and.w	r3, r2, #32
 8007afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b02:	2300      	movs	r3, #0
 8007b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	d055      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b1e:	d033      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b24:	d82c      	bhi.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b2a:	d02f      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b30:	d826      	bhi.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b36:	d02b      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007b38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b3c:	d820      	bhi.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b42:	d012      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b48:	d81a      	bhi.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d022      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b52:	d115      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b58:	3308      	adds	r3, #8
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fea1 	bl	80088a4 <RCCEx_PLL2_Config>
 8007b62:	4603      	mov	r3, r0
 8007b64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b68:	e015      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b6e:	3328      	adds	r3, #40	; 0x28
 8007b70:	2102      	movs	r1, #2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 ff48 	bl	8008a08 <RCCEx_PLL3_Config>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b7e:	e00a      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007b86:	e006      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b88:	bf00      	nop
 8007b8a:	e004      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b8c:	bf00      	nop
 8007b8e:	e002      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b90:	bf00      	nop
 8007b92:	e000      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10b      	bne.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b9e:	4b39      	ldr	r3, [pc, #228]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bae:	4a35      	ldr	r2, [pc, #212]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	6553      	str	r3, [r2, #84]	; 0x54
 8007bb4:	e003      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007bca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bd4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	d058      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007be6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007bea:	d033      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007bec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007bf0:	d82c      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf6:	d02f      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bfc:	d826      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007bfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c02:	d02b      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007c04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c08:	d820      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c0e:	d012      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c14:	d81a      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d022      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c1e:	d115      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c24:	3308      	adds	r3, #8
 8007c26:	2100      	movs	r1, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fe3b 	bl	80088a4 <RCCEx_PLL2_Config>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c34:	e015      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3a:	3328      	adds	r3, #40	; 0x28
 8007c3c:	2102      	movs	r1, #2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fee2 	bl	8008a08 <RCCEx_PLL3_Config>
 8007c44:	4603      	mov	r3, r0
 8007c46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c4a:	e00a      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007c52:	e006      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c54:	bf00      	nop
 8007c56:	e004      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c58:	bf00      	nop
 8007c5a:	e002      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c5c:	bf00      	nop
 8007c5e:	e000      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10e      	bne.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c6a:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c7a:	4a02      	ldr	r2, [pc, #8]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c80:	e006      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007c82:	bf00      	nop
 8007c84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ca6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007caa:	460b      	mov	r3, r1
 8007cac:	4313      	orrs	r3, r2
 8007cae:	d055      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007cbc:	d033      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007cbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007cc2:	d82c      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc8:	d02f      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cce:	d826      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cd0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007cd4:	d02b      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007cd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007cda:	d820      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce0:	d012      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce6:	d81a      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d022      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cf0:	d115      	bne.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fdd2 	bl	80088a4 <RCCEx_PLL2_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d06:	e015      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0c:	3328      	adds	r3, #40	; 0x28
 8007d0e:	2102      	movs	r1, #2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fe79 	bl	8008a08 <RCCEx_PLL3_Config>
 8007d16:	4603      	mov	r3, r0
 8007d18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d1c:	e00a      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007d24:	e006      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d26:	bf00      	nop
 8007d28:	e004      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d2a:	bf00      	nop
 8007d2c:	e002      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d2e:	bf00      	nop
 8007d30:	e000      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10b      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d3c:	4ba0      	ldr	r3, [pc, #640]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d4c:	4a9c      	ldr	r2, [pc, #624]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d4e:	430b      	orrs	r3, r1
 8007d50:	6593      	str	r3, [r2, #88]	; 0x58
 8007d52:	e003      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	f002 0308 	and.w	r3, r2, #8
 8007d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d72:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007d76:	460b      	mov	r3, r1
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	d01e      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d88:	d10c      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d8e:	3328      	adds	r3, #40	; 0x28
 8007d90:	2102      	movs	r1, #2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fe38 	bl	8008a08 <RCCEx_PLL3_Config>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007da4:	4b86      	ldr	r3, [pc, #536]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db4:	4a82      	ldr	r2, [pc, #520]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007db6:	430b      	orrs	r3, r1
 8007db8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f002 0310 	and.w	r3, r2, #16
 8007dc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007dd0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	d01e      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de6:	d10c      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dec:	3328      	adds	r3, #40	; 0x28
 8007dee:	2102      	movs	r1, #2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fe09 	bl	8008a08 <RCCEx_PLL3_Config>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e02:	4b6f      	ldr	r3, [pc, #444]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e12:	4a6b      	ldr	r2, [pc, #428]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007e24:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e26:	2300      	movs	r3, #0
 8007e28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e2a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4313      	orrs	r3, r2
 8007e32:	d03e      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e40:	d022      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e46:	d81b      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e50:	d00b      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007e52:	e015      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e58:	3308      	adds	r3, #8
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 fd21 	bl	80088a4 <RCCEx_PLL2_Config>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e68:	e00f      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e6e:	3328      	adds	r3, #40	; 0x28
 8007e70:	2102      	movs	r1, #2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fdc8 	bl	8008a08 <RCCEx_PLL3_Config>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e7e:	e004      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007e86:	e000      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10b      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e92:	4b4b      	ldr	r3, [pc, #300]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e96:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ea2:	4a47      	ldr	r2, [pc, #284]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8007ea8:	e003      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007eae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	677b      	str	r3, [r7, #116]	; 0x74
 8007ec4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	d03b      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007eda:	d01f      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007edc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ee0:	d818      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ee6:	d003      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eec:	d007      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007eee:	e011      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef0:	4b33      	ldr	r3, [pc, #204]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef4:	4a32      	ldr	r2, [pc, #200]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007efc:	e00f      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f02:	3328      	adds	r3, #40	; 0x28
 8007f04:	2101      	movs	r1, #1
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fd7e 	bl	8008a08 <RCCEx_PLL3_Config>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f12:	e004      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007f1a:	e000      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f26:	4b26      	ldr	r3, [pc, #152]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f36:	4a22      	ldr	r2, [pc, #136]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6553      	str	r3, [r2, #84]	; 0x54
 8007f3c:	e003      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f42:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f54:	2300      	movs	r3, #0
 8007f56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f58:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	d034      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f70:	d007      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007f72:	e011      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f74:	4b12      	ldr	r3, [pc, #72]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	4a11      	ldr	r2, [pc, #68]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f80:	e00e      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f86:	3308      	adds	r3, #8
 8007f88:	2102      	movs	r1, #2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fc8a 	bl	80088a4 <RCCEx_PLL2_Config>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f96:	e003      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10d      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fa8:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb6:	4a02      	ldr	r2, [pc, #8]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007fbc:	e006      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007fbe:	bf00      	nop
 8007fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007fc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8007fda:	2300      	movs	r3, #0
 8007fdc:	667b      	str	r3, [r7, #100]	; 0x64
 8007fde:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	d00c      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fec:	3328      	adds	r3, #40	; 0x28
 8007fee:	2102      	movs	r1, #2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 fd09 	bl	8008a08 <RCCEx_PLL3_Config>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800800e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008010:	2300      	movs	r3, #0
 8008012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008014:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008018:	460b      	mov	r3, r1
 800801a:	4313      	orrs	r3, r2
 800801c:	d036      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800801e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008028:	d018      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800802a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800802e:	d811      	bhi.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008034:	d014      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800803a:	d80b      	bhi.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d011      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008044:	d106      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008046:	4bb7      	ldr	r3, [pc, #732]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804a:	4ab6      	ldr	r2, [pc, #728]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800804c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008050:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008052:	e008      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800805a:	e004      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800805c:	bf00      	nop
 800805e:	e002      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008060:	bf00      	nop
 8008062:	e000      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008066:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800806e:	4bad      	ldr	r3, [pc, #692]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008072:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800807c:	4aa9      	ldr	r2, [pc, #676]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800807e:	430b      	orrs	r3, r1
 8008080:	6553      	str	r3, [r2, #84]	; 0x54
 8008082:	e003      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008088:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008098:	653b      	str	r3, [r7, #80]	; 0x50
 800809a:	2300      	movs	r3, #0
 800809c:	657b      	str	r3, [r7, #84]	; 0x54
 800809e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80080a2:	460b      	mov	r3, r1
 80080a4:	4313      	orrs	r3, r2
 80080a6:	d009      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080a8:	4b9e      	ldr	r3, [pc, #632]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80080b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b6:	4a9b      	ldr	r2, [pc, #620]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080b8:	430b      	orrs	r3, r1
 80080ba:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80080c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80080ca:	2300      	movs	r3, #0
 80080cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80080d2:	460b      	mov	r3, r1
 80080d4:	4313      	orrs	r3, r2
 80080d6:	d009      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080d8:	4b92      	ldr	r3, [pc, #584]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080dc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80080e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080e6:	4a8f      	ldr	r2, [pc, #572]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080e8:	430b      	orrs	r3, r1
 80080ea:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80080f8:	643b      	str	r3, [r7, #64]	; 0x40
 80080fa:	2300      	movs	r3, #0
 80080fc:	647b      	str	r3, [r7, #68]	; 0x44
 80080fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008102:	460b      	mov	r3, r1
 8008104:	4313      	orrs	r3, r2
 8008106:	d00e      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008108:	4b86      	ldr	r3, [pc, #536]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	4a85      	ldr	r2, [pc, #532]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800810e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008112:	6113      	str	r3, [r2, #16]
 8008114:	4b83      	ldr	r3, [pc, #524]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008116:	6919      	ldr	r1, [r3, #16]
 8008118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800811c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008120:	4a80      	ldr	r2, [pc, #512]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008122:	430b      	orrs	r3, r1
 8008124:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008132:	63bb      	str	r3, [r7, #56]	; 0x38
 8008134:	2300      	movs	r3, #0
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008138:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800813c:	460b      	mov	r3, r1
 800813e:	4313      	orrs	r3, r2
 8008140:	d009      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008142:	4b78      	ldr	r3, [pc, #480]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008146:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008150:	4a74      	ldr	r2, [pc, #464]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008152:	430b      	orrs	r3, r1
 8008154:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008162:	633b      	str	r3, [r7, #48]	; 0x30
 8008164:	2300      	movs	r3, #0
 8008166:	637b      	str	r3, [r7, #52]	; 0x34
 8008168:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800816c:	460b      	mov	r3, r1
 800816e:	4313      	orrs	r3, r2
 8008170:	d00a      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008172:	4b6c      	ldr	r3, [pc, #432]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008176:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800817a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800817e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008182:	4a68      	ldr	r2, [pc, #416]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008184:	430b      	orrs	r3, r1
 8008186:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	2100      	movs	r1, #0
 8008192:	62b9      	str	r1, [r7, #40]	; 0x28
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800819a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800819e:	460b      	mov	r3, r1
 80081a0:	4313      	orrs	r3, r2
 80081a2:	d011      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a8:	3308      	adds	r3, #8
 80081aa:	2100      	movs	r1, #0
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fb79 	bl	80088a4 <RCCEx_PLL2_Config>
 80081b2:	4603      	mov	r3, r0
 80081b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80081b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80081c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80081c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	2100      	movs	r1, #0
 80081d2:	6239      	str	r1, [r7, #32]
 80081d4:	f003 0302 	and.w	r3, r3, #2
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
 80081da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80081de:	460b      	mov	r3, r1
 80081e0:	4313      	orrs	r3, r2
 80081e2:	d011      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e8:	3308      	adds	r3, #8
 80081ea:	2101      	movs	r1, #1
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 fb59 	bl	80088a4 <RCCEx_PLL2_Config>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80081f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008204:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008210:	2100      	movs	r1, #0
 8008212:	61b9      	str	r1, [r7, #24]
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	61fb      	str	r3, [r7, #28]
 800821a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800821e:	460b      	mov	r3, r1
 8008220:	4313      	orrs	r3, r2
 8008222:	d011      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008228:	3308      	adds	r3, #8
 800822a:	2102      	movs	r1, #2
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fb39 	bl	80088a4 <RCCEx_PLL2_Config>
 8008232:	4603      	mov	r3, r0
 8008234:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008238:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008244:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	2100      	movs	r1, #0
 8008252:	6139      	str	r1, [r7, #16]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	617b      	str	r3, [r7, #20]
 800825a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800825e:	460b      	mov	r3, r1
 8008260:	4313      	orrs	r3, r2
 8008262:	d011      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008268:	3328      	adds	r3, #40	; 0x28
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fbcb 	bl	8008a08 <RCCEx_PLL3_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8008278:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008280:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008284:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	2100      	movs	r1, #0
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800829e:	460b      	mov	r3, r1
 80082a0:	4313      	orrs	r3, r2
 80082a2:	d011      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a8:	3328      	adds	r3, #40	; 0x28
 80082aa:	2101      	movs	r1, #1
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fbab 	bl	8008a08 <RCCEx_PLL3_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80082b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80082c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	2100      	movs	r1, #0
 80082d2:	6039      	str	r1, [r7, #0]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	607b      	str	r3, [r7, #4]
 80082da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80082de:	460b      	mov	r3, r1
 80082e0:	4313      	orrs	r3, r2
 80082e2:	d011      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e8:	3328      	adds	r3, #40	; 0x28
 80082ea:	2102      	movs	r1, #2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 fb8b 	bl	8008a08 <RCCEx_PLL3_Config>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80082f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008300:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008304:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8008308:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	e000      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
}
 8008316:	4618      	mov	r0, r3
 8008318:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800831c:	46bd      	mov	sp, r7
 800831e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008322:	bf00      	nop
 8008324:	58024400 	.word	0x58024400

08008328 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800832c:	f7fe fe00 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 8008330:	4602      	mov	r2, r0
 8008332:	4b06      	ldr	r3, [pc, #24]	; (800834c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	091b      	lsrs	r3, r3, #4
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	4904      	ldr	r1, [pc, #16]	; (8008350 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800833e:	5ccb      	ldrb	r3, [r1, r3]
 8008340:	f003 031f 	and.w	r3, r3, #31
 8008344:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008348:	4618      	mov	r0, r3
 800834a:	bd80      	pop	{r7, pc}
 800834c:	58024400 	.word	0x58024400
 8008350:	0800c754 	.word	0x0800c754

08008354 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008354:	b480      	push	{r7}
 8008356:	b089      	sub	sp, #36	; 0x24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800835c:	4ba1      	ldr	r3, [pc, #644]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	f003 0303 	and.w	r3, r3, #3
 8008364:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008366:	4b9f      	ldr	r3, [pc, #636]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836a:	0b1b      	lsrs	r3, r3, #12
 800836c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008370:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008372:	4b9c      	ldr	r3, [pc, #624]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008376:	091b      	lsrs	r3, r3, #4
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800837e:	4b99      	ldr	r3, [pc, #612]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008382:	08db      	lsrs	r3, r3, #3
 8008384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	fb02 f303 	mul.w	r3, r2, r3
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008396:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8111 	beq.w	80085c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	f000 8083 	beq.w	80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	f200 80a1 	bhi.w	80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d056      	beq.n	800846c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80083be:	e099      	b.n	80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083c0:	4b88      	ldr	r3, [pc, #544]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d02d      	beq.n	8008428 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083cc:	4b85      	ldr	r3, [pc, #532]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	08db      	lsrs	r3, r3, #3
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	4a84      	ldr	r2, [pc, #528]	; (80085e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80083d8:	fa22 f303 	lsr.w	r3, r2, r3
 80083dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	ee07 3a90 	vmov	s15, r3
 80083e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f6:	4b7b      	ldr	r3, [pc, #492]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008406:	ed97 6a03 	vldr	s12, [r7, #12]
 800840a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800840e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800841a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800841e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008422:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008426:	e087      	b.n	8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008432:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80085f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800843a:	4b6a      	ldr	r3, [pc, #424]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800844a:	ed97 6a03 	vldr	s12, [r7, #12]
 800844e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800845a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800845e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800846a:	e065      	b.n	8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008476:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800847a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847e:	4b59      	ldr	r3, [pc, #356]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008492:	eddf 5a56 	vldr	s11, [pc, #344]	; 80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800849a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ae:	e043      	b.n	8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	ee07 3a90 	vmov	s15, r3
 80084b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80085f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80084be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c2:	4b48      	ldr	r3, [pc, #288]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084f2:	e021      	b.n	8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	ee07 3a90 	vmov	s15, r3
 80084fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008506:	4b37      	ldr	r3, [pc, #220]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008516:	ed97 6a03 	vldr	s12, [r7, #12]
 800851a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800851e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800852a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008536:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008538:	4b2a      	ldr	r3, [pc, #168]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800853a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853c:	0a5b      	lsrs	r3, r3, #9
 800853e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800854e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008552:	edd7 6a07 	vldr	s13, [r7, #28]
 8008556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800855a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800855e:	ee17 2a90 	vmov	r2, s15
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008566:	4b1f      	ldr	r3, [pc, #124]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856a:	0c1b      	lsrs	r3, r3, #16
 800856c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008570:	ee07 3a90 	vmov	s15, r3
 8008574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800857c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008580:	edd7 6a07 	vldr	s13, [r7, #28]
 8008584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800858c:	ee17 2a90 	vmov	r2, s15
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008594:	4b13      	ldr	r3, [pc, #76]	; (80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	0e1b      	lsrs	r3, r3, #24
 800859a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80085b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ba:	ee17 2a90 	vmov	r2, s15
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085c2:	e008      	b.n	80085d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	609a      	str	r2, [r3, #8]
}
 80085d6:	bf00      	nop
 80085d8:	3724      	adds	r7, #36	; 0x24
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	58024400 	.word	0x58024400
 80085e8:	03d09000 	.word	0x03d09000
 80085ec:	46000000 	.word	0x46000000
 80085f0:	4c742400 	.word	0x4c742400
 80085f4:	4a742400 	.word	0x4a742400
 80085f8:	4af42400 	.word	0x4af42400

080085fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b089      	sub	sp, #36	; 0x24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008604:	4ba1      	ldr	r3, [pc, #644]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	f003 0303 	and.w	r3, r3, #3
 800860c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800860e:	4b9f      	ldr	r3, [pc, #636]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	0d1b      	lsrs	r3, r3, #20
 8008614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008618:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800861a:	4b9c      	ldr	r3, [pc, #624]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008626:	4b99      	ldr	r3, [pc, #612]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862a:	08db      	lsrs	r3, r3, #3
 800862c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	fb02 f303 	mul.w	r3, r2, r3
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 8111 	beq.w	800886c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b02      	cmp	r3, #2
 800864e:	f000 8083 	beq.w	8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2b02      	cmp	r3, #2
 8008656:	f200 80a1 	bhi.w	800879c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d056      	beq.n	8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008666:	e099      	b.n	800879c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008668:	4b88      	ldr	r3, [pc, #544]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0320 	and.w	r3, r3, #32
 8008670:	2b00      	cmp	r3, #0
 8008672:	d02d      	beq.n	80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008674:	4b85      	ldr	r3, [pc, #532]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	08db      	lsrs	r3, r3, #3
 800867a:	f003 0303 	and.w	r3, r3, #3
 800867e:	4a84      	ldr	r2, [pc, #528]	; (8008890 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008680:	fa22 f303 	lsr.w	r3, r2, r3
 8008684:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	ee07 3a90 	vmov	s15, r3
 800868c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869e:	4b7b      	ldr	r3, [pc, #492]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80086b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086ce:	e087      	b.n	80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008898 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80086de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e2:	4b6a      	ldr	r3, [pc, #424]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008712:	e065      	b.n	80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008726:	4b59      	ldr	r3, [pc, #356]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008736:	ed97 6a03 	vldr	s12, [r7, #12]
 800873a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800873e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800874a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008756:	e043      	b.n	80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008762:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800876a:	4b48      	ldr	r3, [pc, #288]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877a:	ed97 6a03 	vldr	s12, [r7, #12]
 800877e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800878e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008796:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800879a:	e021      	b.n	80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80087aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ae:	4b37      	ldr	r3, [pc, #220]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087be:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80087e0:	4b2a      	ldr	r3, [pc, #168]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	0a5b      	lsrs	r3, r3, #9
 80087e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80087fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008806:	ee17 2a90 	vmov	r2, s15
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800880e:	4b1f      	ldr	r3, [pc, #124]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	0c1b      	lsrs	r3, r3, #16
 8008814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008818:	ee07 3a90 	vmov	s15, r3
 800881c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008824:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008828:	edd7 6a07 	vldr	s13, [r7, #28]
 800882c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008834:	ee17 2a90 	vmov	r2, s15
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800883c:	4b13      	ldr	r3, [pc, #76]	; (800888c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	0e1b      	lsrs	r3, r3, #24
 8008842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008852:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008856:	edd7 6a07 	vldr	s13, [r7, #28]
 800885a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800885e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008862:	ee17 2a90 	vmov	r2, s15
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800886a:	e008      	b.n	800887e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	609a      	str	r2, [r3, #8]
}
 800887e:	bf00      	nop
 8008880:	3724      	adds	r7, #36	; 0x24
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	58024400 	.word	0x58024400
 8008890:	03d09000 	.word	0x03d09000
 8008894:	46000000 	.word	0x46000000
 8008898:	4c742400 	.word	0x4c742400
 800889c:	4a742400 	.word	0x4a742400
 80088a0:	4af42400 	.word	0x4af42400

080088a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088b2:	4b53      	ldr	r3, [pc, #332]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d101      	bne.n	80088c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e099      	b.n	80089f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80088c2:	4b4f      	ldr	r3, [pc, #316]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a4e      	ldr	r2, [pc, #312]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80088c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ce:	f7f9 fe67 	bl	80025a0 <HAL_GetTick>
 80088d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088d4:	e008      	b.n	80088e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088d6:	f7f9 fe63 	bl	80025a0 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d901      	bls.n	80088e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e086      	b.n	80089f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088e8:	4b45      	ldr	r3, [pc, #276]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1f0      	bne.n	80088d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80088f4:	4b42      	ldr	r3, [pc, #264]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	031b      	lsls	r3, r3, #12
 8008902:	493f      	ldr	r1, [pc, #252]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 8008904:	4313      	orrs	r3, r2
 8008906:	628b      	str	r3, [r1, #40]	; 0x28
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	3b01      	subs	r3, #1
 800890e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	3b01      	subs	r3, #1
 8008918:	025b      	lsls	r3, r3, #9
 800891a:	b29b      	uxth	r3, r3
 800891c:	431a      	orrs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	3b01      	subs	r3, #1
 8008924:	041b      	lsls	r3, r3, #16
 8008926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800892a:	431a      	orrs	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	3b01      	subs	r3, #1
 8008932:	061b      	lsls	r3, r3, #24
 8008934:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008938:	4931      	ldr	r1, [pc, #196]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 800893a:	4313      	orrs	r3, r2
 800893c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800893e:	4b30      	ldr	r3, [pc, #192]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 8008940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008942:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	492d      	ldr	r1, [pc, #180]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 800894c:	4313      	orrs	r3, r2
 800894e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008950:	4b2b      	ldr	r3, [pc, #172]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 8008952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008954:	f023 0220 	bic.w	r2, r3, #32
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	4928      	ldr	r1, [pc, #160]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008962:	4b27      	ldr	r3, [pc, #156]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 8008964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008966:	4a26      	ldr	r2, [pc, #152]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 8008968:	f023 0310 	bic.w	r3, r3, #16
 800896c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800896e:	4b24      	ldr	r3, [pc, #144]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 8008970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008972:	4b24      	ldr	r3, [pc, #144]	; (8008a04 <RCCEx_PLL2_Config+0x160>)
 8008974:	4013      	ands	r3, r2
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	69d2      	ldr	r2, [r2, #28]
 800897a:	00d2      	lsls	r2, r2, #3
 800897c:	4920      	ldr	r1, [pc, #128]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 800897e:	4313      	orrs	r3, r2
 8008980:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008982:	4b1f      	ldr	r3, [pc, #124]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 8008984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008986:	4a1e      	ldr	r2, [pc, #120]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 8008988:	f043 0310 	orr.w	r3, r3, #16
 800898c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d106      	bne.n	80089a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008994:	4b1a      	ldr	r3, [pc, #104]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	4a19      	ldr	r2, [pc, #100]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 800899a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800899e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089a0:	e00f      	b.n	80089c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d106      	bne.n	80089b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80089a8:	4b15      	ldr	r3, [pc, #84]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	4a14      	ldr	r2, [pc, #80]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80089ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089b4:	e005      	b.n	80089c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80089b6:	4b12      	ldr	r3, [pc, #72]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	4a11      	ldr	r2, [pc, #68]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80089bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80089c2:	4b0f      	ldr	r3, [pc, #60]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a0e      	ldr	r2, [pc, #56]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80089c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ce:	f7f9 fde7 	bl	80025a0 <HAL_GetTick>
 80089d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089d4:	e008      	b.n	80089e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089d6:	f7f9 fde3 	bl	80025a0 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d901      	bls.n	80089e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e006      	b.n	80089f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <RCCEx_PLL2_Config+0x15c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0f0      	beq.n	80089d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	58024400 	.word	0x58024400
 8008a04:	ffff0007 	.word	0xffff0007

08008a08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a16:	4b53      	ldr	r3, [pc, #332]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d101      	bne.n	8008a26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e099      	b.n	8008b5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a26:	4b4f      	ldr	r3, [pc, #316]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a4e      	ldr	r2, [pc, #312]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a32:	f7f9 fdb5 	bl	80025a0 <HAL_GetTick>
 8008a36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a38:	e008      	b.n	8008a4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a3a:	f7f9 fdb1 	bl	80025a0 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d901      	bls.n	8008a4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e086      	b.n	8008b5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a4c:	4b45      	ldr	r3, [pc, #276]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1f0      	bne.n	8008a3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a58:	4b42      	ldr	r3, [pc, #264]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	051b      	lsls	r3, r3, #20
 8008a66:	493f      	ldr	r1, [pc, #252]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	628b      	str	r3, [r1, #40]	; 0x28
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	025b      	lsls	r3, r3, #9
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	431a      	orrs	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	041b      	lsls	r3, r3, #16
 8008a8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	061b      	lsls	r3, r3, #24
 8008a98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a9c:	4931      	ldr	r1, [pc, #196]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008aa2:	4b30      	ldr	r3, [pc, #192]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	492d      	ldr	r1, [pc, #180]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ab4:	4b2b      	ldr	r3, [pc, #172]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	4928      	ldr	r1, [pc, #160]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ac6:	4b27      	ldr	r3, [pc, #156]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	4a26      	ldr	r2, [pc, #152]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ad2:	4b24      	ldr	r3, [pc, #144]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ad6:	4b24      	ldr	r3, [pc, #144]	; (8008b68 <RCCEx_PLL3_Config+0x160>)
 8008ad8:	4013      	ands	r3, r2
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	69d2      	ldr	r2, [r2, #28]
 8008ade:	00d2      	lsls	r2, r2, #3
 8008ae0:	4920      	ldr	r1, [pc, #128]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ae6:	4b1f      	ldr	r3, [pc, #124]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	4a1e      	ldr	r2, [pc, #120]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d106      	bne.n	8008b06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008af8:	4b1a      	ldr	r3, [pc, #104]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afc:	4a19      	ldr	r2, [pc, #100]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b04:	e00f      	b.n	8008b26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d106      	bne.n	8008b1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b0c:	4b15      	ldr	r3, [pc, #84]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	4a14      	ldr	r2, [pc, #80]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008b12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b18:	e005      	b.n	8008b26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b1a:	4b12      	ldr	r3, [pc, #72]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1e:	4a11      	ldr	r2, [pc, #68]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008b20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b26:	4b0f      	ldr	r3, [pc, #60]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a0e      	ldr	r2, [pc, #56]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b32:	f7f9 fd35 	bl	80025a0 <HAL_GetTick>
 8008b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b38:	e008      	b.n	8008b4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b3a:	f7f9 fd31 	bl	80025a0 <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d901      	bls.n	8008b4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e006      	b.n	8008b5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b4c:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <RCCEx_PLL3_Config+0x15c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0f0      	beq.n	8008b3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	58024400 	.word	0x58024400
 8008b68:	ffff0007 	.word	0xffff0007

08008b6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e10f      	b.n	8008d9e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a87      	ldr	r2, [pc, #540]	; (8008da8 <HAL_SPI_Init+0x23c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d00f      	beq.n	8008bae <HAL_SPI_Init+0x42>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a86      	ldr	r2, [pc, #536]	; (8008dac <HAL_SPI_Init+0x240>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d00a      	beq.n	8008bae <HAL_SPI_Init+0x42>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a84      	ldr	r2, [pc, #528]	; (8008db0 <HAL_SPI_Init+0x244>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d005      	beq.n	8008bae <HAL_SPI_Init+0x42>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b0f      	cmp	r3, #15
 8008ba8:	d901      	bls.n	8008bae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e0f7      	b.n	8008d9e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fe82 	bl	80098b8 <SPI_GetPacketSize>
 8008bb4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a7b      	ldr	r2, [pc, #492]	; (8008da8 <HAL_SPI_Init+0x23c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00c      	beq.n	8008bda <HAL_SPI_Init+0x6e>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a79      	ldr	r2, [pc, #484]	; (8008dac <HAL_SPI_Init+0x240>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d007      	beq.n	8008bda <HAL_SPI_Init+0x6e>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a78      	ldr	r2, [pc, #480]	; (8008db0 <HAL_SPI_Init+0x244>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d002      	beq.n	8008bda <HAL_SPI_Init+0x6e>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b08      	cmp	r3, #8
 8008bd8:	d811      	bhi.n	8008bfe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bde:	4a72      	ldr	r2, [pc, #456]	; (8008da8 <HAL_SPI_Init+0x23c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d009      	beq.n	8008bf8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a70      	ldr	r2, [pc, #448]	; (8008dac <HAL_SPI_Init+0x240>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d004      	beq.n	8008bf8 <HAL_SPI_Init+0x8c>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a6f      	ldr	r2, [pc, #444]	; (8008db0 <HAL_SPI_Init+0x244>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d104      	bne.n	8008c02 <HAL_SPI_Init+0x96>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b10      	cmp	r3, #16
 8008bfc:	d901      	bls.n	8008c02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e0cd      	b.n	8008d9e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d106      	bne.n	8008c1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7f8 fe2c 	bl	8001874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f022 0201 	bic.w	r2, r2, #1
 8008c32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008c3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c48:	d119      	bne.n	8008c7e <HAL_SPI_Init+0x112>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c52:	d103      	bne.n	8008c5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d008      	beq.n	8008c6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10c      	bne.n	8008c7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c6c:	d107      	bne.n	8008c7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00f      	beq.n	8008caa <HAL_SPI_Init+0x13e>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	2b06      	cmp	r3, #6
 8008c90:	d90b      	bls.n	8008caa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	e007      	b.n	8008cba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cb8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69da      	ldr	r2, [r3, #28]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ccc:	ea42 0103 	orr.w	r1, r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68da      	ldr	r2, [r3, #12]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	431a      	orrs	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d1a:	ea42 0103 	orr.w	r1, r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d113      	bne.n	8008d5a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0201 	bic.w	r2, r2, #1
 8008d68:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	40013000 	.word	0x40013000
 8008dac:	40003800 	.word	0x40003800
 8008db0:	40003c00 	.word	0x40003c00

08008db4 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <HAL_SPI_Transmit_IT+0x1a>
 8008dc8:	88fb      	ldrh	r3, [r7, #6]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e08b      	b.n	8008eea <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d001      	beq.n	8008de2 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8008dde:	2302      	movs	r3, #2
 8008de0:	e083      	b.n	8008eea <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d101      	bne.n	8008df0 <HAL_SPI_Transmit_IT+0x3c>
 8008dec:	2302      	movs	r3, #2
 8008dee:	e07c      	b.n	8008eea <HAL_SPI_Transmit_IT+0x136>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	88fa      	ldrh	r2, [r7, #6]
 8008e12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	88fa      	ldrh	r2, [r7, #6]
 8008e1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	2b0f      	cmp	r3, #15
 8008e40:	d903      	bls.n	8008e4a <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	4a2c      	ldr	r2, [pc, #176]	; (8008ef8 <HAL_SPI_Transmit_IT+0x144>)
 8008e46:	675a      	str	r2, [r3, #116]	; 0x74
 8008e48:	e00a      	b.n	8008e60 <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	2b07      	cmp	r3, #7
 8008e50:	d903      	bls.n	8008e5a <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4a29      	ldr	r2, [pc, #164]	; (8008efc <HAL_SPI_Transmit_IT+0x148>)
 8008e56:	675a      	str	r2, [r3, #116]	; 0x74
 8008e58:	e002      	b.n	8008e60 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4a28      	ldr	r2, [pc, #160]	; (8008f00 <HAL_SPI_Transmit_IT+0x14c>)
 8008e5e:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008e68:	d108      	bne.n	8008e7c <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	e009      	b.n	8008e90 <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008e8e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	4b1b      	ldr	r3, [pc, #108]	; (8008f04 <HAL_SPI_Transmit_IT+0x150>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	88f9      	ldrh	r1, [r7, #6]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	6812      	ldr	r2, [r2, #0]
 8008ea0:	430b      	orrs	r3, r1
 8008ea2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0201 	orr.w	r2, r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6919      	ldr	r1, [r3, #16]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	f240 732a 	movw	r3, #1834	; 0x72a
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ed6:	d107      	bne.n	8008ee8 <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ee6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	08009721 	.word	0x08009721
 8008efc:	080096c3 	.word	0x080096c3
 8008f00:	08009669 	.word	0x08009669
 8008f04:	ffff0000 	.word	0xffff0000

08008f08 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d001      	beq.n	8008f26 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008f22:	2302      	movs	r3, #2
 8008f24:	e126      	b.n	8009174 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <HAL_SPI_Transmit_DMA+0x2a>
 8008f2c:	88fb      	ldrh	r3, [r7, #6]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e11e      	b.n	8009174 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d101      	bne.n	8008f44 <HAL_SPI_Transmit_DMA+0x3c>
 8008f40:	2302      	movs	r3, #2
 8008f42:	e117      	b.n	8009174 <HAL_SPI_Transmit_DMA+0x26c>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2203      	movs	r2, #3
 8008f50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	88fa      	ldrh	r2, [r7, #6]
 8008f66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	88fa      	ldrh	r2, [r7, #6]
 8008f6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008f9c:	d108      	bne.n	8008fb0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	e009      	b.n	8008fc4 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008fc2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	2b0f      	cmp	r3, #15
 8008fca:	d905      	bls.n	8008fd8 <HAL_SPI_Transmit_DMA+0xd0>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fd6:	d10f      	bne.n	8008ff8 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008fdc:	2b07      	cmp	r3, #7
 8008fde:	d911      	bls.n	8009004 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fea:	d00b      	beq.n	8009004 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ff0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ff6:	d005      	beq.n	8009004 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e0b7      	b.n	8009174 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	2b07      	cmp	r3, #7
 800900a:	d820      	bhi.n	800904e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009016:	d109      	bne.n	800902c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800901e:	b29b      	uxth	r3, r3
 8009020:	3301      	adds	r3, #1
 8009022:	105b      	asrs	r3, r3, #1
 8009024:	b29a      	uxth	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009036:	d11e      	bne.n	8009076 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800903e:	b29b      	uxth	r3, r3
 8009040:	3303      	adds	r3, #3
 8009042:	109b      	asrs	r3, r3, #2
 8009044:	b29a      	uxth	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800904c:	e013      	b.n	8009076 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	2b0f      	cmp	r3, #15
 8009054:	d80f      	bhi.n	8009076 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009060:	d109      	bne.n	8009076 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009068:	b29b      	uxth	r3, r3
 800906a:	3301      	adds	r3, #1
 800906c:	105b      	asrs	r3, r3, #1
 800906e:	b29a      	uxth	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800907a:	4a40      	ldr	r2, [pc, #256]	; (800917c <HAL_SPI_Transmit_DMA+0x274>)
 800907c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009082:	4a3f      	ldr	r2, [pc, #252]	; (8009180 <HAL_SPI_Transmit_DMA+0x278>)
 8009084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800908a:	4a3e      	ldr	r2, [pc, #248]	; (8009184 <HAL_SPI_Transmit_DMA+0x27c>)
 800908c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009092:	2200      	movs	r2, #0
 8009094:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090a4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ae:	4619      	mov	r1, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3320      	adds	r3, #32
 80090b6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80090c0:	f7f9 fef6 	bl	8002eb0 <HAL_DMA_Start_IT>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d011      	beq.n	80090ee <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d0:	f043 0210 	orr.w	r2, r3, #16
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e042      	b.n	8009174 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f8:	d108      	bne.n	800910c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6859      	ldr	r1, [r3, #4]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	4b20      	ldr	r3, [pc, #128]	; (8009188 <HAL_SPI_Transmit_DMA+0x280>)
 8009106:	400b      	ands	r3, r1
 8009108:	6053      	str	r3, [r2, #4]
 800910a:	e009      	b.n	8009120 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	4b1d      	ldr	r3, [pc, #116]	; (8009188 <HAL_SPI_Transmit_DMA+0x280>)
 8009114:	4013      	ands	r3, r2
 8009116:	88f9      	ldrh	r1, [r7, #6]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	6812      	ldr	r2, [r2, #0]
 800911c:	430b      	orrs	r3, r1
 800911e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	689a      	ldr	r2, [r3, #8]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800912e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	691a      	ldr	r2, [r3, #16]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800913e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0201 	orr.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009158:	d107      	bne.n	800916a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009168:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	080095d3 	.word	0x080095d3
 8009180:	0800958d 	.word	0x0800958d
 8009184:	080095ef 	.word	0x080095ef
 8009188:	ffff0000 	.word	0xffff0000

0800918c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b08a      	sub	sp, #40	; 0x28
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80091a4:	6a3a      	ldr	r2, [r7, #32]
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	4013      	ands	r3, r2
 80091aa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80091b4:	2300      	movs	r3, #0
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091be:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3330      	adds	r3, #48	; 0x30
 80091c6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d010      	beq.n	80091f4 <HAL_SPI_IRQHandler+0x68>
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	f003 0308 	and.w	r3, r3, #8
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00b      	beq.n	80091f4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	699a      	ldr	r2, [r3, #24]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ea:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f9c3 	bl	8009578 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80091f2:	e192      	b.n	800951a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d113      	bne.n	8009226 <HAL_SPI_IRQHandler+0x9a>
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10e      	bne.n	8009226 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	4798      	blx	r3
    hspi->RxISR(hspi);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	4798      	blx	r3
    handled = 1UL;
 8009222:	2301      	movs	r3, #1
 8009224:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10f      	bne.n	8009250 <HAL_SPI_IRQHandler+0xc4>
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009240:	2b00      	cmp	r3, #0
 8009242:	d105      	bne.n	8009250 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
    handled = 1UL;
 800924c:	2301      	movs	r3, #1
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10f      	bne.n	800927a <HAL_SPI_IRQHandler+0xee>
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00a      	beq.n	800927a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	4798      	blx	r3
    handled = 1UL;
 8009276:	2301      	movs	r3, #1
 8009278:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 8147 	bne.w	8009510 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	f003 0308 	and.w	r3, r3, #8
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 808b 	beq.w	80093a4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	699a      	ldr	r2, [r3, #24]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f042 0208 	orr.w	r2, r2, #8
 800929c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	699a      	ldr	r2, [r3, #24]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f042 0210 	orr.w	r2, r2, #16
 80092ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	699a      	ldr	r2, [r3, #24]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092bc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0208 	bic.w	r2, r2, #8
 80092cc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d13d      	bne.n	8009358 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80092dc:	e036      	b.n	800934c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	2b0f      	cmp	r3, #15
 80092e4:	d90b      	bls.n	80092fe <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80092f0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f6:	1d1a      	adds	r2, r3, #4
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	665a      	str	r2, [r3, #100]	; 0x64
 80092fc:	e01d      	b.n	800933a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	2b07      	cmp	r3, #7
 8009304:	d90b      	bls.n	800931e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	8812      	ldrh	r2, [r2, #0]
 800930e:	b292      	uxth	r2, r2
 8009310:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009316:	1c9a      	adds	r2, r3, #2
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	665a      	str	r2, [r3, #100]	; 0x64
 800931c:	e00d      	b.n	800933a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800932a:	7812      	ldrb	r2, [r2, #0]
 800932c:	b2d2      	uxtb	r2, r2
 800932e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009340:	b29b      	uxth	r3, r3
 8009342:	3b01      	subs	r3, #1
 8009344:	b29a      	uxth	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009352:	b29b      	uxth	r3, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1c2      	bne.n	80092de <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fa0d 	bl	8009778 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f8f7 	bl	8009564 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009376:	e0d0      	b.n	800951a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009378:	7cfb      	ldrb	r3, [r7, #19]
 800937a:	2b05      	cmp	r3, #5
 800937c:	d103      	bne.n	8009386 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f8dc 	bl	800953c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009384:	e0c6      	b.n	8009514 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009386:	7cfb      	ldrb	r3, [r7, #19]
 8009388:	2b04      	cmp	r3, #4
 800938a:	d103      	bne.n	8009394 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f8cb 	bl	8009528 <HAL_SPI_RxCpltCallback>
    return;
 8009392:	e0bf      	b.n	8009514 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009394:	7cfb      	ldrb	r3, [r7, #19]
 8009396:	2b03      	cmp	r3, #3
 8009398:	f040 80bc 	bne.w	8009514 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7f7 ff0f 	bl	80011c0 <HAL_SPI_TxCpltCallback>
    return;
 80093a2:	e0b7      	b.n	8009514 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 80b5 	beq.w	800951a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00f      	beq.n	80093da <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c0:	f043 0204 	orr.w	r2, r3, #4
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	699a      	ldr	r2, [r3, #24]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093d8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00f      	beq.n	8009404 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ea:	f043 0201 	orr.w	r2, r3, #1
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	699a      	ldr	r2, [r3, #24]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009402:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00f      	beq.n	800942e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009414:	f043 0208 	orr.w	r2, r3, #8
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	699a      	ldr	r2, [r3, #24]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800942c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	f003 0320 	and.w	r3, r3, #32
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00f      	beq.n	8009458 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800943e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	699a      	ldr	r2, [r3, #24]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0220 	orr.w	r2, r2, #32
 8009456:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800945e:	2b00      	cmp	r3, #0
 8009460:	d05a      	beq.n	8009518 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 0201 	bic.w	r2, r2, #1
 8009470:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6919      	ldr	r1, [r3, #16]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	4b28      	ldr	r3, [pc, #160]	; (8009520 <HAL_SPI_IRQHandler+0x394>)
 800947e:	400b      	ands	r3, r1
 8009480:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009488:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800948c:	d138      	bne.n	8009500 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800949c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d013      	beq.n	80094ce <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094aa:	4a1e      	ldr	r2, [pc, #120]	; (8009524 <HAL_SPI_IRQHandler+0x398>)
 80094ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fa fa84 	bl	80039c0 <HAL_DMA_Abort_IT>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d020      	beq.n	8009518 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094da:	4a12      	ldr	r2, [pc, #72]	; (8009524 <HAL_SPI_IRQHandler+0x398>)
 80094dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fa fa6c 	bl	80039c0 <HAL_DMA_Abort_IT>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d014      	beq.n	8009518 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80094fe:	e00b      	b.n	8009518 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f82b 	bl	8009564 <HAL_SPI_ErrorCallback>
    return;
 800950e:	e003      	b.n	8009518 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009510:	bf00      	nop
 8009512:	e002      	b.n	800951a <HAL_SPI_IRQHandler+0x38e>
    return;
 8009514:	bf00      	nop
 8009516:	e000      	b.n	800951a <HAL_SPI_IRQHandler+0x38e>
    return;
 8009518:	bf00      	nop
  }
}
 800951a:	3728      	adds	r7, #40	; 0x28
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	fffffc94 	.word	0xfffffc94
 8009524:	08009635 	.word	0x08009635

08009528 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009598:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b07      	cmp	r3, #7
 80095a4:	d011      	beq.n	80095ca <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095b0:	d103      	bne.n	80095ba <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7f7 fe04 	bl	80011c0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80095b8:	e007      	b.n	80095ca <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	691a      	ldr	r2, [r3, #16]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 0208 	orr.w	r2, r2, #8
 80095c8:	611a      	str	r2, [r3, #16]
}
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7ff ffb5 	bl	8009550 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fa:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fb fb4f 	bl	8004ca0 <HAL_DMA_GetError>
 8009602:	4603      	mov	r3, r0
 8009604:	2b02      	cmp	r3, #2
 8009606:	d011      	beq.n	800962c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 f8b5 	bl	8009778 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009614:	f043 0210 	orr.w	r2, r3, #16
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f7ff ff9c 	bl	8009564 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800962c:	bf00      	nop
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f7ff ff82 	bl	8009564 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009660:	bf00      	nop
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3320      	adds	r3, #32
 800967a:	7812      	ldrb	r2, [r2, #0]
 800967c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800968e:	b29b      	uxth	r3, r3
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d107      	bne.n	80096b6 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	691a      	ldr	r2, [r3, #16]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0202 	bic.w	r2, r2, #2
 80096b4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80096b6:	bf00      	nop
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b085      	sub	sp, #20
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3320      	adds	r3, #32
 80096d0:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d6:	881a      	ldrh	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096e0:	1c9a      	adds	r2, r3, #2
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	3b01      	subs	r3, #1
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096fe:	b29b      	uxth	r3, r3
 8009700:	2b00      	cmp	r3, #0
 8009702:	d107      	bne.n	8009714 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	691a      	ldr	r2, [r3, #16]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0202 	bic.w	r2, r2, #2
 8009712:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009714:	bf00      	nop
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6812      	ldr	r2, [r2, #0]
 8009732:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009738:	1d1a      	adds	r2, r3, #4
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29a      	uxth	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009756:	b29b      	uxth	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d107      	bne.n	800976c <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691a      	ldr	r2, [r3, #16]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0202 	bic.w	r2, r2, #2
 800976a:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0208 	orr.w	r2, r2, #8
 8009796:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0210 	orr.w	r2, r2, #16
 80097a6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f022 0201 	bic.w	r2, r2, #1
 80097b6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6919      	ldr	r1, [r3, #16]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b3c      	ldr	r3, [pc, #240]	; (80098b4 <SPI_CloseTransfer+0x13c>)
 80097c4:	400b      	ands	r3, r1
 80097c6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689a      	ldr	r2, [r3, #8]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80097d6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	d014      	beq.n	800980e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00f      	beq.n	800980e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699a      	ldr	r2, [r3, #24]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f042 0220 	orr.w	r2, r2, #32
 800980c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b03      	cmp	r3, #3
 8009818:	d014      	beq.n	8009844 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00f      	beq.n	8009844 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800982a:	f043 0204 	orr.w	r2, r3, #4
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	699a      	ldr	r2, [r3, #24]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009842:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00f      	beq.n	800986e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009854:	f043 0201 	orr.w	r2, r3, #1
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800986c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00f      	beq.n	8009898 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800987e:	f043 0208 	orr.w	r2, r3, #8
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009896:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80098a8:	bf00      	nop
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	fffffc90 	.word	0xfffffc90

080098b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	095b      	lsrs	r3, r3, #5
 80098c6:	3301      	adds	r3, #1
 80098c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	3301      	adds	r3, #1
 80098d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	3307      	adds	r3, #7
 80098d6:	08db      	lsrs	r3, r3, #3
 80098d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	fb02 f303 	mul.w	r3, r2, r3
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e049      	b.n	8009994 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d106      	bne.n	800991a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7f8 f8cd 	bl	8001ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	3304      	adds	r3, #4
 800992a:	4619      	mov	r1, r3
 800992c:	4610      	mov	r0, r2
 800992e:	f000 f965 	bl	8009bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d020      	beq.n	8009a00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01b      	beq.n	8009a00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f06f 0202 	mvn.w	r2, #2
 80099d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	f003 0303 	and.w	r3, r3, #3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f8e9 	bl	8009bbe <HAL_TIM_IC_CaptureCallback>
 80099ec:	e005      	b.n	80099fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f8db 	bl	8009baa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f8ec 	bl	8009bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f003 0304 	and.w	r3, r3, #4
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d020      	beq.n	8009a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f003 0304 	and.w	r3, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d01b      	beq.n	8009a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f06f 0204 	mvn.w	r2, #4
 8009a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2202      	movs	r2, #2
 8009a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f8c3 	bl	8009bbe <HAL_TIM_IC_CaptureCallback>
 8009a38:	e005      	b.n	8009a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f8b5 	bl	8009baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f8c6 	bl	8009bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f003 0308 	and.w	r3, r3, #8
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d020      	beq.n	8009a98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f003 0308 	and.w	r3, r3, #8
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01b      	beq.n	8009a98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f06f 0208 	mvn.w	r2, #8
 8009a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f89d 	bl	8009bbe <HAL_TIM_IC_CaptureCallback>
 8009a84:	e005      	b.n	8009a92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f88f 	bl	8009baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f8a0 	bl	8009bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f003 0310 	and.w	r3, r3, #16
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d020      	beq.n	8009ae4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01b      	beq.n	8009ae4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f06f 0210 	mvn.w	r2, #16
 8009ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2208      	movs	r2, #8
 8009aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f877 	bl	8009bbe <HAL_TIM_IC_CaptureCallback>
 8009ad0:	e005      	b.n	8009ade <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f869 	bl	8009baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f87a 	bl	8009bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00c      	beq.n	8009b08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d007      	beq.n	8009b08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f06f 0201 	mvn.w	r2, #1
 8009b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7f7 faea 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d104      	bne.n	8009b1c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00c      	beq.n	8009b36 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d007      	beq.n	8009b36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8009b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f91f 	bl	8009d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00c      	beq.n	8009b5a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d007      	beq.n	8009b5a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f917 	bl	8009d88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00c      	beq.n	8009b7e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f834 	bl	8009be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00c      	beq.n	8009ba2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d007      	beq.n	8009ba2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f06f 0220 	mvn.w	r2, #32
 8009b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f8df 	bl	8009d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b083      	sub	sp, #12
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bb2:	bf00      	nop
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b083      	sub	sp, #12
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bc6:	bf00      	nop
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bda:	bf00      	nop
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b083      	sub	sp, #12
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bee:	bf00      	nop
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
	...

08009bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a4a      	ldr	r2, [pc, #296]	; (8009d38 <TIM_Base_SetConfig+0x13c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d013      	beq.n	8009c3c <TIM_Base_SetConfig+0x40>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c1a:	d00f      	beq.n	8009c3c <TIM_Base_SetConfig+0x40>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a47      	ldr	r2, [pc, #284]	; (8009d3c <TIM_Base_SetConfig+0x140>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d00b      	beq.n	8009c3c <TIM_Base_SetConfig+0x40>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a46      	ldr	r2, [pc, #280]	; (8009d40 <TIM_Base_SetConfig+0x144>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d007      	beq.n	8009c3c <TIM_Base_SetConfig+0x40>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a45      	ldr	r2, [pc, #276]	; (8009d44 <TIM_Base_SetConfig+0x148>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d003      	beq.n	8009c3c <TIM_Base_SetConfig+0x40>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a44      	ldr	r2, [pc, #272]	; (8009d48 <TIM_Base_SetConfig+0x14c>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d108      	bne.n	8009c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a39      	ldr	r2, [pc, #228]	; (8009d38 <TIM_Base_SetConfig+0x13c>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d027      	beq.n	8009ca6 <TIM_Base_SetConfig+0xaa>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c5c:	d023      	beq.n	8009ca6 <TIM_Base_SetConfig+0xaa>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a36      	ldr	r2, [pc, #216]	; (8009d3c <TIM_Base_SetConfig+0x140>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d01f      	beq.n	8009ca6 <TIM_Base_SetConfig+0xaa>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a35      	ldr	r2, [pc, #212]	; (8009d40 <TIM_Base_SetConfig+0x144>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d01b      	beq.n	8009ca6 <TIM_Base_SetConfig+0xaa>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a34      	ldr	r2, [pc, #208]	; (8009d44 <TIM_Base_SetConfig+0x148>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d017      	beq.n	8009ca6 <TIM_Base_SetConfig+0xaa>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a33      	ldr	r2, [pc, #204]	; (8009d48 <TIM_Base_SetConfig+0x14c>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d013      	beq.n	8009ca6 <TIM_Base_SetConfig+0xaa>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a32      	ldr	r2, [pc, #200]	; (8009d4c <TIM_Base_SetConfig+0x150>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d00f      	beq.n	8009ca6 <TIM_Base_SetConfig+0xaa>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a31      	ldr	r2, [pc, #196]	; (8009d50 <TIM_Base_SetConfig+0x154>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d00b      	beq.n	8009ca6 <TIM_Base_SetConfig+0xaa>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a30      	ldr	r2, [pc, #192]	; (8009d54 <TIM_Base_SetConfig+0x158>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d007      	beq.n	8009ca6 <TIM_Base_SetConfig+0xaa>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a2f      	ldr	r2, [pc, #188]	; (8009d58 <TIM_Base_SetConfig+0x15c>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d003      	beq.n	8009ca6 <TIM_Base_SetConfig+0xaa>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a2e      	ldr	r2, [pc, #184]	; (8009d5c <TIM_Base_SetConfig+0x160>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d108      	bne.n	8009cb8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	689a      	ldr	r2, [r3, #8]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a16      	ldr	r2, [pc, #88]	; (8009d38 <TIM_Base_SetConfig+0x13c>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00f      	beq.n	8009d04 <TIM_Base_SetConfig+0x108>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a18      	ldr	r2, [pc, #96]	; (8009d48 <TIM_Base_SetConfig+0x14c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d00b      	beq.n	8009d04 <TIM_Base_SetConfig+0x108>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a17      	ldr	r2, [pc, #92]	; (8009d4c <TIM_Base_SetConfig+0x150>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d007      	beq.n	8009d04 <TIM_Base_SetConfig+0x108>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a16      	ldr	r2, [pc, #88]	; (8009d50 <TIM_Base_SetConfig+0x154>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d003      	beq.n	8009d04 <TIM_Base_SetConfig+0x108>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a15      	ldr	r2, [pc, #84]	; (8009d54 <TIM_Base_SetConfig+0x158>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d103      	bne.n	8009d0c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	691a      	ldr	r2, [r3, #16]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d105      	bne.n	8009d2a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	f023 0201 	bic.w	r2, r3, #1
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	611a      	str	r2, [r3, #16]
  }
}
 8009d2a:	bf00      	nop
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	40010000 	.word	0x40010000
 8009d3c:	40000400 	.word	0x40000400
 8009d40:	40000800 	.word	0x40000800
 8009d44:	40000c00 	.word	0x40000c00
 8009d48:	40010400 	.word	0x40010400
 8009d4c:	40014000 	.word	0x40014000
 8009d50:	40014400 	.word	0x40014400
 8009d54:	40014800 	.word	0x40014800
 8009d58:	4000e000 	.word	0x4000e000
 8009d5c:	4000e400 	.word	0x4000e400

08009d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e042      	b.n	8009e34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d106      	bne.n	8009dc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7f7 fe9f 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2224      	movs	r2, #36	; 0x24
 8009dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f022 0201 	bic.w	r2, r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f001 faba 	bl	800b360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fc4b 	bl	800a688 <UART_SetConfig>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d101      	bne.n	8009dfc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e01b      	b.n	8009e34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	689a      	ldr	r2, [r3, #8]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 fb39 	bl	800b4a4 <UART_CheckIdleState>
 8009e32:	4603      	mov	r3, r0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08a      	sub	sp, #40	; 0x28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	d137      	bne.n	8009ec4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d002      	beq.n	8009e60 <HAL_UART_Receive_IT+0x24>
 8009e5a:	88fb      	ldrh	r3, [r7, #6]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e030      	b.n	8009ec6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a18      	ldr	r2, [pc, #96]	; (8009ed0 <HAL_UART_Receive_IT+0x94>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d01f      	beq.n	8009eb4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d018      	beq.n	8009eb4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e96:	627b      	str	r3, [r7, #36]	; 0x24
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	623b      	str	r3, [r7, #32]
 8009ea2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	69f9      	ldr	r1, [r7, #28]
 8009ea6:	6a3a      	ldr	r2, [r7, #32]
 8009ea8:	e841 2300 	strex	r3, r2, [r1]
 8009eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e6      	bne.n	8009e82 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009eb4:	88fb      	ldrh	r3, [r7, #6]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f001 fc0a 	bl	800b6d4 <UART_Start_Receive_IT>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	e000      	b.n	8009ec6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ec4:	2302      	movs	r3, #2
  }
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3728      	adds	r7, #40	; 0x28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	58000c00 	.word	0x58000c00

08009ed4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b0ba      	sub	sp, #232	; 0xe8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	69db      	ldr	r3, [r3, #28]
 8009ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009efa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009efe:	f640 030f 	movw	r3, #2063	; 0x80f
 8009f02:	4013      	ands	r3, r2
 8009f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d11b      	bne.n	8009f48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f14:	f003 0320 	and.w	r3, r3, #32
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d015      	beq.n	8009f48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f20:	f003 0320 	and.w	r3, r3, #32
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d105      	bne.n	8009f34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d009      	beq.n	8009f48 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 8377 	beq.w	800a62c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
      }
      return;
 8009f46:	e371      	b.n	800a62c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 8123 	beq.w	800a198 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009f52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009f56:	4b8d      	ldr	r3, [pc, #564]	; (800a18c <HAL_UART_IRQHandler+0x2b8>)
 8009f58:	4013      	ands	r3, r2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d106      	bne.n	8009f6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009f5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009f62:	4b8b      	ldr	r3, [pc, #556]	; (800a190 <HAL_UART_IRQHandler+0x2bc>)
 8009f64:	4013      	ands	r3, r2
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f000 8116 	beq.w	800a198 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d011      	beq.n	8009f9c <HAL_UART_IRQHandler+0xc8>
 8009f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00b      	beq.n	8009f9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f92:	f043 0201 	orr.w	r2, r3, #1
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d011      	beq.n	8009fcc <HAL_UART_IRQHandler+0xf8>
 8009fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2202      	movs	r2, #2
 8009fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fc2:	f043 0204 	orr.w	r2, r3, #4
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fd0:	f003 0304 	and.w	r3, r3, #4
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d011      	beq.n	8009ffc <HAL_UART_IRQHandler+0x128>
 8009fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00b      	beq.n	8009ffc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2204      	movs	r2, #4
 8009fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ff2:	f043 0202 	orr.w	r2, r3, #2
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a000:	f003 0308 	and.w	r3, r3, #8
 800a004:	2b00      	cmp	r3, #0
 800a006:	d017      	beq.n	800a038 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a00c:	f003 0320 	and.w	r3, r3, #32
 800a010:	2b00      	cmp	r3, #0
 800a012:	d105      	bne.n	800a020 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a014:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a018:	4b5c      	ldr	r3, [pc, #368]	; (800a18c <HAL_UART_IRQHandler+0x2b8>)
 800a01a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00b      	beq.n	800a038 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2208      	movs	r2, #8
 800a026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a02e:	f043 0208 	orr.w	r2, r3, #8
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a03c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a040:	2b00      	cmp	r3, #0
 800a042:	d012      	beq.n	800a06a <HAL_UART_IRQHandler+0x196>
 800a044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00c      	beq.n	800a06a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a060:	f043 0220 	orr.w	r2, r3, #32
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 82dd 	beq.w	800a630 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a07a:	f003 0320 	and.w	r3, r3, #32
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d013      	beq.n	800a0aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a086:	f003 0320 	and.w	r3, r3, #32
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d105      	bne.n	800a09a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a08e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d007      	beq.n	800a0aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0be:	2b40      	cmp	r3, #64	; 0x40
 800a0c0:	d005      	beq.n	800a0ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a0c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d054      	beq.n	800a178 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f001 fc22 	bl	800b918 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0de:	2b40      	cmp	r3, #64	; 0x40
 800a0e0:	d146      	bne.n	800a170 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a0f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3308      	adds	r3, #8
 800a10a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a10e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a11a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1d9      	bne.n	800a0e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a134:	2b00      	cmp	r3, #0
 800a136:	d017      	beq.n	800a168 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a13e:	4a15      	ldr	r2, [pc, #84]	; (800a194 <HAL_UART_IRQHandler+0x2c0>)
 800a140:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a148:	4618      	mov	r0, r3
 800a14a:	f7f9 fc39 	bl	80039c0 <HAL_DMA_Abort_IT>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d019      	beq.n	800a188 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a15a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a162:	4610      	mov	r0, r2
 800a164:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a166:	e00f      	b.n	800a188 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fa77 	bl	800a65c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a16e:	e00b      	b.n	800a188 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fa73 	bl	800a65c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a176:	e007      	b.n	800a188 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fa6f 	bl	800a65c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a186:	e253      	b.n	800a630 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a188:	bf00      	nop
    return;
 800a18a:	e251      	b.n	800a630 <HAL_UART_IRQHandler+0x75c>
 800a18c:	10000001 	.word	0x10000001
 800a190:	04000120 	.word	0x04000120
 800a194:	0800b9e5 	.word	0x0800b9e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	f040 81e7 	bne.w	800a570 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1a6:	f003 0310 	and.w	r3, r3, #16
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 81e0 	beq.w	800a570 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1b4:	f003 0310 	and.w	r3, r3, #16
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 81d9 	beq.w	800a570 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2210      	movs	r2, #16
 800a1c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d0:	2b40      	cmp	r3, #64	; 0x40
 800a1d2:	f040 8151 	bne.w	800a478 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a96      	ldr	r2, [pc, #600]	; (800a438 <HAL_UART_IRQHandler+0x564>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d068      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a93      	ldr	r2, [pc, #588]	; (800a43c <HAL_UART_IRQHandler+0x568>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d061      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a91      	ldr	r2, [pc, #580]	; (800a440 <HAL_UART_IRQHandler+0x56c>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d05a      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a8e      	ldr	r2, [pc, #568]	; (800a444 <HAL_UART_IRQHandler+0x570>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d053      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a8c      	ldr	r2, [pc, #560]	; (800a448 <HAL_UART_IRQHandler+0x574>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d04c      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a89      	ldr	r2, [pc, #548]	; (800a44c <HAL_UART_IRQHandler+0x578>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d045      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a87      	ldr	r2, [pc, #540]	; (800a450 <HAL_UART_IRQHandler+0x57c>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d03e      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a84      	ldr	r2, [pc, #528]	; (800a454 <HAL_UART_IRQHandler+0x580>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d037      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a82      	ldr	r2, [pc, #520]	; (800a458 <HAL_UART_IRQHandler+0x584>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d030      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a7f      	ldr	r2, [pc, #508]	; (800a45c <HAL_UART_IRQHandler+0x588>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d029      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a7d      	ldr	r2, [pc, #500]	; (800a460 <HAL_UART_IRQHandler+0x58c>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d022      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a7a      	ldr	r2, [pc, #488]	; (800a464 <HAL_UART_IRQHandler+0x590>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d01b      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a78      	ldr	r2, [pc, #480]	; (800a468 <HAL_UART_IRQHandler+0x594>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d014      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a75      	ldr	r2, [pc, #468]	; (800a46c <HAL_UART_IRQHandler+0x598>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00d      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a73      	ldr	r2, [pc, #460]	; (800a470 <HAL_UART_IRQHandler+0x59c>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d006      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x3e2>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a70      	ldr	r2, [pc, #448]	; (800a474 <HAL_UART_IRQHandler+0x5a0>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d106      	bne.n	800a2c4 <HAL_UART_IRQHandler+0x3f0>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	e005      	b.n	800a2d0 <HAL_UART_IRQHandler+0x3fc>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 81ab 	beq.w	800a634 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	f080 81a3 	bcs.w	800a634 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2fe:	69db      	ldr	r3, [r3, #28]
 800a300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a304:	f000 8087 	beq.w	800a416 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a314:	e853 3f00 	ldrex	r3, [r3]
 800a318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a31c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	461a      	mov	r2, r3
 800a32e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a336:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a33e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a342:	e841 2300 	strex	r3, r2, [r1]
 800a346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a34a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1da      	bne.n	800a308 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3308      	adds	r3, #8
 800a358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a35c:	e853 3f00 	ldrex	r3, [r3]
 800a360:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a364:	f023 0301 	bic.w	r3, r3, #1
 800a368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3308      	adds	r3, #8
 800a372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a376:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a37a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a37e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a382:	e841 2300 	strex	r3, r2, [r1]
 800a386:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e1      	bne.n	800a352 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3308      	adds	r3, #8
 800a394:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a39e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e3      	bne.n	800a38e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3dc:	e853 3f00 	ldrex	r3, [r3]
 800a3e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3e4:	f023 0310 	bic.w	r3, r3, #16
 800a3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e4      	bne.n	800a3d4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a410:	4618      	mov	r0, r3
 800a412:	f7f8 ffb7 	bl	8003384 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2202      	movs	r2, #2
 800a41a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a428:	b29b      	uxth	r3, r3
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 f91d 	bl	800a670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a436:	e0fd      	b.n	800a634 <HAL_UART_IRQHandler+0x760>
 800a438:	40020010 	.word	0x40020010
 800a43c:	40020028 	.word	0x40020028
 800a440:	40020040 	.word	0x40020040
 800a444:	40020058 	.word	0x40020058
 800a448:	40020070 	.word	0x40020070
 800a44c:	40020088 	.word	0x40020088
 800a450:	400200a0 	.word	0x400200a0
 800a454:	400200b8 	.word	0x400200b8
 800a458:	40020410 	.word	0x40020410
 800a45c:	40020428 	.word	0x40020428
 800a460:	40020440 	.word	0x40020440
 800a464:	40020458 	.word	0x40020458
 800a468:	40020470 	.word	0x40020470
 800a46c:	40020488 	.word	0x40020488
 800a470:	400204a0 	.word	0x400204a0
 800a474:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a484:	b29b      	uxth	r3, r3
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a492:	b29b      	uxth	r3, r3
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 80cf 	beq.w	800a638 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a49a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 80ca 	beq.w	800a638 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ac:	e853 3f00 	ldrex	r3, [r3]
 800a4b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4c6:	647b      	str	r3, [r7, #68]	; 0x44
 800a4c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e4      	bne.n	800a4a4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3308      	adds	r3, #8
 800a4e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	e853 3f00 	ldrex	r3, [r3]
 800a4e8:	623b      	str	r3, [r7, #32]
   return(result);
 800a4ea:	6a3a      	ldr	r2, [r7, #32]
 800a4ec:	4b55      	ldr	r3, [pc, #340]	; (800a644 <HAL_UART_IRQHandler+0x770>)
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4fe:	633a      	str	r2, [r7, #48]	; 0x30
 800a500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a506:	e841 2300 	strex	r3, r2, [r1]
 800a50a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1e3      	bne.n	800a4da <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2220      	movs	r2, #32
 800a516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	e853 3f00 	ldrex	r3, [r3]
 800a532:	60fb      	str	r3, [r7, #12]
   return(result);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 0310 	bic.w	r3, r3, #16
 800a53a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a548:	61fb      	str	r3, [r7, #28]
 800a54a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54c:	69b9      	ldr	r1, [r7, #24]
 800a54e:	69fa      	ldr	r2, [r7, #28]
 800a550:	e841 2300 	strex	r3, r2, [r1]
 800a554:	617b      	str	r3, [r7, #20]
   return(result);
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e4      	bne.n	800a526 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a562:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f881 	bl	800a670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a56e:	e063      	b.n	800a638 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00e      	beq.n	800a59a <HAL_UART_IRQHandler+0x6c6>
 800a57c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a584:	2b00      	cmp	r3, #0
 800a586:	d008      	beq.n	800a59a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a590:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f001 ff84 	bl	800c4a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a598:	e051      	b.n	800a63e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d014      	beq.n	800a5d0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a5a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d105      	bne.n	800a5be <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d008      	beq.n	800a5d0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d03a      	beq.n	800a63c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	4798      	blx	r3
    }
    return;
 800a5ce:	e035      	b.n	800a63c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d009      	beq.n	800a5f0 <HAL_UART_IRQHandler+0x71c>
 800a5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 fa11 	bl	800ba10 <UART_EndTransmit_IT>
    return;
 800a5ee:	e026      	b.n	800a63e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d009      	beq.n	800a610 <HAL_UART_IRQHandler+0x73c>
 800a5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a600:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 ff5d 	bl	800c4c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a60e:	e016      	b.n	800a63e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d010      	beq.n	800a63e <HAL_UART_IRQHandler+0x76a>
 800a61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a620:	2b00      	cmp	r3, #0
 800a622:	da0c      	bge.n	800a63e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f001 ff45 	bl	800c4b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a62a:	e008      	b.n	800a63e <HAL_UART_IRQHandler+0x76a>
      return;
 800a62c:	bf00      	nop
 800a62e:	e006      	b.n	800a63e <HAL_UART_IRQHandler+0x76a>
    return;
 800a630:	bf00      	nop
 800a632:	e004      	b.n	800a63e <HAL_UART_IRQHandler+0x76a>
      return;
 800a634:	bf00      	nop
 800a636:	e002      	b.n	800a63e <HAL_UART_IRQHandler+0x76a>
      return;
 800a638:	bf00      	nop
 800a63a:	e000      	b.n	800a63e <HAL_UART_IRQHandler+0x76a>
    return;
 800a63c:	bf00      	nop
  }
}
 800a63e:	37e8      	adds	r7, #232	; 0xe8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	effffffe 	.word	0xeffffffe

0800a648 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a68c:	b092      	sub	sp, #72	; 0x48
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	69db      	ldr	r3, [r3, #28]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	4bbe      	ldr	r3, [pc, #760]	; (800a9b0 <UART_SetConfig+0x328>)
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6c0:	430b      	orrs	r3, r1
 800a6c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4ab3      	ldr	r2, [pc, #716]	; (800a9b4 <UART_SetConfig+0x32c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d004      	beq.n	800a6f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	689a      	ldr	r2, [r3, #8]
 800a6fa:	4baf      	ldr	r3, [pc, #700]	; (800a9b8 <UART_SetConfig+0x330>)
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	6812      	ldr	r2, [r2, #0]
 800a702:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a704:	430b      	orrs	r3, r1
 800a706:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70e:	f023 010f 	bic.w	r1, r3, #15
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4aa6      	ldr	r2, [pc, #664]	; (800a9bc <UART_SetConfig+0x334>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d177      	bne.n	800a818 <UART_SetConfig+0x190>
 800a728:	4ba5      	ldr	r3, [pc, #660]	; (800a9c0 <UART_SetConfig+0x338>)
 800a72a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a72c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a730:	2b28      	cmp	r3, #40	; 0x28
 800a732:	d86d      	bhi.n	800a810 <UART_SetConfig+0x188>
 800a734:	a201      	add	r2, pc, #4	; (adr r2, 800a73c <UART_SetConfig+0xb4>)
 800a736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73a:	bf00      	nop
 800a73c:	0800a7e1 	.word	0x0800a7e1
 800a740:	0800a811 	.word	0x0800a811
 800a744:	0800a811 	.word	0x0800a811
 800a748:	0800a811 	.word	0x0800a811
 800a74c:	0800a811 	.word	0x0800a811
 800a750:	0800a811 	.word	0x0800a811
 800a754:	0800a811 	.word	0x0800a811
 800a758:	0800a811 	.word	0x0800a811
 800a75c:	0800a7e9 	.word	0x0800a7e9
 800a760:	0800a811 	.word	0x0800a811
 800a764:	0800a811 	.word	0x0800a811
 800a768:	0800a811 	.word	0x0800a811
 800a76c:	0800a811 	.word	0x0800a811
 800a770:	0800a811 	.word	0x0800a811
 800a774:	0800a811 	.word	0x0800a811
 800a778:	0800a811 	.word	0x0800a811
 800a77c:	0800a7f1 	.word	0x0800a7f1
 800a780:	0800a811 	.word	0x0800a811
 800a784:	0800a811 	.word	0x0800a811
 800a788:	0800a811 	.word	0x0800a811
 800a78c:	0800a811 	.word	0x0800a811
 800a790:	0800a811 	.word	0x0800a811
 800a794:	0800a811 	.word	0x0800a811
 800a798:	0800a811 	.word	0x0800a811
 800a79c:	0800a7f9 	.word	0x0800a7f9
 800a7a0:	0800a811 	.word	0x0800a811
 800a7a4:	0800a811 	.word	0x0800a811
 800a7a8:	0800a811 	.word	0x0800a811
 800a7ac:	0800a811 	.word	0x0800a811
 800a7b0:	0800a811 	.word	0x0800a811
 800a7b4:	0800a811 	.word	0x0800a811
 800a7b8:	0800a811 	.word	0x0800a811
 800a7bc:	0800a801 	.word	0x0800a801
 800a7c0:	0800a811 	.word	0x0800a811
 800a7c4:	0800a811 	.word	0x0800a811
 800a7c8:	0800a811 	.word	0x0800a811
 800a7cc:	0800a811 	.word	0x0800a811
 800a7d0:	0800a811 	.word	0x0800a811
 800a7d4:	0800a811 	.word	0x0800a811
 800a7d8:	0800a811 	.word	0x0800a811
 800a7dc:	0800a809 	.word	0x0800a809
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7e6:	e326      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a7e8:	2304      	movs	r3, #4
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ee:	e322      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a7f0:	2308      	movs	r3, #8
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f6:	e31e      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a7f8:	2310      	movs	r3, #16
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fe:	e31a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a800:	2320      	movs	r3, #32
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a806:	e316      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a808:	2340      	movs	r3, #64	; 0x40
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80e:	e312      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a810:	2380      	movs	r3, #128	; 0x80
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a816:	e30e      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a69      	ldr	r2, [pc, #420]	; (800a9c4 <UART_SetConfig+0x33c>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d130      	bne.n	800a884 <UART_SetConfig+0x1fc>
 800a822:	4b67      	ldr	r3, [pc, #412]	; (800a9c0 <UART_SetConfig+0x338>)
 800a824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b05      	cmp	r3, #5
 800a82c:	d826      	bhi.n	800a87c <UART_SetConfig+0x1f4>
 800a82e:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <UART_SetConfig+0x1ac>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a84d 	.word	0x0800a84d
 800a838:	0800a855 	.word	0x0800a855
 800a83c:	0800a85d 	.word	0x0800a85d
 800a840:	0800a865 	.word	0x0800a865
 800a844:	0800a86d 	.word	0x0800a86d
 800a848:	0800a875 	.word	0x0800a875
 800a84c:	2300      	movs	r3, #0
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a852:	e2f0      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a854:	2304      	movs	r3, #4
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a85a:	e2ec      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a85c:	2308      	movs	r3, #8
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a862:	e2e8      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a864:	2310      	movs	r3, #16
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86a:	e2e4      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a86c:	2320      	movs	r3, #32
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a872:	e2e0      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a874:	2340      	movs	r3, #64	; 0x40
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87a:	e2dc      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a87c:	2380      	movs	r3, #128	; 0x80
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a882:	e2d8      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a4f      	ldr	r2, [pc, #316]	; (800a9c8 <UART_SetConfig+0x340>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d130      	bne.n	800a8f0 <UART_SetConfig+0x268>
 800a88e:	4b4c      	ldr	r3, [pc, #304]	; (800a9c0 <UART_SetConfig+0x338>)
 800a890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a892:	f003 0307 	and.w	r3, r3, #7
 800a896:	2b05      	cmp	r3, #5
 800a898:	d826      	bhi.n	800a8e8 <UART_SetConfig+0x260>
 800a89a:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <UART_SetConfig+0x218>)
 800a89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a0:	0800a8b9 	.word	0x0800a8b9
 800a8a4:	0800a8c1 	.word	0x0800a8c1
 800a8a8:	0800a8c9 	.word	0x0800a8c9
 800a8ac:	0800a8d1 	.word	0x0800a8d1
 800a8b0:	0800a8d9 	.word	0x0800a8d9
 800a8b4:	0800a8e1 	.word	0x0800a8e1
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8be:	e2ba      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8c0:	2304      	movs	r3, #4
 800a8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c6:	e2b6      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8c8:	2308      	movs	r3, #8
 800a8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ce:	e2b2      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8d0:	2310      	movs	r3, #16
 800a8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d6:	e2ae      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8d8:	2320      	movs	r3, #32
 800a8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8de:	e2aa      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8e0:	2340      	movs	r3, #64	; 0x40
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e6:	e2a6      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8e8:	2380      	movs	r3, #128	; 0x80
 800a8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ee:	e2a2      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a35      	ldr	r2, [pc, #212]	; (800a9cc <UART_SetConfig+0x344>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d130      	bne.n	800a95c <UART_SetConfig+0x2d4>
 800a8fa:	4b31      	ldr	r3, [pc, #196]	; (800a9c0 <UART_SetConfig+0x338>)
 800a8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8fe:	f003 0307 	and.w	r3, r3, #7
 800a902:	2b05      	cmp	r3, #5
 800a904:	d826      	bhi.n	800a954 <UART_SetConfig+0x2cc>
 800a906:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <UART_SetConfig+0x284>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a925 	.word	0x0800a925
 800a910:	0800a92d 	.word	0x0800a92d
 800a914:	0800a935 	.word	0x0800a935
 800a918:	0800a93d 	.word	0x0800a93d
 800a91c:	0800a945 	.word	0x0800a945
 800a920:	0800a94d 	.word	0x0800a94d
 800a924:	2300      	movs	r3, #0
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a92a:	e284      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a92c:	2304      	movs	r3, #4
 800a92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a932:	e280      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a934:	2308      	movs	r3, #8
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93a:	e27c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a93c:	2310      	movs	r3, #16
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a942:	e278      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a944:	2320      	movs	r3, #32
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94a:	e274      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a94c:	2340      	movs	r3, #64	; 0x40
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a952:	e270      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a954:	2380      	movs	r3, #128	; 0x80
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95a:	e26c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a1b      	ldr	r2, [pc, #108]	; (800a9d0 <UART_SetConfig+0x348>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d142      	bne.n	800a9ec <UART_SetConfig+0x364>
 800a966:	4b16      	ldr	r3, [pc, #88]	; (800a9c0 <UART_SetConfig+0x338>)
 800a968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a96a:	f003 0307 	and.w	r3, r3, #7
 800a96e:	2b05      	cmp	r3, #5
 800a970:	d838      	bhi.n	800a9e4 <UART_SetConfig+0x35c>
 800a972:	a201      	add	r2, pc, #4	; (adr r2, 800a978 <UART_SetConfig+0x2f0>)
 800a974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a978:	0800a991 	.word	0x0800a991
 800a97c:	0800a999 	.word	0x0800a999
 800a980:	0800a9a1 	.word	0x0800a9a1
 800a984:	0800a9a9 	.word	0x0800a9a9
 800a988:	0800a9d5 	.word	0x0800a9d5
 800a98c:	0800a9dd 	.word	0x0800a9dd
 800a990:	2300      	movs	r3, #0
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a996:	e24e      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a998:	2304      	movs	r3, #4
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a99e:	e24a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9a0:	2308      	movs	r3, #8
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9a6:	e246      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9a8:	2310      	movs	r3, #16
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ae:	e242      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9b0:	cfff69f3 	.word	0xcfff69f3
 800a9b4:	58000c00 	.word	0x58000c00
 800a9b8:	11fff4ff 	.word	0x11fff4ff
 800a9bc:	40011000 	.word	0x40011000
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	40004400 	.word	0x40004400
 800a9c8:	40004800 	.word	0x40004800
 800a9cc:	40004c00 	.word	0x40004c00
 800a9d0:	40005000 	.word	0x40005000
 800a9d4:	2320      	movs	r3, #32
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9da:	e22c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9dc:	2340      	movs	r3, #64	; 0x40
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9e2:	e228      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9e4:	2380      	movs	r3, #128	; 0x80
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ea:	e224      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4ab1      	ldr	r2, [pc, #708]	; (800acb8 <UART_SetConfig+0x630>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d176      	bne.n	800aae4 <UART_SetConfig+0x45c>
 800a9f6:	4bb1      	ldr	r3, [pc, #708]	; (800acbc <UART_SetConfig+0x634>)
 800a9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9fe:	2b28      	cmp	r3, #40	; 0x28
 800aa00:	d86c      	bhi.n	800aadc <UART_SetConfig+0x454>
 800aa02:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <UART_SetConfig+0x380>)
 800aa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa08:	0800aaad 	.word	0x0800aaad
 800aa0c:	0800aadd 	.word	0x0800aadd
 800aa10:	0800aadd 	.word	0x0800aadd
 800aa14:	0800aadd 	.word	0x0800aadd
 800aa18:	0800aadd 	.word	0x0800aadd
 800aa1c:	0800aadd 	.word	0x0800aadd
 800aa20:	0800aadd 	.word	0x0800aadd
 800aa24:	0800aadd 	.word	0x0800aadd
 800aa28:	0800aab5 	.word	0x0800aab5
 800aa2c:	0800aadd 	.word	0x0800aadd
 800aa30:	0800aadd 	.word	0x0800aadd
 800aa34:	0800aadd 	.word	0x0800aadd
 800aa38:	0800aadd 	.word	0x0800aadd
 800aa3c:	0800aadd 	.word	0x0800aadd
 800aa40:	0800aadd 	.word	0x0800aadd
 800aa44:	0800aadd 	.word	0x0800aadd
 800aa48:	0800aabd 	.word	0x0800aabd
 800aa4c:	0800aadd 	.word	0x0800aadd
 800aa50:	0800aadd 	.word	0x0800aadd
 800aa54:	0800aadd 	.word	0x0800aadd
 800aa58:	0800aadd 	.word	0x0800aadd
 800aa5c:	0800aadd 	.word	0x0800aadd
 800aa60:	0800aadd 	.word	0x0800aadd
 800aa64:	0800aadd 	.word	0x0800aadd
 800aa68:	0800aac5 	.word	0x0800aac5
 800aa6c:	0800aadd 	.word	0x0800aadd
 800aa70:	0800aadd 	.word	0x0800aadd
 800aa74:	0800aadd 	.word	0x0800aadd
 800aa78:	0800aadd 	.word	0x0800aadd
 800aa7c:	0800aadd 	.word	0x0800aadd
 800aa80:	0800aadd 	.word	0x0800aadd
 800aa84:	0800aadd 	.word	0x0800aadd
 800aa88:	0800aacd 	.word	0x0800aacd
 800aa8c:	0800aadd 	.word	0x0800aadd
 800aa90:	0800aadd 	.word	0x0800aadd
 800aa94:	0800aadd 	.word	0x0800aadd
 800aa98:	0800aadd 	.word	0x0800aadd
 800aa9c:	0800aadd 	.word	0x0800aadd
 800aaa0:	0800aadd 	.word	0x0800aadd
 800aaa4:	0800aadd 	.word	0x0800aadd
 800aaa8:	0800aad5 	.word	0x0800aad5
 800aaac:	2301      	movs	r3, #1
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aab2:	e1c0      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aab4:	2304      	movs	r3, #4
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaba:	e1bc      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aabc:	2308      	movs	r3, #8
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aac2:	e1b8      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aac4:	2310      	movs	r3, #16
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaca:	e1b4      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aacc:	2320      	movs	r3, #32
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad2:	e1b0      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aad4:	2340      	movs	r3, #64	; 0x40
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aada:	e1ac      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aadc:	2380      	movs	r3, #128	; 0x80
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aae2:	e1a8      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a75      	ldr	r2, [pc, #468]	; (800acc0 <UART_SetConfig+0x638>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d130      	bne.n	800ab50 <UART_SetConfig+0x4c8>
 800aaee:	4b73      	ldr	r3, [pc, #460]	; (800acbc <UART_SetConfig+0x634>)
 800aaf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	2b05      	cmp	r3, #5
 800aaf8:	d826      	bhi.n	800ab48 <UART_SetConfig+0x4c0>
 800aafa:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <UART_SetConfig+0x478>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab19 	.word	0x0800ab19
 800ab04:	0800ab21 	.word	0x0800ab21
 800ab08:	0800ab29 	.word	0x0800ab29
 800ab0c:	0800ab31 	.word	0x0800ab31
 800ab10:	0800ab39 	.word	0x0800ab39
 800ab14:	0800ab41 	.word	0x0800ab41
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab1e:	e18a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab20:	2304      	movs	r3, #4
 800ab22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab26:	e186      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab28:	2308      	movs	r3, #8
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab2e:	e182      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab30:	2310      	movs	r3, #16
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab36:	e17e      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab38:	2320      	movs	r3, #32
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3e:	e17a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab40:	2340      	movs	r3, #64	; 0x40
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab46:	e176      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab48:	2380      	movs	r3, #128	; 0x80
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab4e:	e172      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a5b      	ldr	r2, [pc, #364]	; (800acc4 <UART_SetConfig+0x63c>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d130      	bne.n	800abbc <UART_SetConfig+0x534>
 800ab5a:	4b58      	ldr	r3, [pc, #352]	; (800acbc <UART_SetConfig+0x634>)
 800ab5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5e:	f003 0307 	and.w	r3, r3, #7
 800ab62:	2b05      	cmp	r3, #5
 800ab64:	d826      	bhi.n	800abb4 <UART_SetConfig+0x52c>
 800ab66:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <UART_SetConfig+0x4e4>)
 800ab68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6c:	0800ab85 	.word	0x0800ab85
 800ab70:	0800ab8d 	.word	0x0800ab8d
 800ab74:	0800ab95 	.word	0x0800ab95
 800ab78:	0800ab9d 	.word	0x0800ab9d
 800ab7c:	0800aba5 	.word	0x0800aba5
 800ab80:	0800abad 	.word	0x0800abad
 800ab84:	2300      	movs	r3, #0
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab8a:	e154      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab8c:	2304      	movs	r3, #4
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab92:	e150      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab94:	2308      	movs	r3, #8
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab9a:	e14c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab9c:	2310      	movs	r3, #16
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba2:	e148      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aba4:	2320      	movs	r3, #32
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abaa:	e144      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800abac:	2340      	movs	r3, #64	; 0x40
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abb2:	e140      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800abb4:	2380      	movs	r3, #128	; 0x80
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abba:	e13c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a41      	ldr	r2, [pc, #260]	; (800acc8 <UART_SetConfig+0x640>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	f040 8082 	bne.w	800accc <UART_SetConfig+0x644>
 800abc8:	4b3c      	ldr	r3, [pc, #240]	; (800acbc <UART_SetConfig+0x634>)
 800abca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abd0:	2b28      	cmp	r3, #40	; 0x28
 800abd2:	d86d      	bhi.n	800acb0 <UART_SetConfig+0x628>
 800abd4:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <UART_SetConfig+0x554>)
 800abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abda:	bf00      	nop
 800abdc:	0800ac81 	.word	0x0800ac81
 800abe0:	0800acb1 	.word	0x0800acb1
 800abe4:	0800acb1 	.word	0x0800acb1
 800abe8:	0800acb1 	.word	0x0800acb1
 800abec:	0800acb1 	.word	0x0800acb1
 800abf0:	0800acb1 	.word	0x0800acb1
 800abf4:	0800acb1 	.word	0x0800acb1
 800abf8:	0800acb1 	.word	0x0800acb1
 800abfc:	0800ac89 	.word	0x0800ac89
 800ac00:	0800acb1 	.word	0x0800acb1
 800ac04:	0800acb1 	.word	0x0800acb1
 800ac08:	0800acb1 	.word	0x0800acb1
 800ac0c:	0800acb1 	.word	0x0800acb1
 800ac10:	0800acb1 	.word	0x0800acb1
 800ac14:	0800acb1 	.word	0x0800acb1
 800ac18:	0800acb1 	.word	0x0800acb1
 800ac1c:	0800ac91 	.word	0x0800ac91
 800ac20:	0800acb1 	.word	0x0800acb1
 800ac24:	0800acb1 	.word	0x0800acb1
 800ac28:	0800acb1 	.word	0x0800acb1
 800ac2c:	0800acb1 	.word	0x0800acb1
 800ac30:	0800acb1 	.word	0x0800acb1
 800ac34:	0800acb1 	.word	0x0800acb1
 800ac38:	0800acb1 	.word	0x0800acb1
 800ac3c:	0800ac99 	.word	0x0800ac99
 800ac40:	0800acb1 	.word	0x0800acb1
 800ac44:	0800acb1 	.word	0x0800acb1
 800ac48:	0800acb1 	.word	0x0800acb1
 800ac4c:	0800acb1 	.word	0x0800acb1
 800ac50:	0800acb1 	.word	0x0800acb1
 800ac54:	0800acb1 	.word	0x0800acb1
 800ac58:	0800acb1 	.word	0x0800acb1
 800ac5c:	0800aca1 	.word	0x0800aca1
 800ac60:	0800acb1 	.word	0x0800acb1
 800ac64:	0800acb1 	.word	0x0800acb1
 800ac68:	0800acb1 	.word	0x0800acb1
 800ac6c:	0800acb1 	.word	0x0800acb1
 800ac70:	0800acb1 	.word	0x0800acb1
 800ac74:	0800acb1 	.word	0x0800acb1
 800ac78:	0800acb1 	.word	0x0800acb1
 800ac7c:	0800aca9 	.word	0x0800aca9
 800ac80:	2301      	movs	r3, #1
 800ac82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac86:	e0d6      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ac88:	2304      	movs	r3, #4
 800ac8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac8e:	e0d2      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ac90:	2308      	movs	r3, #8
 800ac92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac96:	e0ce      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ac98:	2310      	movs	r3, #16
 800ac9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac9e:	e0ca      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aca0:	2320      	movs	r3, #32
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aca6:	e0c6      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aca8:	2340      	movs	r3, #64	; 0x40
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acae:	e0c2      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800acb0:	2380      	movs	r3, #128	; 0x80
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acb6:	e0be      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800acb8:	40011400 	.word	0x40011400
 800acbc:	58024400 	.word	0x58024400
 800acc0:	40007800 	.word	0x40007800
 800acc4:	40007c00 	.word	0x40007c00
 800acc8:	40011800 	.word	0x40011800
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4aad      	ldr	r2, [pc, #692]	; (800af88 <UART_SetConfig+0x900>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d176      	bne.n	800adc4 <UART_SetConfig+0x73c>
 800acd6:	4bad      	ldr	r3, [pc, #692]	; (800af8c <UART_SetConfig+0x904>)
 800acd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acde:	2b28      	cmp	r3, #40	; 0x28
 800ace0:	d86c      	bhi.n	800adbc <UART_SetConfig+0x734>
 800ace2:	a201      	add	r2, pc, #4	; (adr r2, 800ace8 <UART_SetConfig+0x660>)
 800ace4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace8:	0800ad8d 	.word	0x0800ad8d
 800acec:	0800adbd 	.word	0x0800adbd
 800acf0:	0800adbd 	.word	0x0800adbd
 800acf4:	0800adbd 	.word	0x0800adbd
 800acf8:	0800adbd 	.word	0x0800adbd
 800acfc:	0800adbd 	.word	0x0800adbd
 800ad00:	0800adbd 	.word	0x0800adbd
 800ad04:	0800adbd 	.word	0x0800adbd
 800ad08:	0800ad95 	.word	0x0800ad95
 800ad0c:	0800adbd 	.word	0x0800adbd
 800ad10:	0800adbd 	.word	0x0800adbd
 800ad14:	0800adbd 	.word	0x0800adbd
 800ad18:	0800adbd 	.word	0x0800adbd
 800ad1c:	0800adbd 	.word	0x0800adbd
 800ad20:	0800adbd 	.word	0x0800adbd
 800ad24:	0800adbd 	.word	0x0800adbd
 800ad28:	0800ad9d 	.word	0x0800ad9d
 800ad2c:	0800adbd 	.word	0x0800adbd
 800ad30:	0800adbd 	.word	0x0800adbd
 800ad34:	0800adbd 	.word	0x0800adbd
 800ad38:	0800adbd 	.word	0x0800adbd
 800ad3c:	0800adbd 	.word	0x0800adbd
 800ad40:	0800adbd 	.word	0x0800adbd
 800ad44:	0800adbd 	.word	0x0800adbd
 800ad48:	0800ada5 	.word	0x0800ada5
 800ad4c:	0800adbd 	.word	0x0800adbd
 800ad50:	0800adbd 	.word	0x0800adbd
 800ad54:	0800adbd 	.word	0x0800adbd
 800ad58:	0800adbd 	.word	0x0800adbd
 800ad5c:	0800adbd 	.word	0x0800adbd
 800ad60:	0800adbd 	.word	0x0800adbd
 800ad64:	0800adbd 	.word	0x0800adbd
 800ad68:	0800adad 	.word	0x0800adad
 800ad6c:	0800adbd 	.word	0x0800adbd
 800ad70:	0800adbd 	.word	0x0800adbd
 800ad74:	0800adbd 	.word	0x0800adbd
 800ad78:	0800adbd 	.word	0x0800adbd
 800ad7c:	0800adbd 	.word	0x0800adbd
 800ad80:	0800adbd 	.word	0x0800adbd
 800ad84:	0800adbd 	.word	0x0800adbd
 800ad88:	0800adb5 	.word	0x0800adb5
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad92:	e050      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ad94:	2304      	movs	r3, #4
 800ad96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad9a:	e04c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ad9c:	2308      	movs	r3, #8
 800ad9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ada2:	e048      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ada4:	2310      	movs	r3, #16
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adaa:	e044      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800adac:	2320      	movs	r3, #32
 800adae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adb2:	e040      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800adb4:	2340      	movs	r3, #64	; 0x40
 800adb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adba:	e03c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800adbc:	2380      	movs	r3, #128	; 0x80
 800adbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adc2:	e038      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a71      	ldr	r2, [pc, #452]	; (800af90 <UART_SetConfig+0x908>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d130      	bne.n	800ae30 <UART_SetConfig+0x7a8>
 800adce:	4b6f      	ldr	r3, [pc, #444]	; (800af8c <UART_SetConfig+0x904>)
 800add0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add2:	f003 0307 	and.w	r3, r3, #7
 800add6:	2b05      	cmp	r3, #5
 800add8:	d826      	bhi.n	800ae28 <UART_SetConfig+0x7a0>
 800adda:	a201      	add	r2, pc, #4	; (adr r2, 800ade0 <UART_SetConfig+0x758>)
 800addc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade0:	0800adf9 	.word	0x0800adf9
 800ade4:	0800ae01 	.word	0x0800ae01
 800ade8:	0800ae09 	.word	0x0800ae09
 800adec:	0800ae11 	.word	0x0800ae11
 800adf0:	0800ae19 	.word	0x0800ae19
 800adf4:	0800ae21 	.word	0x0800ae21
 800adf8:	2302      	movs	r3, #2
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adfe:	e01a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae00:	2304      	movs	r3, #4
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae06:	e016      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae08:	2308      	movs	r3, #8
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae0e:	e012      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae10:	2310      	movs	r3, #16
 800ae12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae16:	e00e      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae18:	2320      	movs	r3, #32
 800ae1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae1e:	e00a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae20:	2340      	movs	r3, #64	; 0x40
 800ae22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae26:	e006      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae28:	2380      	movs	r3, #128	; 0x80
 800ae2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae2e:	e002      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae30:	2380      	movs	r3, #128	; 0x80
 800ae32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a55      	ldr	r2, [pc, #340]	; (800af90 <UART_SetConfig+0x908>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	f040 80f8 	bne.w	800b032 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ae46:	2b20      	cmp	r3, #32
 800ae48:	dc46      	bgt.n	800aed8 <UART_SetConfig+0x850>
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	db75      	blt.n	800af3a <UART_SetConfig+0x8b2>
 800ae4e:	3b02      	subs	r3, #2
 800ae50:	2b1e      	cmp	r3, #30
 800ae52:	d872      	bhi.n	800af3a <UART_SetConfig+0x8b2>
 800ae54:	a201      	add	r2, pc, #4	; (adr r2, 800ae5c <UART_SetConfig+0x7d4>)
 800ae56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5a:	bf00      	nop
 800ae5c:	0800aedf 	.word	0x0800aedf
 800ae60:	0800af3b 	.word	0x0800af3b
 800ae64:	0800aee7 	.word	0x0800aee7
 800ae68:	0800af3b 	.word	0x0800af3b
 800ae6c:	0800af3b 	.word	0x0800af3b
 800ae70:	0800af3b 	.word	0x0800af3b
 800ae74:	0800aef7 	.word	0x0800aef7
 800ae78:	0800af3b 	.word	0x0800af3b
 800ae7c:	0800af3b 	.word	0x0800af3b
 800ae80:	0800af3b 	.word	0x0800af3b
 800ae84:	0800af3b 	.word	0x0800af3b
 800ae88:	0800af3b 	.word	0x0800af3b
 800ae8c:	0800af3b 	.word	0x0800af3b
 800ae90:	0800af3b 	.word	0x0800af3b
 800ae94:	0800af07 	.word	0x0800af07
 800ae98:	0800af3b 	.word	0x0800af3b
 800ae9c:	0800af3b 	.word	0x0800af3b
 800aea0:	0800af3b 	.word	0x0800af3b
 800aea4:	0800af3b 	.word	0x0800af3b
 800aea8:	0800af3b 	.word	0x0800af3b
 800aeac:	0800af3b 	.word	0x0800af3b
 800aeb0:	0800af3b 	.word	0x0800af3b
 800aeb4:	0800af3b 	.word	0x0800af3b
 800aeb8:	0800af3b 	.word	0x0800af3b
 800aebc:	0800af3b 	.word	0x0800af3b
 800aec0:	0800af3b 	.word	0x0800af3b
 800aec4:	0800af3b 	.word	0x0800af3b
 800aec8:	0800af3b 	.word	0x0800af3b
 800aecc:	0800af3b 	.word	0x0800af3b
 800aed0:	0800af3b 	.word	0x0800af3b
 800aed4:	0800af2d 	.word	0x0800af2d
 800aed8:	2b40      	cmp	r3, #64	; 0x40
 800aeda:	d02a      	beq.n	800af32 <UART_SetConfig+0x8aa>
 800aedc:	e02d      	b.n	800af3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aede:	f7fd fa23 	bl	8008328 <HAL_RCCEx_GetD3PCLK1Freq>
 800aee2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aee4:	e02f      	b.n	800af46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fd fa32 	bl	8008354 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aef4:	e027      	b.n	800af46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aef6:	f107 0318 	add.w	r3, r7, #24
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fd fb7e 	bl	80085fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af04:	e01f      	b.n	800af46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af06:	4b21      	ldr	r3, [pc, #132]	; (800af8c <UART_SetConfig+0x904>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d009      	beq.n	800af26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af12:	4b1e      	ldr	r3, [pc, #120]	; (800af8c <UART_SetConfig+0x904>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	08db      	lsrs	r3, r3, #3
 800af18:	f003 0303 	and.w	r3, r3, #3
 800af1c:	4a1d      	ldr	r2, [pc, #116]	; (800af94 <UART_SetConfig+0x90c>)
 800af1e:	fa22 f303 	lsr.w	r3, r2, r3
 800af22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af24:	e00f      	b.n	800af46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800af26:	4b1b      	ldr	r3, [pc, #108]	; (800af94 <UART_SetConfig+0x90c>)
 800af28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af2a:	e00c      	b.n	800af46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af2c:	4b1a      	ldr	r3, [pc, #104]	; (800af98 <UART_SetConfig+0x910>)
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af30:	e009      	b.n	800af46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af38:	e005      	b.n	800af46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800af44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 81ee 	beq.w	800b32a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af52:	4a12      	ldr	r2, [pc, #72]	; (800af9c <UART_SetConfig+0x914>)
 800af54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af58:	461a      	mov	r2, r3
 800af5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af60:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	4613      	mov	r3, r2
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	4413      	add	r3, r2
 800af6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af6e:	429a      	cmp	r2, r3
 800af70:	d305      	bcc.n	800af7e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d910      	bls.n	800afa0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af84:	e1d1      	b.n	800b32a <UART_SetConfig+0xca2>
 800af86:	bf00      	nop
 800af88:	40011c00 	.word	0x40011c00
 800af8c:	58024400 	.word	0x58024400
 800af90:	58000c00 	.word	0x58000c00
 800af94:	03d09000 	.word	0x03d09000
 800af98:	003d0900 	.word	0x003d0900
 800af9c:	0800c76c 	.word	0x0800c76c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa2:	2200      	movs	r2, #0
 800afa4:	60bb      	str	r3, [r7, #8]
 800afa6:	60fa      	str	r2, [r7, #12]
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	4ac0      	ldr	r2, [pc, #768]	; (800b2b0 <UART_SetConfig+0xc28>)
 800afae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	2200      	movs	r2, #0
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	607a      	str	r2, [r7, #4]
 800afba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afc2:	f7f5 f9a3 	bl	800030c <__aeabi_uldivmod>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4610      	mov	r0, r2
 800afcc:	4619      	mov	r1, r3
 800afce:	f04f 0200 	mov.w	r2, #0
 800afd2:	f04f 0300 	mov.w	r3, #0
 800afd6:	020b      	lsls	r3, r1, #8
 800afd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afdc:	0202      	lsls	r2, r0, #8
 800afde:	6979      	ldr	r1, [r7, #20]
 800afe0:	6849      	ldr	r1, [r1, #4]
 800afe2:	0849      	lsrs	r1, r1, #1
 800afe4:	2000      	movs	r0, #0
 800afe6:	460c      	mov	r4, r1
 800afe8:	4605      	mov	r5, r0
 800afea:	eb12 0804 	adds.w	r8, r2, r4
 800afee:	eb43 0905 	adc.w	r9, r3, r5
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	469a      	mov	sl, r3
 800affa:	4693      	mov	fp, r2
 800affc:	4652      	mov	r2, sl
 800affe:	465b      	mov	r3, fp
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	f7f5 f982 	bl	800030c <__aeabi_uldivmod>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4613      	mov	r3, r2
 800b00e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b016:	d308      	bcc.n	800b02a <UART_SetConfig+0x9a2>
 800b018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b01e:	d204      	bcs.n	800b02a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b026:	60da      	str	r2, [r3, #12]
 800b028:	e17f      	b.n	800b32a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b030:	e17b      	b.n	800b32a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	69db      	ldr	r3, [r3, #28]
 800b036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b03a:	f040 80bd 	bne.w	800b1b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b03e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b042:	2b20      	cmp	r3, #32
 800b044:	dc48      	bgt.n	800b0d8 <UART_SetConfig+0xa50>
 800b046:	2b00      	cmp	r3, #0
 800b048:	db7b      	blt.n	800b142 <UART_SetConfig+0xaba>
 800b04a:	2b20      	cmp	r3, #32
 800b04c:	d879      	bhi.n	800b142 <UART_SetConfig+0xaba>
 800b04e:	a201      	add	r2, pc, #4	; (adr r2, 800b054 <UART_SetConfig+0x9cc>)
 800b050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b054:	0800b0df 	.word	0x0800b0df
 800b058:	0800b0e7 	.word	0x0800b0e7
 800b05c:	0800b143 	.word	0x0800b143
 800b060:	0800b143 	.word	0x0800b143
 800b064:	0800b0ef 	.word	0x0800b0ef
 800b068:	0800b143 	.word	0x0800b143
 800b06c:	0800b143 	.word	0x0800b143
 800b070:	0800b143 	.word	0x0800b143
 800b074:	0800b0ff 	.word	0x0800b0ff
 800b078:	0800b143 	.word	0x0800b143
 800b07c:	0800b143 	.word	0x0800b143
 800b080:	0800b143 	.word	0x0800b143
 800b084:	0800b143 	.word	0x0800b143
 800b088:	0800b143 	.word	0x0800b143
 800b08c:	0800b143 	.word	0x0800b143
 800b090:	0800b143 	.word	0x0800b143
 800b094:	0800b10f 	.word	0x0800b10f
 800b098:	0800b143 	.word	0x0800b143
 800b09c:	0800b143 	.word	0x0800b143
 800b0a0:	0800b143 	.word	0x0800b143
 800b0a4:	0800b143 	.word	0x0800b143
 800b0a8:	0800b143 	.word	0x0800b143
 800b0ac:	0800b143 	.word	0x0800b143
 800b0b0:	0800b143 	.word	0x0800b143
 800b0b4:	0800b143 	.word	0x0800b143
 800b0b8:	0800b143 	.word	0x0800b143
 800b0bc:	0800b143 	.word	0x0800b143
 800b0c0:	0800b143 	.word	0x0800b143
 800b0c4:	0800b143 	.word	0x0800b143
 800b0c8:	0800b143 	.word	0x0800b143
 800b0cc:	0800b143 	.word	0x0800b143
 800b0d0:	0800b143 	.word	0x0800b143
 800b0d4:	0800b135 	.word	0x0800b135
 800b0d8:	2b40      	cmp	r3, #64	; 0x40
 800b0da:	d02e      	beq.n	800b13a <UART_SetConfig+0xab2>
 800b0dc:	e031      	b.n	800b142 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0de:	f7fb ff57 	bl	8006f90 <HAL_RCC_GetPCLK1Freq>
 800b0e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b0e4:	e033      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0e6:	f7fb ff69 	bl	8006fbc <HAL_RCC_GetPCLK2Freq>
 800b0ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b0ec:	e02f      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fd f92e 	bl	8008354 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0fc:	e027      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0fe:	f107 0318 	add.w	r3, r7, #24
 800b102:	4618      	mov	r0, r3
 800b104:	f7fd fa7a 	bl	80085fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b10c:	e01f      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b10e:	4b69      	ldr	r3, [pc, #420]	; (800b2b4 <UART_SetConfig+0xc2c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0320 	and.w	r3, r3, #32
 800b116:	2b00      	cmp	r3, #0
 800b118:	d009      	beq.n	800b12e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b11a:	4b66      	ldr	r3, [pc, #408]	; (800b2b4 <UART_SetConfig+0xc2c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	08db      	lsrs	r3, r3, #3
 800b120:	f003 0303 	and.w	r3, r3, #3
 800b124:	4a64      	ldr	r2, [pc, #400]	; (800b2b8 <UART_SetConfig+0xc30>)
 800b126:	fa22 f303 	lsr.w	r3, r2, r3
 800b12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b12c:	e00f      	b.n	800b14e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b12e:	4b62      	ldr	r3, [pc, #392]	; (800b2b8 <UART_SetConfig+0xc30>)
 800b130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b132:	e00c      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b134:	4b61      	ldr	r3, [pc, #388]	; (800b2bc <UART_SetConfig+0xc34>)
 800b136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b138:	e009      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b13a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b140:	e005      	b.n	800b14e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b142:	2300      	movs	r3, #0
 800b144:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b14c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 80ea 	beq.w	800b32a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	4a55      	ldr	r2, [pc, #340]	; (800b2b0 <UART_SetConfig+0xc28>)
 800b15c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b160:	461a      	mov	r2, r3
 800b162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b164:	fbb3 f3f2 	udiv	r3, r3, r2
 800b168:	005a      	lsls	r2, r3, #1
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	085b      	lsrs	r3, r3, #1
 800b170:	441a      	add	r2, r3
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	fbb2 f3f3 	udiv	r3, r2, r3
 800b17a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	2b0f      	cmp	r3, #15
 800b180:	d916      	bls.n	800b1b0 <UART_SetConfig+0xb28>
 800b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b188:	d212      	bcs.n	800b1b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	f023 030f 	bic.w	r3, r3, #15
 800b192:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	085b      	lsrs	r3, r3, #1
 800b198:	b29b      	uxth	r3, r3
 800b19a:	f003 0307 	and.w	r3, r3, #7
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b1ac:	60da      	str	r2, [r3, #12]
 800b1ae:	e0bc      	b.n	800b32a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b1b6:	e0b8      	b.n	800b32a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	dc4b      	bgt.n	800b258 <UART_SetConfig+0xbd0>
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f2c0 8087 	blt.w	800b2d4 <UART_SetConfig+0xc4c>
 800b1c6:	2b20      	cmp	r3, #32
 800b1c8:	f200 8084 	bhi.w	800b2d4 <UART_SetConfig+0xc4c>
 800b1cc:	a201      	add	r2, pc, #4	; (adr r2, 800b1d4 <UART_SetConfig+0xb4c>)
 800b1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d2:	bf00      	nop
 800b1d4:	0800b25f 	.word	0x0800b25f
 800b1d8:	0800b267 	.word	0x0800b267
 800b1dc:	0800b2d5 	.word	0x0800b2d5
 800b1e0:	0800b2d5 	.word	0x0800b2d5
 800b1e4:	0800b26f 	.word	0x0800b26f
 800b1e8:	0800b2d5 	.word	0x0800b2d5
 800b1ec:	0800b2d5 	.word	0x0800b2d5
 800b1f0:	0800b2d5 	.word	0x0800b2d5
 800b1f4:	0800b27f 	.word	0x0800b27f
 800b1f8:	0800b2d5 	.word	0x0800b2d5
 800b1fc:	0800b2d5 	.word	0x0800b2d5
 800b200:	0800b2d5 	.word	0x0800b2d5
 800b204:	0800b2d5 	.word	0x0800b2d5
 800b208:	0800b2d5 	.word	0x0800b2d5
 800b20c:	0800b2d5 	.word	0x0800b2d5
 800b210:	0800b2d5 	.word	0x0800b2d5
 800b214:	0800b28f 	.word	0x0800b28f
 800b218:	0800b2d5 	.word	0x0800b2d5
 800b21c:	0800b2d5 	.word	0x0800b2d5
 800b220:	0800b2d5 	.word	0x0800b2d5
 800b224:	0800b2d5 	.word	0x0800b2d5
 800b228:	0800b2d5 	.word	0x0800b2d5
 800b22c:	0800b2d5 	.word	0x0800b2d5
 800b230:	0800b2d5 	.word	0x0800b2d5
 800b234:	0800b2d5 	.word	0x0800b2d5
 800b238:	0800b2d5 	.word	0x0800b2d5
 800b23c:	0800b2d5 	.word	0x0800b2d5
 800b240:	0800b2d5 	.word	0x0800b2d5
 800b244:	0800b2d5 	.word	0x0800b2d5
 800b248:	0800b2d5 	.word	0x0800b2d5
 800b24c:	0800b2d5 	.word	0x0800b2d5
 800b250:	0800b2d5 	.word	0x0800b2d5
 800b254:	0800b2c7 	.word	0x0800b2c7
 800b258:	2b40      	cmp	r3, #64	; 0x40
 800b25a:	d037      	beq.n	800b2cc <UART_SetConfig+0xc44>
 800b25c:	e03a      	b.n	800b2d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b25e:	f7fb fe97 	bl	8006f90 <HAL_RCC_GetPCLK1Freq>
 800b262:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b264:	e03c      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b266:	f7fb fea9 	bl	8006fbc <HAL_RCC_GetPCLK2Freq>
 800b26a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b26c:	e038      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b26e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b272:	4618      	mov	r0, r3
 800b274:	f7fd f86e 	bl	8008354 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b27c:	e030      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b27e:	f107 0318 	add.w	r3, r7, #24
 800b282:	4618      	mov	r0, r3
 800b284:	f7fd f9ba 	bl	80085fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b28c:	e028      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b28e:	4b09      	ldr	r3, [pc, #36]	; (800b2b4 <UART_SetConfig+0xc2c>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0320 	and.w	r3, r3, #32
 800b296:	2b00      	cmp	r3, #0
 800b298:	d012      	beq.n	800b2c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b29a:	4b06      	ldr	r3, [pc, #24]	; (800b2b4 <UART_SetConfig+0xc2c>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	08db      	lsrs	r3, r3, #3
 800b2a0:	f003 0303 	and.w	r3, r3, #3
 800b2a4:	4a04      	ldr	r2, [pc, #16]	; (800b2b8 <UART_SetConfig+0xc30>)
 800b2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2ac:	e018      	b.n	800b2e0 <UART_SetConfig+0xc58>
 800b2ae:	bf00      	nop
 800b2b0:	0800c76c 	.word	0x0800c76c
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	03d09000 	.word	0x03d09000
 800b2bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b2c0:	4b24      	ldr	r3, [pc, #144]	; (800b354 <UART_SetConfig+0xccc>)
 800b2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c4:	e00c      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2c6:	4b24      	ldr	r3, [pc, #144]	; (800b358 <UART_SetConfig+0xcd0>)
 800b2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ca:	e009      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d2:	e005      	b.n	800b2e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b2de:	bf00      	nop
    }

    if (pclk != 0U)
 800b2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d021      	beq.n	800b32a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ea:	4a1c      	ldr	r2, [pc, #112]	; (800b35c <UART_SetConfig+0xcd4>)
 800b2ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	085b      	lsrs	r3, r3, #1
 800b2fe:	441a      	add	r2, r3
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	fbb2 f3f3 	udiv	r3, r2, r3
 800b308:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30c:	2b0f      	cmp	r3, #15
 800b30e:	d909      	bls.n	800b324 <UART_SetConfig+0xc9c>
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b316:	d205      	bcs.n	800b324 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	60da      	str	r2, [r3, #12]
 800b322:	e002      	b.n	800b32a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2201      	movs	r2, #1
 800b336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2200      	movs	r2, #0
 800b33e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2200      	movs	r2, #0
 800b344:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b346:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3748      	adds	r7, #72	; 0x48
 800b34e:	46bd      	mov	sp, r7
 800b350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b354:	03d09000 	.word	0x03d09000
 800b358:	003d0900 	.word	0x003d0900
 800b35c:	0800c76c 	.word	0x0800c76c

0800b360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36c:	f003 0308 	and.w	r3, r3, #8
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00a      	beq.n	800b38a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	430a      	orrs	r2, r1
 800b388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00a      	beq.n	800b3ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b0:	f003 0302 	and.w	r3, r3, #2
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00a      	beq.n	800b3ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d2:	f003 0304 	and.w	r3, r3, #4
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00a      	beq.n	800b3f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f4:	f003 0310 	and.w	r3, r3, #16
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00a      	beq.n	800b412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	430a      	orrs	r2, r1
 800b410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b416:	f003 0320 	and.w	r3, r3, #32
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00a      	beq.n	800b434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	430a      	orrs	r2, r1
 800b432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d01a      	beq.n	800b476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	430a      	orrs	r2, r1
 800b454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b45a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b45e:	d10a      	bne.n	800b476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	430a      	orrs	r2, r1
 800b474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00a      	beq.n	800b498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	430a      	orrs	r2, r1
 800b496:	605a      	str	r2, [r3, #4]
  }
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b098      	sub	sp, #96	; 0x60
 800b4a8:	af02      	add	r7, sp, #8
 800b4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4b4:	f7f7 f874 	bl	80025a0 <HAL_GetTick>
 800b4b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 0308 	and.w	r3, r3, #8
 800b4c4:	2b08      	cmp	r3, #8
 800b4c6:	d12f      	bne.n	800b528 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f88e 	bl	800b5f8 <UART_WaitOnFlagUntilTimeout>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d022      	beq.n	800b528 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	e853 3f00 	ldrex	r3, [r3]
 800b4ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4f6:	653b      	str	r3, [r7, #80]	; 0x50
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b500:	647b      	str	r3, [r7, #68]	; 0x44
 800b502:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b508:	e841 2300 	strex	r3, r2, [r1]
 800b50c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e6      	bne.n	800b4e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2220      	movs	r2, #32
 800b518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	e063      	b.n	800b5f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 0304 	and.w	r3, r3, #4
 800b532:	2b04      	cmp	r3, #4
 800b534:	d149      	bne.n	800b5ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b536:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b53e:	2200      	movs	r2, #0
 800b540:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f857 	bl	800b5f8 <UART_WaitOnFlagUntilTimeout>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d03c      	beq.n	800b5ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b558:	e853 3f00 	ldrex	r3, [r3]
 800b55c:	623b      	str	r3, [r7, #32]
   return(result);
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b564:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	461a      	mov	r2, r3
 800b56c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b56e:	633b      	str	r3, [r7, #48]	; 0x30
 800b570:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b576:	e841 2300 	strex	r3, r2, [r1]
 800b57a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1e6      	bne.n	800b550 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3308      	adds	r3, #8
 800b588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	60fb      	str	r3, [r7, #12]
   return(result);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f023 0301 	bic.w	r3, r3, #1
 800b598:	64bb      	str	r3, [r7, #72]	; 0x48
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5a2:	61fa      	str	r2, [r7, #28]
 800b5a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	69b9      	ldr	r1, [r7, #24]
 800b5a8:	69fa      	ldr	r2, [r7, #28]
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	617b      	str	r3, [r7, #20]
   return(result);
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e5      	bne.n	800b582 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e012      	b.n	800b5f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3758      	adds	r7, #88	; 0x58
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	603b      	str	r3, [r7, #0]
 800b604:	4613      	mov	r3, r2
 800b606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b608:	e04f      	b.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b610:	d04b      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b612:	f7f6 ffc5 	bl	80025a0 <HAL_GetTick>
 800b616:	4602      	mov	r2, r0
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d302      	bcc.n	800b628 <UART_WaitOnFlagUntilTimeout+0x30>
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	e04e      	b.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0304 	and.w	r3, r3, #4
 800b636:	2b00      	cmp	r3, #0
 800b638:	d037      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2b80      	cmp	r3, #128	; 0x80
 800b63e:	d034      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	2b40      	cmp	r3, #64	; 0x40
 800b644:	d031      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	f003 0308 	and.w	r3, r3, #8
 800b650:	2b08      	cmp	r3, #8
 800b652:	d110      	bne.n	800b676 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2208      	movs	r2, #8
 800b65a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f000 f95b 	bl	800b918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2208      	movs	r2, #8
 800b666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	e029      	b.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	69db      	ldr	r3, [r3, #28]
 800b67c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b684:	d111      	bne.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b68e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f000 f941 	bl	800b918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2220      	movs	r2, #32
 800b69a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e00f      	b.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	69da      	ldr	r2, [r3, #28]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	bf0c      	ite	eq
 800b6ba:	2301      	moveq	r3, #1
 800b6bc:	2300      	movne	r3, #0
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d0a0      	beq.n	800b60a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b0a3      	sub	sp, #140	; 0x8c
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	88fa      	ldrh	r2, [r7, #6]
 800b6ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	88fa      	ldrh	r2, [r7, #6]
 800b6f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b706:	d10e      	bne.n	800b726 <UART_Start_Receive_IT+0x52>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d105      	bne.n	800b71c <UART_Start_Receive_IT+0x48>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b71a:	e02d      	b.n	800b778 <UART_Start_Receive_IT+0xa4>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	22ff      	movs	r2, #255	; 0xff
 800b720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b724:	e028      	b.n	800b778 <UART_Start_Receive_IT+0xa4>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10d      	bne.n	800b74a <UART_Start_Receive_IT+0x76>
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d104      	bne.n	800b740 <UART_Start_Receive_IT+0x6c>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	22ff      	movs	r2, #255	; 0xff
 800b73a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b73e:	e01b      	b.n	800b778 <UART_Start_Receive_IT+0xa4>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	227f      	movs	r2, #127	; 0x7f
 800b744:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b748:	e016      	b.n	800b778 <UART_Start_Receive_IT+0xa4>
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b752:	d10d      	bne.n	800b770 <UART_Start_Receive_IT+0x9c>
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	691b      	ldr	r3, [r3, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d104      	bne.n	800b766 <UART_Start_Receive_IT+0x92>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	227f      	movs	r2, #127	; 0x7f
 800b760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b764:	e008      	b.n	800b778 <UART_Start_Receive_IT+0xa4>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	223f      	movs	r2, #63	; 0x3f
 800b76a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b76e:	e003      	b.n	800b778 <UART_Start_Receive_IT+0xa4>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2222      	movs	r2, #34	; 0x22
 800b784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3308      	adds	r3, #8
 800b78e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b792:	e853 3f00 	ldrex	r3, [r3]
 800b796:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b79a:	f043 0301 	orr.w	r3, r3, #1
 800b79e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b7ac:	673a      	str	r2, [r7, #112]	; 0x70
 800b7ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b7b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b7b4:	e841 2300 	strex	r3, r2, [r1]
 800b7b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b7ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1e3      	bne.n	800b788 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7c8:	d14f      	bne.n	800b86a <UART_Start_Receive_IT+0x196>
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b7d0:	88fa      	ldrh	r2, [r7, #6]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d349      	bcc.n	800b86a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7de:	d107      	bne.n	800b7f0 <UART_Start_Receive_IT+0x11c>
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d103      	bne.n	800b7f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	4a47      	ldr	r2, [pc, #284]	; (800b908 <UART_Start_Receive_IT+0x234>)
 800b7ec:	675a      	str	r2, [r3, #116]	; 0x74
 800b7ee:	e002      	b.n	800b7f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	4a46      	ldr	r2, [pc, #280]	; (800b90c <UART_Start_Receive_IT+0x238>)
 800b7f4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d01a      	beq.n	800b834 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b806:	e853 3f00 	ldrex	r3, [r3]
 800b80a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b80c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b80e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	461a      	mov	r2, r3
 800b81c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b820:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b822:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b824:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b826:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b828:	e841 2300 	strex	r3, r2, [r1]
 800b82c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b82e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1e4      	bne.n	800b7fe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3308      	adds	r3, #8
 800b83a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b83e:	e853 3f00 	ldrex	r3, [r3]
 800b842:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b84a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3308      	adds	r3, #8
 800b852:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b854:	64ba      	str	r2, [r7, #72]	; 0x48
 800b856:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b858:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b85a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b85c:	e841 2300 	strex	r3, r2, [r1]
 800b860:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1e5      	bne.n	800b834 <UART_Start_Receive_IT+0x160>
 800b868:	e046      	b.n	800b8f8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b872:	d107      	bne.n	800b884 <UART_Start_Receive_IT+0x1b0>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d103      	bne.n	800b884 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	4a24      	ldr	r2, [pc, #144]	; (800b910 <UART_Start_Receive_IT+0x23c>)
 800b880:	675a      	str	r2, [r3, #116]	; 0x74
 800b882:	e002      	b.n	800b88a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4a23      	ldr	r2, [pc, #140]	; (800b914 <UART_Start_Receive_IT+0x240>)
 800b888:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d019      	beq.n	800b8c6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	e853 3f00 	ldrex	r3, [r3]
 800b89e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b8a6:	677b      	str	r3, [r7, #116]	; 0x74
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b8b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8b8:	e841 2300 	strex	r3, r2, [r1]
 800b8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d1e6      	bne.n	800b892 <UART_Start_Receive_IT+0x1be>
 800b8c4:	e018      	b.n	800b8f8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	e853 3f00 	ldrex	r3, [r3]
 800b8d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	f043 0320 	orr.w	r3, r3, #32
 800b8da:	67bb      	str	r3, [r7, #120]	; 0x78
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8e4:	623b      	str	r3, [r7, #32]
 800b8e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e8:	69f9      	ldr	r1, [r7, #28]
 800b8ea:	6a3a      	ldr	r2, [r7, #32]
 800b8ec:	e841 2300 	strex	r3, r2, [r1]
 800b8f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1e6      	bne.n	800b8c6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	378c      	adds	r7, #140	; 0x8c
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	0800c139 	.word	0x0800c139
 800b90c:	0800bdd9 	.word	0x0800bdd9
 800b910:	0800bc21 	.word	0x0800bc21
 800b914:	0800ba69 	.word	0x0800ba69

0800b918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b918:	b480      	push	{r7}
 800b91a:	b095      	sub	sp, #84	; 0x54
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b928:	e853 3f00 	ldrex	r3, [r3]
 800b92c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b934:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b93e:	643b      	str	r3, [r7, #64]	; 0x40
 800b940:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e6      	bne.n	800b920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	3308      	adds	r3, #8
 800b958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	e853 3f00 	ldrex	r3, [r3]
 800b960:	61fb      	str	r3, [r7, #28]
   return(result);
 800b962:	69fa      	ldr	r2, [r7, #28]
 800b964:	4b1e      	ldr	r3, [pc, #120]	; (800b9e0 <UART_EndRxTransfer+0xc8>)
 800b966:	4013      	ands	r3, r2
 800b968:	64bb      	str	r3, [r7, #72]	; 0x48
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3308      	adds	r3, #8
 800b970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b972:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b97a:	e841 2300 	strex	r3, r2, [r1]
 800b97e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1e5      	bne.n	800b952 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d118      	bne.n	800b9c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f023 0310 	bic.w	r3, r3, #16
 800b9a2:	647b      	str	r3, [r7, #68]	; 0x44
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ac:	61bb      	str	r3, [r7, #24]
 800b9ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b0:	6979      	ldr	r1, [r7, #20]
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	e841 2300 	strex	r3, r2, [r1]
 800b9b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1e6      	bne.n	800b98e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b9d4:	bf00      	nop
 800b9d6:	3754      	adds	r7, #84	; 0x54
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	effffffe 	.word	0xeffffffe

0800b9e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f7fe fe2a 	bl	800a65c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba08:	bf00      	nop
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	e853 3f00 	ldrex	r3, [r3]
 800ba24:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba2c:	61fb      	str	r3, [r7, #28]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	61bb      	str	r3, [r7, #24]
 800ba38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3a:	6979      	ldr	r1, [r7, #20]
 800ba3c:	69ba      	ldr	r2, [r7, #24]
 800ba3e:	e841 2300 	strex	r3, r2, [r1]
 800ba42:	613b      	str	r3, [r7, #16]
   return(result);
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1e6      	bne.n	800ba18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7fe fdf5 	bl	800a648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba5e:	bf00      	nop
 800ba60:	3720      	adds	r7, #32
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
	...

0800ba68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b09c      	sub	sp, #112	; 0x70
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba76:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba80:	2b22      	cmp	r3, #34	; 0x22
 800ba82:	f040 80be 	bne.w	800bc02 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ba90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba94:	b2d9      	uxtb	r1, r3
 800ba96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baa0:	400a      	ands	r2, r1
 800baa2:	b2d2      	uxtb	r2, r2
 800baa4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baaa:	1c5a      	adds	r2, r3, #1
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	3b01      	subs	r3, #1
 800baba:	b29a      	uxth	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bac8:	b29b      	uxth	r3, r3
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f040 80a1 	bne.w	800bc12 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad8:	e853 3f00 	ldrex	r3, [r3]
 800badc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bae0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bae4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	461a      	mov	r2, r3
 800baec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800baee:	65bb      	str	r3, [r7, #88]	; 0x58
 800baf0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800baf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800baf6:	e841 2300 	strex	r3, r2, [r1]
 800bafa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1e6      	bne.n	800bad0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	3308      	adds	r3, #8
 800bb08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0c:	e853 3f00 	ldrex	r3, [r3]
 800bb10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb14:	f023 0301 	bic.w	r3, r3, #1
 800bb18:	667b      	str	r3, [r7, #100]	; 0x64
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3308      	adds	r3, #8
 800bb20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb22:	647a      	str	r2, [r7, #68]	; 0x44
 800bb24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb2a:	e841 2300 	strex	r3, r2, [r1]
 800bb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1e5      	bne.n	800bb02 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2220      	movs	r2, #32
 800bb3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a33      	ldr	r2, [pc, #204]	; (800bc1c <UART_RxISR_8BIT+0x1b4>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d01f      	beq.n	800bb94 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d018      	beq.n	800bb94 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6a:	e853 3f00 	ldrex	r3, [r3]
 800bb6e:	623b      	str	r3, [r7, #32]
   return(result);
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb76:	663b      	str	r3, [r7, #96]	; 0x60
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb80:	633b      	str	r3, [r7, #48]	; 0x30
 800bb82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb88:	e841 2300 	strex	r3, r2, [r1]
 800bb8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1e6      	bne.n	800bb62 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d12e      	bne.n	800bbfa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	e853 3f00 	ldrex	r3, [r3]
 800bbae:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f023 0310 	bic.w	r3, r3, #16
 800bbb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbc0:	61fb      	str	r3, [r7, #28]
 800bbc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc4:	69b9      	ldr	r1, [r7, #24]
 800bbc6:	69fa      	ldr	r2, [r7, #28]
 800bbc8:	e841 2300 	strex	r3, r2, [r1]
 800bbcc:	617b      	str	r3, [r7, #20]
   return(result);
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1e6      	bne.n	800bba2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	f003 0310 	and.w	r3, r3, #16
 800bbde:	2b10      	cmp	r3, #16
 800bbe0:	d103      	bne.n	800bbea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2210      	movs	r2, #16
 800bbe8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7fe fd3c 	bl	800a670 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bbf8:	e00b      	b.n	800bc12 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7f5 fb18 	bl	8001230 <HAL_UART_RxCpltCallback>
}
 800bc00:	e007      	b.n	800bc12 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	699a      	ldr	r2, [r3, #24]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f042 0208 	orr.w	r2, r2, #8
 800bc10:	619a      	str	r2, [r3, #24]
}
 800bc12:	bf00      	nop
 800bc14:	3770      	adds	r7, #112	; 0x70
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	58000c00 	.word	0x58000c00

0800bc20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b09c      	sub	sp, #112	; 0x70
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc38:	2b22      	cmp	r3, #34	; 0x22
 800bc3a:	f040 80be 	bne.w	800bdba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc4c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bc4e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800bc52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bc56:	4013      	ands	r3, r2
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc62:	1c9a      	adds	r2, r3, #2
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	3b01      	subs	r3, #1
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f040 80a1 	bne.w	800bdca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc90:	e853 3f00 	ldrex	r3, [r3]
 800bc94:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bc96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc9c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	461a      	mov	r2, r3
 800bca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bca6:	657b      	str	r3, [r7, #84]	; 0x54
 800bca8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bcae:	e841 2300 	strex	r3, r2, [r1]
 800bcb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bcb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1e6      	bne.n	800bc88 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc4:	e853 3f00 	ldrex	r3, [r3]
 800bcc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	f023 0301 	bic.w	r3, r3, #1
 800bcd0:	663b      	str	r3, [r7, #96]	; 0x60
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	3308      	adds	r3, #8
 800bcd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcda:	643a      	str	r2, [r7, #64]	; 0x40
 800bcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bce0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bce2:	e841 2300 	strex	r3, r2, [r1]
 800bce6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1e5      	bne.n	800bcba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2220      	movs	r2, #32
 800bcf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a33      	ldr	r2, [pc, #204]	; (800bdd4 <UART_RxISR_16BIT+0x1b4>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d01f      	beq.n	800bd4c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d018      	beq.n	800bd4c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	e853 3f00 	ldrex	r3, [r3]
 800bd26:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	461a      	mov	r2, r3
 800bd36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd3a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd40:	e841 2300 	strex	r3, r2, [r1]
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e6      	bne.n	800bd1a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d12e      	bne.n	800bdb2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	e853 3f00 	ldrex	r3, [r3]
 800bd66:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	f023 0310 	bic.w	r3, r3, #16
 800bd6e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	461a      	mov	r2, r3
 800bd76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd78:	61bb      	str	r3, [r7, #24]
 800bd7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7c:	6979      	ldr	r1, [r7, #20]
 800bd7e:	69ba      	ldr	r2, [r7, #24]
 800bd80:	e841 2300 	strex	r3, r2, [r1]
 800bd84:	613b      	str	r3, [r7, #16]
   return(result);
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1e6      	bne.n	800bd5a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	69db      	ldr	r3, [r3, #28]
 800bd92:	f003 0310 	and.w	r3, r3, #16
 800bd96:	2b10      	cmp	r3, #16
 800bd98:	d103      	bne.n	800bda2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2210      	movs	r2, #16
 800bda0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f7fe fc60 	bl	800a670 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdb0:	e00b      	b.n	800bdca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7f5 fa3c 	bl	8001230 <HAL_UART_RxCpltCallback>
}
 800bdb8:	e007      	b.n	800bdca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	699a      	ldr	r2, [r3, #24]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f042 0208 	orr.w	r2, r2, #8
 800bdc8:	619a      	str	r2, [r3, #24]
}
 800bdca:	bf00      	nop
 800bdcc:	3770      	adds	r7, #112	; 0x70
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	58000c00 	.word	0x58000c00

0800bdd8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b0ac      	sub	sp, #176	; 0xb0
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bde6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be0e:	2b22      	cmp	r3, #34	; 0x22
 800be10:	f040 8180 	bne.w	800c114 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be1a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800be1e:	e123      	b.n	800c068 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be2a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800be2e:	b2d9      	uxtb	r1, r3
 800be30:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800be34:	b2da      	uxtb	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be3a:	400a      	ands	r2, r1
 800be3c:	b2d2      	uxtb	r2, r2
 800be3e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be50:	b29b      	uxth	r3, r3
 800be52:	3b01      	subs	r3, #1
 800be54:	b29a      	uxth	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	69db      	ldr	r3, [r3, #28]
 800be62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800be66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be6a:	f003 0307 	and.w	r3, r3, #7
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d053      	beq.n	800bf1a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be76:	f003 0301 	and.w	r3, r3, #1
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d011      	beq.n	800bea2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800be7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00b      	beq.n	800bea2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2201      	movs	r2, #1
 800be90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be98:	f043 0201 	orr.w	r2, r3, #1
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bea6:	f003 0302 	and.w	r3, r3, #2
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d011      	beq.n	800bed2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800beae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800beb2:	f003 0301 	and.w	r3, r3, #1
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00b      	beq.n	800bed2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2202      	movs	r2, #2
 800bec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bec8:	f043 0204 	orr.w	r2, r3, #4
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d011      	beq.n	800bf02 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00b      	beq.n	800bf02 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2204      	movs	r2, #4
 800bef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bef8:	f043 0202 	orr.w	r2, r3, #2
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d006      	beq.n	800bf1a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7fe fba5 	bl	800a65c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f040 80a0 	bne.w	800c068 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf30:	e853 3f00 	ldrex	r3, [r3]
 800bf34:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800bf36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	461a      	mov	r2, r3
 800bf46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf4c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bf50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf52:	e841 2300 	strex	r3, r2, [r1]
 800bf56:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800bf58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1e4      	bne.n	800bf28 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3308      	adds	r3, #8
 800bf64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf68:	e853 3f00 	ldrex	r3, [r3]
 800bf6c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800bf6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf70:	4b6e      	ldr	r3, [pc, #440]	; (800c12c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800bf72:	4013      	ands	r3, r2
 800bf74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf82:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf84:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf86:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bf88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf8a:	e841 2300 	strex	r3, r2, [r1]
 800bf8e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bf90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1e3      	bne.n	800bf5e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2220      	movs	r2, #32
 800bf9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a60      	ldr	r2, [pc, #384]	; (800c130 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d021      	beq.n	800bff8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d01a      	beq.n	800bff8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfca:	e853 3f00 	ldrex	r3, [r3]
 800bfce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bfd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfe4:	657b      	str	r3, [r7, #84]	; 0x54
 800bfe6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bfea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfec:	e841 2300 	strex	r3, r2, [r1]
 800bff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e4      	bne.n	800bfc2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d130      	bne.n	800c062 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c00e:	e853 3f00 	ldrex	r3, [r3]
 800c012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	f023 0310 	bic.w	r3, r3, #16
 800c01a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c028:	643b      	str	r3, [r7, #64]	; 0x40
 800c02a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c02e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c030:	e841 2300 	strex	r3, r2, [r1]
 800c034:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1e4      	bne.n	800c006 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	69db      	ldr	r3, [r3, #28]
 800c042:	f003 0310 	and.w	r3, r3, #16
 800c046:	2b10      	cmp	r3, #16
 800c048:	d103      	bne.n	800c052 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2210      	movs	r2, #16
 800c050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c058:	4619      	mov	r1, r3
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f7fe fb08 	bl	800a670 <HAL_UARTEx_RxEventCallback>
 800c060:	e002      	b.n	800c068 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7f5 f8e4 	bl	8001230 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c068:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d006      	beq.n	800c07e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c074:	f003 0320 	and.w	r3, r3, #32
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f47f aed1 	bne.w	800be20 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c084:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c088:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d049      	beq.n	800c124 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c096:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d242      	bcs.n	800c124 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	3308      	adds	r3, #8
 800c0a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a6:	6a3b      	ldr	r3, [r7, #32]
 800c0a8:	e853 3f00 	ldrex	r3, [r3]
 800c0ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3308      	adds	r3, #8
 800c0be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c0c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0ca:	e841 2300 	strex	r3, r2, [r1]
 800c0ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1e3      	bne.n	800c09e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a16      	ldr	r2, [pc, #88]	; (800c134 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c0da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	e853 3f00 	ldrex	r3, [r3]
 800c0e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	f043 0320 	orr.w	r3, r3, #32
 800c0f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c0fe:	61bb      	str	r3, [r7, #24]
 800c100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c102:	6979      	ldr	r1, [r7, #20]
 800c104:	69ba      	ldr	r2, [r7, #24]
 800c106:	e841 2300 	strex	r3, r2, [r1]
 800c10a:	613b      	str	r3, [r7, #16]
   return(result);
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1e4      	bne.n	800c0dc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c112:	e007      	b.n	800c124 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	699a      	ldr	r2, [r3, #24]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f042 0208 	orr.w	r2, r2, #8
 800c122:	619a      	str	r2, [r3, #24]
}
 800c124:	bf00      	nop
 800c126:	37b0      	adds	r7, #176	; 0xb0
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	effffffe 	.word	0xeffffffe
 800c130:	58000c00 	.word	0x58000c00
 800c134:	0800ba69 	.word	0x0800ba69

0800c138 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b0ae      	sub	sp, #184	; 0xb8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c146:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	69db      	ldr	r3, [r3, #28]
 800c150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c16e:	2b22      	cmp	r3, #34	; 0x22
 800c170:	f040 8184 	bne.w	800c47c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c17a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c17e:	e127      	b.n	800c3d0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c186:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c18e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c192:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c196:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c19a:	4013      	ands	r3, r2
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a8:	1c9a      	adds	r2, r3, #2
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	69db      	ldr	r3, [r3, #28]
 800c1c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c1ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c1ce:	f003 0307 	and.w	r3, r3, #7
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d053      	beq.n	800c27e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d011      	beq.n	800c206 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c1e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00b      	beq.n	800c206 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1fc:	f043 0201 	orr.w	r2, r3, #1
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c20a:	f003 0302 	and.w	r3, r3, #2
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d011      	beq.n	800c236 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c216:	f003 0301 	and.w	r3, r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00b      	beq.n	800c236 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2202      	movs	r2, #2
 800c224:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c22c:	f043 0204 	orr.w	r2, r3, #4
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c23a:	f003 0304 	and.w	r3, r3, #4
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d011      	beq.n	800c266 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00b      	beq.n	800c266 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2204      	movs	r2, #4
 800c254:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c25c:	f043 0202 	orr.w	r2, r3, #2
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d006      	beq.n	800c27e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7fe f9f3 	bl	800a65c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c284:	b29b      	uxth	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	f040 80a2 	bne.w	800c3d0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c294:	e853 3f00 	ldrex	r3, [r3]
 800c298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c29a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c29c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2b2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c2b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c2ba:	e841 2300 	strex	r3, r2, [r1]
 800c2be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c2c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1e2      	bne.n	800c28c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c2d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2d8:	4b6e      	ldr	r3, [pc, #440]	; (800c494 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c2da:	4013      	ands	r3, r2
 800c2dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c2ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c2ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c2f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c2f2:	e841 2300 	strex	r3, r2, [r1]
 800c2f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c2f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1e3      	bne.n	800c2c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2220      	movs	r2, #32
 800c302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a60      	ldr	r2, [pc, #384]	; (800c498 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d021      	beq.n	800c360 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d01a      	beq.n	800c360 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c332:	e853 3f00 	ldrex	r3, [r3]
 800c336:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c33a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c33e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c34c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c34e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c350:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c352:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c354:	e841 2300 	strex	r3, r2, [r1]
 800c358:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e4      	bne.n	800c32a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c364:	2b01      	cmp	r3, #1
 800c366:	d130      	bne.n	800c3ca <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	e853 3f00 	ldrex	r3, [r3]
 800c37a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c37e:	f023 0310 	bic.w	r3, r3, #16
 800c382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	461a      	mov	r2, r3
 800c38c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c390:	647b      	str	r3, [r7, #68]	; 0x44
 800c392:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c394:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c398:	e841 2300 	strex	r3, r2, [r1]
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1e4      	bne.n	800c36e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	69db      	ldr	r3, [r3, #28]
 800c3aa:	f003 0310 	and.w	r3, r3, #16
 800c3ae:	2b10      	cmp	r3, #16
 800c3b0:	d103      	bne.n	800c3ba <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2210      	movs	r2, #16
 800c3b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7fe f954 	bl	800a670 <HAL_UARTEx_RxEventCallback>
 800c3c8:	e002      	b.n	800c3d0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7f4 ff30 	bl	8001230 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3d0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d006      	beq.n	800c3e6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c3d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c3dc:	f003 0320 	and.w	r3, r3, #32
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f47f aecd 	bne.w	800c180 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3ec:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c3f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d049      	beq.n	800c48c <UART_RxISR_16BIT_FIFOEN+0x354>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c3fe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c402:	429a      	cmp	r2, r3
 800c404:	d242      	bcs.n	800c48c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3308      	adds	r3, #8
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c410:	e853 3f00 	ldrex	r3, [r3]
 800c414:	623b      	str	r3, [r7, #32]
   return(result);
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c41c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	3308      	adds	r3, #8
 800c426:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c42a:	633a      	str	r2, [r7, #48]	; 0x30
 800c42c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c432:	e841 2300 	strex	r3, r2, [r1]
 800c436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1e3      	bne.n	800c406 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4a16      	ldr	r2, [pc, #88]	; (800c49c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c442:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	e853 3f00 	ldrex	r3, [r3]
 800c450:	60fb      	str	r3, [r7, #12]
   return(result);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f043 0320 	orr.w	r3, r3, #32
 800c458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c466:	61fb      	str	r3, [r7, #28]
 800c468:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46a:	69b9      	ldr	r1, [r7, #24]
 800c46c:	69fa      	ldr	r2, [r7, #28]
 800c46e:	e841 2300 	strex	r3, r2, [r1]
 800c472:	617b      	str	r3, [r7, #20]
   return(result);
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1e4      	bne.n	800c444 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c47a:	e007      	b.n	800c48c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	699a      	ldr	r2, [r3, #24]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f042 0208 	orr.w	r2, r2, #8
 800c48a:	619a      	str	r2, [r3, #24]
}
 800c48c:	bf00      	nop
 800c48e:	37b8      	adds	r7, #184	; 0xb8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	effffffe 	.word	0xeffffffe
 800c498:	58000c00 	.word	0x58000c00
 800c49c:	0800bc21 	.word	0x0800bc21

0800c4a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d101      	bne.n	800c4f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	e027      	b.n	800c542 <HAL_UARTEx_DisableFifoMode+0x66>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2224      	movs	r2, #36	; 0x24
 800c4fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f022 0201 	bic.w	r2, r2, #1
 800c518:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c520:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2220      	movs	r2, #32
 800c534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3714      	adds	r7, #20
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr

0800c54e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b084      	sub	sp, #16
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
 800c556:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d101      	bne.n	800c566 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c562:	2302      	movs	r3, #2
 800c564:	e02d      	b.n	800c5c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2201      	movs	r2, #1
 800c56a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2224      	movs	r2, #36	; 0x24
 800c572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f022 0201 	bic.w	r2, r2, #1
 800c58c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	683a      	ldr	r2, [r7, #0]
 800c59e:	430a      	orrs	r2, r1
 800c5a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f850 	bl	800c648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b084      	sub	sp, #16
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d101      	bne.n	800c5e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c5de:	2302      	movs	r3, #2
 800c5e0:	e02d      	b.n	800c63e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2224      	movs	r2, #36	; 0x24
 800c5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 0201 	bic.w	r2, r2, #1
 800c608:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	430a      	orrs	r2, r1
 800c61c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f812 	bl	800c648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2220      	movs	r2, #32
 800c630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
	...

0800c648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c654:	2b00      	cmp	r3, #0
 800c656:	d108      	bne.n	800c66a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c668:	e031      	b.n	800c6ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c66a:	2310      	movs	r3, #16
 800c66c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c66e:	2310      	movs	r3, #16
 800c670:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	0e5b      	lsrs	r3, r3, #25
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	f003 0307 	and.w	r3, r3, #7
 800c680:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	0f5b      	lsrs	r3, r3, #29
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	f003 0307 	and.w	r3, r3, #7
 800c690:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c692:	7bbb      	ldrb	r3, [r7, #14]
 800c694:	7b3a      	ldrb	r2, [r7, #12]
 800c696:	4911      	ldr	r1, [pc, #68]	; (800c6dc <UARTEx_SetNbDataToProcess+0x94>)
 800c698:	5c8a      	ldrb	r2, [r1, r2]
 800c69a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c69e:	7b3a      	ldrb	r2, [r7, #12]
 800c6a0:	490f      	ldr	r1, [pc, #60]	; (800c6e0 <UARTEx_SetNbDataToProcess+0x98>)
 800c6a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6b0:	7bfb      	ldrb	r3, [r7, #15]
 800c6b2:	7b7a      	ldrb	r2, [r7, #13]
 800c6b4:	4909      	ldr	r1, [pc, #36]	; (800c6dc <UARTEx_SetNbDataToProcess+0x94>)
 800c6b6:	5c8a      	ldrb	r2, [r1, r2]
 800c6b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c6bc:	7b7a      	ldrb	r2, [r7, #13]
 800c6be:	4908      	ldr	r1, [pc, #32]	; (800c6e0 <UARTEx_SetNbDataToProcess+0x98>)
 800c6c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6c6:	b29a      	uxth	r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c6ce:	bf00      	nop
 800c6d0:	3714      	adds	r7, #20
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	0800c784 	.word	0x0800c784
 800c6e0:	0800c78c 	.word	0x0800c78c

0800c6e4 <memset>:
 800c6e4:	4402      	add	r2, r0
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d100      	bne.n	800c6ee <memset+0xa>
 800c6ec:	4770      	bx	lr
 800c6ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c6f2:	e7f9      	b.n	800c6e8 <memset+0x4>

0800c6f4 <__libc_init_array>:
 800c6f4:	b570      	push	{r4, r5, r6, lr}
 800c6f6:	4d0d      	ldr	r5, [pc, #52]	; (800c72c <__libc_init_array+0x38>)
 800c6f8:	4c0d      	ldr	r4, [pc, #52]	; (800c730 <__libc_init_array+0x3c>)
 800c6fa:	1b64      	subs	r4, r4, r5
 800c6fc:	10a4      	asrs	r4, r4, #2
 800c6fe:	2600      	movs	r6, #0
 800c700:	42a6      	cmp	r6, r4
 800c702:	d109      	bne.n	800c718 <__libc_init_array+0x24>
 800c704:	4d0b      	ldr	r5, [pc, #44]	; (800c734 <__libc_init_array+0x40>)
 800c706:	4c0c      	ldr	r4, [pc, #48]	; (800c738 <__libc_init_array+0x44>)
 800c708:	f000 f818 	bl	800c73c <_init>
 800c70c:	1b64      	subs	r4, r4, r5
 800c70e:	10a4      	asrs	r4, r4, #2
 800c710:	2600      	movs	r6, #0
 800c712:	42a6      	cmp	r6, r4
 800c714:	d105      	bne.n	800c722 <__libc_init_array+0x2e>
 800c716:	bd70      	pop	{r4, r5, r6, pc}
 800c718:	f855 3b04 	ldr.w	r3, [r5], #4
 800c71c:	4798      	blx	r3
 800c71e:	3601      	adds	r6, #1
 800c720:	e7ee      	b.n	800c700 <__libc_init_array+0xc>
 800c722:	f855 3b04 	ldr.w	r3, [r5], #4
 800c726:	4798      	blx	r3
 800c728:	3601      	adds	r6, #1
 800c72a:	e7f2      	b.n	800c712 <__libc_init_array+0x1e>
 800c72c:	0800c79c 	.word	0x0800c79c
 800c730:	0800c79c 	.word	0x0800c79c
 800c734:	0800c79c 	.word	0x0800c79c
 800c738:	0800c7a0 	.word	0x0800c7a0

0800c73c <_init>:
 800c73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73e:	bf00      	nop
 800c740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c742:	bc08      	pop	{r3}
 800c744:	469e      	mov	lr, r3
 800c746:	4770      	bx	lr

0800c748 <_fini>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	bf00      	nop
 800c74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74e:	bc08      	pop	{r3}
 800c750:	469e      	mov	lr, r3
 800c752:	4770      	bx	lr
