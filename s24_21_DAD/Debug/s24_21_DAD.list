
s24_21_DAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c804  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800cad0  0800cad0  0001cad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cb10  0800cb10  0001cb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cb18  0800cb18  0001cb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cb1c  0800cb1c  0001cb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800cb20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800cb30  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800cb90  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c0  240000d0  0800cbf0  000200d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000a90  0800cbf0  00020a90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cf13  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bbb  00000000  00000000  0003d054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  0003fc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f7  00000000  00000000  000411a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034a5f  00000000  00000000  00042297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfb7  00000000  00000000  00076cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00157fce  00000000  00000000  00092cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d70  00000000  00000000  001eac7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001f09ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800cab8 	.word	0x0800cab8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	0800cab8 	.word	0x0800cab8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f002 f900 	bl	8002810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f860 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fcd8 	bl	8000fc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 fcb6 	bl	8000f88 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800061c:	f000 fc14 	bl	8000e48 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000620:	f000 fcaa 	bl	8000f78 <MX_USB_OTG_HS_USB_Init>
  MX_USART1_UART_Init();
 8000624:	f000 fb78 	bl	8000d18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000628:	f000 fbc2 	bl	8000db0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800062c:	f000 fc58 	bl	8000ee0 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000630:	f000 f90c 	bl	800084c <MX_SPI1_Init>
  MX_SPI5_Init();
 8000634:	f000 fa0e 	bl	8000a54 <MX_SPI5_Init>
  MX_ETH_Init();
 8000638:	f000 f8bc 	bl	80007b4 <MX_ETH_Init>
  MX_TIM16_Init();
 800063c:	f000 fa60 	bl	8000b00 <MX_TIM16_Init>
  MX_UART4_Init();
 8000640:	f000 fa86 	bl	8000b50 <MX_UART4_Init>
  MX_UART5_Init();
 8000644:	f000 fad0 	bl	8000be8 <MX_UART5_Init>
  MX_UART7_Init();
 8000648:	f000 fb1a 	bl	8000c80 <MX_UART7_Init>
  MX_SPI4_Init();
 800064c:	f000 f9ac 	bl	80009a8 <MX_SPI4_Init>
  MX_SPI3_Init();
 8000650:	f000 f952 	bl	80008f8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, rx_data1, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	4911      	ldr	r1, [pc, #68]	; (800069c <main+0x94>)
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <main+0x98>)
 800065a:	f009 fdad 	bl	800a1b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, rx_data2, 1);
 800065e:	2201      	movs	r2, #1
 8000660:	4910      	ldr	r1, [pc, #64]	; (80006a4 <main+0x9c>)
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <main+0xa0>)
 8000664:	f009 fda8 	bl	800a1b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, rx_data3, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	4910      	ldr	r1, [pc, #64]	; (80006ac <main+0xa4>)
 800066c:	4810      	ldr	r0, [pc, #64]	; (80006b0 <main+0xa8>)
 800066e:	f009 fda3 	bl	800a1b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, rx_data4, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	490f      	ldr	r1, [pc, #60]	; (80006b4 <main+0xac>)
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <main+0xb0>)
 8000678:	f009 fd9e 	bl	800a1b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, rx_data5, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	490f      	ldr	r1, [pc, #60]	; (80006bc <main+0xb4>)
 8000680:	480f      	ldr	r0, [pc, #60]	; (80006c0 <main+0xb8>)
 8000682:	f009 fd99 	bl	800a1b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, rx_data6, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	490e      	ldr	r1, [pc, #56]	; (80006c4 <main+0xbc>)
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <main+0xc0>)
 800068c:	f009 fd94 	bl	800a1b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart7, rx_data7, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	490e      	ldr	r1, [pc, #56]	; (80006cc <main+0xc4>)
 8000694:	480e      	ldr	r0, [pc, #56]	; (80006d0 <main+0xc8>)
 8000696:	f009 fd8f 	bl	800a1b8 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	e7fe      	b.n	800069a <main+0x92>
 800069c:	240008c4 	.word	0x240008c4
 80006a0:	24000674 	.word	0x24000674
 80006a4:	240008f4 	.word	0x240008f4
 80006a8:	24000708 	.word	0x24000708
 80006ac:	24000924 	.word	0x24000924
 80006b0:	2400079c 	.word	0x2400079c
 80006b4:	24000954 	.word	0x24000954
 80006b8:	240004b8 	.word	0x240004b8
 80006bc:	24000984 	.word	0x24000984
 80006c0:	2400054c 	.word	0x2400054c
 80006c4:	240009b4 	.word	0x240009b4
 80006c8:	24000830 	.word	0x24000830
 80006cc:	240009e4 	.word	0x240009e4
 80006d0:	240005e0 	.word	0x240005e0

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b09c      	sub	sp, #112	; 0x70
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	224c      	movs	r2, #76	; 0x4c
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f00c f9bc 	bl	800ca60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2220      	movs	r2, #32
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00c f9b6 	bl	800ca60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006f4:	2002      	movs	r0, #2
 80006f6:	f005 fe95 	bl	8006424 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <SystemClock_Config+0xdc>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a2b      	ldr	r2, [pc, #172]	; (80007b0 <SystemClock_Config+0xdc>)
 8000704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <SystemClock_Config+0xdc>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000716:	bf00      	nop
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <SystemClock_Config+0xdc>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000724:	d1f8      	bne.n	8000718 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000726:	2321      	movs	r3, #33	; 0x21
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800072a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000738:	2302      	movs	r3, #2
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000740:	f240 1313 	movw	r3, #275	; 0x113
 8000744:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074a:	2304      	movs	r3, #4
 800074c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000752:	2304      	movs	r3, #4
 8000754:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000756:	2300      	movs	r3, #0
 8000758:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000762:	4618      	mov	r0, r3
 8000764:	f005 fe98 	bl	8006498 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800076e:	f001 f862 	bl	8001836 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	233f      	movs	r3, #63	; 0x3f
 8000774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2303      	movs	r3, #3
 8000778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800077e:	2308      	movs	r3, #8
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000786:	2340      	movs	r3, #64	; 0x40
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800078a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2103      	movs	r1, #3
 8000798:	4618      	mov	r0, r3
 800079a:	f006 fa57 	bl	8006c4c <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a4:	f001 f847 	bl	8001836 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3770      	adds	r7, #112	; 0x70
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58024800 	.word	0x58024800

080007b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_ETH_Init+0x80>)
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <MX_ETH_Init+0x84>)
 80007bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ETH_Init+0x88>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ETH_Init+0x88>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_ETH_Init+0x88>)
 80007cc:	22e1      	movs	r2, #225	; 0xe1
 80007ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ETH_Init+0x88>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_ETH_Init+0x88>)
 80007d8:	2200      	movs	r2, #0
 80007da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_ETH_Init+0x88>)
 80007de:	2200      	movs	r2, #0
 80007e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_ETH_Init+0x80>)
 80007e4:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_ETH_Init+0x88>)
 80007e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_ETH_Init+0x80>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_ETH_Init+0x80>)
 80007f0:	4a13      	ldr	r2, [pc, #76]	; (8000840 <MX_ETH_Init+0x8c>)
 80007f2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_ETH_Init+0x80>)
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <MX_ETH_Init+0x90>)
 80007f8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_ETH_Init+0x80>)
 80007fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000800:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <MX_ETH_Init+0x80>)
 8000804:	f004 fffe 	bl	8005804 <HAL_ETH_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800080e:	f001 f812 	bl	8001836 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000812:	2238      	movs	r2, #56	; 0x38
 8000814:	2100      	movs	r1, #0
 8000816:	480c      	ldr	r0, [pc, #48]	; (8000848 <MX_ETH_Init+0x94>)
 8000818:	f00c f922 	bl	800ca60 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_ETH_Init+0x94>)
 800081e:	2221      	movs	r2, #33	; 0x21
 8000820:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_ETH_Init+0x94>)
 8000824:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000828:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_ETH_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	24000124 	.word	0x24000124
 8000838:	40028000 	.word	0x40028000
 800083c:	24000a84 	.word	0x24000a84
 8000840:	24000070 	.word	0x24000070
 8000844:	24000010 	.word	0x24000010
 8000848:	240000ec 	.word	0x240000ec

0800084c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <MX_SPI1_Init+0xa4>)
 8000852:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <MX_SPI1_Init+0xa8>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_SPI1_Init+0xa4>)
 8000858:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800085c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <MX_SPI1_Init+0xa4>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_SPI1_Init+0xa4>)
 8000866:	2207      	movs	r2, #7
 8000868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <MX_SPI1_Init+0xa4>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_SPI1_Init+0xa4>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_SPI1_Init+0xa4>)
 8000878:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800087c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_SPI1_Init+0xa4>)
 8000880:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000884:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI1_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI1_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_SPI1_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_SPI1_Init+0xa4>)
 800089a:	2200      	movs	r2, #0
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_SPI1_Init+0xa4>)
 80008de:	f008 fb03 	bl	8008ee8 <HAL_SPI_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80008e8:	f000 ffa5 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	240001d4 	.word	0x240001d4
 80008f4:	40013000 	.word	0x40013000

080008f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <MX_SPI3_Init+0xa8>)
 80008fe:	4a29      	ldr	r2, [pc, #164]	; (80009a4 <MX_SPI3_Init+0xac>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000904:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000908:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_SPI3_Init+0xa8>)
 800090c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000910:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000914:	2207      	movs	r2, #7
 8000916:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_SPI3_Init+0xa8>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000926:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800092a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_SPI3_Init+0xa8>)
 800092e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000932:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_SPI3_Init+0xa8>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000948:	2200      	movs	r2, #0
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_SPI3_Init+0xa8>)
 800094e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000952:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000956:	2200      	movs	r2, #0
 8000958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_SPI3_Init+0xa8>)
 800095c:	2200      	movs	r2, #0
 800095e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000962:	2200      	movs	r2, #0
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000968:	2200      	movs	r2, #0
 800096a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_SPI3_Init+0xa8>)
 800096e:	2200      	movs	r2, #0
 8000970:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000974:	2200      	movs	r2, #0
 8000976:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_SPI3_Init+0xa8>)
 800097a:	2200      	movs	r2, #0
 800097c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000980:	2200      	movs	r2, #0
 8000982:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000986:	2200      	movs	r2, #0
 8000988:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_SPI3_Init+0xa8>)
 800098c:	f008 faac 	bl	8008ee8 <HAL_SPI_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8000996:	f000 ff4e 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2400025c 	.word	0x2400025c
 80009a4:	40003c00 	.word	0x40003c00

080009a8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009ae:	4a28      	ldr	r2, [pc, #160]	; (8000a50 <MX_SPI4_Init+0xa8>)
 80009b0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009b8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009d8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009dc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80009e0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_SPI4_Init+0xa4>)
 80009fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_SPI4_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_SPI4_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_SPI4_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_SPI4_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_SPI4_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_SPI4_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_SPI4_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_SPI4_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_SPI4_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_SPI4_Init+0xa4>)
 8000a3a:	f008 fa55 	bl	8008ee8 <HAL_SPI_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000a44:	f000 fef7 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	240002e4 	.word	0x240002e4
 8000a50:	40013400 	.word	0x40013400

08000a54 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a5a:	4a28      	ldr	r2, [pc, #160]	; (8000afc <MX_SPI5_Init+0xa8>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a60:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a64:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a6e:	2207      	movs	r2, #7
 8000a70:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a84:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a88:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000a8c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_SPI5_Init+0xa4>)
 8000ae6:	f008 f9ff 	bl	8008ee8 <HAL_SPI_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8000af0:	f000 fea1 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2400036c 	.word	0x2400036c
 8000afc:	40015000 	.word	0x40015000

08000b00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_TIM16_Init+0x48>)
 8000b06:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <MX_TIM16_Init+0x4c>)
 8000b08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_TIM16_Init+0x48>)
 8000b0c:	f240 2226 	movw	r2, #550	; 0x226
 8000b10:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MX_TIM16_Init+0x48>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_TIM16_Init+0x48>)
 8000b1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b1e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_TIM16_Init+0x48>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_TIM16_Init+0x48>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_TIM16_Init+0x48>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_TIM16_Init+0x48>)
 8000b34:	f009 f899 	bl	8009c6a <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000b3e:	f000 fe7a 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2400046c 	.word	0x2400046c
 8000b4c:	40014400 	.word	0x40014400

08000b50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <MX_UART4_Init+0x94>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b5c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000b60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_UART4_Init+0x90>)
 8000b9a:	f009 fabd 	bl	800a118 <HAL_UART_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ba4:	f000 fe47 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <MX_UART4_Init+0x90>)
 8000bac:	f00b fe8d 	bl	800c8ca <HAL_UARTEx_SetTxFifoThreshold>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000bb6:	f000 fe3e 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <MX_UART4_Init+0x90>)
 8000bbe:	f00b fec2 	bl	800c946 <HAL_UARTEx_SetRxFifoThreshold>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bc8:	f000 fe35 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_UART4_Init+0x90>)
 8000bce:	f00b fe43 	bl	800c858 <HAL_UARTEx_DisableFifoMode>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000bd8:	f000 fe2d 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	240004b8 	.word	0x240004b8
 8000be4:	40004c00 	.word	0x40004c00

08000be8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_UART5_Init+0x90>)
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <MX_UART5_Init+0x94>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_UART5_Init+0x90>)
 8000bf4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000bf8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_UART5_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c30:	4811      	ldr	r0, [pc, #68]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c32:	f009 fa71 	bl	800a118 <HAL_UART_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000c3c:	f000 fdfb 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c40:	2100      	movs	r1, #0
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c44:	f00b fe41 	bl	800c8ca <HAL_UARTEx_SetTxFifoThreshold>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000c4e:	f000 fdf2 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4808      	ldr	r0, [pc, #32]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c56:	f00b fe76 	bl	800c946 <HAL_UARTEx_SetRxFifoThreshold>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c60:	f000 fde9 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_UART5_Init+0x90>)
 8000c66:	f00b fdf7 	bl	800c858 <HAL_UARTEx_DisableFifoMode>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c70:	f000 fde1 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2400054c 	.word	0x2400054c
 8000c7c:	40005000 	.word	0x40005000

08000c80 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_UART7_Init+0x90>)
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <MX_UART7_Init+0x94>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_UART7_Init+0x90>)
 8000c8c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c90:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_UART7_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_UART7_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_UART7_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_UART7_Init+0x90>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_UART7_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_UART7_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_UART7_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_UART7_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_UART7_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MX_UART7_Init+0x90>)
 8000cca:	f009 fa25 	bl	800a118 <HAL_UART_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000cd4:	f000 fdaf 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_UART7_Init+0x90>)
 8000cdc:	f00b fdf5 	bl	800c8ca <HAL_UARTEx_SetTxFifoThreshold>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000ce6:	f000 fda6 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cea:	2100      	movs	r1, #0
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <MX_UART7_Init+0x90>)
 8000cee:	f00b fe2a 	bl	800c946 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000cf8:	f000 fd9d 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_UART7_Init+0x90>)
 8000cfe:	f00b fdab 	bl	800c858 <HAL_UARTEx_DisableFifoMode>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 fd95 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	240005e0 	.word	0x240005e0
 8000d14:	40007800 	.word	0x40007800

08000d18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d1e:	4a23      	ldr	r2, [pc, #140]	; (8000dac <MX_USART1_UART_Init+0x94>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d60:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d62:	f009 f9d9 	bl	800a118 <HAL_UART_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d6c:	f000 fd63 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d70:	2100      	movs	r1, #0
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d74:	f00b fda9 	bl	800c8ca <HAL_UARTEx_SetTxFifoThreshold>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d7e:	f000 fd5a 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d86:	f00b fdde 	bl	800c946 <HAL_UARTEx_SetRxFifoThreshold>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d90:	f000 fd51 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_USART1_UART_Init+0x90>)
 8000d96:	f00b fd5f 	bl	800c858 <HAL_UARTEx_DisableFifoMode>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000da0:	f000 fd49 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	24000674 	.word	0x24000674
 8000dac:	40011000 	.word	0x40011000

08000db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000db6:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <MX_USART2_UART_Init+0x94>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000dbc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df8:	4811      	ldr	r0, [pc, #68]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000dfa:	f009 f98d 	bl	800a118 <HAL_UART_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e04:	f000 fd17 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000e0c:	f00b fd5d 	bl	800c8ca <HAL_UARTEx_SetTxFifoThreshold>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e16:	f000 fd0e 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4808      	ldr	r0, [pc, #32]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000e1e:	f00b fd92 	bl	800c946 <HAL_UARTEx_SetRxFifoThreshold>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e28:	f000 fd05 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_USART2_UART_Init+0x90>)
 8000e2e:	f00b fd13 	bl	800c858 <HAL_UARTEx_DisableFifoMode>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e38:	f000 fcfd 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	24000708 	.word	0x24000708
 8000e44:	40004400 	.word	0x40004400

08000e48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <MX_USART3_UART_Init+0x94>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e54:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000e58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e90:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000e92:	f009 f941 	bl	800a118 <HAL_UART_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e9c:	f000 fccb 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000ea4:	f00b fd11 	bl	800c8ca <HAL_UARTEx_SetTxFifoThreshold>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000eae:	f000 fcc2 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000eb6:	f00b fd46 	bl	800c946 <HAL_UARTEx_SetRxFifoThreshold>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ec0:	f000 fcb9 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_USART3_UART_Init+0x90>)
 8000ec6:	f00b fcc7 	bl	800c858 <HAL_UARTEx_DisableFifoMode>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ed0:	f000 fcb1 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2400079c 	.word	0x2400079c
 8000edc:	40004800 	.word	0x40004800

08000ee0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000ee6:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <MX_USART6_UART_Init+0x94>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000eec:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000ef0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f2a:	f009 f8f5 	bl	800a118 <HAL_UART_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000f34:	f000 fc7f 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f3c:	f00b fcc5 	bl	800c8ca <HAL_UARTEx_SetTxFifoThreshold>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000f46:	f000 fc76 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f4e:	f00b fcfa 	bl	800c946 <HAL_UARTEx_SetRxFifoThreshold>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000f58:	f000 fc6d 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_USART6_UART_Init+0x90>)
 8000f5e:	f00b fc7b 	bl	800c858 <HAL_UARTEx_DisableFifoMode>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000f68:	f000 fc65 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	24000830 	.word	0x24000830
 8000f74:	40011400 	.word	0x40011400

08000f78 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <MX_DMA_Init+0x3c>)
 8000f90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <MX_DMA_Init+0x3c>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_DMA_Init+0x3c>)
 8000fa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	200b      	movs	r0, #11
 8000fb2:	f001 fdae 	bl	8002b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fb6:	200b      	movs	r0, #11
 8000fb8:	f001 fdc5 	bl	8002b46 <HAL_NVIC_EnableIRQ>

}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fde:	4b78      	ldr	r3, [pc, #480]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	4a76      	ldr	r2, [pc, #472]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fee:	4b74      	ldr	r3, [pc, #464]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	623b      	str	r3, [r7, #32]
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4b70      	ldr	r3, [pc, #448]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a6f      	ldr	r2, [pc, #444]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b6c      	ldr	r3, [pc, #432]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101a:	4b69      	ldr	r3, [pc, #420]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a67      	ldr	r2, [pc, #412]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8001022:	f043 0320 	orr.w	r3, r3, #32
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b65      	ldr	r3, [pc, #404]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0320 	and.w	r3, r3, #32
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	4a60      	ldr	r2, [pc, #384]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001048:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b5a      	ldr	r3, [pc, #360]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105c:	4a58      	ldr	r2, [pc, #352]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001066:	4b56      	ldr	r3, [pc, #344]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107a:	4a51      	ldr	r2, [pc, #324]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001098:	4a49      	ldr	r2, [pc, #292]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b0:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b6:	4a42      	ldr	r2, [pc, #264]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 80010b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c0:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <MX_GPIO_Init+0x1f8>)
 80010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2112      	movs	r1, #18
 80010d2:	483c      	ldr	r0, [pc, #240]	; (80011c4 <MX_GPIO_Init+0x1fc>)
 80010d4:	f005 f972 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f244 0181 	movw	r1, #16513	; 0x4081
 80010de:	483a      	ldr	r0, [pc, #232]	; (80011c8 <MX_GPIO_Init+0x200>)
 80010e0:	f005 f96c 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ea:	4838      	ldr	r0, [pc, #224]	; (80011cc <MX_GPIO_Init+0x204>)
 80010ec:	f005 f966 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LED_YELLOW_Pin;
 80010f0:	2312      	movs	r3, #18
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	482f      	ldr	r0, [pc, #188]	; (80011c4 <MX_GPIO_Init+0x1fc>)
 8001108:	f004 ffb0 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800110c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	482b      	ldr	r0, [pc, #172]	; (80011d0 <MX_GPIO_Init+0x208>)
 8001122:	f004 ffa3 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin PB7 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|GPIO_PIN_7;
 8001126:	f244 0381 	movw	r3, #16513	; 0x4081
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	4822      	ldr	r0, [pc, #136]	; (80011c8 <MX_GPIO_Init+0x200>)
 8001140:	f004 ff94 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	481b      	ldr	r0, [pc, #108]	; (80011cc <MX_GPIO_Init+0x204>)
 800115e:	f004 ff85 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	4817      	ldr	r0, [pc, #92]	; (80011d4 <MX_GPIO_Init+0x20c>)
 8001178:	f004 ff78 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800117c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <MX_GPIO_Init+0x210>)
 8001192:	f004 ff6b 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80011a8:	230a      	movs	r3, #10
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	4809      	ldr	r0, [pc, #36]	; (80011d8 <MX_GPIO_Init+0x210>)
 80011b4:	f004 ff5a 	bl	800606c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b8:	bf00      	nop
 80011ba:	3738      	adds	r7, #56	; 0x38
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	58024400 	.word	0x58024400
 80011c4:	58021000 	.word	0x58021000
 80011c8:	58020400 	.word	0x58020400
 80011cc:	58020c00 	.word	0x58020c00
 80011d0:	58020800 	.word	0x58020800
 80011d4:	58021800 	.word	0x58021800
 80011d8:	58020000 	.word	0x58020000

080011dc <GetFifo6>:
    return 1;

}


int GetFifo6(SensorDataPacket* data) {
 80011dc:	b4b0      	push	{r4, r5, r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

    if (GetPt6 == PutPt6) {
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <GetFifo6+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <GetFifo6+0x58>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d101      	bne.n	80011f4 <GetFifo6+0x18>

        return 0; // buffer is empty
 80011f0:	2300      	movs	r3, #0
 80011f2:	e017      	b.n	8001224 <GetFifo6+0x48>
    }
    //data pointer gets pointed to the next GetPointer
    *data = *(GetPt6++);
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <GetFifo6+0x54>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f103 0218 	add.w	r2, r3, #24
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <GetFifo6+0x54>)
 80011fe:	600a      	str	r2, [r1, #0]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4614      	mov	r4, r2
 8001204:	461d      	mov	r5, r3
 8001206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800120e:	e884 0003 	stmia.w	r4, {r0, r1}
    if (GetPt6 == &Fifo6[FIFO_SIZE]) {
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <GetFifo6+0x54>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <GetFifo6+0x5c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d102      	bne.n	8001222 <GetFifo6+0x46>

        GetPt6 = &Fifo6[0];
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <GetFifo6+0x54>)
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <GetFifo6+0x60>)
 8001220:	601a      	str	r2, [r3, #0]
    }
    return 1;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bcb0      	pop	{r4, r5, r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	24000a18 	.word	0x24000a18
 8001234:	24000a14 	.word	0x24000a14
 8001238:	24000a80 	.word	0x24000a80
 800123c:	24000a20 	.word	0x24000a20

08001240 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b09c      	sub	sp, #112	; 0x70
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	__NOP();
 8001248:	bf00      	nop

	if (htim == &htim16)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a30      	ldr	r2, [pc, #192]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d15a      	bne.n	8001308 <HAL_TIM_PeriodElapsedCallback+0xc8>
	{

		timer_counter++;
 8001252:	4b30      	ldr	r3, [pc, #192]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800125c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
		HAL_SPI_Transmit_DMA(&hspi4, (uint8_t*)&data1, sizeof(data1));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
		*/
		//SensorDataPacket data3[220];
		for(int i = 0; i < 4; i++){
 800125e:	2300      	movs	r3, #0
 8001260:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001262:	e00d      	b.n	8001280 <HAL_TIM_PeriodElapsedCallback+0x40>
			GetFifo6(&data1[i]);
 8001264:	f107 0108 	add.w	r1, r7, #8
 8001268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ffb1 	bl	80011dc <GetFifo6>
		for(int i = 0; i < 4; i++){
 800127a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800127c:	3301      	adds	r3, #1
 800127e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001282:	2b03      	cmp	r3, #3
 8001284:	ddee      	ble.n	8001264 <HAL_TIM_PeriodElapsedCallback+0x24>

		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	4823      	ldr	r0, [pc, #140]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800128c:	f005 f896 	bl	80063bc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi4, (uint8_t*)&data1, sizeof(data1));
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	2260      	movs	r2, #96	; 0x60
 8001296:	4619      	mov	r1, r3
 8001298:	4820      	ldr	r0, [pc, #128]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800129a:	f007 fff3 	bl	8009284 <HAL_SPI_Transmit_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	481d      	ldr	r0, [pc, #116]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80012a4:	f005 f88a 	bl	80063bc <HAL_GPIO_WritePin>



		//SensorDataPacket data6[220];
		for(int i = 0; i < 220; i++){
 80012a8:	2300      	movs	r3, #0
 80012aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80012ac:	e00d      	b.n	80012ca <HAL_TIM_PeriodElapsedCallback+0x8a>
			GetFifo6(&data1[i]);
 80012ae:	f107 0108 	add.w	r1, r7, #8
 80012b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff8c 	bl	80011dc <GetFifo6>
		for(int i = 0; i < 220; i++){
 80012c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012c6:	3301      	adds	r3, #1
 80012c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80012ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012cc:	2bdb      	cmp	r3, #219	; 0xdb
 80012ce:	ddee      	ble.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x6e>

		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	4810      	ldr	r0, [pc, #64]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80012d6:	f005 f871 	bl	80063bc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi4, (uint8_t*)&data1, sizeof(data1));
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2260      	movs	r2, #96	; 0x60
 80012e0:	4619      	mov	r1, r3
 80012e2:	480e      	ldr	r0, [pc, #56]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80012e4:	f007 ffce 	bl	8009284 <HAL_SPI_Transmit_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80012ee:	f005 f865 	bl	80063bc <HAL_GPIO_WritePin>
		if(timer_counter == 25){
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b19      	cmp	r3, #25
 80012f8:	d106      	bne.n	8001308 <HAL_TIM_PeriodElapsedCallback+0xc8>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); //yellow
 80012fa:	2102      	movs	r1, #2
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80012fe:	f005 f876 	bl	80063ee <HAL_GPIO_TogglePin>
			timer_counter = 0;
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
	}




}
 8001308:	bf00      	nop
 800130a:	3770      	adds	r7, #112	; 0x70
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2400046c 	.word	0x2400046c
 8001314:	24000a80 	.word	0x24000a80
 8001318:	58020400 	.word	0x58020400
 800131c:	240002e4 	.word	0x240002e4
 8001320:	58021000 	.word	0x58021000

08001324 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	__NOP();
 800132c:	bf00      	nop

	if(hspi->Instance == SPI1){
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_SPI_TxCpltCallback+0x54>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d111      	bne.n	800135c <HAL_SPI_TxCpltCallback+0x38>
		test_timer++;
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_SPI_TxCpltCallback+0x58>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_SPI_TxCpltCallback+0x58>)
 8001342:	701a      	strb	r2, [r3, #0]
		if(test_timer == 10)
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_SPI_TxCpltCallback+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b0a      	cmp	r3, #10
 800134a:	d110      	bne.n	800136e <HAL_SPI_TxCpltCallback+0x4a>
		{
			test_timer = 0;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_SPI_TxCpltCallback+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //green
 8001352:	2101      	movs	r1, #1
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <HAL_SPI_TxCpltCallback+0x5c>)
 8001356:	f005 f84a 	bl	80063ee <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); //yellow
	}



}
 800135a:	e008      	b.n	800136e <HAL_SPI_TxCpltCallback+0x4a>
	else if (hspi->Instance == SPI5){
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_SPI_TxCpltCallback+0x60>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d103      	bne.n	800136e <HAL_SPI_TxCpltCallback+0x4a>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); //yellow
 8001366:	2102      	movs	r1, #2
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <HAL_SPI_TxCpltCallback+0x64>)
 800136a:	f005 f840 	bl	80063ee <HAL_GPIO_TogglePin>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40013000 	.word	0x40013000
 800137c:	24000a81 	.word	0x24000a81
 8001380:	58020400 	.word	0x58020400
 8001384:	40015000 	.word	0x40015000
 8001388:	58021000 	.word	0x58021000

0800138c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af04      	add	r7, sp, #16
 8001392:	6078      	str	r0, [r7, #4]
	//test_U2++;
	//if(test_U2 == 2){
    if(huart->Instance == USART1) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a65      	ldr	r2, [pc, #404]	; (8001530 <HAL_UART_RxCpltCallback+0x1a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10c      	bne.n	80013b8 <HAL_UART_RxCpltCallback+0x2c>
        // Process data from USART1
    	processUartData(huart, &sensorData1, rx_data1, &uartState1, &timestampBuffer1, &dataBuffer1, &dataIndex1);
 800139e:	4b65      	ldr	r3, [pc, #404]	; (8001534 <HAL_UART_RxCpltCallback+0x1a8>)
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	4b65      	ldr	r3, [pc, #404]	; (8001538 <HAL_UART_RxCpltCallback+0x1ac>)
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <HAL_UART_RxCpltCallback+0x1b0>)
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4b65      	ldr	r3, [pc, #404]	; (8001540 <HAL_UART_RxCpltCallback+0x1b4>)
 80013ac:	4a65      	ldr	r2, [pc, #404]	; (8001544 <HAL_UART_RxCpltCallback+0x1b8>)
 80013ae:	4966      	ldr	r1, [pc, #408]	; (8001548 <HAL_UART_RxCpltCallback+0x1bc>)
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f92d 	bl	8001610 <processUartData>
 80013b6:	e06a      	b.n	800148e <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == USART2) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a63      	ldr	r2, [pc, #396]	; (800154c <HAL_UART_RxCpltCallback+0x1c0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10c      	bne.n	80013dc <HAL_UART_RxCpltCallback+0x50>
        // Process data from USART2
    	//test_U2++;
    	processUartData(huart, &sensorData2, rx_data2, &uartState2, &timestampBuffer2, &dataBuffer2, &dataIndex2);
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_UART_RxCpltCallback+0x1c4>)
 80013c4:	9302      	str	r3, [sp, #8]
 80013c6:	4b63      	ldr	r3, [pc, #396]	; (8001554 <HAL_UART_RxCpltCallback+0x1c8>)
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	4b63      	ldr	r3, [pc, #396]	; (8001558 <HAL_UART_RxCpltCallback+0x1cc>)
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_UART_RxCpltCallback+0x1d0>)
 80013d0:	4a63      	ldr	r2, [pc, #396]	; (8001560 <HAL_UART_RxCpltCallback+0x1d4>)
 80013d2:	4964      	ldr	r1, [pc, #400]	; (8001564 <HAL_UART_RxCpltCallback+0x1d8>)
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f91b 	bl	8001610 <processUartData>
 80013da:	e058      	b.n	800148e <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == USART3) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a61      	ldr	r2, [pc, #388]	; (8001568 <HAL_UART_RxCpltCallback+0x1dc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10c      	bne.n	8001400 <HAL_UART_RxCpltCallback+0x74>
        // Process data from USART2
    	processUartData(huart, &sensorData3, rx_data3, &uartState3, &timestampBuffer3, &dataBuffer3, &dataIndex3);
 80013e6:	4b61      	ldr	r3, [pc, #388]	; (800156c <HAL_UART_RxCpltCallback+0x1e0>)
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	4b61      	ldr	r3, [pc, #388]	; (8001570 <HAL_UART_RxCpltCallback+0x1e4>)
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	4b61      	ldr	r3, [pc, #388]	; (8001574 <HAL_UART_RxCpltCallback+0x1e8>)
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4b61      	ldr	r3, [pc, #388]	; (8001578 <HAL_UART_RxCpltCallback+0x1ec>)
 80013f4:	4a61      	ldr	r2, [pc, #388]	; (800157c <HAL_UART_RxCpltCallback+0x1f0>)
 80013f6:	4962      	ldr	r1, [pc, #392]	; (8001580 <HAL_UART_RxCpltCallback+0x1f4>)
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f909 	bl	8001610 <processUartData>
 80013fe:	e046      	b.n	800148e <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == UART4) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a5f      	ldr	r2, [pc, #380]	; (8001584 <HAL_UART_RxCpltCallback+0x1f8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10c      	bne.n	8001424 <HAL_UART_RxCpltCallback+0x98>
        // Process data from USART2
    	processUartData(huart, &sensorData4, rx_data4, &uartState4, &timestampBuffer4, &dataBuffer4, &dataIndex4);
 800140a:	4b5f      	ldr	r3, [pc, #380]	; (8001588 <HAL_UART_RxCpltCallback+0x1fc>)
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_UART_RxCpltCallback+0x200>)
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	4b5f      	ldr	r3, [pc, #380]	; (8001590 <HAL_UART_RxCpltCallback+0x204>)
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <HAL_UART_RxCpltCallback+0x208>)
 8001418:	4a5f      	ldr	r2, [pc, #380]	; (8001598 <HAL_UART_RxCpltCallback+0x20c>)
 800141a:	4960      	ldr	r1, [pc, #384]	; (800159c <HAL_UART_RxCpltCallback+0x210>)
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f8f7 	bl	8001610 <processUartData>
 8001422:	e034      	b.n	800148e <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == UART5) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a5d      	ldr	r2, [pc, #372]	; (80015a0 <HAL_UART_RxCpltCallback+0x214>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d10c      	bne.n	8001448 <HAL_UART_RxCpltCallback+0xbc>
        // Process data from USART2
    	processUartData(huart, &sensorData5, rx_data5, &uartState5, &timestampBuffer5, &dataBuffer5, &dataIndex5);
 800142e:	4b5d      	ldr	r3, [pc, #372]	; (80015a4 <HAL_UART_RxCpltCallback+0x218>)
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	4b5d      	ldr	r3, [pc, #372]	; (80015a8 <HAL_UART_RxCpltCallback+0x21c>)
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <HAL_UART_RxCpltCallback+0x220>)
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HAL_UART_RxCpltCallback+0x224>)
 800143c:	4a5d      	ldr	r2, [pc, #372]	; (80015b4 <HAL_UART_RxCpltCallback+0x228>)
 800143e:	495e      	ldr	r1, [pc, #376]	; (80015b8 <HAL_UART_RxCpltCallback+0x22c>)
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f8e5 	bl	8001610 <processUartData>
 8001446:	e022      	b.n	800148e <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == USART6) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a5b      	ldr	r2, [pc, #364]	; (80015bc <HAL_UART_RxCpltCallback+0x230>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d10c      	bne.n	800146c <HAL_UART_RxCpltCallback+0xe0>
        // Process data from USART2
    	processUartData(huart, &sensorData6, rx_data6, &uartState6, &timestampBuffer6, &dataBuffer6, &dataIndex6);
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_UART_RxCpltCallback+0x234>)
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <HAL_UART_RxCpltCallback+0x238>)
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <HAL_UART_RxCpltCallback+0x23c>)
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	4b5b      	ldr	r3, [pc, #364]	; (80015cc <HAL_UART_RxCpltCallback+0x240>)
 8001460:	4a5b      	ldr	r2, [pc, #364]	; (80015d0 <HAL_UART_RxCpltCallback+0x244>)
 8001462:	495c      	ldr	r1, [pc, #368]	; (80015d4 <HAL_UART_RxCpltCallback+0x248>)
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f8d3 	bl	8001610 <processUartData>
 800146a:	e010      	b.n	800148e <HAL_UART_RxCpltCallback+0x102>
    }
    else if(huart->Instance == UART7) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a59      	ldr	r2, [pc, #356]	; (80015d8 <HAL_UART_RxCpltCallback+0x24c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10b      	bne.n	800148e <HAL_UART_RxCpltCallback+0x102>
        // Process data from USART2
    	processUartData(huart, &sensorData7, rx_data7, &uartState7, &timestampBuffer7, &dataBuffer7, &dataIndex7);
 8001476:	4b59      	ldr	r3, [pc, #356]	; (80015dc <HAL_UART_RxCpltCallback+0x250>)
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_UART_RxCpltCallback+0x254>)
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <HAL_UART_RxCpltCallback+0x258>)
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <HAL_UART_RxCpltCallback+0x25c>)
 8001484:	4a59      	ldr	r2, [pc, #356]	; (80015ec <HAL_UART_RxCpltCallback+0x260>)
 8001486:	495a      	ldr	r1, [pc, #360]	; (80015f0 <HAL_UART_RxCpltCallback+0x264>)
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8c1 	bl	8001610 <processUartData>
    }
	//}

    // Re-enable UART reception interrupt correctly for each port
    if (huart->Instance == USART1) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_UART_RxCpltCallback+0x1a4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d105      	bne.n	80014a4 <HAL_UART_RxCpltCallback+0x118>
        HAL_UART_Receive_IT(&huart1, rx_data1, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	492a      	ldr	r1, [pc, #168]	; (8001544 <HAL_UART_RxCpltCallback+0x1b8>)
 800149c:	4855      	ldr	r0, [pc, #340]	; (80015f4 <HAL_UART_RxCpltCallback+0x268>)
 800149e:	f008 fe8b 	bl	800a1b8 <HAL_UART_Receive_IT>
    	HAL_UART_Receive_IT(&huart6, rx_data6, 1);
    }
    else if (huart->Instance == UART7) {
    	HAL_UART_Receive_IT(&huart7, rx_data7, 1);
    }
}
 80014a2:	e040      	b.n	8001526 <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == USART2) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a28      	ldr	r2, [pc, #160]	; (800154c <HAL_UART_RxCpltCallback+0x1c0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d105      	bne.n	80014ba <HAL_UART_RxCpltCallback+0x12e>
        HAL_UART_Receive_IT(&huart2, rx_data2, 1);
 80014ae:	2201      	movs	r2, #1
 80014b0:	492b      	ldr	r1, [pc, #172]	; (8001560 <HAL_UART_RxCpltCallback+0x1d4>)
 80014b2:	4851      	ldr	r0, [pc, #324]	; (80015f8 <HAL_UART_RxCpltCallback+0x26c>)
 80014b4:	f008 fe80 	bl	800a1b8 <HAL_UART_Receive_IT>
}
 80014b8:	e035      	b.n	8001526 <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == USART3) {
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <HAL_UART_RxCpltCallback+0x1dc>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d105      	bne.n	80014d0 <HAL_UART_RxCpltCallback+0x144>
    	HAL_UART_Receive_IT(&huart3, rx_data3, 1);
 80014c4:	2201      	movs	r2, #1
 80014c6:	492d      	ldr	r1, [pc, #180]	; (800157c <HAL_UART_RxCpltCallback+0x1f0>)
 80014c8:	484c      	ldr	r0, [pc, #304]	; (80015fc <HAL_UART_RxCpltCallback+0x270>)
 80014ca:	f008 fe75 	bl	800a1b8 <HAL_UART_Receive_IT>
}
 80014ce:	e02a      	b.n	8001526 <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == UART4) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a2b      	ldr	r2, [pc, #172]	; (8001584 <HAL_UART_RxCpltCallback+0x1f8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d105      	bne.n	80014e6 <HAL_UART_RxCpltCallback+0x15a>
        HAL_UART_Receive_IT(&huart4, rx_data4, 1);
 80014da:	2201      	movs	r2, #1
 80014dc:	492e      	ldr	r1, [pc, #184]	; (8001598 <HAL_UART_RxCpltCallback+0x20c>)
 80014de:	4848      	ldr	r0, [pc, #288]	; (8001600 <HAL_UART_RxCpltCallback+0x274>)
 80014e0:	f008 fe6a 	bl	800a1b8 <HAL_UART_Receive_IT>
}
 80014e4:	e01f      	b.n	8001526 <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == UART5) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <HAL_UART_RxCpltCallback+0x214>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d105      	bne.n	80014fc <HAL_UART_RxCpltCallback+0x170>
    	HAL_UART_Receive_IT(&huart5, rx_data5, 1);
 80014f0:	2201      	movs	r2, #1
 80014f2:	4930      	ldr	r1, [pc, #192]	; (80015b4 <HAL_UART_RxCpltCallback+0x228>)
 80014f4:	4843      	ldr	r0, [pc, #268]	; (8001604 <HAL_UART_RxCpltCallback+0x278>)
 80014f6:	f008 fe5f 	bl	800a1b8 <HAL_UART_Receive_IT>
}
 80014fa:	e014      	b.n	8001526 <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == USART6) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a2e      	ldr	r2, [pc, #184]	; (80015bc <HAL_UART_RxCpltCallback+0x230>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d105      	bne.n	8001512 <HAL_UART_RxCpltCallback+0x186>
    	HAL_UART_Receive_IT(&huart6, rx_data6, 1);
 8001506:	2201      	movs	r2, #1
 8001508:	4931      	ldr	r1, [pc, #196]	; (80015d0 <HAL_UART_RxCpltCallback+0x244>)
 800150a:	483f      	ldr	r0, [pc, #252]	; (8001608 <HAL_UART_RxCpltCallback+0x27c>)
 800150c:	f008 fe54 	bl	800a1b8 <HAL_UART_Receive_IT>
}
 8001510:	e009      	b.n	8001526 <HAL_UART_RxCpltCallback+0x19a>
    else if (huart->Instance == UART7) {
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a30      	ldr	r2, [pc, #192]	; (80015d8 <HAL_UART_RxCpltCallback+0x24c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d104      	bne.n	8001526 <HAL_UART_RxCpltCallback+0x19a>
    	HAL_UART_Receive_IT(&huart7, rx_data7, 1);
 800151c:	2201      	movs	r2, #1
 800151e:	4933      	ldr	r1, [pc, #204]	; (80015ec <HAL_UART_RxCpltCallback+0x260>)
 8001520:	483a      	ldr	r0, [pc, #232]	; (800160c <HAL_UART_RxCpltCallback+0x280>)
 8001522:	f008 fe49 	bl	800a1b8 <HAL_UART_Receive_IT>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40011000 	.word	0x40011000
 8001534:	240008f0 	.word	0x240008f0
 8001538:	240008e8 	.word	0x240008e8
 800153c:	240008e4 	.word	0x240008e4
 8001540:	240008e0 	.word	0x240008e0
 8001544:	240008c4 	.word	0x240008c4
 8001548:	240008c8 	.word	0x240008c8
 800154c:	40004400 	.word	0x40004400
 8001550:	24000920 	.word	0x24000920
 8001554:	24000918 	.word	0x24000918
 8001558:	24000914 	.word	0x24000914
 800155c:	24000910 	.word	0x24000910
 8001560:	240008f4 	.word	0x240008f4
 8001564:	240008f8 	.word	0x240008f8
 8001568:	40004800 	.word	0x40004800
 800156c:	24000950 	.word	0x24000950
 8001570:	24000948 	.word	0x24000948
 8001574:	24000944 	.word	0x24000944
 8001578:	24000940 	.word	0x24000940
 800157c:	24000924 	.word	0x24000924
 8001580:	24000928 	.word	0x24000928
 8001584:	40004c00 	.word	0x40004c00
 8001588:	24000980 	.word	0x24000980
 800158c:	24000978 	.word	0x24000978
 8001590:	24000974 	.word	0x24000974
 8001594:	24000970 	.word	0x24000970
 8001598:	24000954 	.word	0x24000954
 800159c:	24000958 	.word	0x24000958
 80015a0:	40005000 	.word	0x40005000
 80015a4:	240009b0 	.word	0x240009b0
 80015a8:	240009a8 	.word	0x240009a8
 80015ac:	240009a4 	.word	0x240009a4
 80015b0:	240009a0 	.word	0x240009a0
 80015b4:	24000984 	.word	0x24000984
 80015b8:	24000988 	.word	0x24000988
 80015bc:	40011400 	.word	0x40011400
 80015c0:	240009e0 	.word	0x240009e0
 80015c4:	240009d8 	.word	0x240009d8
 80015c8:	240009d4 	.word	0x240009d4
 80015cc:	240009d0 	.word	0x240009d0
 80015d0:	240009b4 	.word	0x240009b4
 80015d4:	240009b8 	.word	0x240009b8
 80015d8:	40007800 	.word	0x40007800
 80015dc:	24000a10 	.word	0x24000a10
 80015e0:	24000a08 	.word	0x24000a08
 80015e4:	24000a04 	.word	0x24000a04
 80015e8:	24000a00 	.word	0x24000a00
 80015ec:	240009e4 	.word	0x240009e4
 80015f0:	240009e8 	.word	0x240009e8
 80015f4:	24000674 	.word	0x24000674
 80015f8:	24000708 	.word	0x24000708
 80015fc:	2400079c 	.word	0x2400079c
 8001600:	240004b8 	.word	0x240004b8
 8001604:	2400054c 	.word	0x2400054c
 8001608:	24000830 	.word	0x24000830
 800160c:	240005e0 	.word	0x240005e0

08001610 <processUartData>:



void processUartData(UART_HandleTypeDef *huart, SensorDataPacket *sensorData, uint8_t *rxData,
                     UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer, uint32_t *dataIndex) {    // Your existing switch case logic here, adapted for the specific sensorData and rx_data
 8001610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001614:	b087      	sub	sp, #28
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	603b      	str	r3, [r7, #0]
    // This function needs to be adapted from your existing HAL_UART_RxCpltCallback logic
	uint8_t rxByte = *rxData; // The received byte
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	75fb      	strb	r3, [r7, #23]
//    	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//    	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
    switch (*uartState) {
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b07      	cmp	r3, #7
 800162c:	f200 80e3 	bhi.w	80017f6 <processUartData+0x1e6>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <processUartData+0x28>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001659 	.word	0x08001659
 800163c:	0800166f 	.word	0x0800166f
 8001640:	08001697 	.word	0x08001697
 8001644:	080016dd 	.word	0x080016dd
 8001648:	08001723 	.word	0x08001723
 800164c:	0800179d 	.word	0x0800179d
 8001650:	080017b1 	.word	0x080017b1
 8001654:	080017cb 	.word	0x080017cb
        case UART_WAIT_FOR_SOP: // SOP Case
            if (rxByte == 0x53) { // SOP byte = 0x53 ('S')
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b53      	cmp	r3, #83	; 0x53
 800165c:	f040 80c0 	bne.w	80017e0 <processUartData+0x1d0>
            	sensorData->sop = rxByte; // Set the sop
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	7dfa      	ldrb	r2, [r7, #23]
 8001664:	701a      	strb	r2, [r3, #0]
            	*uartState = UART_DATATYPE;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            }
            break;
 800166c:	e0b8      	b.n	80017e0 <processUartData+0x1d0>
        case UART_DATATYPE: // Data type Case
        	if(rxByte == 0 || rxByte == 1 || rxByte == 2 || rxByte == 3){
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <processUartData+0x78>
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d006      	beq.n	8001688 <processUartData+0x78>
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d003      	beq.n	8001688 <processUartData+0x78>
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b03      	cmp	r3, #3
 8001684:	f040 80ae 	bne.w	80017e4 <processUartData+0x1d4>
            	sensorData->datatype = rxByte; // Set the data type (Temp = 00, Humidity = 01, Sound = 10, Vibration = 11)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	7dfa      	ldrb	r2, [r7, #23]
 800168c:	705a      	strb	r2, [r3, #1]
                *uartState = UART_SENSOR_ID; // Next parameter
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2202      	movs	r2, #2
 8001692:	701a      	strb	r2, [r3, #0]
        	}
            break;
 8001694:	e0a6      	b.n	80017e4 <processUartData+0x1d4>

        case UART_SENSOR_ID: // Sensor ID Case
        	if(rxByte == 0 || rxByte == 1 || rxByte == 2 || rxByte == 3 || rxByte == 4 || rxByte == 5 || rxByte == 6 || rxByte == 7){
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d015      	beq.n	80016c8 <processUartData+0xb8>
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d012      	beq.n	80016c8 <processUartData+0xb8>
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d00f      	beq.n	80016c8 <processUartData+0xb8>
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d00c      	beq.n	80016c8 <processUartData+0xb8>
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d009      	beq.n	80016c8 <processUartData+0xb8>
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d006      	beq.n	80016c8 <processUartData+0xb8>
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2b06      	cmp	r3, #6
 80016be:	d003      	beq.n	80016c8 <processUartData+0xb8>
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b07      	cmp	r3, #7
 80016c4:	f040 8090 	bne.w	80017e8 <processUartData+0x1d8>
				sensorData->sensorId = rxByte; // Set the sensor ID (000, 001, 010, 011, 100, 101, 110, 111 (i.e. Sensor 1-8)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	7dfa      	ldrb	r2, [r7, #23]
 80016cc:	709a      	strb	r2, [r3, #2]
				*dataIndex = 0; // Reset dataIndex for the next field
 80016ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
				*uartState = UART_TIMESTAMP; // Next parameter
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2203      	movs	r2, #3
 80016d8:	701a      	strb	r2, [r3, #0]
        	}
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 80016da:	e085      	b.n	80017e8 <processUartData+0x1d8>

        case UART_TIMESTAMP: // Timestamp Case
            // Combine byte into timestamp assuming little endian - least significant byte first
//            	timestampBuffer |= ((uint32_t)rxByte << (24 - (dataIndex * 8)));
        	*timestampBuffer |= ((uint32_t)rxByte << ((*dataIndex-1) * 8));
 80016dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	7df9      	ldrb	r1, [r7, #23]
 80016e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	431a      	orrs	r2, r3
 80016f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016f2:	601a      	str	r2, [r3, #0]
//            	sprintf(buffer, "RxByte: 0x%08lX\r\n", rxByte);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
//            	sprintf(buffer, "Timestamp partial: 0x%08lX\r\n", timestampBuffer);
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 80016f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016fc:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->timestamp)) {
 80016fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d972      	bls.n	80017ec <processUartData+0x1dc>
                sensorData->timestamp = *timestampBuffer; // Assign the complete timestamp
 8001706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	605a      	str	r2, [r3, #4]
                *dataIndex = 0; // Reset dataIndex for the data field
 800170e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
                *timestampBuffer = 0; // Clear the buffer for the next use
 8001714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
                *uartState = UART_DATA; // Move to the next state
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2204      	movs	r2, #4
 800171e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001720:	e064      	b.n	80017ec <processUartData+0x1dc>

        case UART_DATA: // Data Case
            // Combine byte into data assuming little endian - least significant byte first
        	*dataBuffer |= ((uint64_t)rxByte << ((*dataIndex-1) * 8));//            	sprintf(buffer, "Data partial: 0x%016llx\r\n", dataBuffer);
 8001722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2200      	movs	r2, #0
 800172c:	4698      	mov	r8, r3
 800172e:	4691      	mov	r9, r2
 8001730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3b01      	subs	r3, #1
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	f1a3 0620 	sub.w	r6, r3, #32
 800173c:	f1c3 0220 	rsb	r2, r3, #32
 8001740:	fa09 f503 	lsl.w	r5, r9, r3
 8001744:	fa08 f606 	lsl.w	r6, r8, r6
 8001748:	4335      	orrs	r5, r6
 800174a:	fa28 f202 	lsr.w	r2, r8, r2
 800174e:	4315      	orrs	r5, r2
 8001750:	fa08 f403 	lsl.w	r4, r8, r3
 8001754:	ea40 0a04 	orr.w	sl, r0, r4
 8001758:	ea41 0b05 	orr.w	fp, r1, r5
 800175c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175e:	e9c3 ab00 	strd	sl, fp, [r3]
//            	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 100); // Print debug info
            (*dataIndex)++;
 8001762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800176a:	601a      	str	r2, [r3, #0]
            if (*dataIndex >= sizeof(sensorData->data)) {
 800176c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b07      	cmp	r3, #7
 8001772:	d93d      	bls.n	80017f0 <processUartData+0x1e0>
                sensorData->data = *dataBuffer; // Assign the complete data
 8001774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	e9c1 2302 	strd	r2, r3, [r1, #8]
                *dataIndex = 0; // Reset dataIndex for the CRC field
 8001780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
                *dataBuffer = 0; // Clear the buffer for the next use
 8001786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9c1 2300 	strd	r2, r3, [r1]
                *uartState = UART_CRC; // Move to the next state
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2205      	movs	r2, #5
 8001798:	701a      	strb	r2, [r3, #0]
            }
            break;
 800179a:	e029      	b.n	80017f0 <processUartData+0x1e0>

        case UART_CRC: // CRC Case
        	if(rxByte != 0){
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d028      	beq.n	80017f4 <processUartData+0x1e4>
                sensorData->crc = rxByte; // Set the CRC value based on algorithm
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	7dfa      	ldrb	r2, [r7, #23]
 80017a6:	741a      	strb	r2, [r3, #16]
                *uartState = UART_EOP; // Next parameter
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2206      	movs	r2, #6
 80017ac:	701a      	strb	r2, [r3, #0]
        	}
//                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
            break;
 80017ae:	e021      	b.n	80017f4 <processUartData+0x1e4>

        case UART_EOP:
            if (rxByte == 0x45) { // EOP byte = 0x45 ('E')
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b45      	cmp	r3, #69	; 0x45
 80017b4:	d106      	bne.n	80017c4 <processUartData+0x1b4>
                *uartState = UART_DONE; // Packet reception is complete
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2207      	movs	r2, #7
 80017ba:	701a      	strb	r2, [r3, #0]
                sensorData->eop = rxByte; // Set the eop
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	7dfa      	ldrb	r2, [r7, #23]
 80017c0:	745a      	strb	r2, [r3, #17]
//                    uartState = UART_DONE; // Packet reception is complete
//                    sensorData.eop = rxByte; // Set the eop
//                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED set when packet is complete
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
            }
            break;
 80017c2:	e018      	b.n	80017f6 <processUartData+0x1e6>
                uartState = UART_WAIT_FOR_SOP; // Invalid EOP, reset FSM
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
            break;
 80017c8:	e015      	b.n	80017f6 <processUartData+0x1e6>
//        	    uint8_t* bytePtr = ((uint8_t*)sensorData) + i; // Point to each byte in sequence
//        	    HAL_SPI_Transmit(&hspi5, bytePtr, 1, 100); // Transmit one byte at a time
//        	}
//        	if(spiReady) {
//        		spiReady = false; // Clear the flag to indicate SPI is busy
        	    HAL_SPI_Transmit_IT(&hspi4, (uint8_t*)sensorData, sizeof(SensorDataPacket)); // Transmit the data over SPI
 80017ca:	2218      	movs	r2, #24
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <processUartData+0x1f0>)
 80017d0:	f007 fcae 	bl	8009130 <HAL_SPI_Transmit_IT>
        	    }
        	else if (huart->Instance == USART6) {
        		 PutFifo6(*sensorData);
        	    }
        	    */
        	resetUartState(uartState, timestampBuffer, dataBuffer);
 80017d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80017d8:	6838      	ldr	r0, [r7, #0]
 80017da:	f000 f813 	bl	8001804 <resetUartState>
            break;
 80017de:	e00a      	b.n	80017f6 <processUartData+0x1e6>
            break;
 80017e0:	bf00      	nop
 80017e2:	e008      	b.n	80017f6 <processUartData+0x1e6>
            break;
 80017e4:	bf00      	nop
 80017e6:	e006      	b.n	80017f6 <processUartData+0x1e6>
            break;
 80017e8:	bf00      	nop
 80017ea:	e004      	b.n	80017f6 <processUartData+0x1e6>
            break;
 80017ec:	bf00      	nop
 80017ee:	e002      	b.n	80017f6 <processUartData+0x1e6>
            break;
 80017f0:	bf00      	nop
 80017f2:	e000      	b.n	80017f6 <processUartData+0x1e6>
            break;
 80017f4:	bf00      	nop
    }
    // Ready to receive the next byte
   // HAL_UART_Receive_IT(huart, rxData, 1);
}
 80017f6:	bf00      	nop
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001800:	240002e4 	.word	0x240002e4

08001804 <resetUartState>:
	HAL_SPI_Transmit(&hspi4, tx_data, 2, 10);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
}


void resetUartState(UART_State_t *uartState, uint32_t *timestampBuffer, uint64_t *dataBuffer) {
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
    *uartState = UART_WAIT_FOR_SOP; // Reset UART state
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
    *timestampBuffer = 0; // Clear the timestamp buffer
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
    *dataBuffer = 0; // Clear the data buffer
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9c1 2300 	strd	r2, r3, [r1]
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183a:	b672      	cpsid	i
}
 800183c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183e:	e7fe      	b.n	800183e <Error_Handler+0x8>

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_MspInit+0x30>)
 8001848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800184c:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_MspInit+0x30>)
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_MspInit+0x30>)
 8001858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	58024400 	.word	0x58024400

08001874 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08e      	sub	sp, #56	; 0x38
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a59      	ldr	r2, [pc, #356]	; (80019f8 <HAL_ETH_MspInit+0x184>)
 8001892:	4293      	cmp	r3, r2
 8001894:	f040 80ab 	bne.w	80019ee <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001898:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_ETH_MspInit+0x188>)
 800189a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800189e:	4a57      	ldr	r2, [pc, #348]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80018a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018a8:	4b54      	ldr	r3, [pc, #336]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80018aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b2:	623b      	str	r3, [r7, #32]
 80018b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80018b6:	4b51      	ldr	r3, [pc, #324]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80018b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018bc:	4a4f      	ldr	r2, [pc, #316]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80018be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018c6:	4b4d      	ldr	r3, [pc, #308]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80018c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80018d4:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80018d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018da:	4a48      	ldr	r2, [pc, #288]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018e4:	4b45      	ldr	r3, [pc, #276]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80018e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80018f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f8:	4a40      	ldr	r2, [pc, #256]	; (80019fc <HAL_ETH_MspInit+0x188>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001902:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_ETH_MspInit+0x188>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <HAL_ETH_MspInit+0x188>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001916:	4a39      	ldr	r2, [pc, #228]	; (80019fc <HAL_ETH_MspInit+0x188>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_ETH_MspInit+0x188>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <HAL_ETH_MspInit+0x188>)
 8001930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001934:	4a31      	ldr	r2, [pc, #196]	; (80019fc <HAL_ETH_MspInit+0x188>)
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_ETH_MspInit+0x188>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_ETH_MspInit+0x188>)
 800194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001952:	4a2a      	ldr	r2, [pc, #168]	; (80019fc <HAL_ETH_MspInit+0x188>)
 8001954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_ETH_MspInit+0x188>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800196a:	2332      	movs	r3, #50	; 0x32
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800197a:	230b      	movs	r3, #11
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001982:	4619      	mov	r1, r3
 8001984:	481e      	ldr	r0, [pc, #120]	; (8001a00 <HAL_ETH_MspInit+0x18c>)
 8001986:	f004 fb71 	bl	800606c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800198a:	2386      	movs	r3, #134	; 0x86
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800199a:	230b      	movs	r3, #11
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a2:	4619      	mov	r1, r3
 80019a4:	4817      	ldr	r0, [pc, #92]	; (8001a04 <HAL_ETH_MspInit+0x190>)
 80019a6:	f004 fb61 	bl	800606c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019bc:	230b      	movs	r3, #11
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4810      	ldr	r0, [pc, #64]	; (8001a08 <HAL_ETH_MspInit+0x194>)
 80019c8:	f004 fb50 	bl	800606c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019de:	230b      	movs	r3, #11
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4808      	ldr	r0, [pc, #32]	; (8001a0c <HAL_ETH_MspInit+0x198>)
 80019ea:	f004 fb3f 	bl	800606c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3738      	adds	r7, #56	; 0x38
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40028000 	.word	0x40028000
 80019fc:	58024400 	.word	0x58024400
 8001a00:	58020800 	.word	0x58020800
 8001a04:	58020000 	.word	0x58020000
 8001a08:	58020400 	.word	0x58020400
 8001a0c:	58021800 	.word	0x58021800

08001a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0c0      	sub	sp, #256	; 0x100
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a2c:	22b8      	movs	r2, #184	; 0xb8
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00b f815 	bl	800ca60 <memset>
  if(hspi->Instance==SPI1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4ab8      	ldr	r2, [pc, #736]	; (8001d1c <HAL_SPI_MspInit+0x30c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	f040 80a0 	bne.w	8001b82 <HAL_SPI_MspInit+0x172>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001a42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f005 fc83 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001a64:	f7ff fee7 	bl	8001836 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a68:	4bad      	ldr	r3, [pc, #692]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a6e:	4aac      	ldr	r2, [pc, #688]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a78:	4ba9      	ldr	r3, [pc, #676]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4ba6      	ldr	r3, [pc, #664]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8c:	4aa4      	ldr	r2, [pc, #656]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a96:	4ba2      	ldr	r3, [pc, #648]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa4:	4b9e      	ldr	r3, [pc, #632]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aaa:	4a9d      	ldr	r2, [pc, #628]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab4:	4b9a      	ldr	r3, [pc, #616]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ac2:	2360      	movs	r3, #96	; 0x60
 8001ac4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ada:	2305      	movs	r3, #5
 8001adc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	488f      	ldr	r0, [pc, #572]	; (8001d24 <HAL_SPI_MspInit+0x314>)
 8001ae8:	f004 fac0 	bl	800606c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b04:	2305      	movs	r3, #5
 8001b06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4885      	ldr	r0, [pc, #532]	; (8001d28 <HAL_SPI_MspInit+0x318>)
 8001b12:	f004 faab 	bl	800606c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001b16:	4b85      	ldr	r3, [pc, #532]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b18:	4a85      	ldr	r2, [pc, #532]	; (8001d30 <HAL_SPI_MspInit+0x320>)
 8001b1a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001b1c:	4b83      	ldr	r3, [pc, #524]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b1e:	2226      	movs	r2, #38	; 0x26
 8001b20:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b22:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b24:	2240      	movs	r2, #64	; 0x40
 8001b26:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b28:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b34:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b36:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b3c:	4b7b      	ldr	r3, [pc, #492]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b42:	4b7a      	ldr	r3, [pc, #488]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b48:	4b78      	ldr	r3, [pc, #480]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4e:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b54:	4875      	ldr	r0, [pc, #468]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b56:	f001 f811 	bl	8002b7c <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 8001b60:	f7ff fe69 	bl	8001836 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a71      	ldr	r2, [pc, #452]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b68:	679a      	str	r2, [r3, #120]	; 0x78
 8001b6a:	4a70      	ldr	r2, [pc, #448]	; (8001d2c <HAL_SPI_MspInit+0x31c>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2023      	movs	r0, #35	; 0x23
 8001b76:	f000 ffcc 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b7a:	2023      	movs	r0, #35	; 0x23
 8001b7c:	f000 ffe3 	bl	8002b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001b80:	e136      	b.n	8001df0 <HAL_SPI_MspInit+0x3e0>
  else if(hspi->Instance==SPI3)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6b      	ldr	r2, [pc, #428]	; (8001d34 <HAL_SPI_MspInit+0x324>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d173      	bne.n	8001c74 <HAL_SPI_MspInit+0x264>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f005 fbde 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_SPI_MspInit+0x1a2>
      Error_Handler();
 8001bae:	f7ff fe42 	bl	8001836 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb8:	4a59      	ldr	r2, [pc, #356]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bcc:	623b      	str	r3, [r7, #32]
 8001bce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd6:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be0:	4b4f      	ldr	r3, [pc, #316]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfe:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c24:	2307      	movs	r3, #7
 8001c26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4841      	ldr	r0, [pc, #260]	; (8001d38 <HAL_SPI_MspInit+0x328>)
 8001c32:	f004 fa1b 	bl	800606c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c50:	2306      	movs	r3, #6
 8001c52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4837      	ldr	r0, [pc, #220]	; (8001d3c <HAL_SPI_MspInit+0x32c>)
 8001c5e:	f004 fa05 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2033      	movs	r0, #51	; 0x33
 8001c68:	f000 ff53 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001c6c:	2033      	movs	r0, #51	; 0x33
 8001c6e:	f000 ff6a 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8001c72:	e0bd      	b.n	8001df0 <HAL_SPI_MspInit+0x3e0>
  else if(hspi->Instance==SPI4)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a31      	ldr	r2, [pc, #196]	; (8001d40 <HAL_SPI_MspInit+0x330>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d164      	bne.n	8001d48 <HAL_SPI_MspInit+0x338>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c94:	4618      	mov	r0, r3
 8001c96:	f005 fb65 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_SPI_MspInit+0x294>
      Error_Handler();
 8001ca0:	f7ff fdc9 	bl	8001836 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001caa:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_SPI_MspInit+0x310>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001ce0:	2364      	movs	r3, #100	; 0x64
 8001ce2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cfe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d02:	4619      	mov	r1, r3
 8001d04:	480f      	ldr	r0, [pc, #60]	; (8001d44 <HAL_SPI_MspInit+0x334>)
 8001d06:	f004 f9b1 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2054      	movs	r0, #84	; 0x54
 8001d10:	f000 feff 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001d14:	2054      	movs	r0, #84	; 0x54
 8001d16:	f000 ff16 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8001d1a:	e069      	b.n	8001df0 <HAL_SPI_MspInit+0x3e0>
 8001d1c:	40013000 	.word	0x40013000
 8001d20:	58024400 	.word	0x58024400
 8001d24:	58020000 	.word	0x58020000
 8001d28:	58020c00 	.word	0x58020c00
 8001d2c:	240003f4 	.word	0x240003f4
 8001d30:	40020010 	.word	0x40020010
 8001d34:	40003c00 	.word	0x40003c00
 8001d38:	58020400 	.word	0x58020400
 8001d3c:	58020800 	.word	0x58020800
 8001d40:	40013400 	.word	0x40013400
 8001d44:	58021000 	.word	0x58021000
  else if(hspi->Instance==SPI5)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <HAL_SPI_MspInit+0x3ec>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d14e      	bne.n	8001df0 <HAL_SPI_MspInit+0x3e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f005 fafb 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_SPI_MspInit+0x368>
      Error_Handler();
 8001d74:	f7ff fd5f 	bl	8001836 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d78:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_SPI_MspInit+0x3f0>)
 8001d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d7e:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <HAL_SPI_MspInit+0x3f0>)
 8001d80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_SPI_MspInit+0x3f0>)
 8001d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_SPI_MspInit+0x3f0>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_SPI_MspInit+0x3f0>)
 8001d9e:	f043 0320 	orr.w	r3, r3, #32
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_SPI_MspInit+0x3f0>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001db4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001db8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dd4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480a      	ldr	r0, [pc, #40]	; (8001e04 <HAL_SPI_MspInit+0x3f4>)
 8001ddc:	f004 f946 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2055      	movs	r0, #85	; 0x55
 8001de6:	f000 fe94 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8001dea:	2055      	movs	r0, #85	; 0x55
 8001dec:	f000 feab 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8001df0:	bf00      	nop
 8001df2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40015000 	.word	0x40015000
 8001e00:	58024400 	.word	0x58024400
 8001e04:	58021400 	.word	0x58021400

08001e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <HAL_TIM_Base_MspInit+0x48>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d116      	bne.n	8001e48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_TIM_Base_MspInit+0x4c>)
 8001e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e20:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_TIM_Base_MspInit+0x4c>)
 8001e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_TIM_Base_MspInit+0x4c>)
 8001e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2075      	movs	r0, #117	; 0x75
 8001e3e:	f000 fe68 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001e42:	2075      	movs	r0, #117	; 0x75
 8001e44:	f000 fe7f 	bl	8002b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40014400 	.word	0x40014400
 8001e54:	58024400 	.word	0x58024400

08001e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0c8      	sub	sp, #288	; 0x120
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e66:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e7c:	22b8      	movs	r2, #184	; 0xb8
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f00a fded 	bl	800ca60 <memset>
  if(huart->Instance==UART4)
 8001e86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4ab9      	ldr	r2, [pc, #740]	; (8002178 <HAL_UART_MspInit+0x320>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d173      	bne.n	8001f80 <HAL_UART_MspInit+0x128>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e98:	f04f 0202 	mov.w	r2, #2
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f005 fa58 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8001eba:	f7ff fcbc 	bl	8001836 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ebe:	4baf      	ldr	r3, [pc, #700]	; (800217c <HAL_UART_MspInit+0x324>)
 8001ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ec4:	4aad      	ldr	r2, [pc, #692]	; (800217c <HAL_UART_MspInit+0x324>)
 8001ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001eca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ece:	4bab      	ldr	r3, [pc, #684]	; (800217c <HAL_UART_MspInit+0x324>)
 8001ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4ba7      	ldr	r3, [pc, #668]	; (800217c <HAL_UART_MspInit+0x324>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee2:	4aa6      	ldr	r2, [pc, #664]	; (800217c <HAL_UART_MspInit+0x324>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eec:	4ba3      	ldr	r3, [pc, #652]	; (800217c <HAL_UART_MspInit+0x324>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	4ba0      	ldr	r3, [pc, #640]	; (800217c <HAL_UART_MspInit+0x324>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f00:	4a9e      	ldr	r2, [pc, #632]	; (800217c <HAL_UART_MspInit+0x324>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f0a:	4b9c      	ldr	r3, [pc, #624]	; (800217c <HAL_UART_MspInit+0x324>)
 8001f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
 8001f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f30:	2308      	movs	r3, #8
 8001f32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4890      	ldr	r0, [pc, #576]	; (8002180 <HAL_UART_MspInit+0x328>)
 8001f3e:	f004 f895 	bl	800606c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f62:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001f66:	4619      	mov	r1, r3
 8001f68:	4886      	ldr	r0, [pc, #536]	; (8002184 <HAL_UART_MspInit+0x32c>)
 8001f6a:	f004 f87f 	bl	800606c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2034      	movs	r0, #52	; 0x34
 8001f74:	f000 fdcd 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f78:	2034      	movs	r0, #52	; 0x34
 8001f7a:	f000 fde4 	bl	8002b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f7e:	e2ee      	b.n	800255e <HAL_UART_MspInit+0x706>
  else if(huart->Instance==UART5)
 8001f80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a7e      	ldr	r2, [pc, #504]	; (8002188 <HAL_UART_MspInit+0x330>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d174      	bne.n	800207c <HAL_UART_MspInit+0x224>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f92:	f04f 0202 	mov.w	r2, #2
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f005 f9db 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_UART_MspInit+0x160>
      Error_Handler();
 8001fb4:	f7ff fc3f 	bl	8001836 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fb8:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_UART_MspInit+0x324>)
 8001fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fbe:	4a6f      	ldr	r2, [pc, #444]	; (800217c <HAL_UART_MspInit+0x324>)
 8001fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fc8:	4b6c      	ldr	r3, [pc, #432]	; (800217c <HAL_UART_MspInit+0x324>)
 8001fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	4b69      	ldr	r3, [pc, #420]	; (800217c <HAL_UART_MspInit+0x324>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fdc:	4a67      	ldr	r2, [pc, #412]	; (800217c <HAL_UART_MspInit+0x324>)
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe6:	4b65      	ldr	r3, [pc, #404]	; (800217c <HAL_UART_MspInit+0x324>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff4:	4b61      	ldr	r3, [pc, #388]	; (800217c <HAL_UART_MspInit+0x324>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffa:	4a60      	ldr	r2, [pc, #384]	; (800217c <HAL_UART_MspInit+0x324>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002004:	4b5d      	ldr	r3, [pc, #372]	; (800217c <HAL_UART_MspInit+0x324>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002016:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800202c:	230e      	movs	r3, #14
 800202e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002032:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002036:	4619      	mov	r1, r3
 8002038:	4854      	ldr	r0, [pc, #336]	; (800218c <HAL_UART_MspInit+0x334>)
 800203a:	f004 f817 	bl	800606c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800203e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002042:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002058:	2308      	movs	r3, #8
 800205a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002062:	4619      	mov	r1, r3
 8002064:	4847      	ldr	r0, [pc, #284]	; (8002184 <HAL_UART_MspInit+0x32c>)
 8002066:	f004 f801 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	2035      	movs	r0, #53	; 0x35
 8002070:	f000 fd4f 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002074:	2035      	movs	r0, #53	; 0x35
 8002076:	f000 fd66 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 800207a:	e270      	b.n	800255e <HAL_UART_MspInit+0x706>
  else if(huart->Instance==UART7)
 800207c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002080:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a41      	ldr	r2, [pc, #260]	; (8002190 <HAL_UART_MspInit+0x338>)
 800208a:	4293      	cmp	r3, r2
 800208c:	f040 8086 	bne.w	800219c <HAL_UART_MspInit+0x344>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002090:	f04f 0202 	mov.w	r2, #2
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020a6:	4618      	mov	r0, r3
 80020a8:	f005 f95c 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 80020b2:	f7ff fbc0 	bl	8001836 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80020b6:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_UART_MspInit+0x324>)
 80020b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020bc:	4a2f      	ldr	r2, [pc, #188]	; (800217c <HAL_UART_MspInit+0x324>)
 80020be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020c6:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_UART_MspInit+0x324>)
 80020c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
 80020d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_UART_MspInit+0x324>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020da:	4a28      	ldr	r2, [pc, #160]	; (800217c <HAL_UART_MspInit+0x324>)
 80020dc:	f043 0320 	orr.w	r3, r3, #32
 80020e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <HAL_UART_MspInit+0x324>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_UART_MspInit+0x324>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f8:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_UART_MspInit+0x324>)
 80020fa:	f043 0310 	orr.w	r3, r3, #16
 80020fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_UART_MspInit+0x324>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002110:	2340      	movs	r3, #64	; 0x40
 8002112:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002128:	2307      	movs	r3, #7
 800212a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800212e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002132:	4619      	mov	r1, r3
 8002134:	4817      	ldr	r0, [pc, #92]	; (8002194 <HAL_UART_MspInit+0x33c>)
 8002136:	f003 ff99 	bl	800606c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800213a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800213e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002154:	2307      	movs	r3, #7
 8002156:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800215a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800215e:	4619      	mov	r1, r3
 8002160:	480d      	ldr	r0, [pc, #52]	; (8002198 <HAL_UART_MspInit+0x340>)
 8002162:	f003 ff83 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	2052      	movs	r0, #82	; 0x52
 800216c:	f000 fcd1 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002170:	2052      	movs	r0, #82	; 0x52
 8002172:	f000 fce8 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8002176:	e1f2      	b.n	800255e <HAL_UART_MspInit+0x706>
 8002178:	40004c00 	.word	0x40004c00
 800217c:	58024400 	.word	0x58024400
 8002180:	58020000 	.word	0x58020000
 8002184:	58020800 	.word	0x58020800
 8002188:	40005000 	.word	0x40005000
 800218c:	58020400 	.word	0x58020400
 8002190:	40007800 	.word	0x40007800
 8002194:	58021400 	.word	0x58021400
 8002198:	58021000 	.word	0x58021000
  else if(huart->Instance==USART1)
 800219c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80021a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4ab2      	ldr	r2, [pc, #712]	; (8002474 <HAL_UART_MspInit+0x61c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d164      	bne.n	8002278 <HAL_UART_MspInit+0x420>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021ae:	f04f 0201 	mov.w	r2, #1
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021c4:	4618      	mov	r0, r3
 80021c6:	f005 f8cd 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_UART_MspInit+0x37c>
      Error_Handler();
 80021d0:	f7ff fb31 	bl	8001836 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d4:	4ba8      	ldr	r3, [pc, #672]	; (8002478 <HAL_UART_MspInit+0x620>)
 80021d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021da:	4aa7      	ldr	r2, [pc, #668]	; (8002478 <HAL_UART_MspInit+0x620>)
 80021dc:	f043 0310 	orr.w	r3, r3, #16
 80021e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021e4:	4ba4      	ldr	r3, [pc, #656]	; (8002478 <HAL_UART_MspInit+0x620>)
 80021e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	4ba1      	ldr	r3, [pc, #644]	; (8002478 <HAL_UART_MspInit+0x620>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f8:	4a9f      	ldr	r2, [pc, #636]	; (8002478 <HAL_UART_MspInit+0x620>)
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002202:	4b9d      	ldr	r3, [pc, #628]	; (8002478 <HAL_UART_MspInit+0x620>)
 8002204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002214:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800222a:	2304      	movs	r3, #4
 800222c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002234:	4619      	mov	r1, r3
 8002236:	4891      	ldr	r0, [pc, #580]	; (800247c <HAL_UART_MspInit+0x624>)
 8002238:	f003 ff18 	bl	800606c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800223c:	2340      	movs	r3, #64	; 0x40
 800223e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002254:	2307      	movs	r3, #7
 8002256:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800225e:	4619      	mov	r1, r3
 8002260:	4886      	ldr	r0, [pc, #536]	; (800247c <HAL_UART_MspInit+0x624>)
 8002262:	f003 ff03 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2025      	movs	r0, #37	; 0x25
 800226c:	f000 fc51 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002270:	2025      	movs	r0, #37	; 0x25
 8002272:	f000 fc68 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8002276:	e172      	b.n	800255e <HAL_UART_MspInit+0x706>
  else if(huart->Instance==USART2)
 8002278:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800227c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a7e      	ldr	r2, [pc, #504]	; (8002480 <HAL_UART_MspInit+0x628>)
 8002286:	4293      	cmp	r3, r2
 8002288:	f040 808b 	bne.w	80023a2 <HAL_UART_MspInit+0x54a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800228c:	f04f 0202 	mov.w	r2, #2
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022a2:	4618      	mov	r0, r3
 80022a4:	f005 f85e 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_UART_MspInit+0x45a>
      Error_Handler();
 80022ae:	f7ff fac2 	bl	8001836 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022b2:	4b71      	ldr	r3, [pc, #452]	; (8002478 <HAL_UART_MspInit+0x620>)
 80022b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b8:	4a6f      	ldr	r2, [pc, #444]	; (8002478 <HAL_UART_MspInit+0x620>)
 80022ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022c2:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <HAL_UART_MspInit+0x620>)
 80022c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022c8:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80022cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80022d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80022da:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022de:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	4b65      	ldr	r3, [pc, #404]	; (8002478 <HAL_UART_MspInit+0x620>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e6:	4a64      	ldr	r2, [pc, #400]	; (8002478 <HAL_UART_MspInit+0x620>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f0:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_UART_MspInit+0x620>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f6:	f003 0201 	and.w	r2, r3, #1
 80022fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80022fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800230c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800230e:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <HAL_UART_MspInit+0x620>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002314:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_UART_MspInit+0x620>)
 8002316:	f043 0308 	orr.w	r3, r3, #8
 800231a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800231e:	4b56      	ldr	r3, [pc, #344]	; (8002478 <HAL_UART_MspInit+0x620>)
 8002320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002324:	f003 0208 	and.w	r2, r3, #8
 8002328:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800232c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800233a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800233c:	2308      	movs	r3, #8
 800233e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002354:	2307      	movs	r3, #7
 8002356:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800235e:	4619      	mov	r1, r3
 8002360:	4848      	ldr	r0, [pc, #288]	; (8002484 <HAL_UART_MspInit+0x62c>)
 8002362:	f003 fe83 	bl	800606c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002366:	2320      	movs	r3, #32
 8002368:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800237e:	2307      	movs	r3, #7
 8002380:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002384:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002388:	4619      	mov	r1, r3
 800238a:	483f      	ldr	r0, [pc, #252]	; (8002488 <HAL_UART_MspInit+0x630>)
 800238c:	f003 fe6e 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	2026      	movs	r0, #38	; 0x26
 8002396:	f000 fbbc 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800239a:	2026      	movs	r0, #38	; 0x26
 800239c:	f000 fbd3 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 80023a0:	e0dd      	b.n	800255e <HAL_UART_MspInit+0x706>
  else if(huart->Instance==USART3)
 80023a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_UART_MspInit+0x634>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d16d      	bne.n	8002490 <HAL_UART_MspInit+0x638>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023b4:	f04f 0202 	mov.w	r2, #2
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 ffca 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_UART_MspInit+0x582>
      Error_Handler();
 80023d6:	f7ff fa2e 	bl	8001836 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <HAL_UART_MspInit+0x620>)
 80023dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e0:	4a25      	ldr	r2, [pc, #148]	; (8002478 <HAL_UART_MspInit+0x620>)
 80023e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_UART_MspInit+0x620>)
 80023ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f0:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80023f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002402:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002406:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_UART_MspInit+0x620>)
 800240a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240e:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <HAL_UART_MspInit+0x620>)
 8002410:	f043 0308 	orr.w	r3, r3, #8
 8002414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_UART_MspInit+0x620>)
 800241a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241e:	f003 0208 	and.w	r2, r3, #8
 8002422:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002426:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002430:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002434:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8002436:	f44f 7340 	mov.w	r3, #768	; 0x300
 800243a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002450:	2307      	movs	r3, #7
 8002452:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002456:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800245a:	4619      	mov	r1, r3
 800245c:	480a      	ldr	r0, [pc, #40]	; (8002488 <HAL_UART_MspInit+0x630>)
 800245e:	f003 fe05 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2027      	movs	r0, #39	; 0x27
 8002468:	f000 fb53 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800246c:	2027      	movs	r0, #39	; 0x27
 800246e:	f000 fb6a 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8002472:	e074      	b.n	800255e <HAL_UART_MspInit+0x706>
 8002474:	40011000 	.word	0x40011000
 8002478:	58024400 	.word	0x58024400
 800247c:	58020400 	.word	0x58020400
 8002480:	40004400 	.word	0x40004400
 8002484:	58020000 	.word	0x58020000
 8002488:	58020c00 	.word	0x58020c00
 800248c:	40004800 	.word	0x40004800
  else if(huart->Instance==USART6)
 8002490:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002494:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a32      	ldr	r2, [pc, #200]	; (8002568 <HAL_UART_MspInit+0x710>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d15d      	bne.n	800255e <HAL_UART_MspInit+0x706>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80024a2:	f04f 0201 	mov.w	r2, #1
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024b8:	4618      	mov	r0, r3
 80024ba:	f004 ff53 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_UART_MspInit+0x670>
      Error_Handler();
 80024c4:	f7ff f9b7 	bl	8001836 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80024c8:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_UART_MspInit+0x714>)
 80024ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024ce:	4a27      	ldr	r2, [pc, #156]	; (800256c <HAL_UART_MspInit+0x714>)
 80024d0:	f043 0320 	orr.w	r3, r3, #32
 80024d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_UART_MspInit+0x714>)
 80024da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024de:	f003 0220 	and.w	r2, r3, #32
 80024e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024f4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_UART_MspInit+0x714>)
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_UART_MspInit+0x714>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_UART_MspInit+0x714>)
 8002508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250c:	f003 0204 	and.w	r2, r3, #4
 8002510:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002514:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800251e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002522:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002524:	23c0      	movs	r3, #192	; 0xc0
 8002526:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800253c:	2307      	movs	r3, #7
 800253e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002542:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002546:	4619      	mov	r1, r3
 8002548:	4809      	ldr	r0, [pc, #36]	; (8002570 <HAL_UART_MspInit+0x718>)
 800254a:	f003 fd8f 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2100      	movs	r1, #0
 8002552:	2047      	movs	r0, #71	; 0x47
 8002554:	f000 fadd 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002558:	2047      	movs	r0, #71	; 0x47
 800255a:	f000 faf4 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 800255e:	bf00      	nop
 8002560:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40011400 	.word	0x40011400
 800256c:	58024400 	.word	0x58024400
 8002570:	58020800 	.word	0x58020800

08002574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002578:	e7fe      	b.n	8002578 <NMI_Handler+0x4>

0800257a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <HardFault_Handler+0x4>

08002580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <MemManage_Handler+0x4>

08002586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <BusFault_Handler+0x4>

0800258c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <UsageFault_Handler+0x4>

08002592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c0:	f000 f998 	bl	80028f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <DMA1_Stream0_IRQHandler+0x10>)
 80025ce:	f001 fdfb 	bl	80041c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	240003f4 	.word	0x240003f4

080025dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <SPI1_IRQHandler+0x10>)
 80025e2:	f006 ff91 	bl	8009508 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	240001d4 	.word	0x240001d4

080025f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <USART1_IRQHandler+0x10>)
 80025f6:	f007 fe2b 	bl	800a250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	24000674 	.word	0x24000674

08002604 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <USART2_IRQHandler+0x10>)
 800260a:	f007 fe21 	bl	800a250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	24000708 	.word	0x24000708

08002618 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <USART3_IRQHandler+0x10>)
 800261e:	f007 fe17 	bl	800a250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2400079c 	.word	0x2400079c

0800262c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <SPI3_IRQHandler+0x10>)
 8002632:	f006 ff69 	bl	8009508 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2400025c 	.word	0x2400025c

08002640 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <UART4_IRQHandler+0x10>)
 8002646:	f007 fe03 	bl	800a250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	240004b8 	.word	0x240004b8

08002654 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <UART5_IRQHandler+0x10>)
 800265a:	f007 fdf9 	bl	800a250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2400054c 	.word	0x2400054c

08002668 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <USART6_IRQHandler+0x10>)
 800266e:	f007 fdef 	bl	800a250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	24000830 	.word	0x24000830

0800267c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <UART7_IRQHandler+0x10>)
 8002682:	f007 fde5 	bl	800a250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	240005e0 	.word	0x240005e0

08002690 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <SPI4_IRQHandler+0x10>)
 8002696:	f006 ff37 	bl	8009508 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	240002e4 	.word	0x240002e4

080026a4 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <SPI5_IRQHandler+0x10>)
 80026aa:	f006 ff2d 	bl	8009508 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2400036c 	.word	0x2400036c

080026b8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <TIM16_IRQHandler+0x10>)
 80026be:	f007 fb2b 	bl	8009d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2400046c 	.word	0x2400046c

080026cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <SystemInit+0xd0>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	4a31      	ldr	r2, [pc, #196]	; (800279c <SystemInit+0xd0>)
 80026d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026e0:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <SystemInit+0xd4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	2b06      	cmp	r3, #6
 80026ea:	d807      	bhi.n	80026fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <SystemInit+0xd4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 030f 	bic.w	r3, r3, #15
 80026f4:	4a2a      	ldr	r2, [pc, #168]	; (80027a0 <SystemInit+0xd4>)
 80026f6:	f043 0307 	orr.w	r3, r3, #7
 80026fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026fc:	4b29      	ldr	r3, [pc, #164]	; (80027a4 <SystemInit+0xd8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <SystemInit+0xd8>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <SystemInit+0xd8>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800270e:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <SystemInit+0xd8>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4924      	ldr	r1, [pc, #144]	; (80027a4 <SystemInit+0xd8>)
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <SystemInit+0xdc>)
 8002716:	4013      	ands	r3, r2
 8002718:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <SystemInit+0xd4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <SystemInit+0xd4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 030f 	bic.w	r3, r3, #15
 800272e:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <SystemInit+0xd4>)
 8002730:	f043 0307 	orr.w	r3, r3, #7
 8002734:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <SystemInit+0xd8>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <SystemInit+0xd8>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <SystemInit+0xd8>)
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002748:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <SystemInit+0xd8>)
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <SystemInit+0xe0>)
 800274c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <SystemInit+0xd8>)
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <SystemInit+0xe4>)
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002754:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <SystemInit+0xd8>)
 8002756:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <SystemInit+0xe8>)
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <SystemInit+0xd8>)
 800275c:	2200      	movs	r2, #0
 800275e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <SystemInit+0xd8>)
 8002762:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <SystemInit+0xe8>)
 8002764:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <SystemInit+0xd8>)
 8002768:	2200      	movs	r2, #0
 800276a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <SystemInit+0xd8>)
 800276e:	4a11      	ldr	r2, [pc, #68]	; (80027b4 <SystemInit+0xe8>)
 8002770:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <SystemInit+0xd8>)
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <SystemInit+0xd8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <SystemInit+0xd8>)
 800277e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002782:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <SystemInit+0xd8>)
 8002786:	2200      	movs	r2, #0
 8002788:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <SystemInit+0xec>)
 800278c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002790:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00
 80027a0:	52002000 	.word	0x52002000
 80027a4:	58024400 	.word	0x58024400
 80027a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80027ac:	02020200 	.word	0x02020200
 80027b0:	01ff0000 	.word	0x01ff0000
 80027b4:	01010280 	.word	0x01010280
 80027b8:	52004000 	.word	0x52004000

080027bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027c0:	f7ff ff84 	bl	80026cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c4:	480c      	ldr	r0, [pc, #48]	; (80027f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027c6:	490d      	ldr	r1, [pc, #52]	; (80027fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027cc:	e002      	b.n	80027d4 <LoopCopyDataInit>

080027ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027d2:	3304      	adds	r3, #4

080027d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d8:	d3f9      	bcc.n	80027ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027dc:	4c0a      	ldr	r4, [pc, #40]	; (8002808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e0:	e001      	b.n	80027e6 <LoopFillZerobss>

080027e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e4:	3204      	adds	r2, #4

080027e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e8:	d3fb      	bcc.n	80027e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ea:	f00a f941 	bl	800ca70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ee:	f7fd ff0b 	bl	8000608 <main>
  bx  lr
 80027f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027f4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80027f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027fc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002800:	0800cb20 	.word	0x0800cb20
  ldr r2, =_sbss
 8002804:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8002808:	24000a90 	.word	0x24000a90

0800280c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800280c:	e7fe      	b.n	800280c <ADC3_IRQHandler>
	...

08002810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002816:	2003      	movs	r0, #3
 8002818:	f000 f970 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800281c:	f004 fbcc 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_Init+0x68>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	4913      	ldr	r1, [pc, #76]	; (800287c <HAL_Init+0x6c>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_Init+0x68>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_Init+0x6c>)
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <HAL_Init+0x70>)
 8002852:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002854:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_Init+0x74>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800285a:	2000      	movs	r0, #0
 800285c:	f000 f814 	bl	8002888 <HAL_InitTick>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e002      	b.n	8002870 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800286a:	f7fe ffe9 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	58024400 	.word	0x58024400
 800287c:	0800cad0 	.word	0x0800cad0
 8002880:	24000004 	.word	0x24000004
 8002884:	24000000 	.word	0x24000000

08002888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_InitTick+0x60>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e021      	b.n	80028e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HAL_InitTick+0x64>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_InitTick+0x60>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f955 	bl	8002b62 <HAL_SYSTICK_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e00e      	b.n	80028e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b0f      	cmp	r3, #15
 80028c6:	d80a      	bhi.n	80028de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c8:	2200      	movs	r2, #0
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f000 f91f 	bl	8002b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d4:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <HAL_InitTick+0x68>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	2400000c 	.word	0x2400000c
 80028ec:	24000000 	.word	0x24000000
 80028f0:	24000008 	.word	0x24000008

080028f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_IncTick+0x20>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x24>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4413      	add	r3, r2
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_IncTick+0x24>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	2400000c 	.word	0x2400000c
 8002918:	24000a8c 	.word	0x24000a8c

0800291c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return uwTick;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_GetTick+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	24000a8c 	.word	0x24000a8c

08002934 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002944:	4904      	ldr	r1, [pc, #16]	; (8002958 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	58000400 	.word	0x58000400

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <__NVIC_SetPriorityGrouping+0x40>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002986:	4313      	orrs	r3, r2
 8002988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <__NVIC_SetPriorityGrouping+0x40>)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	60d3      	str	r3, [r2, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00
 80029a0:	05fa0000 	.word	0x05fa0000

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <__NVIC_EnableIRQ+0x38>)
 80029da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e100 	.word	0xe000e100

080029fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	db0a      	blt.n	8002a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	490c      	ldr	r1, [pc, #48]	; (8002a48 <__NVIC_SetPriority+0x4c>)
 8002a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a24:	e00a      	b.n	8002a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4908      	ldr	r1, [pc, #32]	; (8002a4c <__NVIC_SetPriority+0x50>)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3b04      	subs	r3, #4
 8002a34:	0112      	lsls	r2, r2, #4
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	440b      	add	r3, r1
 8002a3a:	761a      	strb	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f1c3 0307 	rsb	r3, r3, #7
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	bf28      	it	cs
 8002a6e:	2304      	movcs	r3, #4
 8002a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d902      	bls.n	8002a80 <NVIC_EncodePriority+0x30>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3b03      	subs	r3, #3
 8002a7e:	e000      	b.n	8002a82 <NVIC_EncodePriority+0x32>
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43d9      	mvns	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	4313      	orrs	r3, r2
         );
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	; 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac8:	d301      	bcc.n	8002ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00f      	b.n	8002aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <SysTick_Config+0x40>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f7ff ff8e 	bl	80029fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <SysTick_Config+0x40>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <SysTick_Config+0x40>)
 8002ae8:	2207      	movs	r2, #7
 8002aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000e010 	.word	0xe000e010

08002afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff29 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b20:	f7ff ff40 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f7ff ff90 	bl	8002a50 <NVIC_EncodePriority>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff5f 	bl	80029fc <__NVIC_SetPriority>
}
 8002b3e:	bf00      	nop
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff33 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ffa4 	bl	8002ab8 <SysTick_Config>
 8002b70:	4603      	mov	r3, r0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002b84:	f7ff feca 	bl	800291c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e312      	b.n	80031ba <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a66      	ldr	r2, [pc, #408]	; (8002d34 <HAL_DMA_Init+0x1b8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d04a      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a65      	ldr	r2, [pc, #404]	; (8002d38 <HAL_DMA_Init+0x1bc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d045      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a63      	ldr	r2, [pc, #396]	; (8002d3c <HAL_DMA_Init+0x1c0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d040      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a62      	ldr	r2, [pc, #392]	; (8002d40 <HAL_DMA_Init+0x1c4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d03b      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a60      	ldr	r2, [pc, #384]	; (8002d44 <HAL_DMA_Init+0x1c8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d036      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5f      	ldr	r2, [pc, #380]	; (8002d48 <HAL_DMA_Init+0x1cc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d031      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5d      	ldr	r2, [pc, #372]	; (8002d4c <HAL_DMA_Init+0x1d0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d02c      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5c      	ldr	r2, [pc, #368]	; (8002d50 <HAL_DMA_Init+0x1d4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d027      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5a      	ldr	r2, [pc, #360]	; (8002d54 <HAL_DMA_Init+0x1d8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d022      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a59      	ldr	r2, [pc, #356]	; (8002d58 <HAL_DMA_Init+0x1dc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d01d      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a57      	ldr	r2, [pc, #348]	; (8002d5c <HAL_DMA_Init+0x1e0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d018      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a56      	ldr	r2, [pc, #344]	; (8002d60 <HAL_DMA_Init+0x1e4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a54      	ldr	r2, [pc, #336]	; (8002d64 <HAL_DMA_Init+0x1e8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00e      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a53      	ldr	r2, [pc, #332]	; (8002d68 <HAL_DMA_Init+0x1ec>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a51      	ldr	r2, [pc, #324]	; (8002d6c <HAL_DMA_Init+0x1f0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_DMA_Init+0xb8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a50      	ldr	r2, [pc, #320]	; (8002d70 <HAL_DMA_Init+0x1f4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d101      	bne.n	8002c38 <HAL_DMA_Init+0xbc>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_DMA_Init+0xbe>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 813c 	beq.w	8002eb8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a37      	ldr	r2, [pc, #220]	; (8002d34 <HAL_DMA_Init+0x1b8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d04a      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a36      	ldr	r2, [pc, #216]	; (8002d38 <HAL_DMA_Init+0x1bc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d045      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a34      	ldr	r2, [pc, #208]	; (8002d3c <HAL_DMA_Init+0x1c0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d040      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <HAL_DMA_Init+0x1c4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d03b      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a31      	ldr	r2, [pc, #196]	; (8002d44 <HAL_DMA_Init+0x1c8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d036      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a30      	ldr	r2, [pc, #192]	; (8002d48 <HAL_DMA_Init+0x1cc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d031      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2e      	ldr	r2, [pc, #184]	; (8002d4c <HAL_DMA_Init+0x1d0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02c      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2d      	ldr	r2, [pc, #180]	; (8002d50 <HAL_DMA_Init+0x1d4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d027      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <HAL_DMA_Init+0x1d8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <HAL_DMA_Init+0x1dc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <HAL_DMA_Init+0x1e0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_DMA_Init+0x1e4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <HAL_DMA_Init+0x1e8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a24      	ldr	r2, [pc, #144]	; (8002d68 <HAL_DMA_Init+0x1ec>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <HAL_DMA_Init+0x1f0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_DMA_Init+0x174>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <HAL_DMA_Init+0x1f4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d108      	bne.n	8002d02 <HAL_DMA_Init+0x186>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e007      	b.n	8002d12 <HAL_DMA_Init+0x196>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d12:	e02f      	b.n	8002d74 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d14:	f7ff fe02 	bl	800291c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d928      	bls.n	8002d74 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e242      	b.n	80031ba <HAL_DMA_Init+0x63e>
 8002d34:	40020010 	.word	0x40020010
 8002d38:	40020028 	.word	0x40020028
 8002d3c:	40020040 	.word	0x40020040
 8002d40:	40020058 	.word	0x40020058
 8002d44:	40020070 	.word	0x40020070
 8002d48:	40020088 	.word	0x40020088
 8002d4c:	400200a0 	.word	0x400200a0
 8002d50:	400200b8 	.word	0x400200b8
 8002d54:	40020410 	.word	0x40020410
 8002d58:	40020428 	.word	0x40020428
 8002d5c:	40020440 	.word	0x40020440
 8002d60:	40020458 	.word	0x40020458
 8002d64:	40020470 	.word	0x40020470
 8002d68:	40020488 	.word	0x40020488
 8002d6c:	400204a0 	.word	0x400204a0
 8002d70:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1c8      	bne.n	8002d14 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4b83      	ldr	r3, [pc, #524]	; (8002f9c <HAL_DMA_Init+0x420>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002d9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d107      	bne.n	8002dd8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b28      	cmp	r3, #40	; 0x28
 8002dde:	d903      	bls.n	8002de8 <HAL_DMA_Init+0x26c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b2e      	cmp	r3, #46	; 0x2e
 8002de6:	d91f      	bls.n	8002e28 <HAL_DMA_Init+0x2ac>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b3e      	cmp	r3, #62	; 0x3e
 8002dee:	d903      	bls.n	8002df8 <HAL_DMA_Init+0x27c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b42      	cmp	r3, #66	; 0x42
 8002df6:	d917      	bls.n	8002e28 <HAL_DMA_Init+0x2ac>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b46      	cmp	r3, #70	; 0x46
 8002dfe:	d903      	bls.n	8002e08 <HAL_DMA_Init+0x28c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b48      	cmp	r3, #72	; 0x48
 8002e06:	d90f      	bls.n	8002e28 <HAL_DMA_Init+0x2ac>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b4e      	cmp	r3, #78	; 0x4e
 8002e0e:	d903      	bls.n	8002e18 <HAL_DMA_Init+0x29c>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b52      	cmp	r3, #82	; 0x52
 8002e16:	d907      	bls.n	8002e28 <HAL_DMA_Init+0x2ac>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b73      	cmp	r3, #115	; 0x73
 8002e1e:	d905      	bls.n	8002e2c <HAL_DMA_Init+0x2b0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b77      	cmp	r3, #119	; 0x77
 8002e26:	d801      	bhi.n	8002e2c <HAL_DMA_Init+0x2b0>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_DMA_Init+0x2b2>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e38:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f023 0307 	bic.w	r3, r3, #7
 8002e50:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d117      	bne.n	8002e94 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00e      	beq.n	8002e94 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f002 fb3a 	bl	80054f0 <DMA_CheckFifoParam>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2240      	movs	r2, #64	; 0x40
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e192      	b.n	80031ba <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f002 fa75 	bl	800538c <DMA_CalcBaseAndBitshift>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	223f      	movs	r2, #63	; 0x3f
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	e0c8      	b.n	800304a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a38      	ldr	r2, [pc, #224]	; (8002fa0 <HAL_DMA_Init+0x424>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d022      	beq.n	8002f08 <HAL_DMA_Init+0x38c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a37      	ldr	r2, [pc, #220]	; (8002fa4 <HAL_DMA_Init+0x428>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d01d      	beq.n	8002f08 <HAL_DMA_Init+0x38c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a35      	ldr	r2, [pc, #212]	; (8002fa8 <HAL_DMA_Init+0x42c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d018      	beq.n	8002f08 <HAL_DMA_Init+0x38c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a34      	ldr	r2, [pc, #208]	; (8002fac <HAL_DMA_Init+0x430>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <HAL_DMA_Init+0x38c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a32      	ldr	r2, [pc, #200]	; (8002fb0 <HAL_DMA_Init+0x434>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00e      	beq.n	8002f08 <HAL_DMA_Init+0x38c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a31      	ldr	r2, [pc, #196]	; (8002fb4 <HAL_DMA_Init+0x438>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_DMA_Init+0x38c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <HAL_DMA_Init+0x43c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_DMA_Init+0x38c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2e      	ldr	r2, [pc, #184]	; (8002fbc <HAL_DMA_Init+0x440>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d101      	bne.n	8002f0c <HAL_DMA_Init+0x390>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_DMA_Init+0x392>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8092 	beq.w	8003038 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a21      	ldr	r2, [pc, #132]	; (8002fa0 <HAL_DMA_Init+0x424>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d021      	beq.n	8002f62 <HAL_DMA_Init+0x3e6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a20      	ldr	r2, [pc, #128]	; (8002fa4 <HAL_DMA_Init+0x428>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01c      	beq.n	8002f62 <HAL_DMA_Init+0x3e6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1e      	ldr	r2, [pc, #120]	; (8002fa8 <HAL_DMA_Init+0x42c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d017      	beq.n	8002f62 <HAL_DMA_Init+0x3e6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <HAL_DMA_Init+0x430>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d012      	beq.n	8002f62 <HAL_DMA_Init+0x3e6>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <HAL_DMA_Init+0x434>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00d      	beq.n	8002f62 <HAL_DMA_Init+0x3e6>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <HAL_DMA_Init+0x438>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d008      	beq.n	8002f62 <HAL_DMA_Init+0x3e6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_DMA_Init+0x43c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d003      	beq.n	8002f62 <HAL_DMA_Init+0x3e6>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <HAL_DMA_Init+0x440>)
 8002f60:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_DMA_Init+0x444>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d01c      	beq.n	8002fc4 <HAL_DMA_Init+0x448>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b80      	cmp	r3, #128	; 0x80
 8002f90:	d102      	bne.n	8002f98 <HAL_DMA_Init+0x41c>
 8002f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f96:	e016      	b.n	8002fc6 <HAL_DMA_Init+0x44a>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e014      	b.n	8002fc6 <HAL_DMA_Init+0x44a>
 8002f9c:	fe10803f 	.word	0xfe10803f
 8002fa0:	58025408 	.word	0x58025408
 8002fa4:	5802541c 	.word	0x5802541c
 8002fa8:	58025430 	.word	0x58025430
 8002fac:	58025444 	.word	0x58025444
 8002fb0:	58025458 	.word	0x58025458
 8002fb4:	5802546c 	.word	0x5802546c
 8002fb8:	58025480 	.word	0x58025480
 8002fbc:	58025494 	.word	0x58025494
 8002fc0:	fffe000f 	.word	0xfffe000f
 8002fc4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002fd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002fdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002fe4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ff4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4b6e      	ldr	r3, [pc, #440]	; (80031c4 <HAL_DMA_Init+0x648>)
 800300c:	4413      	add	r3, r2
 800300e:	4a6e      	ldr	r2, [pc, #440]	; (80031c8 <HAL_DMA_Init+0x64c>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	009a      	lsls	r2, r3, #2
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f002 f9b5 	bl	800538c <DMA_CalcBaseAndBitshift>
 8003022:	4603      	mov	r3, r0
 8003024:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2201      	movs	r2, #1
 8003030:	409a      	lsls	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	e008      	b.n	800304a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2240      	movs	r2, #64	; 0x40
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2203      	movs	r2, #3
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0b7      	b.n	80031ba <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5f      	ldr	r2, [pc, #380]	; (80031cc <HAL_DMA_Init+0x650>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d072      	beq.n	800313a <HAL_DMA_Init+0x5be>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a5d      	ldr	r2, [pc, #372]	; (80031d0 <HAL_DMA_Init+0x654>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d06d      	beq.n	800313a <HAL_DMA_Init+0x5be>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <HAL_DMA_Init+0x658>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d068      	beq.n	800313a <HAL_DMA_Init+0x5be>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a5a      	ldr	r2, [pc, #360]	; (80031d8 <HAL_DMA_Init+0x65c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d063      	beq.n	800313a <HAL_DMA_Init+0x5be>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a59      	ldr	r2, [pc, #356]	; (80031dc <HAL_DMA_Init+0x660>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d05e      	beq.n	800313a <HAL_DMA_Init+0x5be>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a57      	ldr	r2, [pc, #348]	; (80031e0 <HAL_DMA_Init+0x664>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d059      	beq.n	800313a <HAL_DMA_Init+0x5be>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a56      	ldr	r2, [pc, #344]	; (80031e4 <HAL_DMA_Init+0x668>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d054      	beq.n	800313a <HAL_DMA_Init+0x5be>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a54      	ldr	r2, [pc, #336]	; (80031e8 <HAL_DMA_Init+0x66c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d04f      	beq.n	800313a <HAL_DMA_Init+0x5be>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a53      	ldr	r2, [pc, #332]	; (80031ec <HAL_DMA_Init+0x670>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d04a      	beq.n	800313a <HAL_DMA_Init+0x5be>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a51      	ldr	r2, [pc, #324]	; (80031f0 <HAL_DMA_Init+0x674>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d045      	beq.n	800313a <HAL_DMA_Init+0x5be>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a50      	ldr	r2, [pc, #320]	; (80031f4 <HAL_DMA_Init+0x678>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d040      	beq.n	800313a <HAL_DMA_Init+0x5be>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a4e      	ldr	r2, [pc, #312]	; (80031f8 <HAL_DMA_Init+0x67c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d03b      	beq.n	800313a <HAL_DMA_Init+0x5be>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a4d      	ldr	r2, [pc, #308]	; (80031fc <HAL_DMA_Init+0x680>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d036      	beq.n	800313a <HAL_DMA_Init+0x5be>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a4b      	ldr	r2, [pc, #300]	; (8003200 <HAL_DMA_Init+0x684>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d031      	beq.n	800313a <HAL_DMA_Init+0x5be>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a4a      	ldr	r2, [pc, #296]	; (8003204 <HAL_DMA_Init+0x688>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d02c      	beq.n	800313a <HAL_DMA_Init+0x5be>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a48      	ldr	r2, [pc, #288]	; (8003208 <HAL_DMA_Init+0x68c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d027      	beq.n	800313a <HAL_DMA_Init+0x5be>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a47      	ldr	r2, [pc, #284]	; (800320c <HAL_DMA_Init+0x690>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d022      	beq.n	800313a <HAL_DMA_Init+0x5be>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a45      	ldr	r2, [pc, #276]	; (8003210 <HAL_DMA_Init+0x694>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01d      	beq.n	800313a <HAL_DMA_Init+0x5be>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a44      	ldr	r2, [pc, #272]	; (8003214 <HAL_DMA_Init+0x698>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d018      	beq.n	800313a <HAL_DMA_Init+0x5be>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a42      	ldr	r2, [pc, #264]	; (8003218 <HAL_DMA_Init+0x69c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d013      	beq.n	800313a <HAL_DMA_Init+0x5be>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a41      	ldr	r2, [pc, #260]	; (800321c <HAL_DMA_Init+0x6a0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00e      	beq.n	800313a <HAL_DMA_Init+0x5be>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3f      	ldr	r2, [pc, #252]	; (8003220 <HAL_DMA_Init+0x6a4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_DMA_Init+0x5be>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a3e      	ldr	r2, [pc, #248]	; (8003224 <HAL_DMA_Init+0x6a8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_DMA_Init+0x5be>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <HAL_DMA_Init+0x6ac>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_DMA_Init+0x5c2>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_DMA_Init+0x5c4>
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d032      	beq.n	80031aa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f002 fa4f 	bl	80055e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b80      	cmp	r3, #128	; 0x80
 8003150:	d102      	bne.n	8003158 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800316c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <HAL_DMA_Init+0x61c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b08      	cmp	r3, #8
 800317c:	d80c      	bhi.n	8003198 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f002 facc 	bl	800571c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	e008      	b.n	80031aa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	a7fdabf8 	.word	0xa7fdabf8
 80031c8:	cccccccd 	.word	0xcccccccd
 80031cc:	40020010 	.word	0x40020010
 80031d0:	40020028 	.word	0x40020028
 80031d4:	40020040 	.word	0x40020040
 80031d8:	40020058 	.word	0x40020058
 80031dc:	40020070 	.word	0x40020070
 80031e0:	40020088 	.word	0x40020088
 80031e4:	400200a0 	.word	0x400200a0
 80031e8:	400200b8 	.word	0x400200b8
 80031ec:	40020410 	.word	0x40020410
 80031f0:	40020428 	.word	0x40020428
 80031f4:	40020440 	.word	0x40020440
 80031f8:	40020458 	.word	0x40020458
 80031fc:	40020470 	.word	0x40020470
 8003200:	40020488 	.word	0x40020488
 8003204:	400204a0 	.word	0x400204a0
 8003208:	400204b8 	.word	0x400204b8
 800320c:	58025408 	.word	0x58025408
 8003210:	5802541c 	.word	0x5802541c
 8003214:	58025430 	.word	0x58025430
 8003218:	58025444 	.word	0x58025444
 800321c:	58025458 	.word	0x58025458
 8003220:	5802546c 	.word	0x5802546c
 8003224:	58025480 	.word	0x58025480
 8003228:	58025494 	.word	0x58025494

0800322c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e226      	b.n	8003696 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_DMA_Start_IT+0x2a>
 8003252:	2302      	movs	r3, #2
 8003254:	e21f      	b.n	8003696 <HAL_DMA_Start_IT+0x46a>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	f040 820a 	bne.w	8003680 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a68      	ldr	r2, [pc, #416]	; (8003420 <HAL_DMA_Start_IT+0x1f4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d04a      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a66      	ldr	r2, [pc, #408]	; (8003424 <HAL_DMA_Start_IT+0x1f8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d045      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a65      	ldr	r2, [pc, #404]	; (8003428 <HAL_DMA_Start_IT+0x1fc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d040      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a63      	ldr	r2, [pc, #396]	; (800342c <HAL_DMA_Start_IT+0x200>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d03b      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a62      	ldr	r2, [pc, #392]	; (8003430 <HAL_DMA_Start_IT+0x204>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d036      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a60      	ldr	r2, [pc, #384]	; (8003434 <HAL_DMA_Start_IT+0x208>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d031      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5f      	ldr	r2, [pc, #380]	; (8003438 <HAL_DMA_Start_IT+0x20c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d02c      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a5d      	ldr	r2, [pc, #372]	; (800343c <HAL_DMA_Start_IT+0x210>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d027      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a5c      	ldr	r2, [pc, #368]	; (8003440 <HAL_DMA_Start_IT+0x214>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a5a      	ldr	r2, [pc, #360]	; (8003444 <HAL_DMA_Start_IT+0x218>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01d      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a59      	ldr	r2, [pc, #356]	; (8003448 <HAL_DMA_Start_IT+0x21c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d018      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a57      	ldr	r2, [pc, #348]	; (800344c <HAL_DMA_Start_IT+0x220>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a56      	ldr	r2, [pc, #344]	; (8003450 <HAL_DMA_Start_IT+0x224>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a54      	ldr	r2, [pc, #336]	; (8003454 <HAL_DMA_Start_IT+0x228>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a53      	ldr	r2, [pc, #332]	; (8003458 <HAL_DMA_Start_IT+0x22c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_DMA_Start_IT+0xee>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a51      	ldr	r2, [pc, #324]	; (800345c <HAL_DMA_Start_IT+0x230>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d108      	bne.n	800332c <HAL_DMA_Start_IT+0x100>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e007      	b.n	800333c <HAL_DMA_Start_IT+0x110>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f001 fe76 	bl	8005034 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a34      	ldr	r2, [pc, #208]	; (8003420 <HAL_DMA_Start_IT+0x1f4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d04a      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a33      	ldr	r2, [pc, #204]	; (8003424 <HAL_DMA_Start_IT+0x1f8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d045      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a31      	ldr	r2, [pc, #196]	; (8003428 <HAL_DMA_Start_IT+0x1fc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d040      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a30      	ldr	r2, [pc, #192]	; (800342c <HAL_DMA_Start_IT+0x200>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d03b      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a2e      	ldr	r2, [pc, #184]	; (8003430 <HAL_DMA_Start_IT+0x204>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d036      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2d      	ldr	r2, [pc, #180]	; (8003434 <HAL_DMA_Start_IT+0x208>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d031      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a2b      	ldr	r2, [pc, #172]	; (8003438 <HAL_DMA_Start_IT+0x20c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02c      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2a      	ldr	r2, [pc, #168]	; (800343c <HAL_DMA_Start_IT+0x210>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d027      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a28      	ldr	r2, [pc, #160]	; (8003440 <HAL_DMA_Start_IT+0x214>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d022      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a27      	ldr	r2, [pc, #156]	; (8003444 <HAL_DMA_Start_IT+0x218>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d01d      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <HAL_DMA_Start_IT+0x21c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d018      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a24      	ldr	r2, [pc, #144]	; (800344c <HAL_DMA_Start_IT+0x220>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d013      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a22      	ldr	r2, [pc, #136]	; (8003450 <HAL_DMA_Start_IT+0x224>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00e      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a21      	ldr	r2, [pc, #132]	; (8003454 <HAL_DMA_Start_IT+0x228>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d009      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <HAL_DMA_Start_IT+0x22c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d004      	beq.n	80033e8 <HAL_DMA_Start_IT+0x1bc>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	; (800345c <HAL_DMA_Start_IT+0x230>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_DMA_Start_IT+0x1c0>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_DMA_Start_IT+0x1c2>
 80033ec:	2300      	movs	r3, #0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d036      	beq.n	8003460 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 021e 	bic.w	r2, r3, #30
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0216 	orr.w	r2, r2, #22
 8003404:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d03e      	beq.n	800348c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0208 	orr.w	r2, r2, #8
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e035      	b.n	800348c <HAL_DMA_Start_IT+0x260>
 8003420:	40020010 	.word	0x40020010
 8003424:	40020028 	.word	0x40020028
 8003428:	40020040 	.word	0x40020040
 800342c:	40020058 	.word	0x40020058
 8003430:	40020070 	.word	0x40020070
 8003434:	40020088 	.word	0x40020088
 8003438:	400200a0 	.word	0x400200a0
 800343c:	400200b8 	.word	0x400200b8
 8003440:	40020410 	.word	0x40020410
 8003444:	40020428 	.word	0x40020428
 8003448:	40020440 	.word	0x40020440
 800344c:	40020458 	.word	0x40020458
 8003450:	40020470 	.word	0x40020470
 8003454:	40020488 	.word	0x40020488
 8003458:	400204a0 	.word	0x400204a0
 800345c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 020e 	bic.w	r2, r3, #14
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 020a 	orr.w	r2, r2, #10
 8003472:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0204 	orr.w	r2, r2, #4
 800348a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a83      	ldr	r2, [pc, #524]	; (80036a0 <HAL_DMA_Start_IT+0x474>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d072      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a82      	ldr	r2, [pc, #520]	; (80036a4 <HAL_DMA_Start_IT+0x478>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d06d      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a80      	ldr	r2, [pc, #512]	; (80036a8 <HAL_DMA_Start_IT+0x47c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d068      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7f      	ldr	r2, [pc, #508]	; (80036ac <HAL_DMA_Start_IT+0x480>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d063      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a7d      	ldr	r2, [pc, #500]	; (80036b0 <HAL_DMA_Start_IT+0x484>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d05e      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a7c      	ldr	r2, [pc, #496]	; (80036b4 <HAL_DMA_Start_IT+0x488>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d059      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a7a      	ldr	r2, [pc, #488]	; (80036b8 <HAL_DMA_Start_IT+0x48c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d054      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a79      	ldr	r2, [pc, #484]	; (80036bc <HAL_DMA_Start_IT+0x490>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d04f      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a77      	ldr	r2, [pc, #476]	; (80036c0 <HAL_DMA_Start_IT+0x494>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d04a      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a76      	ldr	r2, [pc, #472]	; (80036c4 <HAL_DMA_Start_IT+0x498>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d045      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a74      	ldr	r2, [pc, #464]	; (80036c8 <HAL_DMA_Start_IT+0x49c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d040      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a73      	ldr	r2, [pc, #460]	; (80036cc <HAL_DMA_Start_IT+0x4a0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d03b      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a71      	ldr	r2, [pc, #452]	; (80036d0 <HAL_DMA_Start_IT+0x4a4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d036      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a70      	ldr	r2, [pc, #448]	; (80036d4 <HAL_DMA_Start_IT+0x4a8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d031      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6e      	ldr	r2, [pc, #440]	; (80036d8 <HAL_DMA_Start_IT+0x4ac>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d02c      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6d      	ldr	r2, [pc, #436]	; (80036dc <HAL_DMA_Start_IT+0x4b0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d027      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a6b      	ldr	r2, [pc, #428]	; (80036e0 <HAL_DMA_Start_IT+0x4b4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d022      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a6a      	ldr	r2, [pc, #424]	; (80036e4 <HAL_DMA_Start_IT+0x4b8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d01d      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a68      	ldr	r2, [pc, #416]	; (80036e8 <HAL_DMA_Start_IT+0x4bc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d018      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a67      	ldr	r2, [pc, #412]	; (80036ec <HAL_DMA_Start_IT+0x4c0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d013      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a65      	ldr	r2, [pc, #404]	; (80036f0 <HAL_DMA_Start_IT+0x4c4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00e      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a64      	ldr	r2, [pc, #400]	; (80036f4 <HAL_DMA_Start_IT+0x4c8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d009      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a62      	ldr	r2, [pc, #392]	; (80036f8 <HAL_DMA_Start_IT+0x4cc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_DMA_Start_IT+0x350>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a61      	ldr	r2, [pc, #388]	; (80036fc <HAL_DMA_Start_IT+0x4d0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_DMA_Start_IT+0x354>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_DMA_Start_IT+0x356>
 8003580:	2300      	movs	r3, #0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01a      	beq.n	80035bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a37      	ldr	r2, [pc, #220]	; (80036a0 <HAL_DMA_Start_IT+0x474>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d04a      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a36      	ldr	r2, [pc, #216]	; (80036a4 <HAL_DMA_Start_IT+0x478>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d045      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <HAL_DMA_Start_IT+0x47c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d040      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a33      	ldr	r2, [pc, #204]	; (80036ac <HAL_DMA_Start_IT+0x480>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d03b      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a31      	ldr	r2, [pc, #196]	; (80036b0 <HAL_DMA_Start_IT+0x484>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d036      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a30      	ldr	r2, [pc, #192]	; (80036b4 <HAL_DMA_Start_IT+0x488>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d031      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <HAL_DMA_Start_IT+0x48c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d02c      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a2d      	ldr	r2, [pc, #180]	; (80036bc <HAL_DMA_Start_IT+0x490>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d027      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2b      	ldr	r2, [pc, #172]	; (80036c0 <HAL_DMA_Start_IT+0x494>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d022      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <HAL_DMA_Start_IT+0x498>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d01d      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a28      	ldr	r2, [pc, #160]	; (80036c8 <HAL_DMA_Start_IT+0x49c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d018      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a27      	ldr	r2, [pc, #156]	; (80036cc <HAL_DMA_Start_IT+0x4a0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a25      	ldr	r2, [pc, #148]	; (80036d0 <HAL_DMA_Start_IT+0x4a4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00e      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a24      	ldr	r2, [pc, #144]	; (80036d4 <HAL_DMA_Start_IT+0x4a8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d009      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a22      	ldr	r2, [pc, #136]	; (80036d8 <HAL_DMA_Start_IT+0x4ac>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_DMA_Start_IT+0x430>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a21      	ldr	r2, [pc, #132]	; (80036dc <HAL_DMA_Start_IT+0x4b0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d108      	bne.n	800366e <HAL_DMA_Start_IT+0x442>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e012      	b.n	8003694 <HAL_DMA_Start_IT+0x468>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0201 	orr.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e009      	b.n	8003694 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003686:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003694:	7dfb      	ldrb	r3, [r7, #23]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40020010 	.word	0x40020010
 80036a4:	40020028 	.word	0x40020028
 80036a8:	40020040 	.word	0x40020040
 80036ac:	40020058 	.word	0x40020058
 80036b0:	40020070 	.word	0x40020070
 80036b4:	40020088 	.word	0x40020088
 80036b8:	400200a0 	.word	0x400200a0
 80036bc:	400200b8 	.word	0x400200b8
 80036c0:	40020410 	.word	0x40020410
 80036c4:	40020428 	.word	0x40020428
 80036c8:	40020440 	.word	0x40020440
 80036cc:	40020458 	.word	0x40020458
 80036d0:	40020470 	.word	0x40020470
 80036d4:	40020488 	.word	0x40020488
 80036d8:	400204a0 	.word	0x400204a0
 80036dc:	400204b8 	.word	0x400204b8
 80036e0:	58025408 	.word	0x58025408
 80036e4:	5802541c 	.word	0x5802541c
 80036e8:	58025430 	.word	0x58025430
 80036ec:	58025444 	.word	0x58025444
 80036f0:	58025458 	.word	0x58025458
 80036f4:	5802546c 	.word	0x5802546c
 80036f8:	58025480 	.word	0x58025480
 80036fc:	58025494 	.word	0x58025494

08003700 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003708:	f7ff f908 	bl	800291c <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e2dc      	b.n	8003cd2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d008      	beq.n	8003736 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e2cd      	b.n	8003cd2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a76      	ldr	r2, [pc, #472]	; (8003914 <HAL_DMA_Abort+0x214>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d04a      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a74      	ldr	r2, [pc, #464]	; (8003918 <HAL_DMA_Abort+0x218>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d045      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a73      	ldr	r2, [pc, #460]	; (800391c <HAL_DMA_Abort+0x21c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d040      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a71      	ldr	r2, [pc, #452]	; (8003920 <HAL_DMA_Abort+0x220>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d03b      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a70      	ldr	r2, [pc, #448]	; (8003924 <HAL_DMA_Abort+0x224>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d036      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6e      	ldr	r2, [pc, #440]	; (8003928 <HAL_DMA_Abort+0x228>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d031      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6d      	ldr	r2, [pc, #436]	; (800392c <HAL_DMA_Abort+0x22c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d02c      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a6b      	ldr	r2, [pc, #428]	; (8003930 <HAL_DMA_Abort+0x230>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d027      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_DMA_Abort+0x234>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d022      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a68      	ldr	r2, [pc, #416]	; (8003938 <HAL_DMA_Abort+0x238>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01d      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a67      	ldr	r2, [pc, #412]	; (800393c <HAL_DMA_Abort+0x23c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d018      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a65      	ldr	r2, [pc, #404]	; (8003940 <HAL_DMA_Abort+0x240>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a64      	ldr	r2, [pc, #400]	; (8003944 <HAL_DMA_Abort+0x244>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00e      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a62      	ldr	r2, [pc, #392]	; (8003948 <HAL_DMA_Abort+0x248>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a61      	ldr	r2, [pc, #388]	; (800394c <HAL_DMA_Abort+0x24c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_DMA_Abort+0xd6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a5f      	ldr	r2, [pc, #380]	; (8003950 <HAL_DMA_Abort+0x250>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_DMA_Abort+0xda>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_DMA_Abort+0xdc>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 021e 	bic.w	r2, r2, #30
 80037ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e00a      	b.n	800381e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 020e 	bic.w	r2, r2, #14
 8003816:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3c      	ldr	r2, [pc, #240]	; (8003914 <HAL_DMA_Abort+0x214>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d072      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a3a      	ldr	r2, [pc, #232]	; (8003918 <HAL_DMA_Abort+0x218>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d06d      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a39      	ldr	r2, [pc, #228]	; (800391c <HAL_DMA_Abort+0x21c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d068      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a37      	ldr	r2, [pc, #220]	; (8003920 <HAL_DMA_Abort+0x220>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d063      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a36      	ldr	r2, [pc, #216]	; (8003924 <HAL_DMA_Abort+0x224>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d05e      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a34      	ldr	r2, [pc, #208]	; (8003928 <HAL_DMA_Abort+0x228>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d059      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a33      	ldr	r2, [pc, #204]	; (800392c <HAL_DMA_Abort+0x22c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d054      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a31      	ldr	r2, [pc, #196]	; (8003930 <HAL_DMA_Abort+0x230>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d04f      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a30      	ldr	r2, [pc, #192]	; (8003934 <HAL_DMA_Abort+0x234>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d04a      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2e      	ldr	r2, [pc, #184]	; (8003938 <HAL_DMA_Abort+0x238>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d045      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2d      	ldr	r2, [pc, #180]	; (800393c <HAL_DMA_Abort+0x23c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d040      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <HAL_DMA_Abort+0x240>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d03b      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <HAL_DMA_Abort+0x244>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d036      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a28      	ldr	r2, [pc, #160]	; (8003948 <HAL_DMA_Abort+0x248>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d031      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a27      	ldr	r2, [pc, #156]	; (800394c <HAL_DMA_Abort+0x24c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d02c      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a25      	ldr	r2, [pc, #148]	; (8003950 <HAL_DMA_Abort+0x250>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d027      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a24      	ldr	r2, [pc, #144]	; (8003954 <HAL_DMA_Abort+0x254>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a22      	ldr	r2, [pc, #136]	; (8003958 <HAL_DMA_Abort+0x258>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01d      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a21      	ldr	r2, [pc, #132]	; (800395c <HAL_DMA_Abort+0x25c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <HAL_DMA_Abort+0x260>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1e      	ldr	r2, [pc, #120]	; (8003964 <HAL_DMA_Abort+0x264>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1c      	ldr	r2, [pc, #112]	; (8003968 <HAL_DMA_Abort+0x268>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1b      	ldr	r2, [pc, #108]	; (800396c <HAL_DMA_Abort+0x26c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_DMA_Abort+0x20e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a19      	ldr	r2, [pc, #100]	; (8003970 <HAL_DMA_Abort+0x270>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d132      	bne.n	8003974 <HAL_DMA_Abort+0x274>
 800390e:	2301      	movs	r3, #1
 8003910:	e031      	b.n	8003976 <HAL_DMA_Abort+0x276>
 8003912:	bf00      	nop
 8003914:	40020010 	.word	0x40020010
 8003918:	40020028 	.word	0x40020028
 800391c:	40020040 	.word	0x40020040
 8003920:	40020058 	.word	0x40020058
 8003924:	40020070 	.word	0x40020070
 8003928:	40020088 	.word	0x40020088
 800392c:	400200a0 	.word	0x400200a0
 8003930:	400200b8 	.word	0x400200b8
 8003934:	40020410 	.word	0x40020410
 8003938:	40020428 	.word	0x40020428
 800393c:	40020440 	.word	0x40020440
 8003940:	40020458 	.word	0x40020458
 8003944:	40020470 	.word	0x40020470
 8003948:	40020488 	.word	0x40020488
 800394c:	400204a0 	.word	0x400204a0
 8003950:	400204b8 	.word	0x400204b8
 8003954:	58025408 	.word	0x58025408
 8003958:	5802541c 	.word	0x5802541c
 800395c:	58025430 	.word	0x58025430
 8003960:	58025444 	.word	0x58025444
 8003964:	58025458 	.word	0x58025458
 8003968:	5802546c 	.word	0x5802546c
 800396c:	58025480 	.word	0x58025480
 8003970:	58025494 	.word	0x58025494
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003988:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6d      	ldr	r2, [pc, #436]	; (8003b44 <HAL_DMA_Abort+0x444>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d04a      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a6b      	ldr	r2, [pc, #428]	; (8003b48 <HAL_DMA_Abort+0x448>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d045      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a6a      	ldr	r2, [pc, #424]	; (8003b4c <HAL_DMA_Abort+0x44c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d040      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a68      	ldr	r2, [pc, #416]	; (8003b50 <HAL_DMA_Abort+0x450>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d03b      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a67      	ldr	r2, [pc, #412]	; (8003b54 <HAL_DMA_Abort+0x454>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d036      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a65      	ldr	r2, [pc, #404]	; (8003b58 <HAL_DMA_Abort+0x458>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d031      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a64      	ldr	r2, [pc, #400]	; (8003b5c <HAL_DMA_Abort+0x45c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d02c      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a62      	ldr	r2, [pc, #392]	; (8003b60 <HAL_DMA_Abort+0x460>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d027      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a61      	ldr	r2, [pc, #388]	; (8003b64 <HAL_DMA_Abort+0x464>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a5f      	ldr	r2, [pc, #380]	; (8003b68 <HAL_DMA_Abort+0x468>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01d      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a5e      	ldr	r2, [pc, #376]	; (8003b6c <HAL_DMA_Abort+0x46c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a5c      	ldr	r2, [pc, #368]	; (8003b70 <HAL_DMA_Abort+0x470>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5b      	ldr	r2, [pc, #364]	; (8003b74 <HAL_DMA_Abort+0x474>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a59      	ldr	r2, [pc, #356]	; (8003b78 <HAL_DMA_Abort+0x478>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_DMA_Abort+0x47c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_DMA_Abort+0x32a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a56      	ldr	r2, [pc, #344]	; (8003b80 <HAL_DMA_Abort+0x480>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d108      	bne.n	8003a3c <HAL_DMA_Abort+0x33c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e007      	b.n	8003a4c <HAL_DMA_Abort+0x34c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a4c:	e013      	b.n	8003a76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a4e:	f7fe ff65 	bl	800291c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d90c      	bls.n	8003a76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2203      	movs	r2, #3
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e12d      	b.n	8003cd2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e5      	bne.n	8003a4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2f      	ldr	r2, [pc, #188]	; (8003b44 <HAL_DMA_Abort+0x444>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d04a      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a2d      	ldr	r2, [pc, #180]	; (8003b48 <HAL_DMA_Abort+0x448>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d045      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <HAL_DMA_Abort+0x44c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d040      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2a      	ldr	r2, [pc, #168]	; (8003b50 <HAL_DMA_Abort+0x450>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d03b      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a29      	ldr	r2, [pc, #164]	; (8003b54 <HAL_DMA_Abort+0x454>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d036      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <HAL_DMA_Abort+0x458>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d031      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <HAL_DMA_Abort+0x45c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d02c      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <HAL_DMA_Abort+0x460>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d027      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <HAL_DMA_Abort+0x464>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d022      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <HAL_DMA_Abort+0x468>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01d      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <HAL_DMA_Abort+0x46c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d018      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <HAL_DMA_Abort+0x470>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <HAL_DMA_Abort+0x474>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <HAL_DMA_Abort+0x478>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <HAL_DMA_Abort+0x47c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_DMA_Abort+0x422>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <HAL_DMA_Abort+0x480>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_DMA_Abort+0x426>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_DMA_Abort+0x428>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02b      	beq.n	8003b84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	223f      	movs	r2, #63	; 0x3f
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	e02a      	b.n	8003b9a <HAL_DMA_Abort+0x49a>
 8003b44:	40020010 	.word	0x40020010
 8003b48:	40020028 	.word	0x40020028
 8003b4c:	40020040 	.word	0x40020040
 8003b50:	40020058 	.word	0x40020058
 8003b54:	40020070 	.word	0x40020070
 8003b58:	40020088 	.word	0x40020088
 8003b5c:	400200a0 	.word	0x400200a0
 8003b60:	400200b8 	.word	0x400200b8
 8003b64:	40020410 	.word	0x40020410
 8003b68:	40020428 	.word	0x40020428
 8003b6c:	40020440 	.word	0x40020440
 8003b70:	40020458 	.word	0x40020458
 8003b74:	40020470 	.word	0x40020470
 8003b78:	40020488 	.word	0x40020488
 8003b7c:	400204a0 	.word	0x400204a0
 8003b80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	2201      	movs	r2, #1
 8003b94:	409a      	lsls	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a4f      	ldr	r2, [pc, #316]	; (8003cdc <HAL_DMA_Abort+0x5dc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d072      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a4d      	ldr	r2, [pc, #308]	; (8003ce0 <HAL_DMA_Abort+0x5e0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d06d      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a4c      	ldr	r2, [pc, #304]	; (8003ce4 <HAL_DMA_Abort+0x5e4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d068      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a4a      	ldr	r2, [pc, #296]	; (8003ce8 <HAL_DMA_Abort+0x5e8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d063      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a49      	ldr	r2, [pc, #292]	; (8003cec <HAL_DMA_Abort+0x5ec>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d05e      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a47      	ldr	r2, [pc, #284]	; (8003cf0 <HAL_DMA_Abort+0x5f0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d059      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a46      	ldr	r2, [pc, #280]	; (8003cf4 <HAL_DMA_Abort+0x5f4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d054      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a44      	ldr	r2, [pc, #272]	; (8003cf8 <HAL_DMA_Abort+0x5f8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d04f      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a43      	ldr	r2, [pc, #268]	; (8003cfc <HAL_DMA_Abort+0x5fc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d04a      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a41      	ldr	r2, [pc, #260]	; (8003d00 <HAL_DMA_Abort+0x600>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d045      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a40      	ldr	r2, [pc, #256]	; (8003d04 <HAL_DMA_Abort+0x604>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d040      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a3e      	ldr	r2, [pc, #248]	; (8003d08 <HAL_DMA_Abort+0x608>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d03b      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a3d      	ldr	r2, [pc, #244]	; (8003d0c <HAL_DMA_Abort+0x60c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d036      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3b      	ldr	r2, [pc, #236]	; (8003d10 <HAL_DMA_Abort+0x610>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d031      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3a      	ldr	r2, [pc, #232]	; (8003d14 <HAL_DMA_Abort+0x614>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d02c      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a38      	ldr	r2, [pc, #224]	; (8003d18 <HAL_DMA_Abort+0x618>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d027      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a37      	ldr	r2, [pc, #220]	; (8003d1c <HAL_DMA_Abort+0x61c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a35      	ldr	r2, [pc, #212]	; (8003d20 <HAL_DMA_Abort+0x620>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01d      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a34      	ldr	r2, [pc, #208]	; (8003d24 <HAL_DMA_Abort+0x624>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a32      	ldr	r2, [pc, #200]	; (8003d28 <HAL_DMA_Abort+0x628>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a31      	ldr	r2, [pc, #196]	; (8003d2c <HAL_DMA_Abort+0x62c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <HAL_DMA_Abort+0x630>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2e      	ldr	r2, [pc, #184]	; (8003d34 <HAL_DMA_Abort+0x634>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_DMA_Abort+0x58a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2c      	ldr	r2, [pc, #176]	; (8003d38 <HAL_DMA_Abort+0x638>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <HAL_DMA_Abort+0x58e>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_DMA_Abort+0x590>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cbe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40020010 	.word	0x40020010
 8003ce0:	40020028 	.word	0x40020028
 8003ce4:	40020040 	.word	0x40020040
 8003ce8:	40020058 	.word	0x40020058
 8003cec:	40020070 	.word	0x40020070
 8003cf0:	40020088 	.word	0x40020088
 8003cf4:	400200a0 	.word	0x400200a0
 8003cf8:	400200b8 	.word	0x400200b8
 8003cfc:	40020410 	.word	0x40020410
 8003d00:	40020428 	.word	0x40020428
 8003d04:	40020440 	.word	0x40020440
 8003d08:	40020458 	.word	0x40020458
 8003d0c:	40020470 	.word	0x40020470
 8003d10:	40020488 	.word	0x40020488
 8003d14:	400204a0 	.word	0x400204a0
 8003d18:	400204b8 	.word	0x400204b8
 8003d1c:	58025408 	.word	0x58025408
 8003d20:	5802541c 	.word	0x5802541c
 8003d24:	58025430 	.word	0x58025430
 8003d28:	58025444 	.word	0x58025444
 8003d2c:	58025458 	.word	0x58025458
 8003d30:	5802546c 	.word	0x5802546c
 8003d34:	58025480 	.word	0x58025480
 8003d38:	58025494 	.word	0x58025494

08003d3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e237      	b.n	80041be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d004      	beq.n	8003d64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e22c      	b.n	80041be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a5c      	ldr	r2, [pc, #368]	; (8003edc <HAL_DMA_Abort_IT+0x1a0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d04a      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a5b      	ldr	r2, [pc, #364]	; (8003ee0 <HAL_DMA_Abort_IT+0x1a4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d045      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a59      	ldr	r2, [pc, #356]	; (8003ee4 <HAL_DMA_Abort_IT+0x1a8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d040      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a58      	ldr	r2, [pc, #352]	; (8003ee8 <HAL_DMA_Abort_IT+0x1ac>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d03b      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a56      	ldr	r2, [pc, #344]	; (8003eec <HAL_DMA_Abort_IT+0x1b0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d036      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a55      	ldr	r2, [pc, #340]	; (8003ef0 <HAL_DMA_Abort_IT+0x1b4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d031      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a53      	ldr	r2, [pc, #332]	; (8003ef4 <HAL_DMA_Abort_IT+0x1b8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02c      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a52      	ldr	r2, [pc, #328]	; (8003ef8 <HAL_DMA_Abort_IT+0x1bc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d027      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a50      	ldr	r2, [pc, #320]	; (8003efc <HAL_DMA_Abort_IT+0x1c0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d022      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a4f      	ldr	r2, [pc, #316]	; (8003f00 <HAL_DMA_Abort_IT+0x1c4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01d      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a4d      	ldr	r2, [pc, #308]	; (8003f04 <HAL_DMA_Abort_IT+0x1c8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d018      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a4c      	ldr	r2, [pc, #304]	; (8003f08 <HAL_DMA_Abort_IT+0x1cc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a4a      	ldr	r2, [pc, #296]	; (8003f0c <HAL_DMA_Abort_IT+0x1d0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a49      	ldr	r2, [pc, #292]	; (8003f10 <HAL_DMA_Abort_IT+0x1d4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a47      	ldr	r2, [pc, #284]	; (8003f14 <HAL_DMA_Abort_IT+0x1d8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xc8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a46      	ldr	r2, [pc, #280]	; (8003f18 <HAL_DMA_Abort_IT+0x1dc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <HAL_DMA_Abort_IT+0xcc>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_DMA_Abort_IT+0xce>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8086 	beq.w	8003f1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2204      	movs	r2, #4
 8003e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <HAL_DMA_Abort_IT+0x1a0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d04a      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2e      	ldr	r2, [pc, #184]	; (8003ee0 <HAL_DMA_Abort_IT+0x1a4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d045      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <HAL_DMA_Abort_IT+0x1a8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d040      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ee8 <HAL_DMA_Abort_IT+0x1ac>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d03b      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a29      	ldr	r2, [pc, #164]	; (8003eec <HAL_DMA_Abort_IT+0x1b0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d036      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <HAL_DMA_Abort_IT+0x1b4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d031      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <HAL_DMA_Abort_IT+0x1b8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d02c      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a25      	ldr	r2, [pc, #148]	; (8003ef8 <HAL_DMA_Abort_IT+0x1bc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d027      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a23      	ldr	r2, [pc, #140]	; (8003efc <HAL_DMA_Abort_IT+0x1c0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d022      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a22      	ldr	r2, [pc, #136]	; (8003f00 <HAL_DMA_Abort_IT+0x1c4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d01d      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <HAL_DMA_Abort_IT+0x1c8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d018      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <HAL_DMA_Abort_IT+0x1cc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d013      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <HAL_DMA_Abort_IT+0x1d0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00e      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <HAL_DMA_Abort_IT+0x1d4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1a      	ldr	r2, [pc, #104]	; (8003f14 <HAL_DMA_Abort_IT+0x1d8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x17c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a19      	ldr	r2, [pc, #100]	; (8003f18 <HAL_DMA_Abort_IT+0x1dc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <HAL_DMA_Abort_IT+0x18e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e178      	b.n	80041bc <HAL_DMA_Abort_IT+0x480>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e16f      	b.n	80041bc <HAL_DMA_Abort_IT+0x480>
 8003edc:	40020010 	.word	0x40020010
 8003ee0:	40020028 	.word	0x40020028
 8003ee4:	40020040 	.word	0x40020040
 8003ee8:	40020058 	.word	0x40020058
 8003eec:	40020070 	.word	0x40020070
 8003ef0:	40020088 	.word	0x40020088
 8003ef4:	400200a0 	.word	0x400200a0
 8003ef8:	400200b8 	.word	0x400200b8
 8003efc:	40020410 	.word	0x40020410
 8003f00:	40020428 	.word	0x40020428
 8003f04:	40020440 	.word	0x40020440
 8003f08:	40020458 	.word	0x40020458
 8003f0c:	40020470 	.word	0x40020470
 8003f10:	40020488 	.word	0x40020488
 8003f14:	400204a0 	.word	0x400204a0
 8003f18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 020e 	bic.w	r2, r2, #14
 8003f2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6c      	ldr	r2, [pc, #432]	; (80040e4 <HAL_DMA_Abort_IT+0x3a8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d04a      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a6b      	ldr	r2, [pc, #428]	; (80040e8 <HAL_DMA_Abort_IT+0x3ac>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d045      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a69      	ldr	r2, [pc, #420]	; (80040ec <HAL_DMA_Abort_IT+0x3b0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d040      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a68      	ldr	r2, [pc, #416]	; (80040f0 <HAL_DMA_Abort_IT+0x3b4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d03b      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a66      	ldr	r2, [pc, #408]	; (80040f4 <HAL_DMA_Abort_IT+0x3b8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d036      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a65      	ldr	r2, [pc, #404]	; (80040f8 <HAL_DMA_Abort_IT+0x3bc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d031      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a63      	ldr	r2, [pc, #396]	; (80040fc <HAL_DMA_Abort_IT+0x3c0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02c      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a62      	ldr	r2, [pc, #392]	; (8004100 <HAL_DMA_Abort_IT+0x3c4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d027      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a60      	ldr	r2, [pc, #384]	; (8004104 <HAL_DMA_Abort_IT+0x3c8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d022      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a5f      	ldr	r2, [pc, #380]	; (8004108 <HAL_DMA_Abort_IT+0x3cc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d01d      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a5d      	ldr	r2, [pc, #372]	; (800410c <HAL_DMA_Abort_IT+0x3d0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d018      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a5c      	ldr	r2, [pc, #368]	; (8004110 <HAL_DMA_Abort_IT+0x3d4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d013      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a5a      	ldr	r2, [pc, #360]	; (8004114 <HAL_DMA_Abort_IT+0x3d8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00e      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a59      	ldr	r2, [pc, #356]	; (8004118 <HAL_DMA_Abort_IT+0x3dc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d009      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a57      	ldr	r2, [pc, #348]	; (800411c <HAL_DMA_Abort_IT+0x3e0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x290>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a56      	ldr	r2, [pc, #344]	; (8004120 <HAL_DMA_Abort_IT+0x3e4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d108      	bne.n	8003fde <HAL_DMA_Abort_IT+0x2a2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e007      	b.n	8003fee <HAL_DMA_Abort_IT+0x2b2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a3c      	ldr	r2, [pc, #240]	; (80040e4 <HAL_DMA_Abort_IT+0x3a8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d072      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3a      	ldr	r2, [pc, #232]	; (80040e8 <HAL_DMA_Abort_IT+0x3ac>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d06d      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a39      	ldr	r2, [pc, #228]	; (80040ec <HAL_DMA_Abort_IT+0x3b0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d068      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a37      	ldr	r2, [pc, #220]	; (80040f0 <HAL_DMA_Abort_IT+0x3b4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d063      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a36      	ldr	r2, [pc, #216]	; (80040f4 <HAL_DMA_Abort_IT+0x3b8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d05e      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a34      	ldr	r2, [pc, #208]	; (80040f8 <HAL_DMA_Abort_IT+0x3bc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d059      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a33      	ldr	r2, [pc, #204]	; (80040fc <HAL_DMA_Abort_IT+0x3c0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d054      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a31      	ldr	r2, [pc, #196]	; (8004100 <HAL_DMA_Abort_IT+0x3c4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d04f      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a30      	ldr	r2, [pc, #192]	; (8004104 <HAL_DMA_Abort_IT+0x3c8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d04a      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2e      	ldr	r2, [pc, #184]	; (8004108 <HAL_DMA_Abort_IT+0x3cc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d045      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2d      	ldr	r2, [pc, #180]	; (800410c <HAL_DMA_Abort_IT+0x3d0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d040      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <HAL_DMA_Abort_IT+0x3d4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d03b      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <HAL_DMA_Abort_IT+0x3d8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d036      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <HAL_DMA_Abort_IT+0x3dc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d031      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a27      	ldr	r2, [pc, #156]	; (800411c <HAL_DMA_Abort_IT+0x3e0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d02c      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a25      	ldr	r2, [pc, #148]	; (8004120 <HAL_DMA_Abort_IT+0x3e4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d027      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a24      	ldr	r2, [pc, #144]	; (8004124 <HAL_DMA_Abort_IT+0x3e8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d022      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <HAL_DMA_Abort_IT+0x3ec>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01d      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a21      	ldr	r2, [pc, #132]	; (800412c <HAL_DMA_Abort_IT+0x3f0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d018      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_DMA_Abort_IT+0x3f4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <HAL_DMA_Abort_IT+0x3f8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00e      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <HAL_DMA_Abort_IT+0x3fc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d009      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1b      	ldr	r2, [pc, #108]	; (800413c <HAL_DMA_Abort_IT+0x400>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_DMA_Abort_IT+0x3a2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a19      	ldr	r2, [pc, #100]	; (8004140 <HAL_DMA_Abort_IT+0x404>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d132      	bne.n	8004144 <HAL_DMA_Abort_IT+0x408>
 80040de:	2301      	movs	r3, #1
 80040e0:	e031      	b.n	8004146 <HAL_DMA_Abort_IT+0x40a>
 80040e2:	bf00      	nop
 80040e4:	40020010 	.word	0x40020010
 80040e8:	40020028 	.word	0x40020028
 80040ec:	40020040 	.word	0x40020040
 80040f0:	40020058 	.word	0x40020058
 80040f4:	40020070 	.word	0x40020070
 80040f8:	40020088 	.word	0x40020088
 80040fc:	400200a0 	.word	0x400200a0
 8004100:	400200b8 	.word	0x400200b8
 8004104:	40020410 	.word	0x40020410
 8004108:	40020428 	.word	0x40020428
 800410c:	40020440 	.word	0x40020440
 8004110:	40020458 	.word	0x40020458
 8004114:	40020470 	.word	0x40020470
 8004118:	40020488 	.word	0x40020488
 800411c:	400204a0 	.word	0x400204a0
 8004120:	400204b8 	.word	0x400204b8
 8004124:	58025408 	.word	0x58025408
 8004128:	5802541c 	.word	0x5802541c
 800412c:	58025430 	.word	0x58025430
 8004130:	58025444 	.word	0x58025444
 8004134:	58025458 	.word	0x58025458
 8004138:	5802546c 	.word	0x5802546c
 800413c:	58025480 	.word	0x58025480
 8004140:	58025494 	.word	0x58025494
 8004144:	2300      	movs	r3, #0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d028      	beq.n	800419c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004158:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2201      	movs	r2, #1
 800416a:	409a      	lsls	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004178:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004190:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800419a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop

080041c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041d4:	4b67      	ldr	r3, [pc, #412]	; (8004374 <HAL_DMA_IRQHandler+0x1ac>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a67      	ldr	r2, [pc, #412]	; (8004378 <HAL_DMA_IRQHandler+0x1b0>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	0a9b      	lsrs	r3, r3, #10
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a5f      	ldr	r2, [pc, #380]	; (800437c <HAL_DMA_IRQHandler+0x1b4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d04a      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a5d      	ldr	r2, [pc, #372]	; (8004380 <HAL_DMA_IRQHandler+0x1b8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d045      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a5c      	ldr	r2, [pc, #368]	; (8004384 <HAL_DMA_IRQHandler+0x1bc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d040      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a5a      	ldr	r2, [pc, #360]	; (8004388 <HAL_DMA_IRQHandler+0x1c0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d03b      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a59      	ldr	r2, [pc, #356]	; (800438c <HAL_DMA_IRQHandler+0x1c4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d036      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a57      	ldr	r2, [pc, #348]	; (8004390 <HAL_DMA_IRQHandler+0x1c8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d031      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a56      	ldr	r2, [pc, #344]	; (8004394 <HAL_DMA_IRQHandler+0x1cc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d02c      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a54      	ldr	r2, [pc, #336]	; (8004398 <HAL_DMA_IRQHandler+0x1d0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d027      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a53      	ldr	r2, [pc, #332]	; (800439c <HAL_DMA_IRQHandler+0x1d4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d022      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a51      	ldr	r2, [pc, #324]	; (80043a0 <HAL_DMA_IRQHandler+0x1d8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01d      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a50      	ldr	r2, [pc, #320]	; (80043a4 <HAL_DMA_IRQHandler+0x1dc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d018      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a4e      	ldr	r2, [pc, #312]	; (80043a8 <HAL_DMA_IRQHandler+0x1e0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a4d      	ldr	r2, [pc, #308]	; (80043ac <HAL_DMA_IRQHandler+0x1e4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00e      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a4b      	ldr	r2, [pc, #300]	; (80043b0 <HAL_DMA_IRQHandler+0x1e8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <HAL_DMA_IRQHandler+0x1ec>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_DMA_IRQHandler+0xd2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a48      	ldr	r2, [pc, #288]	; (80043b8 <HAL_DMA_IRQHandler+0x1f0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d101      	bne.n	800429e <HAL_DMA_IRQHandler+0xd6>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <HAL_DMA_IRQHandler+0xd8>
 800429e:	2300      	movs	r3, #0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 842b 	beq.w	8004afc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	2208      	movs	r2, #8
 80042b0:	409a      	lsls	r2, r3
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80a2 	beq.w	8004400 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2e      	ldr	r2, [pc, #184]	; (800437c <HAL_DMA_IRQHandler+0x1b4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d04a      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2d      	ldr	r2, [pc, #180]	; (8004380 <HAL_DMA_IRQHandler+0x1b8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d045      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <HAL_DMA_IRQHandler+0x1bc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d040      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <HAL_DMA_IRQHandler+0x1c0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d03b      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a28      	ldr	r2, [pc, #160]	; (800438c <HAL_DMA_IRQHandler+0x1c4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d036      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a27      	ldr	r2, [pc, #156]	; (8004390 <HAL_DMA_IRQHandler+0x1c8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d031      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a25      	ldr	r2, [pc, #148]	; (8004394 <HAL_DMA_IRQHandler+0x1cc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d02c      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a24      	ldr	r2, [pc, #144]	; (8004398 <HAL_DMA_IRQHandler+0x1d0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d027      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a22      	ldr	r2, [pc, #136]	; (800439c <HAL_DMA_IRQHandler+0x1d4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d022      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <HAL_DMA_IRQHandler+0x1d8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d01d      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1f      	ldr	r2, [pc, #124]	; (80043a4 <HAL_DMA_IRQHandler+0x1dc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d018      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <HAL_DMA_IRQHandler+0x1e0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <HAL_DMA_IRQHandler+0x1e4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00e      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <HAL_DMA_IRQHandler+0x1e8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d009      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <HAL_DMA_IRQHandler+0x1ec>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_DMA_IRQHandler+0x194>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <HAL_DMA_IRQHandler+0x1f0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d12f      	bne.n	80043bc <HAL_DMA_IRQHandler+0x1f4>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e02e      	b.n	80043d0 <HAL_DMA_IRQHandler+0x208>
 8004372:	bf00      	nop
 8004374:	24000000 	.word	0x24000000
 8004378:	1b4e81b5 	.word	0x1b4e81b5
 800437c:	40020010 	.word	0x40020010
 8004380:	40020028 	.word	0x40020028
 8004384:	40020040 	.word	0x40020040
 8004388:	40020058 	.word	0x40020058
 800438c:	40020070 	.word	0x40020070
 8004390:	40020088 	.word	0x40020088
 8004394:	400200a0 	.word	0x400200a0
 8004398:	400200b8 	.word	0x400200b8
 800439c:	40020410 	.word	0x40020410
 80043a0:	40020428 	.word	0x40020428
 80043a4:	40020440 	.word	0x40020440
 80043a8:	40020458 	.word	0x40020458
 80043ac:	40020470 	.word	0x40020470
 80043b0:	40020488 	.word	0x40020488
 80043b4:	400204a0 	.word	0x400204a0
 80043b8:	400204b8 	.word	0x400204b8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bf14      	ite	ne
 80043ca:	2301      	movne	r3, #1
 80043cc:	2300      	moveq	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d015      	beq.n	8004400 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0204 	bic.w	r2, r2, #4
 80043e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	2208      	movs	r2, #8
 80043ee:	409a      	lsls	r2, r3
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f8:	f043 0201 	orr.w	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	fa22 f303 	lsr.w	r3, r2, r3
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d06e      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a69      	ldr	r2, [pc, #420]	; (80045c0 <HAL_DMA_IRQHandler+0x3f8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d04a      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a67      	ldr	r2, [pc, #412]	; (80045c4 <HAL_DMA_IRQHandler+0x3fc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d045      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a66      	ldr	r2, [pc, #408]	; (80045c8 <HAL_DMA_IRQHandler+0x400>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d040      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a64      	ldr	r2, [pc, #400]	; (80045cc <HAL_DMA_IRQHandler+0x404>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d03b      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a63      	ldr	r2, [pc, #396]	; (80045d0 <HAL_DMA_IRQHandler+0x408>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d036      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a61      	ldr	r2, [pc, #388]	; (80045d4 <HAL_DMA_IRQHandler+0x40c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d031      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a60      	ldr	r2, [pc, #384]	; (80045d8 <HAL_DMA_IRQHandler+0x410>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d02c      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a5e      	ldr	r2, [pc, #376]	; (80045dc <HAL_DMA_IRQHandler+0x414>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d027      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a5d      	ldr	r2, [pc, #372]	; (80045e0 <HAL_DMA_IRQHandler+0x418>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d022      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a5b      	ldr	r2, [pc, #364]	; (80045e4 <HAL_DMA_IRQHandler+0x41c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01d      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a5a      	ldr	r2, [pc, #360]	; (80045e8 <HAL_DMA_IRQHandler+0x420>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d018      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a58      	ldr	r2, [pc, #352]	; (80045ec <HAL_DMA_IRQHandler+0x424>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a57      	ldr	r2, [pc, #348]	; (80045f0 <HAL_DMA_IRQHandler+0x428>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00e      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a55      	ldr	r2, [pc, #340]	; (80045f4 <HAL_DMA_IRQHandler+0x42c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a54      	ldr	r2, [pc, #336]	; (80045f8 <HAL_DMA_IRQHandler+0x430>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x2ee>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a52      	ldr	r2, [pc, #328]	; (80045fc <HAL_DMA_IRQHandler+0x434>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10a      	bne.n	80044cc <HAL_DMA_IRQHandler+0x304>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e003      	b.n	80044d4 <HAL_DMA_IRQHandler+0x30c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00d      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	2201      	movs	r2, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	f043 0202 	orr.w	r2, r3, #2
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2204      	movs	r2, #4
 80044fe:	409a      	lsls	r2, r3
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 808f 	beq.w	8004628 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <HAL_DMA_IRQHandler+0x3f8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d04a      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2a      	ldr	r2, [pc, #168]	; (80045c4 <HAL_DMA_IRQHandler+0x3fc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d045      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a29      	ldr	r2, [pc, #164]	; (80045c8 <HAL_DMA_IRQHandler+0x400>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d040      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a27      	ldr	r2, [pc, #156]	; (80045cc <HAL_DMA_IRQHandler+0x404>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d03b      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <HAL_DMA_IRQHandler+0x408>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d036      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a24      	ldr	r2, [pc, #144]	; (80045d4 <HAL_DMA_IRQHandler+0x40c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d031      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a23      	ldr	r2, [pc, #140]	; (80045d8 <HAL_DMA_IRQHandler+0x410>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d02c      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a21      	ldr	r2, [pc, #132]	; (80045dc <HAL_DMA_IRQHandler+0x414>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d027      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <HAL_DMA_IRQHandler+0x418>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d022      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <HAL_DMA_IRQHandler+0x41c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01d      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <HAL_DMA_IRQHandler+0x420>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d018      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <HAL_DMA_IRQHandler+0x424>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <HAL_DMA_IRQHandler+0x428>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00e      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <HAL_DMA_IRQHandler+0x42c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d009      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <HAL_DMA_IRQHandler+0x430>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d004      	beq.n	80045aa <HAL_DMA_IRQHandler+0x3e2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a15      	ldr	r2, [pc, #84]	; (80045fc <HAL_DMA_IRQHandler+0x434>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d12a      	bne.n	8004600 <HAL_DMA_IRQHandler+0x438>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	e023      	b.n	8004608 <HAL_DMA_IRQHandler+0x440>
 80045c0:	40020010 	.word	0x40020010
 80045c4:	40020028 	.word	0x40020028
 80045c8:	40020040 	.word	0x40020040
 80045cc:	40020058 	.word	0x40020058
 80045d0:	40020070 	.word	0x40020070
 80045d4:	40020088 	.word	0x40020088
 80045d8:	400200a0 	.word	0x400200a0
 80045dc:	400200b8 	.word	0x400200b8
 80045e0:	40020410 	.word	0x40020410
 80045e4:	40020428 	.word	0x40020428
 80045e8:	40020440 	.word	0x40020440
 80045ec:	40020458 	.word	0x40020458
 80045f0:	40020470 	.word	0x40020470
 80045f4:	40020488 	.word	0x40020488
 80045f8:	400204a0 	.word	0x400204a0
 80045fc:	400204b8 	.word	0x400204b8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	2204      	movs	r2, #4
 8004616:	409a      	lsls	r2, r3
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	f043 0204 	orr.w	r2, r3, #4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2210      	movs	r2, #16
 8004632:	409a      	lsls	r2, r3
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80a6 	beq.w	800478a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a85      	ldr	r2, [pc, #532]	; (8004858 <HAL_DMA_IRQHandler+0x690>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d04a      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a83      	ldr	r2, [pc, #524]	; (800485c <HAL_DMA_IRQHandler+0x694>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d045      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a82      	ldr	r2, [pc, #520]	; (8004860 <HAL_DMA_IRQHandler+0x698>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d040      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a80      	ldr	r2, [pc, #512]	; (8004864 <HAL_DMA_IRQHandler+0x69c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d03b      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a7f      	ldr	r2, [pc, #508]	; (8004868 <HAL_DMA_IRQHandler+0x6a0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d036      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a7d      	ldr	r2, [pc, #500]	; (800486c <HAL_DMA_IRQHandler+0x6a4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d031      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a7c      	ldr	r2, [pc, #496]	; (8004870 <HAL_DMA_IRQHandler+0x6a8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d02c      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a7a      	ldr	r2, [pc, #488]	; (8004874 <HAL_DMA_IRQHandler+0x6ac>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d027      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a79      	ldr	r2, [pc, #484]	; (8004878 <HAL_DMA_IRQHandler+0x6b0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d022      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a77      	ldr	r2, [pc, #476]	; (800487c <HAL_DMA_IRQHandler+0x6b4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01d      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a76      	ldr	r2, [pc, #472]	; (8004880 <HAL_DMA_IRQHandler+0x6b8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d018      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a74      	ldr	r2, [pc, #464]	; (8004884 <HAL_DMA_IRQHandler+0x6bc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a73      	ldr	r2, [pc, #460]	; (8004888 <HAL_DMA_IRQHandler+0x6c0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a71      	ldr	r2, [pc, #452]	; (800488c <HAL_DMA_IRQHandler+0x6c4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a70      	ldr	r2, [pc, #448]	; (8004890 <HAL_DMA_IRQHandler+0x6c8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_DMA_IRQHandler+0x516>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a6e      	ldr	r2, [pc, #440]	; (8004894 <HAL_DMA_IRQHandler+0x6cc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10a      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x52c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf14      	ite	ne
 80046ec:	2301      	movne	r3, #1
 80046ee:	2300      	moveq	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e009      	b.n	8004708 <HAL_DMA_IRQHandler+0x540>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d03e      	beq.n	800478a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	2210      	movs	r2, #16
 8004716:	409a      	lsls	r2, r3
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d018      	beq.n	800475c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d108      	bne.n	800474a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d024      	beq.n	800478a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
 8004748:	e01f      	b.n	800478a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01b      	beq.n	800478a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
 800475a:	e016      	b.n	800478a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d107      	bne.n	800477a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0208 	bic.w	r2, r2, #8
 8004778:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	2220      	movs	r2, #32
 8004794:	409a      	lsls	r2, r3
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8110 	beq.w	80049c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a2c      	ldr	r2, [pc, #176]	; (8004858 <HAL_DMA_IRQHandler+0x690>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d04a      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a2b      	ldr	r2, [pc, #172]	; (800485c <HAL_DMA_IRQHandler+0x694>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d045      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a29      	ldr	r2, [pc, #164]	; (8004860 <HAL_DMA_IRQHandler+0x698>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d040      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a28      	ldr	r2, [pc, #160]	; (8004864 <HAL_DMA_IRQHandler+0x69c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d03b      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a26      	ldr	r2, [pc, #152]	; (8004868 <HAL_DMA_IRQHandler+0x6a0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d036      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a25      	ldr	r2, [pc, #148]	; (800486c <HAL_DMA_IRQHandler+0x6a4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d031      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a23      	ldr	r2, [pc, #140]	; (8004870 <HAL_DMA_IRQHandler+0x6a8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d02c      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a22      	ldr	r2, [pc, #136]	; (8004874 <HAL_DMA_IRQHandler+0x6ac>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d027      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a20      	ldr	r2, [pc, #128]	; (8004878 <HAL_DMA_IRQHandler+0x6b0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d022      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1f      	ldr	r2, [pc, #124]	; (800487c <HAL_DMA_IRQHandler+0x6b4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d01d      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <HAL_DMA_IRQHandler+0x6b8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d018      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <HAL_DMA_IRQHandler+0x6bc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <HAL_DMA_IRQHandler+0x6c0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00e      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_DMA_IRQHandler+0x6c4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d009      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a17      	ldr	r2, [pc, #92]	; (8004890 <HAL_DMA_IRQHandler+0x6c8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <HAL_DMA_IRQHandler+0x678>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a16      	ldr	r2, [pc, #88]	; (8004894 <HAL_DMA_IRQHandler+0x6cc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d12b      	bne.n	8004898 <HAL_DMA_IRQHandler+0x6d0>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	2b00      	cmp	r3, #0
 800484c:	bf14      	ite	ne
 800484e:	2301      	movne	r3, #1
 8004850:	2300      	moveq	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	e02a      	b.n	80048ac <HAL_DMA_IRQHandler+0x6e4>
 8004856:	bf00      	nop
 8004858:	40020010 	.word	0x40020010
 800485c:	40020028 	.word	0x40020028
 8004860:	40020040 	.word	0x40020040
 8004864:	40020058 	.word	0x40020058
 8004868:	40020070 	.word	0x40020070
 800486c:	40020088 	.word	0x40020088
 8004870:	400200a0 	.word	0x400200a0
 8004874:	400200b8 	.word	0x400200b8
 8004878:	40020410 	.word	0x40020410
 800487c:	40020428 	.word	0x40020428
 8004880:	40020440 	.word	0x40020440
 8004884:	40020458 	.word	0x40020458
 8004888:	40020470 	.word	0x40020470
 800488c:	40020488 	.word	0x40020488
 8004890:	400204a0 	.word	0x400204a0
 8004894:	400204b8 	.word	0x400204b8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf14      	ite	ne
 80048a6:	2301      	movne	r3, #1
 80048a8:	2300      	moveq	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8087 	beq.w	80049c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2220      	movs	r2, #32
 80048bc:	409a      	lsls	r2, r3
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d139      	bne.n	8004942 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0216 	bic.w	r2, r2, #22
 80048dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695a      	ldr	r2, [r3, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d103      	bne.n	80048fe <HAL_DMA_IRQHandler+0x736>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0208 	bic.w	r2, r2, #8
 800490c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	223f      	movs	r2, #63	; 0x3f
 8004918:	409a      	lsls	r2, r3
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 834a 	beq.w	8004fcc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
          }
          return;
 8004940:	e344      	b.n	8004fcc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d018      	beq.n	8004982 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	2b00      	cmp	r3, #0
 8004964:	d02c      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4798      	blx	r3
 800496e:	e027      	b.n	80049c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d023      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
 8004980:	e01e      	b.n	80049c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10f      	bne.n	80049b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0210 	bic.w	r2, r2, #16
 800499e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8306 	beq.w	8004fd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8088 	beq.w	8004ae8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2204      	movs	r2, #4
 80049dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a7a      	ldr	r2, [pc, #488]	; (8004bd0 <HAL_DMA_IRQHandler+0xa08>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d04a      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a79      	ldr	r2, [pc, #484]	; (8004bd4 <HAL_DMA_IRQHandler+0xa0c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d045      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a77      	ldr	r2, [pc, #476]	; (8004bd8 <HAL_DMA_IRQHandler+0xa10>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d040      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a76      	ldr	r2, [pc, #472]	; (8004bdc <HAL_DMA_IRQHandler+0xa14>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d03b      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a74      	ldr	r2, [pc, #464]	; (8004be0 <HAL_DMA_IRQHandler+0xa18>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d036      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a73      	ldr	r2, [pc, #460]	; (8004be4 <HAL_DMA_IRQHandler+0xa1c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d031      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a71      	ldr	r2, [pc, #452]	; (8004be8 <HAL_DMA_IRQHandler+0xa20>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02c      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a70      	ldr	r2, [pc, #448]	; (8004bec <HAL_DMA_IRQHandler+0xa24>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d027      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a6e      	ldr	r2, [pc, #440]	; (8004bf0 <HAL_DMA_IRQHandler+0xa28>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6d      	ldr	r2, [pc, #436]	; (8004bf4 <HAL_DMA_IRQHandler+0xa2c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01d      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6b      	ldr	r2, [pc, #428]	; (8004bf8 <HAL_DMA_IRQHandler+0xa30>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6a      	ldr	r2, [pc, #424]	; (8004bfc <HAL_DMA_IRQHandler+0xa34>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a68      	ldr	r2, [pc, #416]	; (8004c00 <HAL_DMA_IRQHandler+0xa38>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a67      	ldr	r2, [pc, #412]	; (8004c04 <HAL_DMA_IRQHandler+0xa3c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a65      	ldr	r2, [pc, #404]	; (8004c08 <HAL_DMA_IRQHandler+0xa40>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x8b8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a64      	ldr	r2, [pc, #400]	; (8004c0c <HAL_DMA_IRQHandler+0xa44>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d108      	bne.n	8004a92 <HAL_DMA_IRQHandler+0x8ca>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e007      	b.n	8004aa2 <HAL_DMA_IRQHandler+0x8da>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d307      	bcc.n	8004abe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f2      	bne.n	8004aa2 <HAL_DMA_IRQHandler+0x8da>
 8004abc:	e000      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004abe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004ad6:	e003      	b.n	8004ae0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8272 	beq.w	8004fd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
 8004afa:	e26c      	b.n	8004fd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a43      	ldr	r2, [pc, #268]	; (8004c10 <HAL_DMA_IRQHandler+0xa48>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d022      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x984>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a42      	ldr	r2, [pc, #264]	; (8004c14 <HAL_DMA_IRQHandler+0xa4c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d01d      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x984>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a40      	ldr	r2, [pc, #256]	; (8004c18 <HAL_DMA_IRQHandler+0xa50>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d018      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x984>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a3f      	ldr	r2, [pc, #252]	; (8004c1c <HAL_DMA_IRQHandler+0xa54>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d013      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x984>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a3d      	ldr	r2, [pc, #244]	; (8004c20 <HAL_DMA_IRQHandler+0xa58>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00e      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x984>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a3c      	ldr	r2, [pc, #240]	; (8004c24 <HAL_DMA_IRQHandler+0xa5c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d009      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x984>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a3a      	ldr	r2, [pc, #232]	; (8004c28 <HAL_DMA_IRQHandler+0xa60>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d004      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x984>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a39      	ldr	r2, [pc, #228]	; (8004c2c <HAL_DMA_IRQHandler+0xa64>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d101      	bne.n	8004b50 <HAL_DMA_IRQHandler+0x988>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <HAL_DMA_IRQHandler+0x98a>
 8004b50:	2300      	movs	r3, #0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 823f 	beq.w	8004fd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	2204      	movs	r2, #4
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80cd 	beq.w	8004d10 <HAL_DMA_IRQHandler+0xb48>
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80c7 	beq.w	8004d10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d049      	beq.n	8004c30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8210 	beq.w	8004fd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bb8:	e20a      	b.n	8004fd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 8206 	beq.w	8004fd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bcc:	e200      	b.n	8004fd0 <HAL_DMA_IRQHandler+0xe08>
 8004bce:	bf00      	nop
 8004bd0:	40020010 	.word	0x40020010
 8004bd4:	40020028 	.word	0x40020028
 8004bd8:	40020040 	.word	0x40020040
 8004bdc:	40020058 	.word	0x40020058
 8004be0:	40020070 	.word	0x40020070
 8004be4:	40020088 	.word	0x40020088
 8004be8:	400200a0 	.word	0x400200a0
 8004bec:	400200b8 	.word	0x400200b8
 8004bf0:	40020410 	.word	0x40020410
 8004bf4:	40020428 	.word	0x40020428
 8004bf8:	40020440 	.word	0x40020440
 8004bfc:	40020458 	.word	0x40020458
 8004c00:	40020470 	.word	0x40020470
 8004c04:	40020488 	.word	0x40020488
 8004c08:	400204a0 	.word	0x400204a0
 8004c0c:	400204b8 	.word	0x400204b8
 8004c10:	58025408 	.word	0x58025408
 8004c14:	5802541c 	.word	0x5802541c
 8004c18:	58025430 	.word	0x58025430
 8004c1c:	58025444 	.word	0x58025444
 8004c20:	58025458 	.word	0x58025458
 8004c24:	5802546c 	.word	0x5802546c
 8004c28:	58025480 	.word	0x58025480
 8004c2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d160      	bne.n	8004cfc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a7f      	ldr	r2, [pc, #508]	; (8004e3c <HAL_DMA_IRQHandler+0xc74>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d04a      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a7d      	ldr	r2, [pc, #500]	; (8004e40 <HAL_DMA_IRQHandler+0xc78>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d045      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a7c      	ldr	r2, [pc, #496]	; (8004e44 <HAL_DMA_IRQHandler+0xc7c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d040      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a7a      	ldr	r2, [pc, #488]	; (8004e48 <HAL_DMA_IRQHandler+0xc80>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d03b      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a79      	ldr	r2, [pc, #484]	; (8004e4c <HAL_DMA_IRQHandler+0xc84>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d036      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a77      	ldr	r2, [pc, #476]	; (8004e50 <HAL_DMA_IRQHandler+0xc88>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d031      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a76      	ldr	r2, [pc, #472]	; (8004e54 <HAL_DMA_IRQHandler+0xc8c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d02c      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a74      	ldr	r2, [pc, #464]	; (8004e58 <HAL_DMA_IRQHandler+0xc90>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d027      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a73      	ldr	r2, [pc, #460]	; (8004e5c <HAL_DMA_IRQHandler+0xc94>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a71      	ldr	r2, [pc, #452]	; (8004e60 <HAL_DMA_IRQHandler+0xc98>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01d      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a70      	ldr	r2, [pc, #448]	; (8004e64 <HAL_DMA_IRQHandler+0xc9c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d018      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a6e      	ldr	r2, [pc, #440]	; (8004e68 <HAL_DMA_IRQHandler+0xca0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a6d      	ldr	r2, [pc, #436]	; (8004e6c <HAL_DMA_IRQHandler+0xca4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00e      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a6b      	ldr	r2, [pc, #428]	; (8004e70 <HAL_DMA_IRQHandler+0xca8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d009      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a6a      	ldr	r2, [pc, #424]	; (8004e74 <HAL_DMA_IRQHandler+0xcac>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d004      	beq.n	8004cda <HAL_DMA_IRQHandler+0xb12>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a68      	ldr	r2, [pc, #416]	; (8004e78 <HAL_DMA_IRQHandler+0xcb0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d108      	bne.n	8004cec <HAL_DMA_IRQHandler+0xb24>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0208 	bic.w	r2, r2, #8
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e007      	b.n	8004cfc <HAL_DMA_IRQHandler+0xb34>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0204 	bic.w	r2, r2, #4
 8004cfa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8165 	beq.w	8004fd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d0e:	e15f      	b.n	8004fd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	2202      	movs	r2, #2
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80c5 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0xce8>
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80bf 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 813a 	beq.w	8004fd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d68:	e134      	b.n	8004fd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 8130 	beq.w	8004fd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d7c:	e12a      	b.n	8004fd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f040 8089 	bne.w	8004e9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2b      	ldr	r2, [pc, #172]	; (8004e3c <HAL_DMA_IRQHandler+0xc74>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d04a      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <HAL_DMA_IRQHandler+0xc78>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d045      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a28      	ldr	r2, [pc, #160]	; (8004e44 <HAL_DMA_IRQHandler+0xc7c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d040      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <HAL_DMA_IRQHandler+0xc80>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d03b      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a25      	ldr	r2, [pc, #148]	; (8004e4c <HAL_DMA_IRQHandler+0xc84>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d036      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <HAL_DMA_IRQHandler+0xc88>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d031      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <HAL_DMA_IRQHandler+0xc8c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d02c      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <HAL_DMA_IRQHandler+0xc90>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d027      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <HAL_DMA_IRQHandler+0xc94>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <HAL_DMA_IRQHandler+0xc98>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <HAL_DMA_IRQHandler+0xc9c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1a      	ldr	r2, [pc, #104]	; (8004e68 <HAL_DMA_IRQHandler+0xca0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <HAL_DMA_IRQHandler+0xca4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <HAL_DMA_IRQHandler+0xca8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <HAL_DMA_IRQHandler+0xcac>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_DMA_IRQHandler+0xc62>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a14      	ldr	r2, [pc, #80]	; (8004e78 <HAL_DMA_IRQHandler+0xcb0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d128      	bne.n	8004e7c <HAL_DMA_IRQHandler+0xcb4>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0214 	bic.w	r2, r2, #20
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e027      	b.n	8004e8c <HAL_DMA_IRQHandler+0xcc4>
 8004e3c:	40020010 	.word	0x40020010
 8004e40:	40020028 	.word	0x40020028
 8004e44:	40020040 	.word	0x40020040
 8004e48:	40020058 	.word	0x40020058
 8004e4c:	40020070 	.word	0x40020070
 8004e50:	40020088 	.word	0x40020088
 8004e54:	400200a0 	.word	0x400200a0
 8004e58:	400200b8 	.word	0x400200b8
 8004e5c:	40020410 	.word	0x40020410
 8004e60:	40020428 	.word	0x40020428
 8004e64:	40020440 	.word	0x40020440
 8004e68:	40020458 	.word	0x40020458
 8004e6c:	40020470 	.word	0x40020470
 8004e70:	40020488 	.word	0x40020488
 8004e74:	400204a0 	.word	0x400204a0
 8004e78:	400204b8 	.word	0x400204b8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 020a 	bic.w	r2, r2, #10
 8004e8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8097 	beq.w	8004fd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eae:	e091      	b.n	8004fd4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2208      	movs	r2, #8
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8088 	beq.w	8004fd6 <HAL_DMA_IRQHandler+0xe0e>
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8082 	beq.w	8004fd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a41      	ldr	r2, [pc, #260]	; (8004fdc <HAL_DMA_IRQHandler+0xe14>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d04a      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a3f      	ldr	r2, [pc, #252]	; (8004fe0 <HAL_DMA_IRQHandler+0xe18>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d045      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a3e      	ldr	r2, [pc, #248]	; (8004fe4 <HAL_DMA_IRQHandler+0xe1c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d040      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a3c      	ldr	r2, [pc, #240]	; (8004fe8 <HAL_DMA_IRQHandler+0xe20>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d03b      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a3b      	ldr	r2, [pc, #236]	; (8004fec <HAL_DMA_IRQHandler+0xe24>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d036      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a39      	ldr	r2, [pc, #228]	; (8004ff0 <HAL_DMA_IRQHandler+0xe28>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d031      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a38      	ldr	r2, [pc, #224]	; (8004ff4 <HAL_DMA_IRQHandler+0xe2c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d02c      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a36      	ldr	r2, [pc, #216]	; (8004ff8 <HAL_DMA_IRQHandler+0xe30>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d027      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a35      	ldr	r2, [pc, #212]	; (8004ffc <HAL_DMA_IRQHandler+0xe34>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d022      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a33      	ldr	r2, [pc, #204]	; (8005000 <HAL_DMA_IRQHandler+0xe38>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01d      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a32      	ldr	r2, [pc, #200]	; (8005004 <HAL_DMA_IRQHandler+0xe3c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d018      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a30      	ldr	r2, [pc, #192]	; (8005008 <HAL_DMA_IRQHandler+0xe40>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2f      	ldr	r2, [pc, #188]	; (800500c <HAL_DMA_IRQHandler+0xe44>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00e      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2d      	ldr	r2, [pc, #180]	; (8005010 <HAL_DMA_IRQHandler+0xe48>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <HAL_DMA_IRQHandler+0xe4c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_DMA_IRQHandler+0xdaa>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2a      	ldr	r2, [pc, #168]	; (8005018 <HAL_DMA_IRQHandler+0xe50>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d108      	bne.n	8004f84 <HAL_DMA_IRQHandler+0xdbc>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 021c 	bic.w	r2, r2, #28
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e007      	b.n	8004f94 <HAL_DMA_IRQHandler+0xdcc>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 020e 	bic.w	r2, r2, #14
 8004f92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
 8004fca:	e004      	b.n	8004fd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004fcc:	bf00      	nop
 8004fce:	e002      	b.n	8004fd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fd0:	bf00      	nop
 8004fd2:	e000      	b.n	8004fd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004fd6:	3728      	adds	r7, #40	; 0x28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40020010 	.word	0x40020010
 8004fe0:	40020028 	.word	0x40020028
 8004fe4:	40020040 	.word	0x40020040
 8004fe8:	40020058 	.word	0x40020058
 8004fec:	40020070 	.word	0x40020070
 8004ff0:	40020088 	.word	0x40020088
 8004ff4:	400200a0 	.word	0x400200a0
 8004ff8:	400200b8 	.word	0x400200b8
 8004ffc:	40020410 	.word	0x40020410
 8005000:	40020428 	.word	0x40020428
 8005004:	40020440 	.word	0x40020440
 8005008:	40020458 	.word	0x40020458
 800500c:	40020470 	.word	0x40020470
 8005010:	40020488 	.word	0x40020488
 8005014:	400204a0 	.word	0x400204a0
 8005018:	400204b8 	.word	0x400204b8

0800501c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a7f      	ldr	r2, [pc, #508]	; (8005250 <DMA_SetConfig+0x21c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d072      	beq.n	800513e <DMA_SetConfig+0x10a>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a7d      	ldr	r2, [pc, #500]	; (8005254 <DMA_SetConfig+0x220>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d06d      	beq.n	800513e <DMA_SetConfig+0x10a>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a7c      	ldr	r2, [pc, #496]	; (8005258 <DMA_SetConfig+0x224>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d068      	beq.n	800513e <DMA_SetConfig+0x10a>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a7a      	ldr	r2, [pc, #488]	; (800525c <DMA_SetConfig+0x228>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d063      	beq.n	800513e <DMA_SetConfig+0x10a>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a79      	ldr	r2, [pc, #484]	; (8005260 <DMA_SetConfig+0x22c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d05e      	beq.n	800513e <DMA_SetConfig+0x10a>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a77      	ldr	r2, [pc, #476]	; (8005264 <DMA_SetConfig+0x230>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d059      	beq.n	800513e <DMA_SetConfig+0x10a>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a76      	ldr	r2, [pc, #472]	; (8005268 <DMA_SetConfig+0x234>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d054      	beq.n	800513e <DMA_SetConfig+0x10a>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a74      	ldr	r2, [pc, #464]	; (800526c <DMA_SetConfig+0x238>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d04f      	beq.n	800513e <DMA_SetConfig+0x10a>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a73      	ldr	r2, [pc, #460]	; (8005270 <DMA_SetConfig+0x23c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d04a      	beq.n	800513e <DMA_SetConfig+0x10a>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a71      	ldr	r2, [pc, #452]	; (8005274 <DMA_SetConfig+0x240>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d045      	beq.n	800513e <DMA_SetConfig+0x10a>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a70      	ldr	r2, [pc, #448]	; (8005278 <DMA_SetConfig+0x244>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d040      	beq.n	800513e <DMA_SetConfig+0x10a>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a6e      	ldr	r2, [pc, #440]	; (800527c <DMA_SetConfig+0x248>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d03b      	beq.n	800513e <DMA_SetConfig+0x10a>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a6d      	ldr	r2, [pc, #436]	; (8005280 <DMA_SetConfig+0x24c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d036      	beq.n	800513e <DMA_SetConfig+0x10a>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a6b      	ldr	r2, [pc, #428]	; (8005284 <DMA_SetConfig+0x250>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d031      	beq.n	800513e <DMA_SetConfig+0x10a>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a6a      	ldr	r2, [pc, #424]	; (8005288 <DMA_SetConfig+0x254>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d02c      	beq.n	800513e <DMA_SetConfig+0x10a>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a68      	ldr	r2, [pc, #416]	; (800528c <DMA_SetConfig+0x258>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d027      	beq.n	800513e <DMA_SetConfig+0x10a>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a67      	ldr	r2, [pc, #412]	; (8005290 <DMA_SetConfig+0x25c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d022      	beq.n	800513e <DMA_SetConfig+0x10a>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a65      	ldr	r2, [pc, #404]	; (8005294 <DMA_SetConfig+0x260>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d01d      	beq.n	800513e <DMA_SetConfig+0x10a>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a64      	ldr	r2, [pc, #400]	; (8005298 <DMA_SetConfig+0x264>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d018      	beq.n	800513e <DMA_SetConfig+0x10a>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a62      	ldr	r2, [pc, #392]	; (800529c <DMA_SetConfig+0x268>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <DMA_SetConfig+0x10a>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a61      	ldr	r2, [pc, #388]	; (80052a0 <DMA_SetConfig+0x26c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00e      	beq.n	800513e <DMA_SetConfig+0x10a>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a5f      	ldr	r2, [pc, #380]	; (80052a4 <DMA_SetConfig+0x270>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d009      	beq.n	800513e <DMA_SetConfig+0x10a>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a5e      	ldr	r2, [pc, #376]	; (80052a8 <DMA_SetConfig+0x274>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <DMA_SetConfig+0x10a>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a5c      	ldr	r2, [pc, #368]	; (80052ac <DMA_SetConfig+0x278>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d101      	bne.n	8005142 <DMA_SetConfig+0x10e>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <DMA_SetConfig+0x110>
 8005142:	2300      	movs	r3, #0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00d      	beq.n	8005164 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005150:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005162:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a39      	ldr	r2, [pc, #228]	; (8005250 <DMA_SetConfig+0x21c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d04a      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a38      	ldr	r2, [pc, #224]	; (8005254 <DMA_SetConfig+0x220>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d045      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a36      	ldr	r2, [pc, #216]	; (8005258 <DMA_SetConfig+0x224>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d040      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a35      	ldr	r2, [pc, #212]	; (800525c <DMA_SetConfig+0x228>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d03b      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a33      	ldr	r2, [pc, #204]	; (8005260 <DMA_SetConfig+0x22c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d036      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a32      	ldr	r2, [pc, #200]	; (8005264 <DMA_SetConfig+0x230>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d031      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a30      	ldr	r2, [pc, #192]	; (8005268 <DMA_SetConfig+0x234>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d02c      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2f      	ldr	r2, [pc, #188]	; (800526c <DMA_SetConfig+0x238>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d027      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2d      	ldr	r2, [pc, #180]	; (8005270 <DMA_SetConfig+0x23c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d022      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a2c      	ldr	r2, [pc, #176]	; (8005274 <DMA_SetConfig+0x240>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d01d      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2a      	ldr	r2, [pc, #168]	; (8005278 <DMA_SetConfig+0x244>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d018      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a29      	ldr	r2, [pc, #164]	; (800527c <DMA_SetConfig+0x248>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a27      	ldr	r2, [pc, #156]	; (8005280 <DMA_SetConfig+0x24c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00e      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a26      	ldr	r2, [pc, #152]	; (8005284 <DMA_SetConfig+0x250>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d009      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a24      	ldr	r2, [pc, #144]	; (8005288 <DMA_SetConfig+0x254>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <DMA_SetConfig+0x1d0>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a23      	ldr	r2, [pc, #140]	; (800528c <DMA_SetConfig+0x258>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d101      	bne.n	8005208 <DMA_SetConfig+0x1d4>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <DMA_SetConfig+0x1d6>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d059      	beq.n	80052c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	223f      	movs	r2, #63	; 0x3f
 8005218:	409a      	lsls	r2, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800522c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	d138      	bne.n	80052b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800524e:	e086      	b.n	800535e <DMA_SetConfig+0x32a>
 8005250:	40020010 	.word	0x40020010
 8005254:	40020028 	.word	0x40020028
 8005258:	40020040 	.word	0x40020040
 800525c:	40020058 	.word	0x40020058
 8005260:	40020070 	.word	0x40020070
 8005264:	40020088 	.word	0x40020088
 8005268:	400200a0 	.word	0x400200a0
 800526c:	400200b8 	.word	0x400200b8
 8005270:	40020410 	.word	0x40020410
 8005274:	40020428 	.word	0x40020428
 8005278:	40020440 	.word	0x40020440
 800527c:	40020458 	.word	0x40020458
 8005280:	40020470 	.word	0x40020470
 8005284:	40020488 	.word	0x40020488
 8005288:	400204a0 	.word	0x400204a0
 800528c:	400204b8 	.word	0x400204b8
 8005290:	58025408 	.word	0x58025408
 8005294:	5802541c 	.word	0x5802541c
 8005298:	58025430 	.word	0x58025430
 800529c:	58025444 	.word	0x58025444
 80052a0:	58025458 	.word	0x58025458
 80052a4:	5802546c 	.word	0x5802546c
 80052a8:	58025480 	.word	0x58025480
 80052ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
}
 80052c0:	e04d      	b.n	800535e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a29      	ldr	r2, [pc, #164]	; (800536c <DMA_SetConfig+0x338>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d022      	beq.n	8005312 <DMA_SetConfig+0x2de>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a27      	ldr	r2, [pc, #156]	; (8005370 <DMA_SetConfig+0x33c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01d      	beq.n	8005312 <DMA_SetConfig+0x2de>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a26      	ldr	r2, [pc, #152]	; (8005374 <DMA_SetConfig+0x340>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d018      	beq.n	8005312 <DMA_SetConfig+0x2de>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a24      	ldr	r2, [pc, #144]	; (8005378 <DMA_SetConfig+0x344>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <DMA_SetConfig+0x2de>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a23      	ldr	r2, [pc, #140]	; (800537c <DMA_SetConfig+0x348>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00e      	beq.n	8005312 <DMA_SetConfig+0x2de>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a21      	ldr	r2, [pc, #132]	; (8005380 <DMA_SetConfig+0x34c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d009      	beq.n	8005312 <DMA_SetConfig+0x2de>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a20      	ldr	r2, [pc, #128]	; (8005384 <DMA_SetConfig+0x350>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <DMA_SetConfig+0x2de>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <DMA_SetConfig+0x354>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <DMA_SetConfig+0x2e2>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <DMA_SetConfig+0x2e4>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d020      	beq.n	800535e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	2201      	movs	r2, #1
 8005326:	409a      	lsls	r2, r3
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d108      	bne.n	800534e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	60da      	str	r2, [r3, #12]
}
 800534c:	e007      	b.n	800535e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	58025408 	.word	0x58025408
 8005370:	5802541c 	.word	0x5802541c
 8005374:	58025430 	.word	0x58025430
 8005378:	58025444 	.word	0x58025444
 800537c:	58025458 	.word	0x58025458
 8005380:	5802546c 	.word	0x5802546c
 8005384:	58025480 	.word	0x58025480
 8005388:	58025494 	.word	0x58025494

0800538c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a42      	ldr	r2, [pc, #264]	; (80054a4 <DMA_CalcBaseAndBitshift+0x118>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d04a      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a41      	ldr	r2, [pc, #260]	; (80054a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d045      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a3f      	ldr	r2, [pc, #252]	; (80054ac <DMA_CalcBaseAndBitshift+0x120>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d040      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a3e      	ldr	r2, [pc, #248]	; (80054b0 <DMA_CalcBaseAndBitshift+0x124>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d03b      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a3c      	ldr	r2, [pc, #240]	; (80054b4 <DMA_CalcBaseAndBitshift+0x128>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d036      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3b      	ldr	r2, [pc, #236]	; (80054b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d031      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a39      	ldr	r2, [pc, #228]	; (80054bc <DMA_CalcBaseAndBitshift+0x130>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02c      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a38      	ldr	r2, [pc, #224]	; (80054c0 <DMA_CalcBaseAndBitshift+0x134>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d027      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a36      	ldr	r2, [pc, #216]	; (80054c4 <DMA_CalcBaseAndBitshift+0x138>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a35      	ldr	r2, [pc, #212]	; (80054c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d01d      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a33      	ldr	r2, [pc, #204]	; (80054cc <DMA_CalcBaseAndBitshift+0x140>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a32      	ldr	r2, [pc, #200]	; (80054d0 <DMA_CalcBaseAndBitshift+0x144>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a30      	ldr	r2, [pc, #192]	; (80054d4 <DMA_CalcBaseAndBitshift+0x148>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2f      	ldr	r2, [pc, #188]	; (80054d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a2d      	ldr	r2, [pc, #180]	; (80054dc <DMA_CalcBaseAndBitshift+0x150>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <DMA_CalcBaseAndBitshift+0xa8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a2c      	ldr	r2, [pc, #176]	; (80054e0 <DMA_CalcBaseAndBitshift+0x154>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d101      	bne.n	8005438 <DMA_CalcBaseAndBitshift+0xac>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <DMA_CalcBaseAndBitshift+0xae>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d024      	beq.n	8005488 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	3b10      	subs	r3, #16
 8005446:	4a27      	ldr	r2, [pc, #156]	; (80054e4 <DMA_CalcBaseAndBitshift+0x158>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	091b      	lsrs	r3, r3, #4
 800544e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	4a24      	ldr	r2, [pc, #144]	; (80054e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005458:	5cd3      	ldrb	r3, [r2, r3]
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b03      	cmp	r3, #3
 8005464:	d908      	bls.n	8005478 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	4b1f      	ldr	r3, [pc, #124]	; (80054ec <DMA_CalcBaseAndBitshift+0x160>)
 800546e:	4013      	ands	r3, r2
 8005470:	1d1a      	adds	r2, r3, #4
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	659a      	str	r2, [r3, #88]	; 0x58
 8005476:	e00d      	b.n	8005494 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <DMA_CalcBaseAndBitshift+0x160>)
 8005480:	4013      	ands	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6593      	str	r3, [r2, #88]	; 0x58
 8005486:	e005      	b.n	8005494 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	40020010 	.word	0x40020010
 80054a8:	40020028 	.word	0x40020028
 80054ac:	40020040 	.word	0x40020040
 80054b0:	40020058 	.word	0x40020058
 80054b4:	40020070 	.word	0x40020070
 80054b8:	40020088 	.word	0x40020088
 80054bc:	400200a0 	.word	0x400200a0
 80054c0:	400200b8 	.word	0x400200b8
 80054c4:	40020410 	.word	0x40020410
 80054c8:	40020428 	.word	0x40020428
 80054cc:	40020440 	.word	0x40020440
 80054d0:	40020458 	.word	0x40020458
 80054d4:	40020470 	.word	0x40020470
 80054d8:	40020488 	.word	0x40020488
 80054dc:	400204a0 	.word	0x400204a0
 80054e0:	400204b8 	.word	0x400204b8
 80054e4:	aaaaaaab 	.word	0xaaaaaaab
 80054e8:	0800cae0 	.word	0x0800cae0
 80054ec:	fffffc00 	.word	0xfffffc00

080054f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d120      	bne.n	8005546 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005508:	2b03      	cmp	r3, #3
 800550a:	d858      	bhi.n	80055be <DMA_CheckFifoParam+0xce>
 800550c:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <DMA_CheckFifoParam+0x24>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	08005525 	.word	0x08005525
 8005518:	08005537 	.word	0x08005537
 800551c:	08005525 	.word	0x08005525
 8005520:	080055bf 	.word	0x080055bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d048      	beq.n	80055c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005534:	e045      	b.n	80055c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800553e:	d142      	bne.n	80055c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005544:	e03f      	b.n	80055c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554e:	d123      	bne.n	8005598 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	2b03      	cmp	r3, #3
 8005556:	d838      	bhi.n	80055ca <DMA_CheckFifoParam+0xda>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <DMA_CheckFifoParam+0x70>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	08005571 	.word	0x08005571
 8005564:	08005577 	.word	0x08005577
 8005568:	08005571 	.word	0x08005571
 800556c:	08005589 	.word	0x08005589
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
        break;
 8005574:	e030      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d025      	beq.n	80055ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005586:	e022      	b.n	80055ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005590:	d11f      	bne.n	80055d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005596:	e01c      	b.n	80055d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	2b02      	cmp	r3, #2
 800559e:	d902      	bls.n	80055a6 <DMA_CheckFifoParam+0xb6>
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d003      	beq.n	80055ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80055a4:	e018      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
        break;
 80055aa:	e015      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00e      	beq.n	80055d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
    break;
 80055bc:	e00b      	b.n	80055d6 <DMA_CheckFifoParam+0xe6>
        break;
 80055be:	bf00      	nop
 80055c0:	e00a      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
        break;
 80055c2:	bf00      	nop
 80055c4:	e008      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
        break;
 80055c6:	bf00      	nop
 80055c8:	e006      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
        break;
 80055ca:	bf00      	nop
 80055cc:	e004      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
        break;
 80055ce:	bf00      	nop
 80055d0:	e002      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
        break;
 80055d2:	bf00      	nop
 80055d4:	e000      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
    break;
 80055d6:	bf00      	nop
    }
  }

  return status;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop

080055e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a38      	ldr	r2, [pc, #224]	; (80056dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d022      	beq.n	8005646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a36      	ldr	r2, [pc, #216]	; (80056e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d01d      	beq.n	8005646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a35      	ldr	r2, [pc, #212]	; (80056e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d018      	beq.n	8005646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a33      	ldr	r2, [pc, #204]	; (80056e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d013      	beq.n	8005646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a32      	ldr	r2, [pc, #200]	; (80056ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00e      	beq.n	8005646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a30      	ldr	r2, [pc, #192]	; (80056f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d009      	beq.n	8005646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2f      	ldr	r2, [pc, #188]	; (80056f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2d      	ldr	r2, [pc, #180]	; (80056f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d101      	bne.n	800564a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800564a:	2300      	movs	r3, #0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01a      	beq.n	8005686 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	3b08      	subs	r3, #8
 8005658:	4a28      	ldr	r2, [pc, #160]	; (80056fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4b26      	ldr	r3, [pc, #152]	; (8005700 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	461a      	mov	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a24      	ldr	r2, [pc, #144]	; (8005704 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005674:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	2201      	movs	r2, #1
 800567e:	409a      	lsls	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005684:	e024      	b.n	80056d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	b2db      	uxtb	r3, r3
 800568c:	3b10      	subs	r3, #16
 800568e:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4a1c      	ldr	r2, [pc, #112]	; (800570c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d806      	bhi.n	80056ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d902      	bls.n	80056ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3308      	adds	r3, #8
 80056ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4b18      	ldr	r3, [pc, #96]	; (8005714 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	461a      	mov	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a16      	ldr	r2, [pc, #88]	; (8005718 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80056c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	2201      	movs	r2, #1
 80056ca:	409a      	lsls	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	58025408 	.word	0x58025408
 80056e0:	5802541c 	.word	0x5802541c
 80056e4:	58025430 	.word	0x58025430
 80056e8:	58025444 	.word	0x58025444
 80056ec:	58025458 	.word	0x58025458
 80056f0:	5802546c 	.word	0x5802546c
 80056f4:	58025480 	.word	0x58025480
 80056f8:	58025494 	.word	0x58025494
 80056fc:	cccccccd 	.word	0xcccccccd
 8005700:	16009600 	.word	0x16009600
 8005704:	58025880 	.word	0x58025880
 8005708:	aaaaaaab 	.word	0xaaaaaaab
 800570c:	400204b8 	.word	0x400204b8
 8005710:	4002040f 	.word	0x4002040f
 8005714:	10008200 	.word	0x10008200
 8005718:	40020880 	.word	0x40020880

0800571c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d04a      	beq.n	80057c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d847      	bhi.n	80057c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a25      	ldr	r2, [pc, #148]	; (80057d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d022      	beq.n	8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a24      	ldr	r2, [pc, #144]	; (80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d01d      	beq.n	8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a22      	ldr	r2, [pc, #136]	; (80057dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a21      	ldr	r2, [pc, #132]	; (80057e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d101      	bne.n	800578c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800578c:	2300      	movs	r3, #0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	461a      	mov	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80057a4:	671a      	str	r2, [r3, #112]	; 0x70
 80057a6:	e009      	b.n	80057bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4b14      	ldr	r3, [pc, #80]	; (80057fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	461a      	mov	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a11      	ldr	r2, [pc, #68]	; (8005800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80057ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3b01      	subs	r3, #1
 80057c0:	2201      	movs	r2, #1
 80057c2:	409a      	lsls	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	58025408 	.word	0x58025408
 80057d8:	5802541c 	.word	0x5802541c
 80057dc:	58025430 	.word	0x58025430
 80057e0:	58025444 	.word	0x58025444
 80057e4:	58025458 	.word	0x58025458
 80057e8:	5802546c 	.word	0x5802546c
 80057ec:	58025480 	.word	0x58025480
 80057f0:	58025494 	.word	0x58025494
 80057f4:	1600963f 	.word	0x1600963f
 80057f8:	58025940 	.word	0x58025940
 80057fc:	1000823f 	.word	0x1000823f
 8005800:	40020940 	.word	0x40020940

08005804 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0e3      	b.n	80059de <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2223      	movs	r2, #35	; 0x23
 8005824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fc f823 	bl	8001874 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800582e:	4b6e      	ldr	r3, [pc, #440]	; (80059e8 <HAL_ETH_Init+0x1e4>)
 8005830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005834:	4a6c      	ldr	r2, [pc, #432]	; (80059e8 <HAL_ETH_Init+0x1e4>)
 8005836:	f043 0302 	orr.w	r3, r3, #2
 800583a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800583e:	4b6a      	ldr	r3, [pc, #424]	; (80059e8 <HAL_ETH_Init+0x1e4>)
 8005840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	7a1b      	ldrb	r3, [r3, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005854:	2000      	movs	r0, #0
 8005856:	f7fd f86d 	bl	8002934 <HAL_SYSCFG_ETHInterfaceSelect>
 800585a:	e003      	b.n	8005864 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800585c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005860:	f7fd f868 	bl	8002934 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005864:	4b61      	ldr	r3, [pc, #388]	; (80059ec <HAL_ETH_Init+0x1e8>)
 8005866:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800587e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005880:	f7fd f84c 	bl	800291c <HAL_GetTick>
 8005884:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005886:	e011      	b.n	80058ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005888:	f7fd f848 	bl	800291c <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005896:	d909      	bls.n	80058ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2204      	movs	r2, #4
 800589c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	22e0      	movs	r2, #224	; 0xe0
 80058a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e098      	b.n	80059de <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e4      	bne.n	8005888 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f89e 	bl	8005a00 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80058c4:	f001 fcf2 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 80058c8:	4603      	mov	r3, r0
 80058ca:	4a49      	ldr	r2, [pc, #292]	; (80059f0 <HAL_ETH_Init+0x1ec>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	0c9a      	lsrs	r2, r3, #18
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3a01      	subs	r2, #1
 80058d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fa81 	bl	8005de4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80058ee:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058fe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	22e0      	movs	r2, #224	; 0xe0
 800591a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e05d      	b.n	80059de <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800592e:	4b31      	ldr	r3, [pc, #196]	; (80059f4 <HAL_ETH_Init+0x1f0>)
 8005930:	4013      	ands	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6952      	ldr	r2, [r2, #20]
 8005936:	0051      	lsls	r1, r2, #1
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	430b      	orrs	r3, r1
 800593e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005942:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fae9 	bl	8005f1e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fb2f 	bl	8005fb0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	3305      	adds	r3, #5
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	021a      	lsls	r2, r3, #8
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	3304      	adds	r3, #4
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	4619      	mov	r1, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	3303      	adds	r3, #3
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	061a      	lsls	r2, r3, #24
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	3302      	adds	r3, #2
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	3301      	adds	r3, #1
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005990:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800599e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80059a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <HAL_ETH_Init+0x1f4>)
 80059b2:	430b      	orrs	r3, r1
 80059b4:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <HAL_ETH_Init+0x1f8>)
 80059c6:	430b      	orrs	r3, r1
 80059c8:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2210      	movs	r2, #16
 80059d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	58024400 	.word	0x58024400
 80059ec:	58000400 	.word	0x58000400
 80059f0:	431bde83 	.word	0x431bde83
 80059f4:	ffff8001 	.word	0xffff8001
 80059f8:	0c020060 	.word	0x0c020060
 80059fc:	0c20c000 	.word	0x0c20c000

08005a00 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005a1a:	f001 fc47 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 8005a1e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4a1a      	ldr	r2, [pc, #104]	; (8005a8c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d804      	bhi.n	8005a32 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e022      	b.n	8005a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4a16      	ldr	r2, [pc, #88]	; (8005a90 <HAL_ETH_SetMDIOClockRange+0x90>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d204      	bcs.n	8005a44 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e019      	b.n	8005a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <HAL_ETH_SetMDIOClockRange+0x94>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d915      	bls.n	8005a78 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4a12      	ldr	r2, [pc, #72]	; (8005a98 <HAL_ETH_SetMDIOClockRange+0x98>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d804      	bhi.n	8005a5e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e00c      	b.n	8005a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d804      	bhi.n	8005a70 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e003      	b.n	8005a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8005a76:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005a82:	bf00      	nop
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	02160ebf 	.word	0x02160ebf
 8005a90:	03938700 	.word	0x03938700
 8005a94:	05f5e0ff 	.word	0x05f5e0ff
 8005a98:	08f0d17f 	.word	0x08f0d17f
 8005a9c:	0ee6b27f 	.word	0x0ee6b27f

08005aa0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005ab2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	791b      	ldrb	r3, [r3, #4]
 8005ab8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005aba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	7b1b      	ldrb	r3, [r3, #12]
 8005ac0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005ac2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	7b5b      	ldrb	r3, [r3, #13]
 8005ac8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005aca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	7b9b      	ldrb	r3, [r3, #14]
 8005ad0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005ad2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	7bdb      	ldrb	r3, [r3, #15]
 8005ad8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005ada:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	7c12      	ldrb	r2, [r2, #16]
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	d102      	bne.n	8005aea <ETH_SetMACConfig+0x4a>
 8005ae4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005ae8:	e000      	b.n	8005aec <ETH_SetMACConfig+0x4c>
 8005aea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005aec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	7c52      	ldrb	r2, [r2, #17]
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	d102      	bne.n	8005afc <ETH_SetMACConfig+0x5c>
 8005af6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005afa:	e000      	b.n	8005afe <ETH_SetMACConfig+0x5e>
 8005afc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005afe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	7c9b      	ldrb	r3, [r3, #18]
 8005b04:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005b06:	431a      	orrs	r2, r3
               macconf->Speed |
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005b0c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005b12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	7f1b      	ldrb	r3, [r3, #28]
 8005b18:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005b1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	7f5b      	ldrb	r3, [r3, #29]
 8005b20:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005b22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	7f92      	ldrb	r2, [r2, #30]
 8005b28:	2a00      	cmp	r2, #0
 8005b2a:	d102      	bne.n	8005b32 <ETH_SetMACConfig+0x92>
 8005b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b30:	e000      	b.n	8005b34 <ETH_SetMACConfig+0x94>
 8005b32:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005b34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	7fdb      	ldrb	r3, [r3, #31]
 8005b3a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005b3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005b44:	2a00      	cmp	r2, #0
 8005b46:	d102      	bne.n	8005b4e <ETH_SetMACConfig+0xae>
 8005b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b4c:	e000      	b.n	8005b50 <ETH_SetMACConfig+0xb0>
 8005b4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005b50:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005b56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b5e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005b60:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4b56      	ldr	r3, [pc, #344]	; (8005ccc <ETH_SetMACConfig+0x22c>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	68f9      	ldr	r1, [r7, #12]
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b82:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b8a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b94:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005b96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b9e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005ba0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005ba8:	2a00      	cmp	r2, #0
 8005baa:	d102      	bne.n	8005bb2 <ETH_SetMACConfig+0x112>
 8005bac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005bb0:	e000      	b.n	8005bb4 <ETH_SetMACConfig+0x114>
 8005bb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005bb4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	4b42      	ldr	r3, [pc, #264]	; (8005cd0 <ETH_SetMACConfig+0x230>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	68f9      	ldr	r1, [r7, #12]
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bd8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	4b3a      	ldr	r3, [pc, #232]	; (8005cd4 <ETH_SetMACConfig+0x234>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	68f9      	ldr	r1, [r7, #12]
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005bfc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005c02:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	d101      	bne.n	8005c12 <ETH_SetMACConfig+0x172>
 8005c0e:	2280      	movs	r2, #128	; 0x80
 8005c10:	e000      	b.n	8005c14 <ETH_SetMACConfig+0x174>
 8005c12:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005c14:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c26:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	430b      	orrs	r3, r1
 8005c34:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005c3c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005c44:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	f023 0103 	bic.w	r1, r3, #3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005c6a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	d101      	bne.n	8005c8e <ETH_SetMACConfig+0x1ee>
 8005c8a:	2240      	movs	r2, #64	; 0x40
 8005c8c:	e000      	b.n	8005c90 <ETH_SetMACConfig+0x1f0>
 8005c8e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005c90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005c98:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005ca2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005cb0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	00048083 	.word	0x00048083
 8005cd0:	c0f88000 	.word	0xc0f88000
 8005cd4:	fffffef0 	.word	0xfffffef0

08005cd8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	4b38      	ldr	r3, [pc, #224]	; (8005dd0 <ETH_SetDMAConfig+0xf8>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	6811      	ldr	r1, [r2, #0]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cfe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	791b      	ldrb	r3, [r3, #4]
 8005d04:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005d0a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	7b1b      	ldrb	r3, [r3, #12]
 8005d10:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	4b2c      	ldr	r3, [pc, #176]	; (8005dd4 <ETH_SetDMAConfig+0xfc>)
 8005d22:	4013      	ands	r3, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	68f9      	ldr	r1, [r7, #12]
 8005d2a:	430b      	orrs	r3, r1
 8005d2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d30:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	7b5b      	ldrb	r3, [r3, #13]
 8005d36:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d48:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005d4c:	4b22      	ldr	r3, [pc, #136]	; (8005dd8 <ETH_SetDMAConfig+0x100>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6812      	ldr	r2, [r2, #0]
 8005d54:	68f9      	ldr	r1, [r7, #12]
 8005d56:	430b      	orrs	r3, r1
 8005d58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d5c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	7d1b      	ldrb	r3, [r3, #20]
 8005d68:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d6a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	7f5b      	ldrb	r3, [r3, #29]
 8005d70:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005d82:	4b16      	ldr	r3, [pc, #88]	; (8005ddc <ETH_SetDMAConfig+0x104>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d92:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	7f1b      	ldrb	r3, [r3, #28]
 8005d9a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <ETH_SetDMAConfig+0x108>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6812      	ldr	r2, [r2, #0]
 8005db8:	68f9      	ldr	r1, [r7, #12]
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005dc0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	ffff87fd 	.word	0xffff87fd
 8005dd4:	ffff2ffe 	.word	0xffff2ffe
 8005dd8:	fffec000 	.word	0xfffec000
 8005ddc:	ffc0efef 	.word	0xffc0efef
 8005de0:	7fc0ffff 	.word	0x7fc0ffff

08005de4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b0a4      	sub	sp, #144	; 0x90
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005df2:	2300      	movs	r3, #0
 8005df4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e24:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005e3c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005e40:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005e66:	2300      	movs	r3, #0
 8005e68:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005e7c:	2320      	movs	r3, #32
 8005e7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005e8e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005e94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e98:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fde6 	bl	8005aa0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005eea:	2300      	movs	r3, #0
 8005eec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005eee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ef2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005ef8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005efc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005f04:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005f08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005f0a:	f107 0308 	add.w	r3, r7, #8
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff fee1 	bl	8005cd8 <ETH_SetDMAConfig>
}
 8005f16:	bf00      	nop
 8005f18:	3790      	adds	r7, #144	; 0x90
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b085      	sub	sp, #20
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e01d      	b.n	8005f68 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68d9      	ldr	r1, [r3, #12]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4613      	mov	r3, r2
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	4413      	add	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	440b      	add	r3, r1
 8005f3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2200      	movs	r2, #0
 8005f48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2200      	movs	r2, #0
 8005f54:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	3206      	adds	r2, #6
 8005f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3301      	adds	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d9de      	bls.n	8005f2c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2303      	movs	r3, #3
 8005f80:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	e023      	b.n	8006006 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6919      	ldr	r1, [r3, #16]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	4413      	add	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	440b      	add	r3, r1
 8005fce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2200      	movs	r2, #0
 8005fec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	3212      	adds	r2, #18
 8005ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3301      	adds	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b03      	cmp	r3, #3
 800600a:	d9d8      	bls.n	8005fbe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006032:	461a      	mov	r2, r3
 8006034:	2303      	movs	r3, #3
 8006036:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006046:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	; 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800607a:	4b86      	ldr	r3, [pc, #536]	; (8006294 <HAL_GPIO_Init+0x228>)
 800607c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800607e:	e18c      	b.n	800639a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	2101      	movs	r1, #1
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	4013      	ands	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 817e 	beq.w	8006394 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d005      	beq.n	80060b0 <HAL_GPIO_Init+0x44>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d130      	bne.n	8006112 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	2203      	movs	r2, #3
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	43db      	mvns	r3, r3
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	4013      	ands	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060e6:	2201      	movs	r2, #1
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43db      	mvns	r3, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4013      	ands	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	f003 0201 	and.w	r2, r3, #1
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4313      	orrs	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b03      	cmp	r3, #3
 800611c:	d017      	beq.n	800614e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	2203      	movs	r2, #3
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	43db      	mvns	r3, r3
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4013      	ands	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	4313      	orrs	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d123      	bne.n	80061a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	08da      	lsrs	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3208      	adds	r2, #8
 8006162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	220f      	movs	r2, #15
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	4313      	orrs	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	08da      	lsrs	r2, r3, #3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3208      	adds	r2, #8
 800619c:	69b9      	ldr	r1, [r7, #24]
 800619e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	2203      	movs	r2, #3
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4013      	ands	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f003 0203 	and.w	r2, r3, #3
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80d8 	beq.w	8006394 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061e4:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <HAL_GPIO_Init+0x22c>)
 80061e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061ea:	4a2b      	ldr	r2, [pc, #172]	; (8006298 <HAL_GPIO_Init+0x22c>)
 80061ec:	f043 0302 	orr.w	r3, r3, #2
 80061f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061f4:	4b28      	ldr	r3, [pc, #160]	; (8006298 <HAL_GPIO_Init+0x22c>)
 80061f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006202:	4a26      	ldr	r2, [pc, #152]	; (800629c <HAL_GPIO_Init+0x230>)
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	3302      	adds	r3, #2
 800620a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	220f      	movs	r2, #15
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	43db      	mvns	r3, r3
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4013      	ands	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <HAL_GPIO_Init+0x234>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d04a      	beq.n	80062c4 <HAL_GPIO_Init+0x258>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_GPIO_Init+0x238>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d02b      	beq.n	800628e <HAL_GPIO_Init+0x222>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <HAL_GPIO_Init+0x23c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d025      	beq.n	800628a <HAL_GPIO_Init+0x21e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <HAL_GPIO_Init+0x240>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01f      	beq.n	8006286 <HAL_GPIO_Init+0x21a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <HAL_GPIO_Init+0x244>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d019      	beq.n	8006282 <HAL_GPIO_Init+0x216>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a18      	ldr	r2, [pc, #96]	; (80062b4 <HAL_GPIO_Init+0x248>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_GPIO_Init+0x212>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a17      	ldr	r2, [pc, #92]	; (80062b8 <HAL_GPIO_Init+0x24c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00d      	beq.n	800627a <HAL_GPIO_Init+0x20e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a16      	ldr	r2, [pc, #88]	; (80062bc <HAL_GPIO_Init+0x250>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d007      	beq.n	8006276 <HAL_GPIO_Init+0x20a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <HAL_GPIO_Init+0x254>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d101      	bne.n	8006272 <HAL_GPIO_Init+0x206>
 800626e:	2309      	movs	r3, #9
 8006270:	e029      	b.n	80062c6 <HAL_GPIO_Init+0x25a>
 8006272:	230a      	movs	r3, #10
 8006274:	e027      	b.n	80062c6 <HAL_GPIO_Init+0x25a>
 8006276:	2307      	movs	r3, #7
 8006278:	e025      	b.n	80062c6 <HAL_GPIO_Init+0x25a>
 800627a:	2306      	movs	r3, #6
 800627c:	e023      	b.n	80062c6 <HAL_GPIO_Init+0x25a>
 800627e:	2305      	movs	r3, #5
 8006280:	e021      	b.n	80062c6 <HAL_GPIO_Init+0x25a>
 8006282:	2304      	movs	r3, #4
 8006284:	e01f      	b.n	80062c6 <HAL_GPIO_Init+0x25a>
 8006286:	2303      	movs	r3, #3
 8006288:	e01d      	b.n	80062c6 <HAL_GPIO_Init+0x25a>
 800628a:	2302      	movs	r3, #2
 800628c:	e01b      	b.n	80062c6 <HAL_GPIO_Init+0x25a>
 800628e:	2301      	movs	r3, #1
 8006290:	e019      	b.n	80062c6 <HAL_GPIO_Init+0x25a>
 8006292:	bf00      	nop
 8006294:	58000080 	.word	0x58000080
 8006298:	58024400 	.word	0x58024400
 800629c:	58000400 	.word	0x58000400
 80062a0:	58020000 	.word	0x58020000
 80062a4:	58020400 	.word	0x58020400
 80062a8:	58020800 	.word	0x58020800
 80062ac:	58020c00 	.word	0x58020c00
 80062b0:	58021000 	.word	0x58021000
 80062b4:	58021400 	.word	0x58021400
 80062b8:	58021800 	.word	0x58021800
 80062bc:	58021c00 	.word	0x58021c00
 80062c0:	58022400 	.word	0x58022400
 80062c4:	2300      	movs	r3, #0
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	f002 0203 	and.w	r2, r2, #3
 80062cc:	0092      	lsls	r2, r2, #2
 80062ce:	4093      	lsls	r3, r2
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062d6:	4938      	ldr	r1, [pc, #224]	; (80063b8 <HAL_GPIO_Init+0x34c>)
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	089b      	lsrs	r3, r3, #2
 80062dc:	3302      	adds	r3, #2
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	43db      	mvns	r3, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4013      	ands	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800630a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	43db      	mvns	r3, r3
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	4013      	ands	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	43db      	mvns	r3, r3
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	4013      	ands	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	43db      	mvns	r3, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4013      	ands	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	3301      	adds	r3, #1
 8006398:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f47f ae6b 	bne.w	8006080 <HAL_GPIO_Init+0x14>
  }
}
 80063aa:	bf00      	nop
 80063ac:	bf00      	nop
 80063ae:	3724      	adds	r7, #36	; 0x24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	58000400 	.word	0x58000400

080063bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	807b      	strh	r3, [r7, #2]
 80063c8:	4613      	mov	r3, r2
 80063ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063cc:	787b      	ldrb	r3, [r7, #1]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063d2:	887a      	ldrh	r2, [r7, #2]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063d8:	e003      	b.n	80063e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063da:	887b      	ldrh	r3, [r7, #2]
 80063dc:	041a      	lsls	r2, r3, #16
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	619a      	str	r2, [r3, #24]
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006400:	887a      	ldrh	r2, [r7, #2]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4013      	ands	r3, r2
 8006406:	041a      	lsls	r2, r3, #16
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	43d9      	mvns	r1, r3
 800640c:	887b      	ldrh	r3, [r7, #2]
 800640e:	400b      	ands	r3, r1
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	619a      	str	r2, [r3, #24]
}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800642c:	4b19      	ldr	r3, [pc, #100]	; (8006494 <HAL_PWREx_ConfigSupply+0x70>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b04      	cmp	r3, #4
 8006436:	d00a      	beq.n	800644e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006438:	4b16      	ldr	r3, [pc, #88]	; (8006494 <HAL_PWREx_ConfigSupply+0x70>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	429a      	cmp	r2, r3
 8006444:	d001      	beq.n	800644a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e01f      	b.n	800648a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e01d      	b.n	800648a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800644e:	4b11      	ldr	r3, [pc, #68]	; (8006494 <HAL_PWREx_ConfigSupply+0x70>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f023 0207 	bic.w	r2, r3, #7
 8006456:	490f      	ldr	r1, [pc, #60]	; (8006494 <HAL_PWREx_ConfigSupply+0x70>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4313      	orrs	r3, r2
 800645c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800645e:	f7fc fa5d 	bl	800291c <HAL_GetTick>
 8006462:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006464:	e009      	b.n	800647a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006466:	f7fc fa59 	bl	800291c <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006474:	d901      	bls.n	800647a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e007      	b.n	800648a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800647a:	4b06      	ldr	r3, [pc, #24]	; (8006494 <HAL_PWREx_ConfigSupply+0x70>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006486:	d1ee      	bne.n	8006466 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	58024800 	.word	0x58024800

08006498 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08c      	sub	sp, #48	; 0x30
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e3c8      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8087 	beq.w	80065c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064b8:	4b88      	ldr	r3, [pc, #544]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064c2:	4b86      	ldr	r3, [pc, #536]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	2b10      	cmp	r3, #16
 80064cc:	d007      	beq.n	80064de <HAL_RCC_OscConfig+0x46>
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	2b18      	cmp	r3, #24
 80064d2:	d110      	bne.n	80064f6 <HAL_RCC_OscConfig+0x5e>
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d10b      	bne.n	80064f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064de:	4b7f      	ldr	r3, [pc, #508]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d06c      	beq.n	80065c4 <HAL_RCC_OscConfig+0x12c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d168      	bne.n	80065c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e3a2      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fe:	d106      	bne.n	800650e <HAL_RCC_OscConfig+0x76>
 8006500:	4b76      	ldr	r3, [pc, #472]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a75      	ldr	r2, [pc, #468]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	e02e      	b.n	800656c <HAL_RCC_OscConfig+0xd4>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10c      	bne.n	8006530 <HAL_RCC_OscConfig+0x98>
 8006516:	4b71      	ldr	r3, [pc, #452]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a70      	ldr	r2, [pc, #448]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 800651c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	4b6e      	ldr	r3, [pc, #440]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a6d      	ldr	r2, [pc, #436]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	e01d      	b.n	800656c <HAL_RCC_OscConfig+0xd4>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006538:	d10c      	bne.n	8006554 <HAL_RCC_OscConfig+0xbc>
 800653a:	4b68      	ldr	r3, [pc, #416]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a67      	ldr	r2, [pc, #412]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	4b65      	ldr	r3, [pc, #404]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a64      	ldr	r2, [pc, #400]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 800654c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e00b      	b.n	800656c <HAL_RCC_OscConfig+0xd4>
 8006554:	4b61      	ldr	r3, [pc, #388]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a60      	ldr	r2, [pc, #384]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 800655a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	4b5e      	ldr	r3, [pc, #376]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5d      	ldr	r2, [pc, #372]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800656a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d013      	beq.n	800659c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fc f9d2 	bl	800291c <HAL_GetTick>
 8006578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800657c:	f7fc f9ce 	bl	800291c <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	; 0x64
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e356      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800658e:	4b53      	ldr	r3, [pc, #332]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f0      	beq.n	800657c <HAL_RCC_OscConfig+0xe4>
 800659a:	e014      	b.n	80065c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659c:	f7fc f9be 	bl	800291c <HAL_GetTick>
 80065a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a4:	f7fc f9ba 	bl	800291c <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b64      	cmp	r3, #100	; 0x64
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e342      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065b6:	4b49      	ldr	r3, [pc, #292]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f0      	bne.n	80065a4 <HAL_RCC_OscConfig+0x10c>
 80065c2:	e000      	b.n	80065c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 808c 	beq.w	80066ec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d4:	4b41      	ldr	r3, [pc, #260]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065de:	4b3f      	ldr	r3, [pc, #252]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <HAL_RCC_OscConfig+0x162>
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	2b18      	cmp	r3, #24
 80065ee:	d137      	bne.n	8006660 <HAL_RCC_OscConfig+0x1c8>
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d132      	bne.n	8006660 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065fa:	4b38      	ldr	r3, [pc, #224]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_RCC_OscConfig+0x17a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e314      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006612:	4b32      	ldr	r3, [pc, #200]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f023 0219 	bic.w	r2, r3, #25
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	492f      	ldr	r1, [pc, #188]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006620:	4313      	orrs	r3, r2
 8006622:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fc f97a 	bl	800291c <HAL_GetTick>
 8006628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800662c:	f7fc f976 	bl	800291c <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e2fe      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800663e:	4b27      	ldr	r3, [pc, #156]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664a:	4b24      	ldr	r3, [pc, #144]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	061b      	lsls	r3, r3, #24
 8006658:	4920      	ldr	r1, [pc, #128]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 800665a:	4313      	orrs	r3, r2
 800665c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800665e:	e045      	b.n	80066ec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d026      	beq.n	80066b6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006668:	4b1c      	ldr	r3, [pc, #112]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f023 0219 	bic.w	r2, r3, #25
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	4919      	ldr	r1, [pc, #100]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006676:	4313      	orrs	r3, r2
 8006678:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667a:	f7fc f94f 	bl	800291c <HAL_GetTick>
 800667e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006682:	f7fc f94b 	bl	800291c <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e2d3      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006694:	4b11      	ldr	r3, [pc, #68]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f0      	beq.n	8006682 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a0:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	061b      	lsls	r3, r3, #24
 80066ae:	490b      	ldr	r1, [pc, #44]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	604b      	str	r3, [r1, #4]
 80066b4:	e01a      	b.n	80066ec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066b6:	4b09      	ldr	r3, [pc, #36]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a08      	ldr	r2, [pc, #32]	; (80066dc <HAL_RCC_OscConfig+0x244>)
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c2:	f7fc f92b 	bl	800291c <HAL_GetTick>
 80066c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066c8:	e00a      	b.n	80066e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ca:	f7fc f927 	bl	800291c <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d903      	bls.n	80066e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e2af      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
 80066dc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066e0:	4b96      	ldr	r3, [pc, #600]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1ee      	bne.n	80066ca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d06a      	beq.n	80067ce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066f8:	4b90      	ldr	r3, [pc, #576]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006700:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006702:	4b8e      	ldr	r3, [pc, #568]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b08      	cmp	r3, #8
 800670c:	d007      	beq.n	800671e <HAL_RCC_OscConfig+0x286>
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b18      	cmp	r3, #24
 8006712:	d11b      	bne.n	800674c <HAL_RCC_OscConfig+0x2b4>
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	2b01      	cmp	r3, #1
 800671c:	d116      	bne.n	800674c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800671e:	4b87      	ldr	r3, [pc, #540]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_RCC_OscConfig+0x29e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	2b80      	cmp	r3, #128	; 0x80
 8006730:	d001      	beq.n	8006736 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e282      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006736:	4b81      	ldr	r3, [pc, #516]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	061b      	lsls	r3, r3, #24
 8006744:	497d      	ldr	r1, [pc, #500]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006746:	4313      	orrs	r3, r2
 8006748:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800674a:	e040      	b.n	80067ce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d023      	beq.n	800679c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006754:	4b79      	ldr	r3, [pc, #484]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a78      	ldr	r2, [pc, #480]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 800675a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006760:	f7fc f8dc 	bl	800291c <HAL_GetTick>
 8006764:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006768:	f7fc f8d8 	bl	800291c <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e260      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800677a:	4b70      	ldr	r3, [pc, #448]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006786:	4b6d      	ldr	r3, [pc, #436]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	061b      	lsls	r3, r3, #24
 8006794:	4969      	ldr	r1, [pc, #420]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006796:	4313      	orrs	r3, r2
 8006798:	60cb      	str	r3, [r1, #12]
 800679a:	e018      	b.n	80067ce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800679c:	4b67      	ldr	r3, [pc, #412]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a66      	ldr	r2, [pc, #408]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 80067a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a8:	f7fc f8b8 	bl	800291c <HAL_GetTick>
 80067ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067b0:	f7fc f8b4 	bl	800291c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e23c      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067c2:	4b5e      	ldr	r3, [pc, #376]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0308 	and.w	r3, r3, #8
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d036      	beq.n	8006848 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d019      	beq.n	8006816 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067e2:	4b56      	ldr	r3, [pc, #344]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 80067e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e6:	4a55      	ldr	r2, [pc, #340]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 80067e8:	f043 0301 	orr.w	r3, r3, #1
 80067ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ee:	f7fc f895 	bl	800291c <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f6:	f7fc f891 	bl	800291c <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e219      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006808:	4b4c      	ldr	r3, [pc, #304]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 800680a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f0      	beq.n	80067f6 <HAL_RCC_OscConfig+0x35e>
 8006814:	e018      	b.n	8006848 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006816:	4b49      	ldr	r3, [pc, #292]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800681a:	4a48      	ldr	r2, [pc, #288]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006822:	f7fc f87b 	bl	800291c <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800682a:	f7fc f877 	bl	800291c <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e1ff      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800683c:	4b3f      	ldr	r3, [pc, #252]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 800683e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f0      	bne.n	800682a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d036      	beq.n	80068c2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d019      	beq.n	8006890 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800685c:	4b37      	ldr	r3, [pc, #220]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a36      	ldr	r2, [pc, #216]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006866:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006868:	f7fc f858 	bl	800291c <HAL_GetTick>
 800686c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006870:	f7fc f854 	bl	800291c <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e1dc      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006882:	4b2e      	ldr	r3, [pc, #184]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0f0      	beq.n	8006870 <HAL_RCC_OscConfig+0x3d8>
 800688e:	e018      	b.n	80068c2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006890:	4b2a      	ldr	r3, [pc, #168]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a29      	ldr	r2, [pc, #164]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800689a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800689c:	f7fc f83e 	bl	800291c <HAL_GetTick>
 80068a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068a4:	f7fc f83a 	bl	800291c <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e1c2      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068b6:	4b21      	ldr	r3, [pc, #132]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1f0      	bne.n	80068a4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8086 	beq.w	80069dc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068d0:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <HAL_RCC_OscConfig+0x4a8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1a      	ldr	r2, [pc, #104]	; (8006940 <HAL_RCC_OscConfig+0x4a8>)
 80068d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068dc:	f7fc f81e 	bl	800291c <HAL_GetTick>
 80068e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e4:	f7fc f81a 	bl	800291c <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b64      	cmp	r3, #100	; 0x64
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e1a2      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068f6:	4b12      	ldr	r3, [pc, #72]	; (8006940 <HAL_RCC_OscConfig+0x4a8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0f0      	beq.n	80068e4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d106      	bne.n	8006918 <HAL_RCC_OscConfig+0x480>
 800690a:	4b0c      	ldr	r3, [pc, #48]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	4a0b      	ldr	r2, [pc, #44]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006910:	f043 0301 	orr.w	r3, r3, #1
 8006914:	6713      	str	r3, [r2, #112]	; 0x70
 8006916:	e032      	b.n	800697e <HAL_RCC_OscConfig+0x4e6>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d111      	bne.n	8006944 <HAL_RCC_OscConfig+0x4ac>
 8006920:	4b06      	ldr	r3, [pc, #24]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006924:	4a05      	ldr	r2, [pc, #20]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006926:	f023 0301 	bic.w	r3, r3, #1
 800692a:	6713      	str	r3, [r2, #112]	; 0x70
 800692c:	4b03      	ldr	r3, [pc, #12]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 800692e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006930:	4a02      	ldr	r2, [pc, #8]	; (800693c <HAL_RCC_OscConfig+0x4a4>)
 8006932:	f023 0304 	bic.w	r3, r3, #4
 8006936:	6713      	str	r3, [r2, #112]	; 0x70
 8006938:	e021      	b.n	800697e <HAL_RCC_OscConfig+0x4e6>
 800693a:	bf00      	nop
 800693c:	58024400 	.word	0x58024400
 8006940:	58024800 	.word	0x58024800
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b05      	cmp	r3, #5
 800694a:	d10c      	bne.n	8006966 <HAL_RCC_OscConfig+0x4ce>
 800694c:	4b83      	ldr	r3, [pc, #524]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 800694e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006950:	4a82      	ldr	r2, [pc, #520]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006952:	f043 0304 	orr.w	r3, r3, #4
 8006956:	6713      	str	r3, [r2, #112]	; 0x70
 8006958:	4b80      	ldr	r3, [pc, #512]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 800695a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695c:	4a7f      	ldr	r2, [pc, #508]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	6713      	str	r3, [r2, #112]	; 0x70
 8006964:	e00b      	b.n	800697e <HAL_RCC_OscConfig+0x4e6>
 8006966:	4b7d      	ldr	r3, [pc, #500]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	4a7c      	ldr	r2, [pc, #496]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	6713      	str	r3, [r2, #112]	; 0x70
 8006972:	4b7a      	ldr	r3, [pc, #488]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	4a79      	ldr	r2, [pc, #484]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006978:	f023 0304 	bic.w	r3, r3, #4
 800697c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d015      	beq.n	80069b2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006986:	f7fb ffc9 	bl	800291c <HAL_GetTick>
 800698a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800698c:	e00a      	b.n	80069a4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698e:	f7fb ffc5 	bl	800291c <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	f241 3288 	movw	r2, #5000	; 0x1388
 800699c:	4293      	cmp	r3, r2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e14b      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069a4:	4b6d      	ldr	r3, [pc, #436]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0ee      	beq.n	800698e <HAL_RCC_OscConfig+0x4f6>
 80069b0:	e014      	b.n	80069dc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b2:	f7fb ffb3 	bl	800291c <HAL_GetTick>
 80069b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069b8:	e00a      	b.n	80069d0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ba:	f7fb ffaf 	bl	800291c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e135      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069d0:	4b62      	ldr	r3, [pc, #392]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 80069d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1ee      	bne.n	80069ba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 812a 	beq.w	8006c3a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069e6:	4b5d      	ldr	r3, [pc, #372]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ee:	2b18      	cmp	r3, #24
 80069f0:	f000 80ba 	beq.w	8006b68 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	f040 8095 	bne.w	8006b28 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069fe:	4b57      	ldr	r3, [pc, #348]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a56      	ldr	r2, [pc, #344]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006a04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7fb ff87 	bl	800291c <HAL_GetTick>
 8006a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a12:	f7fb ff83 	bl	800291c <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e10b      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a24:	4b4d      	ldr	r3, [pc, #308]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1f0      	bne.n	8006a12 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a30:	4b4a      	ldr	r3, [pc, #296]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006a32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a34:	4b4a      	ldr	r3, [pc, #296]	; (8006b60 <HAL_RCC_OscConfig+0x6c8>)
 8006a36:	4013      	ands	r3, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a40:	0112      	lsls	r2, r2, #4
 8006a42:	430a      	orrs	r2, r1
 8006a44:	4945      	ldr	r1, [pc, #276]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	628b      	str	r3, [r1, #40]	; 0x28
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	025b      	lsls	r3, r3, #9
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	3b01      	subs	r3, #1
 8006a66:	041b      	lsls	r3, r3, #16
 8006a68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a72:	3b01      	subs	r3, #1
 8006a74:	061b      	lsls	r3, r3, #24
 8006a76:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a7a:	4938      	ldr	r1, [pc, #224]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a80:	4b36      	ldr	r3, [pc, #216]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	4a35      	ldr	r2, [pc, #212]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006a86:	f023 0301 	bic.w	r3, r3, #1
 8006a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a8c:	4b33      	ldr	r3, [pc, #204]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a90:	4b34      	ldr	r3, [pc, #208]	; (8006b64 <HAL_RCC_OscConfig+0x6cc>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a98:	00d2      	lsls	r2, r2, #3
 8006a9a:	4930      	ldr	r1, [pc, #192]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006aa0:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	f023 020c 	bic.w	r2, r3, #12
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	492b      	ldr	r1, [pc, #172]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ab2:	4b2a      	ldr	r3, [pc, #168]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab6:	f023 0202 	bic.w	r2, r3, #2
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abe:	4927      	ldr	r1, [pc, #156]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ac4:	4b25      	ldr	r3, [pc, #148]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	4a24      	ldr	r2, [pc, #144]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad0:	4b22      	ldr	r3, [pc, #136]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	4a21      	ldr	r2, [pc, #132]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006adc:	4b1f      	ldr	r3, [pc, #124]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	4a1e      	ldr	r2, [pc, #120]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ae8:	4b1c      	ldr	r3, [pc, #112]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006aee:	f043 0301 	orr.w	r3, r3, #1
 8006af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006af4:	4b19      	ldr	r3, [pc, #100]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b00:	f7fb ff0c 	bl	800291c <HAL_GetTick>
 8006b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b08:	f7fb ff08 	bl	800291c <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e090      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b1a:	4b10      	ldr	r3, [pc, #64]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCC_OscConfig+0x670>
 8006b26:	e088      	b.n	8006c3a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a0b      	ldr	r2, [pc, #44]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fb fef2 	bl	800291c <HAL_GetTick>
 8006b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b3c:	f7fb feee 	bl	800291c <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e076      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b4e:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <HAL_RCC_OscConfig+0x6c4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0x6a4>
 8006b5a:	e06e      	b.n	8006c3a <HAL_RCC_OscConfig+0x7a2>
 8006b5c:	58024400 	.word	0x58024400
 8006b60:	fffffc0c 	.word	0xfffffc0c
 8006b64:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b68:	4b36      	ldr	r3, [pc, #216]	; (8006c44 <HAL_RCC_OscConfig+0x7ac>)
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b6e:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <HAL_RCC_OscConfig+0x7ac>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d031      	beq.n	8006be0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f003 0203 	and.w	r2, r3, #3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d12a      	bne.n	8006be0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	091b      	lsrs	r3, r3, #4
 8006b8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d122      	bne.n	8006be0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d11a      	bne.n	8006be0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	0a5b      	lsrs	r3, r3, #9
 8006bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d111      	bne.n	8006be0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d108      	bne.n	8006be0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	0e1b      	lsrs	r3, r3, #24
 8006bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e02b      	b.n	8006c3c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006be4:	4b17      	ldr	r3, [pc, #92]	; (8006c44 <HAL_RCC_OscConfig+0x7ac>)
 8006be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be8:	08db      	lsrs	r3, r3, #3
 8006bea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d01f      	beq.n	8006c3a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bfa:	4b12      	ldr	r3, [pc, #72]	; (8006c44 <HAL_RCC_OscConfig+0x7ac>)
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	4a11      	ldr	r2, [pc, #68]	; (8006c44 <HAL_RCC_OscConfig+0x7ac>)
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c06:	f7fb fe89 	bl	800291c <HAL_GetTick>
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c0c:	bf00      	nop
 8006c0e:	f7fb fe85 	bl	800291c <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d0f9      	beq.n	8006c0e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <HAL_RCC_OscConfig+0x7ac>)
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <HAL_RCC_OscConfig+0x7b0>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c26:	00d2      	lsls	r2, r2, #3
 8006c28:	4906      	ldr	r1, [pc, #24]	; (8006c44 <HAL_RCC_OscConfig+0x7ac>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <HAL_RCC_OscConfig+0x7ac>)
 8006c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c32:	4a04      	ldr	r2, [pc, #16]	; (8006c44 <HAL_RCC_OscConfig+0x7ac>)
 8006c34:	f043 0301 	orr.w	r3, r3, #1
 8006c38:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3730      	adds	r7, #48	; 0x30
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	58024400 	.word	0x58024400
 8006c48:	ffff0007 	.word	0xffff0007

08006c4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e19c      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c60:	4b8a      	ldr	r3, [pc, #552]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d910      	bls.n	8006c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6e:	4b87      	ldr	r3, [pc, #540]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f023 020f 	bic.w	r2, r3, #15
 8006c76:	4985      	ldr	r1, [pc, #532]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7e:	4b83      	ldr	r3, [pc, #524]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d001      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e184      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d010      	beq.n	8006cbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691a      	ldr	r2, [r3, #16]
 8006ca0:	4b7b      	ldr	r3, [pc, #492]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d908      	bls.n	8006cbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cac:	4b78      	ldr	r3, [pc, #480]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	4975      	ldr	r1, [pc, #468]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d010      	beq.n	8006cec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	695a      	ldr	r2, [r3, #20]
 8006cce:	4b70      	ldr	r3, [pc, #448]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d908      	bls.n	8006cec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cda:	4b6d      	ldr	r3, [pc, #436]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	496a      	ldr	r1, [pc, #424]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	4b64      	ldr	r3, [pc, #400]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d908      	bls.n	8006d1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d08:	4b61      	ldr	r3, [pc, #388]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	495e      	ldr	r1, [pc, #376]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d010      	beq.n	8006d48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69da      	ldr	r2, [r3, #28]
 8006d2a:	4b59      	ldr	r3, [pc, #356]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d908      	bls.n	8006d48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d36:	4b56      	ldr	r3, [pc, #344]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	4953      	ldr	r1, [pc, #332]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	4b4d      	ldr	r3, [pc, #308]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d908      	bls.n	8006d76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d64:	4b4a      	ldr	r3, [pc, #296]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f023 020f 	bic.w	r2, r3, #15
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4947      	ldr	r1, [pc, #284]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d055      	beq.n	8006e2e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d82:	4b43      	ldr	r3, [pc, #268]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	4940      	ldr	r1, [pc, #256]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d107      	bne.n	8006dac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d9c:	4b3c      	ldr	r3, [pc, #240]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d121      	bne.n	8006dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0f6      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d107      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006db4:	4b36      	ldr	r3, [pc, #216]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d115      	bne.n	8006dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0ea      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d107      	bne.n	8006ddc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006dcc:	4b30      	ldr	r3, [pc, #192]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d109      	bne.n	8006dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e0de      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ddc:	4b2c      	ldr	r3, [pc, #176]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e0d6      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dec:	4b28      	ldr	r3, [pc, #160]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	f023 0207 	bic.w	r2, r3, #7
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4925      	ldr	r1, [pc, #148]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dfe:	f7fb fd8d 	bl	800291c <HAL_GetTick>
 8006e02:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e04:	e00a      	b.n	8006e1c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e06:	f7fb fd89 	bl	800291c <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e0be      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e1c:	4b1c      	ldr	r3, [pc, #112]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d1eb      	bne.n	8006e06 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d010      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d208      	bcs.n	8006e5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e4a:	4b11      	ldr	r3, [pc, #68]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f023 020f 	bic.w	r2, r3, #15
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	490e      	ldr	r1, [pc, #56]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d214      	bcs.n	8006e94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6a:	4b08      	ldr	r3, [pc, #32]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f023 020f 	bic.w	r2, r3, #15
 8006e72:	4906      	ldr	r1, [pc, #24]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7a:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d005      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e086      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
 8006e8c:	52002000 	.word	0x52002000
 8006e90:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d010      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	4b3f      	ldr	r3, [pc, #252]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d208      	bcs.n	8006ec2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006eb0:	4b3c      	ldr	r3, [pc, #240]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	4939      	ldr	r1, [pc, #228]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d010      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695a      	ldr	r2, [r3, #20]
 8006ed2:	4b34      	ldr	r3, [pc, #208]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d208      	bcs.n	8006ef0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ede:	4b31      	ldr	r3, [pc, #196]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	492e      	ldr	r1, [pc, #184]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d010      	beq.n	8006f1e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699a      	ldr	r2, [r3, #24]
 8006f00:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d208      	bcs.n	8006f1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f0c:	4b25      	ldr	r3, [pc, #148]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	4922      	ldr	r1, [pc, #136]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d010      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69da      	ldr	r2, [r3, #28]
 8006f2e:	4b1d      	ldr	r3, [pc, #116]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d208      	bcs.n	8006f4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f3a:	4b1a      	ldr	r3, [pc, #104]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	4917      	ldr	r1, [pc, #92]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f4c:	f000 f834 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4b14      	ldr	r3, [pc, #80]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	f003 030f 	and.w	r3, r3, #15
 8006f5c:	4912      	ldr	r1, [pc, #72]	; (8006fa8 <HAL_RCC_ClockConfig+0x35c>)
 8006f5e:	5ccb      	ldrb	r3, [r1, r3]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
 8006f68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	4a0d      	ldr	r2, [pc, #52]	; (8006fa8 <HAL_RCC_ClockConfig+0x35c>)
 8006f74:	5cd3      	ldrb	r3, [r2, r3]
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <HAL_RCC_ClockConfig+0x360>)
 8006f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f84:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <HAL_RCC_ClockConfig+0x364>)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <HAL_RCC_ClockConfig+0x368>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fb fc7a 	bl	8002888 <HAL_InitTick>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	0800cad0 	.word	0x0800cad0
 8006fac:	24000004 	.word	0x24000004
 8006fb0:	24000000 	.word	0x24000000
 8006fb4:	24000008 	.word	0x24000008

08006fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b089      	sub	sp, #36	; 0x24
 8006fbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fbe:	4bb3      	ldr	r3, [pc, #716]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fc6:	2b18      	cmp	r3, #24
 8006fc8:	f200 8155 	bhi.w	8007276 <HAL_RCC_GetSysClockFreq+0x2be>
 8006fcc:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08007039 	.word	0x08007039
 8006fd8:	08007277 	.word	0x08007277
 8006fdc:	08007277 	.word	0x08007277
 8006fe0:	08007277 	.word	0x08007277
 8006fe4:	08007277 	.word	0x08007277
 8006fe8:	08007277 	.word	0x08007277
 8006fec:	08007277 	.word	0x08007277
 8006ff0:	08007277 	.word	0x08007277
 8006ff4:	0800705f 	.word	0x0800705f
 8006ff8:	08007277 	.word	0x08007277
 8006ffc:	08007277 	.word	0x08007277
 8007000:	08007277 	.word	0x08007277
 8007004:	08007277 	.word	0x08007277
 8007008:	08007277 	.word	0x08007277
 800700c:	08007277 	.word	0x08007277
 8007010:	08007277 	.word	0x08007277
 8007014:	08007065 	.word	0x08007065
 8007018:	08007277 	.word	0x08007277
 800701c:	08007277 	.word	0x08007277
 8007020:	08007277 	.word	0x08007277
 8007024:	08007277 	.word	0x08007277
 8007028:	08007277 	.word	0x08007277
 800702c:	08007277 	.word	0x08007277
 8007030:	08007277 	.word	0x08007277
 8007034:	0800706b 	.word	0x0800706b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007038:	4b94      	ldr	r3, [pc, #592]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0320 	and.w	r3, r3, #32
 8007040:	2b00      	cmp	r3, #0
 8007042:	d009      	beq.n	8007058 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007044:	4b91      	ldr	r3, [pc, #580]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	08db      	lsrs	r3, r3, #3
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	4a90      	ldr	r2, [pc, #576]	; (8007290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
 8007054:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007056:	e111      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007058:	4b8d      	ldr	r3, [pc, #564]	; (8007290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800705a:	61bb      	str	r3, [r7, #24]
      break;
 800705c:	e10e      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800705e:	4b8d      	ldr	r3, [pc, #564]	; (8007294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007060:	61bb      	str	r3, [r7, #24]
      break;
 8007062:	e10b      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007064:	4b8c      	ldr	r3, [pc, #560]	; (8007298 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007066:	61bb      	str	r3, [r7, #24]
      break;
 8007068:	e108      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800706a:	4b88      	ldr	r3, [pc, #544]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007074:	4b85      	ldr	r3, [pc, #532]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007078:	091b      	lsrs	r3, r3, #4
 800707a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800707e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007080:	4b82      	ldr	r3, [pc, #520]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800708a:	4b80      	ldr	r3, [pc, #512]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708e:	08db      	lsrs	r3, r3, #3
 8007090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80e1 	beq.w	8007270 <HAL_RCC_GetSysClockFreq+0x2b8>
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	f000 8083 	beq.w	80071bc <HAL_RCC_GetSysClockFreq+0x204>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	f200 80a1 	bhi.w	8007200 <HAL_RCC_GetSysClockFreq+0x248>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_RCC_GetSysClockFreq+0x114>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d056      	beq.n	8007178 <HAL_RCC_GetSysClockFreq+0x1c0>
 80070ca:	e099      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070cc:	4b6f      	ldr	r3, [pc, #444]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d02d      	beq.n	8007134 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070d8:	4b6c      	ldr	r3, [pc, #432]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	08db      	lsrs	r3, r3, #3
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	4a6b      	ldr	r2, [pc, #428]	; (8007290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
 80070e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007102:	4b62      	ldr	r3, [pc, #392]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007112:	ed97 6a02 	vldr	s12, [r7, #8]
 8007116:	eddf 5a61 	vldr	s11, [pc, #388]	; 800729c <HAL_RCC_GetSysClockFreq+0x2e4>
 800711a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007132:	e087      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80072a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007146:	4b51      	ldr	r3, [pc, #324]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007156:	ed97 6a02 	vldr	s12, [r7, #8]
 800715a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800729c <HAL_RCC_GetSysClockFreq+0x2e4>
 800715e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800716a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007176:	e065      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eddf 6a48 	vldr	s13, [pc, #288]	; 80072a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	4b40      	ldr	r3, [pc, #256]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	ed97 6a02 	vldr	s12, [r7, #8]
 800719e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800729c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071ba:	e043      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80072a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b2f      	ldr	r3, [pc, #188]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a02 	vldr	s12, [r7, #8]
 80071e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800729c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071fe:	e021      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80072a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800720e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007212:	4b1e      	ldr	r3, [pc, #120]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007222:	ed97 6a02 	vldr	s12, [r7, #8]
 8007226:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800729c <HAL_RCC_GetSysClockFreq+0x2e4>
 800722a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007242:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	0a5b      	lsrs	r3, r3, #9
 800724a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800724e:	3301      	adds	r3, #1
 8007250:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	ee07 3a90 	vmov	s15, r3
 8007258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800725c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007268:	ee17 3a90 	vmov	r3, s15
 800726c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800726e:	e005      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	61bb      	str	r3, [r7, #24]
      break;
 8007274:	e002      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007278:	61bb      	str	r3, [r7, #24]
      break;
 800727a:	bf00      	nop
  }

  return sysclockfreq;
 800727c:	69bb      	ldr	r3, [r7, #24]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3724      	adds	r7, #36	; 0x24
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	58024400 	.word	0x58024400
 8007290:	03d09000 	.word	0x03d09000
 8007294:	003d0900 	.word	0x003d0900
 8007298:	007a1200 	.word	0x007a1200
 800729c:	46000000 	.word	0x46000000
 80072a0:	4c742400 	.word	0x4c742400
 80072a4:	4a742400 	.word	0x4a742400
 80072a8:	4af42400 	.word	0x4af42400

080072ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072b2:	f7ff fe81 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4b10      	ldr	r3, [pc, #64]	; (80072fc <HAL_RCC_GetHCLKFreq+0x50>)
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	0a1b      	lsrs	r3, r3, #8
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	490f      	ldr	r1, [pc, #60]	; (8007300 <HAL_RCC_GetHCLKFreq+0x54>)
 80072c4:	5ccb      	ldrb	r3, [r1, r3]
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	fa22 f303 	lsr.w	r3, r2, r3
 80072ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <HAL_RCC_GetHCLKFreq+0x50>)
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	4a09      	ldr	r2, [pc, #36]	; (8007300 <HAL_RCC_GetHCLKFreq+0x54>)
 80072da:	5cd3      	ldrb	r3, [r2, r3]
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	fa22 f303 	lsr.w	r3, r2, r3
 80072e6:	4a07      	ldr	r2, [pc, #28]	; (8007304 <HAL_RCC_GetHCLKFreq+0x58>)
 80072e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ea:	4a07      	ldr	r2, [pc, #28]	; (8007308 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <HAL_RCC_GetHCLKFreq+0x58>)
 80072f2:	681b      	ldr	r3, [r3, #0]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	58024400 	.word	0x58024400
 8007300:	0800cad0 	.word	0x0800cad0
 8007304:	24000004 	.word	0x24000004
 8007308:	24000000 	.word	0x24000000

0800730c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007310:	f7ff ffcc 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 8007314:	4602      	mov	r2, r0
 8007316:	4b06      	ldr	r3, [pc, #24]	; (8007330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	091b      	lsrs	r3, r3, #4
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	4904      	ldr	r1, [pc, #16]	; (8007334 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007322:	5ccb      	ldrb	r3, [r1, r3]
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800732c:	4618      	mov	r0, r3
 800732e:	bd80      	pop	{r7, pc}
 8007330:	58024400 	.word	0x58024400
 8007334:	0800cad0 	.word	0x0800cad0

08007338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800733c:	f7ff ffb6 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 8007340:	4602      	mov	r2, r0
 8007342:	4b06      	ldr	r3, [pc, #24]	; (800735c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	0a1b      	lsrs	r3, r3, #8
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	4904      	ldr	r1, [pc, #16]	; (8007360 <HAL_RCC_GetPCLK2Freq+0x28>)
 800734e:	5ccb      	ldrb	r3, [r1, r3]
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007358:	4618      	mov	r0, r3
 800735a:	bd80      	pop	{r7, pc}
 800735c:	58024400 	.word	0x58024400
 8007360:	0800cad0 	.word	0x0800cad0

08007364 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007368:	b0c6      	sub	sp, #280	; 0x118
 800736a:	af00      	add	r7, sp, #0
 800736c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007370:	2300      	movs	r3, #0
 8007372:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007376:	2300      	movs	r3, #0
 8007378:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800737c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007388:	2500      	movs	r5, #0
 800738a:	ea54 0305 	orrs.w	r3, r4, r5
 800738e:	d049      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007396:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800739a:	d02f      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800739c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073a0:	d828      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80073a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073a6:	d01a      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80073a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073ac:	d822      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80073b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073b6:	d007      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073b8:	e01c      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ba:	4bab      	ldr	r3, [pc, #684]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	4aaa      	ldr	r2, [pc, #680]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073c6:	e01a      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073cc:	3308      	adds	r3, #8
 80073ce:	2102      	movs	r1, #2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 fc25 	bl	8008c20 <RCCEx_PLL2_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073dc:	e00f      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e2:	3328      	adds	r3, #40	; 0x28
 80073e4:	2102      	movs	r1, #2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 fccc 	bl	8008d84 <RCCEx_PLL3_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073f2:	e004      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80073fa:	e000      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007406:	4b98      	ldr	r3, [pc, #608]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007414:	4a94      	ldr	r2, [pc, #592]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007416:	430b      	orrs	r3, r1
 8007418:	6513      	str	r3, [r2, #80]	; 0x50
 800741a:	e003      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007420:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007430:	f04f 0900 	mov.w	r9, #0
 8007434:	ea58 0309 	orrs.w	r3, r8, r9
 8007438:	d047      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800743a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800743e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007440:	2b04      	cmp	r3, #4
 8007442:	d82a      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007444:	a201      	add	r2, pc, #4	; (adr r2, 800744c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744a:	bf00      	nop
 800744c:	08007461 	.word	0x08007461
 8007450:	0800746f 	.word	0x0800746f
 8007454:	08007485 	.word	0x08007485
 8007458:	080074a3 	.word	0x080074a3
 800745c:	080074a3 	.word	0x080074a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007460:	4b81      	ldr	r3, [pc, #516]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	4a80      	ldr	r2, [pc, #512]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800746a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800746c:	e01a      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007472:	3308      	adds	r3, #8
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f001 fbd2 	bl	8008c20 <RCCEx_PLL2_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007482:	e00f      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007488:	3328      	adds	r3, #40	; 0x28
 800748a:	2100      	movs	r1, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f001 fc79 	bl	8008d84 <RCCEx_PLL3_Config>
 8007492:	4603      	mov	r3, r0
 8007494:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007498:	e004      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80074a0:	e000      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80074a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074ac:	4b6e      	ldr	r3, [pc, #440]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b0:	f023 0107 	bic.w	r1, r3, #7
 80074b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ba:	4a6b      	ldr	r2, [pc, #428]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074bc:	430b      	orrs	r3, r1
 80074be:	6513      	str	r3, [r2, #80]	; 0x50
 80074c0:	e003      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80074d6:	f04f 0b00 	mov.w	fp, #0
 80074da:	ea5a 030b 	orrs.w	r3, sl, fp
 80074de:	d05b      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074e8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80074ec:	d03b      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80074ee:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80074f2:	d834      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80074f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074f8:	d037      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80074fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074fe:	d82e      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007500:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007504:	d033      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007506:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800750a:	d828      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800750c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007510:	d01a      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007516:	d822      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800751c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007520:	d007      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007522:	e01c      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007524:	4b50      	ldr	r3, [pc, #320]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	4a4f      	ldr	r2, [pc, #316]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800752a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007530:	e01e      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007536:	3308      	adds	r3, #8
 8007538:	2100      	movs	r1, #0
 800753a:	4618      	mov	r0, r3
 800753c:	f001 fb70 	bl	8008c20 <RCCEx_PLL2_Config>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007546:	e013      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754c:	3328      	adds	r3, #40	; 0x28
 800754e:	2100      	movs	r1, #0
 8007550:	4618      	mov	r0, r3
 8007552:	f001 fc17 	bl	8008d84 <RCCEx_PLL3_Config>
 8007556:	4603      	mov	r3, r0
 8007558:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800755c:	e008      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007564:	e004      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007566:	bf00      	nop
 8007568:	e002      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800756a:	bf00      	nop
 800756c:	e000      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800756e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007570:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007578:	4b3b      	ldr	r3, [pc, #236]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800757a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007588:	4a37      	ldr	r2, [pc, #220]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800758a:	430b      	orrs	r3, r1
 800758c:	6593      	str	r3, [r2, #88]	; 0x58
 800758e:	e003      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007590:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007594:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80075a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075a8:	2300      	movs	r3, #0
 80075aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80075b2:	460b      	mov	r3, r1
 80075b4:	4313      	orrs	r3, r2
 80075b6:	d05d      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075c0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80075c4:	d03b      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80075c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80075ca:	d834      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075d0:	d037      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80075d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075d6:	d82e      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075dc:	d033      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80075de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075e2:	d828      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075e8:	d01a      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80075ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075ee:	d822      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80075f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075f8:	d007      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80075fa:	e01c      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075fc:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	4a19      	ldr	r2, [pc, #100]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007608:	e01e      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760e:	3308      	adds	r3, #8
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f001 fb04 	bl	8008c20 <RCCEx_PLL2_Config>
 8007618:	4603      	mov	r3, r0
 800761a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800761e:	e013      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007624:	3328      	adds	r3, #40	; 0x28
 8007626:	2100      	movs	r1, #0
 8007628:	4618      	mov	r0, r3
 800762a:	f001 fbab 	bl	8008d84 <RCCEx_PLL3_Config>
 800762e:	4603      	mov	r3, r0
 8007630:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007634:	e008      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800763c:	e004      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800763e:	bf00      	nop
 8007640:	e002      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007642:	bf00      	nop
 8007644:	e000      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007648:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10d      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007654:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007660:	4a01      	ldr	r2, [pc, #4]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007662:	430b      	orrs	r3, r1
 8007664:	6593      	str	r3, [r2, #88]	; 0x58
 8007666:	e005      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007670:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007680:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007684:	2300      	movs	r3, #0
 8007686:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800768a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800768e:	460b      	mov	r3, r1
 8007690:	4313      	orrs	r3, r2
 8007692:	d03a      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769a:	2b30      	cmp	r3, #48	; 0x30
 800769c:	d01f      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800769e:	2b30      	cmp	r3, #48	; 0x30
 80076a0:	d819      	bhi.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	d00c      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d815      	bhi.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d019      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80076ae:	2b10      	cmp	r3, #16
 80076b0:	d111      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b2:	4baa      	ldr	r3, [pc, #680]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	4aa9      	ldr	r2, [pc, #676]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80076be:	e011      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c4:	3308      	adds	r3, #8
 80076c6:	2102      	movs	r1, #2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 faa9 	bl	8008c20 <RCCEx_PLL2_Config>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80076d4:	e006      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80076dc:	e002      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80076de:	bf00      	nop
 80076e0:	e000      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80076e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80076ec:	4b9b      	ldr	r3, [pc, #620]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fa:	4a98      	ldr	r2, [pc, #608]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076fc:	430b      	orrs	r3, r1
 80076fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007700:	e003      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007702:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007706:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800770a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800771a:	2300      	movs	r3, #0
 800771c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007720:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007724:	460b      	mov	r3, r1
 8007726:	4313      	orrs	r3, r2
 8007728:	d051      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800772a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800772e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007734:	d035      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800773a:	d82e      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800773c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007740:	d031      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007742:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007746:	d828      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774c:	d01a      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800774e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007752:	d822      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775c:	d007      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800775e:	e01c      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007760:	4b7e      	ldr	r3, [pc, #504]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	4a7d      	ldr	r2, [pc, #500]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800776a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800776c:	e01c      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800776e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007772:	3308      	adds	r3, #8
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f001 fa52 	bl	8008c20 <RCCEx_PLL2_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007782:	e011      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007788:	3328      	adds	r3, #40	; 0x28
 800778a:	2100      	movs	r1, #0
 800778c:	4618      	mov	r0, r3
 800778e:	f001 faf9 	bl	8008d84 <RCCEx_PLL3_Config>
 8007792:	4603      	mov	r3, r0
 8007794:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007798:	e006      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80077a0:	e002      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80077a2:	bf00      	nop
 80077a4:	e000      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80077a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077b0:	4b6a      	ldr	r3, [pc, #424]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077be:	4a67      	ldr	r2, [pc, #412]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077c0:	430b      	orrs	r3, r1
 80077c2:	6513      	str	r3, [r2, #80]	; 0x50
 80077c4:	e003      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80077da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077de:	2300      	movs	r3, #0
 80077e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4313      	orrs	r3, r2
 80077ec:	d053      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077f8:	d033      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80077fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077fe:	d82c      	bhi.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007800:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007804:	d02f      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007806:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800780a:	d826      	bhi.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800780c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007810:	d02b      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007812:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007816:	d820      	bhi.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800781c:	d012      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800781e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007822:	d81a      	bhi.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d022      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782c:	d115      	bne.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800782e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007832:	3308      	adds	r3, #8
 8007834:	2101      	movs	r1, #1
 8007836:	4618      	mov	r0, r3
 8007838:	f001 f9f2 	bl	8008c20 <RCCEx_PLL2_Config>
 800783c:	4603      	mov	r3, r0
 800783e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007842:	e015      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007848:	3328      	adds	r3, #40	; 0x28
 800784a:	2101      	movs	r1, #1
 800784c:	4618      	mov	r0, r3
 800784e:	f001 fa99 	bl	8008d84 <RCCEx_PLL3_Config>
 8007852:	4603      	mov	r3, r0
 8007854:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007858:	e00a      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007860:	e006      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007862:	bf00      	nop
 8007864:	e004      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007866:	bf00      	nop
 8007868:	e002      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800786a:	bf00      	nop
 800786c:	e000      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800786e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007870:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10a      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007878:	4b38      	ldr	r3, [pc, #224]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800787a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007886:	4a35      	ldr	r2, [pc, #212]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007888:	430b      	orrs	r3, r1
 800788a:	6513      	str	r3, [r2, #80]	; 0x50
 800788c:	e003      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007892:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80078a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078a6:	2300      	movs	r3, #0
 80078a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078ac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80078b0:	460b      	mov	r3, r1
 80078b2:	4313      	orrs	r3, r2
 80078b4:	d058      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80078b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c2:	d033      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80078c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c8:	d82c      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ce:	d02f      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80078d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d4:	d826      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80078d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078da:	d02b      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80078dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078e0:	d820      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80078e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078e6:	d012      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80078e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ec:	d81a      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d022      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078f6:	d115      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fc:	3308      	adds	r3, #8
 80078fe:	2101      	movs	r1, #1
 8007900:	4618      	mov	r0, r3
 8007902:	f001 f98d 	bl	8008c20 <RCCEx_PLL2_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800790c:	e015      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007912:	3328      	adds	r3, #40	; 0x28
 8007914:	2101      	movs	r1, #1
 8007916:	4618      	mov	r0, r3
 8007918:	f001 fa34 	bl	8008d84 <RCCEx_PLL3_Config>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007922:	e00a      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800792a:	e006      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800792c:	bf00      	nop
 800792e:	e004      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007930:	bf00      	nop
 8007932:	e002      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007934:	bf00      	nop
 8007936:	e000      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10e      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007942:	4b06      	ldr	r3, [pc, #24]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007946:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800794a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800794e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007952:	4a02      	ldr	r2, [pc, #8]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007954:	430b      	orrs	r3, r1
 8007956:	6593      	str	r3, [r2, #88]	; 0x58
 8007958:	e006      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800795a:	bf00      	nop
 800795c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007960:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007964:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007978:	2300      	movs	r3, #0
 800797a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800797e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007982:	460b      	mov	r3, r1
 8007984:	4313      	orrs	r3, r2
 8007986:	d037      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800798c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800798e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007992:	d00e      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007998:	d816      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d018      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800799e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a2:	d111      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a4:	4bc4      	ldr	r3, [pc, #784]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	4ac3      	ldr	r2, [pc, #780]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079b0:	e00f      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b6:	3308      	adds	r3, #8
 80079b8:	2101      	movs	r1, #1
 80079ba:	4618      	mov	r0, r3
 80079bc:	f001 f930 	bl	8008c20 <RCCEx_PLL2_Config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079c6:	e004      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80079ce:	e000      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80079d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10a      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079da:	4bb7      	ldr	r3, [pc, #732]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e8:	4ab3      	ldr	r2, [pc, #716]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079ea:	430b      	orrs	r3, r1
 80079ec:	6513      	str	r3, [r2, #80]	; 0x50
 80079ee:	e003      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80079f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007a12:	460b      	mov	r3, r1
 8007a14:	4313      	orrs	r3, r2
 8007a16:	d039      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d81c      	bhi.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007a22:	a201      	add	r2, pc, #4	; (adr r2, 8007a28 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a28:	08007a65 	.word	0x08007a65
 8007a2c:	08007a39 	.word	0x08007a39
 8007a30:	08007a47 	.word	0x08007a47
 8007a34:	08007a65 	.word	0x08007a65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a38:	4b9f      	ldr	r3, [pc, #636]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4a9e      	ldr	r2, [pc, #632]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a44:	e00f      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	2102      	movs	r1, #2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f001 f8e6 	bl	8008c20 <RCCEx_PLL2_Config>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a5a:	e004      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007a62:	e000      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a6e:	4b92      	ldr	r3, [pc, #584]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a72:	f023 0103 	bic.w	r1, r3, #3
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7c:	4a8e      	ldr	r2, [pc, #568]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a82:	e003      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007a98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aa2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	f000 8099 	beq.w	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aae:	4b83      	ldr	r3, [pc, #524]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a82      	ldr	r2, [pc, #520]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aba:	f7fa ff2f 	bl	800291c <HAL_GetTick>
 8007abe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ac2:	e00b      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ac4:	f7fa ff2a 	bl	800291c <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b64      	cmp	r3, #100	; 0x64
 8007ad2:	d903      	bls.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007ada:	e005      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007adc:	4b77      	ldr	r3, [pc, #476]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0ed      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d173      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007af0:	4b71      	ldr	r3, [pc, #452]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007afc:	4053      	eors	r3, r2
 8007afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d015      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b06:	4b6c      	ldr	r3, [pc, #432]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b12:	4b69      	ldr	r3, [pc, #420]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b16:	4a68      	ldr	r2, [pc, #416]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b1c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b1e:	4b66      	ldr	r3, [pc, #408]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b22:	4a65      	ldr	r2, [pc, #404]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b28:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b2a:	4a63      	ldr	r2, [pc, #396]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b3e:	d118      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b40:	f7fa feec 	bl	800291c <HAL_GetTick>
 8007b44:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b48:	e00d      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b4a:	f7fa fee7 	bl	800291c <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b54:	1ad2      	subs	r2, r2, r3
 8007b56:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d903      	bls.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8007b64:	e005      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b66:	4b54      	ldr	r3, [pc, #336]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0eb      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007b72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d129      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b8a:	d10e      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007b8c:	4b4a      	ldr	r3, [pc, #296]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b9c:	091a      	lsrs	r2, r3, #4
 8007b9e:	4b48      	ldr	r3, [pc, #288]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	4a45      	ldr	r2, [pc, #276]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	6113      	str	r3, [r2, #16]
 8007ba8:	e005      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007baa:	4b43      	ldr	r3, [pc, #268]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	4a42      	ldr	r2, [pc, #264]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007bb4:	6113      	str	r3, [r2, #16]
 8007bb6:	4b40      	ldr	r3, [pc, #256]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bb8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bc6:	4a3c      	ldr	r2, [pc, #240]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	6713      	str	r3, [r2, #112]	; 0x70
 8007bcc:	e008      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bd2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8007bd6:	e003      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f002 0301 	and.w	r3, r2, #1
 8007bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007bf6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	f000 808f 	beq.w	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c08:	2b28      	cmp	r3, #40	; 0x28
 8007c0a:	d871      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007cf9 	.word	0x08007cf9
 8007c18:	08007cf1 	.word	0x08007cf1
 8007c1c:	08007cf1 	.word	0x08007cf1
 8007c20:	08007cf1 	.word	0x08007cf1
 8007c24:	08007cf1 	.word	0x08007cf1
 8007c28:	08007cf1 	.word	0x08007cf1
 8007c2c:	08007cf1 	.word	0x08007cf1
 8007c30:	08007cf1 	.word	0x08007cf1
 8007c34:	08007cc5 	.word	0x08007cc5
 8007c38:	08007cf1 	.word	0x08007cf1
 8007c3c:	08007cf1 	.word	0x08007cf1
 8007c40:	08007cf1 	.word	0x08007cf1
 8007c44:	08007cf1 	.word	0x08007cf1
 8007c48:	08007cf1 	.word	0x08007cf1
 8007c4c:	08007cf1 	.word	0x08007cf1
 8007c50:	08007cf1 	.word	0x08007cf1
 8007c54:	08007cdb 	.word	0x08007cdb
 8007c58:	08007cf1 	.word	0x08007cf1
 8007c5c:	08007cf1 	.word	0x08007cf1
 8007c60:	08007cf1 	.word	0x08007cf1
 8007c64:	08007cf1 	.word	0x08007cf1
 8007c68:	08007cf1 	.word	0x08007cf1
 8007c6c:	08007cf1 	.word	0x08007cf1
 8007c70:	08007cf1 	.word	0x08007cf1
 8007c74:	08007cf9 	.word	0x08007cf9
 8007c78:	08007cf1 	.word	0x08007cf1
 8007c7c:	08007cf1 	.word	0x08007cf1
 8007c80:	08007cf1 	.word	0x08007cf1
 8007c84:	08007cf1 	.word	0x08007cf1
 8007c88:	08007cf1 	.word	0x08007cf1
 8007c8c:	08007cf1 	.word	0x08007cf1
 8007c90:	08007cf1 	.word	0x08007cf1
 8007c94:	08007cf9 	.word	0x08007cf9
 8007c98:	08007cf1 	.word	0x08007cf1
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007cf1 	.word	0x08007cf1
 8007ca4:	08007cf1 	.word	0x08007cf1
 8007ca8:	08007cf1 	.word	0x08007cf1
 8007cac:	08007cf1 	.word	0x08007cf1
 8007cb0:	08007cf1 	.word	0x08007cf1
 8007cb4:	08007cf9 	.word	0x08007cf9
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	58024800 	.word	0x58024800
 8007cc0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc8:	3308      	adds	r3, #8
 8007cca:	2101      	movs	r1, #1
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 ffa7 	bl	8008c20 <RCCEx_PLL2_Config>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cd8:	e00f      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cde:	3328      	adds	r3, #40	; 0x28
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 f84e 	bl	8008d84 <RCCEx_PLL3_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cee:	e004      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007cf6:	e000      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d02:	4bbf      	ldr	r3, [pc, #764]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d06:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d10:	4abb      	ldr	r2, [pc, #748]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d12:	430b      	orrs	r3, r1
 8007d14:	6553      	str	r3, [r2, #84]	; 0x54
 8007d16:	e003      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f002 0302 	and.w	r3, r2, #2
 8007d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d30:	2300      	movs	r3, #0
 8007d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	d041      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d46:	2b05      	cmp	r3, #5
 8007d48:	d824      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007d4a:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d9d 	.word	0x08007d9d
 8007d54:	08007d69 	.word	0x08007d69
 8007d58:	08007d7f 	.word	0x08007d7f
 8007d5c:	08007d9d 	.word	0x08007d9d
 8007d60:	08007d9d 	.word	0x08007d9d
 8007d64:	08007d9d 	.word	0x08007d9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	2101      	movs	r1, #1
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 ff55 	bl	8008c20 <RCCEx_PLL2_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d7c:	e00f      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d82:	3328      	adds	r3, #40	; 0x28
 8007d84:	2101      	movs	r1, #1
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fffc 	bl	8008d84 <RCCEx_PLL3_Config>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d92:	e004      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007d9a:	e000      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007da6:	4b96      	ldr	r3, [pc, #600]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007daa:	f023 0107 	bic.w	r1, r3, #7
 8007dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db4:	4a92      	ldr	r2, [pc, #584]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007db6:	430b      	orrs	r3, r1
 8007db8:	6553      	str	r3, [r2, #84]	; 0x54
 8007dba:	e003      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007dc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	f002 0304 	and.w	r3, r2, #4
 8007dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007dda:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007dde:	460b      	mov	r3, r1
 8007de0:	4313      	orrs	r3, r2
 8007de2:	d044      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dec:	2b05      	cmp	r3, #5
 8007dee:	d825      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e45 	.word	0x08007e45
 8007dfc:	08007e11 	.word	0x08007e11
 8007e00:	08007e27 	.word	0x08007e27
 8007e04:	08007e45 	.word	0x08007e45
 8007e08:	08007e45 	.word	0x08007e45
 8007e0c:	08007e45 	.word	0x08007e45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e14:	3308      	adds	r3, #8
 8007e16:	2101      	movs	r1, #1
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 ff01 	bl	8008c20 <RCCEx_PLL2_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e24:	e00f      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e2a:	3328      	adds	r3, #40	; 0x28
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 ffa8 	bl	8008d84 <RCCEx_PLL3_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e3a:	e004      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007e42:	e000      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10b      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e4e:	4b6c      	ldr	r3, [pc, #432]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e52:	f023 0107 	bic.w	r1, r3, #7
 8007e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5e:	4a68      	ldr	r2, [pc, #416]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e60:	430b      	orrs	r3, r1
 8007e62:	6593      	str	r3, [r2, #88]	; 0x58
 8007e64:	e003      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f002 0320 	and.w	r3, r2, #32
 8007e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	d055      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e9a:	d033      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ea0:	d82c      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea6:	d02f      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eac:	d826      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007eae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007eb2:	d02b      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007eb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007eb8:	d820      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ebe:	d012      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec4:	d81a      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d022      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ece:	d115      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fea1 	bl	8008c20 <RCCEx_PLL2_Config>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ee4:	e015      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eea:	3328      	adds	r3, #40	; 0x28
 8007eec:	2102      	movs	r1, #2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 ff48 	bl	8008d84 <RCCEx_PLL3_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007efa:	e00a      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007f02:	e006      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f04:	bf00      	nop
 8007f06:	e004      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f08:	bf00      	nop
 8007f0a:	e002      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f0c:	bf00      	nop
 8007f0e:	e000      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10b      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f1a:	4b39      	ldr	r3, [pc, #228]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f2a:	4a35      	ldr	r2, [pc, #212]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6553      	str	r3, [r2, #84]	; 0x54
 8007f30:	e003      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007f46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f50:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007f54:	460b      	mov	r3, r1
 8007f56:	4313      	orrs	r3, r2
 8007f58:	d058      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f66:	d033      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007f68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f6c:	d82c      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f72:	d02f      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f78:	d826      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f7e:	d02b      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f84:	d820      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f8a:	d012      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f90:	d81a      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d022      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f9a:	d115      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fe3b 	bl	8008c20 <RCCEx_PLL2_Config>
 8007faa:	4603      	mov	r3, r0
 8007fac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fb0:	e015      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb6:	3328      	adds	r3, #40	; 0x28
 8007fb8:	2102      	movs	r1, #2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fee2 	bl	8008d84 <RCCEx_PLL3_Config>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fc6:	e00a      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007fce:	e006      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007fd0:	bf00      	nop
 8007fd2:	e004      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007fd4:	bf00      	nop
 8007fd6:	e002      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007fd8:	bf00      	nop
 8007fda:	e000      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10e      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ff6:	4a02      	ldr	r2, [pc, #8]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8007ffc:	e006      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007ffe:	bf00      	nop
 8008000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008004:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008008:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800800c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008018:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800801c:	2300      	movs	r3, #0
 800801e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008022:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008026:	460b      	mov	r3, r1
 8008028:	4313      	orrs	r3, r2
 800802a:	d055      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008030:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008034:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008038:	d033      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800803a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800803e:	d82c      	bhi.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008044:	d02f      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800804a:	d826      	bhi.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800804c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008050:	d02b      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008052:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008056:	d820      	bhi.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800805c:	d012      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800805e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008062:	d81a      	bhi.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d022      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800806c:	d115      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800806e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008072:	3308      	adds	r3, #8
 8008074:	2100      	movs	r1, #0
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fdd2 	bl	8008c20 <RCCEx_PLL2_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008082:	e015      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008088:	3328      	adds	r3, #40	; 0x28
 800808a:	2102      	movs	r1, #2
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fe79 	bl	8008d84 <RCCEx_PLL3_Config>
 8008092:	4603      	mov	r3, r0
 8008094:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008098:	e00a      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80080a0:	e006      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80080a2:	bf00      	nop
 80080a4:	e004      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80080a6:	bf00      	nop
 80080a8:	e002      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80080aa:	bf00      	nop
 80080ac:	e000      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80080ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10b      	bne.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080b8:	4ba0      	ldr	r3, [pc, #640]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080bc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80080c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080c8:	4a9c      	ldr	r2, [pc, #624]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080ca:	430b      	orrs	r3, r1
 80080cc:	6593      	str	r3, [r2, #88]	; 0x58
 80080ce:	e003      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f002 0308 	and.w	r3, r2, #8
 80080e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080e8:	2300      	movs	r3, #0
 80080ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80080f2:	460b      	mov	r3, r1
 80080f4:	4313      	orrs	r3, r2
 80080f6:	d01e      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80080f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008104:	d10c      	bne.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800810a:	3328      	adds	r3, #40	; 0x28
 800810c:	2102      	movs	r1, #2
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fe38 	bl	8008d84 <RCCEx_PLL3_Config>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008120:	4b86      	ldr	r3, [pc, #536]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008124:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800812c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008130:	4a82      	ldr	r2, [pc, #520]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008132:	430b      	orrs	r3, r1
 8008134:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f002 0310 	and.w	r3, r2, #16
 8008142:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008146:	2300      	movs	r3, #0
 8008148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800814c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008150:	460b      	mov	r3, r1
 8008152:	4313      	orrs	r3, r2
 8008154:	d01e      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800815e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008162:	d10c      	bne.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008168:	3328      	adds	r3, #40	; 0x28
 800816a:	2102      	movs	r1, #2
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fe09 	bl	8008d84 <RCCEx_PLL3_Config>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800817e:	4b6f      	ldr	r3, [pc, #444]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008182:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800818e:	4a6b      	ldr	r2, [pc, #428]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008190:	430b      	orrs	r3, r1
 8008192:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80081a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80081a2:	2300      	movs	r3, #0
 80081a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80081aa:	460b      	mov	r3, r1
 80081ac:	4313      	orrs	r3, r2
 80081ae:	d03e      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80081b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081bc:	d022      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80081be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081c2:	d81b      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80081c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081cc:	d00b      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80081ce:	e015      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d4:	3308      	adds	r3, #8
 80081d6:	2100      	movs	r1, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fd21 	bl	8008c20 <RCCEx_PLL2_Config>
 80081de:	4603      	mov	r3, r0
 80081e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081e4:	e00f      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ea:	3328      	adds	r3, #40	; 0x28
 80081ec:	2102      	movs	r1, #2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fdc8 	bl	8008d84 <RCCEx_PLL3_Config>
 80081f4:	4603      	mov	r3, r0
 80081f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081fa:	e004      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008202:	e000      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008206:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10b      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800820e:	4b4b      	ldr	r3, [pc, #300]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008212:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800821e:	4a47      	ldr	r2, [pc, #284]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008220:	430b      	orrs	r3, r1
 8008222:	6593      	str	r3, [r2, #88]	; 0x58
 8008224:	e003      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008226:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800822a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800822e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800823a:	673b      	str	r3, [r7, #112]	; 0x70
 800823c:	2300      	movs	r3, #0
 800823e:	677b      	str	r3, [r7, #116]	; 0x74
 8008240:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008244:	460b      	mov	r3, r1
 8008246:	4313      	orrs	r3, r2
 8008248:	d03b      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008252:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008256:	d01f      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008258:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800825c:	d818      	bhi.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800825e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008262:	d003      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008268:	d007      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800826a:	e011      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800826c:	4b33      	ldr	r3, [pc, #204]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	4a32      	ldr	r2, [pc, #200]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008278:	e00f      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800827a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827e:	3328      	adds	r3, #40	; 0x28
 8008280:	2101      	movs	r1, #1
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fd7e 	bl	8008d84 <RCCEx_PLL3_Config>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800828e:	e004      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008296:	e000      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800829a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10b      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082a2:	4b26      	ldr	r3, [pc, #152]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b2:	4a22      	ldr	r2, [pc, #136]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082b4:	430b      	orrs	r3, r1
 80082b6:	6553      	str	r3, [r2, #84]	; 0x54
 80082b8:	e003      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80082ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80082d0:	2300      	movs	r3, #0
 80082d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80082d8:	460b      	mov	r3, r1
 80082da:	4313      	orrs	r3, r2
 80082dc:	d034      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80082de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80082e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ec:	d007      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80082ee:	e011      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f0:	4b12      	ldr	r3, [pc, #72]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	4a11      	ldr	r2, [pc, #68]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80082fc:	e00e      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008302:	3308      	adds	r3, #8
 8008304:	2102      	movs	r1, #2
 8008306:	4618      	mov	r0, r3
 8008308:	f000 fc8a 	bl	8008c20 <RCCEx_PLL2_Config>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008312:	e003      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800831a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800831c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10d      	bne.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008324:	4b05      	ldr	r3, [pc, #20]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800832c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008332:	4a02      	ldr	r2, [pc, #8]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008334:	430b      	orrs	r3, r1
 8008336:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008338:	e006      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800833a:	bf00      	nop
 800833c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008340:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008344:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008354:	663b      	str	r3, [r7, #96]	; 0x60
 8008356:	2300      	movs	r3, #0
 8008358:	667b      	str	r3, [r7, #100]	; 0x64
 800835a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800835e:	460b      	mov	r3, r1
 8008360:	4313      	orrs	r3, r2
 8008362:	d00c      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008368:	3328      	adds	r3, #40	; 0x28
 800836a:	2102      	movs	r1, #2
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fd09 	bl	8008d84 <RCCEx_PLL3_Config>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800837e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800838a:	65bb      	str	r3, [r7, #88]	; 0x58
 800838c:	2300      	movs	r3, #0
 800838e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008390:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008394:	460b      	mov	r3, r1
 8008396:	4313      	orrs	r3, r2
 8008398:	d036      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800839a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800839e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083a4:	d018      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80083a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083aa:	d811      	bhi.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80083ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b0:	d014      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80083b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b6:	d80b      	bhi.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d011      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80083bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083c0:	d106      	bne.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c2:	4bb7      	ldr	r3, [pc, #732]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	4ab6      	ldr	r2, [pc, #728]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80083ce:	e008      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80083d6:	e004      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80083d8:	bf00      	nop
 80083da:	e002      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80083dc:	bf00      	nop
 80083de:	e000      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80083e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10a      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083ea:	4bad      	ldr	r3, [pc, #692]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f8:	4aa9      	ldr	r2, [pc, #676]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083fa:	430b      	orrs	r3, r1
 80083fc:	6553      	str	r3, [r2, #84]	; 0x54
 80083fe:	e003      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008400:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008404:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008414:	653b      	str	r3, [r7, #80]	; 0x50
 8008416:	2300      	movs	r3, #0
 8008418:	657b      	str	r3, [r7, #84]	; 0x54
 800841a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800841e:	460b      	mov	r3, r1
 8008420:	4313      	orrs	r3, r2
 8008422:	d009      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008424:	4b9e      	ldr	r3, [pc, #632]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008428:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800842c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008432:	4a9b      	ldr	r2, [pc, #620]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008434:	430b      	orrs	r3, r1
 8008436:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008444:	64bb      	str	r3, [r7, #72]	; 0x48
 8008446:	2300      	movs	r3, #0
 8008448:	64fb      	str	r3, [r7, #76]	; 0x4c
 800844a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800844e:	460b      	mov	r3, r1
 8008450:	4313      	orrs	r3, r2
 8008452:	d009      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008454:	4b92      	ldr	r3, [pc, #584]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008458:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800845c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008462:	4a8f      	ldr	r2, [pc, #572]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008464:	430b      	orrs	r3, r1
 8008466:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008474:	643b      	str	r3, [r7, #64]	; 0x40
 8008476:	2300      	movs	r3, #0
 8008478:	647b      	str	r3, [r7, #68]	; 0x44
 800847a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800847e:	460b      	mov	r3, r1
 8008480:	4313      	orrs	r3, r2
 8008482:	d00e      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008484:	4b86      	ldr	r3, [pc, #536]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	4a85      	ldr	r2, [pc, #532]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800848a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800848e:	6113      	str	r3, [r2, #16]
 8008490:	4b83      	ldr	r3, [pc, #524]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008492:	6919      	ldr	r1, [r3, #16]
 8008494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800849c:	4a80      	ldr	r2, [pc, #512]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800849e:	430b      	orrs	r3, r1
 80084a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80084ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80084b0:	2300      	movs	r3, #0
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80084b8:	460b      	mov	r3, r1
 80084ba:	4313      	orrs	r3, r2
 80084bc:	d009      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084be:	4b78      	ldr	r3, [pc, #480]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80084c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084cc:	4a74      	ldr	r2, [pc, #464]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084ce:	430b      	orrs	r3, r1
 80084d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80084de:	633b      	str	r3, [r7, #48]	; 0x30
 80084e0:	2300      	movs	r3, #0
 80084e2:	637b      	str	r3, [r7, #52]	; 0x34
 80084e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80084e8:	460b      	mov	r3, r1
 80084ea:	4313      	orrs	r3, r2
 80084ec:	d00a      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084ee:	4b6c      	ldr	r3, [pc, #432]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80084f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fe:	4a68      	ldr	r2, [pc, #416]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008500:	430b      	orrs	r3, r1
 8008502:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	2100      	movs	r1, #0
 800850e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008516:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800851a:	460b      	mov	r3, r1
 800851c:	4313      	orrs	r3, r2
 800851e:	d011      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008524:	3308      	adds	r3, #8
 8008526:	2100      	movs	r1, #0
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fb79 	bl	8008c20 <RCCEx_PLL2_Config>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008534:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008540:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	2100      	movs	r1, #0
 800854e:	6239      	str	r1, [r7, #32]
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
 8008556:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800855a:	460b      	mov	r3, r1
 800855c:	4313      	orrs	r3, r2
 800855e:	d011      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008564:	3308      	adds	r3, #8
 8008566:	2101      	movs	r1, #1
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fb59 	bl	8008c20 <RCCEx_PLL2_Config>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008574:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008580:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	2100      	movs	r1, #0
 800858e:	61b9      	str	r1, [r7, #24]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	61fb      	str	r3, [r7, #28]
 8008596:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800859a:	460b      	mov	r3, r1
 800859c:	4313      	orrs	r3, r2
 800859e:	d011      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a4:	3308      	adds	r3, #8
 80085a6:	2102      	movs	r1, #2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 fb39 	bl	8008c20 <RCCEx_PLL2_Config>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80085b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80085c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	2100      	movs	r1, #0
 80085ce:	6139      	str	r1, [r7, #16]
 80085d0:	f003 0308 	and.w	r3, r3, #8
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80085da:	460b      	mov	r3, r1
 80085dc:	4313      	orrs	r3, r2
 80085de:	d011      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e4:	3328      	adds	r3, #40	; 0x28
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fbcb 	bl	8008d84 <RCCEx_PLL3_Config>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80085f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008600:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	2100      	movs	r1, #0
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	f003 0310 	and.w	r3, r3, #16
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800861a:	460b      	mov	r3, r1
 800861c:	4313      	orrs	r3, r2
 800861e:	d011      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008624:	3328      	adds	r3, #40	; 0x28
 8008626:	2101      	movs	r1, #1
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fbab 	bl	8008d84 <RCCEx_PLL3_Config>
 800862e:	4603      	mov	r3, r0
 8008630:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008634:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008640:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	2100      	movs	r1, #0
 800864e:	6039      	str	r1, [r7, #0]
 8008650:	f003 0320 	and.w	r3, r3, #32
 8008654:	607b      	str	r3, [r7, #4]
 8008656:	e9d7 1200 	ldrd	r1, r2, [r7]
 800865a:	460b      	mov	r3, r1
 800865c:	4313      	orrs	r3, r2
 800865e:	d011      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008664:	3328      	adds	r3, #40	; 0x28
 8008666:	2102      	movs	r1, #2
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fb8b 	bl	8008d84 <RCCEx_PLL3_Config>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008680:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8008684:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	e000      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
}
 8008692:	4618      	mov	r0, r3
 8008694:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8008698:	46bd      	mov	sp, r7
 800869a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800869e:	bf00      	nop
 80086a0:	58024400 	.word	0x58024400

080086a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80086a8:	f7fe fe00 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 80086ac:	4602      	mov	r2, r0
 80086ae:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	091b      	lsrs	r3, r3, #4
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	4904      	ldr	r1, [pc, #16]	; (80086cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80086ba:	5ccb      	ldrb	r3, [r1, r3]
 80086bc:	f003 031f 	and.w	r3, r3, #31
 80086c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	58024400 	.word	0x58024400
 80086cc:	0800cad0 	.word	0x0800cad0

080086d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b089      	sub	sp, #36	; 0x24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086d8:	4ba1      	ldr	r3, [pc, #644]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086dc:	f003 0303 	and.w	r3, r3, #3
 80086e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80086e2:	4b9f      	ldr	r3, [pc, #636]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e6:	0b1b      	lsrs	r3, r3, #12
 80086e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80086ee:	4b9c      	ldr	r3, [pc, #624]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	091b      	lsrs	r3, r3, #4
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80086fa:	4b99      	ldr	r3, [pc, #612]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fe:	08db      	lsrs	r3, r3, #3
 8008700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	fb02 f303 	mul.w	r3, r2, r3
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008712:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 8111 	beq.w	8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	2b02      	cmp	r3, #2
 8008722:	f000 8083 	beq.w	800882c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b02      	cmp	r3, #2
 800872a:	f200 80a1 	bhi.w	8008870 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d056      	beq.n	80087e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800873a:	e099      	b.n	8008870 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800873c:	4b88      	ldr	r3, [pc, #544]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0320 	and.w	r3, r3, #32
 8008744:	2b00      	cmp	r3, #0
 8008746:	d02d      	beq.n	80087a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008748:	4b85      	ldr	r3, [pc, #532]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	08db      	lsrs	r3, r3, #3
 800874e:	f003 0303 	and.w	r3, r3, #3
 8008752:	4a84      	ldr	r2, [pc, #528]	; (8008964 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008754:	fa22 f303 	lsr.w	r3, r2, r3
 8008758:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	ee07 3a90 	vmov	s15, r3
 8008760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008772:	4b7b      	ldr	r3, [pc, #492]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008782:	ed97 6a03 	vldr	s12, [r7, #12]
 8008786:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800878a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800878e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800879e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087a2:	e087      	b.n	80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800896c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80087b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b6:	4b6a      	ldr	r3, [pc, #424]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087e6:	e065      	b.n	80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008970 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fa:	4b59      	ldr	r3, [pc, #356]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880a:	ed97 6a03 	vldr	s12, [r7, #12]
 800880e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800881a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800881e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800882a:	e043      	b.n	80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008836:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800883a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883e:	4b48      	ldr	r3, [pc, #288]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008852:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800886e:	e021      	b.n	80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008970 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800887e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008882:	4b37      	ldr	r3, [pc, #220]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008892:	ed97 6a03 	vldr	s12, [r7, #12]
 8008896:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800889a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80088b4:	4b2a      	ldr	r3, [pc, #168]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	0a5b      	lsrs	r3, r3, #9
 80088ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80088d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088da:	ee17 2a90 	vmov	r2, s15
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80088e2:	4b1f      	ldr	r3, [pc, #124]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	0c1b      	lsrs	r3, r3, #16
 80088e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ec:	ee07 3a90 	vmov	s15, r3
 80088f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008908:	ee17 2a90 	vmov	r2, s15
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008910:	4b13      	ldr	r3, [pc, #76]	; (8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	0e1b      	lsrs	r3, r3, #24
 8008916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008926:	ee37 7a87 	vadd.f32	s14, s15, s14
 800892a:	edd7 6a07 	vldr	s13, [r7, #28]
 800892e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008936:	ee17 2a90 	vmov	r2, s15
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800893e:	e008      	b.n	8008952 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	609a      	str	r2, [r3, #8]
}
 8008952:	bf00      	nop
 8008954:	3724      	adds	r7, #36	; 0x24
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	58024400 	.word	0x58024400
 8008964:	03d09000 	.word	0x03d09000
 8008968:	46000000 	.word	0x46000000
 800896c:	4c742400 	.word	0x4c742400
 8008970:	4a742400 	.word	0x4a742400
 8008974:	4af42400 	.word	0x4af42400

08008978 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008978:	b480      	push	{r7}
 800897a:	b089      	sub	sp, #36	; 0x24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008980:	4ba1      	ldr	r3, [pc, #644]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800898a:	4b9f      	ldr	r3, [pc, #636]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800898c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898e:	0d1b      	lsrs	r3, r3, #20
 8008990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008994:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008996:	4b9c      	ldr	r3, [pc, #624]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80089a2:	4b99      	ldr	r3, [pc, #612]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	08db      	lsrs	r3, r3, #3
 80089a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 8111 	beq.w	8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	f000 8083 	beq.w	8008ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	f200 80a1 	bhi.w	8008b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d056      	beq.n	8008a90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80089e2:	e099      	b.n	8008b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089e4:	4b88      	ldr	r3, [pc, #544]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0320 	and.w	r3, r3, #32
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d02d      	beq.n	8008a4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089f0:	4b85      	ldr	r3, [pc, #532]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	08db      	lsrs	r3, r3, #3
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	4a84      	ldr	r2, [pc, #528]	; (8008c0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80089fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008a00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	ee07 3a90 	vmov	s15, r3
 8008a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a1a:	4b7b      	ldr	r3, [pc, #492]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a4a:	e087      	b.n	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5e:	4b6a      	ldr	r3, [pc, #424]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a8e:	e065      	b.n	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa2:	4b59      	ldr	r3, [pc, #356]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ab6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ad2:	e043      	b.n	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ade:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae6:	4b48      	ldr	r3, [pc, #288]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008afa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b16:	e021      	b.n	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2a:	4b37      	ldr	r3, [pc, #220]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008b5c:	4b2a      	ldr	r3, [pc, #168]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b60:	0a5b      	lsrs	r3, r3, #9
 8008b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b82:	ee17 2a90 	vmov	r2, s15
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008b8a:	4b1f      	ldr	r3, [pc, #124]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8e:	0c1b      	lsrs	r3, r3, #16
 8008b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb0:	ee17 2a90 	vmov	r2, s15
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008bb8:	4b13      	ldr	r3, [pc, #76]	; (8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	0e1b      	lsrs	r3, r3, #24
 8008bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bde:	ee17 2a90 	vmov	r2, s15
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008be6:	e008      	b.n	8008bfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	609a      	str	r2, [r3, #8]
}
 8008bfa:	bf00      	nop
 8008bfc:	3724      	adds	r7, #36	; 0x24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	58024400 	.word	0x58024400
 8008c0c:	03d09000 	.word	0x03d09000
 8008c10:	46000000 	.word	0x46000000
 8008c14:	4c742400 	.word	0x4c742400
 8008c18:	4a742400 	.word	0x4a742400
 8008c1c:	4af42400 	.word	0x4af42400

08008c20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c2e:	4b53      	ldr	r3, [pc, #332]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d101      	bne.n	8008c3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e099      	b.n	8008d72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c3e:	4b4f      	ldr	r3, [pc, #316]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a4e      	ldr	r2, [pc, #312]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c4a:	f7f9 fe67 	bl	800291c <HAL_GetTick>
 8008c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c50:	e008      	b.n	8008c64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c52:	f7f9 fe63 	bl	800291c <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d901      	bls.n	8008c64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e086      	b.n	8008d72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c64:	4b45      	ldr	r3, [pc, #276]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1f0      	bne.n	8008c52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c70:	4b42      	ldr	r3, [pc, #264]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	031b      	lsls	r3, r3, #12
 8008c7e:	493f      	ldr	r1, [pc, #252]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	628b      	str	r3, [r1, #40]	; 0x28
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	025b      	lsls	r3, r3, #9
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	041b      	lsls	r3, r3, #16
 8008ca2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	061b      	lsls	r3, r3, #24
 8008cb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cb4:	4931      	ldr	r1, [pc, #196]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008cba:	4b30      	ldr	r3, [pc, #192]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	492d      	ldr	r1, [pc, #180]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ccc:	4b2b      	ldr	r3, [pc, #172]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd0:	f023 0220 	bic.w	r2, r3, #32
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	4928      	ldr	r1, [pc, #160]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008cde:	4b27      	ldr	r3, [pc, #156]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce2:	4a26      	ldr	r2, [pc, #152]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008ce4:	f023 0310 	bic.w	r3, r3, #16
 8008ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008cea:	4b24      	ldr	r3, [pc, #144]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cee:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <RCCEx_PLL2_Config+0x160>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	69d2      	ldr	r2, [r2, #28]
 8008cf6:	00d2      	lsls	r2, r2, #3
 8008cf8:	4920      	ldr	r1, [pc, #128]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008cfe:	4b1f      	ldr	r3, [pc, #124]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	4a1e      	ldr	r2, [pc, #120]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d04:	f043 0310 	orr.w	r3, r3, #16
 8008d08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d106      	bne.n	8008d1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d10:	4b1a      	ldr	r3, [pc, #104]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	4a19      	ldr	r2, [pc, #100]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d1c:	e00f      	b.n	8008d3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d106      	bne.n	8008d32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d24:	4b15      	ldr	r3, [pc, #84]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	4a14      	ldr	r2, [pc, #80]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d30:	e005      	b.n	8008d3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d32:	4b12      	ldr	r3, [pc, #72]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	4a11      	ldr	r2, [pc, #68]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a0e      	ldr	r2, [pc, #56]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d4a:	f7f9 fde7 	bl	800291c <HAL_GetTick>
 8008d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d50:	e008      	b.n	8008d64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d52:	f7f9 fde3 	bl	800291c <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d901      	bls.n	8008d64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e006      	b.n	8008d72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0f0      	beq.n	8008d52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	58024400 	.word	0x58024400
 8008d80:	ffff0007 	.word	0xffff0007

08008d84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d92:	4b53      	ldr	r3, [pc, #332]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d101      	bne.n	8008da2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e099      	b.n	8008ed6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008da2:	4b4f      	ldr	r3, [pc, #316]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a4e      	ldr	r2, [pc, #312]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dae:	f7f9 fdb5 	bl	800291c <HAL_GetTick>
 8008db2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008db4:	e008      	b.n	8008dc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008db6:	f7f9 fdb1 	bl	800291c <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d901      	bls.n	8008dc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e086      	b.n	8008ed6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dc8:	4b45      	ldr	r3, [pc, #276]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1f0      	bne.n	8008db6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008dd4:	4b42      	ldr	r3, [pc, #264]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	051b      	lsls	r3, r3, #20
 8008de2:	493f      	ldr	r1, [pc, #252]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	628b      	str	r3, [r1, #40]	; 0x28
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	025b      	lsls	r3, r3, #9
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	041b      	lsls	r3, r3, #16
 8008e06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	061b      	lsls	r3, r3, #24
 8008e14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e18:	4931      	ldr	r1, [pc, #196]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e1e:	4b30      	ldr	r3, [pc, #192]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	492d      	ldr	r1, [pc, #180]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e30:	4b2b      	ldr	r3, [pc, #172]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	4928      	ldr	r1, [pc, #160]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e42:	4b27      	ldr	r3, [pc, #156]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e4e:	4b24      	ldr	r3, [pc, #144]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e52:	4b24      	ldr	r3, [pc, #144]	; (8008ee4 <RCCEx_PLL3_Config+0x160>)
 8008e54:	4013      	ands	r3, r2
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	69d2      	ldr	r2, [r2, #28]
 8008e5a:	00d2      	lsls	r2, r2, #3
 8008e5c:	4920      	ldr	r1, [pc, #128]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e62:	4b1f      	ldr	r3, [pc, #124]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	4a1e      	ldr	r2, [pc, #120]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e74:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	4a19      	ldr	r2, [pc, #100]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e80:	e00f      	b.n	8008ea2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d106      	bne.n	8008e96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e88:	4b15      	ldr	r3, [pc, #84]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	4a14      	ldr	r2, [pc, #80]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e94:	e005      	b.n	8008ea2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e96:	4b12      	ldr	r3, [pc, #72]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9a:	4a11      	ldr	r2, [pc, #68]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ea2:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a0e      	ldr	r2, [pc, #56]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eae:	f7f9 fd35 	bl	800291c <HAL_GetTick>
 8008eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008eb4:	e008      	b.n	8008ec8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008eb6:	f7f9 fd31 	bl	800291c <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d901      	bls.n	8008ec8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e006      	b.n	8008ed6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ec8:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0f0      	beq.n	8008eb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	58024400 	.word	0x58024400
 8008ee4:	ffff0007 	.word	0xffff0007

08008ee8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e10f      	b.n	800911a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a87      	ldr	r2, [pc, #540]	; (8009124 <HAL_SPI_Init+0x23c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d00f      	beq.n	8008f2a <HAL_SPI_Init+0x42>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a86      	ldr	r2, [pc, #536]	; (8009128 <HAL_SPI_Init+0x240>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d00a      	beq.n	8008f2a <HAL_SPI_Init+0x42>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a84      	ldr	r2, [pc, #528]	; (800912c <HAL_SPI_Init+0x244>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d005      	beq.n	8008f2a <HAL_SPI_Init+0x42>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	2b0f      	cmp	r3, #15
 8008f24:	d901      	bls.n	8008f2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e0f7      	b.n	800911a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fe82 	bl	8009c34 <SPI_GetPacketSize>
 8008f30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a7b      	ldr	r2, [pc, #492]	; (8009124 <HAL_SPI_Init+0x23c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00c      	beq.n	8008f56 <HAL_SPI_Init+0x6e>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a79      	ldr	r2, [pc, #484]	; (8009128 <HAL_SPI_Init+0x240>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d007      	beq.n	8008f56 <HAL_SPI_Init+0x6e>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a78      	ldr	r2, [pc, #480]	; (800912c <HAL_SPI_Init+0x244>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d002      	beq.n	8008f56 <HAL_SPI_Init+0x6e>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	d811      	bhi.n	8008f7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f5a:	4a72      	ldr	r2, [pc, #456]	; (8009124 <HAL_SPI_Init+0x23c>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d009      	beq.n	8008f74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a70      	ldr	r2, [pc, #448]	; (8009128 <HAL_SPI_Init+0x240>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d004      	beq.n	8008f74 <HAL_SPI_Init+0x8c>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a6f      	ldr	r2, [pc, #444]	; (800912c <HAL_SPI_Init+0x244>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d104      	bne.n	8008f7e <HAL_SPI_Init+0x96>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b10      	cmp	r3, #16
 8008f78:	d901      	bls.n	8008f7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e0cd      	b.n	800911a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d106      	bne.n	8008f98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7f8 fd3c 	bl	8001a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 0201 	bic.w	r2, r2, #1
 8008fae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008fba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fc4:	d119      	bne.n	8008ffa <HAL_SPI_Init+0x112>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fce:	d103      	bne.n	8008fd8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d008      	beq.n	8008fea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10c      	bne.n	8008ffa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fe8:	d107      	bne.n	8008ffa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ff8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00f      	beq.n	8009026 <HAL_SPI_Init+0x13e>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	2b06      	cmp	r3, #6
 800900c:	d90b      	bls.n	8009026 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	e007      	b.n	8009036 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009034:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69da      	ldr	r2, [r3, #28]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903e:	431a      	orrs	r2, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009048:	ea42 0103 	orr.w	r1, r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	431a      	orrs	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	431a      	orrs	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800908a:	431a      	orrs	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	431a      	orrs	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009096:	ea42 0103 	orr.w	r1, r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d113      	bne.n	80090d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f022 0201 	bic.w	r2, r2, #1
 80090e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	40013000 	.word	0x40013000
 8009128:	40003800 	.word	0x40003800
 800912c:	40003c00 	.word	0x40003c00

08009130 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	4613      	mov	r3, r2
 800913c:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <HAL_SPI_Transmit_IT+0x1a>
 8009144:	88fb      	ldrh	r3, [r7, #6]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e08b      	b.n	8009266 <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b01      	cmp	r3, #1
 8009158:	d001      	beq.n	800915e <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800915a:	2302      	movs	r3, #2
 800915c:	e083      	b.n	8009266 <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009164:	2b01      	cmp	r3, #1
 8009166:	d101      	bne.n	800916c <HAL_SPI_Transmit_IT+0x3c>
 8009168:	2302      	movs	r3, #2
 800916a:	e07c      	b.n	8009266 <HAL_SPI_Transmit_IT+0x136>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2203      	movs	r2, #3
 8009178:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	88fa      	ldrh	r2, [r7, #6]
 800918e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	88fa      	ldrh	r2, [r7, #6]
 8009196:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	2b0f      	cmp	r3, #15
 80091bc:	d903      	bls.n	80091c6 <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4a2c      	ldr	r2, [pc, #176]	; (8009274 <HAL_SPI_Transmit_IT+0x144>)
 80091c2:	675a      	str	r2, [r3, #116]	; 0x74
 80091c4:	e00a      	b.n	80091dc <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	2b07      	cmp	r3, #7
 80091cc:	d903      	bls.n	80091d6 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4a29      	ldr	r2, [pc, #164]	; (8009278 <HAL_SPI_Transmit_IT+0x148>)
 80091d2:	675a      	str	r2, [r3, #116]	; 0x74
 80091d4:	e002      	b.n	80091dc <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	4a28      	ldr	r2, [pc, #160]	; (800927c <HAL_SPI_Transmit_IT+0x14c>)
 80091da:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80091e4:	d108      	bne.n	80091f8 <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	e009      	b.n	800920c <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800920a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	4b1b      	ldr	r3, [pc, #108]	; (8009280 <HAL_SPI_Transmit_IT+0x150>)
 8009214:	4013      	ands	r3, r2
 8009216:	88f9      	ldrh	r1, [r7, #6]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	6812      	ldr	r2, [r2, #0]
 800921c:	430b      	orrs	r3, r1
 800921e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0201 	orr.w	r2, r2, #1
 800922e:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6919      	ldr	r1, [r3, #16]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	f240 732a 	movw	r3, #1834	; 0x72a
 8009246:	430b      	orrs	r3, r1
 8009248:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009252:	d107      	bne.n	8009264 <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009262:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	08009a9d 	.word	0x08009a9d
 8009278:	08009a3f 	.word	0x08009a3f
 800927c:	080099e5 	.word	0x080099e5
 8009280:	ffff0000 	.word	0xffff0000

08009284 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	4613      	mov	r3, r2
 8009290:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b01      	cmp	r3, #1
 800929c:	d001      	beq.n	80092a2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800929e:	2302      	movs	r3, #2
 80092a0:	e126      	b.n	80094f0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <HAL_SPI_Transmit_DMA+0x2a>
 80092a8:	88fb      	ldrh	r3, [r7, #6]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e11e      	b.n	80094f0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d101      	bne.n	80092c0 <HAL_SPI_Transmit_DMA+0x3c>
 80092bc:	2302      	movs	r3, #2
 80092be:	e117      	b.n	80094f0 <HAL_SPI_Transmit_DMA+0x26c>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2203      	movs	r2, #3
 80092cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	88fa      	ldrh	r2, [r7, #6]
 80092e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	88fa      	ldrh	r2, [r7, #6]
 80092ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009318:	d108      	bne.n	800932c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	e009      	b.n	8009340 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800933e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	2b0f      	cmp	r3, #15
 8009346:	d905      	bls.n	8009354 <HAL_SPI_Transmit_DMA+0xd0>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009352:	d10f      	bne.n	8009374 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009358:	2b07      	cmp	r3, #7
 800935a:	d911      	bls.n	8009380 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009366:	d00b      	beq.n	8009380 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800936c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800936e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009372:	d005      	beq.n	8009380 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e0b7      	b.n	80094f0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	2b07      	cmp	r3, #7
 8009386:	d820      	bhi.n	80093ca <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009392:	d109      	bne.n	80093a8 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800939a:	b29b      	uxth	r3, r3
 800939c:	3301      	adds	r3, #1
 800939e:	105b      	asrs	r3, r3, #1
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093b2:	d11e      	bne.n	80093f2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	3303      	adds	r3, #3
 80093be:	109b      	asrs	r3, r3, #2
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093c8:	e013      	b.n	80093f2 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	2b0f      	cmp	r3, #15
 80093d0:	d80f      	bhi.n	80093f2 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093dc:	d109      	bne.n	80093f2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	3301      	adds	r3, #1
 80093e8:	105b      	asrs	r3, r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093f6:	4a40      	ldr	r2, [pc, #256]	; (80094f8 <HAL_SPI_Transmit_DMA+0x274>)
 80093f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093fe:	4a3f      	ldr	r2, [pc, #252]	; (80094fc <HAL_SPI_Transmit_DMA+0x278>)
 8009400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009406:	4a3e      	ldr	r2, [pc, #248]	; (8009500 <HAL_SPI_Transmit_DMA+0x27c>)
 8009408:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800940e:	2200      	movs	r2, #0
 8009410:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009420:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800942a:	4619      	mov	r1, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3320      	adds	r3, #32
 8009432:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800943a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800943c:	f7f9 fef6 	bl	800322c <HAL_DMA_Start_IT>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d011      	beq.n	800946a <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800944c:	f043 0210 	orr.w	r2, r3, #16
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e042      	b.n	80094f0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009474:	d108      	bne.n	8009488 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6859      	ldr	r1, [r3, #4]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	4b20      	ldr	r3, [pc, #128]	; (8009504 <HAL_SPI_Transmit_DMA+0x280>)
 8009482:	400b      	ands	r3, r1
 8009484:	6053      	str	r3, [r2, #4]
 8009486:	e009      	b.n	800949c <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	4b1d      	ldr	r3, [pc, #116]	; (8009504 <HAL_SPI_Transmit_DMA+0x280>)
 8009490:	4013      	ands	r3, r2
 8009492:	88f9      	ldrh	r1, [r7, #6]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	6812      	ldr	r2, [r2, #0]
 8009498:	430b      	orrs	r3, r1
 800949a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689a      	ldr	r2, [r3, #8]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094aa:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	691a      	ldr	r2, [r3, #16]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80094ba:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0201 	orr.w	r2, r2, #1
 80094ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094d4:	d107      	bne.n	80094e6 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094e4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	0800994f 	.word	0x0800994f
 80094fc:	08009909 	.word	0x08009909
 8009500:	0800996b 	.word	0x0800996b
 8009504:	ffff0000 	.word	0xffff0000

08009508 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009520:	6a3a      	ldr	r2, [r7, #32]
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	4013      	ands	r3, r2
 8009526:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009530:	2300      	movs	r3, #0
 8009532:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800953a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3330      	adds	r3, #48	; 0x30
 8009542:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800954a:	2b00      	cmp	r3, #0
 800954c:	d010      	beq.n	8009570 <HAL_SPI_IRQHandler+0x68>
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	f003 0308 	and.w	r3, r3, #8
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00b      	beq.n	8009570 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	699a      	ldr	r2, [r3, #24]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009566:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f9c3 	bl	80098f4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800956e:	e192      	b.n	8009896 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009576:	2b00      	cmp	r3, #0
 8009578:	d113      	bne.n	80095a2 <HAL_SPI_IRQHandler+0x9a>
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	f003 0320 	and.w	r3, r3, #32
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10e      	bne.n	80095a2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	4798      	blx	r3
    handled = 1UL;
 800959e:	2301      	movs	r3, #1
 80095a0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10f      	bne.n	80095cc <HAL_SPI_IRQHandler+0xc4>
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d105      	bne.n	80095cc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	4798      	blx	r3
    handled = 1UL;
 80095c8:	2301      	movs	r3, #1
 80095ca:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10f      	bne.n	80095f6 <HAL_SPI_IRQHandler+0xee>
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00a      	beq.n	80095f6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	4798      	blx	r3
    handled = 1UL;
 80095f2:	2301      	movs	r3, #1
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f040 8147 	bne.w	800988c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	f003 0308 	and.w	r3, r3, #8
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 808b 	beq.w	8009720 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	699a      	ldr	r2, [r3, #24]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f042 0208 	orr.w	r2, r2, #8
 8009618:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	699a      	ldr	r2, [r3, #24]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f042 0210 	orr.w	r2, r2, #16
 8009628:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	699a      	ldr	r2, [r3, #24]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009638:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	691a      	ldr	r2, [r3, #16]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f022 0208 	bic.w	r2, r2, #8
 8009648:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d13d      	bne.n	80096d4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009658:	e036      	b.n	80096c8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	2b0f      	cmp	r3, #15
 8009660:	d90b      	bls.n	800967a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800966a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800966c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009672:	1d1a      	adds	r2, r3, #4
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	665a      	str	r2, [r3, #100]	; 0x64
 8009678:	e01d      	b.n	80096b6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	2b07      	cmp	r3, #7
 8009680:	d90b      	bls.n	800969a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	8812      	ldrh	r2, [r2, #0]
 800968a:	b292      	uxth	r2, r2
 800968c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009692:	1c9a      	adds	r2, r3, #2
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	665a      	str	r2, [r3, #100]	; 0x64
 8009698:	e00d      	b.n	80096b6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096a6:	7812      	ldrb	r2, [r2, #0]
 80096a8:	b2d2      	uxtb	r2, r2
 80096aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096bc:	b29b      	uxth	r3, r3
 80096be:	3b01      	subs	r3, #1
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1c2      	bne.n	800965a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fa0d 	bl	8009af4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f8f7 	bl	80098e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80096f2:	e0d0      	b.n	8009896 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80096f4:	7cfb      	ldrb	r3, [r7, #19]
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	d103      	bne.n	8009702 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f8dc 	bl	80098b8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009700:	e0c6      	b.n	8009890 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009702:	7cfb      	ldrb	r3, [r7, #19]
 8009704:	2b04      	cmp	r3, #4
 8009706:	d103      	bne.n	8009710 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f8cb 	bl	80098a4 <HAL_SPI_RxCpltCallback>
    return;
 800970e:	e0bf      	b.n	8009890 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009710:	7cfb      	ldrb	r3, [r7, #19]
 8009712:	2b03      	cmp	r3, #3
 8009714:	f040 80bc 	bne.w	8009890 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7f7 fe03 	bl	8001324 <HAL_SPI_TxCpltCallback>
    return;
 800971e:	e0b7      	b.n	8009890 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 80b5 	beq.w	8009896 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00f      	beq.n	8009756 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800973c:	f043 0204 	orr.w	r2, r3, #4
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009754:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00f      	beq.n	8009780 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009766:	f043 0201 	orr.w	r2, r3, #1
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	699a      	ldr	r2, [r3, #24]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800977e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00f      	beq.n	80097aa <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009790:	f043 0208 	orr.w	r2, r3, #8
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	699a      	ldr	r2, [r3, #24]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00f      	beq.n	80097d4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	699a      	ldr	r2, [r3, #24]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0220 	orr.w	r2, r2, #32
 80097d2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d05a      	beq.n	8009894 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f022 0201 	bic.w	r2, r2, #1
 80097ec:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6919      	ldr	r1, [r3, #16]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	4b28      	ldr	r3, [pc, #160]	; (800989c <HAL_SPI_IRQHandler+0x394>)
 80097fa:	400b      	ands	r3, r1
 80097fc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009804:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009808:	d138      	bne.n	800987c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009818:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800981e:	2b00      	cmp	r3, #0
 8009820:	d013      	beq.n	800984a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009826:	4a1e      	ldr	r2, [pc, #120]	; (80098a0 <HAL_SPI_IRQHandler+0x398>)
 8009828:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800982e:	4618      	mov	r0, r3
 8009830:	f7fa fa84 	bl	8003d3c <HAL_DMA_Abort_IT>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d007      	beq.n	800984a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009840:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800984e:	2b00      	cmp	r3, #0
 8009850:	d020      	beq.n	8009894 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009856:	4a12      	ldr	r2, [pc, #72]	; (80098a0 <HAL_SPI_IRQHandler+0x398>)
 8009858:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800985e:	4618      	mov	r0, r3
 8009860:	f7fa fa6c 	bl	8003d3c <HAL_DMA_Abort_IT>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d014      	beq.n	8009894 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009870:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800987a:	e00b      	b.n	8009894 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f82b 	bl	80098e0 <HAL_SPI_ErrorCallback>
    return;
 800988a:	e003      	b.n	8009894 <HAL_SPI_IRQHandler+0x38c>
    return;
 800988c:	bf00      	nop
 800988e:	e002      	b.n	8009896 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009890:	bf00      	nop
 8009892:	e000      	b.n	8009896 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009894:	bf00      	nop
  }
}
 8009896:	3728      	adds	r7, #40	; 0x28
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	fffffc94 	.word	0xfffffc94
 80098a0:	080099b1 	.word	0x080099b1

080098a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009914:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b07      	cmp	r3, #7
 8009920:	d011      	beq.n	8009946 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800992c:	d103      	bne.n	8009936 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f7f7 fcf8 	bl	8001324 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009934:	e007      	b.n	8009946 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691a      	ldr	r2, [r3, #16]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f042 0208 	orr.w	r2, r2, #8
 8009944:	611a      	str	r2, [r3, #16]
}
 8009946:	bf00      	nop
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f7ff ffb5 	bl	80098cc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009976:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7fb fb4f 	bl	800501c <HAL_DMA_GetError>
 800997e:	4603      	mov	r3, r0
 8009980:	2b02      	cmp	r3, #2
 8009982:	d011      	beq.n	80099a8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 f8b5 	bl	8009af4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009990:	f043 0210 	orr.w	r2, r3, #16
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f7ff ff9c 	bl	80098e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80099a8:	bf00      	nop
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f7ff ff82 	bl	80098e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3320      	adds	r3, #32
 80099f6:	7812      	ldrb	r2, [r2, #0]
 80099f8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d107      	bne.n	8009a32 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	691a      	ldr	r2, [r3, #16]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0202 	bic.w	r2, r2, #2
 8009a30:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009a32:	bf00      	nop
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3320      	adds	r3, #32
 8009a4c:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a52:	881a      	ldrh	r2, [r3, #0]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a5c:	1c9a      	adds	r2, r3, #2
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d107      	bne.n	8009a90 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	691a      	ldr	r2, [r3, #16]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 0202 	bic.w	r2, r2, #2
 8009a8e:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009a90:	bf00      	nop
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6812      	ldr	r2, [r2, #0]
 8009aae:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab4:	1d1a      	adds	r2, r3, #4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d107      	bne.n	8009ae8 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	691a      	ldr	r2, [r3, #16]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0202 	bic.w	r2, r2, #2
 8009ae6:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f042 0208 	orr.w	r2, r2, #8
 8009b12:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	699a      	ldr	r2, [r3, #24]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f042 0210 	orr.w	r2, r2, #16
 8009b22:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 0201 	bic.w	r2, r2, #1
 8009b32:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6919      	ldr	r1, [r3, #16]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	4b3c      	ldr	r3, [pc, #240]	; (8009c30 <SPI_CloseTransfer+0x13c>)
 8009b40:	400b      	ands	r3, r1
 8009b42:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689a      	ldr	r2, [r3, #8]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009b52:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	d014      	beq.n	8009b8a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f003 0320 	and.w	r3, r3, #32
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00f      	beq.n	8009b8a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699a      	ldr	r2, [r3, #24]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f042 0220 	orr.w	r2, r2, #32
 8009b88:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d014      	beq.n	8009bc0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00f      	beq.n	8009bc0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ba6:	f043 0204 	orr.w	r2, r3, #4
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	699a      	ldr	r2, [r3, #24]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bbe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00f      	beq.n	8009bea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bd0:	f043 0201 	orr.w	r2, r3, #1
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	699a      	ldr	r2, [r3, #24]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00f      	beq.n	8009c14 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bfa:	f043 0208 	orr.w	r2, r3, #8
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699a      	ldr	r2, [r3, #24]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c12:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009c24:	bf00      	nop
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	fffffc90 	.word	0xfffffc90

08009c34 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c40:	095b      	lsrs	r3, r3, #5
 8009c42:	3301      	adds	r3, #1
 8009c44:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	3307      	adds	r3, #7
 8009c52:	08db      	lsrs	r3, r3, #3
 8009c54:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e049      	b.n	8009d10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7f8 f8b9 	bl	8001e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2202      	movs	r2, #2
 8009c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f000 f965 	bl	8009f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d020      	beq.n	8009d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01b      	beq.n	8009d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f06f 0202 	mvn.w	r2, #2
 8009d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f8e9 	bl	8009f3a <HAL_TIM_IC_CaptureCallback>
 8009d68:	e005      	b.n	8009d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f8db 	bl	8009f26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f8ec 	bl	8009f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f003 0304 	and.w	r3, r3, #4
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d020      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01b      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f06f 0204 	mvn.w	r2, #4
 8009d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f8c3 	bl	8009f3a <HAL_TIM_IC_CaptureCallback>
 8009db4:	e005      	b.n	8009dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f8b5 	bl	8009f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f8c6 	bl	8009f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f003 0308 	and.w	r3, r3, #8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d020      	beq.n	8009e14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f003 0308 	and.w	r3, r3, #8
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01b      	beq.n	8009e14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f06f 0208 	mvn.w	r2, #8
 8009de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2204      	movs	r2, #4
 8009dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f89d 	bl	8009f3a <HAL_TIM_IC_CaptureCallback>
 8009e00:	e005      	b.n	8009e0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f88f 	bl	8009f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f8a0 	bl	8009f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f003 0310 	and.w	r3, r3, #16
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d020      	beq.n	8009e60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01b      	beq.n	8009e60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f06f 0210 	mvn.w	r2, #16
 8009e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2208      	movs	r2, #8
 8009e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f877 	bl	8009f3a <HAL_TIM_IC_CaptureCallback>
 8009e4c:	e005      	b.n	8009e5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f869 	bl	8009f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f87a 	bl	8009f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00c      	beq.n	8009e84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d007      	beq.n	8009e84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f06f 0201 	mvn.w	r2, #1
 8009e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7f7 f9de 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d104      	bne.n	8009e98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00c      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d007      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8009eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f91f 	bl	800a0f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00c      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d007      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f917 	bl	800a104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00c      	beq.n	8009efa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d007      	beq.n	8009efa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f834 	bl	8009f62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f003 0320 	and.w	r3, r3, #32
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00c      	beq.n	8009f1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f003 0320 	and.w	r3, r3, #32
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d007      	beq.n	8009f1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f06f 0220 	mvn.w	r2, #32
 8009f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f8df 	bl	800a0dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f1e:	bf00      	nop
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f6a:	bf00      	nop
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
	...

08009f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a4a      	ldr	r2, [pc, #296]	; (800a0b4 <TIM_Base_SetConfig+0x13c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d013      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f96:	d00f      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a47      	ldr	r2, [pc, #284]	; (800a0b8 <TIM_Base_SetConfig+0x140>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d00b      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a46      	ldr	r2, [pc, #280]	; (800a0bc <TIM_Base_SetConfig+0x144>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d007      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a45      	ldr	r2, [pc, #276]	; (800a0c0 <TIM_Base_SetConfig+0x148>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d003      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a44      	ldr	r2, [pc, #272]	; (800a0c4 <TIM_Base_SetConfig+0x14c>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d108      	bne.n	8009fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a39      	ldr	r2, [pc, #228]	; (800a0b4 <TIM_Base_SetConfig+0x13c>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d027      	beq.n	800a022 <TIM_Base_SetConfig+0xaa>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd8:	d023      	beq.n	800a022 <TIM_Base_SetConfig+0xaa>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a36      	ldr	r2, [pc, #216]	; (800a0b8 <TIM_Base_SetConfig+0x140>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d01f      	beq.n	800a022 <TIM_Base_SetConfig+0xaa>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a35      	ldr	r2, [pc, #212]	; (800a0bc <TIM_Base_SetConfig+0x144>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d01b      	beq.n	800a022 <TIM_Base_SetConfig+0xaa>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a34      	ldr	r2, [pc, #208]	; (800a0c0 <TIM_Base_SetConfig+0x148>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d017      	beq.n	800a022 <TIM_Base_SetConfig+0xaa>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a33      	ldr	r2, [pc, #204]	; (800a0c4 <TIM_Base_SetConfig+0x14c>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d013      	beq.n	800a022 <TIM_Base_SetConfig+0xaa>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a32      	ldr	r2, [pc, #200]	; (800a0c8 <TIM_Base_SetConfig+0x150>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d00f      	beq.n	800a022 <TIM_Base_SetConfig+0xaa>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a31      	ldr	r2, [pc, #196]	; (800a0cc <TIM_Base_SetConfig+0x154>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d00b      	beq.n	800a022 <TIM_Base_SetConfig+0xaa>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a30      	ldr	r2, [pc, #192]	; (800a0d0 <TIM_Base_SetConfig+0x158>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d007      	beq.n	800a022 <TIM_Base_SetConfig+0xaa>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a2f      	ldr	r2, [pc, #188]	; (800a0d4 <TIM_Base_SetConfig+0x15c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d003      	beq.n	800a022 <TIM_Base_SetConfig+0xaa>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a2e      	ldr	r2, [pc, #184]	; (800a0d8 <TIM_Base_SetConfig+0x160>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d108      	bne.n	800a034 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4313      	orrs	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	4313      	orrs	r3, r2
 800a040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	689a      	ldr	r2, [r3, #8]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a16      	ldr	r2, [pc, #88]	; (800a0b4 <TIM_Base_SetConfig+0x13c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00f      	beq.n	800a080 <TIM_Base_SetConfig+0x108>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a18      	ldr	r2, [pc, #96]	; (800a0c4 <TIM_Base_SetConfig+0x14c>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d00b      	beq.n	800a080 <TIM_Base_SetConfig+0x108>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a17      	ldr	r2, [pc, #92]	; (800a0c8 <TIM_Base_SetConfig+0x150>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d007      	beq.n	800a080 <TIM_Base_SetConfig+0x108>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a16      	ldr	r2, [pc, #88]	; (800a0cc <TIM_Base_SetConfig+0x154>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d003      	beq.n	800a080 <TIM_Base_SetConfig+0x108>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a15      	ldr	r2, [pc, #84]	; (800a0d0 <TIM_Base_SetConfig+0x158>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d103      	bne.n	800a088 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	691a      	ldr	r2, [r3, #16]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b01      	cmp	r3, #1
 800a098:	d105      	bne.n	800a0a6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	f023 0201 	bic.w	r2, r3, #1
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	611a      	str	r2, [r3, #16]
  }
}
 800a0a6:	bf00      	nop
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	40010000 	.word	0x40010000
 800a0b8:	40000400 	.word	0x40000400
 800a0bc:	40000800 	.word	0x40000800
 800a0c0:	40000c00 	.word	0x40000c00
 800a0c4:	40010400 	.word	0x40010400
 800a0c8:	40014000 	.word	0x40014000
 800a0cc:	40014400 	.word	0x40014400
 800a0d0:	40014800 	.word	0x40014800
 800a0d4:	4000e000 	.word	0x4000e000
 800a0d8:	4000e400 	.word	0x4000e400

0800a0dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d101      	bne.n	800a12a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e042      	b.n	800a1b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7f7 fe8b 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2224      	movs	r2, #36	; 0x24
 800a146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0201 	bic.w	r2, r2, #1
 800a158:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d002      	beq.n	800a168 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 faba 	bl	800b6dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fc4b 	bl	800aa04 <UART_SetConfig>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e01b      	b.n	800a1b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689a      	ldr	r2, [r3, #8]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f042 0201 	orr.w	r2, r2, #1
 800a1a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f001 fb39 	bl	800b820 <UART_CheckIdleState>
 800a1ae:	4603      	mov	r3, r0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	; 0x28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1cc:	2b20      	cmp	r3, #32
 800a1ce:	d137      	bne.n	800a240 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <HAL_UART_Receive_IT+0x24>
 800a1d6:	88fb      	ldrh	r3, [r7, #6]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e030      	b.n	800a242 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a18      	ldr	r2, [pc, #96]	; (800a24c <HAL_UART_Receive_IT+0x94>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d01f      	beq.n	800a230 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d018      	beq.n	800a230 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	e853 3f00 	ldrex	r3, [r3]
 800a20a:	613b      	str	r3, [r7, #16]
   return(result);
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	461a      	mov	r2, r3
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	623b      	str	r3, [r7, #32]
 800a21e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a220:	69f9      	ldr	r1, [r7, #28]
 800a222:	6a3a      	ldr	r2, [r7, #32]
 800a224:	e841 2300 	strex	r3, r2, [r1]
 800a228:	61bb      	str	r3, [r7, #24]
   return(result);
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1e6      	bne.n	800a1fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	461a      	mov	r2, r3
 800a234:	68b9      	ldr	r1, [r7, #8]
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f001 fc0a 	bl	800ba50 <UART_Start_Receive_IT>
 800a23c:	4603      	mov	r3, r0
 800a23e:	e000      	b.n	800a242 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a240:	2302      	movs	r3, #2
  }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3728      	adds	r7, #40	; 0x28
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	58000c00 	.word	0x58000c00

0800a250 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b0ba      	sub	sp, #232	; 0xe8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a276:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a27a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a27e:	4013      	ands	r3, r2
 800a280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d11b      	bne.n	800a2c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a28c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a290:	f003 0320 	and.w	r3, r3, #32
 800a294:	2b00      	cmp	r3, #0
 800a296:	d015      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a29c:	f003 0320 	and.w	r3, r3, #32
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a2a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d009      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 8377 	beq.w	800a9a8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	4798      	blx	r3
      }
      return;
 800a2c2:	e371      	b.n	800a9a8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a2c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 8123 	beq.w	800a514 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a2ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a2d2:	4b8d      	ldr	r3, [pc, #564]	; (800a508 <HAL_UART_IRQHandler+0x2b8>)
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a2da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a2de:	4b8b      	ldr	r3, [pc, #556]	; (800a50c <HAL_UART_IRQHandler+0x2bc>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 8116 	beq.w	800a514 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d011      	beq.n	800a318 <HAL_UART_IRQHandler+0xc8>
 800a2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00b      	beq.n	800a318 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2201      	movs	r2, #1
 800a306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a30e:	f043 0201 	orr.w	r2, r3, #1
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b00      	cmp	r3, #0
 800a322:	d011      	beq.n	800a348 <HAL_UART_IRQHandler+0xf8>
 800a324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00b      	beq.n	800a348 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2202      	movs	r2, #2
 800a336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33e:	f043 0204 	orr.w	r2, r3, #4
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a34c:	f003 0304 	and.w	r3, r3, #4
 800a350:	2b00      	cmp	r3, #0
 800a352:	d011      	beq.n	800a378 <HAL_UART_IRQHandler+0x128>
 800a354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a358:	f003 0301 	and.w	r3, r3, #1
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00b      	beq.n	800a378 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2204      	movs	r2, #4
 800a366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a36e:	f043 0202 	orr.w	r2, r3, #2
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b00      	cmp	r3, #0
 800a382:	d017      	beq.n	800a3b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a388:	f003 0320 	and.w	r3, r3, #32
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d105      	bne.n	800a39c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a390:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a394:	4b5c      	ldr	r3, [pc, #368]	; (800a508 <HAL_UART_IRQHandler+0x2b8>)
 800a396:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00b      	beq.n	800a3b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2208      	movs	r2, #8
 800a3a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3aa:	f043 0208 	orr.w	r2, r3, #8
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d012      	beq.n	800a3e6 <HAL_UART_IRQHandler+0x196>
 800a3c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00c      	beq.n	800a3e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3dc:	f043 0220 	orr.w	r2, r3, #32
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 82dd 	beq.w	800a9ac <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3f6:	f003 0320 	and.w	r3, r3, #32
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d013      	beq.n	800a426 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	d105      	bne.n	800a416 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a40a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d007      	beq.n	800a426 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a42c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43a:	2b40      	cmp	r3, #64	; 0x40
 800a43c:	d005      	beq.n	800a44a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a43e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a442:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a446:	2b00      	cmp	r3, #0
 800a448:	d054      	beq.n	800a4f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 fc22 	bl	800bc94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a45a:	2b40      	cmp	r3, #64	; 0x40
 800a45c:	d146      	bne.n	800a4ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3308      	adds	r3, #8
 800a464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a468:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a46c:	e853 3f00 	ldrex	r3, [r3]
 800a470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a47c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a48a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a48e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a4a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1d9      	bne.n	800a45e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d017      	beq.n	800a4e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4ba:	4a15      	ldr	r2, [pc, #84]	; (800a510 <HAL_UART_IRQHandler+0x2c0>)
 800a4bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7f9 fc39 	bl	8003d3c <HAL_DMA_Abort_IT>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d019      	beq.n	800a504 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a4de:	4610      	mov	r0, r2
 800a4e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4e2:	e00f      	b.n	800a504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fa77 	bl	800a9d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ea:	e00b      	b.n	800a504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fa73 	bl	800a9d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4f2:	e007      	b.n	800a504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fa6f 	bl	800a9d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a502:	e253      	b.n	800a9ac <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a504:	bf00      	nop
    return;
 800a506:	e251      	b.n	800a9ac <HAL_UART_IRQHandler+0x75c>
 800a508:	10000001 	.word	0x10000001
 800a50c:	04000120 	.word	0x04000120
 800a510:	0800bd61 	.word	0x0800bd61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a518:	2b01      	cmp	r3, #1
 800a51a:	f040 81e7 	bne.w	800a8ec <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a522:	f003 0310 	and.w	r3, r3, #16
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 81e0 	beq.w	800a8ec <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a52c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a530:	f003 0310 	and.w	r3, r3, #16
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 81d9 	beq.w	800a8ec <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2210      	movs	r2, #16
 800a540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54c:	2b40      	cmp	r3, #64	; 0x40
 800a54e:	f040 8151 	bne.w	800a7f4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a96      	ldr	r2, [pc, #600]	; (800a7b4 <HAL_UART_IRQHandler+0x564>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d068      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a93      	ldr	r2, [pc, #588]	; (800a7b8 <HAL_UART_IRQHandler+0x568>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d061      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a91      	ldr	r2, [pc, #580]	; (800a7bc <HAL_UART_IRQHandler+0x56c>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d05a      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a8e      	ldr	r2, [pc, #568]	; (800a7c0 <HAL_UART_IRQHandler+0x570>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d053      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a8c      	ldr	r2, [pc, #560]	; (800a7c4 <HAL_UART_IRQHandler+0x574>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d04c      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a89      	ldr	r2, [pc, #548]	; (800a7c8 <HAL_UART_IRQHandler+0x578>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d045      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a87      	ldr	r2, [pc, #540]	; (800a7cc <HAL_UART_IRQHandler+0x57c>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d03e      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a84      	ldr	r2, [pc, #528]	; (800a7d0 <HAL_UART_IRQHandler+0x580>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d037      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a82      	ldr	r2, [pc, #520]	; (800a7d4 <HAL_UART_IRQHandler+0x584>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d030      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a7f      	ldr	r2, [pc, #508]	; (800a7d8 <HAL_UART_IRQHandler+0x588>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d029      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a7d      	ldr	r2, [pc, #500]	; (800a7dc <HAL_UART_IRQHandler+0x58c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d022      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a7a      	ldr	r2, [pc, #488]	; (800a7e0 <HAL_UART_IRQHandler+0x590>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d01b      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a78      	ldr	r2, [pc, #480]	; (800a7e4 <HAL_UART_IRQHandler+0x594>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d014      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a75      	ldr	r2, [pc, #468]	; (800a7e8 <HAL_UART_IRQHandler+0x598>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d00d      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a73      	ldr	r2, [pc, #460]	; (800a7ec <HAL_UART_IRQHandler+0x59c>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d006      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a70      	ldr	r2, [pc, #448]	; (800a7f0 <HAL_UART_IRQHandler+0x5a0>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d106      	bne.n	800a640 <HAL_UART_IRQHandler+0x3f0>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	e005      	b.n	800a64c <HAL_UART_IRQHandler+0x3fc>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 81ab 	beq.w	800a9b0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a660:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a664:	429a      	cmp	r2, r3
 800a666:	f080 81a3 	bcs.w	800a9b0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a670:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a680:	f000 8087 	beq.w	800a792 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a69c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a6ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a6b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a6ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a6be:	e841 2300 	strex	r3, r2, [r1]
 800a6c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a6c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1da      	bne.n	800a684 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	3308      	adds	r3, #8
 800a6d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6d8:	e853 3f00 	ldrex	r3, [r3]
 800a6dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a6de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6e0:	f023 0301 	bic.w	r3, r3, #1
 800a6e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a6f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a6f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a6fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6fe:	e841 2300 	strex	r3, r2, [r1]
 800a702:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1e1      	bne.n	800a6ce <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a71a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a71c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3308      	adds	r3, #8
 800a72a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a72e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a730:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a734:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a73c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e3      	bne.n	800a70a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2220      	movs	r2, #32
 800a746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a758:	e853 3f00 	ldrex	r3, [r3]
 800a75c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a75e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a760:	f023 0310 	bic.w	r3, r3, #16
 800a764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a772:	65bb      	str	r3, [r7, #88]	; 0x58
 800a774:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a776:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a77a:	e841 2300 	strex	r3, r2, [r1]
 800a77e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e4      	bne.n	800a750 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f8 ffb7 	bl	8003700 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2202      	movs	r2, #2
 800a796:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f91d 	bl	800a9ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7b2:	e0fd      	b.n	800a9b0 <HAL_UART_IRQHandler+0x760>
 800a7b4:	40020010 	.word	0x40020010
 800a7b8:	40020028 	.word	0x40020028
 800a7bc:	40020040 	.word	0x40020040
 800a7c0:	40020058 	.word	0x40020058
 800a7c4:	40020070 	.word	0x40020070
 800a7c8:	40020088 	.word	0x40020088
 800a7cc:	400200a0 	.word	0x400200a0
 800a7d0:	400200b8 	.word	0x400200b8
 800a7d4:	40020410 	.word	0x40020410
 800a7d8:	40020428 	.word	0x40020428
 800a7dc:	40020440 	.word	0x40020440
 800a7e0:	40020458 	.word	0x40020458
 800a7e4:	40020470 	.word	0x40020470
 800a7e8:	40020488 	.word	0x40020488
 800a7ec:	400204a0 	.word	0x400204a0
 800a7f0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a800:	b29b      	uxth	r3, r3
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a80e:	b29b      	uxth	r3, r3
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 80cf 	beq.w	800a9b4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a816:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 80ca 	beq.w	800a9b4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a842:	647b      	str	r3, [r7, #68]	; 0x44
 800a844:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a846:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a84a:	e841 2300 	strex	r3, r2, [r1]
 800a84e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1e4      	bne.n	800a820 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3308      	adds	r3, #8
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	e853 3f00 	ldrex	r3, [r3]
 800a864:	623b      	str	r3, [r7, #32]
   return(result);
 800a866:	6a3a      	ldr	r2, [r7, #32]
 800a868:	4b55      	ldr	r3, [pc, #340]	; (800a9c0 <HAL_UART_IRQHandler+0x770>)
 800a86a:	4013      	ands	r3, r2
 800a86c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3308      	adds	r3, #8
 800a876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a87a:	633a      	str	r2, [r7, #48]	; 0x30
 800a87c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a882:	e841 2300 	strex	r3, r2, [r1]
 800a886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1e3      	bne.n	800a856 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2220      	movs	r2, #32
 800a892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	e853 3f00 	ldrex	r3, [r3]
 800a8ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0310 	bic.w	r3, r3, #16
 800a8b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8c4:	61fb      	str	r3, [r7, #28]
 800a8c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c8:	69b9      	ldr	r1, [r7, #24]
 800a8ca:	69fa      	ldr	r2, [r7, #28]
 800a8cc:	e841 2300 	strex	r3, r2, [r1]
 800a8d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e4      	bne.n	800a8a2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f881 	bl	800a9ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8ea:	e063      	b.n	800a9b4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00e      	beq.n	800a916 <HAL_UART_IRQHandler+0x6c6>
 800a8f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d008      	beq.n	800a916 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a90c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 ff84 	bl	800c81c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a914:	e051      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a91a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d014      	beq.n	800a94c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d105      	bne.n	800a93a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a92e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a932:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d008      	beq.n	800a94c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d03a      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	4798      	blx	r3
    }
    return;
 800a94a:	e035      	b.n	800a9b8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a954:	2b00      	cmp	r3, #0
 800a956:	d009      	beq.n	800a96c <HAL_UART_IRQHandler+0x71c>
 800a958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f001 fa11 	bl	800bd8c <UART_EndTransmit_IT>
    return;
 800a96a:	e026      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d009      	beq.n	800a98c <HAL_UART_IRQHandler+0x73c>
 800a978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a97c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d003      	beq.n	800a98c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 ff5d 	bl	800c844 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a98a:	e016      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d010      	beq.n	800a9ba <HAL_UART_IRQHandler+0x76a>
 800a998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	da0c      	bge.n	800a9ba <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f001 ff45 	bl	800c830 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9a6:	e008      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
      return;
 800a9a8:	bf00      	nop
 800a9aa:	e006      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
    return;
 800a9ac:	bf00      	nop
 800a9ae:	e004      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
      return;
 800a9b0:	bf00      	nop
 800a9b2:	e002      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
      return;
 800a9b4:	bf00      	nop
 800a9b6:	e000      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
    return;
 800a9b8:	bf00      	nop
  }
}
 800a9ba:	37e8      	adds	r7, #232	; 0xe8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	effffffe 	.word	0xeffffffe

0800a9c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa08:	b092      	sub	sp, #72	; 0x48
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	689a      	ldr	r2, [r3, #8]
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	431a      	orrs	r2, r3
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	431a      	orrs	r2, r3
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	4bbe      	ldr	r3, [pc, #760]	; (800ad2c <UART_SetConfig+0x328>)
 800aa34:	4013      	ands	r3, r2
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	6812      	ldr	r2, [r2, #0]
 800aa3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa3c:	430b      	orrs	r3, r1
 800aa3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	68da      	ldr	r2, [r3, #12]
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4ab3      	ldr	r2, [pc, #716]	; (800ad30 <UART_SetConfig+0x32c>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d004      	beq.n	800aa70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	4baf      	ldr	r3, [pc, #700]	; (800ad34 <UART_SetConfig+0x330>)
 800aa78:	4013      	ands	r3, r2
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	6812      	ldr	r2, [r2, #0]
 800aa7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa80:	430b      	orrs	r3, r1
 800aa82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8a:	f023 010f 	bic.w	r1, r3, #15
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4aa6      	ldr	r2, [pc, #664]	; (800ad38 <UART_SetConfig+0x334>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d177      	bne.n	800ab94 <UART_SetConfig+0x190>
 800aaa4:	4ba5      	ldr	r3, [pc, #660]	; (800ad3c <UART_SetConfig+0x338>)
 800aaa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaac:	2b28      	cmp	r3, #40	; 0x28
 800aaae:	d86d      	bhi.n	800ab8c <UART_SetConfig+0x188>
 800aab0:	a201      	add	r2, pc, #4	; (adr r2, 800aab8 <UART_SetConfig+0xb4>)
 800aab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab6:	bf00      	nop
 800aab8:	0800ab5d 	.word	0x0800ab5d
 800aabc:	0800ab8d 	.word	0x0800ab8d
 800aac0:	0800ab8d 	.word	0x0800ab8d
 800aac4:	0800ab8d 	.word	0x0800ab8d
 800aac8:	0800ab8d 	.word	0x0800ab8d
 800aacc:	0800ab8d 	.word	0x0800ab8d
 800aad0:	0800ab8d 	.word	0x0800ab8d
 800aad4:	0800ab8d 	.word	0x0800ab8d
 800aad8:	0800ab65 	.word	0x0800ab65
 800aadc:	0800ab8d 	.word	0x0800ab8d
 800aae0:	0800ab8d 	.word	0x0800ab8d
 800aae4:	0800ab8d 	.word	0x0800ab8d
 800aae8:	0800ab8d 	.word	0x0800ab8d
 800aaec:	0800ab8d 	.word	0x0800ab8d
 800aaf0:	0800ab8d 	.word	0x0800ab8d
 800aaf4:	0800ab8d 	.word	0x0800ab8d
 800aaf8:	0800ab6d 	.word	0x0800ab6d
 800aafc:	0800ab8d 	.word	0x0800ab8d
 800ab00:	0800ab8d 	.word	0x0800ab8d
 800ab04:	0800ab8d 	.word	0x0800ab8d
 800ab08:	0800ab8d 	.word	0x0800ab8d
 800ab0c:	0800ab8d 	.word	0x0800ab8d
 800ab10:	0800ab8d 	.word	0x0800ab8d
 800ab14:	0800ab8d 	.word	0x0800ab8d
 800ab18:	0800ab75 	.word	0x0800ab75
 800ab1c:	0800ab8d 	.word	0x0800ab8d
 800ab20:	0800ab8d 	.word	0x0800ab8d
 800ab24:	0800ab8d 	.word	0x0800ab8d
 800ab28:	0800ab8d 	.word	0x0800ab8d
 800ab2c:	0800ab8d 	.word	0x0800ab8d
 800ab30:	0800ab8d 	.word	0x0800ab8d
 800ab34:	0800ab8d 	.word	0x0800ab8d
 800ab38:	0800ab7d 	.word	0x0800ab7d
 800ab3c:	0800ab8d 	.word	0x0800ab8d
 800ab40:	0800ab8d 	.word	0x0800ab8d
 800ab44:	0800ab8d 	.word	0x0800ab8d
 800ab48:	0800ab8d 	.word	0x0800ab8d
 800ab4c:	0800ab8d 	.word	0x0800ab8d
 800ab50:	0800ab8d 	.word	0x0800ab8d
 800ab54:	0800ab8d 	.word	0x0800ab8d
 800ab58:	0800ab85 	.word	0x0800ab85
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab62:	e326      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ab64:	2304      	movs	r3, #4
 800ab66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab6a:	e322      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ab6c:	2308      	movs	r3, #8
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab72:	e31e      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ab74:	2310      	movs	r3, #16
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab7a:	e31a      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ab7c:	2320      	movs	r3, #32
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab82:	e316      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ab84:	2340      	movs	r3, #64	; 0x40
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab8a:	e312      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ab8c:	2380      	movs	r3, #128	; 0x80
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab92:	e30e      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a69      	ldr	r2, [pc, #420]	; (800ad40 <UART_SetConfig+0x33c>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d130      	bne.n	800ac00 <UART_SetConfig+0x1fc>
 800ab9e:	4b67      	ldr	r3, [pc, #412]	; (800ad3c <UART_SetConfig+0x338>)
 800aba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aba2:	f003 0307 	and.w	r3, r3, #7
 800aba6:	2b05      	cmp	r3, #5
 800aba8:	d826      	bhi.n	800abf8 <UART_SetConfig+0x1f4>
 800abaa:	a201      	add	r2, pc, #4	; (adr r2, 800abb0 <UART_SetConfig+0x1ac>)
 800abac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb0:	0800abc9 	.word	0x0800abc9
 800abb4:	0800abd1 	.word	0x0800abd1
 800abb8:	0800abd9 	.word	0x0800abd9
 800abbc:	0800abe1 	.word	0x0800abe1
 800abc0:	0800abe9 	.word	0x0800abe9
 800abc4:	0800abf1 	.word	0x0800abf1
 800abc8:	2300      	movs	r3, #0
 800abca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abce:	e2f0      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800abd0:	2304      	movs	r3, #4
 800abd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abd6:	e2ec      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800abd8:	2308      	movs	r3, #8
 800abda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abde:	e2e8      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800abe0:	2310      	movs	r3, #16
 800abe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abe6:	e2e4      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800abe8:	2320      	movs	r3, #32
 800abea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abee:	e2e0      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800abf0:	2340      	movs	r3, #64	; 0x40
 800abf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abf6:	e2dc      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800abf8:	2380      	movs	r3, #128	; 0x80
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abfe:	e2d8      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a4f      	ldr	r2, [pc, #316]	; (800ad44 <UART_SetConfig+0x340>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d130      	bne.n	800ac6c <UART_SetConfig+0x268>
 800ac0a:	4b4c      	ldr	r3, [pc, #304]	; (800ad3c <UART_SetConfig+0x338>)
 800ac0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac0e:	f003 0307 	and.w	r3, r3, #7
 800ac12:	2b05      	cmp	r3, #5
 800ac14:	d826      	bhi.n	800ac64 <UART_SetConfig+0x260>
 800ac16:	a201      	add	r2, pc, #4	; (adr r2, 800ac1c <UART_SetConfig+0x218>)
 800ac18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1c:	0800ac35 	.word	0x0800ac35
 800ac20:	0800ac3d 	.word	0x0800ac3d
 800ac24:	0800ac45 	.word	0x0800ac45
 800ac28:	0800ac4d 	.word	0x0800ac4d
 800ac2c:	0800ac55 	.word	0x0800ac55
 800ac30:	0800ac5d 	.word	0x0800ac5d
 800ac34:	2300      	movs	r3, #0
 800ac36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac3a:	e2ba      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ac3c:	2304      	movs	r3, #4
 800ac3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac42:	e2b6      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ac44:	2308      	movs	r3, #8
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac4a:	e2b2      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ac4c:	2310      	movs	r3, #16
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac52:	e2ae      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ac54:	2320      	movs	r3, #32
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac5a:	e2aa      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ac5c:	2340      	movs	r3, #64	; 0x40
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac62:	e2a6      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ac64:	2380      	movs	r3, #128	; 0x80
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac6a:	e2a2      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a35      	ldr	r2, [pc, #212]	; (800ad48 <UART_SetConfig+0x344>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d130      	bne.n	800acd8 <UART_SetConfig+0x2d4>
 800ac76:	4b31      	ldr	r3, [pc, #196]	; (800ad3c <UART_SetConfig+0x338>)
 800ac78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac7a:	f003 0307 	and.w	r3, r3, #7
 800ac7e:	2b05      	cmp	r3, #5
 800ac80:	d826      	bhi.n	800acd0 <UART_SetConfig+0x2cc>
 800ac82:	a201      	add	r2, pc, #4	; (adr r2, 800ac88 <UART_SetConfig+0x284>)
 800ac84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac88:	0800aca1 	.word	0x0800aca1
 800ac8c:	0800aca9 	.word	0x0800aca9
 800ac90:	0800acb1 	.word	0x0800acb1
 800ac94:	0800acb9 	.word	0x0800acb9
 800ac98:	0800acc1 	.word	0x0800acc1
 800ac9c:	0800acc9 	.word	0x0800acc9
 800aca0:	2300      	movs	r3, #0
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aca6:	e284      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800aca8:	2304      	movs	r3, #4
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acae:	e280      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800acb0:	2308      	movs	r3, #8
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acb6:	e27c      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800acb8:	2310      	movs	r3, #16
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acbe:	e278      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800acc0:	2320      	movs	r3, #32
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acc6:	e274      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800acc8:	2340      	movs	r3, #64	; 0x40
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acce:	e270      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800acd0:	2380      	movs	r3, #128	; 0x80
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acd6:	e26c      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a1b      	ldr	r2, [pc, #108]	; (800ad4c <UART_SetConfig+0x348>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d142      	bne.n	800ad68 <UART_SetConfig+0x364>
 800ace2:	4b16      	ldr	r3, [pc, #88]	; (800ad3c <UART_SetConfig+0x338>)
 800ace4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace6:	f003 0307 	and.w	r3, r3, #7
 800acea:	2b05      	cmp	r3, #5
 800acec:	d838      	bhi.n	800ad60 <UART_SetConfig+0x35c>
 800acee:	a201      	add	r2, pc, #4	; (adr r2, 800acf4 <UART_SetConfig+0x2f0>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad0d 	.word	0x0800ad0d
 800acf8:	0800ad15 	.word	0x0800ad15
 800acfc:	0800ad1d 	.word	0x0800ad1d
 800ad00:	0800ad25 	.word	0x0800ad25
 800ad04:	0800ad51 	.word	0x0800ad51
 800ad08:	0800ad59 	.word	0x0800ad59
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad12:	e24e      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ad14:	2304      	movs	r3, #4
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad1a:	e24a      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ad1c:	2308      	movs	r3, #8
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad22:	e246      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ad24:	2310      	movs	r3, #16
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad2a:	e242      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ad2c:	cfff69f3 	.word	0xcfff69f3
 800ad30:	58000c00 	.word	0x58000c00
 800ad34:	11fff4ff 	.word	0x11fff4ff
 800ad38:	40011000 	.word	0x40011000
 800ad3c:	58024400 	.word	0x58024400
 800ad40:	40004400 	.word	0x40004400
 800ad44:	40004800 	.word	0x40004800
 800ad48:	40004c00 	.word	0x40004c00
 800ad4c:	40005000 	.word	0x40005000
 800ad50:	2320      	movs	r3, #32
 800ad52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad56:	e22c      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ad58:	2340      	movs	r3, #64	; 0x40
 800ad5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad5e:	e228      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ad60:	2380      	movs	r3, #128	; 0x80
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad66:	e224      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4ab1      	ldr	r2, [pc, #708]	; (800b034 <UART_SetConfig+0x630>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d176      	bne.n	800ae60 <UART_SetConfig+0x45c>
 800ad72:	4bb1      	ldr	r3, [pc, #708]	; (800b038 <UART_SetConfig+0x634>)
 800ad74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad7a:	2b28      	cmp	r3, #40	; 0x28
 800ad7c:	d86c      	bhi.n	800ae58 <UART_SetConfig+0x454>
 800ad7e:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <UART_SetConfig+0x380>)
 800ad80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad84:	0800ae29 	.word	0x0800ae29
 800ad88:	0800ae59 	.word	0x0800ae59
 800ad8c:	0800ae59 	.word	0x0800ae59
 800ad90:	0800ae59 	.word	0x0800ae59
 800ad94:	0800ae59 	.word	0x0800ae59
 800ad98:	0800ae59 	.word	0x0800ae59
 800ad9c:	0800ae59 	.word	0x0800ae59
 800ada0:	0800ae59 	.word	0x0800ae59
 800ada4:	0800ae31 	.word	0x0800ae31
 800ada8:	0800ae59 	.word	0x0800ae59
 800adac:	0800ae59 	.word	0x0800ae59
 800adb0:	0800ae59 	.word	0x0800ae59
 800adb4:	0800ae59 	.word	0x0800ae59
 800adb8:	0800ae59 	.word	0x0800ae59
 800adbc:	0800ae59 	.word	0x0800ae59
 800adc0:	0800ae59 	.word	0x0800ae59
 800adc4:	0800ae39 	.word	0x0800ae39
 800adc8:	0800ae59 	.word	0x0800ae59
 800adcc:	0800ae59 	.word	0x0800ae59
 800add0:	0800ae59 	.word	0x0800ae59
 800add4:	0800ae59 	.word	0x0800ae59
 800add8:	0800ae59 	.word	0x0800ae59
 800addc:	0800ae59 	.word	0x0800ae59
 800ade0:	0800ae59 	.word	0x0800ae59
 800ade4:	0800ae41 	.word	0x0800ae41
 800ade8:	0800ae59 	.word	0x0800ae59
 800adec:	0800ae59 	.word	0x0800ae59
 800adf0:	0800ae59 	.word	0x0800ae59
 800adf4:	0800ae59 	.word	0x0800ae59
 800adf8:	0800ae59 	.word	0x0800ae59
 800adfc:	0800ae59 	.word	0x0800ae59
 800ae00:	0800ae59 	.word	0x0800ae59
 800ae04:	0800ae49 	.word	0x0800ae49
 800ae08:	0800ae59 	.word	0x0800ae59
 800ae0c:	0800ae59 	.word	0x0800ae59
 800ae10:	0800ae59 	.word	0x0800ae59
 800ae14:	0800ae59 	.word	0x0800ae59
 800ae18:	0800ae59 	.word	0x0800ae59
 800ae1c:	0800ae59 	.word	0x0800ae59
 800ae20:	0800ae59 	.word	0x0800ae59
 800ae24:	0800ae51 	.word	0x0800ae51
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae2e:	e1c0      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ae30:	2304      	movs	r3, #4
 800ae32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae36:	e1bc      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ae38:	2308      	movs	r3, #8
 800ae3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae3e:	e1b8      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ae40:	2310      	movs	r3, #16
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae46:	e1b4      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ae48:	2320      	movs	r3, #32
 800ae4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae4e:	e1b0      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ae50:	2340      	movs	r3, #64	; 0x40
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae56:	e1ac      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ae58:	2380      	movs	r3, #128	; 0x80
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae5e:	e1a8      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a75      	ldr	r2, [pc, #468]	; (800b03c <UART_SetConfig+0x638>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d130      	bne.n	800aecc <UART_SetConfig+0x4c8>
 800ae6a:	4b73      	ldr	r3, [pc, #460]	; (800b038 <UART_SetConfig+0x634>)
 800ae6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6e:	f003 0307 	and.w	r3, r3, #7
 800ae72:	2b05      	cmp	r3, #5
 800ae74:	d826      	bhi.n	800aec4 <UART_SetConfig+0x4c0>
 800ae76:	a201      	add	r2, pc, #4	; (adr r2, 800ae7c <UART_SetConfig+0x478>)
 800ae78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7c:	0800ae95 	.word	0x0800ae95
 800ae80:	0800ae9d 	.word	0x0800ae9d
 800ae84:	0800aea5 	.word	0x0800aea5
 800ae88:	0800aead 	.word	0x0800aead
 800ae8c:	0800aeb5 	.word	0x0800aeb5
 800ae90:	0800aebd 	.word	0x0800aebd
 800ae94:	2300      	movs	r3, #0
 800ae96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae9a:	e18a      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800ae9c:	2304      	movs	r3, #4
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aea2:	e186      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800aea4:	2308      	movs	r3, #8
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeaa:	e182      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800aeac:	2310      	movs	r3, #16
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeb2:	e17e      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800aeb4:	2320      	movs	r3, #32
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeba:	e17a      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800aebc:	2340      	movs	r3, #64	; 0x40
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aec2:	e176      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800aec4:	2380      	movs	r3, #128	; 0x80
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeca:	e172      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a5b      	ldr	r2, [pc, #364]	; (800b040 <UART_SetConfig+0x63c>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d130      	bne.n	800af38 <UART_SetConfig+0x534>
 800aed6:	4b58      	ldr	r3, [pc, #352]	; (800b038 <UART_SetConfig+0x634>)
 800aed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeda:	f003 0307 	and.w	r3, r3, #7
 800aede:	2b05      	cmp	r3, #5
 800aee0:	d826      	bhi.n	800af30 <UART_SetConfig+0x52c>
 800aee2:	a201      	add	r2, pc, #4	; (adr r2, 800aee8 <UART_SetConfig+0x4e4>)
 800aee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee8:	0800af01 	.word	0x0800af01
 800aeec:	0800af09 	.word	0x0800af09
 800aef0:	0800af11 	.word	0x0800af11
 800aef4:	0800af19 	.word	0x0800af19
 800aef8:	0800af21 	.word	0x0800af21
 800aefc:	0800af29 	.word	0x0800af29
 800af00:	2300      	movs	r3, #0
 800af02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af06:	e154      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800af08:	2304      	movs	r3, #4
 800af0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af0e:	e150      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800af10:	2308      	movs	r3, #8
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af16:	e14c      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800af18:	2310      	movs	r3, #16
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af1e:	e148      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800af20:	2320      	movs	r3, #32
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af26:	e144      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800af28:	2340      	movs	r3, #64	; 0x40
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af2e:	e140      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800af30:	2380      	movs	r3, #128	; 0x80
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af36:	e13c      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a41      	ldr	r2, [pc, #260]	; (800b044 <UART_SetConfig+0x640>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	f040 8082 	bne.w	800b048 <UART_SetConfig+0x644>
 800af44:	4b3c      	ldr	r3, [pc, #240]	; (800b038 <UART_SetConfig+0x634>)
 800af46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af4c:	2b28      	cmp	r3, #40	; 0x28
 800af4e:	d86d      	bhi.n	800b02c <UART_SetConfig+0x628>
 800af50:	a201      	add	r2, pc, #4	; (adr r2, 800af58 <UART_SetConfig+0x554>)
 800af52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af56:	bf00      	nop
 800af58:	0800affd 	.word	0x0800affd
 800af5c:	0800b02d 	.word	0x0800b02d
 800af60:	0800b02d 	.word	0x0800b02d
 800af64:	0800b02d 	.word	0x0800b02d
 800af68:	0800b02d 	.word	0x0800b02d
 800af6c:	0800b02d 	.word	0x0800b02d
 800af70:	0800b02d 	.word	0x0800b02d
 800af74:	0800b02d 	.word	0x0800b02d
 800af78:	0800b005 	.word	0x0800b005
 800af7c:	0800b02d 	.word	0x0800b02d
 800af80:	0800b02d 	.word	0x0800b02d
 800af84:	0800b02d 	.word	0x0800b02d
 800af88:	0800b02d 	.word	0x0800b02d
 800af8c:	0800b02d 	.word	0x0800b02d
 800af90:	0800b02d 	.word	0x0800b02d
 800af94:	0800b02d 	.word	0x0800b02d
 800af98:	0800b00d 	.word	0x0800b00d
 800af9c:	0800b02d 	.word	0x0800b02d
 800afa0:	0800b02d 	.word	0x0800b02d
 800afa4:	0800b02d 	.word	0x0800b02d
 800afa8:	0800b02d 	.word	0x0800b02d
 800afac:	0800b02d 	.word	0x0800b02d
 800afb0:	0800b02d 	.word	0x0800b02d
 800afb4:	0800b02d 	.word	0x0800b02d
 800afb8:	0800b015 	.word	0x0800b015
 800afbc:	0800b02d 	.word	0x0800b02d
 800afc0:	0800b02d 	.word	0x0800b02d
 800afc4:	0800b02d 	.word	0x0800b02d
 800afc8:	0800b02d 	.word	0x0800b02d
 800afcc:	0800b02d 	.word	0x0800b02d
 800afd0:	0800b02d 	.word	0x0800b02d
 800afd4:	0800b02d 	.word	0x0800b02d
 800afd8:	0800b01d 	.word	0x0800b01d
 800afdc:	0800b02d 	.word	0x0800b02d
 800afe0:	0800b02d 	.word	0x0800b02d
 800afe4:	0800b02d 	.word	0x0800b02d
 800afe8:	0800b02d 	.word	0x0800b02d
 800afec:	0800b02d 	.word	0x0800b02d
 800aff0:	0800b02d 	.word	0x0800b02d
 800aff4:	0800b02d 	.word	0x0800b02d
 800aff8:	0800b025 	.word	0x0800b025
 800affc:	2301      	movs	r3, #1
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b002:	e0d6      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b004:	2304      	movs	r3, #4
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b00a:	e0d2      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b00c:	2308      	movs	r3, #8
 800b00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b012:	e0ce      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b014:	2310      	movs	r3, #16
 800b016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b01a:	e0ca      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b01c:	2320      	movs	r3, #32
 800b01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b022:	e0c6      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b024:	2340      	movs	r3, #64	; 0x40
 800b026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b02a:	e0c2      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b02c:	2380      	movs	r3, #128	; 0x80
 800b02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b032:	e0be      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b034:	40011400 	.word	0x40011400
 800b038:	58024400 	.word	0x58024400
 800b03c:	40007800 	.word	0x40007800
 800b040:	40007c00 	.word	0x40007c00
 800b044:	40011800 	.word	0x40011800
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4aad      	ldr	r2, [pc, #692]	; (800b304 <UART_SetConfig+0x900>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d176      	bne.n	800b140 <UART_SetConfig+0x73c>
 800b052:	4bad      	ldr	r3, [pc, #692]	; (800b308 <UART_SetConfig+0x904>)
 800b054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b05a:	2b28      	cmp	r3, #40	; 0x28
 800b05c:	d86c      	bhi.n	800b138 <UART_SetConfig+0x734>
 800b05e:	a201      	add	r2, pc, #4	; (adr r2, 800b064 <UART_SetConfig+0x660>)
 800b060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b064:	0800b109 	.word	0x0800b109
 800b068:	0800b139 	.word	0x0800b139
 800b06c:	0800b139 	.word	0x0800b139
 800b070:	0800b139 	.word	0x0800b139
 800b074:	0800b139 	.word	0x0800b139
 800b078:	0800b139 	.word	0x0800b139
 800b07c:	0800b139 	.word	0x0800b139
 800b080:	0800b139 	.word	0x0800b139
 800b084:	0800b111 	.word	0x0800b111
 800b088:	0800b139 	.word	0x0800b139
 800b08c:	0800b139 	.word	0x0800b139
 800b090:	0800b139 	.word	0x0800b139
 800b094:	0800b139 	.word	0x0800b139
 800b098:	0800b139 	.word	0x0800b139
 800b09c:	0800b139 	.word	0x0800b139
 800b0a0:	0800b139 	.word	0x0800b139
 800b0a4:	0800b119 	.word	0x0800b119
 800b0a8:	0800b139 	.word	0x0800b139
 800b0ac:	0800b139 	.word	0x0800b139
 800b0b0:	0800b139 	.word	0x0800b139
 800b0b4:	0800b139 	.word	0x0800b139
 800b0b8:	0800b139 	.word	0x0800b139
 800b0bc:	0800b139 	.word	0x0800b139
 800b0c0:	0800b139 	.word	0x0800b139
 800b0c4:	0800b121 	.word	0x0800b121
 800b0c8:	0800b139 	.word	0x0800b139
 800b0cc:	0800b139 	.word	0x0800b139
 800b0d0:	0800b139 	.word	0x0800b139
 800b0d4:	0800b139 	.word	0x0800b139
 800b0d8:	0800b139 	.word	0x0800b139
 800b0dc:	0800b139 	.word	0x0800b139
 800b0e0:	0800b139 	.word	0x0800b139
 800b0e4:	0800b129 	.word	0x0800b129
 800b0e8:	0800b139 	.word	0x0800b139
 800b0ec:	0800b139 	.word	0x0800b139
 800b0f0:	0800b139 	.word	0x0800b139
 800b0f4:	0800b139 	.word	0x0800b139
 800b0f8:	0800b139 	.word	0x0800b139
 800b0fc:	0800b139 	.word	0x0800b139
 800b100:	0800b139 	.word	0x0800b139
 800b104:	0800b131 	.word	0x0800b131
 800b108:	2301      	movs	r3, #1
 800b10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b10e:	e050      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b110:	2304      	movs	r3, #4
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b116:	e04c      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b118:	2308      	movs	r3, #8
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b11e:	e048      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b120:	2310      	movs	r3, #16
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b126:	e044      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b128:	2320      	movs	r3, #32
 800b12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b12e:	e040      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b130:	2340      	movs	r3, #64	; 0x40
 800b132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b136:	e03c      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b138:	2380      	movs	r3, #128	; 0x80
 800b13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b13e:	e038      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a71      	ldr	r2, [pc, #452]	; (800b30c <UART_SetConfig+0x908>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d130      	bne.n	800b1ac <UART_SetConfig+0x7a8>
 800b14a:	4b6f      	ldr	r3, [pc, #444]	; (800b308 <UART_SetConfig+0x904>)
 800b14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b14e:	f003 0307 	and.w	r3, r3, #7
 800b152:	2b05      	cmp	r3, #5
 800b154:	d826      	bhi.n	800b1a4 <UART_SetConfig+0x7a0>
 800b156:	a201      	add	r2, pc, #4	; (adr r2, 800b15c <UART_SetConfig+0x758>)
 800b158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15c:	0800b175 	.word	0x0800b175
 800b160:	0800b17d 	.word	0x0800b17d
 800b164:	0800b185 	.word	0x0800b185
 800b168:	0800b18d 	.word	0x0800b18d
 800b16c:	0800b195 	.word	0x0800b195
 800b170:	0800b19d 	.word	0x0800b19d
 800b174:	2302      	movs	r3, #2
 800b176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b17a:	e01a      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b17c:	2304      	movs	r3, #4
 800b17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b182:	e016      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b184:	2308      	movs	r3, #8
 800b186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b18a:	e012      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b18c:	2310      	movs	r3, #16
 800b18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b192:	e00e      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b194:	2320      	movs	r3, #32
 800b196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b19a:	e00a      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b19c:	2340      	movs	r3, #64	; 0x40
 800b19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1a2:	e006      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b1a4:	2380      	movs	r3, #128	; 0x80
 800b1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1aa:	e002      	b.n	800b1b2 <UART_SetConfig+0x7ae>
 800b1ac:	2380      	movs	r3, #128	; 0x80
 800b1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a55      	ldr	r2, [pc, #340]	; (800b30c <UART_SetConfig+0x908>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	f040 80f8 	bne.w	800b3ae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b1c2:	2b20      	cmp	r3, #32
 800b1c4:	dc46      	bgt.n	800b254 <UART_SetConfig+0x850>
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	db75      	blt.n	800b2b6 <UART_SetConfig+0x8b2>
 800b1ca:	3b02      	subs	r3, #2
 800b1cc:	2b1e      	cmp	r3, #30
 800b1ce:	d872      	bhi.n	800b2b6 <UART_SetConfig+0x8b2>
 800b1d0:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <UART_SetConfig+0x7d4>)
 800b1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d6:	bf00      	nop
 800b1d8:	0800b25b 	.word	0x0800b25b
 800b1dc:	0800b2b7 	.word	0x0800b2b7
 800b1e0:	0800b263 	.word	0x0800b263
 800b1e4:	0800b2b7 	.word	0x0800b2b7
 800b1e8:	0800b2b7 	.word	0x0800b2b7
 800b1ec:	0800b2b7 	.word	0x0800b2b7
 800b1f0:	0800b273 	.word	0x0800b273
 800b1f4:	0800b2b7 	.word	0x0800b2b7
 800b1f8:	0800b2b7 	.word	0x0800b2b7
 800b1fc:	0800b2b7 	.word	0x0800b2b7
 800b200:	0800b2b7 	.word	0x0800b2b7
 800b204:	0800b2b7 	.word	0x0800b2b7
 800b208:	0800b2b7 	.word	0x0800b2b7
 800b20c:	0800b2b7 	.word	0x0800b2b7
 800b210:	0800b283 	.word	0x0800b283
 800b214:	0800b2b7 	.word	0x0800b2b7
 800b218:	0800b2b7 	.word	0x0800b2b7
 800b21c:	0800b2b7 	.word	0x0800b2b7
 800b220:	0800b2b7 	.word	0x0800b2b7
 800b224:	0800b2b7 	.word	0x0800b2b7
 800b228:	0800b2b7 	.word	0x0800b2b7
 800b22c:	0800b2b7 	.word	0x0800b2b7
 800b230:	0800b2b7 	.word	0x0800b2b7
 800b234:	0800b2b7 	.word	0x0800b2b7
 800b238:	0800b2b7 	.word	0x0800b2b7
 800b23c:	0800b2b7 	.word	0x0800b2b7
 800b240:	0800b2b7 	.word	0x0800b2b7
 800b244:	0800b2b7 	.word	0x0800b2b7
 800b248:	0800b2b7 	.word	0x0800b2b7
 800b24c:	0800b2b7 	.word	0x0800b2b7
 800b250:	0800b2a9 	.word	0x0800b2a9
 800b254:	2b40      	cmp	r3, #64	; 0x40
 800b256:	d02a      	beq.n	800b2ae <UART_SetConfig+0x8aa>
 800b258:	e02d      	b.n	800b2b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b25a:	f7fd fa23 	bl	80086a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b25e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b260:	e02f      	b.n	800b2c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b266:	4618      	mov	r0, r3
 800b268:	f7fd fa32 	bl	80086d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b270:	e027      	b.n	800b2c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b272:	f107 0318 	add.w	r3, r7, #24
 800b276:	4618      	mov	r0, r3
 800b278:	f7fd fb7e 	bl	8008978 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b280:	e01f      	b.n	800b2c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b282:	4b21      	ldr	r3, [pc, #132]	; (800b308 <UART_SetConfig+0x904>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0320 	and.w	r3, r3, #32
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b28e:	4b1e      	ldr	r3, [pc, #120]	; (800b308 <UART_SetConfig+0x904>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	08db      	lsrs	r3, r3, #3
 800b294:	f003 0303 	and.w	r3, r3, #3
 800b298:	4a1d      	ldr	r2, [pc, #116]	; (800b310 <UART_SetConfig+0x90c>)
 800b29a:	fa22 f303 	lsr.w	r3, r2, r3
 800b29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2a0:	e00f      	b.n	800b2c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b2a2:	4b1b      	ldr	r3, [pc, #108]	; (800b310 <UART_SetConfig+0x90c>)
 800b2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2a6:	e00c      	b.n	800b2c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2a8:	4b1a      	ldr	r3, [pc, #104]	; (800b314 <UART_SetConfig+0x910>)
 800b2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ac:	e009      	b.n	800b2c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2b4:	e005      	b.n	800b2c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b2c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 81ee 	beq.w	800b6a6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	4a12      	ldr	r2, [pc, #72]	; (800b318 <UART_SetConfig+0x914>)
 800b2d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2dc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	4413      	add	r3, r2
 800b2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d305      	bcc.n	800b2fa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d910      	bls.n	800b31c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b300:	e1d1      	b.n	800b6a6 <UART_SetConfig+0xca2>
 800b302:	bf00      	nop
 800b304:	40011c00 	.word	0x40011c00
 800b308:	58024400 	.word	0x58024400
 800b30c:	58000c00 	.word	0x58000c00
 800b310:	03d09000 	.word	0x03d09000
 800b314:	003d0900 	.word	0x003d0900
 800b318:	0800cae8 	.word	0x0800cae8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b31e:	2200      	movs	r2, #0
 800b320:	60bb      	str	r3, [r7, #8]
 800b322:	60fa      	str	r2, [r7, #12]
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b328:	4ac0      	ldr	r2, [pc, #768]	; (800b62c <UART_SetConfig+0xc28>)
 800b32a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	2200      	movs	r2, #0
 800b332:	603b      	str	r3, [r7, #0]
 800b334:	607a      	str	r2, [r7, #4]
 800b336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b33a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b33e:	f7f4 ffe5 	bl	800030c <__aeabi_uldivmod>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	4610      	mov	r0, r2
 800b348:	4619      	mov	r1, r3
 800b34a:	f04f 0200 	mov.w	r2, #0
 800b34e:	f04f 0300 	mov.w	r3, #0
 800b352:	020b      	lsls	r3, r1, #8
 800b354:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b358:	0202      	lsls	r2, r0, #8
 800b35a:	6979      	ldr	r1, [r7, #20]
 800b35c:	6849      	ldr	r1, [r1, #4]
 800b35e:	0849      	lsrs	r1, r1, #1
 800b360:	2000      	movs	r0, #0
 800b362:	460c      	mov	r4, r1
 800b364:	4605      	mov	r5, r0
 800b366:	eb12 0804 	adds.w	r8, r2, r4
 800b36a:	eb43 0905 	adc.w	r9, r3, r5
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	469a      	mov	sl, r3
 800b376:	4693      	mov	fp, r2
 800b378:	4652      	mov	r2, sl
 800b37a:	465b      	mov	r3, fp
 800b37c:	4640      	mov	r0, r8
 800b37e:	4649      	mov	r1, r9
 800b380:	f7f4 ffc4 	bl	800030c <__aeabi_uldivmod>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4613      	mov	r3, r2
 800b38a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b392:	d308      	bcc.n	800b3a6 <UART_SetConfig+0x9a2>
 800b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b39a:	d204      	bcs.n	800b3a6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3a2:	60da      	str	r2, [r3, #12]
 800b3a4:	e17f      	b.n	800b6a6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b3ac:	e17b      	b.n	800b6a6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3b6:	f040 80bd 	bne.w	800b534 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b3ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b3be:	2b20      	cmp	r3, #32
 800b3c0:	dc48      	bgt.n	800b454 <UART_SetConfig+0xa50>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	db7b      	blt.n	800b4be <UART_SetConfig+0xaba>
 800b3c6:	2b20      	cmp	r3, #32
 800b3c8:	d879      	bhi.n	800b4be <UART_SetConfig+0xaba>
 800b3ca:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <UART_SetConfig+0x9cc>)
 800b3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d0:	0800b45b 	.word	0x0800b45b
 800b3d4:	0800b463 	.word	0x0800b463
 800b3d8:	0800b4bf 	.word	0x0800b4bf
 800b3dc:	0800b4bf 	.word	0x0800b4bf
 800b3e0:	0800b46b 	.word	0x0800b46b
 800b3e4:	0800b4bf 	.word	0x0800b4bf
 800b3e8:	0800b4bf 	.word	0x0800b4bf
 800b3ec:	0800b4bf 	.word	0x0800b4bf
 800b3f0:	0800b47b 	.word	0x0800b47b
 800b3f4:	0800b4bf 	.word	0x0800b4bf
 800b3f8:	0800b4bf 	.word	0x0800b4bf
 800b3fc:	0800b4bf 	.word	0x0800b4bf
 800b400:	0800b4bf 	.word	0x0800b4bf
 800b404:	0800b4bf 	.word	0x0800b4bf
 800b408:	0800b4bf 	.word	0x0800b4bf
 800b40c:	0800b4bf 	.word	0x0800b4bf
 800b410:	0800b48b 	.word	0x0800b48b
 800b414:	0800b4bf 	.word	0x0800b4bf
 800b418:	0800b4bf 	.word	0x0800b4bf
 800b41c:	0800b4bf 	.word	0x0800b4bf
 800b420:	0800b4bf 	.word	0x0800b4bf
 800b424:	0800b4bf 	.word	0x0800b4bf
 800b428:	0800b4bf 	.word	0x0800b4bf
 800b42c:	0800b4bf 	.word	0x0800b4bf
 800b430:	0800b4bf 	.word	0x0800b4bf
 800b434:	0800b4bf 	.word	0x0800b4bf
 800b438:	0800b4bf 	.word	0x0800b4bf
 800b43c:	0800b4bf 	.word	0x0800b4bf
 800b440:	0800b4bf 	.word	0x0800b4bf
 800b444:	0800b4bf 	.word	0x0800b4bf
 800b448:	0800b4bf 	.word	0x0800b4bf
 800b44c:	0800b4bf 	.word	0x0800b4bf
 800b450:	0800b4b1 	.word	0x0800b4b1
 800b454:	2b40      	cmp	r3, #64	; 0x40
 800b456:	d02e      	beq.n	800b4b6 <UART_SetConfig+0xab2>
 800b458:	e031      	b.n	800b4be <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b45a:	f7fb ff57 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 800b45e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b460:	e033      	b.n	800b4ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b462:	f7fb ff69 	bl	8007338 <HAL_RCC_GetPCLK2Freq>
 800b466:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b468:	e02f      	b.n	800b4ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b46a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fd f92e 	bl	80086d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b478:	e027      	b.n	800b4ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b47a:	f107 0318 	add.w	r3, r7, #24
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fd fa7a 	bl	8008978 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b488:	e01f      	b.n	800b4ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b48a:	4b69      	ldr	r3, [pc, #420]	; (800b630 <UART_SetConfig+0xc2c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0320 	and.w	r3, r3, #32
 800b492:	2b00      	cmp	r3, #0
 800b494:	d009      	beq.n	800b4aa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b496:	4b66      	ldr	r3, [pc, #408]	; (800b630 <UART_SetConfig+0xc2c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	08db      	lsrs	r3, r3, #3
 800b49c:	f003 0303 	and.w	r3, r3, #3
 800b4a0:	4a64      	ldr	r2, [pc, #400]	; (800b634 <UART_SetConfig+0xc30>)
 800b4a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4a8:	e00f      	b.n	800b4ca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b4aa:	4b62      	ldr	r3, [pc, #392]	; (800b634 <UART_SetConfig+0xc30>)
 800b4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ae:	e00c      	b.n	800b4ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4b0:	4b61      	ldr	r3, [pc, #388]	; (800b638 <UART_SetConfig+0xc34>)
 800b4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4b4:	e009      	b.n	800b4ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4bc:	e005      	b.n	800b4ca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b4c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f000 80ea 	beq.w	800b6a6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d6:	4a55      	ldr	r2, [pc, #340]	; (800b62c <UART_SetConfig+0xc28>)
 800b4d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4e4:	005a      	lsls	r2, r3, #1
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	085b      	lsrs	r3, r3, #1
 800b4ec:	441a      	add	r2, r3
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fa:	2b0f      	cmp	r3, #15
 800b4fc:	d916      	bls.n	800b52c <UART_SetConfig+0xb28>
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b504:	d212      	bcs.n	800b52c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b508:	b29b      	uxth	r3, r3
 800b50a:	f023 030f 	bic.w	r3, r3, #15
 800b50e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b512:	085b      	lsrs	r3, r3, #1
 800b514:	b29b      	uxth	r3, r3
 800b516:	f003 0307 	and.w	r3, r3, #7
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b51e:	4313      	orrs	r3, r2
 800b520:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b528:	60da      	str	r2, [r3, #12]
 800b52a:	e0bc      	b.n	800b6a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b532:	e0b8      	b.n	800b6a6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b534:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b538:	2b20      	cmp	r3, #32
 800b53a:	dc4b      	bgt.n	800b5d4 <UART_SetConfig+0xbd0>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f2c0 8087 	blt.w	800b650 <UART_SetConfig+0xc4c>
 800b542:	2b20      	cmp	r3, #32
 800b544:	f200 8084 	bhi.w	800b650 <UART_SetConfig+0xc4c>
 800b548:	a201      	add	r2, pc, #4	; (adr r2, 800b550 <UART_SetConfig+0xb4c>)
 800b54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54e:	bf00      	nop
 800b550:	0800b5db 	.word	0x0800b5db
 800b554:	0800b5e3 	.word	0x0800b5e3
 800b558:	0800b651 	.word	0x0800b651
 800b55c:	0800b651 	.word	0x0800b651
 800b560:	0800b5eb 	.word	0x0800b5eb
 800b564:	0800b651 	.word	0x0800b651
 800b568:	0800b651 	.word	0x0800b651
 800b56c:	0800b651 	.word	0x0800b651
 800b570:	0800b5fb 	.word	0x0800b5fb
 800b574:	0800b651 	.word	0x0800b651
 800b578:	0800b651 	.word	0x0800b651
 800b57c:	0800b651 	.word	0x0800b651
 800b580:	0800b651 	.word	0x0800b651
 800b584:	0800b651 	.word	0x0800b651
 800b588:	0800b651 	.word	0x0800b651
 800b58c:	0800b651 	.word	0x0800b651
 800b590:	0800b60b 	.word	0x0800b60b
 800b594:	0800b651 	.word	0x0800b651
 800b598:	0800b651 	.word	0x0800b651
 800b59c:	0800b651 	.word	0x0800b651
 800b5a0:	0800b651 	.word	0x0800b651
 800b5a4:	0800b651 	.word	0x0800b651
 800b5a8:	0800b651 	.word	0x0800b651
 800b5ac:	0800b651 	.word	0x0800b651
 800b5b0:	0800b651 	.word	0x0800b651
 800b5b4:	0800b651 	.word	0x0800b651
 800b5b8:	0800b651 	.word	0x0800b651
 800b5bc:	0800b651 	.word	0x0800b651
 800b5c0:	0800b651 	.word	0x0800b651
 800b5c4:	0800b651 	.word	0x0800b651
 800b5c8:	0800b651 	.word	0x0800b651
 800b5cc:	0800b651 	.word	0x0800b651
 800b5d0:	0800b643 	.word	0x0800b643
 800b5d4:	2b40      	cmp	r3, #64	; 0x40
 800b5d6:	d037      	beq.n	800b648 <UART_SetConfig+0xc44>
 800b5d8:	e03a      	b.n	800b650 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5da:	f7fb fe97 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 800b5de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5e0:	e03c      	b.n	800b65c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5e2:	f7fb fea9 	bl	8007338 <HAL_RCC_GetPCLK2Freq>
 800b5e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5e8:	e038      	b.n	800b65c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fd f86e 	bl	80086d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5f8:	e030      	b.n	800b65c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5fa:	f107 0318 	add.w	r3, r7, #24
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fd f9ba 	bl	8008978 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b608:	e028      	b.n	800b65c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b60a:	4b09      	ldr	r3, [pc, #36]	; (800b630 <UART_SetConfig+0xc2c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 0320 	and.w	r3, r3, #32
 800b612:	2b00      	cmp	r3, #0
 800b614:	d012      	beq.n	800b63c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b616:	4b06      	ldr	r3, [pc, #24]	; (800b630 <UART_SetConfig+0xc2c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	08db      	lsrs	r3, r3, #3
 800b61c:	f003 0303 	and.w	r3, r3, #3
 800b620:	4a04      	ldr	r2, [pc, #16]	; (800b634 <UART_SetConfig+0xc30>)
 800b622:	fa22 f303 	lsr.w	r3, r2, r3
 800b626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b628:	e018      	b.n	800b65c <UART_SetConfig+0xc58>
 800b62a:	bf00      	nop
 800b62c:	0800cae8 	.word	0x0800cae8
 800b630:	58024400 	.word	0x58024400
 800b634:	03d09000 	.word	0x03d09000
 800b638:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b63c:	4b24      	ldr	r3, [pc, #144]	; (800b6d0 <UART_SetConfig+0xccc>)
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b640:	e00c      	b.n	800b65c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b642:	4b24      	ldr	r3, [pc, #144]	; (800b6d4 <UART_SetConfig+0xcd0>)
 800b644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b646:	e009      	b.n	800b65c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b648:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b64e:	e005      	b.n	800b65c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b650:	2300      	movs	r3, #0
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b65a:	bf00      	nop
    }

    if (pclk != 0U)
 800b65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d021      	beq.n	800b6a6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b666:	4a1c      	ldr	r2, [pc, #112]	; (800b6d8 <UART_SetConfig+0xcd4>)
 800b668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b66c:	461a      	mov	r2, r3
 800b66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b670:	fbb3 f2f2 	udiv	r2, r3, r2
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	085b      	lsrs	r3, r3, #1
 800b67a:	441a      	add	r2, r3
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	fbb2 f3f3 	udiv	r3, r2, r3
 800b684:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b688:	2b0f      	cmp	r3, #15
 800b68a:	d909      	bls.n	800b6a0 <UART_SetConfig+0xc9c>
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b692:	d205      	bcs.n	800b6a0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b696:	b29a      	uxth	r2, r3
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60da      	str	r2, [r3, #12]
 800b69e:	e002      	b.n	800b6a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b6c2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3748      	adds	r7, #72	; 0x48
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6d0:	03d09000 	.word	0x03d09000
 800b6d4:	003d0900 	.word	0x003d0900
 800b6d8:	0800cae8 	.word	0x0800cae8

0800b6dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e8:	f003 0308 	and.w	r3, r3, #8
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00a      	beq.n	800b706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	430a      	orrs	r2, r1
 800b704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00a      	beq.n	800b728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	430a      	orrs	r2, r1
 800b726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72c:	f003 0302 	and.w	r3, r3, #2
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00a      	beq.n	800b74a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	430a      	orrs	r2, r1
 800b748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b74e:	f003 0304 	and.w	r3, r3, #4
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00a      	beq.n	800b76c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	430a      	orrs	r2, r1
 800b76a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b770:	f003 0310 	and.w	r3, r3, #16
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00a      	beq.n	800b78e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	430a      	orrs	r2, r1
 800b78c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b792:	f003 0320 	and.w	r3, r3, #32
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00a      	beq.n	800b7b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	430a      	orrs	r2, r1
 800b7ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d01a      	beq.n	800b7f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7da:	d10a      	bne.n	800b7f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	430a      	orrs	r2, r1
 800b7f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	430a      	orrs	r2, r1
 800b812:	605a      	str	r2, [r3, #4]
  }
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b098      	sub	sp, #96	; 0x60
 800b824:	af02      	add	r7, sp, #8
 800b826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b830:	f7f7 f874 	bl	800291c <HAL_GetTick>
 800b834:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 0308 	and.w	r3, r3, #8
 800b840:	2b08      	cmp	r3, #8
 800b842:	d12f      	bne.n	800b8a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b844:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b84c:	2200      	movs	r2, #0
 800b84e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 f88e 	bl	800b974 <UART_WaitOnFlagUntilTimeout>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d022      	beq.n	800b8a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b866:	e853 3f00 	ldrex	r3, [r3]
 800b86a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b86e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b872:	653b      	str	r3, [r7, #80]	; 0x50
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	461a      	mov	r2, r3
 800b87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87c:	647b      	str	r3, [r7, #68]	; 0x44
 800b87e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b884:	e841 2300 	strex	r3, r2, [r1]
 800b888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1e6      	bne.n	800b85e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2220      	movs	r2, #32
 800b894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e063      	b.n	800b96c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 0304 	and.w	r3, r3, #4
 800b8ae:	2b04      	cmp	r3, #4
 800b8b0:	d149      	bne.n	800b946 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f857 	bl	800b974 <UART_WaitOnFlagUntilTimeout>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d03c      	beq.n	800b946 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d4:	e853 3f00 	ldrex	r3, [r3]
 800b8d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b8e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ea:	633b      	str	r3, [r7, #48]	; 0x30
 800b8ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8f2:	e841 2300 	strex	r3, r2, [r1]
 800b8f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1e6      	bne.n	800b8cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3308      	adds	r3, #8
 800b904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	e853 3f00 	ldrex	r3, [r3]
 800b90c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f023 0301 	bic.w	r3, r3, #1
 800b914:	64bb      	str	r3, [r7, #72]	; 0x48
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3308      	adds	r3, #8
 800b91c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b91e:	61fa      	str	r2, [r7, #28]
 800b920:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b922:	69b9      	ldr	r1, [r7, #24]
 800b924:	69fa      	ldr	r2, [r7, #28]
 800b926:	e841 2300 	strex	r3, r2, [r1]
 800b92a:	617b      	str	r3, [r7, #20]
   return(result);
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1e5      	bne.n	800b8fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2220      	movs	r2, #32
 800b936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b942:	2303      	movs	r3, #3
 800b944:	e012      	b.n	800b96c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2220      	movs	r2, #32
 800b94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2220      	movs	r2, #32
 800b952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3758      	adds	r7, #88	; 0x58
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	603b      	str	r3, [r7, #0]
 800b980:	4613      	mov	r3, r2
 800b982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b984:	e04f      	b.n	800ba26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98c:	d04b      	beq.n	800ba26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b98e:	f7f6 ffc5 	bl	800291c <HAL_GetTick>
 800b992:	4602      	mov	r2, r0
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	69ba      	ldr	r2, [r7, #24]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d302      	bcc.n	800b9a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d101      	bne.n	800b9a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	e04e      	b.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f003 0304 	and.w	r3, r3, #4
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d037      	beq.n	800ba26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	2b80      	cmp	r3, #128	; 0x80
 800b9ba:	d034      	beq.n	800ba26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	2b40      	cmp	r3, #64	; 0x40
 800b9c0:	d031      	beq.n	800ba26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	69db      	ldr	r3, [r3, #28]
 800b9c8:	f003 0308 	and.w	r3, r3, #8
 800b9cc:	2b08      	cmp	r3, #8
 800b9ce:	d110      	bne.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2208      	movs	r2, #8
 800b9d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f000 f95b 	bl	800bc94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2208      	movs	r2, #8
 800b9e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e029      	b.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	69db      	ldr	r3, [r3, #28]
 800b9f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba00:	d111      	bne.n	800ba26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 f941 	bl	800bc94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2220      	movs	r2, #32
 800ba16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ba22:	2303      	movs	r3, #3
 800ba24:	e00f      	b.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	69da      	ldr	r2, [r3, #28]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	4013      	ands	r3, r2
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	bf0c      	ite	eq
 800ba36:	2301      	moveq	r3, #1
 800ba38:	2300      	movne	r3, #0
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d0a0      	beq.n	800b986 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b0a3      	sub	sp, #140	; 0x8c
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	88fa      	ldrh	r2, [r7, #6]
 800ba68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	88fa      	ldrh	r2, [r7, #6]
 800ba70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba82:	d10e      	bne.n	800baa2 <UART_Start_Receive_IT+0x52>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d105      	bne.n	800ba98 <UART_Start_Receive_IT+0x48>
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ba92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba96:	e02d      	b.n	800baf4 <UART_Start_Receive_IT+0xa4>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	22ff      	movs	r2, #255	; 0xff
 800ba9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800baa0:	e028      	b.n	800baf4 <UART_Start_Receive_IT+0xa4>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10d      	bne.n	800bac6 <UART_Start_Receive_IT+0x76>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d104      	bne.n	800babc <UART_Start_Receive_IT+0x6c>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	22ff      	movs	r2, #255	; 0xff
 800bab6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800baba:	e01b      	b.n	800baf4 <UART_Start_Receive_IT+0xa4>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	227f      	movs	r2, #127	; 0x7f
 800bac0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bac4:	e016      	b.n	800baf4 <UART_Start_Receive_IT+0xa4>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bace:	d10d      	bne.n	800baec <UART_Start_Receive_IT+0x9c>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d104      	bne.n	800bae2 <UART_Start_Receive_IT+0x92>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	227f      	movs	r2, #127	; 0x7f
 800badc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bae0:	e008      	b.n	800baf4 <UART_Start_Receive_IT+0xa4>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	223f      	movs	r2, #63	; 0x3f
 800bae6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800baea:	e003      	b.n	800baf4 <UART_Start_Receive_IT+0xa4>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2222      	movs	r2, #34	; 0x22
 800bb00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3308      	adds	r3, #8
 800bb0a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb0e:	e853 3f00 	ldrex	r3, [r3]
 800bb12:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bb14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb16:	f043 0301 	orr.w	r3, r3, #1
 800bb1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3308      	adds	r3, #8
 800bb24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bb28:	673a      	str	r2, [r7, #112]	; 0x70
 800bb2a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bb2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bb30:	e841 2300 	strex	r3, r2, [r1]
 800bb34:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bb36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e3      	bne.n	800bb04 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb44:	d14f      	bne.n	800bbe6 <UART_Start_Receive_IT+0x196>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bb4c:	88fa      	ldrh	r2, [r7, #6]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d349      	bcc.n	800bbe6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb5a:	d107      	bne.n	800bb6c <UART_Start_Receive_IT+0x11c>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d103      	bne.n	800bb6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	4a47      	ldr	r2, [pc, #284]	; (800bc84 <UART_Start_Receive_IT+0x234>)
 800bb68:	675a      	str	r2, [r3, #116]	; 0x74
 800bb6a:	e002      	b.n	800bb72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4a46      	ldr	r2, [pc, #280]	; (800bc88 <UART_Start_Receive_IT+0x238>)
 800bb70:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d01a      	beq.n	800bbb0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb82:	e853 3f00 	ldrex	r3, [r3]
 800bb86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bb88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	461a      	mov	r2, r3
 800bb98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb9e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bba2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bba4:	e841 2300 	strex	r3, r2, [r1]
 800bba8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bbaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1e4      	bne.n	800bb7a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbba:	e853 3f00 	ldrex	r3, [r3]
 800bbbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3308      	adds	r3, #8
 800bbce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bbd0:	64ba      	str	r2, [r7, #72]	; 0x48
 800bbd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbd8:	e841 2300 	strex	r3, r2, [r1]
 800bbdc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bbde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1e5      	bne.n	800bbb0 <UART_Start_Receive_IT+0x160>
 800bbe4:	e046      	b.n	800bc74 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbee:	d107      	bne.n	800bc00 <UART_Start_Receive_IT+0x1b0>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d103      	bne.n	800bc00 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	4a24      	ldr	r2, [pc, #144]	; (800bc8c <UART_Start_Receive_IT+0x23c>)
 800bbfc:	675a      	str	r2, [r3, #116]	; 0x74
 800bbfe:	e002      	b.n	800bc06 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	4a23      	ldr	r2, [pc, #140]	; (800bc90 <UART_Start_Receive_IT+0x240>)
 800bc04:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d019      	beq.n	800bc42 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	e853 3f00 	ldrex	r3, [r3]
 800bc1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bc22:	677b      	str	r3, [r7, #116]	; 0x74
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	461a      	mov	r2, r3
 800bc2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc34:	e841 2300 	strex	r3, r2, [r1]
 800bc38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1e6      	bne.n	800bc0e <UART_Start_Receive_IT+0x1be>
 800bc40:	e018      	b.n	800bc74 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	e853 3f00 	ldrex	r3, [r3]
 800bc4e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	f043 0320 	orr.w	r3, r3, #32
 800bc56:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc60:	623b      	str	r3, [r7, #32]
 800bc62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc64:	69f9      	ldr	r1, [r7, #28]
 800bc66:	6a3a      	ldr	r2, [r7, #32]
 800bc68:	e841 2300 	strex	r3, r2, [r1]
 800bc6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1e6      	bne.n	800bc42 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	378c      	adds	r7, #140	; 0x8c
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	0800c4b5 	.word	0x0800c4b5
 800bc88:	0800c155 	.word	0x0800c155
 800bc8c:	0800bf9d 	.word	0x0800bf9d
 800bc90:	0800bde5 	.word	0x0800bde5

0800bc94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b095      	sub	sp, #84	; 0x54
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca4:	e853 3f00 	ldrex	r3, [r3]
 800bca8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcba:	643b      	str	r3, [r7, #64]	; 0x40
 800bcbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcc2:	e841 2300 	strex	r3, r2, [r1]
 800bcc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1e6      	bne.n	800bc9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3308      	adds	r3, #8
 800bcd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	e853 3f00 	ldrex	r3, [r3]
 800bcdc:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcde:	69fa      	ldr	r2, [r7, #28]
 800bce0:	4b1e      	ldr	r3, [pc, #120]	; (800bd5c <UART_EndRxTransfer+0xc8>)
 800bce2:	4013      	ands	r3, r2
 800bce4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	3308      	adds	r3, #8
 800bcec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcf6:	e841 2300 	strex	r3, r2, [r1]
 800bcfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1e5      	bne.n	800bcce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d118      	bne.n	800bd3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	e853 3f00 	ldrex	r3, [r3]
 800bd16:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	f023 0310 	bic.w	r3, r3, #16
 800bd1e:	647b      	str	r3, [r7, #68]	; 0x44
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	461a      	mov	r2, r3
 800bd26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd28:	61bb      	str	r3, [r7, #24]
 800bd2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2c:	6979      	ldr	r1, [r7, #20]
 800bd2e:	69ba      	ldr	r2, [r7, #24]
 800bd30:	e841 2300 	strex	r3, r2, [r1]
 800bd34:	613b      	str	r3, [r7, #16]
   return(result);
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1e6      	bne.n	800bd0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bd50:	bf00      	nop
 800bd52:	3754      	adds	r7, #84	; 0x54
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	effffffe 	.word	0xeffffffe

0800bd60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f7fe fe2a 	bl	800a9d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd84:	bf00      	nop
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	e853 3f00 	ldrex	r3, [r3]
 800bda0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bda8:	61fb      	str	r3, [r7, #28]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	61bb      	str	r3, [r7, #24]
 800bdb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb6:	6979      	ldr	r1, [r7, #20]
 800bdb8:	69ba      	ldr	r2, [r7, #24]
 800bdba:	e841 2300 	strex	r3, r2, [r1]
 800bdbe:	613b      	str	r3, [r7, #16]
   return(result);
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1e6      	bne.n	800bd94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2220      	movs	r2, #32
 800bdca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7fe fdf5 	bl	800a9c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdda:	bf00      	nop
 800bddc:	3720      	adds	r7, #32
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b09c      	sub	sp, #112	; 0x70
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bdf2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdfc:	2b22      	cmp	r3, #34	; 0x22
 800bdfe:	f040 80be 	bne.w	800bf7e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800be10:	b2d9      	uxtb	r1, r3
 800be12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800be16:	b2da      	uxtb	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be1c:	400a      	ands	r2, r1
 800be1e:	b2d2      	uxtb	r2, r2
 800be20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be26:	1c5a      	adds	r2, r3, #1
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be32:	b29b      	uxth	r3, r3
 800be34:	3b01      	subs	r3, #1
 800be36:	b29a      	uxth	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be44:	b29b      	uxth	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	f040 80a1 	bne.w	800bf8e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be54:	e853 3f00 	ldrex	r3, [r3]
 800be58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be60:	66bb      	str	r3, [r7, #104]	; 0x68
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	461a      	mov	r2, r3
 800be68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be6a:	65bb      	str	r3, [r7, #88]	; 0x58
 800be6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be72:	e841 2300 	strex	r3, r2, [r1]
 800be76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e6      	bne.n	800be4c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	3308      	adds	r3, #8
 800be84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be90:	f023 0301 	bic.w	r3, r3, #1
 800be94:	667b      	str	r3, [r7, #100]	; 0x64
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	3308      	adds	r3, #8
 800be9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be9e:	647a      	str	r2, [r7, #68]	; 0x44
 800bea0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bea6:	e841 2300 	strex	r3, r2, [r1]
 800beaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800beac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1e5      	bne.n	800be7e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2220      	movs	r2, #32
 800beb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a33      	ldr	r2, [pc, #204]	; (800bf98 <UART_RxISR_8BIT+0x1b4>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d01f      	beq.n	800bf10 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d018      	beq.n	800bf10 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	e853 3f00 	ldrex	r3, [r3]
 800beea:	623b      	str	r3, [r7, #32]
   return(result);
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bef2:	663b      	str	r3, [r7, #96]	; 0x60
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	461a      	mov	r2, r3
 800befa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800befc:	633b      	str	r3, [r7, #48]	; 0x30
 800befe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf04:	e841 2300 	strex	r3, r2, [r1]
 800bf08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1e6      	bne.n	800bede <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d12e      	bne.n	800bf76 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	e853 3f00 	ldrex	r3, [r3]
 800bf2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f023 0310 	bic.w	r3, r3, #16
 800bf32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf3c:	61fb      	str	r3, [r7, #28]
 800bf3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf40:	69b9      	ldr	r1, [r7, #24]
 800bf42:	69fa      	ldr	r2, [r7, #28]
 800bf44:	e841 2300 	strex	r3, r2, [r1]
 800bf48:	617b      	str	r3, [r7, #20]
   return(result);
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e6      	bne.n	800bf1e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	69db      	ldr	r3, [r3, #28]
 800bf56:	f003 0310 	and.w	r3, r3, #16
 800bf5a:	2b10      	cmp	r3, #16
 800bf5c:	d103      	bne.n	800bf66 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2210      	movs	r2, #16
 800bf64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7fe fd3c 	bl	800a9ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf74:	e00b      	b.n	800bf8e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7f5 fa08 	bl	800138c <HAL_UART_RxCpltCallback>
}
 800bf7c:	e007      	b.n	800bf8e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	699a      	ldr	r2, [r3, #24]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f042 0208 	orr.w	r2, r2, #8
 800bf8c:	619a      	str	r2, [r3, #24]
}
 800bf8e:	bf00      	nop
 800bf90:	3770      	adds	r7, #112	; 0x70
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	58000c00 	.word	0x58000c00

0800bf9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b09c      	sub	sp, #112	; 0x70
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bfaa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfb4:	2b22      	cmp	r3, #34	; 0x22
 800bfb6:	f040 80be 	bne.w	800c136 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfc8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bfca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800bfce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bfd2:	4013      	ands	r3, r2
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfde:	1c9a      	adds	r2, r3, #2
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	3b01      	subs	r3, #1
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	f040 80a1 	bne.w	800c146 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c00c:	e853 3f00 	ldrex	r3, [r3]
 800c010:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c018:	667b      	str	r3, [r7, #100]	; 0x64
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	461a      	mov	r2, r3
 800c020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c022:	657b      	str	r3, [r7, #84]	; 0x54
 800c024:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c028:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c02a:	e841 2300 	strex	r3, r2, [r1]
 800c02e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1e6      	bne.n	800c004 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3308      	adds	r3, #8
 800c03c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c040:	e853 3f00 	ldrex	r3, [r3]
 800c044:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c048:	f023 0301 	bic.w	r3, r3, #1
 800c04c:	663b      	str	r3, [r7, #96]	; 0x60
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3308      	adds	r3, #8
 800c054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c056:	643a      	str	r2, [r7, #64]	; 0x40
 800c058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c05c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c05e:	e841 2300 	strex	r3, r2, [r1]
 800c062:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1e5      	bne.n	800c036 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2220      	movs	r2, #32
 800c06e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a33      	ldr	r2, [pc, #204]	; (800c150 <UART_RxISR_16BIT+0x1b4>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d01f      	beq.n	800c0c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d018      	beq.n	800c0c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09c:	6a3b      	ldr	r3, [r7, #32]
 800c09e:	e853 3f00 	ldrex	r3, [r3]
 800c0a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c0aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0bc:	e841 2300 	strex	r3, r2, [r1]
 800c0c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1e6      	bne.n	800c096 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d12e      	bne.n	800c12e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	e853 3f00 	ldrex	r3, [r3]
 800c0e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	f023 0310 	bic.w	r3, r3, #16
 800c0ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0f4:	61bb      	str	r3, [r7, #24]
 800c0f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f8:	6979      	ldr	r1, [r7, #20]
 800c0fa:	69ba      	ldr	r2, [r7, #24]
 800c0fc:	e841 2300 	strex	r3, r2, [r1]
 800c100:	613b      	str	r3, [r7, #16]
   return(result);
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1e6      	bne.n	800c0d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	69db      	ldr	r3, [r3, #28]
 800c10e:	f003 0310 	and.w	r3, r3, #16
 800c112:	2b10      	cmp	r3, #16
 800c114:	d103      	bne.n	800c11e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2210      	movs	r2, #16
 800c11c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c124:	4619      	mov	r1, r3
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7fe fc60 	bl	800a9ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c12c:	e00b      	b.n	800c146 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7f5 f92c 	bl	800138c <HAL_UART_RxCpltCallback>
}
 800c134:	e007      	b.n	800c146 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	699a      	ldr	r2, [r3, #24]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f042 0208 	orr.w	r2, r2, #8
 800c144:	619a      	str	r2, [r3, #24]
}
 800c146:	bf00      	nop
 800c148:	3770      	adds	r7, #112	; 0x70
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	58000c00 	.word	0x58000c00

0800c154 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b0ac      	sub	sp, #176	; 0xb0
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c162:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	69db      	ldr	r3, [r3, #28]
 800c16c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c18a:	2b22      	cmp	r3, #34	; 0x22
 800c18c:	f040 8180 	bne.w	800c490 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c196:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c19a:	e123      	b.n	800c3e4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c1a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c1aa:	b2d9      	uxtb	r1, r3
 800c1ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c1b0:	b2da      	uxtb	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1b6:	400a      	ands	r2, r1
 800c1b8:	b2d2      	uxtb	r2, r2
 800c1ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1c0:	1c5a      	adds	r2, r3, #1
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c1e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1e6:	f003 0307 	and.w	r3, r3, #7
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d053      	beq.n	800c296 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1f2:	f003 0301 	and.w	r3, r3, #1
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d011      	beq.n	800c21e <UART_RxISR_8BIT_FIFOEN+0xca>
 800c1fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00b      	beq.n	800c21e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2201      	movs	r2, #1
 800c20c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c214:	f043 0201 	orr.w	r2, r3, #1
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c21e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c222:	f003 0302 	and.w	r3, r3, #2
 800c226:	2b00      	cmp	r3, #0
 800c228:	d011      	beq.n	800c24e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c22a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00b      	beq.n	800c24e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2202      	movs	r2, #2
 800c23c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c244:	f043 0204 	orr.w	r2, r3, #4
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c24e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c252:	f003 0304 	and.w	r3, r3, #4
 800c256:	2b00      	cmp	r3, #0
 800c258:	d011      	beq.n	800c27e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c25a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c25e:	f003 0301 	and.w	r3, r3, #1
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00b      	beq.n	800c27e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2204      	movs	r2, #4
 800c26c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c274:	f043 0202 	orr.w	r2, r3, #2
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c284:	2b00      	cmp	r3, #0
 800c286:	d006      	beq.n	800c296 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7fe fba5 	bl	800a9d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f040 80a0 	bne.w	800c3e4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2ac:	e853 3f00 	ldrex	r3, [r3]
 800c2b0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c2b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2c8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c2cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c2ce:	e841 2300 	strex	r3, r2, [r1]
 800c2d2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c2d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1e4      	bne.n	800c2a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3308      	adds	r3, #8
 800c2e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2e4:	e853 3f00 	ldrex	r3, [r3]
 800c2e8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c2ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2ec:	4b6e      	ldr	r3, [pc, #440]	; (800c4a8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c2ee:	4013      	ands	r3, r2
 800c2f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3308      	adds	r3, #8
 800c2fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c2fe:	66ba      	str	r2, [r7, #104]	; 0x68
 800c300:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c302:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c304:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c306:	e841 2300 	strex	r3, r2, [r1]
 800c30a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c30c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1e3      	bne.n	800c2da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2220      	movs	r2, #32
 800c316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a60      	ldr	r2, [pc, #384]	; (800c4ac <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d021      	beq.n	800c374 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d01a      	beq.n	800c374 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c346:	e853 3f00 	ldrex	r3, [r3]
 800c34a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c34c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c34e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c360:	657b      	str	r3, [r7, #84]	; 0x54
 800c362:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c366:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c368:	e841 2300 	strex	r3, r2, [r1]
 800c36c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1e4      	bne.n	800c33e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d130      	bne.n	800c3de <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38a:	e853 3f00 	ldrex	r3, [r3]
 800c38e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	f023 0310 	bic.w	r3, r3, #16
 800c396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3a4:	643b      	str	r3, [r7, #64]	; 0x40
 800c3a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3ac:	e841 2300 	strex	r3, r2, [r1]
 800c3b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e4      	bne.n	800c382 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	69db      	ldr	r3, [r3, #28]
 800c3be:	f003 0310 	and.w	r3, r3, #16
 800c3c2:	2b10      	cmp	r3, #16
 800c3c4:	d103      	bne.n	800c3ce <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2210      	movs	r2, #16
 800c3cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7fe fb08 	bl	800a9ec <HAL_UARTEx_RxEventCallback>
 800c3dc:	e002      	b.n	800c3e4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7f4 ffd4 	bl	800138c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d006      	beq.n	800c3fa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c3ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3f0:	f003 0320 	and.w	r3, r3, #32
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f47f aed1 	bne.w	800c19c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c400:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c404:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d049      	beq.n	800c4a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c412:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c416:	429a      	cmp	r2, r3
 800c418:	d242      	bcs.n	800c4a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	3308      	adds	r3, #8
 800c420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c422:	6a3b      	ldr	r3, [r7, #32]
 800c424:	e853 3f00 	ldrex	r3, [r3]
 800c428:	61fb      	str	r3, [r7, #28]
   return(result);
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	3308      	adds	r3, #8
 800c43a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c43e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c446:	e841 2300 	strex	r3, r2, [r1]
 800c44a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1e3      	bne.n	800c41a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a16      	ldr	r2, [pc, #88]	; (800c4b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c456:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	60bb      	str	r3, [r7, #8]
   return(result);
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	f043 0320 	orr.w	r3, r3, #32
 800c46c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	461a      	mov	r2, r3
 800c476:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c47a:	61bb      	str	r3, [r7, #24]
 800c47c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47e:	6979      	ldr	r1, [r7, #20]
 800c480:	69ba      	ldr	r2, [r7, #24]
 800c482:	e841 2300 	strex	r3, r2, [r1]
 800c486:	613b      	str	r3, [r7, #16]
   return(result);
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1e4      	bne.n	800c458 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c48e:	e007      	b.n	800c4a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	699a      	ldr	r2, [r3, #24]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f042 0208 	orr.w	r2, r2, #8
 800c49e:	619a      	str	r2, [r3, #24]
}
 800c4a0:	bf00      	nop
 800c4a2:	37b0      	adds	r7, #176	; 0xb0
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	effffffe 	.word	0xeffffffe
 800c4ac:	58000c00 	.word	0x58000c00
 800c4b0:	0800bde5 	.word	0x0800bde5

0800c4b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b0ae      	sub	sp, #184	; 0xb8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	69db      	ldr	r3, [r3, #28]
 800c4cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4ea:	2b22      	cmp	r3, #34	; 0x22
 800c4ec:	f040 8184 	bne.w	800c7f8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c4f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c4fa:	e127      	b.n	800c74c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c502:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c50a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c50e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c512:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c516:	4013      	ands	r3, r2
 800c518:	b29a      	uxth	r2, r3
 800c51a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c51e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c524:	1c9a      	adds	r2, r3, #2
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c530:	b29b      	uxth	r3, r3
 800c532:	3b01      	subs	r3, #1
 800c534:	b29a      	uxth	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	69db      	ldr	r3, [r3, #28]
 800c542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d053      	beq.n	800c5fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c556:	f003 0301 	and.w	r3, r3, #1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d011      	beq.n	800c582 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00b      	beq.n	800c582 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2201      	movs	r2, #1
 800c570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c578:	f043 0201 	orr.w	r2, r3, #1
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c586:	f003 0302 	and.w	r3, r3, #2
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d011      	beq.n	800c5b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c58e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00b      	beq.n	800c5b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2202      	movs	r2, #2
 800c5a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5a8:	f043 0204 	orr.w	r2, r3, #4
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c5b6:	f003 0304 	and.w	r3, r3, #4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d011      	beq.n	800c5e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c5be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c5c2:	f003 0301 	and.w	r3, r3, #1
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00b      	beq.n	800c5e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2204      	movs	r2, #4
 800c5d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5d8:	f043 0202 	orr.w	r2, r3, #2
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d006      	beq.n	800c5fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7fe f9f3 	bl	800a9d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c600:	b29b      	uxth	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	f040 80a2 	bne.w	800c74c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c610:	e853 3f00 	ldrex	r3, [r3]
 800c614:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c61c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	461a      	mov	r2, r3
 800c626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c62a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c62e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c630:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c632:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c636:	e841 2300 	strex	r3, r2, [r1]
 800c63a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c63c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1e2      	bne.n	800c608 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3308      	adds	r3, #8
 800c648:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c652:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c654:	4b6e      	ldr	r3, [pc, #440]	; (800c810 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c656:	4013      	ands	r3, r2
 800c658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	3308      	adds	r3, #8
 800c662:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c666:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c668:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c66c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c66e:	e841 2300 	strex	r3, r2, [r1]
 800c672:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1e3      	bne.n	800c642 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2220      	movs	r2, #32
 800c67e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a60      	ldr	r2, [pc, #384]	; (800c814 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d021      	beq.n	800c6dc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d01a      	beq.n	800c6dc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6ae:	e853 3f00 	ldrex	r3, [r3]
 800c6b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c6b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c6ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c6c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c6ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6d0:	e841 2300 	strex	r3, r2, [r1]
 800c6d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c6d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1e4      	bne.n	800c6a6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d130      	bne.n	800c746 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f2:	e853 3f00 	ldrex	r3, [r3]
 800c6f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6fa:	f023 0310 	bic.w	r3, r3, #16
 800c6fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	461a      	mov	r2, r3
 800c708:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c70c:	647b      	str	r3, [r7, #68]	; 0x44
 800c70e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c710:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c714:	e841 2300 	strex	r3, r2, [r1]
 800c718:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d1e4      	bne.n	800c6ea <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	69db      	ldr	r3, [r3, #28]
 800c726:	f003 0310 	and.w	r3, r3, #16
 800c72a:	2b10      	cmp	r3, #16
 800c72c:	d103      	bne.n	800c736 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2210      	movs	r2, #16
 800c734:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7fe f954 	bl	800a9ec <HAL_UARTEx_RxEventCallback>
 800c744:	e002      	b.n	800c74c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7f4 fe20 	bl	800138c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c74c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c750:	2b00      	cmp	r3, #0
 800c752:	d006      	beq.n	800c762 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c758:	f003 0320 	and.w	r3, r3, #32
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f47f aecd 	bne.w	800c4fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c768:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c76c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c770:	2b00      	cmp	r3, #0
 800c772:	d049      	beq.n	800c808 <UART_RxISR_16BIT_FIFOEN+0x354>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c77a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c77e:	429a      	cmp	r2, r3
 800c780:	d242      	bcs.n	800c808 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	3308      	adds	r3, #8
 800c788:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	e853 3f00 	ldrex	r3, [r3]
 800c790:	623b      	str	r3, [r7, #32]
   return(result);
 800c792:	6a3b      	ldr	r3, [r7, #32]
 800c794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	3308      	adds	r3, #8
 800c7a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c7a6:	633a      	str	r2, [r7, #48]	; 0x30
 800c7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ae:	e841 2300 	strex	r3, r2, [r1]
 800c7b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1e3      	bne.n	800c782 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a16      	ldr	r2, [pc, #88]	; (800c818 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c7be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	e853 3f00 	ldrex	r3, [r3]
 800c7cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f043 0320 	orr.w	r3, r3, #32
 800c7d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	461a      	mov	r2, r3
 800c7de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c7e2:	61fb      	str	r3, [r7, #28]
 800c7e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e6:	69b9      	ldr	r1, [r7, #24]
 800c7e8:	69fa      	ldr	r2, [r7, #28]
 800c7ea:	e841 2300 	strex	r3, r2, [r1]
 800c7ee:	617b      	str	r3, [r7, #20]
   return(result);
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1e4      	bne.n	800c7c0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c7f6:	e007      	b.n	800c808 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	699a      	ldr	r2, [r3, #24]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f042 0208 	orr.w	r2, r2, #8
 800c806:	619a      	str	r2, [r3, #24]
}
 800c808:	bf00      	nop
 800c80a:	37b8      	adds	r7, #184	; 0xb8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	effffffe 	.word	0xeffffffe
 800c814:	58000c00 	.word	0x58000c00
 800c818:	0800bf9d 	.word	0x0800bf9d

0800c81c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c824:	bf00      	nop
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c84c:	bf00      	nop
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c866:	2b01      	cmp	r3, #1
 800c868:	d101      	bne.n	800c86e <HAL_UARTEx_DisableFifoMode+0x16>
 800c86a:	2302      	movs	r3, #2
 800c86c:	e027      	b.n	800c8be <HAL_UARTEx_DisableFifoMode+0x66>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2224      	movs	r2, #36	; 0x24
 800c87a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f022 0201 	bic.w	r2, r2, #1
 800c894:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c89c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2220      	movs	r2, #32
 800c8b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b084      	sub	sp, #16
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d101      	bne.n	800c8e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c8de:	2302      	movs	r3, #2
 800c8e0:	e02d      	b.n	800c93e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2224      	movs	r2, #36	; 0x24
 800c8ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f022 0201 	bic.w	r2, r2, #1
 800c908:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	430a      	orrs	r2, r1
 800c91c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f850 	bl	800c9c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2220      	movs	r2, #32
 800c930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b084      	sub	sp, #16
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c956:	2b01      	cmp	r3, #1
 800c958:	d101      	bne.n	800c95e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c95a:	2302      	movs	r3, #2
 800c95c:	e02d      	b.n	800c9ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2201      	movs	r2, #1
 800c962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2224      	movs	r2, #36	; 0x24
 800c96a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f022 0201 	bic.w	r2, r2, #1
 800c984:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	683a      	ldr	r2, [r7, #0]
 800c996:	430a      	orrs	r2, r1
 800c998:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f812 	bl	800c9c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2220      	movs	r2, #32
 800c9ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
	...

0800c9c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d108      	bne.n	800c9e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c9e4:	e031      	b.n	800ca4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c9e6:	2310      	movs	r3, #16
 800c9e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c9ea:	2310      	movs	r3, #16
 800c9ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	0e5b      	lsrs	r3, r3, #25
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	f003 0307 	and.w	r3, r3, #7
 800c9fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	0f5b      	lsrs	r3, r3, #29
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	f003 0307 	and.w	r3, r3, #7
 800ca0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca0e:	7bbb      	ldrb	r3, [r7, #14]
 800ca10:	7b3a      	ldrb	r2, [r7, #12]
 800ca12:	4911      	ldr	r1, [pc, #68]	; (800ca58 <UARTEx_SetNbDataToProcess+0x94>)
 800ca14:	5c8a      	ldrb	r2, [r1, r2]
 800ca16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca1a:	7b3a      	ldrb	r2, [r7, #12]
 800ca1c:	490f      	ldr	r1, [pc, #60]	; (800ca5c <UARTEx_SetNbDataToProcess+0x98>)
 800ca1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	7b7a      	ldrb	r2, [r7, #13]
 800ca30:	4909      	ldr	r1, [pc, #36]	; (800ca58 <UARTEx_SetNbDataToProcess+0x94>)
 800ca32:	5c8a      	ldrb	r2, [r1, r2]
 800ca34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca38:	7b7a      	ldrb	r2, [r7, #13]
 800ca3a:	4908      	ldr	r1, [pc, #32]	; (800ca5c <UARTEx_SetNbDataToProcess+0x98>)
 800ca3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca4a:	bf00      	nop
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	0800cb00 	.word	0x0800cb00
 800ca5c:	0800cb08 	.word	0x0800cb08

0800ca60 <memset>:
 800ca60:	4402      	add	r2, r0
 800ca62:	4603      	mov	r3, r0
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d100      	bne.n	800ca6a <memset+0xa>
 800ca68:	4770      	bx	lr
 800ca6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca6e:	e7f9      	b.n	800ca64 <memset+0x4>

0800ca70 <__libc_init_array>:
 800ca70:	b570      	push	{r4, r5, r6, lr}
 800ca72:	4d0d      	ldr	r5, [pc, #52]	; (800caa8 <__libc_init_array+0x38>)
 800ca74:	4c0d      	ldr	r4, [pc, #52]	; (800caac <__libc_init_array+0x3c>)
 800ca76:	1b64      	subs	r4, r4, r5
 800ca78:	10a4      	asrs	r4, r4, #2
 800ca7a:	2600      	movs	r6, #0
 800ca7c:	42a6      	cmp	r6, r4
 800ca7e:	d109      	bne.n	800ca94 <__libc_init_array+0x24>
 800ca80:	4d0b      	ldr	r5, [pc, #44]	; (800cab0 <__libc_init_array+0x40>)
 800ca82:	4c0c      	ldr	r4, [pc, #48]	; (800cab4 <__libc_init_array+0x44>)
 800ca84:	f000 f818 	bl	800cab8 <_init>
 800ca88:	1b64      	subs	r4, r4, r5
 800ca8a:	10a4      	asrs	r4, r4, #2
 800ca8c:	2600      	movs	r6, #0
 800ca8e:	42a6      	cmp	r6, r4
 800ca90:	d105      	bne.n	800ca9e <__libc_init_array+0x2e>
 800ca92:	bd70      	pop	{r4, r5, r6, pc}
 800ca94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca98:	4798      	blx	r3
 800ca9a:	3601      	adds	r6, #1
 800ca9c:	e7ee      	b.n	800ca7c <__libc_init_array+0xc>
 800ca9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800caa2:	4798      	blx	r3
 800caa4:	3601      	adds	r6, #1
 800caa6:	e7f2      	b.n	800ca8e <__libc_init_array+0x1e>
 800caa8:	0800cb18 	.word	0x0800cb18
 800caac:	0800cb18 	.word	0x0800cb18
 800cab0:	0800cb18 	.word	0x0800cb18
 800cab4:	0800cb1c 	.word	0x0800cb1c

0800cab8 <_init>:
 800cab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caba:	bf00      	nop
 800cabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cabe:	bc08      	pop	{r3}
 800cac0:	469e      	mov	lr, r3
 800cac2:	4770      	bx	lr

0800cac4 <_fini>:
 800cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac6:	bf00      	nop
 800cac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caca:	bc08      	pop	{r3}
 800cacc:	469e      	mov	lr, r3
 800cace:	4770      	bx	lr
