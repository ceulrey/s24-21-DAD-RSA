
Test_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae04  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b0d0  0800b0d0  0001b0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b110  0800b110  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b118  0800b118  0001b118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800b120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800b130  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800b190  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  240000d0  0800b1f0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000644  0800b1f0  00020644  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c153  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b7f  00000000  00000000  0003c294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  0003ee18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103c  00000000  00000000  000402c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003430f  00000000  00000000  000412fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b194  00000000  00000000  0007560b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00155dd6  00000000  00000000  0009079f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005954  00000000  00000000  001e6578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001ebecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b0b8 	.word	0x0800b0b8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	0800b0b8 	.word	0x0800b0b8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 f92a 	bl	8001864 <HAL_Init>
  void InitFifo(void);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f844 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fac0 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 fa8e 	bl	8000b38 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800061c:	f000 f9ec 	bl	80009f8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000620:	f000 fa82 	bl	8000b28 <MX_USB_OTG_HS_USB_Init>
  MX_USART1_UART_Init();
 8000624:	f000 f99c 	bl	8000960 <MX_USART1_UART_Init>
  MX_ETH_Init();
 8000628:	f000 f8a8 	bl	800077c <MX_ETH_Init>
  MX_TIM16_Init();
 800062c:	f000 f948 	bl	80008c0 <MX_TIM16_Init>
  MX_USART6_UART_Init();
 8000630:	f000 fa2e 	bl	8000a90 <MX_USART6_UART_Init>
  MX_TIM17_Init();
 8000634:	f000 f96c 	bl	8000910 <MX_TIM17_Init>
  MX_SPI1_Init();
 8000638:	f000 f8ec 	bl	8000814 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, rx_buff, 1);
 800063c:	2201      	movs	r2, #1
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <main+0x7c>)
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <main+0x80>)
 8000642:	f008 fd19 	bl	8009078 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart6, rx_buff, 1);
 8000646:	2201      	movs	r2, #1
 8000648:	490e      	ldr	r1, [pc, #56]	; (8000684 <main+0x7c>)
 800064a:	4810      	ldr	r0, [pc, #64]	; (800068c <main+0x84>)
 800064c:	f008 fd14 	bl	8009078 <HAL_UART_Receive_DMA>

  //HAL_UART_Receive(&huart1, rx_buff, 12, 70000);

  if (HAL_TIM_Base_Start_IT(&htim16) != HAL_OK)
 8000650:	480f      	ldr	r0, [pc, #60]	; (8000690 <main+0x88>)
 8000652:	f008 fa25 	bl	8008aa0 <HAL_TIM_Base_Start_IT>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <main+0x58>
  {
    /* Starting Error */
    Error_Handler();
 800065c:	f000 fc4c 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_Base_Start_IT(&htim17) != HAL_OK)
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <main+0x8c>)
 8000662:	f008 fa1d 	bl	8008aa0 <HAL_TIM_Base_Start_IT>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <main+0x68>
  {
    /* Starting Error */
    Error_Handler();
 800066c:	f000 fc44 	bl	8000ef8 <Error_Handler>
		//  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		//  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
	 // }

	 // HAL_UART_Receive(&huart1, rx_buff, 12, 1000);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000674:	4808      	ldr	r0, [pc, #32]	; (8000698 <main+0x90>)
 8000676:	f004 feec 	bl	8005452 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800067a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067e:	f001 f983 	bl	8001988 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000682:	e7f5      	b.n	8000670 <main+0x68>
 8000684:	24000618 	.word	0x24000618
 8000688:	2400036c 	.word	0x2400036c
 800068c:	24000494 	.word	0x24000494
 8000690:	240002d4 	.word	0x240002d4
 8000694:	24000320 	.word	0x24000320
 8000698:	58020400 	.word	0x58020400

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09c      	sub	sp, #112	; 0x70
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	224c      	movs	r2, #76	; 0x4c
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f00a fcd8 	bl	800b060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2220      	movs	r2, #32
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f00a fcd2 	bl	800b060 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006bc:	2002      	movs	r0, #2
 80006be:	f004 ff07 	bl	80054d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <SystemClock_Config+0xdc>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a2b      	ldr	r2, [pc, #172]	; (8000778 <SystemClock_Config+0xdc>)
 80006cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b29      	ldr	r3, [pc, #164]	; (8000778 <SystemClock_Config+0xdc>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006de:	bf00      	nop
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <SystemClock_Config+0xdc>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ec:	d1f8      	bne.n	80006e0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006ee:	2321      	movs	r3, #33	; 0x21
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000708:	f240 1313 	movw	r3, #275	; 0x113
 800070c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000712:	2304      	movs	r3, #4
 8000714:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800071a:	2304      	movs	r3, #4
 800071c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800071e:	2300      	movs	r3, #0
 8000720:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072a:	4618      	mov	r0, r3
 800072c:	f004 ff0a 	bl	8005544 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000736:	f000 fbdf 	bl	8000ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	233f      	movs	r3, #63	; 0x3f
 800073c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2303      	movs	r3, #3
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000746:	2308      	movs	r3, #8
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800074a:	2340      	movs	r3, #64	; 0x40
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800074e:	2340      	movs	r3, #64	; 0x40
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000758:	2340      	movs	r3, #64	; 0x40
 800075a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2103      	movs	r1, #3
 8000760:	4618      	mov	r0, r3
 8000762:	f005 fac9 	bl	8005cf8 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800076c:	f000 fbc4 	bl	8000ef8 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3770      	adds	r7, #112	; 0x70
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	58024800 	.word	0x58024800

0800077c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_ETH_Init+0x80>)
 8000782:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <MX_ETH_Init+0x84>)
 8000784:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_ETH_Init+0x88>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ETH_Init+0x88>)
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_ETH_Init+0x88>)
 8000794:	22e1      	movs	r2, #225	; 0xe1
 8000796:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_ETH_Init+0x88>)
 800079a:	2200      	movs	r2, #0
 800079c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ETH_Init+0x88>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_ETH_Init+0x88>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ETH_Init+0x80>)
 80007ac:	4a15      	ldr	r2, [pc, #84]	; (8000804 <MX_ETH_Init+0x88>)
 80007ae:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_ETH_Init+0x80>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_ETH_Init+0x80>)
 80007b8:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_ETH_Init+0x8c>)
 80007ba:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_ETH_Init+0x80>)
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_ETH_Init+0x90>)
 80007c0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_ETH_Init+0x80>)
 80007c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007c8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_ETH_Init+0x80>)
 80007cc:	f004 f85c 	bl	8004888 <HAL_ETH_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007d6:	f000 fb8f 	bl	8000ef8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007da:	2238      	movs	r2, #56	; 0x38
 80007dc:	2100      	movs	r1, #0
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_ETH_Init+0x94>)
 80007e0:	f00a fc3e 	bl	800b060 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_ETH_Init+0x94>)
 80007e6:	2221      	movs	r2, #33	; 0x21
 80007e8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_ETH_Init+0x94>)
 80007ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_ETH_Init+0x94>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	24000124 	.word	0x24000124
 8000800:	40028000 	.word	0x40028000
 8000804:	24000638 	.word	0x24000638
 8000808:	24000070 	.word	0x24000070
 800080c:	24000010 	.word	0x24000010
 8000810:	240000ec 	.word	0x240000ec

08000814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_SPI1_Init+0xa4>)
 800081a:	4a28      	ldr	r2, [pc, #160]	; (80008bc <MX_SPI1_Init+0xa8>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000820:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <MX_SPI1_Init+0xa4>)
 800082e:	2207      	movs	r2, #7
 8000830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_SPI1_Init+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000840:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000844:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000848:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800084c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_SPI1_Init+0xa4>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000870:	2200      	movs	r2, #0
 8000872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_SPI1_Init+0xa4>)
 800087c:	2200      	movs	r2, #0
 800087e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_SPI1_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_SPI1_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_SPI1_Init+0xa4>)
 800089a:	2200      	movs	r2, #0
 800089c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_SPI1_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_SPI1_Init+0xa4>)
 80008a6:	f007 fb75 	bl	8007f94 <HAL_SPI_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80008b0:	f000 fb22 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	240001d4 	.word	0x240001d4
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_TIM16_Init+0x48>)
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <MX_TIM16_Init+0x4c>)
 80008c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 27500-1;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_TIM16_Init+0x48>)
 80008cc:	f646 326b 	movw	r2, #27499	; 0x6b6b
 80008d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_TIM16_Init+0x48>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_TIM16_Init+0x48>)
 80008da:	f242 720f 	movw	r2, #9999	; 0x270f
 80008de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_TIM16_Init+0x48>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_TIM16_Init+0x48>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_TIM16_Init+0x48>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_TIM16_Init+0x48>)
 80008f4:	f008 f87d 	bl	80089f2 <HAL_TIM_Base_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80008fe:	f000 fafb 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	240002d4 	.word	0x240002d4
 800090c:	40014400 	.word	0x40014400

08000910 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_TIM17_Init+0x48>)
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <MX_TIM17_Init+0x4c>)
 8000918:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 27500-1;
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_TIM17_Init+0x48>)
 800091c:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8000920:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_TIM17_Init+0x48>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000-1;
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_TIM17_Init+0x48>)
 800092a:	f242 720f 	movw	r2, #9999	; 0x270f
 800092e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_TIM17_Init+0x48>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_TIM17_Init+0x48>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_TIM17_Init+0x48>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_TIM17_Init+0x48>)
 8000944:	f008 f855 	bl	80089f2 <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800094e:	f000 fad3 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	24000320 	.word	0x24000320
 800095c:	40014800 	.word	0x40014800

08000960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <MX_USART1_UART_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800096c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009aa:	f008 fb15 	bl	8008fd8 <HAL_UART_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009b4:	f000 faa0 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009bc:	f00a fa85 	bl	800aeca <HAL_UARTEx_SetTxFifoThreshold>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009c6:	f000 fa97 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009ce:	f00a faba 	bl	800af46 <HAL_UARTEx_SetRxFifoThreshold>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f000 fa8e 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009de:	f00a fa3b 	bl	800ae58 <HAL_UARTEx_DisableFifoMode>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f000 fa86 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2400036c 	.word	0x2400036c
 80009f4:	40011000 	.word	0x40011000

080009f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <MX_USART3_UART_Init+0x94>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a40:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a42:	f008 fac9 	bl	8008fd8 <HAL_UART_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f000 fa54 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a54:	f00a fa39 	bl	800aeca <HAL_UARTEx_SetTxFifoThreshold>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5e:	f000 fa4b 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a66:	f00a fa6e 	bl	800af46 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f000 fa42 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_USART3_UART_Init+0x90>)
 8000a76:	f00a f9ef 	bl	800ae58 <HAL_UARTEx_DisableFifoMode>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a80:	f000 fa3a 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24000400 	.word	0x24000400
 8000a8c:	40004800 	.word	0x40004800

08000a90 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000a96:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <MX_USART6_UART_Init+0x94>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000a9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aa0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ad8:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000ada:	f008 fa7d 	bl	8008fd8 <HAL_UART_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f000 fa08 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000aec:	f00a f9ed 	bl	800aeca <HAL_UARTEx_SetTxFifoThreshold>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000af6:	f000 f9ff 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000afe:	f00a fa22 	bl	800af46 <HAL_UARTEx_SetRxFifoThreshold>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000b08:	f000 f9f6 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_USART6_UART_Init+0x90>)
 8000b0e:	f00a f9a3 	bl	800ae58 <HAL_UARTEx_DisableFifoMode>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f000 f9ee 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	24000494 	.word	0x24000494
 8000b24:	40011400 	.word	0x40011400

08000b28 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_DMA_Init+0x5c>)
 8000b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <MX_DMA_Init+0x5c>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_DMA_Init+0x5c>)
 8000b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	200b      	movs	r0, #11
 8000b62:	f001 f824 	bl	8001bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b66:	200b      	movs	r0, #11
 8000b68:	f001 f83b 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	200c      	movs	r0, #12
 8000b72:	f001 f81c 	bl	8001bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b76:	200c      	movs	r0, #12
 8000b78:	f001 f833 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	200d      	movs	r0, #13
 8000b82:	f001 f814 	bl	8001bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b86:	200d      	movs	r0, #13
 8000b88:	f001 f82b 	bl	8001be2 <HAL_NVIC_EnableIRQ>

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58024400 	.word	0x58024400

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b75      	ldr	r3, [pc, #468]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a73      	ldr	r2, [pc, #460]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b71      	ldr	r3, [pc, #452]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bcc:	4b6d      	ldr	r3, [pc, #436]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	4a6c      	ldr	r2, [pc, #432]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bdc:	4b69      	ldr	r3, [pc, #420]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b66      	ldr	r3, [pc, #408]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a64      	ldr	r2, [pc, #400]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b62      	ldr	r3, [pc, #392]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b5e      	ldr	r3, [pc, #376]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	4a5d      	ldr	r2, [pc, #372]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c18:	4b5a      	ldr	r3, [pc, #360]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b57      	ldr	r3, [pc, #348]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a55      	ldr	r2, [pc, #340]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b53      	ldr	r3, [pc, #332]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c44:	4b4f      	ldr	r3, [pc, #316]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	4a4e      	ldr	r2, [pc, #312]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c54:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	4a46      	ldr	r2, [pc, #280]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c72:	4b44      	ldr	r3, [pc, #272]	; (8000d84 <MX_GPIO_Init+0x1ec>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c86:	4840      	ldr	r0, [pc, #256]	; (8000d88 <MX_GPIO_Init+0x1f0>)
 8000c88:	f004 fbca 	bl	8005420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c92:	483e      	ldr	r0, [pc, #248]	; (8000d8c <MX_GPIO_Init+0x1f4>)
 8000c94:	f004 fbc4 	bl	8005420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	483c      	ldr	r0, [pc, #240]	; (8000d90 <MX_GPIO_Init+0x1f8>)
 8000c9e:	f004 fbbf 	bl	8005420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4837      	ldr	r0, [pc, #220]	; (8000d94 <MX_GPIO_Init+0x1fc>)
 8000cb8:	f004 fa0a 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000cbc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	482c      	ldr	r0, [pc, #176]	; (8000d88 <MX_GPIO_Init+0x1f0>)
 8000cd6:	f004 f9fb 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4826      	ldr	r0, [pc, #152]	; (8000d8c <MX_GPIO_Init+0x1f4>)
 8000cf4:	f004 f9ec 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4822      	ldr	r0, [pc, #136]	; (8000d98 <MX_GPIO_Init+0x200>)
 8000d0e:	f004 f9df 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	481d      	ldr	r0, [pc, #116]	; (8000d9c <MX_GPIO_Init+0x204>)
 8000d28:	f004 f9d2 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d3e:	230a      	movs	r3, #10
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4814      	ldr	r0, [pc, #80]	; (8000d9c <MX_GPIO_Init+0x204>)
 8000d4a:	f004 f9c1 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	480a      	ldr	r0, [pc, #40]	; (8000d90 <MX_GPIO_Init+0x1f8>)
 8000d66:	f004 f9b3 	bl	80050d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2017      	movs	r0, #23
 8000d70:	f000 ff1d 	bl	8001bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d74:	2017      	movs	r0, #23
 8000d76:	f000 ff34 	bl	8001be2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3730      	adds	r7, #48	; 0x30
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58020400 	.word	0x58020400
 8000d8c:	58020c00 	.word	0x58020c00
 8000d90:	58021000 	.word	0x58021000
 8000d94:	58020800 	.word	0x58020800
 8000d98:	58021800 	.word	0x58021800
 8000d9c:	58020000 	.word	0x58020000

08000da0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

	counter++;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <HAL_UART_RxCpltCallback+0x74>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_UART_RxCpltCallback+0x74>)
 8000db2:	701a      	strb	r2, [r3, #0]
	PutFifo(rx_buff[0]);
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_UART_RxCpltCallback+0x78>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f845 	bl	8000e48 <PutFifo>
	HAL_UART_Receive_DMA(&huart6, rx_buff, 1);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4915      	ldr	r1, [pc, #84]	; (8000e18 <HAL_UART_RxCpltCallback+0x78>)
 8000dc2:	4816      	ldr	r0, [pc, #88]	; (8000e1c <HAL_UART_RxCpltCallback+0x7c>)
 8000dc4:	f008 f958 	bl	8009078 <HAL_UART_Receive_DMA>
	if(counter >= 5){
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_UART_RxCpltCallback+0x74>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d91d      	bls.n	8000e0c <HAL_UART_RxCpltCallback+0x6c>
		for(int i = 0; i < 5; i++){
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e00b      	b.n	8000dee <HAL_UART_RxCpltCallback+0x4e>
				GetFifo(&test_buff[i]);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <HAL_UART_RxCpltCallback+0x80>)
 8000dda:	4413      	add	r3, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f85f 	bl	8000ea0 <GetFifo>
				counter = 0;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_UART_RxCpltCallback+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 5; i++){
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	ddf0      	ble.n	8000dd6 <HAL_UART_RxCpltCallback+0x36>

		}
		if(HAL_SPI_Transmit_IT(&hspi1, test_buff, sizeof(test_buff)) != HAL_OK){
 8000df4:	2205      	movs	r2, #5
 8000df6:	490a      	ldr	r1, [pc, #40]	; (8000e20 <HAL_UART_RxCpltCallback+0x80>)
 8000df8:	480a      	ldr	r0, [pc, #40]	; (8000e24 <HAL_UART_RxCpltCallback+0x84>)
 8000dfa:	f007 f9ef 	bl	80081dc <HAL_SPI_Transmit_IT>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_UART_RxCpltCallback+0x6c>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000e04:	2102      	movs	r1, #2
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <HAL_UART_RxCpltCallback+0x88>)
 8000e08:	f004 fb23 	bl	8005452 <HAL_GPIO_TogglePin>
		}
	}

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2400061d 	.word	0x2400061d
 8000e18:	24000618 	.word	0x24000618
 8000e1c:	24000494 	.word	0x24000494
 8000e20:	24000620 	.word	0x24000620
 8000e24:	240001d4 	.word	0x240001d4
 8000e28:	58021000 	.word	0x58021000

08000e2c <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000e34:	2101      	movs	r1, #1
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <HAL_SPI_TxCpltCallback+0x18>)
 8000e38:	f004 fb0b 	bl	8005452 <HAL_GPIO_TogglePin>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	58020400 	.word	0x58020400

08000e48 <PutFifo>:
    PutPt = GetPt = &Fifo[0];
}



int PutFifo(char data) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]

    char* Ppt;

    Ppt = PutPt;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <PutFifo+0x48>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	60fb      	str	r3, [r7, #12]

    *(Ppt++) = data;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60fa      	str	r2, [r7, #12]
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	701a      	strb	r2, [r3, #0]

    if (Ppt == &Fifo[FIFO_SIZE]) {
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <PutFifo+0x4c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <PutFifo+0x26>

        Ppt = &Fifo[0]; // wrap around
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <PutFifo+0x50>)
 8000e6c:	60fb      	str	r3, [r7, #12]

    }

    if (Ppt == GetPt) {
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <PutFifo+0x54>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d101      	bne.n	8000e7c <PutFifo+0x34>
        return 0; // buffer full so fail
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e003      	b.n	8000e84 <PutFifo+0x3c>
    }

    PutPt = Ppt;
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <PutFifo+0x48>)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6013      	str	r3, [r2, #0]

    return 1;
 8000e82:	2301      	movs	r3, #1

}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	24000628 	.word	0x24000628
 8000e94:	24000638 	.word	0x24000638
 8000e98:	24000630 	.word	0x24000630
 8000e9c:	2400062c 	.word	0x2400062c

08000ea0 <GetFifo>:



int GetFifo(uint8_t* data) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

    if (GetPt == PutPt) {
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <GetFifo+0x48>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <GetFifo+0x4c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d101      	bne.n	8000eb8 <GetFifo+0x18>

        return 0; // buffer is empty
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e010      	b.n	8000eda <GetFifo+0x3a>
    }
    //data pointer gets pointed to the next GetPointer
    *data = *(GetPt++);
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <GetFifo+0x48>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	490a      	ldr	r1, [pc, #40]	; (8000ee8 <GetFifo+0x48>)
 8000ec0:	600a      	str	r2, [r1, #0]
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	701a      	strb	r2, [r3, #0]
    if (GetPt == &Fifo[FIFO_SIZE]) {
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <GetFifo+0x48>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <GetFifo+0x50>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d102      	bne.n	8000ed8 <GetFifo+0x38>

        GetPt = &Fifo[0];
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <GetFifo+0x48>)
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <GetFifo+0x54>)
 8000ed6:	601a      	str	r2, [r3, #0]
    }
    return 1;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2400062c 	.word	0x2400062c
 8000eec:	24000628 	.word	0x24000628
 8000ef0:	24000638 	.word	0x24000638
 8000ef4:	24000630 	.word	0x24000630

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <Error_Handler+0x8>
	...

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_MspInit+0x30>)
 8000f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_MspInit+0x30>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_MspInit+0x30>)
 8000f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	58024400 	.word	0x58024400

08000f38 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	; 0x38
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a59      	ldr	r2, [pc, #356]	; (80010bc <HAL_ETH_MspInit+0x184>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	f040 80ab 	bne.w	80010b2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f5c:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000f5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f62:	4a57      	ldr	r2, [pc, #348]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000f6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f7a:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000f7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f80:	4a4f      	ldr	r2, [pc, #316]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f8a:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000f8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f98:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000f9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f9e:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fa8:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000faa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	61bb      	str	r3, [r7, #24]
 8000fb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbc:	4a40      	ldr	r2, [pc, #256]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fda:	4a39      	ldr	r2, [pc, #228]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff8:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001016:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8001018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <HAL_ETH_MspInit+0x188>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800102e:	2332      	movs	r3, #50	; 0x32
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800103e:	230b      	movs	r3, #11
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	4619      	mov	r1, r3
 8001048:	481e      	ldr	r0, [pc, #120]	; (80010c4 <HAL_ETH_MspInit+0x18c>)
 800104a:	f004 f841 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800104e:	2386      	movs	r3, #134	; 0x86
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105e:	230b      	movs	r3, #11
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	4817      	ldr	r0, [pc, #92]	; (80010c8 <HAL_ETH_MspInit+0x190>)
 800106a:	f004 f831 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800106e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001080:	230b      	movs	r3, #11
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	4810      	ldr	r0, [pc, #64]	; (80010cc <HAL_ETH_MspInit+0x194>)
 800108c:	f004 f820 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001090:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a2:	230b      	movs	r3, #11
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <HAL_ETH_MspInit+0x198>)
 80010ae:	f004 f80f 	bl	80050d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3738      	adds	r7, #56	; 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40028000 	.word	0x40028000
 80010c0:	58024400 	.word	0x58024400
 80010c4:	58020800 	.word	0x58020800
 80010c8:	58020000 	.word	0x58020000
 80010cc:	58020400 	.word	0x58020400
 80010d0:	58021800 	.word	0x58021800

080010d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ba      	sub	sp, #232	; 0xe8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	22b8      	movs	r2, #184	; 0xb8
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f009 ffb3 	bl	800b060 <memset>
  if(hspi->Instance==SPI1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a53      	ldr	r2, [pc, #332]	; (800124c <HAL_SPI_MspInit+0x178>)
 8001100:	4293      	cmp	r3, r2
 8001102:	f040 809e 	bne.w	8001242 <HAL_SPI_MspInit+0x16e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001106:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001112:	2300      	movs	r3, #0
 8001114:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	4618      	mov	r0, r3
 800111c:	f005 f978 	bl	8006410 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001126:	f7ff fee7 	bl	8000ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112a:	4b49      	ldr	r3, [pc, #292]	; (8001250 <HAL_SPI_MspInit+0x17c>)
 800112c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001130:	4a47      	ldr	r2, [pc, #284]	; (8001250 <HAL_SPI_MspInit+0x17c>)
 8001132:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001136:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800113a:	4b45      	ldr	r3, [pc, #276]	; (8001250 <HAL_SPI_MspInit+0x17c>)
 800113c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_SPI_MspInit+0x17c>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114e:	4a40      	ldr	r2, [pc, #256]	; (8001250 <HAL_SPI_MspInit+0x17c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001158:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <HAL_SPI_MspInit+0x17c>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <HAL_SPI_MspInit+0x17c>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	4a38      	ldr	r2, [pc, #224]	; (8001250 <HAL_SPI_MspInit+0x17c>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_SPI_MspInit+0x17c>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001184:	2360      	movs	r3, #96	; 0x60
 8001186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800119c:	2305      	movs	r3, #5
 800119e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011a6:	4619      	mov	r1, r3
 80011a8:	482a      	ldr	r0, [pc, #168]	; (8001254 <HAL_SPI_MspInit+0x180>)
 80011aa:	f003 ff91 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011c6:	2305      	movs	r3, #5
 80011c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4821      	ldr	r0, [pc, #132]	; (8001258 <HAL_SPI_MspInit+0x184>)
 80011d4:	f003 ff7c 	bl	80050d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream2;
 80011d8:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_SPI_MspInit+0x188>)
 80011da:	4a21      	ldr	r2, [pc, #132]	; (8001260 <HAL_SPI_MspInit+0x18c>)
 80011dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_SPI_MspInit+0x188>)
 80011e0:	2226      	movs	r2, #38	; 0x26
 80011e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_SPI_MspInit+0x188>)
 80011e6:	2240      	movs	r2, #64	; 0x40
 80011e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_SPI_MspInit+0x188>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <HAL_SPI_MspInit+0x188>)
 80011f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_SPI_MspInit+0x188>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_SPI_MspInit+0x188>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_SPI_MspInit+0x188>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_SPI_MspInit+0x188>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_SPI_MspInit+0x188>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <HAL_SPI_MspInit+0x188>)
 8001218:	f000 fcfe 	bl	8001c18 <HAL_DMA_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 8001222:	f7ff fe69 	bl	8000ef8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_SPI_MspInit+0x188>)
 800122a:	679a      	str	r2, [r3, #120]	; 0x78
 800122c:	4a0b      	ldr	r2, [pc, #44]	; (800125c <HAL_SPI_MspInit+0x188>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2023      	movs	r0, #35	; 0x23
 8001238:	f000 fcb9 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800123c:	2023      	movs	r0, #35	; 0x23
 800123e:	f000 fcd0 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	37e8      	adds	r7, #232	; 0xe8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40013000 	.word	0x40013000
 8001250:	58024400 	.word	0x58024400
 8001254:	58020000 	.word	0x58020000
 8001258:	58020c00 	.word	0x58020c00
 800125c:	2400025c 	.word	0x2400025c
 8001260:	40020040 	.word	0x40020040

08001264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <HAL_TIM_Base_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d117      	bne.n	80012a6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_TIM_Base_MspInit+0x88>)
 8001278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <HAL_TIM_Base_MspInit+0x88>)
 800127e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001282:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_TIM_Base_MspInit+0x88>)
 8001288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	2075      	movs	r0, #117	; 0x75
 800129a:	f000 fc88 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800129e:	2075      	movs	r0, #117	; 0x75
 80012a0:	f000 fc9f 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80012a4:	e01b      	b.n	80012de <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM17)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_TIM_Base_MspInit+0x8c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d116      	bne.n	80012de <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_TIM_Base_MspInit+0x88>)
 80012b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012b6:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_TIM_Base_MspInit+0x88>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_TIM_Base_MspInit+0x88>)
 80012c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2076      	movs	r0, #118	; 0x76
 80012d4:	f000 fc6b 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80012d8:	2076      	movs	r0, #118	; 0x76
 80012da:	f000 fc82 	bl	8001be2 <HAL_NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40014400 	.word	0x40014400
 80012ec:	58024400 	.word	0x58024400
 80012f0:	40014800 	.word	0x40014800

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0bc      	sub	sp, #240	; 0xf0
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800130c:	f107 0320 	add.w	r3, r7, #32
 8001310:	22b8      	movs	r2, #184	; 0xb8
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f009 fea3 	bl	800b060 <memset>
  if(huart->Instance==USART1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4ab4      	ldr	r2, [pc, #720]	; (80015f0 <HAL_UART_MspInit+0x2fc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	f040 8093 	bne.w	800144c <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001326:	f04f 0201 	mov.w	r2, #1
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001338:	f107 0320 	add.w	r3, r7, #32
 800133c:	4618      	mov	r0, r3
 800133e:	f005 f867 	bl	8006410 <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001348:	f7ff fdd6 	bl	8000ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800134c:	4ba9      	ldr	r3, [pc, #676]	; (80015f4 <HAL_UART_MspInit+0x300>)
 800134e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001352:	4aa8      	ldr	r2, [pc, #672]	; (80015f4 <HAL_UART_MspInit+0x300>)
 8001354:	f043 0310 	orr.w	r3, r3, #16
 8001358:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800135c:	4ba5      	ldr	r3, [pc, #660]	; (80015f4 <HAL_UART_MspInit+0x300>)
 800135e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4ba2      	ldr	r3, [pc, #648]	; (80015f4 <HAL_UART_MspInit+0x300>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	4aa0      	ldr	r2, [pc, #640]	; (80015f4 <HAL_UART_MspInit+0x300>)
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137a:	4b9e      	ldr	r3, [pc, #632]	; (80015f4 <HAL_UART_MspInit+0x300>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800138c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013a2:	2304      	movs	r3, #4
 80013a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013ac:	4619      	mov	r1, r3
 80013ae:	4892      	ldr	r0, [pc, #584]	; (80015f8 <HAL_UART_MspInit+0x304>)
 80013b0:	f003 fe8e 	bl	80050d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b4:	2340      	movs	r3, #64	; 0x40
 80013b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013cc:	2307      	movs	r3, #7
 80013ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013d6:	4619      	mov	r1, r3
 80013d8:	4887      	ldr	r0, [pc, #540]	; (80015f8 <HAL_UART_MspInit+0x304>)
 80013da:	f003 fe79 	bl	80050d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80013de:	4b87      	ldr	r3, [pc, #540]	; (80015fc <HAL_UART_MspInit+0x308>)
 80013e0:	4a87      	ldr	r2, [pc, #540]	; (8001600 <HAL_UART_MspInit+0x30c>)
 80013e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80013e4:	4b85      	ldr	r3, [pc, #532]	; (80015fc <HAL_UART_MspInit+0x308>)
 80013e6:	2229      	movs	r2, #41	; 0x29
 80013e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ea:	4b84      	ldr	r3, [pc, #528]	; (80015fc <HAL_UART_MspInit+0x308>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f0:	4b82      	ldr	r3, [pc, #520]	; (80015fc <HAL_UART_MspInit+0x308>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013f6:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_UART_MspInit+0x308>)
 80013f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013fe:	4b7f      	ldr	r3, [pc, #508]	; (80015fc <HAL_UART_MspInit+0x308>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001404:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <HAL_UART_MspInit+0x308>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800140a:	4b7c      	ldr	r3, [pc, #496]	; (80015fc <HAL_UART_MspInit+0x308>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001410:	4b7a      	ldr	r3, [pc, #488]	; (80015fc <HAL_UART_MspInit+0x308>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001416:	4b79      	ldr	r3, [pc, #484]	; (80015fc <HAL_UART_MspInit+0x308>)
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800141c:	4877      	ldr	r0, [pc, #476]	; (80015fc <HAL_UART_MspInit+0x308>)
 800141e:	f000 fbfb 	bl	8001c18 <HAL_DMA_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001428:	f7ff fd66 	bl	8000ef8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a73      	ldr	r2, [pc, #460]	; (80015fc <HAL_UART_MspInit+0x308>)
 8001430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001434:	4a71      	ldr	r2, [pc, #452]	; (80015fc <HAL_UART_MspInit+0x308>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2025      	movs	r0, #37	; 0x25
 8001440:	f000 fbb5 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001444:	2025      	movs	r0, #37	; 0x25
 8001446:	f000 fbcc 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800144a:	e0cd      	b.n	80015e8 <HAL_UART_MspInit+0x2f4>
  else if(huart->Instance==USART3)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a6c      	ldr	r2, [pc, #432]	; (8001604 <HAL_UART_MspInit+0x310>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d147      	bne.n	80014e6 <HAL_UART_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001456:	f04f 0202 	mov.w	r2, #2
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f004 ffcf 	bl	8006410 <HAL_RCCEx_PeriphCLKConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001478:	f7ff fd3e 	bl	8000ef8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800147c:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <HAL_UART_MspInit+0x300>)
 800147e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001482:	4a5c      	ldr	r2, [pc, #368]	; (80015f4 <HAL_UART_MspInit+0x300>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001488:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_UART_MspInit+0x300>)
 800148e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	4b56      	ldr	r3, [pc, #344]	; (80015f4 <HAL_UART_MspInit+0x300>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	4a54      	ldr	r2, [pc, #336]	; (80015f4 <HAL_UART_MspInit+0x300>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014aa:	4b52      	ldr	r3, [pc, #328]	; (80015f4 <HAL_UART_MspInit+0x300>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80014b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014d2:	2307      	movs	r3, #7
 80014d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014dc:	4619      	mov	r1, r3
 80014de:	484a      	ldr	r0, [pc, #296]	; (8001608 <HAL_UART_MspInit+0x314>)
 80014e0:	f003 fdf6 	bl	80050d0 <HAL_GPIO_Init>
}
 80014e4:	e080      	b.n	80015e8 <HAL_UART_MspInit+0x2f4>
  else if(huart->Instance==USART6)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a48      	ldr	r2, [pc, #288]	; (800160c <HAL_UART_MspInit+0x318>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d17b      	bne.n	80015e8 <HAL_UART_MspInit+0x2f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80014f0:	f04f 0201 	mov.w	r2, #1
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	4618      	mov	r0, r3
 8001508:	f004 ff82 	bl	8006410 <HAL_RCCEx_PeriphCLKConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_UART_MspInit+0x222>
      Error_Handler();
 8001512:	f7ff fcf1 	bl	8000ef8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_UART_MspInit+0x300>)
 8001518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800151c:	4a35      	ldr	r2, [pc, #212]	; (80015f4 <HAL_UART_MspInit+0x300>)
 800151e:	f043 0320 	orr.w	r3, r3, #32
 8001522:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <HAL_UART_MspInit+0x300>)
 8001528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <HAL_UART_MspInit+0x300>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	4a2e      	ldr	r2, [pc, #184]	; (80015f4 <HAL_UART_MspInit+0x300>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HAL_UART_MspInit+0x300>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001552:	23c0      	movs	r3, #192	; 0xc0
 8001554:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800156a:	2307      	movs	r3, #7
 800156c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001574:	4619      	mov	r1, r3
 8001576:	4826      	ldr	r0, [pc, #152]	; (8001610 <HAL_UART_MspInit+0x31c>)
 8001578:	f003 fdaa 	bl	80050d0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream1;
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <HAL_UART_MspInit+0x320>)
 800157e:	4a26      	ldr	r2, [pc, #152]	; (8001618 <HAL_UART_MspInit+0x324>)
 8001580:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_UART_MspInit+0x320>)
 8001584:	2247      	movs	r2, #71	; 0x47
 8001586:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_UART_MspInit+0x320>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <HAL_UART_MspInit+0x320>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_UART_MspInit+0x320>)
 8001596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_UART_MspInit+0x320>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_UART_MspInit+0x320>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_UART_MspInit+0x320>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_UART_MspInit+0x320>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_UART_MspInit+0x320>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80015ba:	4816      	ldr	r0, [pc, #88]	; (8001614 <HAL_UART_MspInit+0x320>)
 80015bc:	f000 fb2c 	bl	8001c18 <HAL_DMA_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_UART_MspInit+0x2d6>
      Error_Handler();
 80015c6:	f7ff fc97 	bl	8000ef8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <HAL_UART_MspInit+0x320>)
 80015ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_UART_MspInit+0x320>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2047      	movs	r0, #71	; 0x47
 80015de:	f000 fae6 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015e2:	2047      	movs	r0, #71	; 0x47
 80015e4:	f000 fafd 	bl	8001be2 <HAL_NVIC_EnableIRQ>
}
 80015e8:	bf00      	nop
 80015ea:	37f0      	adds	r7, #240	; 0xf0
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40011000 	.word	0x40011000
 80015f4:	58024400 	.word	0x58024400
 80015f8:	58020400 	.word	0x58020400
 80015fc:	24000528 	.word	0x24000528
 8001600:	40020010 	.word	0x40020010
 8001604:	40004800 	.word	0x40004800
 8001608:	58020c00 	.word	0x58020c00
 800160c:	40011400 	.word	0x40011400
 8001610:	58020800 	.word	0x58020800
 8001614:	240005a0 	.word	0x240005a0
 8001618:	40020028 	.word	0x40020028

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001668:	f000 f96e 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <DMA1_Stream0_IRQHandler+0x10>)
 8001676:	f001 fdf5 	bl	8003264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	24000528 	.word	0x24000528

08001684 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <DMA1_Stream1_IRQHandler+0x10>)
 800168a:	f001 fdeb 	bl	8003264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	240005a0 	.word	0x240005a0

08001698 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA1_Stream2_IRQHandler+0x10>)
 800169e:	f001 fde1 	bl	8003264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2400025c 	.word	0x2400025c

080016ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 80016b0:	2080      	movs	r0, #128	; 0x80
 80016b2:	f003 fee8 	bl	8005486 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <SPI1_IRQHandler+0x10>)
 80016c2:	f006 fe43 	bl	800834c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	240001d4 	.word	0x240001d4

080016d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <USART1_IRQHandler+0x10>)
 80016d6:	f007 fd1b 	bl	8009110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2400036c 	.word	0x2400036c

080016e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <USART6_IRQHandler+0x10>)
 80016ea:	f007 fd11 	bl	8009110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	24000494 	.word	0x24000494

080016f8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM16_IRQHandler+0x10>)
 80016fe:	f007 fa55 	bl	8008bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	240002d4 	.word	0x240002d4

0800170c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <TIM17_IRQHandler+0x10>)
 8001712:	f007 fa4b 	bl	8008bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	24000320 	.word	0x24000320

08001720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <SystemInit+0xd0>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172a:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <SystemInit+0xd0>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <SystemInit+0xd4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	2b06      	cmp	r3, #6
 800173e:	d807      	bhi.n	8001750 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <SystemInit+0xd4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 030f 	bic.w	r3, r3, #15
 8001748:	4a2a      	ldr	r2, [pc, #168]	; (80017f4 <SystemInit+0xd4>)
 800174a:	f043 0307 	orr.w	r3, r3, #7
 800174e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <SystemInit+0xd8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <SystemInit+0xd8>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <SystemInit+0xd8>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <SystemInit+0xd8>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4924      	ldr	r1, [pc, #144]	; (80017f8 <SystemInit+0xd8>)
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <SystemInit+0xdc>)
 800176a:	4013      	ands	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <SystemInit+0xd4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <SystemInit+0xd4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 030f 	bic.w	r3, r3, #15
 8001782:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <SystemInit+0xd4>)
 8001784:	f043 0307 	orr.w	r3, r3, #7
 8001788:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <SystemInit+0xd8>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <SystemInit+0xd8>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <SystemInit+0xd8>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <SystemInit+0xd8>)
 800179e:	4a18      	ldr	r2, [pc, #96]	; (8001800 <SystemInit+0xe0>)
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <SystemInit+0xd8>)
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <SystemInit+0xe4>)
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <SystemInit+0xd8>)
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <SystemInit+0xe8>)
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <SystemInit+0xd8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <SystemInit+0xd8>)
 80017b6:	4a14      	ldr	r2, [pc, #80]	; (8001808 <SystemInit+0xe8>)
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <SystemInit+0xd8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <SystemInit+0xd8>)
 80017c2:	4a11      	ldr	r2, [pc, #68]	; (8001808 <SystemInit+0xe8>)
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <SystemInit+0xd8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <SystemInit+0xd8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <SystemInit+0xd8>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <SystemInit+0xd8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <SystemInit+0xec>)
 80017e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00
 80017f4:	52002000 	.word	0x52002000
 80017f8:	58024400 	.word	0x58024400
 80017fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001800:	02020200 	.word	0x02020200
 8001804:	01ff0000 	.word	0x01ff0000
 8001808:	01010280 	.word	0x01010280
 800180c:	52004000 	.word	0x52004000

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001814:	f7ff ff84 	bl	8001720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	; (8001850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	; (800185c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183e:	f009 fc17 	bl	800b070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7fe fee1 	bl	8000608 <main>
  bx  lr
 8001846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800184c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001850:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001854:	0800b120 	.word	0x0800b120
  ldr r2, =_sbss
 8001858:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800185c:	24000644 	.word	0x24000644

08001860 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC3_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186a:	2003      	movs	r0, #3
 800186c:	f000 f994 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001870:	f004 fbf8 	bl	8006064 <HAL_RCC_GetSysClockFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_Init+0x68>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	4913      	ldr	r1, [pc, #76]	; (80018d0 <HAL_Init+0x6c>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_Init+0x68>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_Init+0x6c>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <HAL_Init+0x70>)
 80018a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <HAL_Init+0x74>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f814 	bl	80018dc <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e002      	b.n	80018c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018be:	f7ff fb21 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	58024400 	.word	0x58024400
 80018d0:	0800b0d0 	.word	0x0800b0d0
 80018d4:	24000004 	.word	0x24000004
 80018d8:	24000000 	.word	0x24000000

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_InitTick+0x60>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e021      	b.n	8001934 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_InitTick+0x64>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_InitTick+0x60>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f979 	bl	8001bfe <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f943 	bl	8001bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x68>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2400000c 	.word	0x2400000c
 8001940:	24000000 	.word	0x24000000
 8001944:	24000008 	.word	0x24000008

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2400000c 	.word	0x2400000c
 800196c:	24000640 	.word	0x24000640

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	24000640 	.word	0x24000640

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2400000c 	.word	0x2400000c

080019d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80019e0:	4904      	ldr	r1, [pc, #16]	; (80019f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	58000400 	.word	0x58000400

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <__NVIC_SetPriorityGrouping+0x40>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x40>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00
 8001a3c:	05fa0000 	.word	0x05fa0000

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db0b      	blt.n	8001a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <__NVIC_EnableIRQ+0x38>)
 8001a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d301      	bcc.n	8001b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SysTick_Config+0x40>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b72:	210f      	movs	r1, #15
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f7ff ff8e 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SysTick_Config+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x40>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff29 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff40 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff90 	bl	8001aec <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5f 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff33 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa4 	bl	8001b54 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff fea6 	bl	8001970 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e312      	b.n	8002256 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <HAL_DMA_Init+0x1b8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d04a      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a65      	ldr	r2, [pc, #404]	; (8001dd4 <HAL_DMA_Init+0x1bc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d045      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a63      	ldr	r2, [pc, #396]	; (8001dd8 <HAL_DMA_Init+0x1c0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d040      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a62      	ldr	r2, [pc, #392]	; (8001ddc <HAL_DMA_Init+0x1c4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d03b      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a60      	ldr	r2, [pc, #384]	; (8001de0 <HAL_DMA_Init+0x1c8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d036      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a5f      	ldr	r2, [pc, #380]	; (8001de4 <HAL_DMA_Init+0x1cc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d031      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a5d      	ldr	r2, [pc, #372]	; (8001de8 <HAL_DMA_Init+0x1d0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d02c      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a5c      	ldr	r2, [pc, #368]	; (8001dec <HAL_DMA_Init+0x1d4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d027      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a5a      	ldr	r2, [pc, #360]	; (8001df0 <HAL_DMA_Init+0x1d8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d022      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a59      	ldr	r2, [pc, #356]	; (8001df4 <HAL_DMA_Init+0x1dc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d01d      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a57      	ldr	r2, [pc, #348]	; (8001df8 <HAL_DMA_Init+0x1e0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d018      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a56      	ldr	r2, [pc, #344]	; (8001dfc <HAL_DMA_Init+0x1e4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <HAL_DMA_Init+0x1e8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00e      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a53      	ldr	r2, [pc, #332]	; (8001e04 <HAL_DMA_Init+0x1ec>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_DMA_Init+0x1f0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d004      	beq.n	8001cd0 <HAL_DMA_Init+0xb8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_DMA_Init+0x1f4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_DMA_Init+0xbc>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_DMA_Init+0xbe>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 813c 	beq.w	8001f54 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a37      	ldr	r2, [pc, #220]	; (8001dd0 <HAL_DMA_Init+0x1b8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d04a      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a36      	ldr	r2, [pc, #216]	; (8001dd4 <HAL_DMA_Init+0x1bc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d045      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a34      	ldr	r2, [pc, #208]	; (8001dd8 <HAL_DMA_Init+0x1c0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d040      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a33      	ldr	r2, [pc, #204]	; (8001ddc <HAL_DMA_Init+0x1c4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d03b      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <HAL_DMA_Init+0x1c8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d036      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <HAL_DMA_Init+0x1cc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d031      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a2e      	ldr	r2, [pc, #184]	; (8001de8 <HAL_DMA_Init+0x1d0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d02c      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2d      	ldr	r2, [pc, #180]	; (8001dec <HAL_DMA_Init+0x1d4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d027      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2b      	ldr	r2, [pc, #172]	; (8001df0 <HAL_DMA_Init+0x1d8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d022      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2a      	ldr	r2, [pc, #168]	; (8001df4 <HAL_DMA_Init+0x1dc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d01d      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <HAL_DMA_Init+0x1e0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d018      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_DMA_Init+0x1e4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d013      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <HAL_DMA_Init+0x1e8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00e      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_DMA_Init+0x1ec>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d009      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_DMA_Init+0x1f0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d004      	beq.n	8001d8c <HAL_DMA_Init+0x174>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_DMA_Init+0x1f4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d108      	bne.n	8001d9e <HAL_DMA_Init+0x186>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e007      	b.n	8001dae <HAL_DMA_Init+0x196>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0201 	bic.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001dae:	e02f      	b.n	8001e10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001db0:	f7ff fdde 	bl	8001970 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d928      	bls.n	8001e10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e242      	b.n	8002256 <HAL_DMA_Init+0x63e>
 8001dd0:	40020010 	.word	0x40020010
 8001dd4:	40020028 	.word	0x40020028
 8001dd8:	40020040 	.word	0x40020040
 8001ddc:	40020058 	.word	0x40020058
 8001de0:	40020070 	.word	0x40020070
 8001de4:	40020088 	.word	0x40020088
 8001de8:	400200a0 	.word	0x400200a0
 8001dec:	400200b8 	.word	0x400200b8
 8001df0:	40020410 	.word	0x40020410
 8001df4:	40020428 	.word	0x40020428
 8001df8:	40020440 	.word	0x40020440
 8001dfc:	40020458 	.word	0x40020458
 8001e00:	40020470 	.word	0x40020470
 8001e04:	40020488 	.word	0x40020488
 8001e08:	400204a0 	.word	0x400204a0
 8001e0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1c8      	bne.n	8001db0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4b83      	ldr	r3, [pc, #524]	; (8002038 <HAL_DMA_Init+0x420>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001e36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d107      	bne.n	8001e74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b28      	cmp	r3, #40	; 0x28
 8001e7a:	d903      	bls.n	8001e84 <HAL_DMA_Init+0x26c>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b2e      	cmp	r3, #46	; 0x2e
 8001e82:	d91f      	bls.n	8001ec4 <HAL_DMA_Init+0x2ac>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b3e      	cmp	r3, #62	; 0x3e
 8001e8a:	d903      	bls.n	8001e94 <HAL_DMA_Init+0x27c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b42      	cmp	r3, #66	; 0x42
 8001e92:	d917      	bls.n	8001ec4 <HAL_DMA_Init+0x2ac>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b46      	cmp	r3, #70	; 0x46
 8001e9a:	d903      	bls.n	8001ea4 <HAL_DMA_Init+0x28c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b48      	cmp	r3, #72	; 0x48
 8001ea2:	d90f      	bls.n	8001ec4 <HAL_DMA_Init+0x2ac>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b4e      	cmp	r3, #78	; 0x4e
 8001eaa:	d903      	bls.n	8001eb4 <HAL_DMA_Init+0x29c>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b52      	cmp	r3, #82	; 0x52
 8001eb2:	d907      	bls.n	8001ec4 <HAL_DMA_Init+0x2ac>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b73      	cmp	r3, #115	; 0x73
 8001eba:	d905      	bls.n	8001ec8 <HAL_DMA_Init+0x2b0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b77      	cmp	r3, #119	; 0x77
 8001ec2:	d801      	bhi.n	8001ec8 <HAL_DMA_Init+0x2b0>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_DMA_Init+0x2b2>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ed4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f023 0307 	bic.w	r3, r3, #7
 8001eec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d117      	bne.n	8001f30 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00e      	beq.n	8001f30 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f002 fb2e 	bl	8004574 <DMA_CheckFifoParam>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2240      	movs	r2, #64	; 0x40
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e192      	b.n	8002256 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f002 fa69 	bl	8004410 <DMA_CalcBaseAndBitshift>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	223f      	movs	r2, #63	; 0x3f
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	e0c8      	b.n	80020e6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a38      	ldr	r2, [pc, #224]	; (800203c <HAL_DMA_Init+0x424>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d022      	beq.n	8001fa4 <HAL_DMA_Init+0x38c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a37      	ldr	r2, [pc, #220]	; (8002040 <HAL_DMA_Init+0x428>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d01d      	beq.n	8001fa4 <HAL_DMA_Init+0x38c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a35      	ldr	r2, [pc, #212]	; (8002044 <HAL_DMA_Init+0x42c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d018      	beq.n	8001fa4 <HAL_DMA_Init+0x38c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a34      	ldr	r2, [pc, #208]	; (8002048 <HAL_DMA_Init+0x430>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_DMA_Init+0x38c>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_DMA_Init+0x434>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00e      	beq.n	8001fa4 <HAL_DMA_Init+0x38c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a31      	ldr	r2, [pc, #196]	; (8002050 <HAL_DMA_Init+0x438>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_DMA_Init+0x38c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <HAL_DMA_Init+0x43c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_DMA_Init+0x38c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a2e      	ldr	r2, [pc, #184]	; (8002058 <HAL_DMA_Init+0x440>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Init+0x390>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_DMA_Init+0x392>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8092 	beq.w	80020d4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a21      	ldr	r2, [pc, #132]	; (800203c <HAL_DMA_Init+0x424>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d021      	beq.n	8001ffe <HAL_DMA_Init+0x3e6>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a20      	ldr	r2, [pc, #128]	; (8002040 <HAL_DMA_Init+0x428>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d01c      	beq.n	8001ffe <HAL_DMA_Init+0x3e6>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1e      	ldr	r2, [pc, #120]	; (8002044 <HAL_DMA_Init+0x42c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d017      	beq.n	8001ffe <HAL_DMA_Init+0x3e6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <HAL_DMA_Init+0x430>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d012      	beq.n	8001ffe <HAL_DMA_Init+0x3e6>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	; (800204c <HAL_DMA_Init+0x434>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_DMA_Init+0x3e6>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <HAL_DMA_Init+0x438>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d008      	beq.n	8001ffe <HAL_DMA_Init+0x3e6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_DMA_Init+0x43c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d003      	beq.n	8001ffe <HAL_DMA_Init+0x3e6>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_DMA_Init+0x440>)
 8001ffc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_DMA_Init+0x444>)
 800201a:	4013      	ands	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	d01c      	beq.n	8002060 <HAL_DMA_Init+0x448>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b80      	cmp	r3, #128	; 0x80
 800202c:	d102      	bne.n	8002034 <HAL_DMA_Init+0x41c>
 800202e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002032:	e016      	b.n	8002062 <HAL_DMA_Init+0x44a>
 8002034:	2300      	movs	r3, #0
 8002036:	e014      	b.n	8002062 <HAL_DMA_Init+0x44a>
 8002038:	fe10803f 	.word	0xfe10803f
 800203c:	58025408 	.word	0x58025408
 8002040:	5802541c 	.word	0x5802541c
 8002044:	58025430 	.word	0x58025430
 8002048:	58025444 	.word	0x58025444
 800204c:	58025458 	.word	0x58025458
 8002050:	5802546c 	.word	0x5802546c
 8002054:	58025480 	.word	0x58025480
 8002058:	58025494 	.word	0x58025494
 800205c:	fffe000f 	.word	0xfffe000f
 8002060:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68d2      	ldr	r2, [r2, #12]
 8002066:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002068:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002070:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002078:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002080:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002088:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002090:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b6e      	ldr	r3, [pc, #440]	; (8002260 <HAL_DMA_Init+0x648>)
 80020a8:	4413      	add	r3, r2
 80020aa:	4a6e      	ldr	r2, [pc, #440]	; (8002264 <HAL_DMA_Init+0x64c>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	009a      	lsls	r2, r3, #2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f002 f9a9 	bl	8004410 <DMA_CalcBaseAndBitshift>
 80020be:	4603      	mov	r3, r0
 80020c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	2201      	movs	r2, #1
 80020cc:	409a      	lsls	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	e008      	b.n	80020e6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2240      	movs	r2, #64	; 0x40
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2203      	movs	r2, #3
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0b7      	b.n	8002256 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a5f      	ldr	r2, [pc, #380]	; (8002268 <HAL_DMA_Init+0x650>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d072      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a5d      	ldr	r2, [pc, #372]	; (800226c <HAL_DMA_Init+0x654>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d06d      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a5c      	ldr	r2, [pc, #368]	; (8002270 <HAL_DMA_Init+0x658>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d068      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a5a      	ldr	r2, [pc, #360]	; (8002274 <HAL_DMA_Init+0x65c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d063      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a59      	ldr	r2, [pc, #356]	; (8002278 <HAL_DMA_Init+0x660>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d05e      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a57      	ldr	r2, [pc, #348]	; (800227c <HAL_DMA_Init+0x664>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d059      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a56      	ldr	r2, [pc, #344]	; (8002280 <HAL_DMA_Init+0x668>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d054      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a54      	ldr	r2, [pc, #336]	; (8002284 <HAL_DMA_Init+0x66c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d04f      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a53      	ldr	r2, [pc, #332]	; (8002288 <HAL_DMA_Init+0x670>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d04a      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a51      	ldr	r2, [pc, #324]	; (800228c <HAL_DMA_Init+0x674>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d045      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a50      	ldr	r2, [pc, #320]	; (8002290 <HAL_DMA_Init+0x678>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d040      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_DMA_Init+0x67c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d03b      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a4d      	ldr	r2, [pc, #308]	; (8002298 <HAL_DMA_Init+0x680>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d036      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a4b      	ldr	r2, [pc, #300]	; (800229c <HAL_DMA_Init+0x684>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a4a      	ldr	r2, [pc, #296]	; (80022a0 <HAL_DMA_Init+0x688>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d02c      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a48      	ldr	r2, [pc, #288]	; (80022a4 <HAL_DMA_Init+0x68c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d027      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a47      	ldr	r2, [pc, #284]	; (80022a8 <HAL_DMA_Init+0x690>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d022      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a45      	ldr	r2, [pc, #276]	; (80022ac <HAL_DMA_Init+0x694>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01d      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a44      	ldr	r2, [pc, #272]	; (80022b0 <HAL_DMA_Init+0x698>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d018      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a42      	ldr	r2, [pc, #264]	; (80022b4 <HAL_DMA_Init+0x69c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a41      	ldr	r2, [pc, #260]	; (80022b8 <HAL_DMA_Init+0x6a0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00e      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a3f      	ldr	r2, [pc, #252]	; (80022bc <HAL_DMA_Init+0x6a4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a3e      	ldr	r2, [pc, #248]	; (80022c0 <HAL_DMA_Init+0x6a8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_DMA_Init+0x5be>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a3c      	ldr	r2, [pc, #240]	; (80022c4 <HAL_DMA_Init+0x6ac>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_DMA_Init+0x5c2>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_DMA_Init+0x5c4>
 80021da:	2300      	movs	r3, #0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d032      	beq.n	8002246 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f002 fa43 	bl	800466c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b80      	cmp	r3, #128	; 0x80
 80021ec:	d102      	bne.n	80021f4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002208:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <HAL_DMA_Init+0x61c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b08      	cmp	r3, #8
 8002218:	d80c      	bhi.n	8002234 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f002 fac0 	bl	80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	e008      	b.n	8002246 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	a7fdabf8 	.word	0xa7fdabf8
 8002264:	cccccccd 	.word	0xcccccccd
 8002268:	40020010 	.word	0x40020010
 800226c:	40020028 	.word	0x40020028
 8002270:	40020040 	.word	0x40020040
 8002274:	40020058 	.word	0x40020058
 8002278:	40020070 	.word	0x40020070
 800227c:	40020088 	.word	0x40020088
 8002280:	400200a0 	.word	0x400200a0
 8002284:	400200b8 	.word	0x400200b8
 8002288:	40020410 	.word	0x40020410
 800228c:	40020428 	.word	0x40020428
 8002290:	40020440 	.word	0x40020440
 8002294:	40020458 	.word	0x40020458
 8002298:	40020470 	.word	0x40020470
 800229c:	40020488 	.word	0x40020488
 80022a0:	400204a0 	.word	0x400204a0
 80022a4:	400204b8 	.word	0x400204b8
 80022a8:	58025408 	.word	0x58025408
 80022ac:	5802541c 	.word	0x5802541c
 80022b0:	58025430 	.word	0x58025430
 80022b4:	58025444 	.word	0x58025444
 80022b8:	58025458 	.word	0x58025458
 80022bc:	5802546c 	.word	0x5802546c
 80022c0:	58025480 	.word	0x58025480
 80022c4:	58025494 	.word	0x58025494

080022c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e226      	b.n	8002732 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_DMA_Start_IT+0x2a>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e21f      	b.n	8002732 <HAL_DMA_Start_IT+0x46a>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	f040 820a 	bne.w	800271c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a68      	ldr	r2, [pc, #416]	; (80024bc <HAL_DMA_Start_IT+0x1f4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04a      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a66      	ldr	r2, [pc, #408]	; (80024c0 <HAL_DMA_Start_IT+0x1f8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d045      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a65      	ldr	r2, [pc, #404]	; (80024c4 <HAL_DMA_Start_IT+0x1fc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d040      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a63      	ldr	r2, [pc, #396]	; (80024c8 <HAL_DMA_Start_IT+0x200>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d03b      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a62      	ldr	r2, [pc, #392]	; (80024cc <HAL_DMA_Start_IT+0x204>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d036      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a60      	ldr	r2, [pc, #384]	; (80024d0 <HAL_DMA_Start_IT+0x208>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5f      	ldr	r2, [pc, #380]	; (80024d4 <HAL_DMA_Start_IT+0x20c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d02c      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a5d      	ldr	r2, [pc, #372]	; (80024d8 <HAL_DMA_Start_IT+0x210>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d027      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5c      	ldr	r2, [pc, #368]	; (80024dc <HAL_DMA_Start_IT+0x214>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5a      	ldr	r2, [pc, #360]	; (80024e0 <HAL_DMA_Start_IT+0x218>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a59      	ldr	r2, [pc, #356]	; (80024e4 <HAL_DMA_Start_IT+0x21c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d018      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a57      	ldr	r2, [pc, #348]	; (80024e8 <HAL_DMA_Start_IT+0x220>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a56      	ldr	r2, [pc, #344]	; (80024ec <HAL_DMA_Start_IT+0x224>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a54      	ldr	r2, [pc, #336]	; (80024f0 <HAL_DMA_Start_IT+0x228>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a53      	ldr	r2, [pc, #332]	; (80024f4 <HAL_DMA_Start_IT+0x22c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_DMA_Start_IT+0xee>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a51      	ldr	r2, [pc, #324]	; (80024f8 <HAL_DMA_Start_IT+0x230>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d108      	bne.n	80023c8 <HAL_DMA_Start_IT+0x100>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e007      	b.n	80023d8 <HAL_DMA_Start_IT+0x110>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f001 fe6a 	bl	80040b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a34      	ldr	r2, [pc, #208]	; (80024bc <HAL_DMA_Start_IT+0x1f4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d04a      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <HAL_DMA_Start_IT+0x1f8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d045      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a31      	ldr	r2, [pc, #196]	; (80024c4 <HAL_DMA_Start_IT+0x1fc>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d040      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <HAL_DMA_Start_IT+0x200>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d03b      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2e      	ldr	r2, [pc, #184]	; (80024cc <HAL_DMA_Start_IT+0x204>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d036      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2d      	ldr	r2, [pc, #180]	; (80024d0 <HAL_DMA_Start_IT+0x208>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d031      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <HAL_DMA_Start_IT+0x20c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d02c      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <HAL_DMA_Start_IT+0x210>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d027      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a28      	ldr	r2, [pc, #160]	; (80024dc <HAL_DMA_Start_IT+0x214>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d022      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_DMA_Start_IT+0x218>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d01d      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_DMA_Start_IT+0x21c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d018      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <HAL_DMA_Start_IT+0x220>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d013      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a22      	ldr	r2, [pc, #136]	; (80024ec <HAL_DMA_Start_IT+0x224>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00e      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <HAL_DMA_Start_IT+0x228>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d009      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <HAL_DMA_Start_IT+0x22c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d004      	beq.n	8002484 <HAL_DMA_Start_IT+0x1bc>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1e      	ldr	r2, [pc, #120]	; (80024f8 <HAL_DMA_Start_IT+0x230>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_DMA_Start_IT+0x1c0>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_DMA_Start_IT+0x1c2>
 8002488:	2300      	movs	r3, #0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d036      	beq.n	80024fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 021e 	bic.w	r2, r3, #30
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0216 	orr.w	r2, r2, #22
 80024a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d03e      	beq.n	8002528 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0208 	orr.w	r2, r2, #8
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e035      	b.n	8002528 <HAL_DMA_Start_IT+0x260>
 80024bc:	40020010 	.word	0x40020010
 80024c0:	40020028 	.word	0x40020028
 80024c4:	40020040 	.word	0x40020040
 80024c8:	40020058 	.word	0x40020058
 80024cc:	40020070 	.word	0x40020070
 80024d0:	40020088 	.word	0x40020088
 80024d4:	400200a0 	.word	0x400200a0
 80024d8:	400200b8 	.word	0x400200b8
 80024dc:	40020410 	.word	0x40020410
 80024e0:	40020428 	.word	0x40020428
 80024e4:	40020440 	.word	0x40020440
 80024e8:	40020458 	.word	0x40020458
 80024ec:	40020470 	.word	0x40020470
 80024f0:	40020488 	.word	0x40020488
 80024f4:	400204a0 	.word	0x400204a0
 80024f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 020e 	bic.w	r2, r3, #14
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 020a 	orr.w	r2, r2, #10
 800250e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0204 	orr.w	r2, r2, #4
 8002526:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a83      	ldr	r2, [pc, #524]	; (800273c <HAL_DMA_Start_IT+0x474>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d072      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a82      	ldr	r2, [pc, #520]	; (8002740 <HAL_DMA_Start_IT+0x478>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d06d      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a80      	ldr	r2, [pc, #512]	; (8002744 <HAL_DMA_Start_IT+0x47c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d068      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a7f      	ldr	r2, [pc, #508]	; (8002748 <HAL_DMA_Start_IT+0x480>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d063      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a7d      	ldr	r2, [pc, #500]	; (800274c <HAL_DMA_Start_IT+0x484>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d05e      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7c      	ldr	r2, [pc, #496]	; (8002750 <HAL_DMA_Start_IT+0x488>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d059      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a7a      	ldr	r2, [pc, #488]	; (8002754 <HAL_DMA_Start_IT+0x48c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d054      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a79      	ldr	r2, [pc, #484]	; (8002758 <HAL_DMA_Start_IT+0x490>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d04f      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a77      	ldr	r2, [pc, #476]	; (800275c <HAL_DMA_Start_IT+0x494>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d04a      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a76      	ldr	r2, [pc, #472]	; (8002760 <HAL_DMA_Start_IT+0x498>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d045      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a74      	ldr	r2, [pc, #464]	; (8002764 <HAL_DMA_Start_IT+0x49c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d040      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a73      	ldr	r2, [pc, #460]	; (8002768 <HAL_DMA_Start_IT+0x4a0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d03b      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a71      	ldr	r2, [pc, #452]	; (800276c <HAL_DMA_Start_IT+0x4a4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d036      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a70      	ldr	r2, [pc, #448]	; (8002770 <HAL_DMA_Start_IT+0x4a8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d031      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a6e      	ldr	r2, [pc, #440]	; (8002774 <HAL_DMA_Start_IT+0x4ac>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02c      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a6d      	ldr	r2, [pc, #436]	; (8002778 <HAL_DMA_Start_IT+0x4b0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d027      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6b      	ldr	r2, [pc, #428]	; (800277c <HAL_DMA_Start_IT+0x4b4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d022      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6a      	ldr	r2, [pc, #424]	; (8002780 <HAL_DMA_Start_IT+0x4b8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d01d      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a68      	ldr	r2, [pc, #416]	; (8002784 <HAL_DMA_Start_IT+0x4bc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d018      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a67      	ldr	r2, [pc, #412]	; (8002788 <HAL_DMA_Start_IT+0x4c0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d013      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a65      	ldr	r2, [pc, #404]	; (800278c <HAL_DMA_Start_IT+0x4c4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00e      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a64      	ldr	r2, [pc, #400]	; (8002790 <HAL_DMA_Start_IT+0x4c8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d009      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a62      	ldr	r2, [pc, #392]	; (8002794 <HAL_DMA_Start_IT+0x4cc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_DMA_Start_IT+0x350>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a61      	ldr	r2, [pc, #388]	; (8002798 <HAL_DMA_Start_IT+0x4d0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_DMA_Start_IT+0x354>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_DMA_Start_IT+0x356>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01a      	beq.n	8002658 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002656:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a37      	ldr	r2, [pc, #220]	; (800273c <HAL_DMA_Start_IT+0x474>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d04a      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a36      	ldr	r2, [pc, #216]	; (8002740 <HAL_DMA_Start_IT+0x478>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d045      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a34      	ldr	r2, [pc, #208]	; (8002744 <HAL_DMA_Start_IT+0x47c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d040      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a33      	ldr	r2, [pc, #204]	; (8002748 <HAL_DMA_Start_IT+0x480>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d03b      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a31      	ldr	r2, [pc, #196]	; (800274c <HAL_DMA_Start_IT+0x484>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d036      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a30      	ldr	r2, [pc, #192]	; (8002750 <HAL_DMA_Start_IT+0x488>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d031      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <HAL_DMA_Start_IT+0x48c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02c      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <HAL_DMA_Start_IT+0x490>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d027      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2b      	ldr	r2, [pc, #172]	; (800275c <HAL_DMA_Start_IT+0x494>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d022      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <HAL_DMA_Start_IT+0x498>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d01d      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_DMA_Start_IT+0x49c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d018      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a27      	ldr	r2, [pc, #156]	; (8002768 <HAL_DMA_Start_IT+0x4a0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a25      	ldr	r2, [pc, #148]	; (800276c <HAL_DMA_Start_IT+0x4a4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <HAL_DMA_Start_IT+0x4a8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a22      	ldr	r2, [pc, #136]	; (8002774 <HAL_DMA_Start_IT+0x4ac>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_DMA_Start_IT+0x430>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_DMA_Start_IT+0x4b0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d108      	bne.n	800270a <HAL_DMA_Start_IT+0x442>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e012      	b.n	8002730 <HAL_DMA_Start_IT+0x468>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e009      	b.n	8002730 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002722:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002730:	7dfb      	ldrb	r3, [r7, #23]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40020010 	.word	0x40020010
 8002740:	40020028 	.word	0x40020028
 8002744:	40020040 	.word	0x40020040
 8002748:	40020058 	.word	0x40020058
 800274c:	40020070 	.word	0x40020070
 8002750:	40020088 	.word	0x40020088
 8002754:	400200a0 	.word	0x400200a0
 8002758:	400200b8 	.word	0x400200b8
 800275c:	40020410 	.word	0x40020410
 8002760:	40020428 	.word	0x40020428
 8002764:	40020440 	.word	0x40020440
 8002768:	40020458 	.word	0x40020458
 800276c:	40020470 	.word	0x40020470
 8002770:	40020488 	.word	0x40020488
 8002774:	400204a0 	.word	0x400204a0
 8002778:	400204b8 	.word	0x400204b8
 800277c:	58025408 	.word	0x58025408
 8002780:	5802541c 	.word	0x5802541c
 8002784:	58025430 	.word	0x58025430
 8002788:	58025444 	.word	0x58025444
 800278c:	58025458 	.word	0x58025458
 8002790:	5802546c 	.word	0x5802546c
 8002794:	58025480 	.word	0x58025480
 8002798:	58025494 	.word	0x58025494

0800279c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff f8e4 	bl	8001970 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e2dc      	b.n	8002d6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d008      	beq.n	80027d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e2cd      	b.n	8002d6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a76      	ldr	r2, [pc, #472]	; (80029b0 <HAL_DMA_Abort+0x214>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04a      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a74      	ldr	r2, [pc, #464]	; (80029b4 <HAL_DMA_Abort+0x218>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d045      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a73      	ldr	r2, [pc, #460]	; (80029b8 <HAL_DMA_Abort+0x21c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d040      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a71      	ldr	r2, [pc, #452]	; (80029bc <HAL_DMA_Abort+0x220>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d03b      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a70      	ldr	r2, [pc, #448]	; (80029c0 <HAL_DMA_Abort+0x224>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d036      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6e      	ldr	r2, [pc, #440]	; (80029c4 <HAL_DMA_Abort+0x228>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d031      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6d      	ldr	r2, [pc, #436]	; (80029c8 <HAL_DMA_Abort+0x22c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d02c      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6b      	ldr	r2, [pc, #428]	; (80029cc <HAL_DMA_Abort+0x230>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d027      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_DMA_Abort+0x234>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d022      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	; (80029d4 <HAL_DMA_Abort+0x238>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01d      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a67      	ldr	r2, [pc, #412]	; (80029d8 <HAL_DMA_Abort+0x23c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d018      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_DMA_Abort+0x240>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a64      	ldr	r2, [pc, #400]	; (80029e0 <HAL_DMA_Abort+0x244>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a62      	ldr	r2, [pc, #392]	; (80029e4 <HAL_DMA_Abort+0x248>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a61      	ldr	r2, [pc, #388]	; (80029e8 <HAL_DMA_Abort+0x24c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a5f      	ldr	r2, [pc, #380]	; (80029ec <HAL_DMA_Abort+0x250>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_DMA_Abort+0xda>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_DMA_Abort+0xdc>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 021e 	bic.w	r2, r2, #30
 800288a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800289a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	e00a      	b.n	80028ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 020e 	bic.w	r2, r2, #14
 80028b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <HAL_DMA_Abort+0x214>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d072      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3a      	ldr	r2, [pc, #232]	; (80029b4 <HAL_DMA_Abort+0x218>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d06d      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a39      	ldr	r2, [pc, #228]	; (80029b8 <HAL_DMA_Abort+0x21c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d068      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a37      	ldr	r2, [pc, #220]	; (80029bc <HAL_DMA_Abort+0x220>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d063      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a36      	ldr	r2, [pc, #216]	; (80029c0 <HAL_DMA_Abort+0x224>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d05e      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a34      	ldr	r2, [pc, #208]	; (80029c4 <HAL_DMA_Abort+0x228>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d059      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a33      	ldr	r2, [pc, #204]	; (80029c8 <HAL_DMA_Abort+0x22c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d054      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a31      	ldr	r2, [pc, #196]	; (80029cc <HAL_DMA_Abort+0x230>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d04f      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <HAL_DMA_Abort+0x234>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d04a      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2e      	ldr	r2, [pc, #184]	; (80029d4 <HAL_DMA_Abort+0x238>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d045      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2d      	ldr	r2, [pc, #180]	; (80029d8 <HAL_DMA_Abort+0x23c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d040      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2b      	ldr	r2, [pc, #172]	; (80029dc <HAL_DMA_Abort+0x240>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d03b      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2a      	ldr	r2, [pc, #168]	; (80029e0 <HAL_DMA_Abort+0x244>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d036      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a28      	ldr	r2, [pc, #160]	; (80029e4 <HAL_DMA_Abort+0x248>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d031      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a27      	ldr	r2, [pc, #156]	; (80029e8 <HAL_DMA_Abort+0x24c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d02c      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a25      	ldr	r2, [pc, #148]	; (80029ec <HAL_DMA_Abort+0x250>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d027      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a24      	ldr	r2, [pc, #144]	; (80029f0 <HAL_DMA_Abort+0x254>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d022      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <HAL_DMA_Abort+0x258>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01d      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <HAL_DMA_Abort+0x25c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d018      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <HAL_DMA_Abort+0x260>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <HAL_DMA_Abort+0x264>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00e      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_DMA_Abort+0x268>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_DMA_Abort+0x26c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_DMA_Abort+0x270>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d132      	bne.n	8002a10 <HAL_DMA_Abort+0x274>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e031      	b.n	8002a12 <HAL_DMA_Abort+0x276>
 80029ae:	bf00      	nop
 80029b0:	40020010 	.word	0x40020010
 80029b4:	40020028 	.word	0x40020028
 80029b8:	40020040 	.word	0x40020040
 80029bc:	40020058 	.word	0x40020058
 80029c0:	40020070 	.word	0x40020070
 80029c4:	40020088 	.word	0x40020088
 80029c8:	400200a0 	.word	0x400200a0
 80029cc:	400200b8 	.word	0x400200b8
 80029d0:	40020410 	.word	0x40020410
 80029d4:	40020428 	.word	0x40020428
 80029d8:	40020440 	.word	0x40020440
 80029dc:	40020458 	.word	0x40020458
 80029e0:	40020470 	.word	0x40020470
 80029e4:	40020488 	.word	0x40020488
 80029e8:	400204a0 	.word	0x400204a0
 80029ec:	400204b8 	.word	0x400204b8
 80029f0:	58025408 	.word	0x58025408
 80029f4:	5802541c 	.word	0x5802541c
 80029f8:	58025430 	.word	0x58025430
 80029fc:	58025444 	.word	0x58025444
 8002a00:	58025458 	.word	0x58025458
 8002a04:	5802546c 	.word	0x5802546c
 8002a08:	58025480 	.word	0x58025480
 8002a0c:	58025494 	.word	0x58025494
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6d      	ldr	r2, [pc, #436]	; (8002be0 <HAL_DMA_Abort+0x444>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d04a      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6b      	ldr	r2, [pc, #428]	; (8002be4 <HAL_DMA_Abort+0x448>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d045      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6a      	ldr	r2, [pc, #424]	; (8002be8 <HAL_DMA_Abort+0x44c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a68      	ldr	r2, [pc, #416]	; (8002bec <HAL_DMA_Abort+0x450>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d03b      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a67      	ldr	r2, [pc, #412]	; (8002bf0 <HAL_DMA_Abort+0x454>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d036      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <HAL_DMA_Abort+0x458>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d031      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a64      	ldr	r2, [pc, #400]	; (8002bf8 <HAL_DMA_Abort+0x45c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d02c      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a62      	ldr	r2, [pc, #392]	; (8002bfc <HAL_DMA_Abort+0x460>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d027      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a61      	ldr	r2, [pc, #388]	; (8002c00 <HAL_DMA_Abort+0x464>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a5f      	ldr	r2, [pc, #380]	; (8002c04 <HAL_DMA_Abort+0x468>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a5e      	ldr	r2, [pc, #376]	; (8002c08 <HAL_DMA_Abort+0x46c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a5c      	ldr	r2, [pc, #368]	; (8002c0c <HAL_DMA_Abort+0x470>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a5b      	ldr	r2, [pc, #364]	; (8002c10 <HAL_DMA_Abort+0x474>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a59      	ldr	r2, [pc, #356]	; (8002c14 <HAL_DMA_Abort+0x478>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a58      	ldr	r2, [pc, #352]	; (8002c18 <HAL_DMA_Abort+0x47c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a56      	ldr	r2, [pc, #344]	; (8002c1c <HAL_DMA_Abort+0x480>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d108      	bne.n	8002ad8 <HAL_DMA_Abort+0x33c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e007      	b.n	8002ae8 <HAL_DMA_Abort+0x34c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ae8:	e013      	b.n	8002b12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aea:	f7fe ff41 	bl	8001970 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d90c      	bls.n	8002b12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2203      	movs	r2, #3
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e12d      	b.n	8002d6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e5      	bne.n	8002aea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <HAL_DMA_Abort+0x444>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d04a      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2d      	ldr	r2, [pc, #180]	; (8002be4 <HAL_DMA_Abort+0x448>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d045      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <HAL_DMA_Abort+0x44c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d040      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <HAL_DMA_Abort+0x450>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d03b      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <HAL_DMA_Abort+0x454>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d036      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <HAL_DMA_Abort+0x458>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d031      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a26      	ldr	r2, [pc, #152]	; (8002bf8 <HAL_DMA_Abort+0x45c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d02c      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <HAL_DMA_Abort+0x460>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d027      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <HAL_DMA_Abort+0x464>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d022      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a21      	ldr	r2, [pc, #132]	; (8002c04 <HAL_DMA_Abort+0x468>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01d      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_DMA_Abort+0x46c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d018      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_DMA_Abort+0x470>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_DMA_Abort+0x474>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00e      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <HAL_DMA_Abort+0x478>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d009      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_DMA_Abort+0x47c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d004      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_DMA_Abort+0x480>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_DMA_Abort+0x426>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_DMA_Abort+0x428>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d02b      	beq.n	8002c20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	223f      	movs	r2, #63	; 0x3f
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	e02a      	b.n	8002c36 <HAL_DMA_Abort+0x49a>
 8002be0:	40020010 	.word	0x40020010
 8002be4:	40020028 	.word	0x40020028
 8002be8:	40020040 	.word	0x40020040
 8002bec:	40020058 	.word	0x40020058
 8002bf0:	40020070 	.word	0x40020070
 8002bf4:	40020088 	.word	0x40020088
 8002bf8:	400200a0 	.word	0x400200a0
 8002bfc:	400200b8 	.word	0x400200b8
 8002c00:	40020410 	.word	0x40020410
 8002c04:	40020428 	.word	0x40020428
 8002c08:	40020440 	.word	0x40020440
 8002c0c:	40020458 	.word	0x40020458
 8002c10:	40020470 	.word	0x40020470
 8002c14:	40020488 	.word	0x40020488
 8002c18:	400204a0 	.word	0x400204a0
 8002c1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	2201      	movs	r2, #1
 8002c30:	409a      	lsls	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a4f      	ldr	r2, [pc, #316]	; (8002d78 <HAL_DMA_Abort+0x5dc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d072      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a4d      	ldr	r2, [pc, #308]	; (8002d7c <HAL_DMA_Abort+0x5e0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d06d      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <HAL_DMA_Abort+0x5e4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d068      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a4a      	ldr	r2, [pc, #296]	; (8002d84 <HAL_DMA_Abort+0x5e8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d063      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a49      	ldr	r2, [pc, #292]	; (8002d88 <HAL_DMA_Abort+0x5ec>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d05e      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a47      	ldr	r2, [pc, #284]	; (8002d8c <HAL_DMA_Abort+0x5f0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d059      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a46      	ldr	r2, [pc, #280]	; (8002d90 <HAL_DMA_Abort+0x5f4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d054      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a44      	ldr	r2, [pc, #272]	; (8002d94 <HAL_DMA_Abort+0x5f8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d04f      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a43      	ldr	r2, [pc, #268]	; (8002d98 <HAL_DMA_Abort+0x5fc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d04a      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a41      	ldr	r2, [pc, #260]	; (8002d9c <HAL_DMA_Abort+0x600>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d045      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a40      	ldr	r2, [pc, #256]	; (8002da0 <HAL_DMA_Abort+0x604>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d040      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a3e      	ldr	r2, [pc, #248]	; (8002da4 <HAL_DMA_Abort+0x608>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d03b      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3d      	ldr	r2, [pc, #244]	; (8002da8 <HAL_DMA_Abort+0x60c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d036      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <HAL_DMA_Abort+0x610>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d031      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <HAL_DMA_Abort+0x614>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d02c      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <HAL_DMA_Abort+0x618>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d027      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a37      	ldr	r2, [pc, #220]	; (8002db8 <HAL_DMA_Abort+0x61c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a35      	ldr	r2, [pc, #212]	; (8002dbc <HAL_DMA_Abort+0x620>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01d      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a34      	ldr	r2, [pc, #208]	; (8002dc0 <HAL_DMA_Abort+0x624>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <HAL_DMA_Abort+0x628>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a31      	ldr	r2, [pc, #196]	; (8002dc8 <HAL_DMA_Abort+0x62c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2f      	ldr	r2, [pc, #188]	; (8002dcc <HAL_DMA_Abort+0x630>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2e      	ldr	r2, [pc, #184]	; (8002dd0 <HAL_DMA_Abort+0x634>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2c      	ldr	r2, [pc, #176]	; (8002dd4 <HAL_DMA_Abort+0x638>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_DMA_Abort+0x58e>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_DMA_Abort+0x590>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00c      	beq.n	8002d5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40020010 	.word	0x40020010
 8002d7c:	40020028 	.word	0x40020028
 8002d80:	40020040 	.word	0x40020040
 8002d84:	40020058 	.word	0x40020058
 8002d88:	40020070 	.word	0x40020070
 8002d8c:	40020088 	.word	0x40020088
 8002d90:	400200a0 	.word	0x400200a0
 8002d94:	400200b8 	.word	0x400200b8
 8002d98:	40020410 	.word	0x40020410
 8002d9c:	40020428 	.word	0x40020428
 8002da0:	40020440 	.word	0x40020440
 8002da4:	40020458 	.word	0x40020458
 8002da8:	40020470 	.word	0x40020470
 8002dac:	40020488 	.word	0x40020488
 8002db0:	400204a0 	.word	0x400204a0
 8002db4:	400204b8 	.word	0x400204b8
 8002db8:	58025408 	.word	0x58025408
 8002dbc:	5802541c 	.word	0x5802541c
 8002dc0:	58025430 	.word	0x58025430
 8002dc4:	58025444 	.word	0x58025444
 8002dc8:	58025458 	.word	0x58025458
 8002dcc:	5802546c 	.word	0x5802546c
 8002dd0:	58025480 	.word	0x58025480
 8002dd4:	58025494 	.word	0x58025494

08002dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e237      	b.n	800325a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d004      	beq.n	8002e00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e22c      	b.n	800325a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a5c      	ldr	r2, [pc, #368]	; (8002f78 <HAL_DMA_Abort_IT+0x1a0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d04a      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a5b      	ldr	r2, [pc, #364]	; (8002f7c <HAL_DMA_Abort_IT+0x1a4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d045      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a59      	ldr	r2, [pc, #356]	; (8002f80 <HAL_DMA_Abort_IT+0x1a8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d040      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <HAL_DMA_Abort_IT+0x1ac>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d03b      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a56      	ldr	r2, [pc, #344]	; (8002f88 <HAL_DMA_Abort_IT+0x1b0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d036      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a55      	ldr	r2, [pc, #340]	; (8002f8c <HAL_DMA_Abort_IT+0x1b4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d031      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a53      	ldr	r2, [pc, #332]	; (8002f90 <HAL_DMA_Abort_IT+0x1b8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d02c      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a52      	ldr	r2, [pc, #328]	; (8002f94 <HAL_DMA_Abort_IT+0x1bc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d027      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a50      	ldr	r2, [pc, #320]	; (8002f98 <HAL_DMA_Abort_IT+0x1c0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d022      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a4f      	ldr	r2, [pc, #316]	; (8002f9c <HAL_DMA_Abort_IT+0x1c4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d01d      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a4d      	ldr	r2, [pc, #308]	; (8002fa0 <HAL_DMA_Abort_IT+0x1c8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d018      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a4c      	ldr	r2, [pc, #304]	; (8002fa4 <HAL_DMA_Abort_IT+0x1cc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a4a      	ldr	r2, [pc, #296]	; (8002fa8 <HAL_DMA_Abort_IT+0x1d0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a49      	ldr	r2, [pc, #292]	; (8002fac <HAL_DMA_Abort_IT+0x1d4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a47      	ldr	r2, [pc, #284]	; (8002fb0 <HAL_DMA_Abort_IT+0x1d8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <HAL_DMA_Abort_IT+0x1dc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_DMA_Abort_IT+0xcc>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xce>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8086 	beq.w	8002fb8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2f      	ldr	r2, [pc, #188]	; (8002f78 <HAL_DMA_Abort_IT+0x1a0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d04a      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a2e      	ldr	r2, [pc, #184]	; (8002f7c <HAL_DMA_Abort_IT+0x1a4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d045      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2c      	ldr	r2, [pc, #176]	; (8002f80 <HAL_DMA_Abort_IT+0x1a8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d040      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a2b      	ldr	r2, [pc, #172]	; (8002f84 <HAL_DMA_Abort_IT+0x1ac>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d03b      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <HAL_DMA_Abort_IT+0x1b0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d036      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <HAL_DMA_Abort_IT+0x1b4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d031      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <HAL_DMA_Abort_IT+0x1b8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d02c      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <HAL_DMA_Abort_IT+0x1bc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d027      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <HAL_DMA_Abort_IT+0x1c0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d022      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <HAL_DMA_Abort_IT+0x1c4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d01d      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a20      	ldr	r2, [pc, #128]	; (8002fa0 <HAL_DMA_Abort_IT+0x1c8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d018      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1f      	ldr	r2, [pc, #124]	; (8002fa4 <HAL_DMA_Abort_IT+0x1cc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <HAL_DMA_Abort_IT+0x1d0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00e      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_DMA_Abort_IT+0x1d4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d009      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_DMA_Abort_IT+0x1d8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_DMA_Abort_IT+0x1dc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d108      	bne.n	8002f66 <HAL_DMA_Abort_IT+0x18e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e178      	b.n	8003258 <HAL_DMA_Abort_IT+0x480>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	e16f      	b.n	8003258 <HAL_DMA_Abort_IT+0x480>
 8002f78:	40020010 	.word	0x40020010
 8002f7c:	40020028 	.word	0x40020028
 8002f80:	40020040 	.word	0x40020040
 8002f84:	40020058 	.word	0x40020058
 8002f88:	40020070 	.word	0x40020070
 8002f8c:	40020088 	.word	0x40020088
 8002f90:	400200a0 	.word	0x400200a0
 8002f94:	400200b8 	.word	0x400200b8
 8002f98:	40020410 	.word	0x40020410
 8002f9c:	40020428 	.word	0x40020428
 8002fa0:	40020440 	.word	0x40020440
 8002fa4:	40020458 	.word	0x40020458
 8002fa8:	40020470 	.word	0x40020470
 8002fac:	40020488 	.word	0x40020488
 8002fb0:	400204a0 	.word	0x400204a0
 8002fb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 020e 	bic.w	r2, r2, #14
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6c      	ldr	r2, [pc, #432]	; (8003180 <HAL_DMA_Abort_IT+0x3a8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d04a      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a6b      	ldr	r2, [pc, #428]	; (8003184 <HAL_DMA_Abort_IT+0x3ac>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d045      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a69      	ldr	r2, [pc, #420]	; (8003188 <HAL_DMA_Abort_IT+0x3b0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d040      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a68      	ldr	r2, [pc, #416]	; (800318c <HAL_DMA_Abort_IT+0x3b4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d03b      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a66      	ldr	r2, [pc, #408]	; (8003190 <HAL_DMA_Abort_IT+0x3b8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d036      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a65      	ldr	r2, [pc, #404]	; (8003194 <HAL_DMA_Abort_IT+0x3bc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d031      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a63      	ldr	r2, [pc, #396]	; (8003198 <HAL_DMA_Abort_IT+0x3c0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d02c      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a62      	ldr	r2, [pc, #392]	; (800319c <HAL_DMA_Abort_IT+0x3c4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d027      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a60      	ldr	r2, [pc, #384]	; (80031a0 <HAL_DMA_Abort_IT+0x3c8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d022      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5f      	ldr	r2, [pc, #380]	; (80031a4 <HAL_DMA_Abort_IT+0x3cc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d01d      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5d      	ldr	r2, [pc, #372]	; (80031a8 <HAL_DMA_Abort_IT+0x3d0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d018      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a5c      	ldr	r2, [pc, #368]	; (80031ac <HAL_DMA_Abort_IT+0x3d4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5a      	ldr	r2, [pc, #360]	; (80031b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00e      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a59      	ldr	r2, [pc, #356]	; (80031b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a57      	ldr	r2, [pc, #348]	; (80031b8 <HAL_DMA_Abort_IT+0x3e0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a56      	ldr	r2, [pc, #344]	; (80031bc <HAL_DMA_Abort_IT+0x3e4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d108      	bne.n	800307a <HAL_DMA_Abort_IT+0x2a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e007      	b.n	800308a <HAL_DMA_Abort_IT+0x2b2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a3c      	ldr	r2, [pc, #240]	; (8003180 <HAL_DMA_Abort_IT+0x3a8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d072      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3a      	ldr	r2, [pc, #232]	; (8003184 <HAL_DMA_Abort_IT+0x3ac>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d06d      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a39      	ldr	r2, [pc, #228]	; (8003188 <HAL_DMA_Abort_IT+0x3b0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d068      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a37      	ldr	r2, [pc, #220]	; (800318c <HAL_DMA_Abort_IT+0x3b4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d063      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a36      	ldr	r2, [pc, #216]	; (8003190 <HAL_DMA_Abort_IT+0x3b8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d05e      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a34      	ldr	r2, [pc, #208]	; (8003194 <HAL_DMA_Abort_IT+0x3bc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d059      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a33      	ldr	r2, [pc, #204]	; (8003198 <HAL_DMA_Abort_IT+0x3c0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d054      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a31      	ldr	r2, [pc, #196]	; (800319c <HAL_DMA_Abort_IT+0x3c4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d04f      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a30      	ldr	r2, [pc, #192]	; (80031a0 <HAL_DMA_Abort_IT+0x3c8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d04a      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2e      	ldr	r2, [pc, #184]	; (80031a4 <HAL_DMA_Abort_IT+0x3cc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d045      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <HAL_DMA_Abort_IT+0x3d0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d040      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2b      	ldr	r2, [pc, #172]	; (80031ac <HAL_DMA_Abort_IT+0x3d4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d03b      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d036      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d031      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <HAL_DMA_Abort_IT+0x3e0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d02c      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a25      	ldr	r2, [pc, #148]	; (80031bc <HAL_DMA_Abort_IT+0x3e4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d027      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_DMA_Abort_IT+0x3e8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d022      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <HAL_DMA_Abort_IT+0x3ec>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01d      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <HAL_DMA_Abort_IT+0x3f0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d018      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_DMA_Abort_IT+0x3f4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_DMA_Abort_IT+0x3f8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00e      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_DMA_Abort_IT+0x3fc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <HAL_DMA_Abort_IT+0x400>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_DMA_Abort_IT+0x404>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d132      	bne.n	80031e0 <HAL_DMA_Abort_IT+0x408>
 800317a:	2301      	movs	r3, #1
 800317c:	e031      	b.n	80031e2 <HAL_DMA_Abort_IT+0x40a>
 800317e:	bf00      	nop
 8003180:	40020010 	.word	0x40020010
 8003184:	40020028 	.word	0x40020028
 8003188:	40020040 	.word	0x40020040
 800318c:	40020058 	.word	0x40020058
 8003190:	40020070 	.word	0x40020070
 8003194:	40020088 	.word	0x40020088
 8003198:	400200a0 	.word	0x400200a0
 800319c:	400200b8 	.word	0x400200b8
 80031a0:	40020410 	.word	0x40020410
 80031a4:	40020428 	.word	0x40020428
 80031a8:	40020440 	.word	0x40020440
 80031ac:	40020458 	.word	0x40020458
 80031b0:	40020470 	.word	0x40020470
 80031b4:	40020488 	.word	0x40020488
 80031b8:	400204a0 	.word	0x400204a0
 80031bc:	400204b8 	.word	0x400204b8
 80031c0:	58025408 	.word	0x58025408
 80031c4:	5802541c 	.word	0x5802541c
 80031c8:	58025430 	.word	0x58025430
 80031cc:	58025444 	.word	0x58025444
 80031d0:	58025458 	.word	0x58025458
 80031d4:	5802546c 	.word	0x5802546c
 80031d8:	58025480 	.word	0x58025480
 80031dc:	58025494 	.word	0x58025494
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d028      	beq.n	8003238 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2201      	movs	r2, #1
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003214:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800322c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003236:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop

08003264 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003270:	4b67      	ldr	r3, [pc, #412]	; (8003410 <HAL_DMA_IRQHandler+0x1ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a67      	ldr	r2, [pc, #412]	; (8003414 <HAL_DMA_IRQHandler+0x1b0>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a9b      	lsrs	r3, r3, #10
 800327c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5f      	ldr	r2, [pc, #380]	; (8003418 <HAL_DMA_IRQHandler+0x1b4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a5d      	ldr	r2, [pc, #372]	; (800341c <HAL_DMA_IRQHandler+0x1b8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a5c      	ldr	r2, [pc, #368]	; (8003420 <HAL_DMA_IRQHandler+0x1bc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5a      	ldr	r2, [pc, #360]	; (8003424 <HAL_DMA_IRQHandler+0x1c0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a59      	ldr	r2, [pc, #356]	; (8003428 <HAL_DMA_IRQHandler+0x1c4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_DMA_IRQHandler+0x1c8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a56      	ldr	r2, [pc, #344]	; (8003430 <HAL_DMA_IRQHandler+0x1cc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a54      	ldr	r2, [pc, #336]	; (8003434 <HAL_DMA_IRQHandler+0x1d0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a53      	ldr	r2, [pc, #332]	; (8003438 <HAL_DMA_IRQHandler+0x1d4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a51      	ldr	r2, [pc, #324]	; (800343c <HAL_DMA_IRQHandler+0x1d8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a50      	ldr	r2, [pc, #320]	; (8003440 <HAL_DMA_IRQHandler+0x1dc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a4e      	ldr	r2, [pc, #312]	; (8003444 <HAL_DMA_IRQHandler+0x1e0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4d      	ldr	r2, [pc, #308]	; (8003448 <HAL_DMA_IRQHandler+0x1e4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4b      	ldr	r2, [pc, #300]	; (800344c <HAL_DMA_IRQHandler+0x1e8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4a      	ldr	r2, [pc, #296]	; (8003450 <HAL_DMA_IRQHandler+0x1ec>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a48      	ldr	r2, [pc, #288]	; (8003454 <HAL_DMA_IRQHandler+0x1f0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_DMA_IRQHandler+0xd6>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_DMA_IRQHandler+0xd8>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 842b 	beq.w	8003b98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2208      	movs	r2, #8
 800334c:	409a      	lsls	r2, r3
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80a2 	beq.w	800349c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a2e      	ldr	r2, [pc, #184]	; (8003418 <HAL_DMA_IRQHandler+0x1b4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d04a      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2d      	ldr	r2, [pc, #180]	; (800341c <HAL_DMA_IRQHandler+0x1b8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d045      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <HAL_DMA_IRQHandler+0x1bc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d040      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <HAL_DMA_IRQHandler+0x1c0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d03b      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a28      	ldr	r2, [pc, #160]	; (8003428 <HAL_DMA_IRQHandler+0x1c4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d036      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_DMA_IRQHandler+0x1c8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d031      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a25      	ldr	r2, [pc, #148]	; (8003430 <HAL_DMA_IRQHandler+0x1cc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d02c      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a24      	ldr	r2, [pc, #144]	; (8003434 <HAL_DMA_IRQHandler+0x1d0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d027      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a22      	ldr	r2, [pc, #136]	; (8003438 <HAL_DMA_IRQHandler+0x1d4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d022      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a21      	ldr	r2, [pc, #132]	; (800343c <HAL_DMA_IRQHandler+0x1d8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d01d      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <HAL_DMA_IRQHandler+0x1dc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d018      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <HAL_DMA_IRQHandler+0x1e0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_DMA_IRQHandler+0x1e4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_DMA_IRQHandler+0x1e8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a19      	ldr	r2, [pc, #100]	; (8003450 <HAL_DMA_IRQHandler+0x1ec>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <HAL_DMA_IRQHandler+0x1f0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d12f      	bne.n	8003458 <HAL_DMA_IRQHandler+0x1f4>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf14      	ite	ne
 8003406:	2301      	movne	r3, #1
 8003408:	2300      	moveq	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	e02e      	b.n	800346c <HAL_DMA_IRQHandler+0x208>
 800340e:	bf00      	nop
 8003410:	24000000 	.word	0x24000000
 8003414:	1b4e81b5 	.word	0x1b4e81b5
 8003418:	40020010 	.word	0x40020010
 800341c:	40020028 	.word	0x40020028
 8003420:	40020040 	.word	0x40020040
 8003424:	40020058 	.word	0x40020058
 8003428:	40020070 	.word	0x40020070
 800342c:	40020088 	.word	0x40020088
 8003430:	400200a0 	.word	0x400200a0
 8003434:	400200b8 	.word	0x400200b8
 8003438:	40020410 	.word	0x40020410
 800343c:	40020428 	.word	0x40020428
 8003440:	40020440 	.word	0x40020440
 8003444:	40020458 	.word	0x40020458
 8003448:	40020470 	.word	0x40020470
 800344c:	40020488 	.word	0x40020488
 8003450:	400204a0 	.word	0x400204a0
 8003454:	400204b8 	.word	0x400204b8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0204 	bic.w	r2, r2, #4
 800347e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2208      	movs	r2, #8
 800348a:	409a      	lsls	r2, r3
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d06e      	beq.n	8003590 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a69      	ldr	r2, [pc, #420]	; (800365c <HAL_DMA_IRQHandler+0x3f8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d04a      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a67      	ldr	r2, [pc, #412]	; (8003660 <HAL_DMA_IRQHandler+0x3fc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d045      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a66      	ldr	r2, [pc, #408]	; (8003664 <HAL_DMA_IRQHandler+0x400>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d040      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a64      	ldr	r2, [pc, #400]	; (8003668 <HAL_DMA_IRQHandler+0x404>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d03b      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a63      	ldr	r2, [pc, #396]	; (800366c <HAL_DMA_IRQHandler+0x408>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d036      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a61      	ldr	r2, [pc, #388]	; (8003670 <HAL_DMA_IRQHandler+0x40c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d031      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_DMA_IRQHandler+0x410>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d02c      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a5e      	ldr	r2, [pc, #376]	; (8003678 <HAL_DMA_IRQHandler+0x414>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d027      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a5d      	ldr	r2, [pc, #372]	; (800367c <HAL_DMA_IRQHandler+0x418>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a5b      	ldr	r2, [pc, #364]	; (8003680 <HAL_DMA_IRQHandler+0x41c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01d      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a5a      	ldr	r2, [pc, #360]	; (8003684 <HAL_DMA_IRQHandler+0x420>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a58      	ldr	r2, [pc, #352]	; (8003688 <HAL_DMA_IRQHandler+0x424>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a57      	ldr	r2, [pc, #348]	; (800368c <HAL_DMA_IRQHandler+0x428>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a55      	ldr	r2, [pc, #340]	; (8003690 <HAL_DMA_IRQHandler+0x42c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a54      	ldr	r2, [pc, #336]	; (8003694 <HAL_DMA_IRQHandler+0x430>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a52      	ldr	r2, [pc, #328]	; (8003698 <HAL_DMA_IRQHandler+0x434>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10a      	bne.n	8003568 <HAL_DMA_IRQHandler+0x304>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e003      	b.n	8003570 <HAL_DMA_IRQHandler+0x30c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0202 	orr.w	r2, r3, #2
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2204      	movs	r2, #4
 800359a:	409a      	lsls	r2, r3
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 808f 	beq.w	80036c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2c      	ldr	r2, [pc, #176]	; (800365c <HAL_DMA_IRQHandler+0x3f8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d04a      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <HAL_DMA_IRQHandler+0x3fc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d045      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a29      	ldr	r2, [pc, #164]	; (8003664 <HAL_DMA_IRQHandler+0x400>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d040      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a27      	ldr	r2, [pc, #156]	; (8003668 <HAL_DMA_IRQHandler+0x404>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d03b      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a26      	ldr	r2, [pc, #152]	; (800366c <HAL_DMA_IRQHandler+0x408>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d036      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a24      	ldr	r2, [pc, #144]	; (8003670 <HAL_DMA_IRQHandler+0x40c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d031      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a23      	ldr	r2, [pc, #140]	; (8003674 <HAL_DMA_IRQHandler+0x410>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d02c      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a21      	ldr	r2, [pc, #132]	; (8003678 <HAL_DMA_IRQHandler+0x414>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d027      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a20      	ldr	r2, [pc, #128]	; (800367c <HAL_DMA_IRQHandler+0x418>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d022      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <HAL_DMA_IRQHandler+0x41c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01d      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <HAL_DMA_IRQHandler+0x420>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d018      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <HAL_DMA_IRQHandler+0x424>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1a      	ldr	r2, [pc, #104]	; (800368c <HAL_DMA_IRQHandler+0x428>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00e      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_DMA_IRQHandler+0x42c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a17      	ldr	r2, [pc, #92]	; (8003694 <HAL_DMA_IRQHandler+0x430>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a15      	ldr	r2, [pc, #84]	; (8003698 <HAL_DMA_IRQHandler+0x434>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d12a      	bne.n	800369c <HAL_DMA_IRQHandler+0x438>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	e023      	b.n	80036a4 <HAL_DMA_IRQHandler+0x440>
 800365c:	40020010 	.word	0x40020010
 8003660:	40020028 	.word	0x40020028
 8003664:	40020040 	.word	0x40020040
 8003668:	40020058 	.word	0x40020058
 800366c:	40020070 	.word	0x40020070
 8003670:	40020088 	.word	0x40020088
 8003674:	400200a0 	.word	0x400200a0
 8003678:	400200b8 	.word	0x400200b8
 800367c:	40020410 	.word	0x40020410
 8003680:	40020428 	.word	0x40020428
 8003684:	40020440 	.word	0x40020440
 8003688:	40020458 	.word	0x40020458
 800368c:	40020470 	.word	0x40020470
 8003690:	40020488 	.word	0x40020488
 8003694:	400204a0 	.word	0x400204a0
 8003698:	400204b8 	.word	0x400204b8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2300      	movs	r3, #0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	2204      	movs	r2, #4
 80036b2:	409a      	lsls	r2, r3
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	f043 0204 	orr.w	r2, r3, #4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	2210      	movs	r2, #16
 80036ce:	409a      	lsls	r2, r3
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80a6 	beq.w	8003826 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a85      	ldr	r2, [pc, #532]	; (80038f4 <HAL_DMA_IRQHandler+0x690>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d04a      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a83      	ldr	r2, [pc, #524]	; (80038f8 <HAL_DMA_IRQHandler+0x694>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d045      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a82      	ldr	r2, [pc, #520]	; (80038fc <HAL_DMA_IRQHandler+0x698>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d040      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a80      	ldr	r2, [pc, #512]	; (8003900 <HAL_DMA_IRQHandler+0x69c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d03b      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a7f      	ldr	r2, [pc, #508]	; (8003904 <HAL_DMA_IRQHandler+0x6a0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d036      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a7d      	ldr	r2, [pc, #500]	; (8003908 <HAL_DMA_IRQHandler+0x6a4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d031      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a7c      	ldr	r2, [pc, #496]	; (800390c <HAL_DMA_IRQHandler+0x6a8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d02c      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a7a      	ldr	r2, [pc, #488]	; (8003910 <HAL_DMA_IRQHandler+0x6ac>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d027      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a79      	ldr	r2, [pc, #484]	; (8003914 <HAL_DMA_IRQHandler+0x6b0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d022      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a77      	ldr	r2, [pc, #476]	; (8003918 <HAL_DMA_IRQHandler+0x6b4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01d      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a76      	ldr	r2, [pc, #472]	; (800391c <HAL_DMA_IRQHandler+0x6b8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d018      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a74      	ldr	r2, [pc, #464]	; (8003920 <HAL_DMA_IRQHandler+0x6bc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a73      	ldr	r2, [pc, #460]	; (8003924 <HAL_DMA_IRQHandler+0x6c0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00e      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a71      	ldr	r2, [pc, #452]	; (8003928 <HAL_DMA_IRQHandler+0x6c4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d009      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a70      	ldr	r2, [pc, #448]	; (800392c <HAL_DMA_IRQHandler+0x6c8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d004      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a6e      	ldr	r2, [pc, #440]	; (8003930 <HAL_DMA_IRQHandler+0x6cc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10a      	bne.n	8003790 <HAL_DMA_IRQHandler+0x52c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e009      	b.n	80037a4 <HAL_DMA_IRQHandler+0x540>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	bf14      	ite	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	2300      	moveq	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d03e      	beq.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2210      	movs	r2, #16
 80037b2:	409a      	lsls	r2, r3
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d018      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d108      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d024      	beq.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
 80037e4:	e01f      	b.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01b      	beq.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
 80037f6:	e016      	b.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d107      	bne.n	8003816 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0208 	bic.w	r2, r2, #8
 8003814:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2220      	movs	r2, #32
 8003830:	409a      	lsls	r2, r3
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8110 	beq.w	8003a5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <HAL_DMA_IRQHandler+0x690>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d04a      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2b      	ldr	r2, [pc, #172]	; (80038f8 <HAL_DMA_IRQHandler+0x694>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d045      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a29      	ldr	r2, [pc, #164]	; (80038fc <HAL_DMA_IRQHandler+0x698>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d040      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a28      	ldr	r2, [pc, #160]	; (8003900 <HAL_DMA_IRQHandler+0x69c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d03b      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a26      	ldr	r2, [pc, #152]	; (8003904 <HAL_DMA_IRQHandler+0x6a0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d036      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a25      	ldr	r2, [pc, #148]	; (8003908 <HAL_DMA_IRQHandler+0x6a4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d031      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a23      	ldr	r2, [pc, #140]	; (800390c <HAL_DMA_IRQHandler+0x6a8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d02c      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a22      	ldr	r2, [pc, #136]	; (8003910 <HAL_DMA_IRQHandler+0x6ac>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d027      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a20      	ldr	r2, [pc, #128]	; (8003914 <HAL_DMA_IRQHandler+0x6b0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d022      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_DMA_IRQHandler+0x6b4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d01d      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <HAL_DMA_IRQHandler+0x6b8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d018      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_DMA_IRQHandler+0x6bc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d013      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <HAL_DMA_IRQHandler+0x6c0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00e      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_DMA_IRQHandler+0x6c4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d009      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a17      	ldr	r2, [pc, #92]	; (800392c <HAL_DMA_IRQHandler+0x6c8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a16      	ldr	r2, [pc, #88]	; (8003930 <HAL_DMA_IRQHandler+0x6cc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d12b      	bne.n	8003934 <HAL_DMA_IRQHandler+0x6d0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bf14      	ite	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	2300      	moveq	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	e02a      	b.n	8003948 <HAL_DMA_IRQHandler+0x6e4>
 80038f2:	bf00      	nop
 80038f4:	40020010 	.word	0x40020010
 80038f8:	40020028 	.word	0x40020028
 80038fc:	40020040 	.word	0x40020040
 8003900:	40020058 	.word	0x40020058
 8003904:	40020070 	.word	0x40020070
 8003908:	40020088 	.word	0x40020088
 800390c:	400200a0 	.word	0x400200a0
 8003910:	400200b8 	.word	0x400200b8
 8003914:	40020410 	.word	0x40020410
 8003918:	40020428 	.word	0x40020428
 800391c:	40020440 	.word	0x40020440
 8003920:	40020458 	.word	0x40020458
 8003924:	40020470 	.word	0x40020470
 8003928:	40020488 	.word	0x40020488
 800392c:	400204a0 	.word	0x400204a0
 8003930:	400204b8 	.word	0x400204b8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	bf14      	ite	ne
 8003942:	2301      	movne	r3, #1
 8003944:	2300      	moveq	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8087 	beq.w	8003a5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2220      	movs	r2, #32
 8003958:	409a      	lsls	r2, r3
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b04      	cmp	r3, #4
 8003968:	d139      	bne.n	80039de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0216 	bic.w	r2, r2, #22
 8003978:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003988:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <HAL_DMA_IRQHandler+0x736>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0208 	bic.w	r2, r2, #8
 80039a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	223f      	movs	r2, #63	; 0x3f
 80039b4:	409a      	lsls	r2, r3
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 834a 	beq.w	8004068 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
          }
          return;
 80039dc:	e344      	b.n	8004068 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d108      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d02c      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
 8003a0a:	e027      	b.n	8003a5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d023      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
 8003a1c:	e01e      	b.n	8003a5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10f      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0210 	bic.w	r2, r2, #16
 8003a3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8306 	beq.w	8004072 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8088 	beq.w	8003b84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2204      	movs	r2, #4
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a7a      	ldr	r2, [pc, #488]	; (8003c6c <HAL_DMA_IRQHandler+0xa08>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d04a      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a79      	ldr	r2, [pc, #484]	; (8003c70 <HAL_DMA_IRQHandler+0xa0c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d045      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a77      	ldr	r2, [pc, #476]	; (8003c74 <HAL_DMA_IRQHandler+0xa10>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d040      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a76      	ldr	r2, [pc, #472]	; (8003c78 <HAL_DMA_IRQHandler+0xa14>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d03b      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a74      	ldr	r2, [pc, #464]	; (8003c7c <HAL_DMA_IRQHandler+0xa18>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d036      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a73      	ldr	r2, [pc, #460]	; (8003c80 <HAL_DMA_IRQHandler+0xa1c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d031      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a71      	ldr	r2, [pc, #452]	; (8003c84 <HAL_DMA_IRQHandler+0xa20>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d02c      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a70      	ldr	r2, [pc, #448]	; (8003c88 <HAL_DMA_IRQHandler+0xa24>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d027      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a6e      	ldr	r2, [pc, #440]	; (8003c8c <HAL_DMA_IRQHandler+0xa28>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d022      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6d      	ldr	r2, [pc, #436]	; (8003c90 <HAL_DMA_IRQHandler+0xa2c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d01d      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6b      	ldr	r2, [pc, #428]	; (8003c94 <HAL_DMA_IRQHandler+0xa30>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d018      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6a      	ldr	r2, [pc, #424]	; (8003c98 <HAL_DMA_IRQHandler+0xa34>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a68      	ldr	r2, [pc, #416]	; (8003c9c <HAL_DMA_IRQHandler+0xa38>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00e      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a67      	ldr	r2, [pc, #412]	; (8003ca0 <HAL_DMA_IRQHandler+0xa3c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d009      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <HAL_DMA_IRQHandler+0xa40>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d004      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <HAL_DMA_IRQHandler+0xa44>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d108      	bne.n	8003b2e <HAL_DMA_IRQHandler+0x8ca>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e007      	b.n	8003b3e <HAL_DMA_IRQHandler+0x8da>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d307      	bcc.n	8003b5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f2      	bne.n	8003b3e <HAL_DMA_IRQHandler+0x8da>
 8003b58:	e000      	b.n	8003b5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b72:	e003      	b.n	8003b7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8272 	beq.w	8004072 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
 8003b96:	e26c      	b.n	8004072 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a43      	ldr	r2, [pc, #268]	; (8003cac <HAL_DMA_IRQHandler+0xa48>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d022      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a42      	ldr	r2, [pc, #264]	; (8003cb0 <HAL_DMA_IRQHandler+0xa4c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d01d      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a40      	ldr	r2, [pc, #256]	; (8003cb4 <HAL_DMA_IRQHandler+0xa50>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d018      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a3f      	ldr	r2, [pc, #252]	; (8003cb8 <HAL_DMA_IRQHandler+0xa54>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a3d      	ldr	r2, [pc, #244]	; (8003cbc <HAL_DMA_IRQHandler+0xa58>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00e      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a3c      	ldr	r2, [pc, #240]	; (8003cc0 <HAL_DMA_IRQHandler+0xa5c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3a      	ldr	r2, [pc, #232]	; (8003cc4 <HAL_DMA_IRQHandler+0xa60>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a39      	ldr	r2, [pc, #228]	; (8003cc8 <HAL_DMA_IRQHandler+0xa64>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_DMA_IRQHandler+0x988>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_DMA_IRQHandler+0x98a>
 8003bec:	2300      	movs	r3, #0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 823f 	beq.w	8004072 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2204      	movs	r2, #4
 8003c06:	409a      	lsls	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80cd 	beq.w	8003dac <HAL_DMA_IRQHandler+0xb48>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80c7 	beq.w	8003dac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	2204      	movs	r2, #4
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d049      	beq.n	8003ccc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8210 	beq.w	800406c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c54:	e20a      	b.n	800406c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8206 	beq.w	800406c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c68:	e200      	b.n	800406c <HAL_DMA_IRQHandler+0xe08>
 8003c6a:	bf00      	nop
 8003c6c:	40020010 	.word	0x40020010
 8003c70:	40020028 	.word	0x40020028
 8003c74:	40020040 	.word	0x40020040
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	40020070 	.word	0x40020070
 8003c80:	40020088 	.word	0x40020088
 8003c84:	400200a0 	.word	0x400200a0
 8003c88:	400200b8 	.word	0x400200b8
 8003c8c:	40020410 	.word	0x40020410
 8003c90:	40020428 	.word	0x40020428
 8003c94:	40020440 	.word	0x40020440
 8003c98:	40020458 	.word	0x40020458
 8003c9c:	40020470 	.word	0x40020470
 8003ca0:	40020488 	.word	0x40020488
 8003ca4:	400204a0 	.word	0x400204a0
 8003ca8:	400204b8 	.word	0x400204b8
 8003cac:	58025408 	.word	0x58025408
 8003cb0:	5802541c 	.word	0x5802541c
 8003cb4:	58025430 	.word	0x58025430
 8003cb8:	58025444 	.word	0x58025444
 8003cbc:	58025458 	.word	0x58025458
 8003cc0:	5802546c 	.word	0x5802546c
 8003cc4:	58025480 	.word	0x58025480
 8003cc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d160      	bne.n	8003d98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a7f      	ldr	r2, [pc, #508]	; (8003ed8 <HAL_DMA_IRQHandler+0xc74>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d04a      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a7d      	ldr	r2, [pc, #500]	; (8003edc <HAL_DMA_IRQHandler+0xc78>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d045      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a7c      	ldr	r2, [pc, #496]	; (8003ee0 <HAL_DMA_IRQHandler+0xc7c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d040      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a7a      	ldr	r2, [pc, #488]	; (8003ee4 <HAL_DMA_IRQHandler+0xc80>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d03b      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a79      	ldr	r2, [pc, #484]	; (8003ee8 <HAL_DMA_IRQHandler+0xc84>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d036      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a77      	ldr	r2, [pc, #476]	; (8003eec <HAL_DMA_IRQHandler+0xc88>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d031      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a76      	ldr	r2, [pc, #472]	; (8003ef0 <HAL_DMA_IRQHandler+0xc8c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d02c      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a74      	ldr	r2, [pc, #464]	; (8003ef4 <HAL_DMA_IRQHandler+0xc90>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d027      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a73      	ldr	r2, [pc, #460]	; (8003ef8 <HAL_DMA_IRQHandler+0xc94>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d022      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a71      	ldr	r2, [pc, #452]	; (8003efc <HAL_DMA_IRQHandler+0xc98>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01d      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a70      	ldr	r2, [pc, #448]	; (8003f00 <HAL_DMA_IRQHandler+0xc9c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d018      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a6e      	ldr	r2, [pc, #440]	; (8003f04 <HAL_DMA_IRQHandler+0xca0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6d      	ldr	r2, [pc, #436]	; (8003f08 <HAL_DMA_IRQHandler+0xca4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a6b      	ldr	r2, [pc, #428]	; (8003f0c <HAL_DMA_IRQHandler+0xca8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a6a      	ldr	r2, [pc, #424]	; (8003f10 <HAL_DMA_IRQHandler+0xcac>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a68      	ldr	r2, [pc, #416]	; (8003f14 <HAL_DMA_IRQHandler+0xcb0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d108      	bne.n	8003d88 <HAL_DMA_IRQHandler+0xb24>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0208 	bic.w	r2, r2, #8
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e007      	b.n	8003d98 <HAL_DMA_IRQHandler+0xb34>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8165 	beq.w	800406c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003daa:	e15f      	b.n	800406c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2202      	movs	r2, #2
 8003db6:	409a      	lsls	r2, r3
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80c5 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xce8>
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80bf 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 813a 	beq.w	8004070 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e04:	e134      	b.n	8004070 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8130 	beq.w	8004070 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e18:	e12a      	b.n	8004070 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f040 8089 	bne.w	8003f38 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2b      	ldr	r2, [pc, #172]	; (8003ed8 <HAL_DMA_IRQHandler+0xc74>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d04a      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a29      	ldr	r2, [pc, #164]	; (8003edc <HAL_DMA_IRQHandler+0xc78>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d045      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <HAL_DMA_IRQHandler+0xc7c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d040      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a26      	ldr	r2, [pc, #152]	; (8003ee4 <HAL_DMA_IRQHandler+0xc80>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d03b      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a25      	ldr	r2, [pc, #148]	; (8003ee8 <HAL_DMA_IRQHandler+0xc84>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d036      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a23      	ldr	r2, [pc, #140]	; (8003eec <HAL_DMA_IRQHandler+0xc88>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d031      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <HAL_DMA_IRQHandler+0xc8c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d02c      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <HAL_DMA_IRQHandler+0xc90>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d027      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <HAL_DMA_IRQHandler+0xc94>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d022      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <HAL_DMA_IRQHandler+0xc98>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01d      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <HAL_DMA_IRQHandler+0xc9c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d018      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <HAL_DMA_IRQHandler+0xca0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <HAL_DMA_IRQHandler+0xca4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <HAL_DMA_IRQHandler+0xca8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d009      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <HAL_DMA_IRQHandler+0xcac>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xc62>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <HAL_DMA_IRQHandler+0xcb0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d128      	bne.n	8003f18 <HAL_DMA_IRQHandler+0xcb4>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0214 	bic.w	r2, r2, #20
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e027      	b.n	8003f28 <HAL_DMA_IRQHandler+0xcc4>
 8003ed8:	40020010 	.word	0x40020010
 8003edc:	40020028 	.word	0x40020028
 8003ee0:	40020040 	.word	0x40020040
 8003ee4:	40020058 	.word	0x40020058
 8003ee8:	40020070 	.word	0x40020070
 8003eec:	40020088 	.word	0x40020088
 8003ef0:	400200a0 	.word	0x400200a0
 8003ef4:	400200b8 	.word	0x400200b8
 8003ef8:	40020410 	.word	0x40020410
 8003efc:	40020428 	.word	0x40020428
 8003f00:	40020440 	.word	0x40020440
 8003f04:	40020458 	.word	0x40020458
 8003f08:	40020470 	.word	0x40020470
 8003f0c:	40020488 	.word	0x40020488
 8003f10:	400204a0 	.word	0x400204a0
 8003f14:	400204b8 	.word	0x400204b8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 020a 	bic.w	r2, r2, #10
 8003f26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8097 	beq.w	8004070 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f4a:	e091      	b.n	8004070 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	2208      	movs	r2, #8
 8003f56:	409a      	lsls	r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8088 	beq.w	8004072 <HAL_DMA_IRQHandler+0xe0e>
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8082 	beq.w	8004072 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a41      	ldr	r2, [pc, #260]	; (8004078 <HAL_DMA_IRQHandler+0xe14>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a3f      	ldr	r2, [pc, #252]	; (800407c <HAL_DMA_IRQHandler+0xe18>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a3e      	ldr	r2, [pc, #248]	; (8004080 <HAL_DMA_IRQHandler+0xe1c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <HAL_DMA_IRQHandler+0xe20>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3b      	ldr	r2, [pc, #236]	; (8004088 <HAL_DMA_IRQHandler+0xe24>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a39      	ldr	r2, [pc, #228]	; (800408c <HAL_DMA_IRQHandler+0xe28>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a38      	ldr	r2, [pc, #224]	; (8004090 <HAL_DMA_IRQHandler+0xe2c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a36      	ldr	r2, [pc, #216]	; (8004094 <HAL_DMA_IRQHandler+0xe30>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a35      	ldr	r2, [pc, #212]	; (8004098 <HAL_DMA_IRQHandler+0xe34>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a33      	ldr	r2, [pc, #204]	; (800409c <HAL_DMA_IRQHandler+0xe38>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a32      	ldr	r2, [pc, #200]	; (80040a0 <HAL_DMA_IRQHandler+0xe3c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a30      	ldr	r2, [pc, #192]	; (80040a4 <HAL_DMA_IRQHandler+0xe40>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <HAL_DMA_IRQHandler+0xe44>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2d      	ldr	r2, [pc, #180]	; (80040ac <HAL_DMA_IRQHandler+0xe48>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2c      	ldr	r2, [pc, #176]	; (80040b0 <HAL_DMA_IRQHandler+0xe4c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <HAL_DMA_IRQHandler+0xe50>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d108      	bne.n	8004020 <HAL_DMA_IRQHandler+0xdbc>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 021c 	bic.w	r2, r2, #28
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e007      	b.n	8004030 <HAL_DMA_IRQHandler+0xdcc>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 020e 	bic.w	r2, r2, #14
 800402e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2201      	movs	r2, #1
 800403a:	409a      	lsls	r2, r3
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
 8004066:	e004      	b.n	8004072 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004068:	bf00      	nop
 800406a:	e002      	b.n	8004072 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004070:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004072:	3728      	adds	r7, #40	; 0x28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40020010 	.word	0x40020010
 800407c:	40020028 	.word	0x40020028
 8004080:	40020040 	.word	0x40020040
 8004084:	40020058 	.word	0x40020058
 8004088:	40020070 	.word	0x40020070
 800408c:	40020088 	.word	0x40020088
 8004090:	400200a0 	.word	0x400200a0
 8004094:	400200b8 	.word	0x400200b8
 8004098:	40020410 	.word	0x40020410
 800409c:	40020428 	.word	0x40020428
 80040a0:	40020440 	.word	0x40020440
 80040a4:	40020458 	.word	0x40020458
 80040a8:	40020470 	.word	0x40020470
 80040ac:	40020488 	.word	0x40020488
 80040b0:	400204a0 	.word	0x400204a0
 80040b4:	400204b8 	.word	0x400204b8

080040b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7f      	ldr	r2, [pc, #508]	; (80042d4 <DMA_SetConfig+0x21c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d072      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a7d      	ldr	r2, [pc, #500]	; (80042d8 <DMA_SetConfig+0x220>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d06d      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7c      	ldr	r2, [pc, #496]	; (80042dc <DMA_SetConfig+0x224>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d068      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7a      	ldr	r2, [pc, #488]	; (80042e0 <DMA_SetConfig+0x228>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d063      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a79      	ldr	r2, [pc, #484]	; (80042e4 <DMA_SetConfig+0x22c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d05e      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a77      	ldr	r2, [pc, #476]	; (80042e8 <DMA_SetConfig+0x230>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d059      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a76      	ldr	r2, [pc, #472]	; (80042ec <DMA_SetConfig+0x234>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d054      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a74      	ldr	r2, [pc, #464]	; (80042f0 <DMA_SetConfig+0x238>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d04f      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a73      	ldr	r2, [pc, #460]	; (80042f4 <DMA_SetConfig+0x23c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d04a      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a71      	ldr	r2, [pc, #452]	; (80042f8 <DMA_SetConfig+0x240>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d045      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a70      	ldr	r2, [pc, #448]	; (80042fc <DMA_SetConfig+0x244>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d040      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <DMA_SetConfig+0x248>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d03b      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6d      	ldr	r2, [pc, #436]	; (8004304 <DMA_SetConfig+0x24c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d036      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6b      	ldr	r2, [pc, #428]	; (8004308 <DMA_SetConfig+0x250>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d031      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a6a      	ldr	r2, [pc, #424]	; (800430c <DMA_SetConfig+0x254>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d02c      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a68      	ldr	r2, [pc, #416]	; (8004310 <DMA_SetConfig+0x258>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d027      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a67      	ldr	r2, [pc, #412]	; (8004314 <DMA_SetConfig+0x25c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d022      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a65      	ldr	r2, [pc, #404]	; (8004318 <DMA_SetConfig+0x260>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01d      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a64      	ldr	r2, [pc, #400]	; (800431c <DMA_SetConfig+0x264>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d018      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a62      	ldr	r2, [pc, #392]	; (8004320 <DMA_SetConfig+0x268>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a61      	ldr	r2, [pc, #388]	; (8004324 <DMA_SetConfig+0x26c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a5f      	ldr	r2, [pc, #380]	; (8004328 <DMA_SetConfig+0x270>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d009      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a5e      	ldr	r2, [pc, #376]	; (800432c <DMA_SetConfig+0x274>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <DMA_SetConfig+0x10a>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a5c      	ldr	r2, [pc, #368]	; (8004330 <DMA_SetConfig+0x278>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <DMA_SetConfig+0x10e>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <DMA_SetConfig+0x110>
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80041e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a39      	ldr	r2, [pc, #228]	; (80042d4 <DMA_SetConfig+0x21c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d04a      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a38      	ldr	r2, [pc, #224]	; (80042d8 <DMA_SetConfig+0x220>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d045      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a36      	ldr	r2, [pc, #216]	; (80042dc <DMA_SetConfig+0x224>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d040      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a35      	ldr	r2, [pc, #212]	; (80042e0 <DMA_SetConfig+0x228>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d03b      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a33      	ldr	r2, [pc, #204]	; (80042e4 <DMA_SetConfig+0x22c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d036      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a32      	ldr	r2, [pc, #200]	; (80042e8 <DMA_SetConfig+0x230>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d031      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a30      	ldr	r2, [pc, #192]	; (80042ec <DMA_SetConfig+0x234>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d02c      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a2f      	ldr	r2, [pc, #188]	; (80042f0 <DMA_SetConfig+0x238>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d027      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2d      	ldr	r2, [pc, #180]	; (80042f4 <DMA_SetConfig+0x23c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d022      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <DMA_SetConfig+0x240>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d01d      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <DMA_SetConfig+0x244>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d018      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a29      	ldr	r2, [pc, #164]	; (8004300 <DMA_SetConfig+0x248>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d013      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <DMA_SetConfig+0x24c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00e      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a26      	ldr	r2, [pc, #152]	; (8004308 <DMA_SetConfig+0x250>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d009      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a24      	ldr	r2, [pc, #144]	; (800430c <DMA_SetConfig+0x254>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <DMA_SetConfig+0x1d0>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a23      	ldr	r2, [pc, #140]	; (8004310 <DMA_SetConfig+0x258>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <DMA_SetConfig+0x1d4>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <DMA_SetConfig+0x1d6>
 800428c:	2300      	movs	r3, #0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d059      	beq.n	8004346 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	223f      	movs	r2, #63	; 0x3f
 800429c:	409a      	lsls	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d138      	bne.n	8004334 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042d2:	e086      	b.n	80043e2 <DMA_SetConfig+0x32a>
 80042d4:	40020010 	.word	0x40020010
 80042d8:	40020028 	.word	0x40020028
 80042dc:	40020040 	.word	0x40020040
 80042e0:	40020058 	.word	0x40020058
 80042e4:	40020070 	.word	0x40020070
 80042e8:	40020088 	.word	0x40020088
 80042ec:	400200a0 	.word	0x400200a0
 80042f0:	400200b8 	.word	0x400200b8
 80042f4:	40020410 	.word	0x40020410
 80042f8:	40020428 	.word	0x40020428
 80042fc:	40020440 	.word	0x40020440
 8004300:	40020458 	.word	0x40020458
 8004304:	40020470 	.word	0x40020470
 8004308:	40020488 	.word	0x40020488
 800430c:	400204a0 	.word	0x400204a0
 8004310:	400204b8 	.word	0x400204b8
 8004314:	58025408 	.word	0x58025408
 8004318:	5802541c 	.word	0x5802541c
 800431c:	58025430 	.word	0x58025430
 8004320:	58025444 	.word	0x58025444
 8004324:	58025458 	.word	0x58025458
 8004328:	5802546c 	.word	0x5802546c
 800432c:	58025480 	.word	0x58025480
 8004330:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	60da      	str	r2, [r3, #12]
}
 8004344:	e04d      	b.n	80043e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <DMA_SetConfig+0x338>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d022      	beq.n	8004396 <DMA_SetConfig+0x2de>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a27      	ldr	r2, [pc, #156]	; (80043f4 <DMA_SetConfig+0x33c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01d      	beq.n	8004396 <DMA_SetConfig+0x2de>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a26      	ldr	r2, [pc, #152]	; (80043f8 <DMA_SetConfig+0x340>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d018      	beq.n	8004396 <DMA_SetConfig+0x2de>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <DMA_SetConfig+0x344>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <DMA_SetConfig+0x2de>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a23      	ldr	r2, [pc, #140]	; (8004400 <DMA_SetConfig+0x348>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <DMA_SetConfig+0x2de>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a21      	ldr	r2, [pc, #132]	; (8004404 <DMA_SetConfig+0x34c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <DMA_SetConfig+0x2de>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a20      	ldr	r2, [pc, #128]	; (8004408 <DMA_SetConfig+0x350>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <DMA_SetConfig+0x2de>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <DMA_SetConfig+0x354>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <DMA_SetConfig+0x2e2>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <DMA_SetConfig+0x2e4>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2201      	movs	r2, #1
 80043aa:	409a      	lsls	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b40      	cmp	r3, #64	; 0x40
 80043be:	d108      	bne.n	80043d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	60da      	str	r2, [r3, #12]
}
 80043d0:	e007      	b.n	80043e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	60da      	str	r2, [r3, #12]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	58025408 	.word	0x58025408
 80043f4:	5802541c 	.word	0x5802541c
 80043f8:	58025430 	.word	0x58025430
 80043fc:	58025444 	.word	0x58025444
 8004400:	58025458 	.word	0x58025458
 8004404:	5802546c 	.word	0x5802546c
 8004408:	58025480 	.word	0x58025480
 800440c:	58025494 	.word	0x58025494

08004410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a42      	ldr	r2, [pc, #264]	; (8004528 <DMA_CalcBaseAndBitshift+0x118>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d04a      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a41      	ldr	r2, [pc, #260]	; (800452c <DMA_CalcBaseAndBitshift+0x11c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d045      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3f      	ldr	r2, [pc, #252]	; (8004530 <DMA_CalcBaseAndBitshift+0x120>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d040      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3e      	ldr	r2, [pc, #248]	; (8004534 <DMA_CalcBaseAndBitshift+0x124>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d03b      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3c      	ldr	r2, [pc, #240]	; (8004538 <DMA_CalcBaseAndBitshift+0x128>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d036      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3b      	ldr	r2, [pc, #236]	; (800453c <DMA_CalcBaseAndBitshift+0x12c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d031      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a39      	ldr	r2, [pc, #228]	; (8004540 <DMA_CalcBaseAndBitshift+0x130>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d02c      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a38      	ldr	r2, [pc, #224]	; (8004544 <DMA_CalcBaseAndBitshift+0x134>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d027      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a36      	ldr	r2, [pc, #216]	; (8004548 <DMA_CalcBaseAndBitshift+0x138>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d022      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a35      	ldr	r2, [pc, #212]	; (800454c <DMA_CalcBaseAndBitshift+0x13c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d01d      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a33      	ldr	r2, [pc, #204]	; (8004550 <DMA_CalcBaseAndBitshift+0x140>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d018      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a32      	ldr	r2, [pc, #200]	; (8004554 <DMA_CalcBaseAndBitshift+0x144>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a30      	ldr	r2, [pc, #192]	; (8004558 <DMA_CalcBaseAndBitshift+0x148>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00e      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2f      	ldr	r2, [pc, #188]	; (800455c <DMA_CalcBaseAndBitshift+0x14c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d009      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <DMA_CalcBaseAndBitshift+0x150>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <DMA_CalcBaseAndBitshift+0x154>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <DMA_CalcBaseAndBitshift+0xac>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <DMA_CalcBaseAndBitshift+0xae>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d024      	beq.n	800450c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	3b10      	subs	r3, #16
 80044ca:	4a27      	ldr	r2, [pc, #156]	; (8004568 <DMA_CalcBaseAndBitshift+0x158>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	4a24      	ldr	r2, [pc, #144]	; (800456c <DMA_CalcBaseAndBitshift+0x15c>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	461a      	mov	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d908      	bls.n	80044fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <DMA_CalcBaseAndBitshift+0x160>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	1d1a      	adds	r2, r3, #4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	659a      	str	r2, [r3, #88]	; 0x58
 80044fa:	e00d      	b.n	8004518 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <DMA_CalcBaseAndBitshift+0x160>)
 8004504:	4013      	ands	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6593      	str	r3, [r2, #88]	; 0x58
 800450a:	e005      	b.n	8004518 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40020010 	.word	0x40020010
 800452c:	40020028 	.word	0x40020028
 8004530:	40020040 	.word	0x40020040
 8004534:	40020058 	.word	0x40020058
 8004538:	40020070 	.word	0x40020070
 800453c:	40020088 	.word	0x40020088
 8004540:	400200a0 	.word	0x400200a0
 8004544:	400200b8 	.word	0x400200b8
 8004548:	40020410 	.word	0x40020410
 800454c:	40020428 	.word	0x40020428
 8004550:	40020440 	.word	0x40020440
 8004554:	40020458 	.word	0x40020458
 8004558:	40020470 	.word	0x40020470
 800455c:	40020488 	.word	0x40020488
 8004560:	400204a0 	.word	0x400204a0
 8004564:	400204b8 	.word	0x400204b8
 8004568:	aaaaaaab 	.word	0xaaaaaaab
 800456c:	0800b0e0 	.word	0x0800b0e0
 8004570:	fffffc00 	.word	0xfffffc00

08004574 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d120      	bne.n	80045ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	2b03      	cmp	r3, #3
 800458e:	d858      	bhi.n	8004642 <DMA_CheckFifoParam+0xce>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <DMA_CheckFifoParam+0x24>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045bb 	.word	0x080045bb
 80045a0:	080045a9 	.word	0x080045a9
 80045a4:	08004643 	.word	0x08004643
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d048      	beq.n	8004646 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045b8:	e045      	b.n	8004646 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045c2:	d142      	bne.n	800464a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045c8:	e03f      	b.n	800464a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d2:	d123      	bne.n	800461c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d838      	bhi.n	800464e <DMA_CheckFifoParam+0xda>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <DMA_CheckFifoParam+0x70>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	080045f5 	.word	0x080045f5
 80045e8:	080045fb 	.word	0x080045fb
 80045ec:	080045f5 	.word	0x080045f5
 80045f0:	0800460d 	.word	0x0800460d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
        break;
 80045f8:	e030      	b.n	800465c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d025      	beq.n	8004652 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800460a:	e022      	b.n	8004652 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004614:	d11f      	bne.n	8004656 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800461a:	e01c      	b.n	8004656 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	2b02      	cmp	r3, #2
 8004622:	d902      	bls.n	800462a <DMA_CheckFifoParam+0xb6>
 8004624:	2b03      	cmp	r3, #3
 8004626:	d003      	beq.n	8004630 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004628:	e018      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
        break;
 800462e:	e015      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00e      	beq.n	800465a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
    break;
 8004640:	e00b      	b.n	800465a <DMA_CheckFifoParam+0xe6>
        break;
 8004642:	bf00      	nop
 8004644:	e00a      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 8004646:	bf00      	nop
 8004648:	e008      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 800464a:	bf00      	nop
 800464c:	e006      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 800464e:	bf00      	nop
 8004650:	e004      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <DMA_CheckFifoParam+0xe8>
    break;
 800465a:	bf00      	nop
    }
  }

  return status;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop

0800466c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a38      	ldr	r2, [pc, #224]	; (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a36      	ldr	r2, [pc, #216]	; (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01d      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a35      	ldr	r2, [pc, #212]	; (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a33      	ldr	r2, [pc, #204]	; (800476c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a32      	ldr	r2, [pc, #200]	; (8004770 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a30      	ldr	r2, [pc, #192]	; (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a2f      	ldr	r2, [pc, #188]	; (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2d      	ldr	r2, [pc, #180]	; (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d101      	bne.n	80046ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046ce:	2300      	movs	r3, #0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01a      	beq.n	800470a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	3b08      	subs	r3, #8
 80046dc:	4a28      	ldr	r2, [pc, #160]	; (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4b26      	ldr	r3, [pc, #152]	; (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	461a      	mov	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a24      	ldr	r2, [pc, #144]	; (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2201      	movs	r2, #1
 8004702:	409a      	lsls	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004708:	e024      	b.n	8004754 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	3b10      	subs	r3, #16
 8004712:	4a1e      	ldr	r2, [pc, #120]	; (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d806      	bhi.n	8004732 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d902      	bls.n	8004732 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3308      	adds	r3, #8
 8004730:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4b18      	ldr	r3, [pc, #96]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	461a      	mov	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a16      	ldr	r2, [pc, #88]	; (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004744:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2201      	movs	r2, #1
 800474e:	409a      	lsls	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	58025408 	.word	0x58025408
 8004764:	5802541c 	.word	0x5802541c
 8004768:	58025430 	.word	0x58025430
 800476c:	58025444 	.word	0x58025444
 8004770:	58025458 	.word	0x58025458
 8004774:	5802546c 	.word	0x5802546c
 8004778:	58025480 	.word	0x58025480
 800477c:	58025494 	.word	0x58025494
 8004780:	cccccccd 	.word	0xcccccccd
 8004784:	16009600 	.word	0x16009600
 8004788:	58025880 	.word	0x58025880
 800478c:	aaaaaaab 	.word	0xaaaaaaab
 8004790:	400204b8 	.word	0x400204b8
 8004794:	4002040f 	.word	0x4002040f
 8004798:	10008200 	.word	0x10008200
 800479c:	40020880 	.word	0x40020880

080047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d04a      	beq.n	800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d847      	bhi.n	800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a25      	ldr	r2, [pc, #148]	; (8004858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a24      	ldr	r2, [pc, #144]	; (800485c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d01d      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a22      	ldr	r2, [pc, #136]	; (8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a21      	ldr	r2, [pc, #132]	; (8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a15      	ldr	r2, [pc, #84]	; (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004828:	671a      	str	r2, [r3, #112]	; 0x70
 800482a:	e009      	b.n	8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	461a      	mov	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a11      	ldr	r2, [pc, #68]	; (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800483e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3b01      	subs	r3, #1
 8004844:	2201      	movs	r2, #1
 8004846:	409a      	lsls	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	58025408 	.word	0x58025408
 800485c:	5802541c 	.word	0x5802541c
 8004860:	58025430 	.word	0x58025430
 8004864:	58025444 	.word	0x58025444
 8004868:	58025458 	.word	0x58025458
 800486c:	5802546c 	.word	0x5802546c
 8004870:	58025480 	.word	0x58025480
 8004874:	58025494 	.word	0x58025494
 8004878:	1600963f 	.word	0x1600963f
 800487c:	58025940 	.word	0x58025940
 8004880:	1000823f 	.word	0x1000823f
 8004884:	40020940 	.word	0x40020940

08004888 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e0cf      	b.n	8004a3a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2223      	movs	r2, #35	; 0x23
 80048a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fc fb43 	bl	8000f38 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b2:	4b64      	ldr	r3, [pc, #400]	; (8004a44 <HAL_ETH_Init+0x1bc>)
 80048b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048b8:	4a62      	ldr	r2, [pc, #392]	; (8004a44 <HAL_ETH_Init+0x1bc>)
 80048ba:	f043 0302 	orr.w	r3, r3, #2
 80048be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048c2:	4b60      	ldr	r3, [pc, #384]	; (8004a44 <HAL_ETH_Init+0x1bc>)
 80048c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7a1b      	ldrb	r3, [r3, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d103      	bne.n	80048e0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80048d8:	2000      	movs	r0, #0
 80048da:	f7fd f879 	bl	80019d0 <HAL_SYSCFG_ETHInterfaceSelect>
 80048de:	e003      	b.n	80048e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80048e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80048e4:	f7fd f874 	bl	80019d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80048e8:	4b57      	ldr	r3, [pc, #348]	; (8004a48 <HAL_ETH_Init+0x1c0>)
 80048ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004902:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004904:	f7fd f834 	bl	8001970 <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800490a:	e011      	b.n	8004930 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800490c:	f7fd f830 	bl	8001970 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800491a:	d909      	bls.n	8004930 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2204      	movs	r2, #4
 8004920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	22e0      	movs	r2, #224	; 0xe0
 8004928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e084      	b.n	8004a3a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e4      	bne.n	800490c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f886 	bl	8004a54 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004948:	f001 fd06 	bl	8006358 <HAL_RCC_GetHCLKFreq>
 800494c:	4603      	mov	r3, r0
 800494e:	4a3f      	ldr	r2, [pc, #252]	; (8004a4c <HAL_ETH_Init+0x1c4>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	0c9a      	lsrs	r2, r3, #18
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3a01      	subs	r2, #1
 800495c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fa71 	bl	8004e48 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004972:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800497e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004982:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	22e0      	movs	r2, #224	; 0xe0
 800499e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e049      	b.n	8004a3a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80049b2:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <HAL_ETH_Init+0x1c8>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6952      	ldr	r2, [r2, #20]
 80049ba:	0051      	lsls	r1, r2, #1
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	430b      	orrs	r3, r1
 80049c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049c6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fad9 	bl	8004f82 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fb1f 	bl	8005014 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	3305      	adds	r3, #5
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	3304      	adds	r3, #4
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	4619      	mov	r1, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	3303      	adds	r3, #3
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	061a      	lsls	r2, r3, #24
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	3302      	adds	r3, #2
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004a22:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2210      	movs	r2, #16
 8004a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
 8004a48:	58000400 	.word	0x58000400
 8004a4c:	431bde83 	.word	0x431bde83
 8004a50:	ffff8001 	.word	0xffff8001

08004a54 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004a6e:	f001 fc73 	bl	8006358 <HAL_RCC_GetHCLKFreq>
 8004a72:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4a1e      	ldr	r2, [pc, #120]	; (8004af0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d908      	bls.n	8004a8e <HAL_ETH_SetMDIOClockRange+0x3a>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d804      	bhi.n	8004a8e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e027      	b.n	8004ade <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d908      	bls.n	8004aa8 <HAL_ETH_SetMDIOClockRange+0x54>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d204      	bcs.n	8004aa8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e01a      	b.n	8004ade <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d303      	bcc.n	8004ab8 <HAL_ETH_SetMDIOClockRange+0x64>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d911      	bls.n	8004adc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4a10      	ldr	r2, [pc, #64]	; (8004afc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d908      	bls.n	8004ad2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4a0f      	ldr	r2, [pc, #60]	; (8004b00 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d804      	bhi.n	8004ad2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e005      	b.n	8004ade <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	e000      	b.n	8004ade <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004adc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	01312cff 	.word	0x01312cff
 8004af4:	02160ebf 	.word	0x02160ebf
 8004af8:	03938700 	.word	0x03938700
 8004afc:	05f5e0ff 	.word	0x05f5e0ff
 8004b00:	08f0d17f 	.word	0x08f0d17f

08004b04 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004b16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	791b      	ldrb	r3, [r3, #4]
 8004b1c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004b1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	7b1b      	ldrb	r3, [r3, #12]
 8004b24:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004b26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	7b5b      	ldrb	r3, [r3, #13]
 8004b2c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004b2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	7b9b      	ldrb	r3, [r3, #14]
 8004b34:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004b36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	7bdb      	ldrb	r3, [r3, #15]
 8004b3c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004b3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	7c12      	ldrb	r2, [r2, #16]
 8004b44:	2a00      	cmp	r2, #0
 8004b46:	d102      	bne.n	8004b4e <ETH_SetMACConfig+0x4a>
 8004b48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b4c:	e000      	b.n	8004b50 <ETH_SetMACConfig+0x4c>
 8004b4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004b50:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	7c52      	ldrb	r2, [r2, #17]
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	d102      	bne.n	8004b60 <ETH_SetMACConfig+0x5c>
 8004b5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b5e:	e000      	b.n	8004b62 <ETH_SetMACConfig+0x5e>
 8004b60:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004b62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	7c9b      	ldrb	r3, [r3, #18]
 8004b68:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004b6a:	431a      	orrs	r2, r3
               macconf->Speed |
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004b70:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004b76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	7f1b      	ldrb	r3, [r3, #28]
 8004b7c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004b7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	7f5b      	ldrb	r3, [r3, #29]
 8004b84:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004b86:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	7f92      	ldrb	r2, [r2, #30]
 8004b8c:	2a00      	cmp	r2, #0
 8004b8e:	d102      	bne.n	8004b96 <ETH_SetMACConfig+0x92>
 8004b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b94:	e000      	b.n	8004b98 <ETH_SetMACConfig+0x94>
 8004b96:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004b98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	7fdb      	ldrb	r3, [r3, #31]
 8004b9e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004ba0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004ba8:	2a00      	cmp	r2, #0
 8004baa:	d102      	bne.n	8004bb2 <ETH_SetMACConfig+0xae>
 8004bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bb0:	e000      	b.n	8004bb4 <ETH_SetMACConfig+0xb0>
 8004bb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004bb4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004bba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bc2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004bc4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b56      	ldr	r3, [pc, #344]	; (8004d30 <ETH_SetMACConfig+0x22c>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	430b      	orrs	r3, r1
 8004be0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bee:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004bf0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bf8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004bfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c02:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004c04:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004c0c:	2a00      	cmp	r2, #0
 8004c0e:	d102      	bne.n	8004c16 <ETH_SetMACConfig+0x112>
 8004c10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c14:	e000      	b.n	8004c18 <ETH_SetMACConfig+0x114>
 8004c16:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004c18:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	4b42      	ldr	r3, [pc, #264]	; (8004d34 <ETH_SetMACConfig+0x230>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	68f9      	ldr	r1, [r7, #12]
 8004c32:	430b      	orrs	r3, r1
 8004c34:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c3c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	4b3a      	ldr	r3, [pc, #232]	; (8004d38 <ETH_SetMACConfig+0x234>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	68f9      	ldr	r1, [r7, #12]
 8004c56:	430b      	orrs	r3, r1
 8004c58:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004c60:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004c66:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004c6e:	2a00      	cmp	r2, #0
 8004c70:	d101      	bne.n	8004c76 <ETH_SetMACConfig+0x172>
 8004c72:	2280      	movs	r2, #128	; 0x80
 8004c74:	e000      	b.n	8004c78 <ETH_SetMACConfig+0x174>
 8004c76:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004c78:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c8a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004c8e:	4013      	ands	r3, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	68f9      	ldr	r1, [r7, #12]
 8004c96:	430b      	orrs	r3, r1
 8004c98:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004ca0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004ca8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	f023 0103 	bic.w	r1, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004cce:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	d101      	bne.n	8004cf2 <ETH_SetMACConfig+0x1ee>
 8004cee:	2240      	movs	r2, #64	; 0x40
 8004cf0:	e000      	b.n	8004cf4 <ETH_SetMACConfig+0x1f0>
 8004cf2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004cf4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004cfc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004cfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004d06:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004d14:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	00048083 	.word	0x00048083
 8004d34:	c0f88000 	.word	0xc0f88000
 8004d38:	fffffef0 	.word	0xfffffef0

08004d3c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <ETH_SetDMAConfig+0xf8>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	6811      	ldr	r1, [r2, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d62:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	791b      	ldrb	r3, [r3, #4]
 8004d68:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004d6e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	7b1b      	ldrb	r3, [r3, #12]
 8004d74:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <ETH_SetDMAConfig+0xfc>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d94:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	7b5b      	ldrb	r3, [r3, #13]
 8004d9a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004db0:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <ETH_SetDMAConfig+0x100>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dc0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	7d1b      	ldrb	r3, [r3, #20]
 8004dcc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004dce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	7f5b      	ldrb	r3, [r3, #29]
 8004dd4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004de6:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <ETH_SetDMAConfig+0x104>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	68f9      	ldr	r1, [r7, #12]
 8004df0:	430b      	orrs	r3, r1
 8004df2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004df6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	7f1b      	ldrb	r3, [r3, #28]
 8004dfe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e10:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <ETH_SetDMAConfig+0x108>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e24:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	ffff87fd 	.word	0xffff87fd
 8004e38:	ffff2ffe 	.word	0xffff2ffe
 8004e3c:	fffec000 	.word	0xfffec000
 8004e40:	ffc0efef 	.word	0xffc0efef
 8004e44:	7fc0ffff 	.word	0x7fc0ffff

08004e48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b0a4      	sub	sp, #144	; 0x90
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004e50:	2301      	movs	r3, #1
 8004e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004e56:	2300      	movs	r3, #0
 8004e58:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004ea0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004ea4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004eac:	2300      	movs	r3, #0
 8004eae:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004ef2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004ef8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004efc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004f04:	2302      	movs	r3, #2
 8004f06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004f22:	2300      	movs	r3, #0
 8004f24:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f30:	4619      	mov	r1, r3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff fde6 	bl	8004b04 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004f52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f56:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004f5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f60:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004f68:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004f6e:	f107 0308 	add.w	r3, r7, #8
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fee1 	bl	8004d3c <ETH_SetDMAConfig>
}
 8004f7a:	bf00      	nop
 8004f7c:	3790      	adds	r7, #144	; 0x90
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e01d      	b.n	8004fcc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68d9      	ldr	r1, [r3, #12]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	440b      	add	r3, r1
 8004fa0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2200      	movs	r2, #0
 8004fac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	3206      	adds	r2, #6
 8004fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d9de      	bls.n	8004f90 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005004:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e023      	b.n	800506a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6919      	ldr	r1, [r3, #16]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	440b      	add	r3, r1
 8005032:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2200      	movs	r2, #0
 800503e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2200      	movs	r2, #0
 800504a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2200      	movs	r2, #0
 8005050:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2200      	movs	r2, #0
 8005056:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005058:	68b9      	ldr	r1, [r7, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	3212      	adds	r2, #18
 8005060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d9d8      	bls.n	8005022 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005096:	461a      	mov	r2, r3
 8005098:	2303      	movs	r3, #3
 800509a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050aa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050be:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b089      	sub	sp, #36	; 0x24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050de:	4b86      	ldr	r3, [pc, #536]	; (80052f8 <HAL_GPIO_Init+0x228>)
 80050e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050e2:	e18c      	b.n	80053fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	2101      	movs	r1, #1
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	fa01 f303 	lsl.w	r3, r1, r3
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 817e 	beq.w	80053f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d005      	beq.n	8005114 <HAL_GPIO_Init+0x44>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d130      	bne.n	8005176 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	2203      	movs	r2, #3
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800514a:	2201      	movs	r2, #1
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	f003 0201 	and.w	r2, r3, #1
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b03      	cmp	r3, #3
 8005180:	d017      	beq.n	80051b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	2203      	movs	r2, #3
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d123      	bne.n	8005206 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	08da      	lsrs	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3208      	adds	r2, #8
 80051c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	220f      	movs	r2, #15
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	08da      	lsrs	r2, r3, #3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3208      	adds	r2, #8
 8005200:	69b9      	ldr	r1, [r7, #24]
 8005202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	2203      	movs	r2, #3
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f003 0203 	and.w	r2, r3, #3
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 80d8 	beq.w	80053f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005248:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <HAL_GPIO_Init+0x22c>)
 800524a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800524e:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <HAL_GPIO_Init+0x22c>)
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005258:	4b28      	ldr	r3, [pc, #160]	; (80052fc <HAL_GPIO_Init+0x22c>)
 800525a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005266:	4a26      	ldr	r2, [pc, #152]	; (8005300 <HAL_GPIO_Init+0x230>)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	3302      	adds	r3, #2
 800526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	220f      	movs	r2, #15
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <HAL_GPIO_Init+0x234>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d04a      	beq.n	8005328 <HAL_GPIO_Init+0x258>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <HAL_GPIO_Init+0x238>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d02b      	beq.n	80052f2 <HAL_GPIO_Init+0x222>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1b      	ldr	r2, [pc, #108]	; (800530c <HAL_GPIO_Init+0x23c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d025      	beq.n	80052ee <HAL_GPIO_Init+0x21e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1a      	ldr	r2, [pc, #104]	; (8005310 <HAL_GPIO_Init+0x240>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01f      	beq.n	80052ea <HAL_GPIO_Init+0x21a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a19      	ldr	r2, [pc, #100]	; (8005314 <HAL_GPIO_Init+0x244>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d019      	beq.n	80052e6 <HAL_GPIO_Init+0x216>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a18      	ldr	r2, [pc, #96]	; (8005318 <HAL_GPIO_Init+0x248>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d013      	beq.n	80052e2 <HAL_GPIO_Init+0x212>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a17      	ldr	r2, [pc, #92]	; (800531c <HAL_GPIO_Init+0x24c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00d      	beq.n	80052de <HAL_GPIO_Init+0x20e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a16      	ldr	r2, [pc, #88]	; (8005320 <HAL_GPIO_Init+0x250>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <HAL_GPIO_Init+0x20a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a15      	ldr	r2, [pc, #84]	; (8005324 <HAL_GPIO_Init+0x254>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <HAL_GPIO_Init+0x206>
 80052d2:	2309      	movs	r3, #9
 80052d4:	e029      	b.n	800532a <HAL_GPIO_Init+0x25a>
 80052d6:	230a      	movs	r3, #10
 80052d8:	e027      	b.n	800532a <HAL_GPIO_Init+0x25a>
 80052da:	2307      	movs	r3, #7
 80052dc:	e025      	b.n	800532a <HAL_GPIO_Init+0x25a>
 80052de:	2306      	movs	r3, #6
 80052e0:	e023      	b.n	800532a <HAL_GPIO_Init+0x25a>
 80052e2:	2305      	movs	r3, #5
 80052e4:	e021      	b.n	800532a <HAL_GPIO_Init+0x25a>
 80052e6:	2304      	movs	r3, #4
 80052e8:	e01f      	b.n	800532a <HAL_GPIO_Init+0x25a>
 80052ea:	2303      	movs	r3, #3
 80052ec:	e01d      	b.n	800532a <HAL_GPIO_Init+0x25a>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e01b      	b.n	800532a <HAL_GPIO_Init+0x25a>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e019      	b.n	800532a <HAL_GPIO_Init+0x25a>
 80052f6:	bf00      	nop
 80052f8:	58000080 	.word	0x58000080
 80052fc:	58024400 	.word	0x58024400
 8005300:	58000400 	.word	0x58000400
 8005304:	58020000 	.word	0x58020000
 8005308:	58020400 	.word	0x58020400
 800530c:	58020800 	.word	0x58020800
 8005310:	58020c00 	.word	0x58020c00
 8005314:	58021000 	.word	0x58021000
 8005318:	58021400 	.word	0x58021400
 800531c:	58021800 	.word	0x58021800
 8005320:	58021c00 	.word	0x58021c00
 8005324:	58022400 	.word	0x58022400
 8005328:	2300      	movs	r3, #0
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	f002 0203 	and.w	r2, r2, #3
 8005330:	0092      	lsls	r2, r2, #2
 8005332:	4093      	lsls	r3, r2
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4313      	orrs	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800533a:	4938      	ldr	r1, [pc, #224]	; (800541c <HAL_GPIO_Init+0x34c>)
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	3302      	adds	r3, #2
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	43db      	mvns	r3, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4013      	ands	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800536e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	43db      	mvns	r3, r3
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4013      	ands	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800539c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	3301      	adds	r3, #1
 80053fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	f47f ae6b 	bne.w	80050e4 <HAL_GPIO_Init+0x14>
  }
}
 800540e:	bf00      	nop
 8005410:	bf00      	nop
 8005412:	3724      	adds	r7, #36	; 0x24
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	58000400 	.word	0x58000400

08005420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	807b      	strh	r3, [r7, #2]
 800542c:	4613      	mov	r3, r2
 800542e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005430:	787b      	ldrb	r3, [r7, #1]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005436:	887a      	ldrh	r2, [r7, #2]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800543c:	e003      	b.n	8005446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800543e:	887b      	ldrh	r3, [r7, #2]
 8005440:	041a      	lsls	r2, r3, #16
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	619a      	str	r2, [r3, #24]
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005452:	b480      	push	{r7}
 8005454:	b085      	sub	sp, #20
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005464:	887a      	ldrh	r2, [r7, #2]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4013      	ands	r3, r2
 800546a:	041a      	lsls	r2, r3, #16
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	43d9      	mvns	r1, r3
 8005470:	887b      	ldrh	r3, [r7, #2]
 8005472:	400b      	ands	r3, r1
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	619a      	str	r2, [r3, #24]
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	4603      	mov	r3, r0
 800548e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005494:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 f804 	bl	80054ba <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	4603      	mov	r3, r0
 80054c2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80054d8:	4b19      	ldr	r3, [pc, #100]	; (8005540 <HAL_PWREx_ConfigSupply+0x70>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d00a      	beq.n	80054fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80054e4:	4b16      	ldr	r3, [pc, #88]	; (8005540 <HAL_PWREx_ConfigSupply+0x70>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d001      	beq.n	80054f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e01f      	b.n	8005536 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e01d      	b.n	8005536 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_PWREx_ConfigSupply+0x70>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f023 0207 	bic.w	r2, r3, #7
 8005502:	490f      	ldr	r1, [pc, #60]	; (8005540 <HAL_PWREx_ConfigSupply+0x70>)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4313      	orrs	r3, r2
 8005508:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800550a:	f7fc fa31 	bl	8001970 <HAL_GetTick>
 800550e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005510:	e009      	b.n	8005526 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005512:	f7fc fa2d 	bl	8001970 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005520:	d901      	bls.n	8005526 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e007      	b.n	8005536 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <HAL_PWREx_ConfigSupply+0x70>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800552e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005532:	d1ee      	bne.n	8005512 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	58024800 	.word	0x58024800

08005544 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08c      	sub	sp, #48	; 0x30
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e3c8      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8087 	beq.w	8005672 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005564:	4b88      	ldr	r3, [pc, #544]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800556e:	4b86      	ldr	r3, [pc, #536]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	2b10      	cmp	r3, #16
 8005578:	d007      	beq.n	800558a <HAL_RCC_OscConfig+0x46>
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	2b18      	cmp	r3, #24
 800557e:	d110      	bne.n	80055a2 <HAL_RCC_OscConfig+0x5e>
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d10b      	bne.n	80055a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800558a:	4b7f      	ldr	r3, [pc, #508]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d06c      	beq.n	8005670 <HAL_RCC_OscConfig+0x12c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d168      	bne.n	8005670 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e3a2      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055aa:	d106      	bne.n	80055ba <HAL_RCC_OscConfig+0x76>
 80055ac:	4b76      	ldr	r3, [pc, #472]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a75      	ldr	r2, [pc, #468]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80055b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	e02e      	b.n	8005618 <HAL_RCC_OscConfig+0xd4>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10c      	bne.n	80055dc <HAL_RCC_OscConfig+0x98>
 80055c2:	4b71      	ldr	r3, [pc, #452]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a70      	ldr	r2, [pc, #448]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80055c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	4b6e      	ldr	r3, [pc, #440]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a6d      	ldr	r2, [pc, #436]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80055d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e01d      	b.n	8005618 <HAL_RCC_OscConfig+0xd4>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055e4:	d10c      	bne.n	8005600 <HAL_RCC_OscConfig+0xbc>
 80055e6:	4b68      	ldr	r3, [pc, #416]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a67      	ldr	r2, [pc, #412]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80055ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	4b65      	ldr	r3, [pc, #404]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a64      	ldr	r2, [pc, #400]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e00b      	b.n	8005618 <HAL_RCC_OscConfig+0xd4>
 8005600:	4b61      	ldr	r3, [pc, #388]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a60      	ldr	r2, [pc, #384]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	4b5e      	ldr	r3, [pc, #376]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a5d      	ldr	r2, [pc, #372]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d013      	beq.n	8005648 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fc f9a6 	bl	8001970 <HAL_GetTick>
 8005624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005628:	f7fc f9a2 	bl	8001970 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e356      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800563a:	4b53      	ldr	r3, [pc, #332]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f0      	beq.n	8005628 <HAL_RCC_OscConfig+0xe4>
 8005646:	e014      	b.n	8005672 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fc f992 	bl	8001970 <HAL_GetTick>
 800564c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005650:	f7fc f98e 	bl	8001970 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b64      	cmp	r3, #100	; 0x64
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e342      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005662:	4b49      	ldr	r3, [pc, #292]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x10c>
 800566e:	e000      	b.n	8005672 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 808c 	beq.w	8005798 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005680:	4b41      	ldr	r3, [pc, #260]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005688:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800568a:	4b3f      	ldr	r3, [pc, #252]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <HAL_RCC_OscConfig+0x162>
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	2b18      	cmp	r3, #24
 800569a:	d137      	bne.n	800570c <HAL_RCC_OscConfig+0x1c8>
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d132      	bne.n	800570c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056a6:	4b38      	ldr	r3, [pc, #224]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_RCC_OscConfig+0x17a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e314      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056be:	4b32      	ldr	r3, [pc, #200]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 0219 	bic.w	r2, r3, #25
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	492f      	ldr	r1, [pc, #188]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fc f94e 	bl	8001970 <HAL_GetTick>
 80056d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d8:	f7fc f94a 	bl	8001970 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e2fe      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ea:	4b27      	ldr	r3, [pc, #156]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f6:	4b24      	ldr	r3, [pc, #144]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	061b      	lsls	r3, r3, #24
 8005704:	4920      	ldr	r1, [pc, #128]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800570a:	e045      	b.n	8005798 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d026      	beq.n	8005762 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005714:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f023 0219 	bic.w	r2, r3, #25
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4919      	ldr	r1, [pc, #100]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005722:	4313      	orrs	r3, r2
 8005724:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005726:	f7fc f923 	bl	8001970 <HAL_GetTick>
 800572a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800572e:	f7fc f91f 	bl	8001970 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e2d3      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005740:	4b11      	ldr	r3, [pc, #68]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800574c:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	061b      	lsls	r3, r3, #24
 800575a:	490b      	ldr	r1, [pc, #44]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 800575c:	4313      	orrs	r3, r2
 800575e:	604b      	str	r3, [r1, #4]
 8005760:	e01a      	b.n	8005798 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a08      	ldr	r2, [pc, #32]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576e:	f7fc f8ff 	bl	8001970 <HAL_GetTick>
 8005772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005774:	e00a      	b.n	800578c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005776:	f7fc f8fb 	bl	8001970 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d903      	bls.n	800578c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e2af      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
 8005788:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800578c:	4b96      	ldr	r3, [pc, #600]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ee      	bne.n	8005776 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d06a      	beq.n	800587a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057a4:	4b90      	ldr	r3, [pc, #576]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057ae:	4b8e      	ldr	r3, [pc, #568]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d007      	beq.n	80057ca <HAL_RCC_OscConfig+0x286>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b18      	cmp	r3, #24
 80057be:	d11b      	bne.n	80057f8 <HAL_RCC_OscConfig+0x2b4>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d116      	bne.n	80057f8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057ca:	4b87      	ldr	r3, [pc, #540]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_RCC_OscConfig+0x29e>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	2b80      	cmp	r3, #128	; 0x80
 80057dc:	d001      	beq.n	80057e2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e282      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057e2:	4b81      	ldr	r3, [pc, #516]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	061b      	lsls	r3, r3, #24
 80057f0:	497d      	ldr	r1, [pc, #500]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057f6:	e040      	b.n	800587a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d023      	beq.n	8005848 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005800:	4b79      	ldr	r3, [pc, #484]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a78      	ldr	r2, [pc, #480]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fc f8b0 	bl	8001970 <HAL_GetTick>
 8005810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005814:	f7fc f8ac 	bl	8001970 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e260      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005826:	4b70      	ldr	r3, [pc, #448]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005832:	4b6d      	ldr	r3, [pc, #436]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	061b      	lsls	r3, r3, #24
 8005840:	4969      	ldr	r1, [pc, #420]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005842:	4313      	orrs	r3, r2
 8005844:	60cb      	str	r3, [r1, #12]
 8005846:	e018      	b.n	800587a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005848:	4b67      	ldr	r3, [pc, #412]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a66      	ldr	r2, [pc, #408]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 800584e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fc f88c 	bl	8001970 <HAL_GetTick>
 8005858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800585c:	f7fc f888 	bl	8001970 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e23c      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800586e:	4b5e      	ldr	r3, [pc, #376]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d036      	beq.n	80058f4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d019      	beq.n	80058c2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588e:	4b56      	ldr	r3, [pc, #344]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005892:	4a55      	ldr	r2, [pc, #340]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589a:	f7fc f869 	bl	8001970 <HAL_GetTick>
 800589e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a2:	f7fc f865 	bl	8001970 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e219      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058b4:	4b4c      	ldr	r3, [pc, #304]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80058b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x35e>
 80058c0:	e018      	b.n	80058f4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c2:	4b49      	ldr	r3, [pc, #292]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80058c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c6:	4a48      	ldr	r2, [pc, #288]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ce:	f7fc f84f 	bl	8001970 <HAL_GetTick>
 80058d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d6:	f7fc f84b 	bl	8001970 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e1ff      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058e8:	4b3f      	ldr	r3, [pc, #252]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80058ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1f0      	bne.n	80058d6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d036      	beq.n	800596e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d019      	beq.n	800593c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005908:	4b37      	ldr	r3, [pc, #220]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a36      	ldr	r2, [pc, #216]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 800590e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005912:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005914:	f7fc f82c 	bl	8001970 <HAL_GetTick>
 8005918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800591c:	f7fc f828 	bl	8001970 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e1dc      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800592e:	4b2e      	ldr	r3, [pc, #184]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0x3d8>
 800593a:	e018      	b.n	800596e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800593c:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a29      	ldr	r2, [pc, #164]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005946:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005948:	f7fc f812 	bl	8001970 <HAL_GetTick>
 800594c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005950:	f7fc f80e 	bl	8001970 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e1c2      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005962:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f0      	bne.n	8005950 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8086 	beq.w	8005a88 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800597c:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <HAL_RCC_OscConfig+0x4a8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1a      	ldr	r2, [pc, #104]	; (80059ec <HAL_RCC_OscConfig+0x4a8>)
 8005982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005986:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005988:	f7fb fff2 	bl	8001970 <HAL_GetTick>
 800598c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005990:	f7fb ffee 	bl	8001970 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b64      	cmp	r3, #100	; 0x64
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e1a2      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <HAL_RCC_OscConfig+0x4a8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f0      	beq.n	8005990 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d106      	bne.n	80059c4 <HAL_RCC_OscConfig+0x480>
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	4a0b      	ldr	r2, [pc, #44]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6713      	str	r3, [r2, #112]	; 0x70
 80059c2:	e032      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d111      	bne.n	80059f0 <HAL_RCC_OscConfig+0x4ac>
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d0:	4a05      	ldr	r2, [pc, #20]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	6713      	str	r3, [r2, #112]	; 0x70
 80059d8:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059dc:	4a02      	ldr	r2, [pc, #8]	; (80059e8 <HAL_RCC_OscConfig+0x4a4>)
 80059de:	f023 0304 	bic.w	r3, r3, #4
 80059e2:	6713      	str	r3, [r2, #112]	; 0x70
 80059e4:	e021      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e6>
 80059e6:	bf00      	nop
 80059e8:	58024400 	.word	0x58024400
 80059ec:	58024800 	.word	0x58024800
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b05      	cmp	r3, #5
 80059f6:	d10c      	bne.n	8005a12 <HAL_RCC_OscConfig+0x4ce>
 80059f8:	4b83      	ldr	r3, [pc, #524]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 80059fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fc:	4a82      	ldr	r2, [pc, #520]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 80059fe:	f043 0304 	orr.w	r3, r3, #4
 8005a02:	6713      	str	r3, [r2, #112]	; 0x70
 8005a04:	4b80      	ldr	r3, [pc, #512]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a08:	4a7f      	ldr	r2, [pc, #508]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a10:	e00b      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e6>
 8005a12:	4b7d      	ldr	r3, [pc, #500]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	4a7c      	ldr	r2, [pc, #496]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005a18:	f023 0301 	bic.w	r3, r3, #1
 8005a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1e:	4b7a      	ldr	r3, [pc, #488]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a22:	4a79      	ldr	r2, [pc, #484]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005a24:	f023 0304 	bic.w	r3, r3, #4
 8005a28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d015      	beq.n	8005a5e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a32:	f7fb ff9d 	bl	8001970 <HAL_GetTick>
 8005a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a38:	e00a      	b.n	8005a50 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fb ff99 	bl	8001970 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e14b      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a50:	4b6d      	ldr	r3, [pc, #436]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0ee      	beq.n	8005a3a <HAL_RCC_OscConfig+0x4f6>
 8005a5c:	e014      	b.n	8005a88 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5e:	f7fb ff87 	bl	8001970 <HAL_GetTick>
 8005a62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a64:	e00a      	b.n	8005a7c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a66:	f7fb ff83 	bl	8001970 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e135      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a7c:	4b62      	ldr	r3, [pc, #392]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ee      	bne.n	8005a66 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 812a 	beq.w	8005ce6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a92:	4b5d      	ldr	r3, [pc, #372]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a9a:	2b18      	cmp	r3, #24
 8005a9c:	f000 80ba 	beq.w	8005c14 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	f040 8095 	bne.w	8005bd4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aaa:	4b57      	ldr	r3, [pc, #348]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a56      	ldr	r2, [pc, #344]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab6:	f7fb ff5b 	bl	8001970 <HAL_GetTick>
 8005aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005abe:	f7fb ff57 	bl	8001970 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e10b      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ad0:	4b4d      	ldr	r3, [pc, #308]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1f0      	bne.n	8005abe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005adc:	4b4a      	ldr	r3, [pc, #296]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ae0:	4b4a      	ldr	r3, [pc, #296]	; (8005c0c <HAL_RCC_OscConfig+0x6c8>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005aec:	0112      	lsls	r2, r2, #4
 8005aee:	430a      	orrs	r2, r1
 8005af0:	4945      	ldr	r1, [pc, #276]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	628b      	str	r3, [r1, #40]	; 0x28
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	3b01      	subs	r3, #1
 8005afc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b04:	3b01      	subs	r3, #1
 8005b06:	025b      	lsls	r3, r3, #9
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	3b01      	subs	r3, #1
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	061b      	lsls	r3, r3, #24
 8005b22:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b26:	4938      	ldr	r1, [pc, #224]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	4a35      	ldr	r2, [pc, #212]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b38:	4b33      	ldr	r3, [pc, #204]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3c:	4b34      	ldr	r3, [pc, #208]	; (8005c10 <HAL_RCC_OscConfig+0x6cc>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b44:	00d2      	lsls	r2, r2, #3
 8005b46:	4930      	ldr	r1, [pc, #192]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b4c:	4b2e      	ldr	r3, [pc, #184]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	f023 020c 	bic.w	r2, r3, #12
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	492b      	ldr	r1, [pc, #172]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b5e:	4b2a      	ldr	r3, [pc, #168]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	f023 0202 	bic.w	r2, r3, #2
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	4927      	ldr	r1, [pc, #156]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b70:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4a24      	ldr	r2, [pc, #144]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7c:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	4a21      	ldr	r2, [pc, #132]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b88:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	4a1e      	ldr	r2, [pc, #120]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005b94:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba0:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bac:	f7fb fee0 	bl	8001970 <HAL_GetTick>
 8005bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fb fedc 	bl	8001970 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e090      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x670>
 8005bd2:	e088      	b.n	8005ce6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a0b      	ldr	r2, [pc, #44]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7fb fec6 	bl	8001970 <HAL_GetTick>
 8005be4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be8:	f7fb fec2 	bl	8001970 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e076      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bfa:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_RCC_OscConfig+0x6c4>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x6a4>
 8005c06:	e06e      	b.n	8005ce6 <HAL_RCC_OscConfig+0x7a2>
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	fffffc0c 	.word	0xfffffc0c
 8005c10:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c14:	4b36      	ldr	r3, [pc, #216]	; (8005cf0 <HAL_RCC_OscConfig+0x7ac>)
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c1a:	4b35      	ldr	r3, [pc, #212]	; (8005cf0 <HAL_RCC_OscConfig+0x7ac>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d031      	beq.n	8005c8c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f003 0203 	and.w	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d12a      	bne.n	8005c8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	091b      	lsrs	r3, r3, #4
 8005c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d122      	bne.n	8005c8c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d11a      	bne.n	8005c8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	0a5b      	lsrs	r3, r3, #9
 8005c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d111      	bne.n	8005c8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d108      	bne.n	8005c8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	0e1b      	lsrs	r3, r3, #24
 8005c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e02b      	b.n	8005ce8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005c90:	4b17      	ldr	r3, [pc, #92]	; (8005cf0 <HAL_RCC_OscConfig+0x7ac>)
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	08db      	lsrs	r3, r3, #3
 8005c96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c9a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d01f      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005ca6:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <HAL_RCC_OscConfig+0x7ac>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	4a11      	ldr	r2, [pc, #68]	; (8005cf0 <HAL_RCC_OscConfig+0x7ac>)
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cb2:	f7fb fe5d 	bl	8001970 <HAL_GetTick>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005cb8:	bf00      	nop
 8005cba:	f7fb fe59 	bl	8001970 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d0f9      	beq.n	8005cba <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <HAL_RCC_OscConfig+0x7ac>)
 8005cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <HAL_RCC_OscConfig+0x7b0>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005cd2:	00d2      	lsls	r2, r2, #3
 8005cd4:	4906      	ldr	r1, [pc, #24]	; (8005cf0 <HAL_RCC_OscConfig+0x7ac>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <HAL_RCC_OscConfig+0x7ac>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <HAL_RCC_OscConfig+0x7ac>)
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3730      	adds	r7, #48	; 0x30
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	58024400 	.word	0x58024400
 8005cf4:	ffff0007 	.word	0xffff0007

08005cf8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e19c      	b.n	8006046 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d0c:	4b8a      	ldr	r3, [pc, #552]	; (8005f38 <HAL_RCC_ClockConfig+0x240>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d910      	bls.n	8005d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1a:	4b87      	ldr	r3, [pc, #540]	; (8005f38 <HAL_RCC_ClockConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 020f 	bic.w	r2, r3, #15
 8005d22:	4985      	ldr	r1, [pc, #532]	; (8005f38 <HAL_RCC_ClockConfig+0x240>)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2a:	4b83      	ldr	r3, [pc, #524]	; (8005f38 <HAL_RCC_ClockConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d001      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e184      	b.n	8006046 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	4b7b      	ldr	r3, [pc, #492]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d908      	bls.n	8005d6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d58:	4b78      	ldr	r3, [pc, #480]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	4975      	ldr	r1, [pc, #468]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d010      	beq.n	8005d98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	4b70      	ldr	r3, [pc, #448]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d908      	bls.n	8005d98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d86:	4b6d      	ldr	r3, [pc, #436]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	496a      	ldr	r1, [pc, #424]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699a      	ldr	r2, [r3, #24]
 8005da8:	4b64      	ldr	r3, [pc, #400]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d908      	bls.n	8005dc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005db4:	4b61      	ldr	r3, [pc, #388]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	495e      	ldr	r1, [pc, #376]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d010      	beq.n	8005df4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69da      	ldr	r2, [r3, #28]
 8005dd6:	4b59      	ldr	r3, [pc, #356]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d908      	bls.n	8005df4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005de2:	4b56      	ldr	r3, [pc, #344]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	4953      	ldr	r1, [pc, #332]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d010      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	4b4d      	ldr	r3, [pc, #308]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d908      	bls.n	8005e22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e10:	4b4a      	ldr	r3, [pc, #296]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	f023 020f 	bic.w	r2, r3, #15
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4947      	ldr	r1, [pc, #284]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d055      	beq.n	8005eda <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e2e:	4b43      	ldr	r3, [pc, #268]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	4940      	ldr	r1, [pc, #256]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d107      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e48:	4b3c      	ldr	r3, [pc, #240]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d121      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0f6      	b.n	8006046 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d107      	bne.n	8005e70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e60:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d115      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0ea      	b.n	8006046 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d107      	bne.n	8005e88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e78:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d109      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0de      	b.n	8006046 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e88:	4b2c      	ldr	r3, [pc, #176]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0d6      	b.n	8006046 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e98:	4b28      	ldr	r3, [pc, #160]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f023 0207 	bic.w	r2, r3, #7
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4925      	ldr	r1, [pc, #148]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eaa:	f7fb fd61 	bl	8001970 <HAL_GetTick>
 8005eae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb0:	e00a      	b.n	8005ec8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb2:	f7fb fd5d 	bl	8001970 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e0be      	b.n	8006046 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec8:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d1eb      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d010      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d208      	bcs.n	8005f08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef6:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f023 020f 	bic.w	r2, r3, #15
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	490e      	ldr	r1, [pc, #56]	; (8005f3c <HAL_RCC_ClockConfig+0x244>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <HAL_RCC_ClockConfig+0x240>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d214      	bcs.n	8005f40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f16:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <HAL_RCC_ClockConfig+0x240>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 020f 	bic.w	r2, r3, #15
 8005f1e:	4906      	ldr	r1, [pc, #24]	; (8005f38 <HAL_RCC_ClockConfig+0x240>)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f26:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <HAL_RCC_ClockConfig+0x240>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d005      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e086      	b.n	8006046 <HAL_RCC_ClockConfig+0x34e>
 8005f38:	52002000 	.word	0x52002000
 8005f3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d010      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	4b3f      	ldr	r3, [pc, #252]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d208      	bcs.n	8005f6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f5c:	4b3c      	ldr	r3, [pc, #240]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	4939      	ldr	r1, [pc, #228]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d010      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695a      	ldr	r2, [r3, #20]
 8005f7e:	4b34      	ldr	r3, [pc, #208]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d208      	bcs.n	8005f9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f8a:	4b31      	ldr	r3, [pc, #196]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	492e      	ldr	r1, [pc, #184]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d010      	beq.n	8005fca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	4b28      	ldr	r3, [pc, #160]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d208      	bcs.n	8005fca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005fb8:	4b25      	ldr	r3, [pc, #148]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	4922      	ldr	r1, [pc, #136]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d010      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69da      	ldr	r2, [r3, #28]
 8005fda:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d208      	bcs.n	8005ff8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fe6:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	4917      	ldr	r1, [pc, #92]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ff8:	f000 f834 	bl	8006064 <HAL_RCC_GetSysClockFreq>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	4b14      	ldr	r3, [pc, #80]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	4912      	ldr	r1, [pc, #72]	; (8006054 <HAL_RCC_ClockConfig+0x35c>)
 800600a:	5ccb      	ldrb	r3, [r1, r3]
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
 8006014:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006016:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <HAL_RCC_ClockConfig+0x358>)
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	4a0d      	ldr	r2, [pc, #52]	; (8006054 <HAL_RCC_ClockConfig+0x35c>)
 8006020:	5cd3      	ldrb	r3, [r2, r3]
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	fa22 f303 	lsr.w	r3, r2, r3
 800602c:	4a0a      	ldr	r2, [pc, #40]	; (8006058 <HAL_RCC_ClockConfig+0x360>)
 800602e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006030:	4a0a      	ldr	r2, [pc, #40]	; (800605c <HAL_RCC_ClockConfig+0x364>)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006036:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <HAL_RCC_ClockConfig+0x368>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f7fb fc4e 	bl	80018dc <HAL_InitTick>
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	58024400 	.word	0x58024400
 8006054:	0800b0d0 	.word	0x0800b0d0
 8006058:	24000004 	.word	0x24000004
 800605c:	24000000 	.word	0x24000000
 8006060:	24000008 	.word	0x24000008

08006064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006064:	b480      	push	{r7}
 8006066:	b089      	sub	sp, #36	; 0x24
 8006068:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800606a:	4bb3      	ldr	r3, [pc, #716]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006072:	2b18      	cmp	r3, #24
 8006074:	f200 8155 	bhi.w	8006322 <HAL_RCC_GetSysClockFreq+0x2be>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <HAL_RCC_GetSysClockFreq+0x1c>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	080060e5 	.word	0x080060e5
 8006084:	08006323 	.word	0x08006323
 8006088:	08006323 	.word	0x08006323
 800608c:	08006323 	.word	0x08006323
 8006090:	08006323 	.word	0x08006323
 8006094:	08006323 	.word	0x08006323
 8006098:	08006323 	.word	0x08006323
 800609c:	08006323 	.word	0x08006323
 80060a0:	0800610b 	.word	0x0800610b
 80060a4:	08006323 	.word	0x08006323
 80060a8:	08006323 	.word	0x08006323
 80060ac:	08006323 	.word	0x08006323
 80060b0:	08006323 	.word	0x08006323
 80060b4:	08006323 	.word	0x08006323
 80060b8:	08006323 	.word	0x08006323
 80060bc:	08006323 	.word	0x08006323
 80060c0:	08006111 	.word	0x08006111
 80060c4:	08006323 	.word	0x08006323
 80060c8:	08006323 	.word	0x08006323
 80060cc:	08006323 	.word	0x08006323
 80060d0:	08006323 	.word	0x08006323
 80060d4:	08006323 	.word	0x08006323
 80060d8:	08006323 	.word	0x08006323
 80060dc:	08006323 	.word	0x08006323
 80060e0:	08006117 	.word	0x08006117
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060e4:	4b94      	ldr	r3, [pc, #592]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d009      	beq.n	8006104 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060f0:	4b91      	ldr	r3, [pc, #580]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	08db      	lsrs	r3, r3, #3
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	4a90      	ldr	r2, [pc, #576]	; (800633c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006100:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006102:	e111      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006104:	4b8d      	ldr	r3, [pc, #564]	; (800633c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006106:	61bb      	str	r3, [r7, #24]
      break;
 8006108:	e10e      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800610a:	4b8d      	ldr	r3, [pc, #564]	; (8006340 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800610c:	61bb      	str	r3, [r7, #24]
      break;
 800610e:	e10b      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006110:	4b8c      	ldr	r3, [pc, #560]	; (8006344 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006112:	61bb      	str	r3, [r7, #24]
      break;
 8006114:	e108      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006116:	4b88      	ldr	r3, [pc, #544]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006120:	4b85      	ldr	r3, [pc, #532]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	091b      	lsrs	r3, r3, #4
 8006126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800612a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800612c:	4b82      	ldr	r3, [pc, #520]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006136:	4b80      	ldr	r3, [pc, #512]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613a:	08db      	lsrs	r3, r3, #3
 800613c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	fb02 f303 	mul.w	r3, r2, r3
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80e1 	beq.w	800631c <HAL_RCC_GetSysClockFreq+0x2b8>
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b02      	cmp	r3, #2
 800615e:	f000 8083 	beq.w	8006268 <HAL_RCC_GetSysClockFreq+0x204>
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b02      	cmp	r3, #2
 8006166:	f200 80a1 	bhi.w	80062ac <HAL_RCC_GetSysClockFreq+0x248>
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_RCC_GetSysClockFreq+0x114>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d056      	beq.n	8006224 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006176:	e099      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006178:	4b6f      	ldr	r3, [pc, #444]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02d      	beq.n	80061e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006184:	4b6c      	ldr	r3, [pc, #432]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	08db      	lsrs	r3, r3, #3
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	4a6b      	ldr	r2, [pc, #428]	; (800633c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
 8006194:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	ee07 3a90 	vmov	s15, r3
 800619c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ae:	4b62      	ldr	r3, [pc, #392]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061be:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80061de:	e087      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800634c <HAL_RCC_GetSysClockFreq+0x2e8>
 80061ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f2:	4b51      	ldr	r3, [pc, #324]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006202:	ed97 6a02 	vldr	s12, [r7, #8]
 8006206:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2e4>
 800620a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800620e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800621e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006222:	e065      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006350 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006236:	4b40      	ldr	r3, [pc, #256]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006246:	ed97 6a02 	vldr	s12, [r7, #8]
 800624a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2e4>
 800624e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006266:	e043      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006354 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627a:	4b2f      	ldr	r3, [pc, #188]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628a:	ed97 6a02 	vldr	s12, [r7, #8]
 800628e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062aa:	e021      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006350 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062be:	4b1e      	ldr	r3, [pc, #120]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80062d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	0a5b      	lsrs	r3, r3, #9
 80062f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062fa:	3301      	adds	r3, #1
 80062fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006308:	edd7 6a07 	vldr	s13, [r7, #28]
 800630c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006314:	ee17 3a90 	vmov	r3, s15
 8006318:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800631a:	e005      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	61bb      	str	r3, [r7, #24]
      break;
 8006320:	e002      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006322:	4b07      	ldr	r3, [pc, #28]	; (8006340 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006324:	61bb      	str	r3, [r7, #24]
      break;
 8006326:	bf00      	nop
  }

  return sysclockfreq;
 8006328:	69bb      	ldr	r3, [r7, #24]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3724      	adds	r7, #36	; 0x24
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	58024400 	.word	0x58024400
 800633c:	03d09000 	.word	0x03d09000
 8006340:	003d0900 	.word	0x003d0900
 8006344:	007a1200 	.word	0x007a1200
 8006348:	46000000 	.word	0x46000000
 800634c:	4c742400 	.word	0x4c742400
 8006350:	4a742400 	.word	0x4a742400
 8006354:	4af42400 	.word	0x4af42400

08006358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800635e:	f7ff fe81 	bl	8006064 <HAL_RCC_GetSysClockFreq>
 8006362:	4602      	mov	r2, r0
 8006364:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	0a1b      	lsrs	r3, r3, #8
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	490f      	ldr	r1, [pc, #60]	; (80063ac <HAL_RCC_GetHCLKFreq+0x54>)
 8006370:	5ccb      	ldrb	r3, [r1, r3]
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	fa22 f303 	lsr.w	r3, r2, r3
 800637a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	4a09      	ldr	r2, [pc, #36]	; (80063ac <HAL_RCC_GetHCLKFreq+0x54>)
 8006386:	5cd3      	ldrb	r3, [r2, r3]
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006394:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006396:	4a07      	ldr	r2, [pc, #28]	; (80063b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800639c:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800639e:	681b      	ldr	r3, [r3, #0]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	58024400 	.word	0x58024400
 80063ac:	0800b0d0 	.word	0x0800b0d0
 80063b0:	24000004 	.word	0x24000004
 80063b4:	24000000 	.word	0x24000000

080063b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80063bc:	f7ff ffcc 	bl	8006358 <HAL_RCC_GetHCLKFreq>
 80063c0:	4602      	mov	r2, r0
 80063c2:	4b06      	ldr	r3, [pc, #24]	; (80063dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	091b      	lsrs	r3, r3, #4
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	4904      	ldr	r1, [pc, #16]	; (80063e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063ce:	5ccb      	ldrb	r3, [r1, r3]
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80063d8:	4618      	mov	r0, r3
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	58024400 	.word	0x58024400
 80063e0:	0800b0d0 	.word	0x0800b0d0

080063e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80063e8:	f7ff ffb6 	bl	8006358 <HAL_RCC_GetHCLKFreq>
 80063ec:	4602      	mov	r2, r0
 80063ee:	4b06      	ldr	r3, [pc, #24]	; (8006408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	0a1b      	lsrs	r3, r3, #8
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	4904      	ldr	r1, [pc, #16]	; (800640c <HAL_RCC_GetPCLK2Freq+0x28>)
 80063fa:	5ccb      	ldrb	r3, [r1, r3]
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006404:	4618      	mov	r0, r3
 8006406:	bd80      	pop	{r7, pc}
 8006408:	58024400 	.word	0x58024400
 800640c:	0800b0d0 	.word	0x0800b0d0

08006410 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006414:	b0c6      	sub	sp, #280	; 0x118
 8006416:	af00      	add	r7, sp, #0
 8006418:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800641c:	2300      	movs	r3, #0
 800641e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006422:	2300      	movs	r3, #0
 8006424:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006434:	2500      	movs	r5, #0
 8006436:	ea54 0305 	orrs.w	r3, r4, r5
 800643a:	d049      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800643c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006442:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006446:	d02f      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800644c:	d828      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800644e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006452:	d01a      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006458:	d822      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800645e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006462:	d007      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006464:	e01c      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006466:	4bab      	ldr	r3, [pc, #684]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	4aaa      	ldr	r2, [pc, #680]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800646c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006470:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006472:	e01a      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006478:	3308      	adds	r3, #8
 800647a:	2102      	movs	r1, #2
 800647c:	4618      	mov	r0, r3
 800647e:	f001 fc25 	bl	8007ccc <RCCEx_PLL2_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006488:	e00f      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648e:	3328      	adds	r3, #40	; 0x28
 8006490:	2102      	movs	r1, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f001 fccc 	bl	8007e30 <RCCEx_PLL3_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800649e:	e004      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064a6:	e000      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80064a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80064b2:	4b98      	ldr	r3, [pc, #608]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c0:	4a94      	ldr	r2, [pc, #592]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064c2:	430b      	orrs	r3, r1
 80064c4:	6513      	str	r3, [r2, #80]	; 0x50
 80064c6:	e003      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80064dc:	f04f 0900 	mov.w	r9, #0
 80064e0:	ea58 0309 	orrs.w	r3, r8, r9
 80064e4:	d047      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d82a      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80064f0:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	0800650d 	.word	0x0800650d
 80064fc:	0800651b 	.word	0x0800651b
 8006500:	08006531 	.word	0x08006531
 8006504:	0800654f 	.word	0x0800654f
 8006508:	0800654f 	.word	0x0800654f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650c:	4b81      	ldr	r3, [pc, #516]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4a80      	ldr	r2, [pc, #512]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006518:	e01a      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800651a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651e:	3308      	adds	r3, #8
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fbd2 	bl	8007ccc <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800652e:	e00f      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006534:	3328      	adds	r3, #40	; 0x28
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f001 fc79 	bl	8007e30 <RCCEx_PLL3_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006544:	e004      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800654c:	e000      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800654e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006550:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006558:	4b6e      	ldr	r3, [pc, #440]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800655a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655c:	f023 0107 	bic.w	r1, r3, #7
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006566:	4a6b      	ldr	r2, [pc, #428]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006568:	430b      	orrs	r3, r1
 800656a:	6513      	str	r3, [r2, #80]	; 0x50
 800656c:	e003      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006572:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006582:	f04f 0b00 	mov.w	fp, #0
 8006586:	ea5a 030b 	orrs.w	r3, sl, fp
 800658a:	d05b      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006594:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006598:	d03b      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800659a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800659e:	d834      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80065a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065a4:	d037      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80065a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065aa:	d82e      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80065ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065b0:	d033      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80065b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065b6:	d828      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80065b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065bc:	d01a      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80065be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c2:	d822      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80065c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065cc:	d007      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80065ce:	e01c      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d0:	4b50      	ldr	r3, [pc, #320]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	4a4f      	ldr	r2, [pc, #316]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065dc:	e01e      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e2:	3308      	adds	r3, #8
 80065e4:	2100      	movs	r1, #0
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fb70 	bl	8007ccc <RCCEx_PLL2_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80065f2:	e013      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f8:	3328      	adds	r3, #40	; 0x28
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 fc17 	bl	8007e30 <RCCEx_PLL3_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006608:	e008      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006610:	e004      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006612:	bf00      	nop
 8006614:	e002      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800661a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006624:	4b3b      	ldr	r3, [pc, #236]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006628:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006634:	4a37      	ldr	r2, [pc, #220]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006636:	430b      	orrs	r3, r1
 8006638:	6593      	str	r3, [r2, #88]	; 0x58
 800663a:	e003      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006640:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006650:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800665a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800665e:	460b      	mov	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	d05d      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006668:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800666c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006670:	d03b      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006672:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006676:	d834      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800667c:	d037      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800667e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006682:	d82e      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006684:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006688:	d033      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800668a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800668e:	d828      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006694:	d01a      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800669a:	d822      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80066a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066a4:	d007      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80066a6:	e01c      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a8:	4b1a      	ldr	r3, [pc, #104]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066b4:	e01e      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	3308      	adds	r3, #8
 80066bc:	2100      	movs	r1, #0
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 fb04 	bl	8007ccc <RCCEx_PLL2_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80066ca:	e013      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d0:	3328      	adds	r3, #40	; 0x28
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 fbab 	bl	8007e30 <RCCEx_PLL3_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066e0:	e008      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80066e8:	e004      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80066f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10d      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006700:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800670c:	4a01      	ldr	r2, [pc, #4]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800670e:	430b      	orrs	r3, r1
 8006710:	6593      	str	r3, [r2, #88]	; 0x58
 8006712:	e005      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006714:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006718:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800671c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800672c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006730:	2300      	movs	r3, #0
 8006732:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006736:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800673a:	460b      	mov	r3, r1
 800673c:	4313      	orrs	r3, r2
 800673e:	d03a      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006746:	2b30      	cmp	r3, #48	; 0x30
 8006748:	d01f      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800674a:	2b30      	cmp	r3, #48	; 0x30
 800674c:	d819      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800674e:	2b20      	cmp	r3, #32
 8006750:	d00c      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006752:	2b20      	cmp	r3, #32
 8006754:	d815      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d019      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800675a:	2b10      	cmp	r3, #16
 800675c:	d111      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800675e:	4baa      	ldr	r3, [pc, #680]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	4aa9      	ldr	r2, [pc, #676]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800676a:	e011      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800676c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006770:	3308      	adds	r3, #8
 8006772:	2102      	movs	r1, #2
 8006774:	4618      	mov	r0, r3
 8006776:	f001 faa9 	bl	8007ccc <RCCEx_PLL2_Config>
 800677a:	4603      	mov	r3, r0
 800677c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006780:	e006      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006788:	e002      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800678a:	bf00      	nop
 800678c:	e000      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800678e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006790:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006798:	4b9b      	ldr	r3, [pc, #620]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a6:	4a98      	ldr	r2, [pc, #608]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067a8:	430b      	orrs	r3, r1
 80067aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067ac:	e003      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80067b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80067c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067c6:	2300      	movs	r3, #0
 80067c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80067d0:	460b      	mov	r3, r1
 80067d2:	4313      	orrs	r3, r2
 80067d4:	d051      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067e0:	d035      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80067e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067e6:	d82e      	bhi.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80067e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067ec:	d031      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80067ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067f2:	d828      	bhi.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80067f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f8:	d01a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80067fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fe:	d822      	bhi.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006808:	d007      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800680a:	e01c      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680c:	4b7e      	ldr	r3, [pc, #504]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	4a7d      	ldr	r2, [pc, #500]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006818:	e01c      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800681a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681e:	3308      	adds	r3, #8
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f001 fa52 	bl	8007ccc <RCCEx_PLL2_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800682e:	e011      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006834:	3328      	adds	r3, #40	; 0x28
 8006836:	2100      	movs	r1, #0
 8006838:	4618      	mov	r0, r3
 800683a:	f001 faf9 	bl	8007e30 <RCCEx_PLL3_Config>
 800683e:	4603      	mov	r3, r0
 8006840:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006844:	e006      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800684c:	e002      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800684e:	bf00      	nop
 8006850:	e000      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006854:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800685c:	4b6a      	ldr	r3, [pc, #424]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800685e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006860:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686a:	4a67      	ldr	r2, [pc, #412]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800686c:	430b      	orrs	r3, r1
 800686e:	6513      	str	r3, [r2, #80]	; 0x50
 8006870:	e003      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006872:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006876:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006886:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800688a:	2300      	movs	r3, #0
 800688c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006890:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006894:	460b      	mov	r3, r1
 8006896:	4313      	orrs	r3, r2
 8006898:	d053      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068a4:	d033      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80068a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068aa:	d82c      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80068ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068b0:	d02f      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80068b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068b6:	d826      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80068b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068bc:	d02b      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80068be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068c2:	d820      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80068c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068c8:	d012      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80068ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ce:	d81a      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d022      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80068d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d8:	d115      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068de:	3308      	adds	r3, #8
 80068e0:	2101      	movs	r1, #1
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 f9f2 	bl	8007ccc <RCCEx_PLL2_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80068ee:	e015      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f4:	3328      	adds	r3, #40	; 0x28
 80068f6:	2101      	movs	r1, #1
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 fa99 	bl	8007e30 <RCCEx_PLL3_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006904:	e00a      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800690c:	e006      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800690e:	bf00      	nop
 8006910:	e004      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006912:	bf00      	nop
 8006914:	e002      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006916:	bf00      	nop
 8006918:	e000      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800691a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006924:	4b38      	ldr	r3, [pc, #224]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800692c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006932:	4a35      	ldr	r2, [pc, #212]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006934:	430b      	orrs	r3, r1
 8006936:	6513      	str	r3, [r2, #80]	; 0x50
 8006938:	e003      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800693e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800694e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006952:	2300      	movs	r3, #0
 8006954:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006958:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800695c:	460b      	mov	r3, r1
 800695e:	4313      	orrs	r3, r2
 8006960:	d058      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006966:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800696a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800696e:	d033      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006974:	d82c      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697a:	d02f      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800697c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006980:	d826      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006986:	d02b      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006988:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800698c:	d820      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800698e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006992:	d012      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006998:	d81a      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d022      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800699e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069a2:	d115      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	3308      	adds	r3, #8
 80069aa:	2101      	movs	r1, #1
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 f98d 	bl	8007ccc <RCCEx_PLL2_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80069b8:	e015      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069be:	3328      	adds	r3, #40	; 0x28
 80069c0:	2101      	movs	r1, #1
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 fa34 	bl	8007e30 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80069ce:	e00a      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069d6:	e006      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80069d8:	bf00      	nop
 80069da:	e004      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80069dc:	bf00      	nop
 80069de:	e002      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80069e0:	bf00      	nop
 80069e2:	e000      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80069e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10e      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80069ee:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069fe:	4a02      	ldr	r2, [pc, #8]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6593      	str	r3, [r2, #88]	; 0x58
 8006a04:	e006      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006a06:	bf00      	nop
 8006a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a24:	2300      	movs	r3, #0
 8006a26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006a2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4313      	orrs	r3, r2
 8006a32:	d037      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3e:	d00e      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a44:	d816      	bhi.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d018      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a4e:	d111      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a50:	4bc4      	ldr	r3, [pc, #784]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	4ac3      	ldr	r2, [pc, #780]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a5c:	e00f      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a62:	3308      	adds	r3, #8
 8006a64:	2101      	movs	r1, #1
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 f930 	bl	8007ccc <RCCEx_PLL2_Config>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a72:	e004      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a7a:	e000      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10a      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a86:	4bb7      	ldr	r3, [pc, #732]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a94:	4ab3      	ldr	r2, [pc, #716]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a96:	430b      	orrs	r3, r1
 8006a98:	6513      	str	r3, [r2, #80]	; 0x50
 8006a9a:	e003      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006aa0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006aba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d039      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d81c      	bhi.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006b11 	.word	0x08006b11
 8006ad8:	08006ae5 	.word	0x08006ae5
 8006adc:	08006af3 	.word	0x08006af3
 8006ae0:	08006b11 	.word	0x08006b11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae4:	4b9f      	ldr	r3, [pc, #636]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	4a9e      	ldr	r2, [pc, #632]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006af0:	e00f      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af6:	3308      	adds	r3, #8
 8006af8:	2102      	movs	r1, #2
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 f8e6 	bl	8007ccc <RCCEx_PLL2_Config>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b06:	e004      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b0e:	e000      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b1a:	4b92      	ldr	r3, [pc, #584]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1e:	f023 0103 	bic.w	r1, r3, #3
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b28:	4a8e      	ldr	r2, [pc, #568]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b2e:	e003      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f000 8099 	beq.w	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b5a:	4b83      	ldr	r3, [pc, #524]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a82      	ldr	r2, [pc, #520]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b66:	f7fa ff03 	bl	8001970 <HAL_GetTick>
 8006b6a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b6e:	e00b      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b70:	f7fa fefe 	bl	8001970 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b64      	cmp	r3, #100	; 0x64
 8006b7e:	d903      	bls.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b86:	e005      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b88:	4b77      	ldr	r3, [pc, #476]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0ed      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006b94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d173      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006b9c:	4b71      	ldr	r3, [pc, #452]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ba8:	4053      	eors	r3, r2
 8006baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d015      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bb2:	4b6c      	ldr	r3, [pc, #432]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bbe:	4b69      	ldr	r3, [pc, #420]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc2:	4a68      	ldr	r2, [pc, #416]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bca:	4b66      	ldr	r3, [pc, #408]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	4a65      	ldr	r2, [pc, #404]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006bd6:	4a63      	ldr	r2, [pc, #396]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bdc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bea:	d118      	bne.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bec:	f7fa fec0 	bl	8001970 <HAL_GetTick>
 8006bf0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bf4:	e00d      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf6:	f7fa febb 	bl	8001970 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006c00:	1ad2      	subs	r2, r2, r3
 8006c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d903      	bls.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006c10:	e005      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c12:	4b54      	ldr	r3, [pc, #336]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0eb      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006c1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d129      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c36:	d10e      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006c38:	4b4a      	ldr	r3, [pc, #296]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c48:	091a      	lsrs	r2, r3, #4
 8006c4a:	4b48      	ldr	r3, [pc, #288]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	4a45      	ldr	r2, [pc, #276]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6113      	str	r3, [r2, #16]
 8006c54:	e005      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006c56:	4b43      	ldr	r3, [pc, #268]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	4a42      	ldr	r2, [pc, #264]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c60:	6113      	str	r3, [r2, #16]
 8006c62:	4b40      	ldr	r3, [pc, #256]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c64:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c72:	4a3c      	ldr	r2, [pc, #240]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c74:	430b      	orrs	r3, r1
 8006c76:	6713      	str	r3, [r2, #112]	; 0x70
 8006c78:	e008      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006c82:	e003      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	f002 0301 	and.w	r3, r2, #1
 8006c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ca2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f000 808f 	beq.w	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cb4:	2b28      	cmp	r3, #40	; 0x28
 8006cb6:	d871      	bhi.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006da5 	.word	0x08006da5
 8006cc4:	08006d9d 	.word	0x08006d9d
 8006cc8:	08006d9d 	.word	0x08006d9d
 8006ccc:	08006d9d 	.word	0x08006d9d
 8006cd0:	08006d9d 	.word	0x08006d9d
 8006cd4:	08006d9d 	.word	0x08006d9d
 8006cd8:	08006d9d 	.word	0x08006d9d
 8006cdc:	08006d9d 	.word	0x08006d9d
 8006ce0:	08006d71 	.word	0x08006d71
 8006ce4:	08006d9d 	.word	0x08006d9d
 8006ce8:	08006d9d 	.word	0x08006d9d
 8006cec:	08006d9d 	.word	0x08006d9d
 8006cf0:	08006d9d 	.word	0x08006d9d
 8006cf4:	08006d9d 	.word	0x08006d9d
 8006cf8:	08006d9d 	.word	0x08006d9d
 8006cfc:	08006d9d 	.word	0x08006d9d
 8006d00:	08006d87 	.word	0x08006d87
 8006d04:	08006d9d 	.word	0x08006d9d
 8006d08:	08006d9d 	.word	0x08006d9d
 8006d0c:	08006d9d 	.word	0x08006d9d
 8006d10:	08006d9d 	.word	0x08006d9d
 8006d14:	08006d9d 	.word	0x08006d9d
 8006d18:	08006d9d 	.word	0x08006d9d
 8006d1c:	08006d9d 	.word	0x08006d9d
 8006d20:	08006da5 	.word	0x08006da5
 8006d24:	08006d9d 	.word	0x08006d9d
 8006d28:	08006d9d 	.word	0x08006d9d
 8006d2c:	08006d9d 	.word	0x08006d9d
 8006d30:	08006d9d 	.word	0x08006d9d
 8006d34:	08006d9d 	.word	0x08006d9d
 8006d38:	08006d9d 	.word	0x08006d9d
 8006d3c:	08006d9d 	.word	0x08006d9d
 8006d40:	08006da5 	.word	0x08006da5
 8006d44:	08006d9d 	.word	0x08006d9d
 8006d48:	08006d9d 	.word	0x08006d9d
 8006d4c:	08006d9d 	.word	0x08006d9d
 8006d50:	08006d9d 	.word	0x08006d9d
 8006d54:	08006d9d 	.word	0x08006d9d
 8006d58:	08006d9d 	.word	0x08006d9d
 8006d5c:	08006d9d 	.word	0x08006d9d
 8006d60:	08006da5 	.word	0x08006da5
 8006d64:	58024400 	.word	0x58024400
 8006d68:	58024800 	.word	0x58024800
 8006d6c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d74:	3308      	adds	r3, #8
 8006d76:	2101      	movs	r1, #1
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 ffa7 	bl	8007ccc <RCCEx_PLL2_Config>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d84:	e00f      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8a:	3328      	adds	r3, #40	; 0x28
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 f84e 	bl	8007e30 <RCCEx_PLL3_Config>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d9a:	e004      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006da2:	e000      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006dae:	4bbf      	ldr	r3, [pc, #764]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dbc:	4abb      	ldr	r2, [pc, #748]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	6553      	str	r3, [r2, #84]	; 0x54
 8006dc2:	e003      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f002 0302 	and.w	r3, r2, #2
 8006dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006de2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4313      	orrs	r3, r2
 8006dea:	d041      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df2:	2b05      	cmp	r3, #5
 8006df4:	d824      	bhi.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006df6:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e49 	.word	0x08006e49
 8006e00:	08006e15 	.word	0x08006e15
 8006e04:	08006e2b 	.word	0x08006e2b
 8006e08:	08006e49 	.word	0x08006e49
 8006e0c:	08006e49 	.word	0x08006e49
 8006e10:	08006e49 	.word	0x08006e49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e18:	3308      	adds	r3, #8
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 ff55 	bl	8007ccc <RCCEx_PLL2_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e28:	e00f      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	3328      	adds	r3, #40	; 0x28
 8006e30:	2101      	movs	r1, #1
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fffc 	bl	8007e30 <RCCEx_PLL3_Config>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e3e:	e004      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e46:	e000      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e52:	4b96      	ldr	r3, [pc, #600]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	f023 0107 	bic.w	r1, r3, #7
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e60:	4a92      	ldr	r2, [pc, #584]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e62:	430b      	orrs	r3, r1
 8006e64:	6553      	str	r3, [r2, #84]	; 0x54
 8006e66:	e003      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f002 0304 	and.w	r3, r2, #4
 8006e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e80:	2300      	movs	r3, #0
 8006e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e86:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	d044      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e98:	2b05      	cmp	r3, #5
 8006e9a:	d825      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006ef1 	.word	0x08006ef1
 8006ea8:	08006ebd 	.word	0x08006ebd
 8006eac:	08006ed3 	.word	0x08006ed3
 8006eb0:	08006ef1 	.word	0x08006ef1
 8006eb4:	08006ef1 	.word	0x08006ef1
 8006eb8:	08006ef1 	.word	0x08006ef1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 ff01 	bl	8007ccc <RCCEx_PLL2_Config>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ed0:	e00f      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed6:	3328      	adds	r3, #40	; 0x28
 8006ed8:	2101      	movs	r1, #1
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 ffa8 	bl	8007e30 <RCCEx_PLL3_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ee6:	e004      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006eee:	e000      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006efa:	4b6c      	ldr	r3, [pc, #432]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efe:	f023 0107 	bic.w	r1, r3, #7
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0a:	4a68      	ldr	r2, [pc, #416]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f0c:	430b      	orrs	r3, r1
 8006f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8006f10:	e003      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	f002 0320 	and.w	r3, r2, #32
 8006f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4313      	orrs	r3, r2
 8006f38:	d055      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f46:	d033      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f4c:	d82c      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f52:	d02f      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f58:	d826      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006f5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f5e:	d02b      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006f60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f64:	d820      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f6a:	d012      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f70:	d81a      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d022      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f7a:	d115      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f80:	3308      	adds	r3, #8
 8006f82:	2100      	movs	r1, #0
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fea1 	bl	8007ccc <RCCEx_PLL2_Config>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f90:	e015      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f96:	3328      	adds	r3, #40	; 0x28
 8006f98:	2102      	movs	r1, #2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 ff48 	bl	8007e30 <RCCEx_PLL3_Config>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006fa6:	e00a      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006fae:	e006      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006fb0:	bf00      	nop
 8006fb2:	e004      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006fb4:	bf00      	nop
 8006fb6:	e002      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006fb8:	bf00      	nop
 8006fba:	e000      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10b      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fc6:	4b39      	ldr	r3, [pc, #228]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd6:	4a35      	ldr	r2, [pc, #212]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	6553      	str	r3, [r2, #84]	; 0x54
 8006fdc:	e003      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fe2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006ff2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ffc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007000:	460b      	mov	r3, r1
 8007002:	4313      	orrs	r3, r2
 8007004:	d058      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800700e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007012:	d033      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007014:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007018:	d82c      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701e:	d02f      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007024:	d826      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007026:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800702a:	d02b      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800702c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007030:	d820      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007036:	d012      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800703c:	d81a      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d022      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007046:	d115      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704c:	3308      	adds	r3, #8
 800704e:	2100      	movs	r1, #0
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fe3b 	bl	8007ccc <RCCEx_PLL2_Config>
 8007056:	4603      	mov	r3, r0
 8007058:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800705c:	e015      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800705e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007062:	3328      	adds	r3, #40	; 0x28
 8007064:	2102      	movs	r1, #2
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fee2 	bl	8007e30 <RCCEx_PLL3_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007072:	e00a      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800707a:	e006      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800707c:	bf00      	nop
 800707e:	e004      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007080:	bf00      	nop
 8007082:	e002      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800708a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10e      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070a2:	4a02      	ldr	r2, [pc, #8]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6593      	str	r3, [r2, #88]	; 0x58
 80070a8:	e006      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80070b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80070c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070c8:	2300      	movs	r3, #0
 80070ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80070d2:	460b      	mov	r3, r1
 80070d4:	4313      	orrs	r3, r2
 80070d6:	d055      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80070e4:	d033      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80070e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80070ea:	d82c      	bhi.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80070ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f0:	d02f      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80070f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f6:	d826      	bhi.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80070f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070fc:	d02b      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80070fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007102:	d820      	bhi.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007108:	d012      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800710a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800710e:	d81a      	bhi.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d022      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007118:	d115      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800711a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800711e:	3308      	adds	r3, #8
 8007120:	2100      	movs	r1, #0
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fdd2 	bl	8007ccc <RCCEx_PLL2_Config>
 8007128:	4603      	mov	r3, r0
 800712a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800712e:	e015      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007134:	3328      	adds	r3, #40	; 0x28
 8007136:	2102      	movs	r1, #2
 8007138:	4618      	mov	r0, r3
 800713a:	f000 fe79 	bl	8007e30 <RCCEx_PLL3_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007144:	e00a      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800714c:	e006      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800714e:	bf00      	nop
 8007150:	e004      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007152:	bf00      	nop
 8007154:	e002      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007156:	bf00      	nop
 8007158:	e000      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800715a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10b      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007164:	4ba0      	ldr	r3, [pc, #640]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007168:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007170:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007174:	4a9c      	ldr	r2, [pc, #624]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007176:	430b      	orrs	r3, r1
 8007178:	6593      	str	r3, [r2, #88]	; 0x58
 800717a:	e003      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007180:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f002 0308 	and.w	r3, r2, #8
 8007190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007194:	2300      	movs	r3, #0
 8007196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800719a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800719e:	460b      	mov	r3, r1
 80071a0:	4313      	orrs	r3, r2
 80071a2:	d01e      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b0:	d10c      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b6:	3328      	adds	r3, #40	; 0x28
 80071b8:	2102      	movs	r1, #2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fe38 	bl	8007e30 <RCCEx_PLL3_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80071cc:	4b86      	ldr	r3, [pc, #536]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071dc:	4a82      	ldr	r2, [pc, #520]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071de:	430b      	orrs	r3, r1
 80071e0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	f002 0310 	and.w	r3, r2, #16
 80071ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071f2:	2300      	movs	r3, #0
 80071f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071f8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80071fc:	460b      	mov	r3, r1
 80071fe:	4313      	orrs	r3, r2
 8007200:	d01e      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800720a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720e:	d10c      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007214:	3328      	adds	r3, #40	; 0x28
 8007216:	2102      	movs	r1, #2
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fe09 	bl	8007e30 <RCCEx_PLL3_Config>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800722a:	4b6f      	ldr	r3, [pc, #444]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800723a:	4a6b      	ldr	r2, [pc, #428]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800723c:	430b      	orrs	r3, r1
 800723e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800724c:	67bb      	str	r3, [r7, #120]	; 0x78
 800724e:	2300      	movs	r3, #0
 8007250:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007252:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007256:	460b      	mov	r3, r1
 8007258:	4313      	orrs	r3, r2
 800725a:	d03e      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800725c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007268:	d022      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800726a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800726e:	d81b      	bhi.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007278:	d00b      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800727a:	e015      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007280:	3308      	adds	r3, #8
 8007282:	2100      	movs	r1, #0
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fd21 	bl	8007ccc <RCCEx_PLL2_Config>
 800728a:	4603      	mov	r3, r0
 800728c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007290:	e00f      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007296:	3328      	adds	r3, #40	; 0x28
 8007298:	2102      	movs	r1, #2
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fdc8 	bl	8007e30 <RCCEx_PLL3_Config>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80072a6:	e004      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80072ae:	e000      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80072b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10b      	bne.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072ba:	4b4b      	ldr	r3, [pc, #300]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80072c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072ca:	4a47      	ldr	r2, [pc, #284]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072cc:	430b      	orrs	r3, r1
 80072ce:	6593      	str	r3, [r2, #88]	; 0x58
 80072d0:	e003      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80072e6:	673b      	str	r3, [r7, #112]	; 0x70
 80072e8:	2300      	movs	r3, #0
 80072ea:	677b      	str	r3, [r7, #116]	; 0x74
 80072ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80072f0:	460b      	mov	r3, r1
 80072f2:	4313      	orrs	r3, r2
 80072f4:	d03b      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007302:	d01f      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007304:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007308:	d818      	bhi.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800730a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800730e:	d003      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007314:	d007      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007316:	e011      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007318:	4b33      	ldr	r3, [pc, #204]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	4a32      	ldr	r2, [pc, #200]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800731e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007324:	e00f      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732a:	3328      	adds	r3, #40	; 0x28
 800732c:	2101      	movs	r1, #1
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fd7e 	bl	8007e30 <RCCEx_PLL3_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800733a:	e004      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007342:	e000      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007346:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10b      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800734e:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007352:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735e:	4a22      	ldr	r2, [pc, #136]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007360:	430b      	orrs	r3, r1
 8007362:	6553      	str	r3, [r2, #84]	; 0x54
 8007364:	e003      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007366:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800736a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800736e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800737a:	66bb      	str	r3, [r7, #104]	; 0x68
 800737c:	2300      	movs	r3, #0
 800737e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007380:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007384:	460b      	mov	r3, r1
 8007386:	4313      	orrs	r3, r2
 8007388:	d034      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007398:	d007      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800739a:	e011      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800739c:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	4a11      	ldr	r2, [pc, #68]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80073a8:	e00e      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ae:	3308      	adds	r3, #8
 80073b0:	2102      	movs	r1, #2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fc8a 	bl	8007ccc <RCCEx_PLL2_Config>
 80073b8:	4603      	mov	r3, r0
 80073ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80073be:	e003      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80073c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10d      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80073d0:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073de:	4a02      	ldr	r2, [pc, #8]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073e0:	430b      	orrs	r3, r1
 80073e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073e4:	e006      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80073e6:	bf00      	nop
 80073e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007400:	663b      	str	r3, [r7, #96]	; 0x60
 8007402:	2300      	movs	r3, #0
 8007404:	667b      	str	r3, [r7, #100]	; 0x64
 8007406:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800740a:	460b      	mov	r3, r1
 800740c:	4313      	orrs	r3, r2
 800740e:	d00c      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007414:	3328      	adds	r3, #40	; 0x28
 8007416:	2102      	movs	r1, #2
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fd09 	bl	8007e30 <RCCEx_PLL3_Config>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800742a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007436:	65bb      	str	r3, [r7, #88]	; 0x58
 8007438:	2300      	movs	r3, #0
 800743a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800743c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007440:	460b      	mov	r3, r1
 8007442:	4313      	orrs	r3, r2
 8007444:	d036      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800744c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007450:	d018      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007456:	d811      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800745c:	d014      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800745e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007462:	d80b      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007464:	2b00      	cmp	r3, #0
 8007466:	d011      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800746c:	d106      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800746e:	4bb7      	ldr	r3, [pc, #732]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	4ab6      	ldr	r2, [pc, #728]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007478:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800747a:	e008      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007482:	e004      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007484:	bf00      	nop
 8007486:	e002      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007488:	bf00      	nop
 800748a:	e000      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800748c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007496:	4bad      	ldr	r3, [pc, #692]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a4:	4aa9      	ldr	r2, [pc, #676]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074a6:	430b      	orrs	r3, r1
 80074a8:	6553      	str	r3, [r2, #84]	; 0x54
 80074aa:	e003      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80074c0:	653b      	str	r3, [r7, #80]	; 0x50
 80074c2:	2300      	movs	r3, #0
 80074c4:	657b      	str	r3, [r7, #84]	; 0x54
 80074c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80074ca:	460b      	mov	r3, r1
 80074cc:	4313      	orrs	r3, r2
 80074ce:	d009      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074d0:	4b9e      	ldr	r3, [pc, #632]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074de:	4a9b      	ldr	r2, [pc, #620]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074e0:	430b      	orrs	r3, r1
 80074e2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80074f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80074f2:	2300      	movs	r3, #0
 80074f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80074fa:	460b      	mov	r3, r1
 80074fc:	4313      	orrs	r3, r2
 80074fe:	d009      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007500:	4b92      	ldr	r3, [pc, #584]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007504:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800750c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800750e:	4a8f      	ldr	r2, [pc, #572]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007510:	430b      	orrs	r3, r1
 8007512:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007520:	643b      	str	r3, [r7, #64]	; 0x40
 8007522:	2300      	movs	r3, #0
 8007524:	647b      	str	r3, [r7, #68]	; 0x44
 8007526:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800752a:	460b      	mov	r3, r1
 800752c:	4313      	orrs	r3, r2
 800752e:	d00e      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007530:	4b86      	ldr	r3, [pc, #536]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	4a85      	ldr	r2, [pc, #532]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007536:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800753a:	6113      	str	r3, [r2, #16]
 800753c:	4b83      	ldr	r3, [pc, #524]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800753e:	6919      	ldr	r1, [r3, #16]
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007544:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007548:	4a80      	ldr	r2, [pc, #512]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800754a:	430b      	orrs	r3, r1
 800754c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800754e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800755a:	63bb      	str	r3, [r7, #56]	; 0x38
 800755c:	2300      	movs	r3, #0
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007560:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007564:	460b      	mov	r3, r1
 8007566:	4313      	orrs	r3, r2
 8007568:	d009      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800756a:	4b78      	ldr	r3, [pc, #480]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800756c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007578:	4a74      	ldr	r2, [pc, #464]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800757a:	430b      	orrs	r3, r1
 800757c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800757e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800758a:	633b      	str	r3, [r7, #48]	; 0x30
 800758c:	2300      	movs	r3, #0
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
 8007590:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007594:	460b      	mov	r3, r1
 8007596:	4313      	orrs	r3, r2
 8007598:	d00a      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800759a:	4b6c      	ldr	r3, [pc, #432]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80075a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075aa:	4a68      	ldr	r2, [pc, #416]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075ac:	430b      	orrs	r3, r1
 80075ae:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80075b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	2100      	movs	r1, #0
 80075ba:	62b9      	str	r1, [r7, #40]	; 0x28
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075c2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80075c6:	460b      	mov	r3, r1
 80075c8:	4313      	orrs	r3, r2
 80075ca:	d011      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d0:	3308      	adds	r3, #8
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fb79 	bl	8007ccc <RCCEx_PLL2_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80075e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	2100      	movs	r1, #0
 80075fa:	6239      	str	r1, [r7, #32]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
 8007602:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007606:	460b      	mov	r3, r1
 8007608:	4313      	orrs	r3, r2
 800760a:	d011      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800760c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007610:	3308      	adds	r3, #8
 8007612:	2101      	movs	r1, #1
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fb59 	bl	8007ccc <RCCEx_PLL2_Config>
 800761a:	4603      	mov	r3, r0
 800761c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007620:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007628:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800762c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	2100      	movs	r1, #0
 800763a:	61b9      	str	r1, [r7, #24]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	61fb      	str	r3, [r7, #28]
 8007642:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007646:	460b      	mov	r3, r1
 8007648:	4313      	orrs	r3, r2
 800764a:	d011      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007650:	3308      	adds	r3, #8
 8007652:	2102      	movs	r1, #2
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fb39 	bl	8007ccc <RCCEx_PLL2_Config>
 800765a:	4603      	mov	r3, r0
 800765c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007660:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007668:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800766c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	2100      	movs	r1, #0
 800767a:	6139      	str	r1, [r7, #16]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007686:	460b      	mov	r3, r1
 8007688:	4313      	orrs	r3, r2
 800768a:	d011      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007690:	3328      	adds	r3, #40	; 0x28
 8007692:	2100      	movs	r1, #0
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fbcb 	bl	8007e30 <RCCEx_PLL3_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80076a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80076b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	2100      	movs	r1, #0
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80076c6:	460b      	mov	r3, r1
 80076c8:	4313      	orrs	r3, r2
 80076ca:	d011      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d0:	3328      	adds	r3, #40	; 0x28
 80076d2:	2101      	movs	r1, #1
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fbab 	bl	8007e30 <RCCEx_PLL3_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80076e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	2100      	movs	r1, #0
 80076fa:	6039      	str	r1, [r7, #0]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	607b      	str	r3, [r7, #4]
 8007702:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007706:	460b      	mov	r3, r1
 8007708:	4313      	orrs	r3, r2
 800770a:	d011      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800770c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007710:	3328      	adds	r3, #40	; 0x28
 8007712:	2102      	movs	r1, #2
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fb8b 	bl	8007e30 <RCCEx_PLL3_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007720:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800772c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007730:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	e000      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
}
 800773e:	4618      	mov	r0, r3
 8007740:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007744:	46bd      	mov	sp, r7
 8007746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800774a:	bf00      	nop
 800774c:	58024400 	.word	0x58024400

08007750 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007754:	f7fe fe00 	bl	8006358 <HAL_RCC_GetHCLKFreq>
 8007758:	4602      	mov	r2, r0
 800775a:	4b06      	ldr	r3, [pc, #24]	; (8007774 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	091b      	lsrs	r3, r3, #4
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	4904      	ldr	r1, [pc, #16]	; (8007778 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007766:	5ccb      	ldrb	r3, [r1, r3]
 8007768:	f003 031f 	and.w	r3, r3, #31
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007770:	4618      	mov	r0, r3
 8007772:	bd80      	pop	{r7, pc}
 8007774:	58024400 	.word	0x58024400
 8007778:	0800b0d0 	.word	0x0800b0d0

0800777c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800777c:	b480      	push	{r7}
 800777e:	b089      	sub	sp, #36	; 0x24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007784:	4ba1      	ldr	r3, [pc, #644]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800778e:	4b9f      	ldr	r3, [pc, #636]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	0b1b      	lsrs	r3, r3, #12
 8007794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007798:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800779a:	4b9c      	ldr	r3, [pc, #624]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	091b      	lsrs	r3, r3, #4
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80077a6:	4b99      	ldr	r3, [pc, #612]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077aa:	08db      	lsrs	r3, r3, #3
 80077ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	fb02 f303 	mul.w	r3, r2, r3
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8111 	beq.w	80079ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	f000 8083 	beq.w	80078d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	f200 80a1 	bhi.w	800791c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d056      	beq.n	8007894 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80077e6:	e099      	b.n	800791c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e8:	4b88      	ldr	r3, [pc, #544]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02d      	beq.n	8007850 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077f4:	4b85      	ldr	r3, [pc, #532]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	08db      	lsrs	r3, r3, #3
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	4a84      	ldr	r2, [pc, #528]	; (8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007800:	fa22 f303 	lsr.w	r3, r2, r3
 8007804:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	ee07 3a90 	vmov	s15, r3
 800780c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781e:	4b7b      	ldr	r3, [pc, #492]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007832:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800784e:	e087      	b.n	8007960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800785e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007862:	4b6a      	ldr	r3, [pc, #424]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007872:	ed97 6a03 	vldr	s12, [r7, #12]
 8007876:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800787a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800787e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007892:	e065      	b.n	8007960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a6:	4b59      	ldr	r3, [pc, #356]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078d6:	e043      	b.n	8007960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80078e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ea:	4b48      	ldr	r3, [pc, #288]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80078fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800790e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800791a:	e021      	b.n	8007960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007926:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800792a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792e:	4b37      	ldr	r3, [pc, #220]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007942:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800794e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800795e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007960:	4b2a      	ldr	r3, [pc, #168]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	0a5b      	lsrs	r3, r3, #9
 8007966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800797a:	edd7 6a07 	vldr	s13, [r7, #28]
 800797e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007986:	ee17 2a90 	vmov	r2, s15
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800798e:	4b1f      	ldr	r3, [pc, #124]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	0c1b      	lsrs	r3, r3, #16
 8007994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b4:	ee17 2a90 	vmov	r2, s15
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80079bc:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c0:	0e1b      	lsrs	r3, r3, #24
 80079c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e2:	ee17 2a90 	vmov	r2, s15
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80079ea:	e008      	b.n	80079fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	609a      	str	r2, [r3, #8]
}
 80079fe:	bf00      	nop
 8007a00:	3724      	adds	r7, #36	; 0x24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	58024400 	.word	0x58024400
 8007a10:	03d09000 	.word	0x03d09000
 8007a14:	46000000 	.word	0x46000000
 8007a18:	4c742400 	.word	0x4c742400
 8007a1c:	4a742400 	.word	0x4a742400
 8007a20:	4af42400 	.word	0x4af42400

08007a24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b089      	sub	sp, #36	; 0x24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a2c:	4ba1      	ldr	r3, [pc, #644]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a36:	4b9f      	ldr	r3, [pc, #636]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	0d1b      	lsrs	r3, r3, #20
 8007a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a42:	4b9c      	ldr	r3, [pc, #624]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	0a1b      	lsrs	r3, r3, #8
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a4e:	4b99      	ldr	r3, [pc, #612]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a52:	08db      	lsrs	r3, r3, #3
 8007a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8111 	beq.w	8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	f000 8083 	beq.w	8007b80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	f200 80a1 	bhi.w	8007bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d056      	beq.n	8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007a8e:	e099      	b.n	8007bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a90:	4b88      	ldr	r3, [pc, #544]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d02d      	beq.n	8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a9c:	4b85      	ldr	r3, [pc, #532]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	08db      	lsrs	r3, r3, #3
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	4a84      	ldr	r2, [pc, #528]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	4b7b      	ldr	r3, [pc, #492]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ada:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007af6:	e087      	b.n	8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b6a      	ldr	r3, [pc, #424]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b3a:	e065      	b.n	8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b59      	ldr	r3, [pc, #356]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b7e:	e043      	b.n	8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b48      	ldr	r3, [pc, #288]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bc2:	e021      	b.n	8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd6:	4b37      	ldr	r3, [pc, #220]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c08:	4b2a      	ldr	r3, [pc, #168]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0c:	0a5b      	lsrs	r3, r3, #9
 8007c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c2e:	ee17 2a90 	vmov	r2, s15
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c36:	4b1f      	ldr	r3, [pc, #124]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	0c1b      	lsrs	r3, r3, #16
 8007c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c40:	ee07 3a90 	vmov	s15, r3
 8007c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5c:	ee17 2a90 	vmov	r2, s15
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007c64:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	0e1b      	lsrs	r3, r3, #24
 8007c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c8a:	ee17 2a90 	vmov	r2, s15
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c92:	e008      	b.n	8007ca6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	609a      	str	r2, [r3, #8]
}
 8007ca6:	bf00      	nop
 8007ca8:	3724      	adds	r7, #36	; 0x24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	58024400 	.word	0x58024400
 8007cb8:	03d09000 	.word	0x03d09000
 8007cbc:	46000000 	.word	0x46000000
 8007cc0:	4c742400 	.word	0x4c742400
 8007cc4:	4a742400 	.word	0x4a742400
 8007cc8:	4af42400 	.word	0x4af42400

08007ccc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cda:	4b53      	ldr	r3, [pc, #332]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d101      	bne.n	8007cea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e099      	b.n	8007e1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007cea:	4b4f      	ldr	r3, [pc, #316]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a4e      	ldr	r2, [pc, #312]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007cf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf6:	f7f9 fe3b 	bl	8001970 <HAL_GetTick>
 8007cfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cfc:	e008      	b.n	8007d10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cfe:	f7f9 fe37 	bl	8001970 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d901      	bls.n	8007d10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e086      	b.n	8007e1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d10:	4b45      	ldr	r3, [pc, #276]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1f0      	bne.n	8007cfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d1c:	4b42      	ldr	r3, [pc, #264]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	031b      	lsls	r3, r3, #12
 8007d2a:	493f      	ldr	r1, [pc, #252]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	628b      	str	r3, [r1, #40]	; 0x28
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	025b      	lsls	r3, r3, #9
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	431a      	orrs	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	041b      	lsls	r3, r3, #16
 8007d4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	061b      	lsls	r3, r3, #24
 8007d5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d60:	4931      	ldr	r1, [pc, #196]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d66:	4b30      	ldr	r3, [pc, #192]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	492d      	ldr	r1, [pc, #180]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d78:	4b2b      	ldr	r3, [pc, #172]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	f023 0220 	bic.w	r2, r3, #32
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	4928      	ldr	r1, [pc, #160]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d8a:	4b27      	ldr	r3, [pc, #156]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	4a26      	ldr	r2, [pc, #152]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d90:	f023 0310 	bic.w	r3, r3, #16
 8007d94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d96:	4b24      	ldr	r3, [pc, #144]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d9a:	4b24      	ldr	r3, [pc, #144]	; (8007e2c <RCCEx_PLL2_Config+0x160>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	69d2      	ldr	r2, [r2, #28]
 8007da2:	00d2      	lsls	r2, r2, #3
 8007da4:	4920      	ldr	r1, [pc, #128]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007daa:	4b1f      	ldr	r3, [pc, #124]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dae:	4a1e      	ldr	r2, [pc, #120]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007db0:	f043 0310 	orr.w	r3, r3, #16
 8007db4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007dbc:	4b1a      	ldr	r3, [pc, #104]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dc8:	e00f      	b.n	8007dea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d106      	bne.n	8007dde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007dd0:	4b15      	ldr	r3, [pc, #84]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	4a14      	ldr	r2, [pc, #80]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ddc:	e005      	b.n	8007dea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007dde:	4b12      	ldr	r3, [pc, #72]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	4a11      	ldr	r2, [pc, #68]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007de8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007dea:	4b0f      	ldr	r3, [pc, #60]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a0e      	ldr	r2, [pc, #56]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007df0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df6:	f7f9 fdbb 	bl	8001970 <HAL_GetTick>
 8007dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007dfc:	e008      	b.n	8007e10 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dfe:	f7f9 fdb7 	bl	8001970 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d901      	bls.n	8007e10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e006      	b.n	8007e1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <RCCEx_PLL2_Config+0x15c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d0f0      	beq.n	8007dfe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	58024400 	.word	0x58024400
 8007e2c:	ffff0007 	.word	0xffff0007

08007e30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e3e:	4b53      	ldr	r3, [pc, #332]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d101      	bne.n	8007e4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e099      	b.n	8007f82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e4e:	4b4f      	ldr	r3, [pc, #316]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a4e      	ldr	r2, [pc, #312]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e5a:	f7f9 fd89 	bl	8001970 <HAL_GetTick>
 8007e5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e60:	e008      	b.n	8007e74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e62:	f7f9 fd85 	bl	8001970 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e086      	b.n	8007f82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e74:	4b45      	ldr	r3, [pc, #276]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1f0      	bne.n	8007e62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e80:	4b42      	ldr	r3, [pc, #264]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	051b      	lsls	r3, r3, #20
 8007e8e:	493f      	ldr	r1, [pc, #252]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	628b      	str	r3, [r1, #40]	; 0x28
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	025b      	lsls	r3, r3, #9
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	041b      	lsls	r3, r3, #16
 8007eb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	061b      	lsls	r3, r3, #24
 8007ec0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ec4:	4931      	ldr	r1, [pc, #196]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007eca:	4b30      	ldr	r3, [pc, #192]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	492d      	ldr	r1, [pc, #180]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007edc:	4b2b      	ldr	r3, [pc, #172]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	4928      	ldr	r1, [pc, #160]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007eee:	4b27      	ldr	r3, [pc, #156]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	4a26      	ldr	r2, [pc, #152]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007efa:	4b24      	ldr	r3, [pc, #144]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007efe:	4b24      	ldr	r3, [pc, #144]	; (8007f90 <RCCEx_PLL3_Config+0x160>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	69d2      	ldr	r2, [r2, #28]
 8007f06:	00d2      	lsls	r2, r2, #3
 8007f08:	4920      	ldr	r1, [pc, #128]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f0e:	4b1f      	ldr	r3, [pc, #124]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f12:	4a1e      	ldr	r2, [pc, #120]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d106      	bne.n	8007f2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f20:	4b1a      	ldr	r3, [pc, #104]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	4a19      	ldr	r2, [pc, #100]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f2c:	e00f      	b.n	8007f4e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d106      	bne.n	8007f42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f34:	4b15      	ldr	r3, [pc, #84]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	4a14      	ldr	r2, [pc, #80]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f40:	e005      	b.n	8007f4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f46:	4a11      	ldr	r2, [pc, #68]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f4e:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a0e      	ldr	r2, [pc, #56]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f5a:	f7f9 fd09 	bl	8001970 <HAL_GetTick>
 8007f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f60:	e008      	b.n	8007f74 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f62:	f7f9 fd05 	bl	8001970 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d901      	bls.n	8007f74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e006      	b.n	8007f82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <RCCEx_PLL3_Config+0x15c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0f0      	beq.n	8007f62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	58024400 	.word	0x58024400
 8007f90:	ffff0007 	.word	0xffff0007

08007f94 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e10f      	b.n	80081c6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a87      	ldr	r2, [pc, #540]	; (80081d0 <HAL_SPI_Init+0x23c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00f      	beq.n	8007fd6 <HAL_SPI_Init+0x42>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a86      	ldr	r2, [pc, #536]	; (80081d4 <HAL_SPI_Init+0x240>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00a      	beq.n	8007fd6 <HAL_SPI_Init+0x42>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a84      	ldr	r2, [pc, #528]	; (80081d8 <HAL_SPI_Init+0x244>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d005      	beq.n	8007fd6 <HAL_SPI_Init+0x42>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	2b0f      	cmp	r3, #15
 8007fd0:	d901      	bls.n	8007fd6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e0f7      	b.n	80081c6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fcf0 	bl	80089bc <SPI_GetPacketSize>
 8007fdc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a7b      	ldr	r2, [pc, #492]	; (80081d0 <HAL_SPI_Init+0x23c>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00c      	beq.n	8008002 <HAL_SPI_Init+0x6e>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a79      	ldr	r2, [pc, #484]	; (80081d4 <HAL_SPI_Init+0x240>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d007      	beq.n	8008002 <HAL_SPI_Init+0x6e>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a78      	ldr	r2, [pc, #480]	; (80081d8 <HAL_SPI_Init+0x244>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d002      	beq.n	8008002 <HAL_SPI_Init+0x6e>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	d811      	bhi.n	8008026 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008006:	4a72      	ldr	r2, [pc, #456]	; (80081d0 <HAL_SPI_Init+0x23c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d009      	beq.n	8008020 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a70      	ldr	r2, [pc, #448]	; (80081d4 <HAL_SPI_Init+0x240>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <HAL_SPI_Init+0x8c>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a6f      	ldr	r2, [pc, #444]	; (80081d8 <HAL_SPI_Init+0x244>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d104      	bne.n	800802a <HAL_SPI_Init+0x96>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b10      	cmp	r3, #16
 8008024:	d901      	bls.n	800802a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e0cd      	b.n	80081c6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7f9 f848 	bl	80010d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008066:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008070:	d119      	bne.n	80080a6 <HAL_SPI_Init+0x112>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800807a:	d103      	bne.n	8008084 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008080:	2b00      	cmp	r3, #0
 8008082:	d008      	beq.n	8008096 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10c      	bne.n	80080a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008094:	d107      	bne.n	80080a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00f      	beq.n	80080d2 <HAL_SPI_Init+0x13e>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	2b06      	cmp	r3, #6
 80080b8:	d90b      	bls.n	80080d2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	e007      	b.n	80080e2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	69da      	ldr	r2, [r3, #28]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	431a      	orrs	r2, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f4:	ea42 0103 	orr.w	r1, r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	431a      	orrs	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	431a      	orrs	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	431a      	orrs	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	431a      	orrs	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008142:	ea42 0103 	orr.w	r1, r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d113      	bne.n	8008182 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800816c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008180:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0201 	bic.w	r2, r2, #1
 8008190:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	430a      	orrs	r2, r1
 80081b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	40013000 	.word	0x40013000
 80081d4:	40003800 	.word	0x40003800
 80081d8:	40003c00 	.word	0x40003c00

080081dc <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_SPI_Transmit_IT+0x20>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e098      	b.n	800832e <HAL_SPI_Transmit_IT+0x152>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if ((pData == NULL) || (Size == 0UL))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <HAL_SPI_Transmit_IT+0x34>
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d107      	bne.n	8008220 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	e086      	b.n	800832e <HAL_SPI_Transmit_IT+0x152>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b01      	cmp	r3, #1
 800822a:	d007      	beq.n	800823c <HAL_SPI_Transmit_IT+0x60>
  {
    errorcode = HAL_BUSY;
 800822c:	2302      	movs	r3, #2
 800822e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	e078      	b.n	800832e <HAL_SPI_Transmit_IT+0x152>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2203      	movs	r2, #3
 8008240:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	88fa      	ldrh	r2, [r7, #6]
 8008256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	88fa      	ldrh	r2, [r7, #6]
 800825e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	2b0f      	cmp	r3, #15
 8008284:	d903      	bls.n	800828e <HAL_SPI_Transmit_IT+0xb2>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4a2c      	ldr	r2, [pc, #176]	; (800833c <HAL_SPI_Transmit_IT+0x160>)
 800828a:	675a      	str	r2, [r3, #116]	; 0x74
 800828c:	e00a      	b.n	80082a4 <HAL_SPI_Transmit_IT+0xc8>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	2b07      	cmp	r3, #7
 8008294:	d903      	bls.n	800829e <HAL_SPI_Transmit_IT+0xc2>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4a29      	ldr	r2, [pc, #164]	; (8008340 <HAL_SPI_Transmit_IT+0x164>)
 800829a:	675a      	str	r2, [r3, #116]	; 0x74
 800829c:	e002      	b.n	80082a4 <HAL_SPI_Transmit_IT+0xc8>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4a28      	ldr	r2, [pc, #160]	; (8008344 <HAL_SPI_Transmit_IT+0x168>)
 80082a2:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80082ac:	d108      	bne.n	80082c0 <HAL_SPI_Transmit_IT+0xe4>
  {
    SPI_1LINE_TX(hspi);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	e009      	b.n	80082d4 <HAL_SPI_Transmit_IT+0xf8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80082d2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	4b1b      	ldr	r3, [pc, #108]	; (8008348 <HAL_SPI_Transmit_IT+0x16c>)
 80082dc:	4013      	ands	r3, r2
 80082de:	88f9      	ldrh	r1, [r7, #6]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	430b      	orrs	r3, r1
 80082e6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0201 	orr.w	r2, r2, #1
 80082f6:	601a      	str	r2, [r3, #0]

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6919      	ldr	r1, [r3, #16]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	f240 732a 	movw	r3, #1834	; 0x72a
 8008306:	430b      	orrs	r3, r1
 8008308:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008312:	d107      	bne.n	8008324 <HAL_SPI_Transmit_IT+0x148>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008322:	601a      	str	r2, [r3, #0]
  }

  __HAL_UNLOCK(hspi);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800832c:	7dfb      	ldrb	r3, [r7, #23]
}
 800832e:	4618      	mov	r0, r3
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	08008825 	.word	0x08008825
 8008340:	080087c7 	.word	0x080087c7
 8008344:	0800876d 	.word	0x0800876d
 8008348:	ffff0000 	.word	0xffff0000

0800834c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	; 0x28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008364:	6a3a      	ldr	r2, [r7, #32]
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4013      	ands	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008374:	2300      	movs	r3, #0
 8008376:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800837e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3330      	adds	r3, #48	; 0x30
 8008386:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800838e:	2b00      	cmp	r3, #0
 8008390:	d010      	beq.n	80083b4 <HAL_SPI_IRQHandler+0x68>
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00b      	beq.n	80083b4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083aa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f9b9 	bl	8008724 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80083b2:	e192      	b.n	80086da <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d113      	bne.n	80083e6 <HAL_SPI_IRQHandler+0x9a>
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10e      	bne.n	80083e6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d009      	beq.n	80083e6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	4798      	blx	r3
    handled = 1UL;
 80083e2:	2301      	movs	r3, #1
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10f      	bne.n	8008410 <HAL_SPI_IRQHandler+0xc4>
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008400:	2b00      	cmp	r3, #0
 8008402:	d105      	bne.n	8008410 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	4798      	blx	r3
    handled = 1UL;
 800840c:	2301      	movs	r3, #1
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10f      	bne.n	800843a <HAL_SPI_IRQHandler+0xee>
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00a      	beq.n	800843a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800842a:	2b00      	cmp	r3, #0
 800842c:	d105      	bne.n	800843a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
    handled = 1UL;
 8008436:	2301      	movs	r3, #1
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	2b00      	cmp	r3, #0
 800843e:	f040 8147 	bne.w	80086d0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 808b 	beq.w	8008564 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	699a      	ldr	r2, [r3, #24]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0208 	orr.w	r2, r2, #8
 800845c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	699a      	ldr	r2, [r3, #24]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0210 	orr.w	r2, r2, #16
 800846c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699a      	ldr	r2, [r3, #24]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800847c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0208 	bic.w	r2, r2, #8
 800848c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d13d      	bne.n	8008518 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800849c:	e036      	b.n	800850c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	2b0f      	cmp	r3, #15
 80084a4:	d90b      	bls.n	80084be <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80084b0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b6:	1d1a      	adds	r2, r3, #4
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	665a      	str	r2, [r3, #100]	; 0x64
 80084bc:	e01d      	b.n	80084fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	2b07      	cmp	r3, #7
 80084c4:	d90b      	bls.n	80084de <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	8812      	ldrh	r2, [r2, #0]
 80084ce:	b292      	uxth	r2, r2
 80084d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d6:	1c9a      	adds	r2, r3, #2
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	665a      	str	r2, [r3, #100]	; 0x64
 80084dc:	e00d      	b.n	80084fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084ea:	7812      	ldrb	r2, [r2, #0]
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008500:	b29b      	uxth	r3, r3
 8008502:	3b01      	subs	r3, #1
 8008504:	b29a      	uxth	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1c2      	bne.n	800849e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f9af 	bl	800887c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f8ed 	bl	8008710 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008536:	e0d0      	b.n	80086da <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008538:	7cfb      	ldrb	r3, [r7, #19]
 800853a:	2b05      	cmp	r3, #5
 800853c:	d103      	bne.n	8008546 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f8dc 	bl	80086fc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008544:	e0c6      	b.n	80086d4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008546:	7cfb      	ldrb	r3, [r7, #19]
 8008548:	2b04      	cmp	r3, #4
 800854a:	d103      	bne.n	8008554 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f8cb 	bl	80086e8 <HAL_SPI_RxCpltCallback>
    return;
 8008552:	e0bf      	b.n	80086d4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008554:	7cfb      	ldrb	r3, [r7, #19]
 8008556:	2b03      	cmp	r3, #3
 8008558:	f040 80bc 	bne.w	80086d4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7f8 fc65 	bl	8000e2c <HAL_SPI_TxCpltCallback>
    return;
 8008562:	e0b7      	b.n	80086d4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80b5 	beq.w	80086da <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00f      	beq.n	800859a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008580:	f043 0204 	orr.w	r2, r3, #4
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	699a      	ldr	r2, [r3, #24]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008598:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00f      	beq.n	80085c4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085aa:	f043 0201 	orr.w	r2, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	699a      	ldr	r2, [r3, #24]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085c2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00f      	beq.n	80085ee <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085d4:	f043 0208 	orr.w	r2, r3, #8
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00f      	beq.n	8008618 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0220 	orr.w	r2, r2, #32
 8008616:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800861e:	2b00      	cmp	r3, #0
 8008620:	d05a      	beq.n	80086d8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0201 	bic.w	r2, r2, #1
 8008630:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6919      	ldr	r1, [r3, #16]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	4b28      	ldr	r3, [pc, #160]	; (80086e0 <HAL_SPI_IRQHandler+0x394>)
 800863e:	400b      	ands	r3, r1
 8008640:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008648:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800864c:	d138      	bne.n	80086c0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800865c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d013      	beq.n	800868e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800866a:	4a1e      	ldr	r2, [pc, #120]	; (80086e4 <HAL_SPI_IRQHandler+0x398>)
 800866c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008672:	4618      	mov	r0, r3
 8008674:	f7fa fbb0 	bl	8002dd8 <HAL_DMA_Abort_IT>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d007      	beq.n	800868e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008684:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008692:	2b00      	cmp	r3, #0
 8008694:	d020      	beq.n	80086d8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800869a:	4a12      	ldr	r2, [pc, #72]	; (80086e4 <HAL_SPI_IRQHandler+0x398>)
 800869c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fa fb98 	bl	8002dd8 <HAL_DMA_Abort_IT>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d014      	beq.n	80086d8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80086be:	e00b      	b.n	80086d8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f821 	bl	8008710 <HAL_SPI_ErrorCallback>
    return;
 80086ce:	e003      	b.n	80086d8 <HAL_SPI_IRQHandler+0x38c>
    return;
 80086d0:	bf00      	nop
 80086d2:	e002      	b.n	80086da <HAL_SPI_IRQHandler+0x38e>
    return;
 80086d4:	bf00      	nop
 80086d6:	e000      	b.n	80086da <HAL_SPI_IRQHandler+0x38e>
    return;
 80086d8:	bf00      	nop
  }
}
 80086da:	3728      	adds	r7, #40	; 0x28
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	fffffc94 	.word	0xfffffc94
 80086e4:	08008739 	.word	0x08008739

080086e8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff ffd6 	bl	8008710 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3320      	adds	r3, #32
 800877e:	7812      	ldrb	r2, [r2, #0]
 8008780:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008792:	b29b      	uxth	r3, r3
 8008794:	3b01      	subs	r3, #1
 8008796:	b29a      	uxth	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d107      	bne.n	80087ba <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	691a      	ldr	r2, [r3, #16]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0202 	bic.w	r2, r2, #2
 80087b8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3320      	adds	r3, #32
 80087d4:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087da:	881a      	ldrh	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e4:	1c9a      	adds	r2, r3, #2
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008802:	b29b      	uxth	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d107      	bne.n	8008818 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0202 	bic.w	r2, r2, #2
 8008816:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8008818:	bf00      	nop
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6812      	ldr	r2, [r2, #0]
 8008836:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883c:	1d1a      	adds	r2, r3, #4
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b01      	subs	r3, #1
 800884c:	b29a      	uxth	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d107      	bne.n	8008870 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691a      	ldr	r2, [r3, #16]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 0202 	bic.w	r2, r2, #2
 800886e:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0208 	orr.w	r2, r2, #8
 800889a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0210 	orr.w	r2, r2, #16
 80088aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0201 	bic.w	r2, r2, #1
 80088ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6919      	ldr	r1, [r3, #16]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	4b3c      	ldr	r3, [pc, #240]	; (80089b8 <SPI_CloseTransfer+0x13c>)
 80088c8:	400b      	ands	r3, r1
 80088ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80088da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d014      	beq.n	8008912 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00f      	beq.n	8008912 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	699a      	ldr	r2, [r3, #24]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f042 0220 	orr.w	r2, r2, #32
 8008910:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b03      	cmp	r3, #3
 800891c:	d014      	beq.n	8008948 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00f      	beq.n	8008948 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800892e:	f043 0204 	orr.w	r2, r3, #4
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699a      	ldr	r2, [r3, #24]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008946:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00f      	beq.n	8008972 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008958:	f043 0201 	orr.w	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	699a      	ldr	r2, [r3, #24]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008970:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00f      	beq.n	800899c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008982:	f043 0208 	orr.w	r2, r3, #8
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800899a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80089ac:	bf00      	nop
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	fffffc90 	.word	0xfffffc90

080089bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c8:	095b      	lsrs	r3, r3, #5
 80089ca:	3301      	adds	r3, #1
 80089cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	3301      	adds	r3, #1
 80089d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	3307      	adds	r3, #7
 80089da:	08db      	lsrs	r3, r3, #3
 80089dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e049      	b.n	8008a98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7f8 fc23 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2202      	movs	r2, #2
 8008a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f000 fa0d 	bl	8008e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d001      	beq.n	8008ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e05e      	b.n	8008b76 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0201 	orr.w	r2, r2, #1
 8008ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a2b      	ldr	r2, [pc, #172]	; (8008b84 <HAL_TIM_Base_Start_IT+0xe4>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d02c      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x94>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae2:	d027      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x94>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a27      	ldr	r2, [pc, #156]	; (8008b88 <HAL_TIM_Base_Start_IT+0xe8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d022      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x94>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a26      	ldr	r2, [pc, #152]	; (8008b8c <HAL_TIM_Base_Start_IT+0xec>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d01d      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x94>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a24      	ldr	r2, [pc, #144]	; (8008b90 <HAL_TIM_Base_Start_IT+0xf0>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d018      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x94>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a23      	ldr	r2, [pc, #140]	; (8008b94 <HAL_TIM_Base_Start_IT+0xf4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d013      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x94>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a21      	ldr	r2, [pc, #132]	; (8008b98 <HAL_TIM_Base_Start_IT+0xf8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d00e      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x94>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a20      	ldr	r2, [pc, #128]	; (8008b9c <HAL_TIM_Base_Start_IT+0xfc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d009      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x94>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a1e      	ldr	r2, [pc, #120]	; (8008ba0 <HAL_TIM_Base_Start_IT+0x100>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d004      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x94>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ba4 <HAL_TIM_Base_Start_IT+0x104>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d115      	bne.n	8008b60 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ba8 <HAL_TIM_Base_Start_IT+0x108>)
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b06      	cmp	r3, #6
 8008b44:	d015      	beq.n	8008b72 <HAL_TIM_Base_Start_IT+0xd2>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b4c:	d011      	beq.n	8008b72 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0201 	orr.w	r2, r2, #1
 8008b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b5e:	e008      	b.n	8008b72 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0201 	orr.w	r2, r2, #1
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	e000      	b.n	8008b74 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40010000 	.word	0x40010000
 8008b88:	40000400 	.word	0x40000400
 8008b8c:	40000800 	.word	0x40000800
 8008b90:	40000c00 	.word	0x40000c00
 8008b94:	40010400 	.word	0x40010400
 8008b98:	40001800 	.word	0x40001800
 8008b9c:	40014000 	.word	0x40014000
 8008ba0:	4000e000 	.word	0x4000e000
 8008ba4:	4000e400 	.word	0x4000e400
 8008ba8:	00010007 	.word	0x00010007

08008bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d122      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d11b      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f06f 0202 	mvn.w	r2, #2
 8008bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f90f 	bl	8008e12 <HAL_TIM_IC_CaptureCallback>
 8008bf4:	e005      	b.n	8008c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f901 	bl	8008dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f912 	bl	8008e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f003 0304 	and.w	r3, r3, #4
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d122      	bne.n	8008c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	d11b      	bne.n	8008c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f06f 0204 	mvn.w	r2, #4
 8008c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2202      	movs	r2, #2
 8008c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f8e5 	bl	8008e12 <HAL_TIM_IC_CaptureCallback>
 8008c48:	e005      	b.n	8008c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f8d7 	bl	8008dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f8e8 	bl	8008e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	f003 0308 	and.w	r3, r3, #8
 8008c66:	2b08      	cmp	r3, #8
 8008c68:	d122      	bne.n	8008cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f003 0308 	and.w	r3, r3, #8
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d11b      	bne.n	8008cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f06f 0208 	mvn.w	r2, #8
 8008c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2204      	movs	r2, #4
 8008c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f8bb 	bl	8008e12 <HAL_TIM_IC_CaptureCallback>
 8008c9c:	e005      	b.n	8008caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f8ad 	bl	8008dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f8be 	bl	8008e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	f003 0310 	and.w	r3, r3, #16
 8008cba:	2b10      	cmp	r3, #16
 8008cbc:	d122      	bne.n	8008d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f003 0310 	and.w	r3, r3, #16
 8008cc8:	2b10      	cmp	r3, #16
 8008cca:	d11b      	bne.n	8008d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0210 	mvn.w	r2, #16
 8008cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2208      	movs	r2, #8
 8008cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f891 	bl	8008e12 <HAL_TIM_IC_CaptureCallback>
 8008cf0:	e005      	b.n	8008cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f883 	bl	8008dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f894 	bl	8008e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d10e      	bne.n	8008d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d107      	bne.n	8008d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f06f 0201 	mvn.w	r2, #1
 8008d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f85d 	bl	8008dea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3a:	2b80      	cmp	r3, #128	; 0x80
 8008d3c:	d10e      	bne.n	8008d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d48:	2b80      	cmp	r3, #128	; 0x80
 8008d4a:	d107      	bne.n	8008d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f92a 	bl	8008fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6a:	d10e      	bne.n	8008d8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d76:	2b80      	cmp	r3, #128	; 0x80
 8008d78:	d107      	bne.n	8008d8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f91d 	bl	8008fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d94:	2b40      	cmp	r3, #64	; 0x40
 8008d96:	d10e      	bne.n	8008db6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da2:	2b40      	cmp	r3, #64	; 0x40
 8008da4:	d107      	bne.n	8008db6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f842 	bl	8008e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	f003 0320 	and.w	r3, r3, #32
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	d10e      	bne.n	8008de2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	d107      	bne.n	8008de2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f06f 0220 	mvn.w	r2, #32
 8008dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f8dd 	bl	8008f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e2e:	bf00      	nop
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e42:	bf00      	nop
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
	...

08008e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a44      	ldr	r2, [pc, #272]	; (8008f74 <TIM_Base_SetConfig+0x124>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d013      	beq.n	8008e90 <TIM_Base_SetConfig+0x40>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e6e:	d00f      	beq.n	8008e90 <TIM_Base_SetConfig+0x40>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a41      	ldr	r2, [pc, #260]	; (8008f78 <TIM_Base_SetConfig+0x128>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d00b      	beq.n	8008e90 <TIM_Base_SetConfig+0x40>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a40      	ldr	r2, [pc, #256]	; (8008f7c <TIM_Base_SetConfig+0x12c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d007      	beq.n	8008e90 <TIM_Base_SetConfig+0x40>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a3f      	ldr	r2, [pc, #252]	; (8008f80 <TIM_Base_SetConfig+0x130>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d003      	beq.n	8008e90 <TIM_Base_SetConfig+0x40>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a3e      	ldr	r2, [pc, #248]	; (8008f84 <TIM_Base_SetConfig+0x134>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d108      	bne.n	8008ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a33      	ldr	r2, [pc, #204]	; (8008f74 <TIM_Base_SetConfig+0x124>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d027      	beq.n	8008efa <TIM_Base_SetConfig+0xaa>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb0:	d023      	beq.n	8008efa <TIM_Base_SetConfig+0xaa>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a30      	ldr	r2, [pc, #192]	; (8008f78 <TIM_Base_SetConfig+0x128>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d01f      	beq.n	8008efa <TIM_Base_SetConfig+0xaa>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a2f      	ldr	r2, [pc, #188]	; (8008f7c <TIM_Base_SetConfig+0x12c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d01b      	beq.n	8008efa <TIM_Base_SetConfig+0xaa>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a2e      	ldr	r2, [pc, #184]	; (8008f80 <TIM_Base_SetConfig+0x130>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d017      	beq.n	8008efa <TIM_Base_SetConfig+0xaa>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a2d      	ldr	r2, [pc, #180]	; (8008f84 <TIM_Base_SetConfig+0x134>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d013      	beq.n	8008efa <TIM_Base_SetConfig+0xaa>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a2c      	ldr	r2, [pc, #176]	; (8008f88 <TIM_Base_SetConfig+0x138>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d00f      	beq.n	8008efa <TIM_Base_SetConfig+0xaa>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a2b      	ldr	r2, [pc, #172]	; (8008f8c <TIM_Base_SetConfig+0x13c>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d00b      	beq.n	8008efa <TIM_Base_SetConfig+0xaa>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a2a      	ldr	r2, [pc, #168]	; (8008f90 <TIM_Base_SetConfig+0x140>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d007      	beq.n	8008efa <TIM_Base_SetConfig+0xaa>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a29      	ldr	r2, [pc, #164]	; (8008f94 <TIM_Base_SetConfig+0x144>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d003      	beq.n	8008efa <TIM_Base_SetConfig+0xaa>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a28      	ldr	r2, [pc, #160]	; (8008f98 <TIM_Base_SetConfig+0x148>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d108      	bne.n	8008f0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a10      	ldr	r2, [pc, #64]	; (8008f74 <TIM_Base_SetConfig+0x124>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d00f      	beq.n	8008f58 <TIM_Base_SetConfig+0x108>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a12      	ldr	r2, [pc, #72]	; (8008f84 <TIM_Base_SetConfig+0x134>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00b      	beq.n	8008f58 <TIM_Base_SetConfig+0x108>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a11      	ldr	r2, [pc, #68]	; (8008f88 <TIM_Base_SetConfig+0x138>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d007      	beq.n	8008f58 <TIM_Base_SetConfig+0x108>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a10      	ldr	r2, [pc, #64]	; (8008f8c <TIM_Base_SetConfig+0x13c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d003      	beq.n	8008f58 <TIM_Base_SetConfig+0x108>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a0f      	ldr	r2, [pc, #60]	; (8008f90 <TIM_Base_SetConfig+0x140>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d103      	bne.n	8008f60 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	615a      	str	r2, [r3, #20]
}
 8008f66:	bf00      	nop
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	40010000 	.word	0x40010000
 8008f78:	40000400 	.word	0x40000400
 8008f7c:	40000800 	.word	0x40000800
 8008f80:	40000c00 	.word	0x40000c00
 8008f84:	40010400 	.word	0x40010400
 8008f88:	40014000 	.word	0x40014000
 8008f8c:	40014400 	.word	0x40014400
 8008f90:	40014800 	.word	0x40014800
 8008f94:	4000e000 	.word	0x4000e000
 8008f98:	4000e400 	.word	0x4000e400

08008f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e042      	b.n	8009070 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d106      	bne.n	8009002 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7f8 f979 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2224      	movs	r2, #36	; 0x24
 8009006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0201 	bic.w	r2, r2, #1
 8009018:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fc5c 	bl	80098d8 <UART_SetConfig>
 8009020:	4603      	mov	r3, r0
 8009022:	2b01      	cmp	r3, #1
 8009024:	d101      	bne.n	800902a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e022      	b.n	8009070 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902e:	2b00      	cmp	r3, #0
 8009030:	d002      	beq.n	8009038 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fabc 	bl	800a5b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 fb43 	bl	800a6f4 <UART_CheckIdleState>
 800906e:	4603      	mov	r3, r0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	; 0x28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	4613      	mov	r3, r2
 8009084:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800908c:	2b20      	cmp	r3, #32
 800908e:	d137      	bne.n	8009100 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d002      	beq.n	800909c <HAL_UART_Receive_DMA+0x24>
 8009096:	88fb      	ldrh	r3, [r7, #6]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e030      	b.n	8009102 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a18      	ldr	r2, [pc, #96]	; (800910c <HAL_UART_Receive_DMA+0x94>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d01f      	beq.n	80090f0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d018      	beq.n	80090f0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	613b      	str	r3, [r7, #16]
   return(result);
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	623b      	str	r3, [r7, #32]
 80090de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	69f9      	ldr	r1, [r7, #28]
 80090e2:	6a3a      	ldr	r2, [r7, #32]
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e6      	bne.n	80090be <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80090f0:	88fb      	ldrh	r3, [r7, #6]
 80090f2:	461a      	mov	r2, r3
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f001 fc0e 	bl	800a918 <UART_Start_Receive_DMA>
 80090fc:	4603      	mov	r3, r0
 80090fe:	e000      	b.n	8009102 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009100:	2302      	movs	r3, #2
  }
}
 8009102:	4618      	mov	r0, r3
 8009104:	3728      	adds	r7, #40	; 0x28
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	58000c00 	.word	0x58000c00

08009110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b0ba      	sub	sp, #232	; 0xe8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800913a:	f640 030f 	movw	r3, #2063	; 0x80f
 800913e:	4013      	ands	r3, r2
 8009140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009148:	2b00      	cmp	r3, #0
 800914a:	d11b      	bne.n	8009184 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800914c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009150:	f003 0320 	and.w	r3, r3, #32
 8009154:	2b00      	cmp	r3, #0
 8009156:	d015      	beq.n	8009184 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b00      	cmp	r3, #0
 8009162:	d105      	bne.n	8009170 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8377 	beq.w	8009868 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	4798      	blx	r3
      }
      return;
 8009182:	e371      	b.n	8009868 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 8123 	beq.w	80093d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800918e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009192:	4b8d      	ldr	r3, [pc, #564]	; (80093c8 <HAL_UART_IRQHandler+0x2b8>)
 8009194:	4013      	ands	r3, r2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800919a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800919e:	4b8b      	ldr	r3, [pc, #556]	; (80093cc <HAL_UART_IRQHandler+0x2bc>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 8116 	beq.w	80093d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d011      	beq.n	80091d8 <HAL_UART_IRQHandler+0xc8>
 80091b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00b      	beq.n	80091d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2201      	movs	r2, #1
 80091c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ce:	f043 0201 	orr.w	r2, r3, #1
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d011      	beq.n	8009208 <HAL_UART_IRQHandler+0xf8>
 80091e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2202      	movs	r2, #2
 80091f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091fe:	f043 0204 	orr.w	r2, r3, #4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b00      	cmp	r3, #0
 8009212:	d011      	beq.n	8009238 <HAL_UART_IRQHandler+0x128>
 8009214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00b      	beq.n	8009238 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2204      	movs	r2, #4
 8009226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800922e:	f043 0202 	orr.w	r2, r3, #2
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800923c:	f003 0308 	and.w	r3, r3, #8
 8009240:	2b00      	cmp	r3, #0
 8009242:	d017      	beq.n	8009274 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009248:	f003 0320 	and.w	r3, r3, #32
 800924c:	2b00      	cmp	r3, #0
 800924e:	d105      	bne.n	800925c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009250:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009254:	4b5c      	ldr	r3, [pc, #368]	; (80093c8 <HAL_UART_IRQHandler+0x2b8>)
 8009256:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2208      	movs	r2, #8
 8009262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800926a:	f043 0208 	orr.w	r2, r3, #8
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800927c:	2b00      	cmp	r3, #0
 800927e:	d012      	beq.n	80092a6 <HAL_UART_IRQHandler+0x196>
 8009280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00c      	beq.n	80092a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800929c:	f043 0220 	orr.w	r2, r3, #32
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 82dd 	beq.w	800986c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d013      	beq.n	80092e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d105      	bne.n	80092d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d007      	beq.n	80092e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fa:	2b40      	cmp	r3, #64	; 0x40
 80092fc:	d005      	beq.n	800930a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009302:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009306:	2b00      	cmp	r3, #0
 8009308:	d054      	beq.n	80093b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f001 fbec 	bl	800aae8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931a:	2b40      	cmp	r3, #64	; 0x40
 800931c:	d146      	bne.n	80093ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800932c:	e853 3f00 	ldrex	r3, [r3]
 8009330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800933c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3308      	adds	r3, #8
 8009346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800934a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800934e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1d9      	bne.n	800931e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009370:	2b00      	cmp	r3, #0
 8009372:	d017      	beq.n	80093a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800937a:	4a15      	ldr	r2, [pc, #84]	; (80093d0 <HAL_UART_IRQHandler+0x2c0>)
 800937c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009384:	4618      	mov	r0, r3
 8009386:	f7f9 fd27 	bl	8002dd8 <HAL_DMA_Abort_IT>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d019      	beq.n	80093c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800939e:	4610      	mov	r0, r2
 80093a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a2:	e00f      	b.n	80093c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fa81 	bl	80098ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093aa:	e00b      	b.n	80093c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fa7d 	bl	80098ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b2:	e007      	b.n	80093c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fa79 	bl	80098ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80093c2:	e253      	b.n	800986c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c4:	bf00      	nop
    return;
 80093c6:	e251      	b.n	800986c <HAL_UART_IRQHandler+0x75c>
 80093c8:	10000001 	.word	0x10000001
 80093cc:	04000120 	.word	0x04000120
 80093d0:	0800ad9b 	.word	0x0800ad9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d8:	2b01      	cmp	r3, #1
 80093da:	f040 81e7 	bne.w	80097ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e2:	f003 0310 	and.w	r3, r3, #16
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 81e0 	beq.w	80097ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f0:	f003 0310 	and.w	r3, r3, #16
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 81d9 	beq.w	80097ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2210      	movs	r2, #16
 8009400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940c:	2b40      	cmp	r3, #64	; 0x40
 800940e:	f040 8151 	bne.w	80096b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a96      	ldr	r2, [pc, #600]	; (8009674 <HAL_UART_IRQHandler+0x564>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d068      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a93      	ldr	r2, [pc, #588]	; (8009678 <HAL_UART_IRQHandler+0x568>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d061      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a91      	ldr	r2, [pc, #580]	; (800967c <HAL_UART_IRQHandler+0x56c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d05a      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a8e      	ldr	r2, [pc, #568]	; (8009680 <HAL_UART_IRQHandler+0x570>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d053      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a8c      	ldr	r2, [pc, #560]	; (8009684 <HAL_UART_IRQHandler+0x574>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d04c      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a89      	ldr	r2, [pc, #548]	; (8009688 <HAL_UART_IRQHandler+0x578>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d045      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a87      	ldr	r2, [pc, #540]	; (800968c <HAL_UART_IRQHandler+0x57c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d03e      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a84      	ldr	r2, [pc, #528]	; (8009690 <HAL_UART_IRQHandler+0x580>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d037      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a82      	ldr	r2, [pc, #520]	; (8009694 <HAL_UART_IRQHandler+0x584>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d030      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a7f      	ldr	r2, [pc, #508]	; (8009698 <HAL_UART_IRQHandler+0x588>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d029      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a7d      	ldr	r2, [pc, #500]	; (800969c <HAL_UART_IRQHandler+0x58c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d022      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a7a      	ldr	r2, [pc, #488]	; (80096a0 <HAL_UART_IRQHandler+0x590>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d01b      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a78      	ldr	r2, [pc, #480]	; (80096a4 <HAL_UART_IRQHandler+0x594>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d014      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a75      	ldr	r2, [pc, #468]	; (80096a8 <HAL_UART_IRQHandler+0x598>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00d      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a73      	ldr	r2, [pc, #460]	; (80096ac <HAL_UART_IRQHandler+0x59c>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d006      	beq.n	80094f2 <HAL_UART_IRQHandler+0x3e2>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a70      	ldr	r2, [pc, #448]	; (80096b0 <HAL_UART_IRQHandler+0x5a0>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d106      	bne.n	8009500 <HAL_UART_IRQHandler+0x3f0>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	e005      	b.n	800950c <HAL_UART_IRQHandler+0x3fc>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	b29b      	uxth	r3, r3
 800950c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 81ab 	beq.w	8009870 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009520:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009524:	429a      	cmp	r2, r3
 8009526:	f080 81a3 	bcs.w	8009870 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009530:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009540:	f000 8087 	beq.w	8009652 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800955c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800956e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009572:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800957a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1da      	bne.n	8009544 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3308      	adds	r3, #8
 8009594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800959e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095a0:	f023 0301 	bic.w	r3, r3, #1
 80095a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3308      	adds	r3, #8
 80095ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e1      	bne.n	800958e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3308      	adds	r3, #8
 80095d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095d4:	e853 3f00 	ldrex	r3, [r3]
 80095d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3308      	adds	r3, #8
 80095ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80095ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e3      	bne.n	80095ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800961e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009620:	f023 0310 	bic.w	r3, r3, #16
 8009624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	461a      	mov	r2, r3
 800962e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009632:	65bb      	str	r3, [r7, #88]	; 0x58
 8009634:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e4      	bne.n	8009610 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800964c:	4618      	mov	r0, r3
 800964e:	f7f9 f8a5 	bl	800279c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2202      	movs	r2, #2
 8009656:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009664:	b29b      	uxth	r3, r3
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	b29b      	uxth	r3, r3
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f927 	bl	80098c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009672:	e0fd      	b.n	8009870 <HAL_UART_IRQHandler+0x760>
 8009674:	40020010 	.word	0x40020010
 8009678:	40020028 	.word	0x40020028
 800967c:	40020040 	.word	0x40020040
 8009680:	40020058 	.word	0x40020058
 8009684:	40020070 	.word	0x40020070
 8009688:	40020088 	.word	0x40020088
 800968c:	400200a0 	.word	0x400200a0
 8009690:	400200b8 	.word	0x400200b8
 8009694:	40020410 	.word	0x40020410
 8009698:	40020428 	.word	0x40020428
 800969c:	40020440 	.word	0x40020440
 80096a0:	40020458 	.word	0x40020458
 80096a4:	40020470 	.word	0x40020470
 80096a8:	40020488 	.word	0x40020488
 80096ac:	400204a0 	.word	0x400204a0
 80096b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 80cf 	beq.w	8009874 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80096d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 80ca 	beq.w	8009874 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009702:	647b      	str	r3, [r7, #68]	; 0x44
 8009704:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009708:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e4      	bne.n	80096e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3308      	adds	r3, #8
 800971c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	623b      	str	r3, [r7, #32]
   return(result);
 8009726:	6a3a      	ldr	r2, [r7, #32]
 8009728:	4b55      	ldr	r3, [pc, #340]	; (8009880 <HAL_UART_IRQHandler+0x770>)
 800972a:	4013      	ands	r3, r2
 800972c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3308      	adds	r3, #8
 8009736:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800973a:	633a      	str	r2, [r7, #48]	; 0x30
 800973c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009742:	e841 2300 	strex	r3, r2, [r1]
 8009746:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e3      	bne.n	8009716 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2220      	movs	r2, #32
 8009752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	e853 3f00 	ldrex	r3, [r3]
 800976e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f023 0310 	bic.w	r3, r3, #16
 8009776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	461a      	mov	r2, r3
 8009780:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009784:	61fb      	str	r3, [r7, #28]
 8009786:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	69b9      	ldr	r1, [r7, #24]
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	617b      	str	r3, [r7, #20]
   return(result);
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e4      	bne.n	8009762 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800979e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f88b 	bl	80098c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097aa:	e063      	b.n	8009874 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00e      	beq.n	80097d6 <HAL_UART_IRQHandler+0x6c6>
 80097b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d008      	beq.n	80097d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80097cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 fb24 	bl	800ae1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097d4:	e051      	b.n	800987a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80097d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d014      	beq.n	800980c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d105      	bne.n	80097fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d008      	beq.n	800980c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d03a      	beq.n	8009878 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
    }
    return;
 800980a:	e035      	b.n	8009878 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800980c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009814:	2b00      	cmp	r3, #0
 8009816:	d009      	beq.n	800982c <HAL_UART_IRQHandler+0x71c>
 8009818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800981c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 face 	bl	800adc6 <UART_EndTransmit_IT>
    return;
 800982a:	e026      	b.n	800987a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800982c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d009      	beq.n	800984c <HAL_UART_IRQHandler+0x73c>
 8009838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800983c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 fafd 	bl	800ae44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800984a:	e016      	b.n	800987a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800984c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d010      	beq.n	800987a <HAL_UART_IRQHandler+0x76a>
 8009858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800985c:	2b00      	cmp	r3, #0
 800985e:	da0c      	bge.n	800987a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f001 fae5 	bl	800ae30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009866:	e008      	b.n	800987a <HAL_UART_IRQHandler+0x76a>
      return;
 8009868:	bf00      	nop
 800986a:	e006      	b.n	800987a <HAL_UART_IRQHandler+0x76a>
    return;
 800986c:	bf00      	nop
 800986e:	e004      	b.n	800987a <HAL_UART_IRQHandler+0x76a>
      return;
 8009870:	bf00      	nop
 8009872:	e002      	b.n	800987a <HAL_UART_IRQHandler+0x76a>
      return;
 8009874:	bf00      	nop
 8009876:	e000      	b.n	800987a <HAL_UART_IRQHandler+0x76a>
    return;
 8009878:	bf00      	nop
  }
}
 800987a:	37e8      	adds	r7, #232	; 0xe8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	effffffe 	.word	0xeffffffe

08009884 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098dc:	b092      	sub	sp, #72	; 0x48
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	431a      	orrs	r2, r3
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	431a      	orrs	r2, r3
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	4bbe      	ldr	r3, [pc, #760]	; (8009c00 <UART_SetConfig+0x328>)
 8009908:	4013      	ands	r3, r2
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	6812      	ldr	r2, [r2, #0]
 800990e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009910:	430b      	orrs	r3, r1
 8009912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4ab3      	ldr	r2, [pc, #716]	; (8009c04 <UART_SetConfig+0x32c>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d004      	beq.n	8009944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009940:	4313      	orrs	r3, r2
 8009942:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	4baf      	ldr	r3, [pc, #700]	; (8009c08 <UART_SetConfig+0x330>)
 800994c:	4013      	ands	r3, r2
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	6812      	ldr	r2, [r2, #0]
 8009952:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009954:	430b      	orrs	r3, r1
 8009956:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995e:	f023 010f 	bic.w	r1, r3, #15
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	430a      	orrs	r2, r1
 800996c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4aa6      	ldr	r2, [pc, #664]	; (8009c0c <UART_SetConfig+0x334>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d177      	bne.n	8009a68 <UART_SetConfig+0x190>
 8009978:	4ba5      	ldr	r3, [pc, #660]	; (8009c10 <UART_SetConfig+0x338>)
 800997a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009980:	2b28      	cmp	r3, #40	; 0x28
 8009982:	d86d      	bhi.n	8009a60 <UART_SetConfig+0x188>
 8009984:	a201      	add	r2, pc, #4	; (adr r2, 800998c <UART_SetConfig+0xb4>)
 8009986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998a:	bf00      	nop
 800998c:	08009a31 	.word	0x08009a31
 8009990:	08009a61 	.word	0x08009a61
 8009994:	08009a61 	.word	0x08009a61
 8009998:	08009a61 	.word	0x08009a61
 800999c:	08009a61 	.word	0x08009a61
 80099a0:	08009a61 	.word	0x08009a61
 80099a4:	08009a61 	.word	0x08009a61
 80099a8:	08009a61 	.word	0x08009a61
 80099ac:	08009a39 	.word	0x08009a39
 80099b0:	08009a61 	.word	0x08009a61
 80099b4:	08009a61 	.word	0x08009a61
 80099b8:	08009a61 	.word	0x08009a61
 80099bc:	08009a61 	.word	0x08009a61
 80099c0:	08009a61 	.word	0x08009a61
 80099c4:	08009a61 	.word	0x08009a61
 80099c8:	08009a61 	.word	0x08009a61
 80099cc:	08009a41 	.word	0x08009a41
 80099d0:	08009a61 	.word	0x08009a61
 80099d4:	08009a61 	.word	0x08009a61
 80099d8:	08009a61 	.word	0x08009a61
 80099dc:	08009a61 	.word	0x08009a61
 80099e0:	08009a61 	.word	0x08009a61
 80099e4:	08009a61 	.word	0x08009a61
 80099e8:	08009a61 	.word	0x08009a61
 80099ec:	08009a49 	.word	0x08009a49
 80099f0:	08009a61 	.word	0x08009a61
 80099f4:	08009a61 	.word	0x08009a61
 80099f8:	08009a61 	.word	0x08009a61
 80099fc:	08009a61 	.word	0x08009a61
 8009a00:	08009a61 	.word	0x08009a61
 8009a04:	08009a61 	.word	0x08009a61
 8009a08:	08009a61 	.word	0x08009a61
 8009a0c:	08009a51 	.word	0x08009a51
 8009a10:	08009a61 	.word	0x08009a61
 8009a14:	08009a61 	.word	0x08009a61
 8009a18:	08009a61 	.word	0x08009a61
 8009a1c:	08009a61 	.word	0x08009a61
 8009a20:	08009a61 	.word	0x08009a61
 8009a24:	08009a61 	.word	0x08009a61
 8009a28:	08009a61 	.word	0x08009a61
 8009a2c:	08009a59 	.word	0x08009a59
 8009a30:	2301      	movs	r3, #1
 8009a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a36:	e326      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3e:	e322      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009a40:	2308      	movs	r3, #8
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a46:	e31e      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4e:	e31a      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009a50:	2320      	movs	r3, #32
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a56:	e316      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009a58:	2340      	movs	r3, #64	; 0x40
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5e:	e312      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009a60:	2380      	movs	r3, #128	; 0x80
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a66:	e30e      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a69      	ldr	r2, [pc, #420]	; (8009c14 <UART_SetConfig+0x33c>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d130      	bne.n	8009ad4 <UART_SetConfig+0x1fc>
 8009a72:	4b67      	ldr	r3, [pc, #412]	; (8009c10 <UART_SetConfig+0x338>)
 8009a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a76:	f003 0307 	and.w	r3, r3, #7
 8009a7a:	2b05      	cmp	r3, #5
 8009a7c:	d826      	bhi.n	8009acc <UART_SetConfig+0x1f4>
 8009a7e:	a201      	add	r2, pc, #4	; (adr r2, 8009a84 <UART_SetConfig+0x1ac>)
 8009a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a84:	08009a9d 	.word	0x08009a9d
 8009a88:	08009aa5 	.word	0x08009aa5
 8009a8c:	08009aad 	.word	0x08009aad
 8009a90:	08009ab5 	.word	0x08009ab5
 8009a94:	08009abd 	.word	0x08009abd
 8009a98:	08009ac5 	.word	0x08009ac5
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa2:	e2f0      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009aa4:	2304      	movs	r3, #4
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aaa:	e2ec      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009aac:	2308      	movs	r3, #8
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab2:	e2e8      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ab4:	2310      	movs	r3, #16
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aba:	e2e4      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009abc:	2320      	movs	r3, #32
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac2:	e2e0      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ac4:	2340      	movs	r3, #64	; 0x40
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aca:	e2dc      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009acc:	2380      	movs	r3, #128	; 0x80
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad2:	e2d8      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a4f      	ldr	r2, [pc, #316]	; (8009c18 <UART_SetConfig+0x340>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d130      	bne.n	8009b40 <UART_SetConfig+0x268>
 8009ade:	4b4c      	ldr	r3, [pc, #304]	; (8009c10 <UART_SetConfig+0x338>)
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	2b05      	cmp	r3, #5
 8009ae8:	d826      	bhi.n	8009b38 <UART_SetConfig+0x260>
 8009aea:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <UART_SetConfig+0x218>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b09 	.word	0x08009b09
 8009af4:	08009b11 	.word	0x08009b11
 8009af8:	08009b19 	.word	0x08009b19
 8009afc:	08009b21 	.word	0x08009b21
 8009b00:	08009b29 	.word	0x08009b29
 8009b04:	08009b31 	.word	0x08009b31
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0e:	e2ba      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b10:	2304      	movs	r3, #4
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b16:	e2b6      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b18:	2308      	movs	r3, #8
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1e:	e2b2      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b20:	2310      	movs	r3, #16
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b26:	e2ae      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b28:	2320      	movs	r3, #32
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2e:	e2aa      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b30:	2340      	movs	r3, #64	; 0x40
 8009b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b36:	e2a6      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b38:	2380      	movs	r3, #128	; 0x80
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3e:	e2a2      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a35      	ldr	r2, [pc, #212]	; (8009c1c <UART_SetConfig+0x344>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d130      	bne.n	8009bac <UART_SetConfig+0x2d4>
 8009b4a:	4b31      	ldr	r3, [pc, #196]	; (8009c10 <UART_SetConfig+0x338>)
 8009b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4e:	f003 0307 	and.w	r3, r3, #7
 8009b52:	2b05      	cmp	r3, #5
 8009b54:	d826      	bhi.n	8009ba4 <UART_SetConfig+0x2cc>
 8009b56:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <UART_SetConfig+0x284>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009b75 	.word	0x08009b75
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	08009b85 	.word	0x08009b85
 8009b68:	08009b8d 	.word	0x08009b8d
 8009b6c:	08009b95 	.word	0x08009b95
 8009b70:	08009b9d 	.word	0x08009b9d
 8009b74:	2300      	movs	r3, #0
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7a:	e284      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b7c:	2304      	movs	r3, #4
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b82:	e280      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b84:	2308      	movs	r3, #8
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8a:	e27c      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b92:	e278      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b94:	2320      	movs	r3, #32
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9a:	e274      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009b9c:	2340      	movs	r3, #64	; 0x40
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba2:	e270      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ba4:	2380      	movs	r3, #128	; 0x80
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009baa:	e26c      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <UART_SetConfig+0x348>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d142      	bne.n	8009c3c <UART_SetConfig+0x364>
 8009bb6:	4b16      	ldr	r3, [pc, #88]	; (8009c10 <UART_SetConfig+0x338>)
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bba:	f003 0307 	and.w	r3, r3, #7
 8009bbe:	2b05      	cmp	r3, #5
 8009bc0:	d838      	bhi.n	8009c34 <UART_SetConfig+0x35c>
 8009bc2:	a201      	add	r2, pc, #4	; (adr r2, 8009bc8 <UART_SetConfig+0x2f0>)
 8009bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc8:	08009be1 	.word	0x08009be1
 8009bcc:	08009be9 	.word	0x08009be9
 8009bd0:	08009bf1 	.word	0x08009bf1
 8009bd4:	08009bf9 	.word	0x08009bf9
 8009bd8:	08009c25 	.word	0x08009c25
 8009bdc:	08009c2d 	.word	0x08009c2d
 8009be0:	2300      	movs	r3, #0
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be6:	e24e      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009be8:	2304      	movs	r3, #4
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bee:	e24a      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009bf0:	2308      	movs	r3, #8
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf6:	e246      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009bf8:	2310      	movs	r3, #16
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfe:	e242      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009c00:	cfff69f3 	.word	0xcfff69f3
 8009c04:	58000c00 	.word	0x58000c00
 8009c08:	11fff4ff 	.word	0x11fff4ff
 8009c0c:	40011000 	.word	0x40011000
 8009c10:	58024400 	.word	0x58024400
 8009c14:	40004400 	.word	0x40004400
 8009c18:	40004800 	.word	0x40004800
 8009c1c:	40004c00 	.word	0x40004c00
 8009c20:	40005000 	.word	0x40005000
 8009c24:	2320      	movs	r3, #32
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2a:	e22c      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009c2c:	2340      	movs	r3, #64	; 0x40
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c32:	e228      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009c34:	2380      	movs	r3, #128	; 0x80
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3a:	e224      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4ab1      	ldr	r2, [pc, #708]	; (8009f08 <UART_SetConfig+0x630>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d176      	bne.n	8009d34 <UART_SetConfig+0x45c>
 8009c46:	4bb1      	ldr	r3, [pc, #708]	; (8009f0c <UART_SetConfig+0x634>)
 8009c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c4e:	2b28      	cmp	r3, #40	; 0x28
 8009c50:	d86c      	bhi.n	8009d2c <UART_SetConfig+0x454>
 8009c52:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <UART_SetConfig+0x380>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009cfd 	.word	0x08009cfd
 8009c5c:	08009d2d 	.word	0x08009d2d
 8009c60:	08009d2d 	.word	0x08009d2d
 8009c64:	08009d2d 	.word	0x08009d2d
 8009c68:	08009d2d 	.word	0x08009d2d
 8009c6c:	08009d2d 	.word	0x08009d2d
 8009c70:	08009d2d 	.word	0x08009d2d
 8009c74:	08009d2d 	.word	0x08009d2d
 8009c78:	08009d05 	.word	0x08009d05
 8009c7c:	08009d2d 	.word	0x08009d2d
 8009c80:	08009d2d 	.word	0x08009d2d
 8009c84:	08009d2d 	.word	0x08009d2d
 8009c88:	08009d2d 	.word	0x08009d2d
 8009c8c:	08009d2d 	.word	0x08009d2d
 8009c90:	08009d2d 	.word	0x08009d2d
 8009c94:	08009d2d 	.word	0x08009d2d
 8009c98:	08009d0d 	.word	0x08009d0d
 8009c9c:	08009d2d 	.word	0x08009d2d
 8009ca0:	08009d2d 	.word	0x08009d2d
 8009ca4:	08009d2d 	.word	0x08009d2d
 8009ca8:	08009d2d 	.word	0x08009d2d
 8009cac:	08009d2d 	.word	0x08009d2d
 8009cb0:	08009d2d 	.word	0x08009d2d
 8009cb4:	08009d2d 	.word	0x08009d2d
 8009cb8:	08009d15 	.word	0x08009d15
 8009cbc:	08009d2d 	.word	0x08009d2d
 8009cc0:	08009d2d 	.word	0x08009d2d
 8009cc4:	08009d2d 	.word	0x08009d2d
 8009cc8:	08009d2d 	.word	0x08009d2d
 8009ccc:	08009d2d 	.word	0x08009d2d
 8009cd0:	08009d2d 	.word	0x08009d2d
 8009cd4:	08009d2d 	.word	0x08009d2d
 8009cd8:	08009d1d 	.word	0x08009d1d
 8009cdc:	08009d2d 	.word	0x08009d2d
 8009ce0:	08009d2d 	.word	0x08009d2d
 8009ce4:	08009d2d 	.word	0x08009d2d
 8009ce8:	08009d2d 	.word	0x08009d2d
 8009cec:	08009d2d 	.word	0x08009d2d
 8009cf0:	08009d2d 	.word	0x08009d2d
 8009cf4:	08009d2d 	.word	0x08009d2d
 8009cf8:	08009d25 	.word	0x08009d25
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d02:	e1c0      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d04:	2304      	movs	r3, #4
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0a:	e1bc      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d12:	e1b8      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d14:	2310      	movs	r3, #16
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d1a:	e1b4      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d1c:	2320      	movs	r3, #32
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d22:	e1b0      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d24:	2340      	movs	r3, #64	; 0x40
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d2a:	e1ac      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d2c:	2380      	movs	r3, #128	; 0x80
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d32:	e1a8      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a75      	ldr	r2, [pc, #468]	; (8009f10 <UART_SetConfig+0x638>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d130      	bne.n	8009da0 <UART_SetConfig+0x4c8>
 8009d3e:	4b73      	ldr	r3, [pc, #460]	; (8009f0c <UART_SetConfig+0x634>)
 8009d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	2b05      	cmp	r3, #5
 8009d48:	d826      	bhi.n	8009d98 <UART_SetConfig+0x4c0>
 8009d4a:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <UART_SetConfig+0x478>)
 8009d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d50:	08009d69 	.word	0x08009d69
 8009d54:	08009d71 	.word	0x08009d71
 8009d58:	08009d79 	.word	0x08009d79
 8009d5c:	08009d81 	.word	0x08009d81
 8009d60:	08009d89 	.word	0x08009d89
 8009d64:	08009d91 	.word	0x08009d91
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6e:	e18a      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d70:	2304      	movs	r3, #4
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d76:	e186      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d7e:	e182      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d80:	2310      	movs	r3, #16
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d86:	e17e      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d88:	2320      	movs	r3, #32
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d8e:	e17a      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d90:	2340      	movs	r3, #64	; 0x40
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d96:	e176      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009d98:	2380      	movs	r3, #128	; 0x80
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9e:	e172      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a5b      	ldr	r2, [pc, #364]	; (8009f14 <UART_SetConfig+0x63c>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d130      	bne.n	8009e0c <UART_SetConfig+0x534>
 8009daa:	4b58      	ldr	r3, [pc, #352]	; (8009f0c <UART_SetConfig+0x634>)
 8009dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	2b05      	cmp	r3, #5
 8009db4:	d826      	bhi.n	8009e04 <UART_SetConfig+0x52c>
 8009db6:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <UART_SetConfig+0x4e4>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dd5 	.word	0x08009dd5
 8009dc0:	08009ddd 	.word	0x08009ddd
 8009dc4:	08009de5 	.word	0x08009de5
 8009dc8:	08009ded 	.word	0x08009ded
 8009dcc:	08009df5 	.word	0x08009df5
 8009dd0:	08009dfd 	.word	0x08009dfd
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dda:	e154      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ddc:	2304      	movs	r3, #4
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de2:	e150      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009de4:	2308      	movs	r3, #8
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dea:	e14c      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009dec:	2310      	movs	r3, #16
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df2:	e148      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009df4:	2320      	movs	r3, #32
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dfa:	e144      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009dfc:	2340      	movs	r3, #64	; 0x40
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e02:	e140      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009e04:	2380      	movs	r3, #128	; 0x80
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0a:	e13c      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a41      	ldr	r2, [pc, #260]	; (8009f18 <UART_SetConfig+0x640>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	f040 8082 	bne.w	8009f1c <UART_SetConfig+0x644>
 8009e18:	4b3c      	ldr	r3, [pc, #240]	; (8009f0c <UART_SetConfig+0x634>)
 8009e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e20:	2b28      	cmp	r3, #40	; 0x28
 8009e22:	d86d      	bhi.n	8009f00 <UART_SetConfig+0x628>
 8009e24:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <UART_SetConfig+0x554>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009ed1 	.word	0x08009ed1
 8009e30:	08009f01 	.word	0x08009f01
 8009e34:	08009f01 	.word	0x08009f01
 8009e38:	08009f01 	.word	0x08009f01
 8009e3c:	08009f01 	.word	0x08009f01
 8009e40:	08009f01 	.word	0x08009f01
 8009e44:	08009f01 	.word	0x08009f01
 8009e48:	08009f01 	.word	0x08009f01
 8009e4c:	08009ed9 	.word	0x08009ed9
 8009e50:	08009f01 	.word	0x08009f01
 8009e54:	08009f01 	.word	0x08009f01
 8009e58:	08009f01 	.word	0x08009f01
 8009e5c:	08009f01 	.word	0x08009f01
 8009e60:	08009f01 	.word	0x08009f01
 8009e64:	08009f01 	.word	0x08009f01
 8009e68:	08009f01 	.word	0x08009f01
 8009e6c:	08009ee1 	.word	0x08009ee1
 8009e70:	08009f01 	.word	0x08009f01
 8009e74:	08009f01 	.word	0x08009f01
 8009e78:	08009f01 	.word	0x08009f01
 8009e7c:	08009f01 	.word	0x08009f01
 8009e80:	08009f01 	.word	0x08009f01
 8009e84:	08009f01 	.word	0x08009f01
 8009e88:	08009f01 	.word	0x08009f01
 8009e8c:	08009ee9 	.word	0x08009ee9
 8009e90:	08009f01 	.word	0x08009f01
 8009e94:	08009f01 	.word	0x08009f01
 8009e98:	08009f01 	.word	0x08009f01
 8009e9c:	08009f01 	.word	0x08009f01
 8009ea0:	08009f01 	.word	0x08009f01
 8009ea4:	08009f01 	.word	0x08009f01
 8009ea8:	08009f01 	.word	0x08009f01
 8009eac:	08009ef1 	.word	0x08009ef1
 8009eb0:	08009f01 	.word	0x08009f01
 8009eb4:	08009f01 	.word	0x08009f01
 8009eb8:	08009f01 	.word	0x08009f01
 8009ebc:	08009f01 	.word	0x08009f01
 8009ec0:	08009f01 	.word	0x08009f01
 8009ec4:	08009f01 	.word	0x08009f01
 8009ec8:	08009f01 	.word	0x08009f01
 8009ecc:	08009ef9 	.word	0x08009ef9
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed6:	e0d6      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ed8:	2304      	movs	r3, #4
 8009eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ede:	e0d2      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ee0:	2308      	movs	r3, #8
 8009ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee6:	e0ce      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ee8:	2310      	movs	r3, #16
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eee:	e0ca      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ef0:	2320      	movs	r3, #32
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ef6:	e0c6      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ef8:	2340      	movs	r3, #64	; 0x40
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efe:	e0c2      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009f00:	2380      	movs	r3, #128	; 0x80
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f06:	e0be      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009f08:	40011400 	.word	0x40011400
 8009f0c:	58024400 	.word	0x58024400
 8009f10:	40007800 	.word	0x40007800
 8009f14:	40007c00 	.word	0x40007c00
 8009f18:	40011800 	.word	0x40011800
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4aad      	ldr	r2, [pc, #692]	; (800a1d8 <UART_SetConfig+0x900>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d176      	bne.n	800a014 <UART_SetConfig+0x73c>
 8009f26:	4bad      	ldr	r3, [pc, #692]	; (800a1dc <UART_SetConfig+0x904>)
 8009f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f2e:	2b28      	cmp	r3, #40	; 0x28
 8009f30:	d86c      	bhi.n	800a00c <UART_SetConfig+0x734>
 8009f32:	a201      	add	r2, pc, #4	; (adr r2, 8009f38 <UART_SetConfig+0x660>)
 8009f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f38:	08009fdd 	.word	0x08009fdd
 8009f3c:	0800a00d 	.word	0x0800a00d
 8009f40:	0800a00d 	.word	0x0800a00d
 8009f44:	0800a00d 	.word	0x0800a00d
 8009f48:	0800a00d 	.word	0x0800a00d
 8009f4c:	0800a00d 	.word	0x0800a00d
 8009f50:	0800a00d 	.word	0x0800a00d
 8009f54:	0800a00d 	.word	0x0800a00d
 8009f58:	08009fe5 	.word	0x08009fe5
 8009f5c:	0800a00d 	.word	0x0800a00d
 8009f60:	0800a00d 	.word	0x0800a00d
 8009f64:	0800a00d 	.word	0x0800a00d
 8009f68:	0800a00d 	.word	0x0800a00d
 8009f6c:	0800a00d 	.word	0x0800a00d
 8009f70:	0800a00d 	.word	0x0800a00d
 8009f74:	0800a00d 	.word	0x0800a00d
 8009f78:	08009fed 	.word	0x08009fed
 8009f7c:	0800a00d 	.word	0x0800a00d
 8009f80:	0800a00d 	.word	0x0800a00d
 8009f84:	0800a00d 	.word	0x0800a00d
 8009f88:	0800a00d 	.word	0x0800a00d
 8009f8c:	0800a00d 	.word	0x0800a00d
 8009f90:	0800a00d 	.word	0x0800a00d
 8009f94:	0800a00d 	.word	0x0800a00d
 8009f98:	08009ff5 	.word	0x08009ff5
 8009f9c:	0800a00d 	.word	0x0800a00d
 8009fa0:	0800a00d 	.word	0x0800a00d
 8009fa4:	0800a00d 	.word	0x0800a00d
 8009fa8:	0800a00d 	.word	0x0800a00d
 8009fac:	0800a00d 	.word	0x0800a00d
 8009fb0:	0800a00d 	.word	0x0800a00d
 8009fb4:	0800a00d 	.word	0x0800a00d
 8009fb8:	08009ffd 	.word	0x08009ffd
 8009fbc:	0800a00d 	.word	0x0800a00d
 8009fc0:	0800a00d 	.word	0x0800a00d
 8009fc4:	0800a00d 	.word	0x0800a00d
 8009fc8:	0800a00d 	.word	0x0800a00d
 8009fcc:	0800a00d 	.word	0x0800a00d
 8009fd0:	0800a00d 	.word	0x0800a00d
 8009fd4:	0800a00d 	.word	0x0800a00d
 8009fd8:	0800a005 	.word	0x0800a005
 8009fdc:	2301      	movs	r3, #1
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe2:	e050      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fea:	e04c      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009fec:	2308      	movs	r3, #8
 8009fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ff2:	e048      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ff4:	2310      	movs	r3, #16
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ffa:	e044      	b.n	800a086 <UART_SetConfig+0x7ae>
 8009ffc:	2320      	movs	r3, #32
 8009ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a002:	e040      	b.n	800a086 <UART_SetConfig+0x7ae>
 800a004:	2340      	movs	r3, #64	; 0x40
 800a006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a00a:	e03c      	b.n	800a086 <UART_SetConfig+0x7ae>
 800a00c:	2380      	movs	r3, #128	; 0x80
 800a00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a012:	e038      	b.n	800a086 <UART_SetConfig+0x7ae>
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a71      	ldr	r2, [pc, #452]	; (800a1e0 <UART_SetConfig+0x908>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d130      	bne.n	800a080 <UART_SetConfig+0x7a8>
 800a01e:	4b6f      	ldr	r3, [pc, #444]	; (800a1dc <UART_SetConfig+0x904>)
 800a020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a022:	f003 0307 	and.w	r3, r3, #7
 800a026:	2b05      	cmp	r3, #5
 800a028:	d826      	bhi.n	800a078 <UART_SetConfig+0x7a0>
 800a02a:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <UART_SetConfig+0x758>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a049 	.word	0x0800a049
 800a034:	0800a051 	.word	0x0800a051
 800a038:	0800a059 	.word	0x0800a059
 800a03c:	0800a061 	.word	0x0800a061
 800a040:	0800a069 	.word	0x0800a069
 800a044:	0800a071 	.word	0x0800a071
 800a048:	2302      	movs	r3, #2
 800a04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a04e:	e01a      	b.n	800a086 <UART_SetConfig+0x7ae>
 800a050:	2304      	movs	r3, #4
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a056:	e016      	b.n	800a086 <UART_SetConfig+0x7ae>
 800a058:	2308      	movs	r3, #8
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a05e:	e012      	b.n	800a086 <UART_SetConfig+0x7ae>
 800a060:	2310      	movs	r3, #16
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a066:	e00e      	b.n	800a086 <UART_SetConfig+0x7ae>
 800a068:	2320      	movs	r3, #32
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a06e:	e00a      	b.n	800a086 <UART_SetConfig+0x7ae>
 800a070:	2340      	movs	r3, #64	; 0x40
 800a072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a076:	e006      	b.n	800a086 <UART_SetConfig+0x7ae>
 800a078:	2380      	movs	r3, #128	; 0x80
 800a07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a07e:	e002      	b.n	800a086 <UART_SetConfig+0x7ae>
 800a080:	2380      	movs	r3, #128	; 0x80
 800a082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a55      	ldr	r2, [pc, #340]	; (800a1e0 <UART_SetConfig+0x908>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	f040 80f8 	bne.w	800a282 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a092:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a096:	2b20      	cmp	r3, #32
 800a098:	dc46      	bgt.n	800a128 <UART_SetConfig+0x850>
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	db75      	blt.n	800a18a <UART_SetConfig+0x8b2>
 800a09e:	3b02      	subs	r3, #2
 800a0a0:	2b1e      	cmp	r3, #30
 800a0a2:	d872      	bhi.n	800a18a <UART_SetConfig+0x8b2>
 800a0a4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ac <UART_SetConfig+0x7d4>)
 800a0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0aa:	bf00      	nop
 800a0ac:	0800a12f 	.word	0x0800a12f
 800a0b0:	0800a18b 	.word	0x0800a18b
 800a0b4:	0800a137 	.word	0x0800a137
 800a0b8:	0800a18b 	.word	0x0800a18b
 800a0bc:	0800a18b 	.word	0x0800a18b
 800a0c0:	0800a18b 	.word	0x0800a18b
 800a0c4:	0800a147 	.word	0x0800a147
 800a0c8:	0800a18b 	.word	0x0800a18b
 800a0cc:	0800a18b 	.word	0x0800a18b
 800a0d0:	0800a18b 	.word	0x0800a18b
 800a0d4:	0800a18b 	.word	0x0800a18b
 800a0d8:	0800a18b 	.word	0x0800a18b
 800a0dc:	0800a18b 	.word	0x0800a18b
 800a0e0:	0800a18b 	.word	0x0800a18b
 800a0e4:	0800a157 	.word	0x0800a157
 800a0e8:	0800a18b 	.word	0x0800a18b
 800a0ec:	0800a18b 	.word	0x0800a18b
 800a0f0:	0800a18b 	.word	0x0800a18b
 800a0f4:	0800a18b 	.word	0x0800a18b
 800a0f8:	0800a18b 	.word	0x0800a18b
 800a0fc:	0800a18b 	.word	0x0800a18b
 800a100:	0800a18b 	.word	0x0800a18b
 800a104:	0800a18b 	.word	0x0800a18b
 800a108:	0800a18b 	.word	0x0800a18b
 800a10c:	0800a18b 	.word	0x0800a18b
 800a110:	0800a18b 	.word	0x0800a18b
 800a114:	0800a18b 	.word	0x0800a18b
 800a118:	0800a18b 	.word	0x0800a18b
 800a11c:	0800a18b 	.word	0x0800a18b
 800a120:	0800a18b 	.word	0x0800a18b
 800a124:	0800a17d 	.word	0x0800a17d
 800a128:	2b40      	cmp	r3, #64	; 0x40
 800a12a:	d02a      	beq.n	800a182 <UART_SetConfig+0x8aa>
 800a12c:	e02d      	b.n	800a18a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a12e:	f7fd fb0f 	bl	8007750 <HAL_RCCEx_GetD3PCLK1Freq>
 800a132:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a134:	e02f      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fd fb1e 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a144:	e027      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a146:	f107 0318 	add.w	r3, r7, #24
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fd fc6a 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a154:	e01f      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a156:	4b21      	ldr	r3, [pc, #132]	; (800a1dc <UART_SetConfig+0x904>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d009      	beq.n	800a176 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a162:	4b1e      	ldr	r3, [pc, #120]	; (800a1dc <UART_SetConfig+0x904>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	08db      	lsrs	r3, r3, #3
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	4a1d      	ldr	r2, [pc, #116]	; (800a1e4 <UART_SetConfig+0x90c>)
 800a16e:	fa22 f303 	lsr.w	r3, r2, r3
 800a172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a174:	e00f      	b.n	800a196 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a176:	4b1b      	ldr	r3, [pc, #108]	; (800a1e4 <UART_SetConfig+0x90c>)
 800a178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a17a:	e00c      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a17c:	4b1a      	ldr	r3, [pc, #104]	; (800a1e8 <UART_SetConfig+0x910>)
 800a17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a180:	e009      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a188:	e005      	b.n	800a196 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a194:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 81ee 	beq.w	800a57a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	4a12      	ldr	r2, [pc, #72]	; (800a1ec <UART_SetConfig+0x914>)
 800a1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1b0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	005b      	lsls	r3, r3, #1
 800a1ba:	4413      	add	r3, r2
 800a1bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d305      	bcc.n	800a1ce <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d910      	bls.n	800a1f0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1d4:	e1d1      	b.n	800a57a <UART_SetConfig+0xca2>
 800a1d6:	bf00      	nop
 800a1d8:	40011c00 	.word	0x40011c00
 800a1dc:	58024400 	.word	0x58024400
 800a1e0:	58000c00 	.word	0x58000c00
 800a1e4:	03d09000 	.word	0x03d09000
 800a1e8:	003d0900 	.word	0x003d0900
 800a1ec:	0800b0e8 	.word	0x0800b0e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	60bb      	str	r3, [r7, #8]
 800a1f6:	60fa      	str	r2, [r7, #12]
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	4ac0      	ldr	r2, [pc, #768]	; (800a500 <UART_SetConfig+0xc28>)
 800a1fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a202:	b29b      	uxth	r3, r3
 800a204:	2200      	movs	r2, #0
 800a206:	603b      	str	r3, [r7, #0]
 800a208:	607a      	str	r2, [r7, #4]
 800a20a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a20e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a212:	f7f6 f87b 	bl	800030c <__aeabi_uldivmod>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4610      	mov	r0, r2
 800a21c:	4619      	mov	r1, r3
 800a21e:	f04f 0200 	mov.w	r2, #0
 800a222:	f04f 0300 	mov.w	r3, #0
 800a226:	020b      	lsls	r3, r1, #8
 800a228:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a22c:	0202      	lsls	r2, r0, #8
 800a22e:	6979      	ldr	r1, [r7, #20]
 800a230:	6849      	ldr	r1, [r1, #4]
 800a232:	0849      	lsrs	r1, r1, #1
 800a234:	2000      	movs	r0, #0
 800a236:	460c      	mov	r4, r1
 800a238:	4605      	mov	r5, r0
 800a23a:	eb12 0804 	adds.w	r8, r2, r4
 800a23e:	eb43 0905 	adc.w	r9, r3, r5
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	469a      	mov	sl, r3
 800a24a:	4693      	mov	fp, r2
 800a24c:	4652      	mov	r2, sl
 800a24e:	465b      	mov	r3, fp
 800a250:	4640      	mov	r0, r8
 800a252:	4649      	mov	r1, r9
 800a254:	f7f6 f85a 	bl	800030c <__aeabi_uldivmod>
 800a258:	4602      	mov	r2, r0
 800a25a:	460b      	mov	r3, r1
 800a25c:	4613      	mov	r3, r2
 800a25e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a266:	d308      	bcc.n	800a27a <UART_SetConfig+0x9a2>
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a26e:	d204      	bcs.n	800a27a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a276:	60da      	str	r2, [r3, #12]
 800a278:	e17f      	b.n	800a57a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a280:	e17b      	b.n	800a57a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a28a:	f040 80bd 	bne.w	800a408 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a28e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a292:	2b20      	cmp	r3, #32
 800a294:	dc48      	bgt.n	800a328 <UART_SetConfig+0xa50>
 800a296:	2b00      	cmp	r3, #0
 800a298:	db7b      	blt.n	800a392 <UART_SetConfig+0xaba>
 800a29a:	2b20      	cmp	r3, #32
 800a29c:	d879      	bhi.n	800a392 <UART_SetConfig+0xaba>
 800a29e:	a201      	add	r2, pc, #4	; (adr r2, 800a2a4 <UART_SetConfig+0x9cc>)
 800a2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a4:	0800a32f 	.word	0x0800a32f
 800a2a8:	0800a337 	.word	0x0800a337
 800a2ac:	0800a393 	.word	0x0800a393
 800a2b0:	0800a393 	.word	0x0800a393
 800a2b4:	0800a33f 	.word	0x0800a33f
 800a2b8:	0800a393 	.word	0x0800a393
 800a2bc:	0800a393 	.word	0x0800a393
 800a2c0:	0800a393 	.word	0x0800a393
 800a2c4:	0800a34f 	.word	0x0800a34f
 800a2c8:	0800a393 	.word	0x0800a393
 800a2cc:	0800a393 	.word	0x0800a393
 800a2d0:	0800a393 	.word	0x0800a393
 800a2d4:	0800a393 	.word	0x0800a393
 800a2d8:	0800a393 	.word	0x0800a393
 800a2dc:	0800a393 	.word	0x0800a393
 800a2e0:	0800a393 	.word	0x0800a393
 800a2e4:	0800a35f 	.word	0x0800a35f
 800a2e8:	0800a393 	.word	0x0800a393
 800a2ec:	0800a393 	.word	0x0800a393
 800a2f0:	0800a393 	.word	0x0800a393
 800a2f4:	0800a393 	.word	0x0800a393
 800a2f8:	0800a393 	.word	0x0800a393
 800a2fc:	0800a393 	.word	0x0800a393
 800a300:	0800a393 	.word	0x0800a393
 800a304:	0800a393 	.word	0x0800a393
 800a308:	0800a393 	.word	0x0800a393
 800a30c:	0800a393 	.word	0x0800a393
 800a310:	0800a393 	.word	0x0800a393
 800a314:	0800a393 	.word	0x0800a393
 800a318:	0800a393 	.word	0x0800a393
 800a31c:	0800a393 	.word	0x0800a393
 800a320:	0800a393 	.word	0x0800a393
 800a324:	0800a385 	.word	0x0800a385
 800a328:	2b40      	cmp	r3, #64	; 0x40
 800a32a:	d02e      	beq.n	800a38a <UART_SetConfig+0xab2>
 800a32c:	e031      	b.n	800a392 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a32e:	f7fc f843 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 800a332:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a334:	e033      	b.n	800a39e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a336:	f7fc f855 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
 800a33a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a33c:	e02f      	b.n	800a39e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a33e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a342:	4618      	mov	r0, r3
 800a344:	f7fd fa1a 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a34c:	e027      	b.n	800a39e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a34e:	f107 0318 	add.w	r3, r7, #24
 800a352:	4618      	mov	r0, r3
 800a354:	f7fd fb66 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a35c:	e01f      	b.n	800a39e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a35e:	4b69      	ldr	r3, [pc, #420]	; (800a504 <UART_SetConfig+0xc2c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0320 	and.w	r3, r3, #32
 800a366:	2b00      	cmp	r3, #0
 800a368:	d009      	beq.n	800a37e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a36a:	4b66      	ldr	r3, [pc, #408]	; (800a504 <UART_SetConfig+0xc2c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	08db      	lsrs	r3, r3, #3
 800a370:	f003 0303 	and.w	r3, r3, #3
 800a374:	4a64      	ldr	r2, [pc, #400]	; (800a508 <UART_SetConfig+0xc30>)
 800a376:	fa22 f303 	lsr.w	r3, r2, r3
 800a37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a37c:	e00f      	b.n	800a39e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a37e:	4b62      	ldr	r3, [pc, #392]	; (800a508 <UART_SetConfig+0xc30>)
 800a380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a382:	e00c      	b.n	800a39e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a384:	4b61      	ldr	r3, [pc, #388]	; (800a50c <UART_SetConfig+0xc34>)
 800a386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a388:	e009      	b.n	800a39e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a38a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a390:	e005      	b.n	800a39e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a392:	2300      	movs	r3, #0
 800a394:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a39c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 80ea 	beq.w	800a57a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	4a55      	ldr	r2, [pc, #340]	; (800a500 <UART_SetConfig+0xc28>)
 800a3ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3b8:	005a      	lsls	r2, r3, #1
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	085b      	lsrs	r3, r3, #1
 800a3c0:	441a      	add	r2, r3
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	2b0f      	cmp	r3, #15
 800a3d0:	d916      	bls.n	800a400 <UART_SetConfig+0xb28>
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3d8:	d212      	bcs.n	800a400 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	f023 030f 	bic.w	r3, r3, #15
 800a3e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e6:	085b      	lsrs	r3, r3, #1
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	f003 0307 	and.w	r3, r3, #7
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a3fc:	60da      	str	r2, [r3, #12]
 800a3fe:	e0bc      	b.n	800a57a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a406:	e0b8      	b.n	800a57a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a408:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a40c:	2b20      	cmp	r3, #32
 800a40e:	dc4b      	bgt.n	800a4a8 <UART_SetConfig+0xbd0>
 800a410:	2b00      	cmp	r3, #0
 800a412:	f2c0 8087 	blt.w	800a524 <UART_SetConfig+0xc4c>
 800a416:	2b20      	cmp	r3, #32
 800a418:	f200 8084 	bhi.w	800a524 <UART_SetConfig+0xc4c>
 800a41c:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <UART_SetConfig+0xb4c>)
 800a41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a422:	bf00      	nop
 800a424:	0800a4af 	.word	0x0800a4af
 800a428:	0800a4b7 	.word	0x0800a4b7
 800a42c:	0800a525 	.word	0x0800a525
 800a430:	0800a525 	.word	0x0800a525
 800a434:	0800a4bf 	.word	0x0800a4bf
 800a438:	0800a525 	.word	0x0800a525
 800a43c:	0800a525 	.word	0x0800a525
 800a440:	0800a525 	.word	0x0800a525
 800a444:	0800a4cf 	.word	0x0800a4cf
 800a448:	0800a525 	.word	0x0800a525
 800a44c:	0800a525 	.word	0x0800a525
 800a450:	0800a525 	.word	0x0800a525
 800a454:	0800a525 	.word	0x0800a525
 800a458:	0800a525 	.word	0x0800a525
 800a45c:	0800a525 	.word	0x0800a525
 800a460:	0800a525 	.word	0x0800a525
 800a464:	0800a4df 	.word	0x0800a4df
 800a468:	0800a525 	.word	0x0800a525
 800a46c:	0800a525 	.word	0x0800a525
 800a470:	0800a525 	.word	0x0800a525
 800a474:	0800a525 	.word	0x0800a525
 800a478:	0800a525 	.word	0x0800a525
 800a47c:	0800a525 	.word	0x0800a525
 800a480:	0800a525 	.word	0x0800a525
 800a484:	0800a525 	.word	0x0800a525
 800a488:	0800a525 	.word	0x0800a525
 800a48c:	0800a525 	.word	0x0800a525
 800a490:	0800a525 	.word	0x0800a525
 800a494:	0800a525 	.word	0x0800a525
 800a498:	0800a525 	.word	0x0800a525
 800a49c:	0800a525 	.word	0x0800a525
 800a4a0:	0800a525 	.word	0x0800a525
 800a4a4:	0800a517 	.word	0x0800a517
 800a4a8:	2b40      	cmp	r3, #64	; 0x40
 800a4aa:	d037      	beq.n	800a51c <UART_SetConfig+0xc44>
 800a4ac:	e03a      	b.n	800a524 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4ae:	f7fb ff83 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 800a4b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4b4:	e03c      	b.n	800a530 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4b6:	f7fb ff95 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
 800a4ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4bc:	e038      	b.n	800a530 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fd f95a 	bl	800777c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4cc:	e030      	b.n	800a530 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4ce:	f107 0318 	add.w	r3, r7, #24
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fd faa6 	bl	8007a24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4dc:	e028      	b.n	800a530 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4de:	4b09      	ldr	r3, [pc, #36]	; (800a504 <UART_SetConfig+0xc2c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0320 	and.w	r3, r3, #32
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d012      	beq.n	800a510 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4ea:	4b06      	ldr	r3, [pc, #24]	; (800a504 <UART_SetConfig+0xc2c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	08db      	lsrs	r3, r3, #3
 800a4f0:	f003 0303 	and.w	r3, r3, #3
 800a4f4:	4a04      	ldr	r2, [pc, #16]	; (800a508 <UART_SetConfig+0xc30>)
 800a4f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4fc:	e018      	b.n	800a530 <UART_SetConfig+0xc58>
 800a4fe:	bf00      	nop
 800a500:	0800b0e8 	.word	0x0800b0e8
 800a504:	58024400 	.word	0x58024400
 800a508:	03d09000 	.word	0x03d09000
 800a50c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a510:	4b24      	ldr	r3, [pc, #144]	; (800a5a4 <UART_SetConfig+0xccc>)
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a514:	e00c      	b.n	800a530 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a516:	4b24      	ldr	r3, [pc, #144]	; (800a5a8 <UART_SetConfig+0xcd0>)
 800a518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a51a:	e009      	b.n	800a530 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a51c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a522:	e005      	b.n	800a530 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a52e:	bf00      	nop
    }

    if (pclk != 0U)
 800a530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a532:	2b00      	cmp	r3, #0
 800a534:	d021      	beq.n	800a57a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	4a1c      	ldr	r2, [pc, #112]	; (800a5ac <UART_SetConfig+0xcd4>)
 800a53c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a540:	461a      	mov	r2, r3
 800a542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a544:	fbb3 f2f2 	udiv	r2, r3, r2
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	085b      	lsrs	r3, r3, #1
 800a54e:	441a      	add	r2, r3
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	fbb2 f3f3 	udiv	r3, r2, r3
 800a558:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	2b0f      	cmp	r3, #15
 800a55e:	d909      	bls.n	800a574 <UART_SetConfig+0xc9c>
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a566:	d205      	bcs.n	800a574 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	60da      	str	r2, [r3, #12]
 800a572:	e002      	b.n	800a57a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2201      	movs	r2, #1
 800a586:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2200      	movs	r2, #0
 800a58e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	2200      	movs	r2, #0
 800a594:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a596:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3748      	adds	r7, #72	; 0x48
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5a4:	03d09000 	.word	0x03d09000
 800a5a8:	003d0900 	.word	0x003d0900
 800a5ac:	0800b0e8 	.word	0x0800b0e8

0800a5b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00a      	beq.n	800a5da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	430a      	orrs	r2, r1
 800a5d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5de:	f003 0302 	and.w	r3, r3, #2
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00a      	beq.n	800a5fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	430a      	orrs	r2, r1
 800a5fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a600:	f003 0304 	and.w	r3, r3, #4
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00a      	beq.n	800a61e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	430a      	orrs	r2, r1
 800a61c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	430a      	orrs	r2, r1
 800a63e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a644:	f003 0310 	and.w	r3, r3, #16
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00a      	beq.n	800a662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	430a      	orrs	r2, r1
 800a660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a666:	f003 0320 	and.w	r3, r3, #32
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00a      	beq.n	800a684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	430a      	orrs	r2, r1
 800a682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d01a      	beq.n	800a6c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6ae:	d10a      	bne.n	800a6c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00a      	beq.n	800a6e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	430a      	orrs	r2, r1
 800a6e6:	605a      	str	r2, [r3, #4]
  }
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b098      	sub	sp, #96	; 0x60
 800a6f8:	af02      	add	r7, sp, #8
 800a6fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a704:	f7f7 f934 	bl	8001970 <HAL_GetTick>
 800a708:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0308 	and.w	r3, r3, #8
 800a714:	2b08      	cmp	r3, #8
 800a716:	d12f      	bne.n	800a778 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a720:	2200      	movs	r2, #0
 800a722:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f88e 	bl	800a848 <UART_WaitOnFlagUntilTimeout>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d022      	beq.n	800a778 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	e853 3f00 	ldrex	r3, [r3]
 800a73e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a746:	653b      	str	r3, [r7, #80]	; 0x50
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	461a      	mov	r2, r3
 800a74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a750:	647b      	str	r3, [r7, #68]	; 0x44
 800a752:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a754:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a758:	e841 2300 	strex	r3, r2, [r1]
 800a75c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e6      	bne.n	800a732 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2220      	movs	r2, #32
 800a768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a774:	2303      	movs	r3, #3
 800a776:	e063      	b.n	800a840 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0304 	and.w	r3, r3, #4
 800a782:	2b04      	cmp	r3, #4
 800a784:	d149      	bne.n	800a81a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a786:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a78e:	2200      	movs	r2, #0
 800a790:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f857 	bl	800a848 <UART_WaitOnFlagUntilTimeout>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d03c      	beq.n	800a81a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7be:	633b      	str	r3, [r7, #48]	; 0x30
 800a7c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e6      	bne.n	800a7a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f023 0301 	bic.w	r3, r3, #1
 800a7e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3308      	adds	r3, #8
 800a7f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7f2:	61fa      	str	r2, [r7, #28]
 800a7f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	69b9      	ldr	r1, [r7, #24]
 800a7f8:	69fa      	ldr	r2, [r7, #28]
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	617b      	str	r3, [r7, #20]
   return(result);
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1e5      	bne.n	800a7d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e012      	b.n	800a840 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2220      	movs	r2, #32
 800a81e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2220      	movs	r2, #32
 800a826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3758      	adds	r7, #88	; 0x58
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	603b      	str	r3, [r7, #0]
 800a854:	4613      	mov	r3, r2
 800a856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a858:	e049      	b.n	800a8ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a860:	d045      	beq.n	800a8ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a862:	f7f7 f885 	bl	8001970 <HAL_GetTick>
 800a866:	4602      	mov	r2, r0
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	69ba      	ldr	r2, [r7, #24]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d302      	bcc.n	800a878 <UART_WaitOnFlagUntilTimeout+0x30>
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e048      	b.n	800a90e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0304 	and.w	r3, r3, #4
 800a886:	2b00      	cmp	r3, #0
 800a888:	d031      	beq.n	800a8ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	69db      	ldr	r3, [r3, #28]
 800a890:	f003 0308 	and.w	r3, r3, #8
 800a894:	2b08      	cmp	r3, #8
 800a896:	d110      	bne.n	800a8ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2208      	movs	r2, #8
 800a89e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f000 f921 	bl	800aae8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2208      	movs	r2, #8
 800a8aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e029      	b.n	800a90e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8c8:	d111      	bne.n	800a8ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 f907 	bl	800aae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e00f      	b.n	800a90e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	69da      	ldr	r2, [r3, #28]
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	bf0c      	ite	eq
 800a8fe:	2301      	moveq	r3, #1
 800a900:	2300      	movne	r3, #0
 800a902:	b2db      	uxtb	r3, r3
 800a904:	461a      	mov	r2, r3
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d0a6      	beq.n	800a85a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
	...

0800a918 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b096      	sub	sp, #88	; 0x58
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	4613      	mov	r3, r2
 800a924:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	88fa      	ldrh	r2, [r7, #6]
 800a930:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2222      	movs	r2, #34	; 0x22
 800a940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d02d      	beq.n	800a9aa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a954:	4a40      	ldr	r2, [pc, #256]	; (800aa58 <UART_Start_Receive_DMA+0x140>)
 800a956:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a95e:	4a3f      	ldr	r2, [pc, #252]	; (800aa5c <UART_Start_Receive_DMA+0x144>)
 800a960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a968:	4a3d      	ldr	r2, [pc, #244]	; (800aa60 <UART_Start_Receive_DMA+0x148>)
 800a96a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a972:	2200      	movs	r2, #0
 800a974:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3324      	adds	r3, #36	; 0x24
 800a982:	4619      	mov	r1, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a988:	461a      	mov	r2, r3
 800a98a:	88fb      	ldrh	r3, [r7, #6]
 800a98c:	f7f7 fc9c 	bl	80022c8 <HAL_DMA_Start_IT>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d009      	beq.n	800a9aa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2210      	movs	r2, #16
 800a99a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2220      	movs	r2, #32
 800a9a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e051      	b.n	800aa4e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d018      	beq.n	800a9e4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ba:	e853 3f00 	ldrex	r3, [r3]
 800a9be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9c6:	657b      	str	r3, [r7, #84]	; 0x54
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9d2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9d8:	e841 2300 	strex	r3, r2, [r1]
 800a9dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e6      	bne.n	800a9b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	f043 0301 	orr.w	r3, r3, #1
 800a9fa:	653b      	str	r3, [r7, #80]	; 0x50
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3308      	adds	r3, #8
 800aa02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa04:	637a      	str	r2, [r7, #52]	; 0x34
 800aa06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa0c:	e841 2300 	strex	r3, r2, [r1]
 800aa10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e5      	bne.n	800a9e4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	3308      	adds	r3, #8
 800aa1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	e853 3f00 	ldrex	r3, [r3]
 800aa26:	613b      	str	r3, [r7, #16]
   return(result);
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3308      	adds	r3, #8
 800aa36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa38:	623a      	str	r2, [r7, #32]
 800aa3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	69f9      	ldr	r1, [r7, #28]
 800aa3e:	6a3a      	ldr	r2, [r7, #32]
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e5      	bne.n	800aa18 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3758      	adds	r7, #88	; 0x58
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	0800abb5 	.word	0x0800abb5
 800aa5c:	0800acdd 	.word	0x0800acdd
 800aa60:	0800ad1b 	.word	0x0800ad1b

0800aa64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b08f      	sub	sp, #60	; 0x3c
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aa80:	637b      	str	r3, [r7, #52]	; 0x34
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa8c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e6      	bne.n	800aa6c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aab4:	633b      	str	r3, [r7, #48]	; 0x30
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3308      	adds	r3, #8
 800aabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aabe:	61ba      	str	r2, [r7, #24]
 800aac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	6979      	ldr	r1, [r7, #20]
 800aac4:	69ba      	ldr	r2, [r7, #24]
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	613b      	str	r3, [r7, #16]
   return(result);
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e5      	bne.n	800aa9e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800aada:	bf00      	nop
 800aadc:	373c      	adds	r7, #60	; 0x3c
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
	...

0800aae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b095      	sub	sp, #84	; 0x54
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf8:	e853 3f00 	ldrex	r3, [r3]
 800aafc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab0e:	643b      	str	r3, [r7, #64]	; 0x40
 800ab10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e6      	bne.n	800aaf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3308      	adds	r3, #8
 800ab28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab32:	69fa      	ldr	r2, [r7, #28]
 800ab34:	4b1e      	ldr	r3, [pc, #120]	; (800abb0 <UART_EndRxTransfer+0xc8>)
 800ab36:	4013      	ands	r3, r2
 800ab38:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3308      	adds	r3, #8
 800ab40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab42:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e5      	bne.n	800ab22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d118      	bne.n	800ab90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	e853 3f00 	ldrex	r3, [r3]
 800ab6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	f023 0310 	bic.w	r3, r3, #16
 800ab72:	647b      	str	r3, [r7, #68]	; 0x44
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab7c:	61bb      	str	r3, [r7, #24]
 800ab7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab80:	6979      	ldr	r1, [r7, #20]
 800ab82:	69ba      	ldr	r2, [r7, #24]
 800ab84:	e841 2300 	strex	r3, r2, [r1]
 800ab88:	613b      	str	r3, [r7, #16]
   return(result);
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e6      	bne.n	800ab5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2220      	movs	r2, #32
 800ab94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aba4:	bf00      	nop
 800aba6:	3754      	adds	r7, #84	; 0x54
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	effffffe 	.word	0xeffffffe

0800abb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b09c      	sub	sp, #112	; 0x70
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abca:	d071      	beq.n	800acb0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800abcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abce:	2200      	movs	r2, #0
 800abd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800abe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abe8:	66bb      	str	r3, [r7, #104]	; 0x68
 800abea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abf2:	65bb      	str	r3, [r7, #88]	; 0x58
 800abf4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abfa:	e841 2300 	strex	r3, r2, [r1]
 800abfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e6      	bne.n	800abd4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3308      	adds	r3, #8
 800ac0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac10:	e853 3f00 	ldrex	r3, [r3]
 800ac14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac18:	f023 0301 	bic.w	r3, r3, #1
 800ac1c:	667b      	str	r3, [r7, #100]	; 0x64
 800ac1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3308      	adds	r3, #8
 800ac24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac26:	647a      	str	r2, [r7, #68]	; 0x44
 800ac28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1e5      	bne.n	800ac06 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	e853 3f00 	ldrex	r3, [r3]
 800ac48:	623b      	str	r3, [r7, #32]
   return(result);
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac50:	663b      	str	r3, [r7, #96]	; 0x60
 800ac52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3308      	adds	r3, #8
 800ac58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac5a:	633a      	str	r2, [r7, #48]	; 0x30
 800ac5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac62:	e841 2300 	strex	r3, r2, [r1]
 800ac66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1e5      	bne.n	800ac3a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac70:	2220      	movs	r2, #32
 800ac72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d118      	bne.n	800acb0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	e853 3f00 	ldrex	r3, [r3]
 800ac8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f023 0310 	bic.w	r3, r3, #16
 800ac92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac9c:	61fb      	str	r3, [r7, #28]
 800ac9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca0:	69b9      	ldr	r1, [r7, #24]
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	e841 2300 	strex	r3, r2, [r1]
 800aca8:	617b      	str	r3, [r7, #20]
   return(result);
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1e6      	bne.n	800ac7e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb2:	2200      	movs	r2, #0
 800acb4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d107      	bne.n	800acce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acc4:	4619      	mov	r1, r3
 800acc6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acc8:	f7fe fdfa 	bl	80098c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800accc:	e002      	b.n	800acd4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800acce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acd0:	f7f6 f866 	bl	8000da0 <HAL_UART_RxCpltCallback>
}
 800acd4:	bf00      	nop
 800acd6:	3770      	adds	r7, #112	; 0x70
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2201      	movs	r2, #1
 800acee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d109      	bne.n	800ad0c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acfe:	085b      	lsrs	r3, r3, #1
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	4619      	mov	r1, r3
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f7fe fddb 	bl	80098c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad0a:	e002      	b.n	800ad12 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7fe fdc3 	bl	8009898 <HAL_UART_RxHalfCpltCallback>
}
 800ad12:	bf00      	nop
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b086      	sub	sp, #24
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad2e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad42:	2b80      	cmp	r3, #128	; 0x80
 800ad44:	d109      	bne.n	800ad5a <UART_DMAError+0x40>
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	2b21      	cmp	r3, #33	; 0x21
 800ad4a:	d106      	bne.n	800ad5a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ad54:	6978      	ldr	r0, [r7, #20]
 800ad56:	f7ff fe85 	bl	800aa64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad64:	2b40      	cmp	r3, #64	; 0x40
 800ad66:	d109      	bne.n	800ad7c <UART_DMAError+0x62>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b22      	cmp	r3, #34	; 0x22
 800ad6c:	d106      	bne.n	800ad7c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ad76:	6978      	ldr	r0, [r7, #20]
 800ad78:	f7ff feb6 	bl	800aae8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad82:	f043 0210 	orr.w	r2, r3, #16
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad8c:	6978      	ldr	r0, [r7, #20]
 800ad8e:	f7fe fd8d 	bl	80098ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad92:	bf00      	nop
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f7fe fd77 	bl	80098ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adbe:	bf00      	nop
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b088      	sub	sp, #32
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	e853 3f00 	ldrex	r3, [r3]
 800adda:	60bb      	str	r3, [r7, #8]
   return(result);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ade2:	61fb      	str	r3, [r7, #28]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	461a      	mov	r2, r3
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	61bb      	str	r3, [r7, #24]
 800adee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf0:	6979      	ldr	r1, [r7, #20]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	e841 2300 	strex	r3, r2, [r1]
 800adf8:	613b      	str	r3, [r7, #16]
   return(result);
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1e6      	bne.n	800adce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2220      	movs	r2, #32
 800ae04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7fe fd38 	bl	8009884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae14:	bf00      	nop
 800ae16:	3720      	adds	r7, #32
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d101      	bne.n	800ae6e <HAL_UARTEx_DisableFifoMode+0x16>
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	e027      	b.n	800aebe <HAL_UARTEx_DisableFifoMode+0x66>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2224      	movs	r2, #36	; 0x24
 800ae7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f022 0201 	bic.w	r2, r2, #1
 800ae94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2220      	movs	r2, #32
 800aeb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d101      	bne.n	800aee2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aede:	2302      	movs	r3, #2
 800aee0:	e02d      	b.n	800af3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2224      	movs	r2, #36	; 0x24
 800aeee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f022 0201 	bic.w	r2, r2, #1
 800af08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f850 	bl	800afc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2220      	movs	r2, #32
 800af30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af56:	2b01      	cmp	r3, #1
 800af58:	d101      	bne.n	800af5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af5a:	2302      	movs	r3, #2
 800af5c:	e02d      	b.n	800afba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2201      	movs	r2, #1
 800af62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2224      	movs	r2, #36	; 0x24
 800af6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f022 0201 	bic.w	r2, r2, #1
 800af84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	430a      	orrs	r2, r1
 800af98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f812 	bl	800afc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2220      	movs	r2, #32
 800afac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
	...

0800afc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d108      	bne.n	800afe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afe4:	e031      	b.n	800b04a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afe6:	2310      	movs	r3, #16
 800afe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afea:	2310      	movs	r3, #16
 800afec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	0e5b      	lsrs	r3, r3, #25
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	f003 0307 	and.w	r3, r3, #7
 800affc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	0f5b      	lsrs	r3, r3, #29
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f003 0307 	and.w	r3, r3, #7
 800b00c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b00e:	7bbb      	ldrb	r3, [r7, #14]
 800b010:	7b3a      	ldrb	r2, [r7, #12]
 800b012:	4911      	ldr	r1, [pc, #68]	; (800b058 <UARTEx_SetNbDataToProcess+0x94>)
 800b014:	5c8a      	ldrb	r2, [r1, r2]
 800b016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b01a:	7b3a      	ldrb	r2, [r7, #12]
 800b01c:	490f      	ldr	r1, [pc, #60]	; (800b05c <UARTEx_SetNbDataToProcess+0x98>)
 800b01e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b020:	fb93 f3f2 	sdiv	r3, r3, r2
 800b024:	b29a      	uxth	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	7b7a      	ldrb	r2, [r7, #13]
 800b030:	4909      	ldr	r1, [pc, #36]	; (800b058 <UARTEx_SetNbDataToProcess+0x94>)
 800b032:	5c8a      	ldrb	r2, [r1, r2]
 800b034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b038:	7b7a      	ldrb	r2, [r7, #13]
 800b03a:	4908      	ldr	r1, [pc, #32]	; (800b05c <UARTEx_SetNbDataToProcess+0x98>)
 800b03c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b03e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b04a:	bf00      	nop
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	0800b100 	.word	0x0800b100
 800b05c:	0800b108 	.word	0x0800b108

0800b060 <memset>:
 800b060:	4402      	add	r2, r0
 800b062:	4603      	mov	r3, r0
 800b064:	4293      	cmp	r3, r2
 800b066:	d100      	bne.n	800b06a <memset+0xa>
 800b068:	4770      	bx	lr
 800b06a:	f803 1b01 	strb.w	r1, [r3], #1
 800b06e:	e7f9      	b.n	800b064 <memset+0x4>

0800b070 <__libc_init_array>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	4d0d      	ldr	r5, [pc, #52]	; (800b0a8 <__libc_init_array+0x38>)
 800b074:	4c0d      	ldr	r4, [pc, #52]	; (800b0ac <__libc_init_array+0x3c>)
 800b076:	1b64      	subs	r4, r4, r5
 800b078:	10a4      	asrs	r4, r4, #2
 800b07a:	2600      	movs	r6, #0
 800b07c:	42a6      	cmp	r6, r4
 800b07e:	d109      	bne.n	800b094 <__libc_init_array+0x24>
 800b080:	4d0b      	ldr	r5, [pc, #44]	; (800b0b0 <__libc_init_array+0x40>)
 800b082:	4c0c      	ldr	r4, [pc, #48]	; (800b0b4 <__libc_init_array+0x44>)
 800b084:	f000 f818 	bl	800b0b8 <_init>
 800b088:	1b64      	subs	r4, r4, r5
 800b08a:	10a4      	asrs	r4, r4, #2
 800b08c:	2600      	movs	r6, #0
 800b08e:	42a6      	cmp	r6, r4
 800b090:	d105      	bne.n	800b09e <__libc_init_array+0x2e>
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	f855 3b04 	ldr.w	r3, [r5], #4
 800b098:	4798      	blx	r3
 800b09a:	3601      	adds	r6, #1
 800b09c:	e7ee      	b.n	800b07c <__libc_init_array+0xc>
 800b09e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0a2:	4798      	blx	r3
 800b0a4:	3601      	adds	r6, #1
 800b0a6:	e7f2      	b.n	800b08e <__libc_init_array+0x1e>
 800b0a8:	0800b118 	.word	0x0800b118
 800b0ac:	0800b118 	.word	0x0800b118
 800b0b0:	0800b118 	.word	0x0800b118
 800b0b4:	0800b11c 	.word	0x0800b11c

0800b0b8 <_init>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	bf00      	nop
 800b0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0be:	bc08      	pop	{r3}
 800b0c0:	469e      	mov	lr, r3
 800b0c2:	4770      	bx	lr

0800b0c4 <_fini>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	bf00      	nop
 800b0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ca:	bc08      	pop	{r3}
 800b0cc:	469e      	mov	lr, r3
 800b0ce:	4770      	bx	lr
